
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d0e8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b30  0801d3b8  0801d3b8  0002d3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001192  08020ee8  08020ee8  00030ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000002c  0802207c  0802207c  0003207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000160  080220a8  080220a8  000320a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08022208  08022208  000d3d38  2**0
                  CONTENTS
  7 .ARM          00000000  08022208  08022208  000d3d38  2**0
                  CONTENTS
  8 .preinit_array 00000000  08022208  08022208  000d3d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08022208  08022208  00032208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0802221c  0802221c  0003221c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  24000000  08022224  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00007204  24000140  08022364  00040140  2**2
                  ALLOC
 13 ._user_heap_stack 00002004  24007344  08022364  00047344  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000d3d38  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00083d38  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000f8ce6  00000000  00000000  000d3d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017d94  00000000  00000000  001cca4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003220  00000000  00000000  001e47e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00006378  00000000  00000000  001e7a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000447fe  00000000  00000000  001edd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005b26b  00000000  00000000  00232576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0018075f  00000000  00000000  0028d7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0040df40  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009370  00000000  00000000  0040e014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00036e21  00000000  00000000  00417384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000140 	.word	0x24000140
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d3a0 	.word	0x0801d3a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000144 	.word	0x24000144
 800030c:	0801d3a0 	.word	0x0801d3a0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	; (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f00b ba58 	b.w	800bbe0 <vTaskSetApplicationTaskTag>
 8000730:	0800216d 	.word	0x0800216d

08000734 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */


void StartDefaultTask(void *argument)
{
 8000734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000736:	2064      	movs	r0, #100	; 0x64
 8000738:	f009 fdff 	bl	800a33a <osDelay>
  for(;;)
 800073c:	e7fb      	b.n	8000736 <StartDefaultTask+0x2>
	...

08000740 <togglePiFlag>:
	piUsed = piFlag;
 8000740:	4b01      	ldr	r3, [pc, #4]	; (8000748 <togglePiFlag+0x8>)
 8000742:	7018      	strb	r0, [r3, #0]
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2400018c 	.word	0x2400018c

0800074c <SystemClock_Config>:
{
 800074c:	b510      	push	{r4, lr}
 800074e:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000750:	224c      	movs	r2, #76	; 0x4c
 8000752:	2100      	movs	r1, #0
 8000754:	a809      	add	r0, sp, #36	; 0x24
 8000756:	f01b fe35 	bl	801c3c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	a801      	add	r0, sp, #4
 8000760:	f01b fe30 	bl	801c3c4 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000764:	2004      	movs	r0, #4
 8000766:	f007 fd57 	bl	8008218 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076a:	2300      	movs	r3, #0
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <SystemClock_Config+0x9c>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000776:	619a      	str	r2, [r3, #24]
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000782:	699a      	ldr	r2, [r3, #24]
 8000784:	0491      	lsls	r1, r2, #18
 8000786:	d5fc      	bpl.n	8000782 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000788:	4a18      	ldr	r2, [pc, #96]	; (80007ec <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078a:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 48;
 800078c:	2130      	movs	r1, #48	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000790:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a2:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007ae:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b4:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007b6:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ba:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f007 fd69 	bl	8008294 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2103      	movs	r1, #3
 80007c4:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c6:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007da:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007dc:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	f008 f856 	bl	8008890 <HAL_RCC_ClockConfig>
}
 80007e4:	b01c      	add	sp, #112	; 0x70
 80007e6:	bd10      	pop	{r4, pc}
 80007e8:	58024800 	.word	0x58024800
 80007ec:	58024400 	.word	0x58024400

080007f0 <PeriphCommonClock_Config>:
{
 80007f0:	b500      	push	{lr}
 80007f2:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f4:	2290      	movs	r2, #144	; 0x90
 80007f6:	2100      	movs	r1, #0
 80007f8:	a80a      	add	r0, sp, #40	; 0x28
 80007fa:	f01b fde3 	bl	801c3c4 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000802:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000804:	2150      	movs	r1, #80	; 0x50
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000806:	2080      	movs	r0, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000808:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000812:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000816:	2300      	movs	r3, #0
 8000818:	e9cd 0307 	strd	r0, r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800081c:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800081e:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000820:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000822:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000824:	f008 faba 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
}
 8000828:	b02f      	add	sp, #188	; 0xbc
 800082a:	f85d fb04 	ldr.w	pc, [sp], #4

0800082e <movingAvg>:
{
 800082e:	b570      	push	{r4, r5, r6, lr}
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8000830:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8000834:	680c      	ldr	r4, [r1, #0]
{
 8000836:	9d04      	ldr	r5, [sp, #16]
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8000838:	1ba4      	subs	r4, r4, r6
 800083a:	442c      	add	r4, r5
 800083c:	600c      	str	r4, [r1, #0]
  ptrArrNumbers[pos] = nextNum;
 800083e:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
}
 8000842:	fb94 f0f3 	sdiv	r0, r4, r3
 8000846:	bd70      	pop	{r4, r5, r6, pc}

08000848 <setModulationIndex>:
	if(DIVIDE_BY_TWO_PI(PI_angularFrq) < 1.5)
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <setModulationIndex+0x38>)
 800084a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000884 <setModulationIndex+0x3c>
 800084e:	edd3 6a00 	vldr	s13, [r3]
 8000852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000856:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800085a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000862:	d503      	bpl.n	800086c <setModulationIndex+0x24>
		modulationIndex = 0.03;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <setModulationIndex+0x40>)
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <setModulationIndex+0x44>)
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	4770      	bx	lr
		modulationIndex = DIVIDE_BY_TWO_PI(PI_angularFrq) / 50.0f;
 800086c:	bfa1      	itttt	ge
 800086e:	eddf 6a08 	vldrge	s13, [pc, #32]	; 8000890 <setModulationIndex+0x48>
 8000872:	4b05      	ldrge	r3, [pc, #20]	; (8000888 <setModulationIndex+0x40>)
 8000874:	ee87 7aa6 	vdivge.f32	s14, s15, s13
 8000878:	ed83 7a00 	vstrge	s14, [r3]
}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2400015c 	.word	0x2400015c
 8000884:	40c90fdb 	.word	0x40c90fdb
 8000888:	24000024 	.word	0x24000024
 800088c:	3cf5c28f 	.word	0x3cf5c28f
 8000890:	42480000 	.word	0x42480000

08000894 <limitAngFrq>:
	if(PI_angularFrq > MULTIPLY_BY_TWO_PI(50)) PI_angularFrq = 314.159265f;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <limitAngFrq+0x2c>)
 8000896:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80008c4 <limitAngFrq+0x30>
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a6:	dd02      	ble.n	80008ae <limitAngFrq+0x1a>
 80008a8:	ed83 7a00 	vstr	s14, [r3]
	if(PI_angularFrq < 0) PI_angularFrq = 0;
 80008ac:	4770      	bx	lr
 80008ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b6:	bf44      	itt	mi
 80008b8:	2200      	movmi	r2, #0
 80008ba:	601a      	strmi	r2, [r3, #0]
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2400015c 	.word	0x2400015c
 80008c4:	439d1463 	.word	0x439d1463

080008c8 <adjustRPM>:
	angularFrq = MULTIPLY_BY_TWO_PI(fooRPM) / 60.0f;
 80008c8:	ee07 0a90 	vmov	s15, r0
 80008cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80008e8 <adjustRPM+0x20>
 80008d0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80008ec <adjustRPM+0x24>
 80008d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <adjustRPM+0x28>)
 80008da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008e2:	ed83 7a00 	vstr	s14, [r3]
}
 80008e6:	4770      	bx	lr
 80008e8:	40c90fdb 	.word	0x40c90fdb
 80008ec:	42700000 	.word	0x42700000
 80008f0:	24000018 	.word	0x24000018

080008f4 <pi_control>:
	arg->sum = sat(arg->sum + arg->ki * error,arg->plmt, arg->nlmt);
 80008f4:	ed90 7a01 	vldr	s14, [r0, #4]
 80008f8:	edd0 7a04 	vldr	s15, [r0, #16]
 80008fc:	edd0 6a02 	vldr	s13, [r0, #8]
 8000900:	eee7 7a00 	vfma.f32	s15, s14, s0
 8000904:	ed90 7a03 	vldr	s14, [r0, #12]
	return  sat(arg->sum + error * arg->kp,arg->plmt, arg->nlmt);
 8000908:	ed90 6a00 	vldr	s12, [r0]
		x = max;
 800090c:	eef4 7a66 	vcmp.f32	s15, s13
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000914:	fe76 7aa7 	vselgt.f32	s15, s13, s15
		x = min;
 8000918:	eeb4 7a67 	vcmp.f32	s14, s15
 800091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000920:	fe77 7a27 	vselgt.f32	s15, s14, s15
	arg->sum = sat(arg->sum + arg->ki * error,arg->plmt, arg->nlmt);
 8000924:	edc0 7a04 	vstr	s15, [r0, #16]
	return  sat(arg->sum + error * arg->kp,arg->plmt, arg->nlmt);
 8000928:	eee6 7a00 	vfma.f32	s15, s12, s0
		x = max;
 800092c:	eef4 6a67 	vcmp.f32	s13, s15
 8000930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000934:	bf48      	it	mi
 8000936:	eef0 7a66 	vmovmi.f32	s15, s13
		x = min;
 800093a:	eeb4 7a67 	vcmp.f32	s14, s15
 800093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8000942:	fe37 0a27 	vselgt.f32	s0, s14, s15
 8000946:	4770      	bx	lr

08000948 <HAL_TIM_IC_CaptureCallback>:
	if(htim->Instance == TIM23)
 8000948:	6803      	ldr	r3, [r0, #0]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_TIM_IC_CaptureCallback+0x20>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d10a      	bne.n	8000966 <HAL_TIM_IC_CaptureCallback+0x1e>
		counterEnc = __HAL_TIM_GET_COUNTER(htim);
 8000950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000952:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_TIM_IC_CaptureCallback+0x24>)
 8000954:	6013      	str	r3, [r2, #0]
		signedCounterEnc = (int32_t)counterEnc;
 8000956:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000958:	6013      	str	r3, [r2, #0]
		position = signedCounterEnc/4;
 800095a:	2b00      	cmp	r3, #0
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800095e:	bfb8      	it	lt
 8000960:	3303      	addlt	r3, #3
 8000962:	109b      	asrs	r3, r3, #2
 8000964:	6013      	str	r3, [r2, #0]
}
 8000966:	4770      	bx	lr
 8000968:	4000e000 	.word	0x4000e000
 800096c:	2400017c 	.word	0x2400017c
 8000970:	240001a0 	.word	0x240001a0
 8000974:	24000194 	.word	0x24000194

08000978 <adjustMIAndFreq>:
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 8000978:	ee07 0a90 	vmov	s15, r0
	modulationIndex = foo_MI;
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <adjustMIAndFreq+0x34>)
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 800097e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80009b0 <adjustMIAndFreq+0x38>
	counter = 0; // if piUsed == 0 ise counter i sifirla gibi olabilir.
 8000982:	2200      	movs	r2, #0
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 8000984:	eef8 7a67 	vcvt.f32.u32	s15, s15
	modulationIndex = foo_MI;
 8000988:	ed83 0a00 	vstr	s0, [r3]
	frq = foo_freq;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <adjustMIAndFreq+0x3c>)
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 800098e:	ee67 7a87 	vmul.f32	s15, s15, s14
	frq = foo_freq;
 8000992:	6018      	str	r0, [r3, #0]
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <adjustMIAndFreq+0x40>)
 8000996:	edc3 7a00 	vstr	s15, [r3]
	upperLimit = (5000/foo_freq);
 800099a:	f241 3388 	movw	r3, #5000	; 0x1388
 800099e:	fbb3 f0f0 	udiv	r0, r3, r0
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <adjustMIAndFreq+0x44>)
 80009a4:	6018      	str	r0, [r3, #0]
	counter = 0; // if piUsed == 0 ise counter i sifirla gibi olabilir.
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <adjustMIAndFreq+0x48>)
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	4770      	bx	lr
 80009ac:	24000024 	.word	0x24000024
 80009b0:	40c90fdb 	.word	0x40c90fdb
 80009b4:	2400001c 	.word	0x2400001c
 80009b8:	24000018 	.word	0x24000018
 80009bc:	24000030 	.word	0x24000030
 80009c0:	24000178 	.word	0x24000178

080009c4 <adjustMIAndFreqforPI>:
	modulationIndex = foo_MI;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <adjustMIAndFreqforPI+0x2c>)
	frq = foo_freq;
 80009c6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	upperLimit = (5000/foo_freq);
 80009ca:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80009f4 <adjustMIAndFreqforPI+0x30>
	counter = 0;
 80009ce:	2200      	movs	r2, #0
	modulationIndex = foo_MI;
 80009d0:	edc3 0a00 	vstr	s1, [r3]
	frq = foo_freq;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <adjustMIAndFreqforPI+0x34>)
 80009d6:	edc3 7a00 	vstr	s15, [r3]
	upperLimit = (5000/foo_freq);
 80009da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <adjustMIAndFreqforPI+0x38>)
 80009e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009e4:	edc3 7a00 	vstr	s15, [r3]
	counter = 0;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <adjustMIAndFreqforPI+0x3c>)
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	24000024 	.word	0x24000024
 80009f4:	459c4000 	.word	0x459c4000
 80009f8:	2400001c 	.word	0x2400001c
 80009fc:	24000030 	.word	0x24000030
 8000a00:	24000178 	.word	0x24000178

08000a04 <motorStart>:
{
 8000a04:	b508      	push	{r3, lr}
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000a06:	210c      	movs	r1, #12
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <motorStart+0x2c>)
 8000a0a:	f009 fb63 	bl	800a0d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a0e:	210c      	movs	r1, #12
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <motorStart+0x30>)
 8000a12:	f009 fb5f 	bl	800a0d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a16:	2100      	movs	r1, #0
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <motorStart+0x34>)
 8000a1a:	f009 fb5b 	bl	800a0d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim14);
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <motorStart+0x38>)
 8000a20:	f008 ff60 	bl	80098e4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 8000a24:	213c      	movs	r1, #60	; 0x3c
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <motorStart+0x3c>)
}
 8000a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 8000a2c:	f008 bfa0 	b.w	8009970 <HAL_TIM_Encoder_Start_IT>
 8000a30:	240070ac 	.word	0x240070ac
 8000a34:	24006ee4 	.word	0x24006ee4
 8000a38:	24006fb4 	.word	0x24006fb4
 8000a3c:	240071ac 	.word	0x240071ac
 8000a40:	24007160 	.word	0x24007160

08000a44 <main>:
{
 8000a44:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000a48:	b0a3      	sub	sp, #140	; 0x8c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	2100      	movs	r1, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a4e:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a50:	a815      	add	r0, sp, #84	; 0x54
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a52:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a54:	f01b fcb6 	bl	801c3c4 <memset>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000a58:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 8000a5a:	f005 fd15 	bl	8006488 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a5e:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
 8000a62:	4bd8      	ldr	r3, [pc, #864]	; (8000dc4 <main+0x380>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a64:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a66:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a6a:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a6c:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a70:	4bd5      	ldr	r3, [pc, #852]	; (8000dc8 <main+0x384>)
 8000a72:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a74:	f005 fd2a 	bl	80064cc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000a78:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a7c:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a7e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000a82:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a84:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a88:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000a8c:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a90:	f005 fd1c 	bl	80064cc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000a94:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a96:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a98:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000a9c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000aa0:	2316      	movs	r3, #22
 8000aa2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000aa6:	f240 1301 	movw	r3, #257	; 0x101
 8000aaa:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aae:	f005 fd0d 	bl	80064cc <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ab2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ab6:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ab8:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000abc:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000abe:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ac2:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000ac4:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000ac8:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000acc:	f005 fcfe 	bl	80064cc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000ad0:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ad2:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ad4:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000ad8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000adc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ae0:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae4:	f005 fcf2 	bl	80064cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f005 fcdd 	bl	80064a8 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000aee:	4bb7      	ldr	r3, [pc, #732]	; (8000dcc <main+0x388>)
 8000af0:	695a      	ldr	r2, [r3, #20]
 8000af2:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000af6:	d111      	bne.n	8000b1c <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000afc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b12:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b18:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b1c:	4aab      	ldr	r2, [pc, #684]	; (8000dcc <main+0x388>)
 8000b1e:	6953      	ldr	r3, [r2, #20]
 8000b20:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000b24:	d123      	bne.n	8000b6e <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b32:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b36:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b3a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000b3e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b40:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b44:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b46:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b4a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b4c:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000b50:	d2f9      	bcs.n	8000b46 <main+0x102>
    } while(sets-- != 0U);
 8000b52:	3b20      	subs	r3, #32
 8000b54:	f113 0f20 	cmn.w	r3, #32
 8000b58:	d1f2      	bne.n	8000b40 <main+0xfc>
 8000b5a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b5e:	6953      	ldr	r3, [r2, #20]
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6153      	str	r3, [r2, #20]
 8000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b6a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000b6e:	f005 fbe7 	bl	8006340 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2400      	movs	r4, #0
  SystemClock_Config();
 8000b74:	f7ff fdea 	bl	800074c <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000b7a:	f7ff fe39 	bl	80007f0 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	2214      	movs	r2, #20
 8000b80:	2100      	movs	r1, #0
 8000b82:	a815      	add	r0, sp, #84	; 0x54
 8000b84:	f01b fc1e 	bl	801c3c4 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b91      	ldr	r3, [pc, #580]	; (8000dd0 <main+0x38c>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8e:	4891      	ldr	r0, [pc, #580]	; (8000dd4 <main+0x390>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000b94:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000b98:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	f042 0202 	orr.w	r2, r2, #2
  hltdc.Instance = LTDC;
 8000ba4:	4d8c      	ldr	r5, [pc, #560]	; (8000dd8 <main+0x394>)
  pLayerCfg.FBStartAdress = 0x70000000;
 8000ba6:	f04f 0805 	mov.w	r8, #5
  hospi1.Init.FifoThreshold = 4;
 8000baa:	f04f 0b04 	mov.w	fp, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bb6:	f002 0202 	and.w	r2, r2, #2
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bc6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bce:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000bd2:	9201      	str	r2, [sp, #4]
 8000bd4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bda:	f042 0208 	orr.w	r2, r2, #8
 8000bde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000be2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000be6:	f002 0208 	and.w	r2, r2, #8
 8000bea:	9202      	str	r2, [sp, #8]
 8000bec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bf2:	f042 0210 	orr.w	r2, r2, #16
 8000bf6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bfe:	f002 0210 	and.w	r2, r2, #16
 8000c02:	9203      	str	r2, [sp, #12]
 8000c04:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c0a:	f042 0201 	orr.w	r2, r2, #1
 8000c0e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c16:	f002 0201 	and.w	r2, r2, #1
 8000c1a:	9204      	str	r2, [sp, #16]
 8000c1c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c2e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000c32:	9205      	str	r2, [sp, #20]
 8000c34:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c3a:	f042 0204 	orr.w	r2, r2, #4
 8000c3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c46:	f002 0204 	and.w	r2, r2, #4
 8000c4a:	9206      	str	r2, [sp, #24]
 8000c4c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c52:	f042 0220 	orr.w	r2, r2, #32
 8000c56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	9307      	str	r3, [sp, #28]
 8000c66:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c68:	f005 ff08 	bl	8006a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	485a      	ldr	r0, [pc, #360]	; (8000ddc <main+0x398>)
 8000c74:	f005 ff02 	bl	8006a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	210c      	movs	r1, #12
 8000c7c:	4858      	ldr	r0, [pc, #352]	; (8000de0 <main+0x39c>)
 8000c7e:	f005 fefd 	bl	8006a7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c86:	a915      	add	r1, sp, #84	; 0x54
 8000c88:	4852      	ldr	r0, [pc, #328]	; (8000dd4 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	e9cd 3615 	strd	r3, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f005 fd67 	bl	8006764 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000c96:	a915      	add	r1, sp, #84	; 0x54
 8000c98:	4850      	ldr	r0, [pc, #320]	; (8000ddc <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f005 fd5f 	bl	8006764 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	a915      	add	r1, sp, #84	; 0x54
 8000ca8:	484d      	ldr	r0, [pc, #308]	; (8000de0 <main+0x39c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000caa:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	e9cd a615 	strd	sl, r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f005 fd56 	bl	8006764 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000cb8:	484a      	ldr	r0, [pc, #296]	; (8000de4 <main+0x3a0>)
 8000cba:	4b4b      	ldr	r3, [pc, #300]	; (8000de8 <main+0x3a4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cbc:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000cbe:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cc0:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cc2:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cc6:	f005 fc29 	bl	800651c <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance = DMA2D;
 8000cce:	4847      	ldr	r0, [pc, #284]	; (8000dec <main+0x3a8>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cd0:	4a47      	ldr	r2, [pc, #284]	; (8000df0 <main+0x3ac>)
  hdma2d.Init.OutputOffset = 0;
 8000cd2:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cd6:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cda:	f005 fc7a 	bl	80065d2 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cde:	2234      	movs	r2, #52	; 0x34
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	a815      	add	r0, sp, #84	; 0x54
 8000ce4:	f01b fb6e 	bl	801c3c4 <memset>
  hltdc.Instance = LTDC;
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <main+0x3b0>)
  hltdc.Init.VerticalSync = 9;
 8000cea:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000cec:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000cee:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8000cf2:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8000cf6:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cf8:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000cfa:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cfe:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000d02:	2309      	movs	r3, #9
 8000d04:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000d0e:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d12:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000d14:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8000d18:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d1c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000d20:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d24:	f006 fafe 	bl	8007324 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000d28:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 8000d2a:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 8000d2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d32:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d34:	971c      	str	r7, [sp, #112]	; 0x70
  pLayerCfg.WindowX0 = 0;
 8000d36:	9415      	str	r4, [sp, #84]	; 0x54
  hospi1.Init.ChipSelectHighTime = 2;
 8000d38:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 8000d3a:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Red = 0;
 8000d3e:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  hospi1.Instance = OCTOSPI1;
 8000d42:	4d2d      	ldr	r5, [pc, #180]	; (8000df8 <main+0x3b4>)
  pLayerCfg.Alpha0 = 0;
 8000d44:	e9cd 141a 	strd	r1, r4, [sp, #104]	; 0x68
  pLayerCfg.FBStartAdress = 0x70000000;
 8000d48:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 8000d4c:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0x70000000;
 8000d50:	e9cd 811d 	strd	r8, r1, [sp, #116]	; 0x74
  pLayerCfg.WindowY0 = 0;
 8000d54:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d58:	a915      	add	r1, sp, #84	; 0x54
 8000d5a:	4622      	mov	r2, r4
  hospi1.Init.DeviceSize = 32;
 8000d5c:	f04f 0820 	mov.w	r8, #32
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d60:	e9cd 3618 	strd	r3, r6, [sp, #96]	; 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d64:	f006 fba9 	bl	80074ba <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000d68:	2318      	movs	r3, #24
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	a815      	add	r0, sp, #84	; 0x54
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f01b fb28 	bl	801c3c4 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <main+0x3b8>)
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000d76:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d78:	60ac      	str	r4, [r5, #8]
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000d7a:	636c      	str	r4, [r5, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000d7c:	642c      	str	r4, [r5, #64]	; 0x40
  hospi1.Init.FifoThreshold = 4;
 8000d7e:	e9c5 2b00 	strd	r2, fp, [r5]
  hospi1.Init.DeviceSize = 32;
 8000d82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d86:	e9c5 2803 	strd	r2, r8, [r5, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000d8a:	2208      	movs	r2, #8
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000d8c:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000d90:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.MaxTran = 0;
 8000d94:	e9c5 240e 	strd	r2, r4, [r5, #56]	; 0x38
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000d98:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.ChipSelectBoundary = 0;
 8000d9c:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000da0:	f006 fd0e 	bl	80077c0 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000da4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000da8:	a915      	add	r1, sp, #84	; 0x54
 8000daa:	4628      	mov	r0, r5
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000dac:	9218      	str	r2, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000dae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
  sOspiManagerCfg.NCSPort = 1;
 8000db2:	9617      	str	r6, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000db4:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000db6:	f241 3288 	movw	r2, #5000	; 0x1388
  sOspiManagerCfg.DQSPort = 1;
 8000dba:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dbe:	f006 ff89 	bl	8007cd4 <HAL_OSPIM_Config>
 8000dc2:	e01d      	b.n	8000e00 <main+0x3bc>
 8000dc4:	03000012 	.word	0x03000012
 8000dc8:	01010001 	.word	0x01010001
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58021800 	.word	0x58021800
 8000dd8:	24007000 	.word	0x24007000
 8000ddc:	58020c00 	.word	0x58020c00
 8000de0:	58020800 	.word	0x58020800
 8000de4:	24006f90 	.word	0x24006f90
 8000de8:	58024c00 	.word	0x58024c00
 8000dec:	240070f8 	.word	0x240070f8
 8000df0:	52001000 	.word	0x52001000
 8000df4:	50001000 	.word	0x50001000
 8000df8:	24006f30 	.word	0x24006f30
 8000dfc:	52005000 	.word	0x52005000
  HAL_OSPI_DeInit(&hospi1);
 8000e00:	4628      	mov	r0, r5
 8000e02:	f006 fd53 	bl	80078ac <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000e06:	f240 1201 	movw	r2, #257	; 0x101
  BSP_OSPI_NOR_DeInit(0);
 8000e0a:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000e0c:	4da3      	ldr	r5, [pc, #652]	; (800109c <main+0x658>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000e0e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000e12:	f004 fef3 	bl	8005bfc <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000e16:	a90e      	add	r1, sp, #56	; 0x38
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f004 ffdf 	bl	8005ddc <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f004 feb4 	bl	8005b8c <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000e24:	2318      	movs	r3, #24
 8000e26:	4621      	mov	r1, r4
 8000e28:	a815      	add	r0, sp, #84	; 0x54
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	f01b faca 	bl	801c3c4 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000e30:	2210      	movs	r2, #16
 8000e32:	4621      	mov	r1, r4
 8000e34:	a80a      	add	r0, sp, #40	; 0x28
 8000e36:	f01b fac5 	bl	801c3c4 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	2214      	movs	r2, #20
 8000e3e:	a80e      	add	r0, sp, #56	; 0x38
 8000e40:	f01b fac0 	bl	801c3c4 <memset>
  hospi2.Instance = OCTOSPI2;
 8000e44:	4a96      	ldr	r2, [pc, #600]	; (80010a0 <main+0x65c>)
  hospi2.Init.DeviceSize = 24;
 8000e46:	2318      	movs	r3, #24
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000e48:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e4a:	60ac      	str	r4, [r5, #8]
  hospi2.Init.MaxTran = 0;
 8000e4c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi2.Init.FifoThreshold = 4;
 8000e4e:	e9c5 2b00 	strd	r2, fp, [r5]
  hospi2.Init.DeviceSize = 24;
 8000e52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e56:	e9c5 b405 	strd	fp, r4, [r5, #20]
  hospi2.Init.DeviceSize = 24;
 8000e5a:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000e5e:	f04f 5b80 	mov.w	fp, #268435456	; 0x10000000
 8000e62:	2317      	movs	r3, #23
 8000e64:	e9c5 b30b 	strd	fp, r3, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 8000e68:	f44f 73c8 	mov.w	r3, #400	; 0x190
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e6c:	f04f 0b80 	mov.w	fp, #128	; 0x80
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e70:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.Refresh = 400;
 8000e74:	642b      	str	r3, [r5, #64]	; 0x40
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000e76:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000e7a:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000e7e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000e82:	f006 fc9d 	bl	80077c0 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000e86:	4b87      	ldr	r3, [pc, #540]	; (80010a4 <main+0x660>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8c:	a915      	add	r1, sp, #84	; 0x54
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000e8e:	9318      	str	r3, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000e90:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e94:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 8000e96:	9717      	str	r7, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000e98:	9319      	str	r3, [sp, #100]	; 0x64
  sOspiManagerCfg.DQSPort = 2;
 8000e9a:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e9e:	f006 ff19 	bl	8007cd4 <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000ea2:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea8:	a90a      	add	r1, sp, #40	; 0x28
 8000eaa:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000eac:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000eb0:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2760      	movs	r7, #96	; 0x60
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000eb4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eb8:	f006 fd5a 	bl	8007970 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000ebc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec4:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000ec6:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000ec8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ecc:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000ece:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000ed0:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.Address      = 0;
 8000ed2:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000ed4:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ed6:	f006 fd71 	bl	80079bc <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000eda:	eb0d 0108 	add.w	r1, sp, r8
 8000ede:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000ee0:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000ee2:	f006 fe83 	bl	8007bec <HAL_OSPI_MemoryMapped>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee6:	221c      	movs	r2, #28
 8000ee8:	4621      	mov	r1, r4
 8000eea:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	940c      	str	r4, [sp, #48]	; 0x30
  htim1.Instance = TIM1;
 8000eee:	4d6e      	ldr	r5, [pc, #440]	; (80010a8 <main+0x664>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef4:	f01b fa66 	bl	801c3c4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef8:	2234      	movs	r2, #52	; 0x34
 8000efa:	4621      	mov	r1, r4
 8000efc:	a815      	add	r0, sp, #84	; 0x54
 8000efe:	f01b fa61 	bl	801c3c4 <memset>
  htim1.Instance = TIM1;
 8000f02:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <main+0x668>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f04:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f06:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8000f0a:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f0c:	f8c5 b018 	str.w	fp, [r5, #24]
  htim1.Init.Prescaler = 0;
 8000f10:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 28800-1;
 8000f14:	f247 037f 	movw	r3, #28799	; 0x707f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f1c:	f008 fee8 	bl	8009cf0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f20:	a90a      	add	r1, sp, #40	; 0x28
 8000f22:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	940c      	str	r4, [sp, #48]	; 0x30
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f26:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2a:	f009 f8d5 	bl	800a0d8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f2e:	4652      	mov	r2, sl
 8000f30:	a90e      	add	r1, sp, #56	; 0x38
 8000f32:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f34:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f36:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.Pulse = 1;
 8000f38:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f3c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f40:	f008 ffa2 	bl	8009e88 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f48:	a915      	add	r1, sp, #84	; 0x54
 8000f4a:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4c:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f4e:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f50:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f52:	e9cd 241a 	strd	r2, r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f5a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f5e:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f62:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f66:	f009 f909 	bl	800a17c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f000 fdaa 	bl	8001ac4 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000f70:	4d4f      	ldr	r5, [pc, #316]	; (80010b0 <main+0x66c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f72:	4621      	mov	r1, r4
 8000f74:	221c      	movs	r2, #28
 8000f76:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	9410      	str	r4, [sp, #64]	; 0x40
 8000f7a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	f01b fa21 	bl	801c3c4 <memset>
  htim4.Init.Period = 28800-1;
 8000f82:	f247 037f 	movw	r3, #28799	; 0x707f
  htim4.Instance = TIM4;
 8000f86:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <main+0x670>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f88:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f8a:	f8c5 8008 	str.w	r8, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f8e:	f8c5 b018 	str.w	fp, [r5, #24]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim4.Init.Prescaler = 0;
 8000f96:	e9c5 2400 	strd	r2, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f9a:	f008 fea9 	bl	8009cf0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f9e:	a90e      	add	r1, sp, #56	; 0x38
 8000fa0:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa6:	f009 f897 	bl	800a0d8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000faa:	4652      	mov	r2, sl
 8000fac:	a915      	add	r1, sp, #84	; 0x54
 8000fae:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb0:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb2:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8000fb4:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fb8:	f008 ff66 	bl	8009e88 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	f000 fd81 	bl	8001ac4 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000fc2:	4d3d      	ldr	r5, [pc, #244]	; (80010b8 <main+0x674>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	221c      	movs	r2, #28
 8000fc8:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	9410      	str	r4, [sp, #64]	; 0x40
 8000fcc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd0:	f01b f9f8 	bl	801c3c4 <memset>
  htim5.Init.Period = 28800-1;
 8000fd4:	f247 037f 	movw	r3, #28799	; 0x707f
  htim5.Instance = TIM5;
 8000fd8:	4a38      	ldr	r2, [pc, #224]	; (80010bc <main+0x678>)
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fda:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fdc:	f8c5 8008 	str.w	r8, [r5, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe0:	f8c5 b018 	str.w	fp, [r5, #24]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim5.Init.Prescaler = 0;
 8000fe8:	e9c5 2400 	strd	r2, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fec:	f008 fe80 	bl	8009cf0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ff0:	a90e      	add	r1, sp, #56	; 0x38
 8000ff2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ff8:	f009 f86e 	bl	800a0d8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	a915      	add	r1, sp, #84	; 0x54
 8001000:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001002:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8001006:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100a:	f008 ff3d 	bl	8009e88 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 800100e:	4628      	mov	r0, r5
 8001010:	f000 fd58 	bl	8001ac4 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8001014:	482a      	ldr	r0, [pc, #168]	; (80010c0 <main+0x67c>)
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <main+0x680>)
  htim23.Instance = TIM23;
 8001018:	4d2b      	ldr	r5, [pc, #172]	; (80010c8 <main+0x684>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	6084      	str	r4, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	6184      	str	r4, [r0, #24]
  htim14.Init.Prescaler = 0;
 800101e:	e9c0 3400 	strd	r3, r4, [r0]
  htim14.Init.Period = 57600-1;
 8001022:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800102a:	f008 fe31 	bl	8009c90 <HAL_TIM_Base_Init>
  htim23.Instance = TIM23;
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <main+0x688>)
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001030:	a915      	add	r1, sp, #84	; 0x54
 8001032:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	9410      	str	r4, [sp, #64]	; 0x40
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	60ac      	str	r4, [r5, #8]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	61ac      	str	r4, [r5, #24]
  sConfig.IC2Filter = 0;
 800103a:	941d      	str	r4, [sp, #116]	; 0x74
  htim23.Init.Prescaler = 0;
 800103c:	e9c5 3400 	strd	r3, r4, [r5]
  htim23.Init.Period = 4294967295;
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800104c:	e9cd 9415 	strd	r9, r4, [sp, #84]	; 0x54
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001050:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001054:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001058:	e9cd 641b 	strd	r6, r4, [sp, #108]	; 0x6c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800105c:	f008 fe78 	bl	8009d50 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001060:	a90e      	add	r1, sp, #56	; 0x38
 8001062:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001068:	f009 f836 	bl	800a0d8 <HAL_TIMEx_MasterConfigSynchronization>
  MX_TouchGFX_Init();
 800106c:	f000 fe87 	bl	8001d7e <MX_TouchGFX_Init>
  motorStart();
 8001070:	f7ff fcc8 	bl	8000a04 <motorStart>
  osKernelInitialize();
 8001074:	f009 f8ec 	bl	800a250 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001078:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <main+0x68c>)
 800107a:	4621      	mov	r1, r4
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <main+0x690>)
 800107e:	f009 f913 	bl	800a2a8 <osThreadNew>
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <main+0x694>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001084:	4a15      	ldr	r2, [pc, #84]	; (80010dc <main+0x698>)
 8001086:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001088:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800108a:	4815      	ldr	r0, [pc, #84]	; (80010e0 <main+0x69c>)
 800108c:	f009 f90c 	bl	800a2a8 <osThreadNew>
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <main+0x6a0>)
 8001092:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001094:	f009 f8ee 	bl	800a274 <osKernelStart>
  while (1)
 8001098:	e7fe      	b.n	8001098 <main+0x654>
 800109a:	bf00      	nop
 800109c:	240071f8 	.word	0x240071f8
 80010a0:	5200a000 	.word	0x5200a000
 80010a4:	00010002 	.word	0x00010002
 80010a8:	240070ac 	.word	0x240070ac
 80010ac:	40010000 	.word	0x40010000
 80010b0:	24006ee4 	.word	0x24006ee4
 80010b4:	40000800 	.word	0x40000800
 80010b8:	24006fb4 	.word	0x24006fb4
 80010bc:	40000c00 	.word	0x40000c00
 80010c0:	240071ac 	.word	0x240071ac
 80010c4:	40002000 	.word	0x40002000
 80010c8:	24007160 	.word	0x24007160
 80010cc:	4000e000 	.word	0x4000e000
 80010d0:	0801d438 	.word	0x0801d438
 80010d4:	08000735 	.word	0x08000735
 80010d8:	24006ee0 	.word	0x24006ee0
 80010dc:	0801d414 	.word	0x0801d414
 80010e0:	08001d83 	.word	0x08001d83
 80010e4:	240070a8 	.word	0x240070a8

080010e8 <HAL_TIM_PeriodElapsedCallback>:
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 5 kHz in every 0.0002 s
{
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM14)
 80010e8:	6802      	ldr	r2, [r0, #0]
 80010ea:	4b89      	ldr	r3, [pc, #548]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80010ec:	429a      	cmp	r2, r3
{
 80010ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f2:	4605      	mov	r5, r0
 80010f4:	ed2d 8b04 	vpush	{d8-d9}
 80010f8:	b085      	sub	sp, #20
	if (htim->Instance == TIM14)
 80010fa:	f040 80e5 	bne.w	80012c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
	{
		float theta = (frq * TWO_PI * counter) * time;
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 80010fe:	4b85      	ldr	r3, [pc, #532]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001100:	4a85      	ldr	r2, [pc, #532]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001102:	edd3 9a00 	vldr	s19, [r3]
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;

		if(modulationIndex != 0)
 8001106:	4698      	mov	r8, r3
 8001108:	f8d2 a000 	ldr.w	sl, [r2]
 800110c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8001110:	4a82      	ldr	r2, [pc, #520]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001112:	4e83      	ldr	r6, [pc, #524]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001114:	f8d2 9000 	ldr.w	r9, [r2]
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	4a81      	ldr	r2, [pc, #516]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800111e:	6817      	ldr	r7, [r2, #0]
 8001120:	f000 80dd 	beq.w	80012de <HAL_TIM_PeriodElapsedCallback+0x1f6>
		float theta = (frq * TWO_PI * counter) * time;
 8001124:	4b80      	ldr	r3, [pc, #512]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x240>)
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8001126:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
		float theta = (frq * TWO_PI * counter) * time;
 800112a:	6834      	ldr	r4, [r6, #0]
 800112c:	ed93 8a00 	vldr	s16, [r3]
 8001130:	eddf 7a7e 	vldr	s15, [pc, #504]	; 800132c <HAL_TIM_PeriodElapsedCallback+0x244>
 8001134:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8001138:	4b7d      	ldr	r3, [pc, #500]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800113a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800113e:	ee07 4a90 	vmov	s15, r4
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));

			counter++;
 8001142:	3401      	adds	r4, #1
		float theta = (frq * TWO_PI * counter) * time;
 8001144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001148:	ee28 8a27 	vmul.f32	s16, s16, s15
 800114c:	edd3 7a00 	vldr	s15, [r3]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8001150:	4b78      	ldr	r3, [pc, #480]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x24c>)
		float theta = (frq * TWO_PI * counter) * time;
 8001152:	ee28 8a27 	vmul.f32	s16, s16, s15
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8001156:	edd3 8a00 	vldr	s17, [r3]
 800115a:	eef8 8a68 	vcvt.f32.u32	s17, s17
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 800115e:	eeb0 0a48 	vmov.f32	s0, s16
 8001162:	f01a ffe1 	bl	801c128 <sinf>
 8001166:	eef0 7a49 	vmov.f32	s15, s18
 800116a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800116e:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8001172:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001338 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001176:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 800117a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800117e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001182:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8001186:	f01a ffcf 	bl	801c128 <sinf>
 800118a:	eef0 7a49 	vmov.f32	s15, s18
 800118e:	ee29 0a80 	vmul.f32	s0, s19, s0
 8001192:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8001196:	ed9f 0a69 	vldr	s0, [pc, #420]	; 800133c <HAL_TIM_PeriodElapsedCallback+0x254>
 800119a:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
 800119e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80011a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a6:	edc9 7a10 	vstr	s15, [r9, #64]	; 0x40
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011aa:	f01a ffbd 	bl	801c128 <sinf>
 80011ae:	ee29 0a80 	vmul.f32	s0, s19, s0

			counter = 0;

		}

		if(counter > upperLimit)
 80011b2:	4a63      	ldr	r2, [pc, #396]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x258>)
			counter++;
 80011b4:	6034      	str	r4, [r6, #0]
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011b6:	eea0 9a09 	vfma.f32	s18, s0, s18
		if(counter > upperLimit)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	4294      	cmp	r4, r2
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));
 80011be:	ee28 9a89 	vmul.f32	s18, s17, s18
 80011c2:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 80011c6:	ed87 9a0d 	vstr	s18, [r7, #52]	; 0x34
		if(counter > upperLimit)
 80011ca:	f200 8090 	bhi.w	80012ee <HAL_TIM_PeriodElapsedCallback+0x206>
		{
			counter = 0;
		}

		indx++;
 80011ce:	4a5d      	ldr	r2, [pc, #372]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80011d0:	6813      	ldr	r3, [r2, #0]
 80011d2:	9203      	str	r2, [sp, #12]
 80011d4:	3301      	adds	r3, #1
		if(indx== 500)
 80011d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
		indx++;
 80011da:	6013      	str	r3, [r2, #0]
		if(indx== 500)
 80011dc:	f040 8089 	bne.w	80012f2 <HAL_TIM_PeriodElapsedCallback+0x20a>
		{
			rpm_ref = angularFrq*60/TWO_PI;
 80011e0:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8001380 <HAL_TIM_PeriodElapsedCallback+0x298>
 80011e4:	eddf 5a58 	vldr	s11, [pc, #352]	; 8001348 <HAL_TIM_PeriodElapsedCallback+0x260>
 80011e8:	edd9 7a00 	vldr	s15, [r9]
 80011ec:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800132c <HAL_TIM_PeriodElapsedCallback+0x244>
 80011f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x264>)
			speed = (position - oldpos) * 10; // speed in clicks/sec
			frequencyEnc = speed / 1000.0f;
			angularFrqEnc = frequencyEnc * TWO_PI;
			rpm = (speed * 60)/1000;
*/
			speed = (position - oldpos) * 10; // speed in clicks/sec
 80011f6:	4f56      	ldr	r7, [pc, #344]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011f8:	4e56      	ldr	r6, [pc, #344]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x26c>)
			rpm_ref = angularFrq*60/TWO_PI;
 80011fa:	ee87 7a80 	vdiv.f32	s14, s15, s0
			float fl_rpm = (0.0707304 * speed) - 8.75;//(0.994 * ((0.0707304 * speed) - 8.75)) - 6.1246;//(1.0059 * ((0.0707304 * speed) - 8.75)) + 6.2507;//(1.04 * ((1.1335*((speed * 60))/1000.0) + 15.8)) -25.182; //1.1335*((speed * 60)/1000.0) + 15.8;
			rpm = (int)fl_rpm;
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;

			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 80011fe:	f8df a184 	ldr.w	sl, [pc, #388]	; 8001384 <HAL_TIM_PeriodElapsedCallback+0x29c>
			speed = (position - oldpos) * 10; // speed in clicks/sec
 8001202:	6832      	ldr	r2, [r6, #0]
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001204:	f8df b180 	ldr.w	fp, [pc, #384]	; 8001388 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;
 8001208:	4c53      	ldr	r4, [pc, #332]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x270>)
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 800120a:	4954      	ldr	r1, [pc, #336]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800120c:	4854      	ldr	r0, [pc, #336]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x278>)
			float fl_rpm = (0.0707304 * speed) - 8.75;//(0.994 * ((0.0707304 * speed) - 8.75)) - 6.1246;//(1.0059 * ((0.0707304 * speed) - 8.75)) + 6.2507;//(1.04 * ((1.1335*((speed * 60))/1000.0) + 15.8)) -25.182; //1.1335*((speed * 60)/1000.0) + 15.8;
 800120e:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 8001300 <HAL_TIM_PeriodElapsedCallback+0x218>
			rpm_ref = angularFrq*60/TWO_PI;
 8001212:	ed83 7a00 	vstr	s14, [r3]
			speed = (position - oldpos) * 10; // speed in clicks/sec
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	1a9a      	subs	r2, r3, r2
 800121a:	230a      	movs	r3, #10
 800121c:	4353      	muls	r3, r2
 800121e:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x27c>)
			float fl_rpm = (0.0707304 * speed) - 8.75;//(0.994 * ((0.0707304 * speed) - 8.75)) - 6.1246;//(1.0059 * ((0.0707304 * speed) - 8.75)) + 6.2507;//(1.04 * ((1.1335*((speed * 60))/1000.0) + 15.8)) -25.182; //1.1335*((speed * 60)/1000.0) + 15.8;
 8001220:	ee07 3a90 	vmov	s15, r3
			speed = (position - oldpos) * 10; // speed in clicks/sec
 8001224:	6013      	str	r3, [r2, #0]
			rpm = (int)fl_rpm;
 8001226:	4a50      	ldr	r2, [pc, #320]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x280>)
			float fl_rpm = (0.0707304 * speed) - 8.75;//(0.994 * ((0.0707304 * speed) - 8.75)) - 6.1246;//(1.0059 * ((0.0707304 * speed) - 8.75)) + 6.2507;//(1.04 * ((1.1335*((speed * 60))/1000.0) + 15.8)) -25.182; //1.1335*((speed * 60)/1000.0) + 15.8;
 8001228:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800122c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8001308 <HAL_TIM_PeriodElapsedCallback+0x220>
 8001230:	eea6 7b04 	vfma.f64	d7, d6, d4
 8001234:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			rpm = (int)fl_rpm;
 8001238:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800123c:	edc2 7a00 	vstr	s15, [r2]
 8001240:	ee17 3a90 	vmov	r3, s15
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;
 8001244:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8001248:	ee67 7a80 	vmul.f32	s15, s15, s0
 800124c:	edc4 7a00 	vstr	s15, [r4]
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	f8db 3000 	ldr.w	r3, [fp]
 8001256:	f8da 2000 	ldr.w	r2, [sl]
 800125a:	f7ff fae8 	bl	800082e <movingAvg>
 800125e:	4b43      	ldr	r3, [pc, #268]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x284>)
		    pos++;
		    if (pos >= len){
 8001260:	f8db 2000 	ldr.w	r2, [fp]
 8001264:	eef0 5a40 	vmov.f32	s11, s0
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001268:	6018      	str	r0, [r3, #0]
		    pos++;
 800126a:	f8da 3000 	ldr.w	r3, [sl]
 800126e:	3301      	adds	r3, #1
		    if (pos >= len){
 8001270:	4293      	cmp	r3, r2
		    pos++;
 8001272:	f8ca 3000 	str.w	r3, [sl]
		      pos = 0;
 8001276:	bfa4      	itt	ge
 8001278:	2300      	movge	r3, #0
 800127a:	f8ca 3000 	strge.w	r3, [sl]
		    }

			if(piUsed == 1)
 800127e:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d11b      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x1d6>
			{
				PI_angularFrq = angularFrqEnc + pi_control(&angularFreqPI, angularFrq - angularFrqEnc); // burada baska bir degere atamaliyim yanlis olmus
 8001286:	edd4 7a00 	vldr	s15, [r4]
 800128a:	ed99 0a00 	vldr	s0, [r9]
 800128e:	4839      	ldr	r0, [pc, #228]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001290:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001294:	f7ff fb2e 	bl	80008f4 <pi_control>
 8001298:	edd4 7a00 	vldr	s15, [r4]
 800129c:	4936      	ldr	r1, [pc, #216]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800129e:	ee37 0a80 	vadd.f32	s0, s15, s0
 80012a2:	ed81 0a00 	vstr	s0, [r1]
				limitAngFrq();
 80012a6:	f7ff faf5 	bl	8000894 <limitAngFrq>
				setModulationIndex();
 80012aa:	f7ff facd 	bl	8000848 <setModulationIndex>
				adjustMIAndFreqforPI(DIVIDE_BY_TWO_PI(PI_angularFrq), modulationIndex); // Yeni bir fonk lazim
 80012ae:	ed91 0a00 	vldr	s0, [r1]
 80012b2:	edd8 0a00 	vldr	s1, [r8]
 80012b6:	ee80 0a25 	vdiv.f32	s0, s0, s11
 80012ba:	f7ff fb83 	bl	80009c4 <adjustMIAndFreqforPI>
			}
			oldpos = position;
 80012be:	683b      	ldr	r3, [r7, #0]
			indx = 0;
 80012c0:	9a03      	ldr	r2, [sp, #12]
			oldpos = position;
 80012c2:	6033      	str	r3, [r6, #0]
			indx = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	6013      	str	r3, [r2, #0]
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012c8:	682a      	ldr	r2, [r5, #0]
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d110      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x20a>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d0:	b005      	add	sp, #20
 80012d2:	ecbd 8b04 	vpop	{d8-d9}
 80012d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_IncTick();
 80012da:	f005 b85f 	b.w	800639c <HAL_IncTick>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80012de:	2300      	movs	r3, #0
 80012e0:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80012e4:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
			counter = 0;
 80012ea:	6033      	str	r3, [r6, #0]
 80012ec:	e76f      	b.n	80011ce <HAL_TIM_PeriodElapsedCallback+0xe6>
 80012ee:	2300      	movs	r3, #0
 80012f0:	e7fb      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x202>
}
 80012f2:	b005      	add	sp, #20
 80012f4:	ecbd 8b04 	vpop	{d8-d9}
 80012f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012fc:	f3af 8000 	nop.w
 8001300:	32d53f62 	.word	0x32d53f62
 8001304:	3fb21b63 	.word	0x3fb21b63
 8001308:	00000000 	.word	0x00000000
 800130c:	c0218000 	.word	0xc0218000
 8001310:	40002000 	.word	0x40002000
 8001314:	24000024 	.word	0x24000024
 8001318:	240070ac 	.word	0x240070ac
 800131c:	24006ee4 	.word	0x24006ee4
 8001320:	24000178 	.word	0x24000178
 8001324:	24006fb4 	.word	0x24006fb4
 8001328:	2400001c 	.word	0x2400001c
 800132c:	40c90fdb 	.word	0x40c90fdb
 8001330:	2400002c 	.word	0x2400002c
 8001334:	24000028 	.word	0x24000028
 8001338:	40060a92 	.word	0x40060a92
 800133c:	40860a92 	.word	0x40860a92
 8001340:	24000030 	.word	0x24000030
 8001344:	24000180 	.word	0x24000180
 8001348:	42700000 	.word	0x42700000
 800134c:	2400019c 	.word	0x2400019c
 8001350:	24000194 	.word	0x24000194
 8001354:	24000188 	.word	0x24000188
 8001358:	24000160 	.word	0x24000160
 800135c:	240001a8 	.word	0x240001a8
 8001360:	24000164 	.word	0x24000164
 8001364:	240001a4 	.word	0x240001a4
 8001368:	24000198 	.word	0x24000198
 800136c:	24000184 	.word	0x24000184
 8001370:	2400018c 	.word	0x2400018c
 8001374:	24000004 	.word	0x24000004
 8001378:	2400015c 	.word	0x2400015c
 800137c:	40001000 	.word	0x40001000
 8001380:	24000018 	.word	0x24000018
 8001384:	24000190 	.word	0x24000190
 8001388:	24000020 	.word	0x24000020

0800138c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800138c:	4770      	bx	lr
	...

08001390 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_MspInit+0x2c>)
{
 8001392:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001394:	210f      	movs	r1, #15
 8001396:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800139e:	f042 0202 	orr.w	r2, r2, #2
 80013a2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a6:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b6:	f005 b827 	b.w	8006408 <HAL_NVIC_SetPriority>
 80013ba:	bf00      	nop
 80013bc:	58024400 	.word	0x58024400

080013c0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013c0:	6802      	ldr	r2, [r0, #0]
{
 80013c2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_CRC_MspInit+0x2c>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d10d      	bne.n	80013e6 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013ca:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80013ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013d2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013e6:	b002      	add	sp, #8
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	58024c00 	.word	0x58024c00

080013f0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_DMA2D_MspInit+0x40>)
{
 80013f2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d117      	bne.n	800142a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fc:	2105      	movs	r1, #5
 80013fe:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001400:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001404:	f042 0210 	orr.w	r2, r2, #16
 8001408:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800140c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800140e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800141a:	f004 fff5 	bl	8006408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800141e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001420:	b003      	add	sp, #12
 8001422:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001426:	f005 b821 	b.w	800646c <HAL_NVIC_EnableIRQ>
}
 800142a:	b003      	add	sp, #12
 800142c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001430:	52001000 	.word	0x52001000
 8001434:	58024400 	.word	0x58024400

08001438 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800143c:	b0ba      	sub	sp, #232	; 0xe8
 800143e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	2214      	movs	r2, #20
 8001442:	2100      	movs	r1, #0
 8001444:	a808      	add	r0, sp, #32
 8001446:	f01a ffbd 	bl	801c3c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144a:	22b4      	movs	r2, #180	; 0xb4
 800144c:	2100      	movs	r1, #0
 800144e:	a80d      	add	r0, sp, #52	; 0x34
 8001450:	f01a ffb8 	bl	801c3c4 <memset>
  if(hltdc->Instance==LTDC)
 8001454:	6822      	ldr	r2, [r4, #0]
 8001456:	4b77      	ldr	r3, [pc, #476]	; (8001634 <HAL_LTDC_MspInit+0x1fc>)
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 80e8 	bne.w	800162e <HAL_LTDC_MspInit+0x1f6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800145e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 25;
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8001462:	2119      	movs	r1, #25
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001464:	201e      	movs	r0, #30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001466:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8001468:	f44f 7390 	mov.w	r3, #288	; 0x120
 800146c:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001470:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001472:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001476:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800147a:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800147e:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001482:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001486:	f007 fc89 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 800148a:	b108      	cbz	r0, 8001490 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800148c:	f7ff ff7e 	bl	800138c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001490:	4b69      	ldr	r3, [pc, #420]	; (8001638 <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001498:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800149c:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	a908      	add	r1, sp, #32
 80014a0:	4866      	ldr	r0, [pc, #408]	; (800163c <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014a2:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80014a6:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80014ae:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80014b2:	f002 0208 	and.w	r2, r2, #8
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014be:	f042 0202 	orr.w	r2, r2, #2
 80014c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014ca:	f002 0202 	and.w	r2, r2, #2
 80014ce:	9201      	str	r2, [sp, #4]
 80014d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014d6:	f042 0208 	orr.w	r2, r2, #8
 80014da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014e2:	f002 0208 	and.w	r2, r2, #8
 80014e6:	9202      	str	r2, [sp, #8]
 80014e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014ee:	f042 0210 	orr.w	r2, r2, #16
 80014f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014fa:	f002 0210 	and.w	r2, r2, #16
 80014fe:	9203      	str	r2, [sp, #12]
 8001500:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800150e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001512:	f002 0201 	and.w	r2, r2, #1
 8001516:	9204      	str	r2, [sp, #16]
 8001518:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800151a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800151e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001522:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001526:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800152a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800152e:	9205      	str	r2, [sp, #20]
 8001530:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800153a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800153e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001542:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001546:	9206      	str	r2, [sp, #24]
 8001548:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800155a:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	9307      	str	r3, [sp, #28]
 8001562:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f005 f8f8 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 8001574:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	a908      	add	r1, sp, #32
 8001578:	4831      	ldr	r0, [pc, #196]	; (8001640 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800157a:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f005 f8ee 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8001588:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	a908      	add	r1, sp, #32
 800158e:	482d      	ldr	r0, [pc, #180]	; (8001644 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001590:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159a:	f005 f8e3 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	a908      	add	r1, sp, #32
 80015a4:	4828      	ldr	r0, [pc, #160]	; (8001648 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80015aa:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80015b0:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f005 f8d7 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80015b6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ba:	a908      	add	r1, sp, #32
 80015bc:	4823      	ldr	r0, [pc, #140]	; (800164c <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015be:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	f005 f8cc 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 80015cc:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015d0:	a908      	add	r1, sp, #32
 80015d2:	481f      	ldr	r0, [pc, #124]	; (8001650 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d4:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015de:	f005 f8c1 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80015e2:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	a908      	add	r1, sp, #32
 80015e6:	481b      	ldr	r0, [pc, #108]	; (8001654 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015e8:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f005 f8b7 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	a908      	add	r1, sp, #32
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fa:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f005 f8ae 	bl	8006764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001608:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800160a:	a908      	add	r1, sp, #32
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001612:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001618:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800161a:	f005 f8a3 	bl	8006764 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800161e:	4640      	mov	r0, r8
 8001620:	4622      	mov	r2, r4
 8001622:	2105      	movs	r1, #5
 8001624:	f004 fef0 	bl	8006408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001628:	4640      	mov	r0, r8
 800162a:	f004 ff1f 	bl	800646c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800162e:	b03a      	add	sp, #232	; 0xe8
 8001630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001634:	50001000 	.word	0x50001000
 8001638:	58024400 	.word	0x58024400
 800163c:	58020400 	.word	0x58020400
 8001640:	58020c00 	.word	0x58020c00
 8001644:	58021000 	.word	0x58021000
 8001648:	58020000 	.word	0x58020000
 800164c:	58021800 	.word	0x58021800
 8001650:	58021c00 	.word	0x58021c00
 8001654:	58020800 	.word	0x58020800

08001658 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800165c:	b091      	sub	sp, #68	; 0x44
 800165e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	2214      	movs	r2, #20
 8001662:	2100      	movs	r1, #0
 8001664:	a80b      	add	r0, sp, #44	; 0x2c
 8001666:	f01a fead 	bl	801c3c4 <memset>
  if(hospi->Instance==OCTOSPI1)
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	4a89      	ldr	r2, [pc, #548]	; (8001894 <HAL_OSPI_MspInit+0x23c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	f040 80b1 	bne.w	80017d6 <HAL_OSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001674:	4a88      	ldr	r2, [pc, #544]	; (8001898 <HAL_OSPI_MspInit+0x240>)
 8001676:	6813      	ldr	r3, [r2, #0]
 8001678:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800167a:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 800167c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800167e:	d10c      	bne.n	800169a <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001680:	4b86      	ldr	r3, [pc, #536]	; (800189c <HAL_OSPI_MspInit+0x244>)
 8001682:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001686:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800168a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800168e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800169a:	4b80      	ldr	r3, [pc, #512]	; (800189c <HAL_OSPI_MspInit+0x244>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2500      	movs	r5, #0
 80016a0:	2403      	movs	r4, #3
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80016a6:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a8:	a90b      	add	r1, sp, #44	; 0x2c
 80016aa:	487d      	ldr	r0, [pc, #500]	; (80018a0 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016b0:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016b4:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80016bc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80016c0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016d8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80016dc:	9202      	str	r2, [sp, #8]
 80016de:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016e4:	f042 0208 	orr.w	r2, r2, #8
 80016e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016f0:	f002 0208 	and.w	r2, r2, #8
 80016f4:	9203      	str	r2, [sp, #12]
 80016f6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016fc:	f042 0210 	orr.w	r2, r2, #16
 8001700:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001704:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001708:	f002 0210 	and.w	r2, r2, #16
 800170c:	9204      	str	r2, [sp, #16]
 800170e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001710:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001714:	f042 0220 	orr.w	r2, r2, #32
 8001718:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800171c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001720:	f002 0220 	and.w	r2, r2, #32
 8001724:	9205      	str	r2, [sp, #20]
 8001726:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800172c:	f042 0202 	orr.w	r2, r2, #2
 8001730:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	9306      	str	r3, [sp, #24]
 800173e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001744:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800174c:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800174e:	f005 f809 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8001752:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001754:	a90b      	add	r1, sp, #44	; 0x2c
 8001756:	4853      	ldr	r0, [pc, #332]	; (80018a4 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001758:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001764:	f004 fffe 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001768:	a90b      	add	r1, sp, #44	; 0x2c
 800176a:	484f      	ldr	r0, [pc, #316]	; (80018a8 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800176c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001776:	f004 fff5 	bl	8006764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800177c:	a90b      	add	r1, sp, #44	; 0x2c
 800177e:	4848      	ldr	r0, [pc, #288]	; (80018a0 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001780:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178c:	f004 ffea 	bl	8006764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8001790:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	a90b      	add	r1, sp, #44	; 0x2c
 8001796:	4843      	ldr	r0, [pc, #268]	; (80018a4 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001798:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f004 ffdf 	bl	8006764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017aa:	a90b      	add	r1, sp, #44	; 0x2c
 80017ac:	483f      	ldr	r0, [pc, #252]	; (80018ac <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017ae:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b8:	f004 ffd4 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	a90b      	add	r1, sp, #44	; 0x2c
 80017be:	483c      	ldr	r0, [pc, #240]	; (80018b0 <HAL_OSPI_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80017c0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017cc:	f004 ffca 	bl	8006764 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80017d0:	b011      	add	sp, #68	; 0x44
 80017d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_OSPI_MspInit+0x25c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d1f9      	bne.n	80017d0 <HAL_OSPI_MspInit+0x178>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80017dc:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <HAL_OSPI_MspInit+0x240>)
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80017e2:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80017e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80017e6:	d10c      	bne.n	8001802 <HAL_OSPI_MspInit+0x1aa>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_OSPI_MspInit+0x244>)
 80017ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80017ee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80017f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80017f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fe:	9307      	str	r3, [sp, #28]
 8001800:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2500      	movs	r5, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800180a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800180e:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001810:	a90b      	add	r1, sp, #44	; 0x2c
 8001812:	4823      	ldr	r0, [pc, #140]	; (80018a0 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001814:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001818:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800181c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001820:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001824:	9208      	str	r2, [sp, #32]
 8001826:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001828:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800182c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001830:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001834:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001838:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800183c:	9209      	str	r2, [sp, #36]	; 0x24
 800183e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001840:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001850:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	930a      	str	r3, [sp, #40]	; 0x28
 8001858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001866:	f004 ff7d 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800186a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186e:	a90b      	add	r1, sp, #44	; 0x2c
 8001870:	480b      	ldr	r0, [pc, #44]	; (80018a0 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001872:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800187c:	f004 ff72 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001880:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001884:	a90b      	add	r1, sp, #44	; 0x2c
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001888:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001892:	e79b      	b.n	80017cc <HAL_OSPI_MspInit+0x174>
 8001894:	52005000 	.word	0x52005000
 8001898:	240001ac 	.word	0x240001ac
 800189c:	58024400 	.word	0x58024400
 80018a0:	58021800 	.word	0x58021800
 80018a4:	58020c00 	.word	0x58020c00
 80018a8:	58021000 	.word	0x58021000
 80018ac:	58021400 	.word	0x58021400
 80018b0:	58020400 	.word	0x58020400
 80018b4:	5200a000 	.word	0x5200a000

080018b8 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_OSPI_MspDeInit+0xa0>)
{
 80018ba:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80018bc:	6803      	ldr	r3, [r0, #0]
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12a      	bne.n	8001918 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_OSPI_MspDeInit+0xa4>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	3a01      	subs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_OSPI_MspDeInit+0xa8>)
 80018cc:	b92a      	cbnz	r2, 80018da <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80018ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80018d2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80018d6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80018da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80018de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80018e2:	4820      	ldr	r0, [pc, #128]	; (8001964 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80018e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80018ec:	f005 f820 	bl	8006930 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 80018f0:	f643 01b0 	movw	r1, #14512	; 0x38b0
 80018f4:	481c      	ldr	r0, [pc, #112]	; (8001968 <HAL_OSPI_MspDeInit+0xb0>)
 80018f6:	f005 f81b 	bl	8006930 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80018fa:	2104      	movs	r1, #4
 80018fc:	481b      	ldr	r0, [pc, #108]	; (800196c <HAL_OSPI_MspDeInit+0xb4>)
 80018fe:	f005 f817 	bl	8006930 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8001902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001906:	481a      	ldr	r0, [pc, #104]	; (8001970 <HAL_OSPI_MspDeInit+0xb8>)
 8001908:	f005 f812 	bl	8006930 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 800190c:	2104      	movs	r1, #4
 800190e:	4819      	ldr	r0, [pc, #100]	; (8001974 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8001910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001914:	f005 b80c 	b.w	8006930 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_OSPI_MspDeInit+0xc0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11a      	bne.n	8001954 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_OSPI_MspDeInit+0xa4>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	3a01      	subs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_OSPI_MspDeInit+0xa8>)
 8001928:	b92a      	cbnz	r2, 8001936 <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800192a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800192e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001932:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001936:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 800193a:	f641 4103 	movw	r1, #7171	; 0x1c03
 800193e:	4809      	ldr	r0, [pc, #36]	; (8001964 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001940:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001944:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001948:	f004 fff2 	bl	8006930 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800194c:	f241 011f 	movw	r1, #4127	; 0x101f
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <HAL_OSPI_MspDeInit+0xb8>)
 8001952:	e7dd      	b.n	8001910 <HAL_OSPI_MspDeInit+0x58>
}
 8001954:	bd08      	pop	{r3, pc}
 8001956:	bf00      	nop
 8001958:	52005000 	.word	0x52005000
 800195c:	240001ac 	.word	0x240001ac
 8001960:	58024400 	.word	0x58024400
 8001964:	58021800 	.word	0x58021800
 8001968:	58020c00 	.word	0x58020c00
 800196c:	58021000 	.word	0x58021000
 8001970:	58021400 	.word	0x58021400
 8001974:	58020400 	.word	0x58020400
 8001978:	5200a000 	.word	0x5200a000

0800197c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 800197c:	6803      	ldr	r3, [r0, #0]
{
 800197e:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10e      	bne.n	80019a4 <HAL_TIM_PWM_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_TIM_PWM_MspInit+0x70>)
 8001988:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019a0:	b004      	add	sp, #16
 80019a2:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <HAL_TIM_PWM_MspInit+0x74>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10d      	bne.n	80019c6 <HAL_TIM_PWM_MspInit+0x4a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_TIM_PWM_MspInit+0x70>)
 80019ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019b0:	f042 0204 	orr.w	r2, r2, #4
 80019b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80019b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	9b02      	ldr	r3, [sp, #8]
 80019c4:	e7ec      	b.n	80019a0 <HAL_TIM_PWM_MspInit+0x24>
  else if(htim_pwm->Instance==TIM5)
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_TIM_PWM_MspInit+0x78>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d1e9      	bne.n	80019a0 <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <HAL_TIM_PWM_MspInit+0x70>)
 80019ce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019d2:	f042 0208 	orr.w	r2, r2, #8
 80019d6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80019da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	9b03      	ldr	r3, [sp, #12]
}
 80019e6:	e7db      	b.n	80019a0 <HAL_TIM_PWM_MspInit+0x24>
 80019e8:	40010000 	.word	0x40010000
 80019ec:	58024400 	.word	0x58024400
 80019f0:	40000800 	.word	0x40000800
 80019f4:	40000c00 	.word	0x40000c00

080019f8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_TIM_Base_MspInit+0x40>)
{
 80019fa:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM14)
 80019fc:	6802      	ldr	r2, [r0, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d117      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_TIM_Base_MspInit+0x44>)
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a04:	2105      	movs	r1, #5
 8001a06:	202d      	movs	r0, #45	; 0x2d
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a08:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a10:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a14:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a22:	f004 fcf1 	bl	8006408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a26:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001a28:	b003      	add	sp, #12
 8001a2a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a2e:	f004 bd1d 	b.w	800646c <HAL_NVIC_EnableIRQ>
}
 8001a32:	b003      	add	sp, #12
 8001a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a38:	40002000 	.word	0x40002000
 8001a3c:	58024400 	.word	0x58024400

08001a40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a40:	b510      	push	{r4, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	2214      	movs	r2, #20
 8001a48:	2100      	movs	r1, #0
 8001a4a:	a803      	add	r0, sp, #12
 8001a4c:	f01a fcba 	bl	801c3c4 <memset>
  if(htim_encoder->Instance==TIM23)
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d12d      	bne.n	8001ab4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_TIM_Encoder_MspInit+0x7c>)
    PF6     ------> TIM23_CH1
    PF7     ------> TIM23_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a5c:	a903      	add	r1, sp, #12
 8001a5e:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x80>)
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001a60:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001a64:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a68:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8001a6c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001a70:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8001a74:	9201      	str	r2, [sp, #4]
 8001a76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a7c:	f042 0220 	orr.w	r2, r2, #32
 8001a80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001a98:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001a9e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aa0:	f004 fe60 	bl	8006764 <HAL_GPIO_Init>

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 5, 0);
 8001aa4:	20a1      	movs	r0, #161	; 0xa1
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	f004 fcad 	bl	8006408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001aae:	20a1      	movs	r0, #161	; 0xa1
 8001ab0:	f004 fcdc 	bl	800646c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001ab4:	b008      	add	sp, #32
 8001ab6:	bd10      	pop	{r4, pc}
 8001ab8:	4000e000 	.word	0x4000e000
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	58021400 	.word	0x58021400

08001ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	2214      	movs	r2, #20
 8001acc:	2100      	movs	r1, #0
 8001ace:	a803      	add	r0, sp, #12
 8001ad0:	f01a fc78 	bl	801c3c4 <memset>
  if(htim->Instance==TIM1)
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <HAL_TIM_MspPostInit+0xc0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d11c      	bne.n	8001b16 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_TIM_MspPostInit+0xc4>)
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ae8:	f042 0210 	orr.w	r2, r2, #16
 8001aec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b04:	4821      	ldr	r0, [pc, #132]	; (8001b8c <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f004 fe29 	bl	8006764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b12:	b008      	add	sp, #32
 8001b14:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_TIM_MspPostInit+0xcc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d118      	bne.n	8001b4e <HAL_TIM_MspPostInit+0x8a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_TIM_MspPostInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b22:	481c      	ldr	r0, [pc, #112]	; (8001b94 <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b28:	f042 0208 	orr.w	r2, r2, #8
 8001b2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b48:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4a:	a903      	add	r1, sp, #12
 8001b4c:	e7df      	b.n	8001b0e <HAL_TIM_MspPostInit+0x4a>
  else if(htim->Instance==TIM5)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_TIM_MspPostInit+0xd4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d1de      	bne.n	8001b12 <HAL_TIM_MspPostInit+0x4e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	a903      	add	r1, sp, #12
 8001b58:	4810      	ldr	r0, [pc, #64]	; (8001b9c <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b7c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	e9cd 2205 	strd	r2, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	e7c4      	b.n	8001b0e <HAL_TIM_MspPostInit+0x4a>
 8001b84:	40010000 	.word	0x40010000
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58021000 	.word	0x58021000
 8001b90:	40000800 	.word	0x40000800
 8001b94:	58020c00 	.word	0x58020c00
 8001b98:	40000c00 	.word	0x40000c00
 8001b9c:	58020000 	.word	0x58020000

08001ba0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba0:	280f      	cmp	r0, #15
{
 8001ba2:	b510      	push	{r4, lr}
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba8:	d902      	bls.n	8001bb0 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001baa:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001bac:	b00a      	add	sp, #40	; 0x28
 8001bae:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2036      	movs	r0, #54	; 0x36
 8001bb6:	f004 fc27 	bl	8006408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bba:	2036      	movs	r0, #54	; 0x36
 8001bbc:	f004 fc56 	bl	800646c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bc2:	4669      	mov	r1, sp
 8001bc4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001bc6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_InitTick+0x88>)
 8001bca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001bce:	f042 0210 	orr.w	r2, r2, #16
 8001bd2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be2:	f006 ffc1 	bl	8008b68 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001be6:	9b07      	ldr	r3, [sp, #28]
 8001be8:	b9c3      	cbnz	r3, 8001c1c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bea:	f006 ff99 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001bee:	4c0f      	ldr	r4, [pc, #60]	; (8001c2c <HAL_InitTick+0x8c>)
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_InitTick+0x90>)
 8001bf2:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bf4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001bf8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_InitTick+0x94>)
 8001bfc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c00:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001c02:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c04:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c06:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001c08:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c0c:	f008 f840 	bl	8009c90 <HAL_TIM_Base_Init>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d1ca      	bne.n	8001baa <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c14:	4620      	mov	r0, r4
 8001c16:	f007 fe65 	bl	80098e4 <HAL_TIM_Base_Start_IT>
 8001c1a:	e7c7      	b.n	8001bac <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c1c:	f006 ff80 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 8001c20:	0040      	lsls	r0, r0, #1
 8001c22:	e7e4      	b.n	8001bee <HAL_InitTick+0x4e>
 8001c24:	24000078 	.word	0x24000078
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	24007258 	.word	0x24007258
 8001c30:	40001000 	.word	0x40001000
 8001c34:	000f4240 	.word	0x000f4240

08001c38 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c38:	4770      	bx	lr

08001c3a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler>

08001c3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler>

08001c3e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <BusFault_Handler>

08001c40 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler>

08001c42 <DebugMon_Handler>:
 8001c42:	4770      	bx	lr

08001c44 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c44:	4801      	ldr	r0, [pc, #4]	; (8001c4c <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8001c46:	f007 bf05 	b.w	8009a54 <HAL_TIM_IRQHandler>
 8001c4a:	bf00      	nop
 8001c4c:	240071ac 	.word	0x240071ac

08001c50 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <TIM6_DAC_IRQHandler+0x8>)
 8001c52:	f007 beff 	b.w	8009a54 <HAL_TIM_IRQHandler>
 8001c56:	bf00      	nop
 8001c58:	24007258 	.word	0x24007258

08001c5c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001c5c:	4801      	ldr	r0, [pc, #4]	; (8001c64 <LTDC_IRQHandler+0x8>)
 8001c5e:	f005 bbcf 	b.w	8007400 <HAL_LTDC_IRQHandler>
 8001c62:	bf00      	nop
 8001c64:	24007000 	.word	0x24007000

08001c68 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001c68:	4801      	ldr	r0, [pc, #4]	; (8001c70 <DMA2D_IRQHandler+0x8>)
 8001c6a:	f004 bcf1 	b.w	8006650 <HAL_DMA2D_IRQHandler>
 8001c6e:	bf00      	nop
 8001c70:	240070f8 	.word	0x240070f8

08001c74 <TIM23_IRQHandler>:
void TIM23_IRQHandler(void)
{
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001c74:	4801      	ldr	r0, [pc, #4]	; (8001c7c <TIM23_IRQHandler+0x8>)
 8001c76:	f007 beed 	b.w	8009a54 <HAL_TIM_IRQHandler>
 8001c7a:	bf00      	nop
 8001c7c:	24007160 	.word	0x24007160

08001c80 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001c80:	2001      	movs	r0, #1
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c86:	f01a fb43 	bl	801c310 <__errno>
 8001c8a:	2316      	movs	r3, #22
 8001c8c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c92:	bd08      	pop	{r3, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c96:	f01a fb3b 	bl	801c310 <__errno>
 8001c9a:	2316      	movs	r3, #22
 8001c9c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001c9e:	e7fe      	b.n	8001c9e <_exit+0xa>

08001ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca0:	b570      	push	{r4, r5, r6, lr}
 8001ca2:	460e      	mov	r6, r1
 8001ca4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	2500      	movs	r5, #0
 8001ca8:	42a5      	cmp	r5, r4
 8001caa:	db01      	blt.n	8001cb0 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001cac:	4620      	mov	r0, r4
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001cb0:	f3af 8000 	nop.w
 8001cb4:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	3501      	adds	r5, #1
 8001cb8:	e7f6      	b.n	8001ca8 <_read+0x8>

08001cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cba:	b570      	push	{r4, r5, r6, lr}
 8001cbc:	460e      	mov	r6, r1
 8001cbe:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	2500      	movs	r5, #0
 8001cc2:	42a5      	cmp	r5, r4
 8001cc4:	db01      	blt.n	8001cca <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001cca:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8001cce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	e7f6      	b.n	8001cc2 <_write+0x8>

08001cd4 <_close>:

int _close(int file)
{
	return -1;
}
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001cde:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001ce0:	604b      	str	r3, [r1, #4]
}
 8001ce2:	4770      	bx	lr

08001ce4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ce8:	2000      	movs	r0, #0
 8001cea:	4770      	bx	lr

08001cec <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <_sbrk+0x30>)
{
 8001cee:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001cf0:	6819      	ldr	r1, [r3, #0]
{
 8001cf2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001cf4:	b909      	cbnz	r1, 8001cfa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001cf6:	490a      	ldr	r1, [pc, #40]	; (8001d20 <_sbrk+0x34>)
 8001cf8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	4909      	ldr	r1, [pc, #36]	; (8001d24 <_sbrk+0x38>)
 8001cfe:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <_sbrk+0x3c>)
 8001d00:	4402      	add	r2, r0
 8001d02:	1b09      	subs	r1, r1, r4
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d906      	bls.n	8001d16 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d08:	f01a fb02 	bl	801c310 <__errno>
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d14:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d16:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001d18:	e7fc      	b.n	8001d14 <_sbrk+0x28>
 8001d1a:	bf00      	nop
 8001d1c:	240001b0 	.word	0x240001b0
 8001d20:	24007348 	.word	0x24007348
 8001d24:	24050000 	.word	0x24050000
 8001d28:	00001000 	.word	0x00001000

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d30:	f004 fab0 	bl	8006294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d36:	e003      	b.n	8001d40 <LoopCopyDataInit>

08001d38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001d3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d3e:	3104      	adds	r1, #4

08001d40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d40:	480a      	ldr	r0, [pc, #40]	; (8001d6c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001d44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d48:	d3f6      	bcc.n	8001d38 <CopyDataInit>
  ldr  r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001d4c:	e002      	b.n	8001d54 <LoopFillZerobss>

08001d4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d50:	f842 3b04 	str.w	r3, [r2], #4

08001d54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001d56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d58:	d3f9      	bcc.n	8001d4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f01a faf1 	bl	801c340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7fe fe71 	bl	8000a44 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001d68:	08022224 	.word	0x08022224
  ldr  r0, =_sdata
 8001d6c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001d70:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
 8001d74:	24000140 	.word	0x24000140
  ldr  r3, = _ebss
 8001d78:	24007344 	.word	0x24007344

08001d7c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC3_IRQHandler>

08001d7e <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001d7e:	f000 bc8f 	b.w	80026a0 <touchgfx_init>

08001d82 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001d82:	f000 bcfd 	b.w	8002780 <touchgfx_taskEntry>

08001d86 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001d86:	6840      	ldr	r0, [r0, #4]
    }
 8001d88:	4770      	bx	lr

08001d8a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001d8a:	6041      	str	r1, [r0, #4]
    }
 8001d8c:	4770      	bx	lr
	...

08001d90 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001d90:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d98:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001d9a:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001da0:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 8001da4:	3a4c      	subs	r2, #76	; 0x4c
 8001da6:	430b      	orrs	r3, r1
 8001da8:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001daa:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 8001dae:	6813      	ldr	r3, [r2, #0]
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6013      	str	r3, [r2, #0]
}
 8001db6:	4770      	bx	lr
 8001db8:	e000edfc 	.word	0xe000edfc
 8001dbc:	c5acce55 	.word	0xc5acce55

08001dc0 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001dc0:	1a51      	subs	r1, r2, r1
 8001dc2:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001dc6:	fbb1 f0f3 	udiv	r0, r1, r3
 8001dca:	4770      	bx	lr

08001dcc <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001dcc:	4b01      	ldr	r3, [pc, #4]	; (8001dd4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001dce:	6818      	ldr	r0, [r3, #0]
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e0001004 	.word	0xe0001004

08001dd8 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001dd8:	4770      	bx	lr

08001dda <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001dda:	b510      	push	{r4, lr}
 8001ddc:	4604      	mov	r4, r0
 8001dde:	210c      	movs	r1, #12
 8001de0:	f01a f94e 	bl	801c080 <_ZdlPvj>
 8001de4:	4620      	mov	r0, r4
 8001de6:	bd10      	pop	{r4, pc}

08001de8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 8001de8:	6803      	ldr	r3, [r0, #0]
{
 8001dea:	b510      	push	{r4, lr}
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001df0:	b131      	cbz	r1, 8001e00 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001df2:	4798      	blx	r3
 8001df4:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001df6:	6863      	ldr	r3, [r4, #4]
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	4418      	add	r0, r3
 8001dfc:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001dfe:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001e00:	4798      	blx	r3
 8001e02:	60a0      	str	r0, [r4, #8]
}
 8001e04:	e7fb      	b.n	8001dfe <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001e06 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001e06:	4770      	bx	lr

08001e08 <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 8001e0e:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 8001e10:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <_ZN20STM32TouchController4initEv+0x24>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <_ZN20STM32TouchController4initEv+0x28>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8001e20:	f004 f956 	bl	80060d0 <BSP_TS_Init>
}
 8001e24:	b005      	add	sp, #20
 8001e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2a:	bf00      	nop
 8001e2c:	24006c5e 	.word	0x24006c5e
 8001e30:	24006c60 	.word	0x24006c60

08001e34 <_ZN20STM32TouchControllerD0Ev>:
 8001e34:	b510      	push	{r4, lr}
 8001e36:	4604      	mov	r4, r0
 8001e38:	2104      	movs	r1, #4
 8001e3a:	f01a f921 	bl	801c080 <_ZdlPvj>
 8001e3e:	4620      	mov	r0, r4
 8001e40:	bd10      	pop	{r4, pc}

08001e42 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001e42:	b530      	push	{r4, r5, lr}
 8001e44:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001e46:	2000      	movs	r0, #0
{
 8001e48:	460d      	mov	r5, r1
 8001e4a:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001e4c:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001e4e:	9003      	str	r0, [sp, #12]
 8001e50:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001e54:	f004 f9be 	bl	80061d4 <BSP_TS_GetState>
 8001e58:	b140      	cbz	r0, 8001e6c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001e6a:	e7fe      	b.n	8001e6a <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001e6c:	9801      	ldr	r0, [sp, #4]
 8001e6e:	b120      	cbz	r0, 8001e7a <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001e70:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001e72:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001e74:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 8001e76:	9b03      	ldr	r3, [sp, #12]
 8001e78:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001e7a:	b005      	add	sp, #20
 8001e7c:	bd30      	pop	{r4, r5, pc}
	...

08001e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001e80:	b110      	cbz	r0, 8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8001e82:	2801      	cmp	r0, #1
 8001e84:	d009      	beq.n	8001e9a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001e86:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001e8a:	2108      	movs	r1, #8
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	fab2 f282 	clz	r2, r2
 8001e92:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8001e96:	f004 bdf1 	b.w	8006a7c <HAL_GPIO_WritePin>
 8001e9a:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	0952      	lsrs	r2, r2, #5
 8001ea6:	e7f5      	b.n	8001e94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8001ea8:	240001b4 	.word	0x240001b4
 8001eac:	58020800 	.word	0x58020800

08001eb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001eb0:	b110      	cbz	r0, 8001eb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 8001eb2:	2801      	cmp	r0, #1
 8001eb4:	d009      	beq.n	8001eca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001eb6:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001eba:	2108      	movs	r1, #8
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	3a00      	subs	r2, #0
 8001ec0:	bf18      	it	ne
 8001ec2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001ec6:	f004 bdd9 	b.w	8006a7c <HAL_GPIO_WritePin>
 8001eca:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001ecc:	2104      	movs	r1, #4
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	3a00      	subs	r2, #0
 8001ed2:	bf18      	it	ne
 8001ed4:	2201      	movne	r2, #1
 8001ed6:	e7f5      	b.n	8001ec4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 8001ed8:	240001b4 	.word	0x240001b4
 8001edc:	58020800 	.word	0x58020800

08001ee0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001ee0:	b110      	cbz	r0, 8001ee8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8001ee2:	2801      	cmp	r0, #1
 8001ee4:	d004      	beq.n	8001ef0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001ee6:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ee8:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001eea:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 8001eec:	f004 bdcb 	b.w	8006a86 <HAL_GPIO_TogglePin>
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	e7fa      	b.n	8001eea <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 8001ef4:	58020800 	.word	0x58020800

08001ef8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001ef8:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001efa:	b130      	cbz	r0, 8001f0a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001efc:	2801      	cmp	r0, #1
 8001efe:	d009      	beq.n	8001f14 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 8001f00:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001f02:	1e43      	subs	r3, r0, #1
 8001f04:	4258      	negs	r0, r3
 8001f06:	4158      	adcs	r0, r3
 8001f08:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f0a:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 8001f0e:	f004 fdaf 	bl	8006a70 <HAL_GPIO_ReadPin>
        break;
 8001f12:	e7f6      	b.n	8001f02 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f14:	2104      	movs	r1, #4
 8001f16:	e7f9      	b.n	8001f0c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 8001f18:	58020800 	.word	0x58020800

08001f1c <_ZN8touchgfx4GPIO4initEv>:
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	4d08      	ldr	r5, [pc, #32]	; (8001f40 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001f20:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001f22:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001f24:	b2e0      	uxtb	r0, r4
 8001f26:	f7ff ffe7 	bl	8001ef8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001f2a:	b118      	cbz	r0, 8001f34 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001f30:	bf18      	it	ne
 8001f32:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001f34:	3401      	adds	r4, #1
 8001f36:	3504      	adds	r5, #4
 8001f38:	2c05      	cmp	r4, #5
 8001f3a:	d1f3      	bne.n	8001f24 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001f3c:	bd70      	pop	{r4, r5, r6, pc}
 8001f3e:	bf00      	nop
 8001f40:	240001b4 	.word	0x240001b4

08001f44 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001f44:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001f46:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001f4a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001f4e:	4770      	bx	lr

08001f50 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001f50:	2000      	movs	r0, #0
 8001f52:	4770      	bx	lr

08001f54 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001f54:	2000      	movs	r0, #0
 8001f56:	4770      	bx	lr

08001f58 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001f58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f5a:	b10b      	cbz	r3, 8001f60 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4718      	bx	r3
        }
    }
 8001f60:	4770      	bx	lr

08001f62 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001f62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f66:	4770      	bx	lr

08001f68 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001f68:	6840      	ldr	r0, [r0, #4]
 8001f6a:	6803      	ldr	r3, [r0, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	4718      	bx	r3

08001f70 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001f70:	4770      	bx	lr
	...

08001f74 <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001f78:	f000 fcac 	bl	80028d4 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001f7e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	4620      	mov	r0, r4
 8001f86:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001f8c:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 8001f8e:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 8001f92:	f7ff ffc3 	bl	8001f1c <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001f96:	4628      	mov	r0, r5
 8001f98:	f7ff fefa 	bl	8001d90 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001f9c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f9e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001fa0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}
 8001fa6:	bf00      	nop
 8001fa8:	70060000 	.word	0x70060000
 8001fac:	700c0000 	.word	0x700c0000

08001fb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001fb0:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001fb2:	b931      	cbnz	r1, 8001fc2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001fb6:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001fbe:	f01a f975 	bl	801c2ac <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001fc2:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001fc6:	3a00      	subs	r2, #0
 8001fc8:	4908      	ldr	r1, [pc, #32]	; (8001fec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001fca:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001fcc:	bf18      	it	ne
 8001fce:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001fd0:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001fd2:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001fd4:	bf18      	it	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8001fda:	7013      	strb	r3, [r2, #0]
    }
 8001fdc:	bd08      	pop	{r3, pc}
 8001fde:	bf00      	nop
 8001fe0:	0801d49c 	.word	0x0801d49c
 8001fe4:	0801d4d4 	.word	0x0801d4d4
 8001fe8:	0801d522 	.word	0x0801d522
 8001fec:	24006c62 	.word	0x24006c62
 8001ff0:	24006c63 	.word	0x24006c63

08001ff4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001ff4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	428b      	cmp	r3, r1
 8001ffc:	d803      	bhi.n	8002006 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	4293      	cmp	r3, r2
 8002004:	d905      	bls.n	8002012 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002008:	219e      	movs	r1, #158	; 0x9e
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800200c:	4807      	ldr	r0, [pc, #28]	; (800202c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800200e:	f01a f94d 	bl	801c2ac <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002014:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002018:	801a      	strh	r2, [r3, #0]
    }
 800201a:	bd08      	pop	{r3, pc}
 800201c:	24006c58 	.word	0x24006c58
 8002020:	24006c5a 	.word	0x24006c5a
 8002024:	0801d567 	.word	0x0801d567
 8002028:	0801d5ca 	.word	0x0801d5ca
 800202c:	0801d522 	.word	0x0801d522
 8002030:	24006c5e 	.word	0x24006c5e
 8002034:	24006c60 	.word	0x24006c60

08002038 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8002038:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 800203a:	6803      	ldr	r3, [r0, #0]
{
 800203c:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 800203e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002040:	4798      	blx	r3
    enableInterrupts();
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	4620      	mov	r0, r4
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	4798      	blx	r3

    OSWrappers::waitForVSync();
 800204a:	f000 f8e7 	bl	800221c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	4620      	mov	r0, r4
 8002052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002054:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205c:	4807      	ldr	r0, [pc, #28]	; (800207c <_ZN11TouchGFXHAL9taskEntryEv+0x44>)
 800205e:	f004 fd0d 	bl	8006a7c <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 800206a:	f004 fd07 	bl	8006a7c <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800206e:	f000 f8d5 	bl	800221c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	4620      	mov	r0, r4
 8002076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002078:	4798      	blx	r3
    for (;;)
 800207a:	e7f8      	b.n	800206e <_ZN11TouchGFXHAL9taskEntryEv+0x36>
 800207c:	58020c00 	.word	0x58020c00
 8002080:	58021800 	.word	0x58021800

08002084 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002084:	b510      	push	{r4, lr}
 8002086:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002088:	f00b fb96 	bl	800d7b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	4620      	mov	r0, r4
 8002090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 8002094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002098:	4718      	bx	r3

0800209a <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800209a:	f000 bc0d 	b.w	80028b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800209e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800209e:	f000 bc11 	b.w	80028c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

080020a4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80020a4:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80020a6:	f000 fc6d 	bl	8002984 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80020aa:	4a10      	ldr	r2, [pc, #64]	; (80020ec <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80020b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80020ba:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80020c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80020c6:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80020c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020cc:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80020ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80020d2:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80020d4:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80020d8:	d2f9      	bcs.n	80020ce <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 80020da:	3b20      	subs	r3, #32
 80020dc:	f113 0f20 	cmn.w	r3, #32
 80020e0:	d1f2      	bne.n	80020c8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 80020e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020e6:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80020f0:	f000 bbbe 	b.w	8002870 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080020f4 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80020f4:	f000 bc68 	b.w	80029c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

080020f8 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80020f8:	f000 bc52 	b.w	80029a0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

080020fc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80020fc:	f000 bbc2 	b.w	8002884 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002100 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8002100:	f00a bd12 	b.w	800cb28 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08002104 <_ZN11TouchGFXHALD0Ev>:
 8002104:	b510      	push	{r4, lr}
 8002106:	4604      	mov	r4, r0
 8002108:	2188      	movs	r1, #136	; 0x88
 800210a:	f019 ffb9 	bl	801c080 <_ZdlPvj>
 800210e:	4620      	mov	r0, r4
 8002110:	bd10      	pop	{r4, pc}

08002112 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8002112:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8002116:	b11b      	cbz	r3, 8002120 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8002118:	6840      	ldr	r0, [r0, #4]
 800211a:	6803      	ldr	r3, [r0, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4718      	bx	r3
    }
 8002120:	4618      	mov	r0, r3
 8002122:	4770      	bx	lr

08002124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8002124:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 800212a:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 800212c:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	428c      	cmp	r4, r1
 8002134:	d009      	beq.n	800214a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8002136:	b93a      	cbnz	r2, 8002148 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002138:	490a      	ldr	r1, [pc, #40]	; (8002164 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 800213c:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800213e:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8002140:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8002142:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002144:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8002146:	701a      	strb	r2, [r3, #0]
        }
    }
 8002148:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800214a:	2a00      	cmp	r2, #0
 800214c:	d0fc      	beq.n	8002148 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002152:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002154:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002156:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002158:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800215a:	2200      	movs	r2, #0
 800215c:	e7f3      	b.n	8002146 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800215e:	bf00      	nop
 8002160:	24006c5c 	.word	0x24006c5c
 8002164:	24006c5a 	.word	0x24006c5a
 8002168:	24006c58 	.word	0x24006c58

0800216c <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 800216c:	4601      	mov	r1, r0
 800216e:	b508      	push	{r3, lr}
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <IdleTaskHook+0x14>)
 8002172:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002174:	b101      	cbz	r1, 8002178 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002176:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002178:	f00b fb38 	bl	800d7ec <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800217c:	2001      	movs	r0, #1
 800217e:	bd08      	pop	{r3, pc}
 8002180:	24006c64 	.word	0x24006c64

08002184 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002184:	2101      	movs	r1, #1
 8002186:	2200      	movs	r2, #0
{
 8002188:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800218a:	4608      	mov	r0, r1
 800218c:	f008 f8e1 	bl	800a352 <osSemaphoreNew>
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002192:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002194:	b928      	cbnz	r0, 80021a2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002198:	2128      	movs	r1, #40	; 0x28
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800219c:	480a      	ldr	r0, [pc, #40]	; (80021c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800219e:	f01a f885 	bl	801c2ac <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2104      	movs	r1, #4
 80021a6:	2001      	movs	r0, #1
 80021a8:	f008 f972 	bl	800a490 <osMessageQueueNew>
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80021ae:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80021b0:	b918      	cbnz	r0, 80021ba <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80021b8:	e7f0      	b.n	800219c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80021ba:	bd08      	pop	{r3, pc}
 80021bc:	240001c8 	.word	0x240001c8
 80021c0:	0801d6e0 	.word	0x0801d6e0
 80021c4:	0801d729 	.word	0x0801d729
 80021c8:	0801d758 	.word	0x0801d758
 80021cc:	240001c4 	.word	0x240001c4
 80021d0:	0801d7b2 	.word	0x0801d7b2

080021d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80021d6:	f04f 31ff 	mov.w	r1, #4294967295
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f008 b904 	b.w	800a3e8 <osSemaphoreAcquire>
 80021e0:	240001c8 	.word	0x240001c8

080021e4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80021e4:	4b01      	ldr	r3, [pc, #4]	; (80021ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	f008 b92a 	b.w	800a440 <osSemaphoreRelease>
 80021ec:	240001c8 	.word	0x240001c8

080021f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80021f0:	4b02      	ldr	r3, [pc, #8]	; (80021fc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80021f2:	2100      	movs	r1, #0
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	f008 b8f7 	b.w	800a3e8 <osSemaphoreAcquire>
 80021fa:	bf00      	nop
 80021fc:	240001c8 	.word	0x240001c8

08002200 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8002200:	f7ff bff0 	b.w	80021e4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002204 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002204:	2300      	movs	r3, #0
 8002206:	4803      	ldr	r0, [pc, #12]	; (8002214 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002208:	4903      	ldr	r1, [pc, #12]	; (8002218 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800220a:	461a      	mov	r2, r3
 800220c:	6800      	ldr	r0, [r0, #0]
 800220e:	f008 b97b 	b.w	800a508 <osMessageQueuePut>
 8002212:	bf00      	nop
 8002214:	240001c4 	.word	0x240001c4
 8002218:	24000034 	.word	0x24000034

0800221c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800221c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800221e:	2300      	movs	r3, #0
 8002220:	4c07      	ldr	r4, [pc, #28]	; (8002240 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002222:	a901      	add	r1, sp, #4
 8002224:	461a      	mov	r2, r3
 8002226:	6820      	ldr	r0, [r4, #0]
 8002228:	f008 f99e 	bl	800a568 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	2200      	movs	r2, #0
 8002232:	a901      	add	r1, sp, #4
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	f008 f997 	bl	800a568 <osMessageQueueGet>
}
 800223a:	b002      	add	sp, #8
 800223c:	bd10      	pop	{r4, pc}
 800223e:	bf00      	nop
 8002240:	240001c4 	.word	0x240001c4

08002244 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002244:	6803      	ldr	r3, [r0, #0]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	4718      	bx	r3

0800224a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800224a:	2001      	movs	r0, #1
 800224c:	4770      	bx	lr

0800224e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 800224e:	6803      	ldr	r3, [r0, #0]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	4718      	bx	r3

08002254 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002254:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002258:	4770      	bx	lr
	...

0800225c <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <DMA2D_XferCpltCallback+0xc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002262:	6803      	ldr	r3, [r0, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4718      	bx	r3
 8002268:	24006c64 	.word	0x24006c64

0800226c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 800226c:	b508      	push	{r3, lr}
 800226e:	280b      	cmp	r0, #11
 8002270:	d80b      	bhi.n	800228a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002272:	e8df f000 	tbb	[pc, r0]
 8002276:	0612      	.short	0x0612
 8002278:	0a0a0a10 	.word	0x0a0a0a10
 800227c:	0808080a 	.word	0x0808080a
 8002280:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002282:	2001      	movs	r0, #1
}
 8002284:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002286:	2005      	movs	r0, #5
        break;
 8002288:	e7fc      	b.n	8002284 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 800228c:	2166      	movs	r1, #102	; 0x66
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002292:	f01a f80b 	bl	801c2ac <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002296:	2000      	movs	r0, #0
 8002298:	e7f4      	b.n	8002284 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800229a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800229c:	e7f2      	b.n	8002284 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800229e:	bf00      	nop
 80022a0:	0801d7f4 	.word	0x0801d7f4
 80022a4:	0801d80f 	.word	0x0801d80f
 80022a8:	0801d859 	.word	0x0801d859

080022ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 80022ac:	b508      	push	{r3, lr}
 80022ae:	280a      	cmp	r0, #10
 80022b0:	d809      	bhi.n	80022c6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 80022b2:	e8df f000 	tbb	[pc, r0]
 80022b6:	0610      	.short	0x0610
 80022b8:	0808080e 	.word	0x0808080e
 80022bc:	06060608 	.word	0x06060608
 80022c0:	06          	.byte	0x06
 80022c1:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80022c2:	2001      	movs	r0, #1
}
 80022c4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 80022c8:	2187      	movs	r1, #135	; 0x87
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80022ce:	f019 ffed 	bl	801c2ac <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80022d2:	2000      	movs	r0, #0
 80022d4:	e7f6      	b.n	80022c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80022d6:	2002      	movs	r0, #2
    return dma2dColorMode;
 80022d8:	e7f4      	b.n	80022c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80022da:	bf00      	nop
 80022dc:	0801d7f4 	.word	0x0801d7f4
 80022e0:	0801d8b1 	.word	0x0801d8b1
 80022e4:	0801d859 	.word	0x0801d859

080022e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80022e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80022ec:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 80022f0:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80022f2:	4640      	mov	r0, r8
 80022f4:	f7ff ffba 	bl	800226c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80022f8:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80022fa:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80022fc:	4638      	mov	r0, r7
 80022fe:	f7ff ffb5 	bl	800226c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002302:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002304:	4638      	mov	r0, r7
 8002306:	f7ff ffd1 	bl	80022ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800230a:	8aa1      	ldrh	r1, [r4, #20]
 800230c:	8b62      	ldrh	r2, [r4, #26]
 800230e:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002310:	1a52      	subs	r2, r2, r1
 8002312:	469e      	mov	lr, r3
 8002314:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002316:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002318:	8b22      	ldrh	r2, [r4, #24]
 800231a:	1a52      	subs	r2, r2, r1
 800231c:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800231e:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002320:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002322:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002326:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002328:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800232a:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800232c:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800232e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002330:	f8d4 c000 	ldr.w	ip, [r4]
 8002334:	f894 901c 	ldrb.w	r9, [r4, #28]
 8002338:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800233c:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8002340:	d029      	beq.n	8002396 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8002342:	d813      	bhi.n	800236c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8002344:	f1bc 0f20 	cmp.w	ip, #32
 8002348:	ea45 0002 	orr.w	r0, r5, r2
 800234c:	d067      	beq.n	800241e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 800234e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8002352:	d064      	beq.n	800241e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8002354:	f1bc 0f04 	cmp.w	ip, #4
 8002358:	d05d      	beq.n	8002416 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800235a:	432a      	orrs	r2, r5
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800235e:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002360:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002364:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002366:	d067      	beq.n	8002438 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002368:	4a36      	ldr	r2, [pc, #216]	; (8002444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 800236a:	e040      	b.n	80023ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
    switch (blitOp.operation)
 800236c:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8002370:	d007      	beq.n	8002382 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
 8002372:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8002376:	d1f0      	bne.n	800235a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002378:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800237c:	f042 0209 	orr.w	r2, r2, #9
 8002380:	e003      	b.n	800238a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002382:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002386:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800238a:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800238c:	68e2      	ldr	r2, [r4, #12]
 800238e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002390:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002392:	6159      	str	r1, [r3, #20]
 8002394:	e02a      	b.n	80023ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002396:	432a      	orrs	r2, r5
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002398:	68a0      	ldr	r0, [r4, #8]
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800239a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800239e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80023a0:	1d02      	adds	r2, r0, #4
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023a2:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023a4:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c
        switch ((Bitmap::ClutFormat)palette->format)
 80023a8:	7802      	ldrb	r2, [r0, #0]
 80023aa:	b142      	cbz	r2, 80023be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 80023ac:	2a01      	cmp	r2, #1
 80023ae:	d020      	beq.n	80023f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
            assert(0 && "Unsupported format");
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 80023b2:	f240 1101 	movw	r1, #257	; 0x101
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 80023b8:	4825      	ldr	r0, [pc, #148]	; (8002450 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 80023ba:	f019 ff77 	bl	801c2ac <__assert_func>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023be:	8842      	ldrh	r2, [r0, #2]
        bool blend = true;
 80023c0:	2401      	movs	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023c2:	69d9      	ldr	r1, [r3, #28]
 80023c4:	1e50      	subs	r0, r2, #1
 80023c6:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80023ca:	f022 0210 	bic.w	r2, r2, #16
 80023ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80023d2:	61da      	str	r2, [r3, #28]
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	f042 0220 	orr.w	r2, r2, #32
 80023dc:	61da      	str	r2, [r3, #28]
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	0692      	lsls	r2, r2, #26
 80023e2:	d4fc      	bmi.n	80023de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80023e4:	2210      	movs	r2, #16
 80023e6:	609a      	str	r2, [r3, #8]
        if(blend)
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d0bd      	beq.n	8002368 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80023ee:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 80023f0:	e020      	b.n	8002434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023f2:	8842      	ldrh	r2, [r0, #2]
            if(blitOp.alpha == 255)
 80023f4:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023f8:	69d9      	ldr	r1, [r3, #28]
 80023fa:	f102 30ff 	add.w	r0, r2, #4294967295
            if(blitOp.alpha == 255)
 80023fe:	bf18      	it	ne
 8002400:	2401      	movne	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002402:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002406:	f022 0210 	bic.w	r2, r2, #16
 800240a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800240e:	f042 0210 	orr.w	r2, r2, #16
 8002412:	61da      	str	r2, [r3, #28]
            break;
 8002414:	e7de      	b.n	80023d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002416:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800241a:	61d8      	str	r0, [r3, #28]
 800241c:	e7b8      	b.n	8002390 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800241e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002424:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002428:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800242c:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002430:	f8ce 3000 	str.w	r3, [lr]
}
 8002434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002438:	f240 2201 	movw	r2, #513	; 0x201
 800243c:	e7d7      	b.n	80023ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800243e:	bf00      	nop
 8002440:	52001000 	.word	0x52001000
 8002444:	00010201 	.word	0x00010201
 8002448:	0801d8fc 	.word	0x0801d8fc
 800244c:	0801d916 	.word	0x0801d916
 8002450:	0801d859 	.word	0x0801d859
 8002454:	00020201 	.word	0x00020201

08002458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800245c:	7f88      	ldrb	r0, [r1, #30]
 800245e:	f7ff ff25 	bl	80022ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002464:	8aa5      	ldrh	r5, [r4, #20]
 8002466:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002468:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800246a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800246e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002470:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002472:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002474:	6921      	ldr	r1, [r4, #16]
 8002476:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800247a:	6825      	ldr	r5, [r4, #0]
 800247c:	2d08      	cmp	r5, #8
 800247e:	d10e      	bne.n	800249e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002480:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002482:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002484:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002488:	7f20      	ldrb	r0, [r4, #28]
 800248a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800248e:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002490:	68e2      	ldr	r2, [r4, #12]
 8002492:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002496:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002498:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800249a:	601a      	str	r2, [r3, #0]
    }
}
 800249c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800249e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024a0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80024a2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80024a4:	68e2      	ldr	r2, [r4, #12]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80024a8:	4a03      	ldr	r2, [pc, #12]	; (80024b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 80024aa:	e7f6      	b.n	800249a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80024ac:	52001000 	.word	0x52001000
 80024b0:	00010009 	.word	0x00010009
 80024b4:	00020201 	.word	0x00020201
 80024b8:	00030201 	.word	0x00030201

080024bc <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024c2:	6003      	str	r3, [r0, #0]
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <_ZN8STM32DMAD1Ev+0x1c>)
 80024c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80024ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024ce:	f3bf 8f6f 	isb	sy
}
 80024d2:	4770      	bx	lr
 80024d4:	0801d95c 	.word	0x0801d95c
 80024d8:	e000e100 	.word	0xe000e100

080024dc <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80024dc:	b510      	push	{r4, lr}
 80024de:	4604      	mov	r4, r0
}
 80024e0:	f7ff ffec 	bl	80024bc <_ZN8STM32DMAD1Ev>
 80024e4:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80024e8:	4620      	mov	r0, r4
 80024ea:	f019 fdc9 	bl	801c080 <_ZdlPvj>
 80024ee:	4620      	mov	r0, r4
 80024f0:	bd10      	pop	{r4, pc}
	...

080024f4 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <_ZN8STM32DMA10initializeEv+0x40>)
{
 80024f6:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80024f8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80024fc:	f042 0210 	orr.w	r2, r2, #16
 8002500:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002504:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002508:	f002 0210 	and.w	r2, r2, #16
 800250c:	9201      	str	r2, [sp, #4]
 800250e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002510:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002512:	f042 0210 	orr.w	r2, r2, #16
 8002516:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002518:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800251a:	f022 0210 	bic.w	r2, r2, #16
 800251e:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <_ZN8STM32DMA10initializeEv+0x44>)
 8002522:	4a06      	ldr	r2, [pc, #24]	; (800253c <_ZN8STM32DMA10initializeEv+0x48>)
 8002524:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002528:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800252c:	609a      	str	r2, [r3, #8]
}
 800252e:	b002      	add	sp, #8
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	58024400 	.word	0x58024400
 8002538:	240070f8 	.word	0x240070f8
 800253c:	0800225d 	.word	0x0800225d
 8002540:	e000e100 	.word	0xe000e100

08002544 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <_ZN8STM32DMAC1Ev+0x30>)
 800254a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800254c:	2600      	movs	r6, #0
 800254e:	4625      	mov	r5, r4
 8002550:	2260      	movs	r2, #96	; 0x60
 8002552:	6060      	str	r0, [r4, #4]
 8002554:	7226      	strb	r6, [r4, #8]
 8002556:	7266      	strb	r6, [r4, #9]
 8002558:	f845 3b20 	str.w	r3, [r5], #32
 800255c:	4629      	mov	r1, r5
 800255e:	f00b faad 	bl	800dabc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002562:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002566:	60ee      	str	r6, [r5, #12]
 8002568:	3520      	adds	r5, #32
 800256a:	42ab      	cmp	r3, r5
 800256c:	d1fb      	bne.n	8002566 <_ZN8STM32DMAC1Ev+0x22>
}
 800256e:	4620      	mov	r0, r4
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	bf00      	nop
 8002574:	0801d95c 	.word	0x0801d95c

08002578 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002578:	2001      	movs	r0, #1
 800257a:	4770      	bx	lr

0800257c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800257c:	200c      	movs	r0, #12
 800257e:	4770      	bx	lr

08002580 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002580:	230c      	movs	r3, #12
 8002582:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002586:	3008      	adds	r0, #8
 8002588:	4770      	bx	lr

0800258a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800258a:	230c      	movs	r3, #12
 800258c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002590:	3008      	adds	r0, #8
 8002592:	4770      	bx	lr

08002594 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002594:	2001      	movs	r0, #1
 8002596:	4770      	bx	lr

08002598 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002598:	f44f 60e2 	mov.w	r0, #1808	; 0x710
 800259c:	4770      	bx	lr

0800259e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800259e:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80025a2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025a6:	3008      	adds	r0, #8
 80025a8:	4770      	bx	lr

080025aa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025aa:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80025ae:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025b2:	3008      	adds	r0, #8
 80025b4:	4770      	bx	lr

080025b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80025b6:	2001      	movs	r0, #1
 80025b8:	4770      	bx	lr

080025ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80025ba:	2010      	movs	r0, #16
 80025bc:	4770      	bx	lr

080025be <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025be:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80025c2:	3008      	adds	r0, #8
 80025c4:	4770      	bx	lr

080025c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025c6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80025ca:	3008      	adds	r0, #8
 80025cc:	4770      	bx	lr

080025ce <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80025ce:	4608      	mov	r0, r1
 80025d0:	f000 bb14 	b.w	8002bfc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080025d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80025d6:	b510      	push	{r4, lr}
 80025d8:	4604      	mov	r4, r0
 80025da:	6003      	str	r3, [r0, #0]
 80025dc:	f009 ffd6 	bl	800c58c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80025e0:	4620      	mov	r0, r4
 80025e2:	bd10      	pop	{r4, pc}
 80025e4:	0801da14 	.word	0x0801da14

080025e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80025e8:	b510      	push	{r4, lr}
 80025ea:	4604      	mov	r4, r0
 80025ec:	f7ff fff2 	bl	80025d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80025f0:	2114      	movs	r1, #20
 80025f2:	4620      	mov	r0, r4
 80025f4:	f019 fd44 	bl	801c080 <_ZdlPvj>
 80025f8:	4620      	mov	r0, r4
 80025fa:	bd10      	pop	{r4, pc}

080025fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80025fe:	b510      	push	{r4, lr}
 8002600:	4604      	mov	r4, r0
 8002602:	6003      	str	r3, [r0, #0]
 8002604:	f009 ffc2 	bl	800c58c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002608:	4620      	mov	r0, r4
 800260a:	bd10      	pop	{r4, pc}
 800260c:	0801d9e0 	.word	0x0801d9e0

08002610 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002610:	b510      	push	{r4, lr}
 8002612:	4604      	mov	r4, r0
 8002614:	f7ff fff2 	bl	80025fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002618:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 800261c:	4620      	mov	r0, r4
 800261e:	f019 fd2f 	bl	801c080 <_ZdlPvj>
 8002622:	4620      	mov	r0, r4
 8002624:	bd10      	pop	{r4, pc}
	...

08002628 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800262a:	b510      	push	{r4, lr}
 800262c:	4604      	mov	r4, r0
 800262e:	6003      	str	r3, [r0, #0]
 8002630:	f009 ffac 	bl	800c58c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002634:	4620      	mov	r0, r4
 8002636:	bd10      	pop	{r4, pc}
 8002638:	0801d9ac 	.word	0x0801d9ac

0800263c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800263c:	b510      	push	{r4, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	f7ff fff2 	bl	8002628 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002644:	2118      	movs	r1, #24
 8002646:	4620      	mov	r0, r4
 8002648:	f019 fd1a 	bl	801c080 <_ZdlPvj>
 800264c:	4620      	mov	r0, r4
 800264e:	bd10      	pop	{r4, pc}

08002650 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <_ZN12FrontendHeapD1Ev+0x24>)
 8002652:	b510      	push	{r4, lr}
 8002654:	4604      	mov	r4, r0
 8002656:	6003      	str	r3, [r0, #0]
 8002658:	f200 7044 	addw	r0, r0, #1860	; 0x744
 800265c:	f7ff ffba 	bl	80025d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002660:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002664:	f7ff ffca 	bl	80025fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002668:	f104 0014 	add.w	r0, r4, #20
 800266c:	f7ff ffdc 	bl	8002628 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002670:	4620      	mov	r0, r4
 8002672:	bd10      	pop	{r4, pc}
 8002674:	0801da48 	.word	0x0801da48

08002678 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002678:	b508      	push	{r3, lr}
 800267a:	4802      	ldr	r0, [pc, #8]	; (8002684 <__tcf_0+0xc>)
 800267c:	f7ff ffe8 	bl	8002650 <_ZN12FrontendHeapD1Ev>
 8002680:	bd08      	pop	{r3, pc}
 8002682:	bf00      	nop
 8002684:	240001d0 	.word	0x240001d0

08002688 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002688:	b510      	push	{r4, lr}
 800268a:	4604      	mov	r4, r0
 800268c:	f7ff ffe0 	bl	8002650 <_ZN12FrontendHeapD1Ev>
 8002690:	f640 01b4 	movw	r1, #2228	; 0x8b4
 8002694:	4620      	mov	r0, r4
 8002696:	f019 fcf3 	bl	801c080 <_ZdlPvj>
 800269a:	4620      	mov	r0, r4
 800269c:	bd10      	pop	{r4, pc}
	...

080026a0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80026a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80026a4:	f000 f9ec 	bl	8002a80 <_ZN14BitmapDatabase11getInstanceEv>
 80026a8:	2400      	movs	r4, #0
 80026aa:	4605      	mov	r5, r0
 80026ac:	f000 f9ec 	bl	8002a88 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80026b0:	4623      	mov	r3, r4
 80026b2:	4601      	mov	r1, r0
 80026b4:	4622      	mov	r2, r4
 80026b6:	4628      	mov	r0, r5
 80026b8:	9400      	str	r4, [sp, #0]
 80026ba:	f011 f9d1 	bl	8013a60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <touchgfx_init+0xb4>)
 80026c0:	4a25      	ldr	r2, [pc, #148]	; (8002758 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80026c2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80026c4:	4d25      	ldr	r5, [pc, #148]	; (800275c <touchgfx_init+0xbc>)
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f002 f88c 	bl	80047e4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80026cc:	4824      	ldr	r0, [pc, #144]	; (8002760 <touchgfx_init+0xc0>)
 80026ce:	f011 f909 	bl	80138e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80026d2:	782b      	ldrb	r3, [r5, #0]
 80026d4:	f3bf 8f5b 	dmb	ish
 80026d8:	07db      	lsls	r3, r3, #31
 80026da:	d435      	bmi.n	8002748 <touchgfx_init+0xa8>
 80026dc:	4628      	mov	r0, r5
 80026de:	f019 fcd1 	bl	801c084 <__cxa_guard_acquire>
 80026e2:	b388      	cbz	r0, 8002748 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80026e4:	4c1f      	ldr	r4, [pc, #124]	; (8002764 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <touchgfx_init+0xc8>)
 80026e8:	f204 765c 	addw	r6, r4, #1884	; 0x75c
 80026ec:	f104 0014 	add.w	r0, r4, #20
 80026f0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80026f4:	f204 7744 	addw	r7, r4, #1860	; 0x744
 80026f8:	6023      	str	r3, [r4, #0]
 80026fa:	6060      	str	r0, [r4, #4]
 80026fc:	f8c4 8008 	str.w	r8, [r4, #8]
 8002700:	60e7      	str	r7, [r4, #12]
 8002702:	6126      	str	r6, [r4, #16]
 8002704:	f009 ff44 	bl	800c590 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <touchgfx_init+0xcc>)
 800270a:	4640      	mov	r0, r8
 800270c:	6163      	str	r3, [r4, #20]
 800270e:	f009 ff3f 	bl	800c590 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <touchgfx_init+0xd0>)
 8002714:	4638      	mov	r0, r7
 8002716:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002718:	f009 ff3a 	bl	800c590 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <touchgfx_init+0xd4>)
 800271e:	f504 60eb 	add.w	r0, r4, #1880	; 0x758
 8002722:	f8c4 3744 	str.w	r3, [r4, #1860]	; 0x744
 8002726:	f002 f8dd 	bl	80048e4 <_ZN5ModelC1Ev>
 800272a:	4622      	mov	r2, r4
 800272c:	f504 61eb 	add.w	r1, r4, #1880	; 0x758
 8002730:	4630      	mov	r0, r6
 8002732:	f002 f8cd 	bl	80048d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002736:	4630      	mov	r0, r6
 8002738:	f000 fa60 	bl	8002bfc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800273c:	4628      	mov	r0, r5
 800273e:	f019 fcad 	bl	801c09c <__cxa_guard_release>
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <touchgfx_init+0xd8>)
 8002744:	f019 fdd0 	bl	801c2e8 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <touchgfx_init+0xdc>)
}
 800274a:	b002      	add	sp, #8
 800274c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002750:	f7ff bc10 	b.w	8001f74 <_ZN11TouchGFXHAL10initializeEv>
 8002754:	24006cc0 	.word	0x24006cc0
 8002758:	24001730 	.word	0x24001730
 800275c:	240001cc 	.word	0x240001cc
 8002760:	24000038 	.word	0x24000038
 8002764:	240001d0 	.word	0x240001d0
 8002768:	0801da48 	.word	0x0801da48
 800276c:	0801d9ac 	.word	0x0801d9ac
 8002770:	0801d9e0 	.word	0x0801d9e0
 8002774:	0801da14 	.word	0x0801da14
 8002778:	08002679 	.word	0x08002679
 800277c:	240016a8 	.word	0x240016a8

08002780 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002780:	4801      	ldr	r0, [pc, #4]	; (8002788 <touchgfx_taskEntry+0x8>)
 8002782:	f7ff bc59 	b.w	8002038 <_ZN11TouchGFXHAL9taskEntryEv>
 8002786:	bf00      	nop
 8002788:	240016a8 	.word	0x240016a8

0800278c <_GLOBAL__sub_I_touchgfx_init>:
}
 800278c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800278e:	4e27      	ldr	r6, [pc, #156]	; (800282c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8002792:	4c28      	ldr	r4, [pc, #160]	; (8002834 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002794:	4630      	mov	r0, r6
static LCD24bpp display;
 8002796:	4d28      	ldr	r5, [pc, #160]	; (8002838 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002798:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800279a:	f7ff fed3 	bl	8002544 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800279e:	4628      	mov	r0, r5
 80027a0:	f013 fbb2 	bl	8015f08 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80027ac:	4824      	ldr	r0, [pc, #144]	; (8002840 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
 80027b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027b6:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 80027b8:	661a      	str	r2, [r3, #96]	; 0x60
 80027ba:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80027be:	671a      	str	r2, [r3, #112]	; 0x70
 80027c0:	60dc      	str	r4, [r3, #12]
 80027c2:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 80027c6:	491f      	ldr	r1, [pc, #124]	; (8002844 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80027c8:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 80027cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80027d0:	6759      	str	r1, [r3, #116]	; 0x74
 80027d2:	2101      	movs	r1, #1
 80027d4:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 80027d8:	491b      	ldr	r1, [pc, #108]	; (8002848 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80027da:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80027dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80027e0:	8001      	strh	r1, [r0, #0]
 80027e2:	481a      	ldr	r0, [pc, #104]	; (800284c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 80027e4:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 80027e8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80027ec:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80027f0:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 80027f4:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80027f8:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 80027fc:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002800:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002804:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002806:	f44f 7188 	mov.w	r1, #272	; 0x110
 800280a:	4811      	ldr	r0, [pc, #68]	; (8002850 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 800280c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002810:	8001      	strh	r1, [r0, #0]
 8002812:	4810      	ldr	r0, [pc, #64]	; (8002854 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002818:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 800281a:	490f      	ldr	r1, [pc, #60]	; (8002858 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 800281c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002820:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002822:	490e      	ldr	r1, [pc, #56]	; (800285c <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 8002826:	6019      	str	r1, [r3, #0]
 8002828:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	24000a88 	.word	0x24000a88
 8002830:	0801d48c 	.word	0x0801d48c
 8002834:	24000a84 	.word	0x24000a84
 8002838:	24001734 	.word	0x24001734
 800283c:	240016a8 	.word	0x240016a8
 8002840:	24006c58 	.word	0x24006c58
 8002844:	01000001 	.word	0x01000001
 8002848:	24006c64 	.word	0x24006c64
 800284c:	24006c5e 	.word	0x24006c5e
 8002850:	24006c5a 	.word	0x24006c5a
 8002854:	24006c60 	.word	0x24006c60
 8002858:	24006c5c 	.word	0x24006c5c
 800285c:	0801d618 	.word	0x0801d618
 8002860:	0801d464 	.word	0x0801d464

08002864 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002864:	4801      	ldr	r0, [pc, #4]	; (800286c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002866:	f7ff be29 	b.w	80024bc <_ZN8STM32DMAD1Ev>
 800286a:	bf00      	nop
 800286c:	24000a88 	.word	0x24000a88

08002870 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002872:	2290      	movs	r2, #144	; 0x90
 8002874:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002878:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002884:	4a09      	ldr	r2, [pc, #36]	; (80028ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002886:	490a      	ldr	r1, [pc, #40]	; (80028b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002888:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800288a:	480a      	ldr	r0, [pc, #40]	; (80028b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800288c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002890:	3b01      	subs	r3, #1
 8002892:	b29b      	uxth	r3, r3
 8002894:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002896:	6911      	ldr	r1, [r2, #16]
 8002898:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800289c:	3901      	subs	r1, #1
 800289e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80028a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80028aa:	4770      	bx	lr
 80028ac:	50001000 	.word	0x50001000
 80028b0:	2400178e 	.word	0x2400178e
 80028b4:	2400178c 	.word	0x2400178c

080028b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80028ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	50001084 	.word	0x50001084

080028c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80028c6:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80028c8:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80028ca:	f843 2c60 	str.w	r2, [r3, #-96]
}
 80028ce:	4770      	bx	lr
 80028d0:	50001084 	.word	0x50001084

080028d4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4604      	mov	r4, r0
    HAL::initialize();
 80028d8:	f00a f97b 	bl	800cbd2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80028e0:	f00d ff22 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 80028e4:	4601      	mov	r1, r0
 80028e6:	4620      	mov	r0, r4
 80028e8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	4620      	mov	r0, r4
 80028ee:	4a05      	ldr	r2, [pc, #20]	; (8002904 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80028f0:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 80028f4:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80028f8:	2300      	movs	r3, #0
 80028fa:	46ac      	mov	ip, r5
}
 80028fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8002900:	4760      	bx	ip
 8002902:	bf00      	nop
 8002904:	70060000 	.word	0x70060000

08002908 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002908:	f00a b94a 	b.w	800cba0 <_ZN8touchgfx3HAL10beginFrameEv>

0800290c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 800290c:	f00a b954 	b.w	800cbb8 <_ZN8touchgfx3HAL8endFrameEv>

08002910 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002910:	f00a ba6d 	b.w	800cdee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002914 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002914:	4a10      	ldr	r2, [pc, #64]	; (8002958 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x44>)
 8002916:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800291e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002922:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002926:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800292a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800292e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002932:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002934:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002938:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800293a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800293e:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002940:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002944:	d2f9      	bcs.n	800293a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 8002946:	3b20      	subs	r3, #32
 8002948:	f113 0f20 	cmn.w	r3, #32
 800294c:	d1f2      	bne.n	8002934 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x20>
 800294e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002952:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002956:	bd70      	pop	{r4, r5, r6, pc}
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x10>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	03db      	lsls	r3, r3, #15
 8002962:	d501      	bpl.n	8002968 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xc>
 8002964:	f7ff bfd6 	b.w	8002914 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	03db      	lsls	r3, r3, #15
 8002976:	d501      	bpl.n	800297c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 8002978:	f7ff bfcc 	b.w	8002914 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
    {
        SCB_CleanInvalidateDCache();
    }
}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002984:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002986:	f00a f8d5 	bl	800cb34 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	03db      	lsls	r3, r3, #15
 8002990:	d503      	bpl.n	800299a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002996:	f7ff bfbd 	b.w	8002914 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
 800299a:	bd08      	pop	{r3, pc}
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80029a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80029aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80029ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029be:	f3bf 8f6f 	isb	sy
}
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80029ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	4770      	bx	lr
 80029d8:	e000e100 	.word	0xe000e100

080029dc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_LTDC_LineEventCallback+0x50>)
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_LTDC_LineEventCallback+0x54>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	8811      	ldrh	r1, [r2, #0]
 80029e4:	428b      	cmp	r3, r1
    {
 80029e6:	b510      	push	{r4, lr}
 80029e8:	4c12      	ldr	r4, [pc, #72]	; (8002a34 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 80029ea:	d113      	bne.n	8002a14 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_LTDC_LineEventCallback+0x5c>)
 80029ee:	8819      	ldrh	r1, [r3, #0]
 80029f0:	f004 fd90 	bl	8007514 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80029f4:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80029f6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80029fa:	3301      	adds	r3, #1
 80029fc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002a00:	f7ff fc00 	bl	8002204 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	f00a fed7 	bl	800d7b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002a0a:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002a10:	f7ff ba36 	b.w	8001e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002a14:	f004 fd7e 	bl	8007514 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff fa49 	bl	8001eb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8002a1e:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002a20:	6803      	ldr	r3, [r0, #0]
    }
 8002a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4718      	bx	r3
 8002a2a:	bf00      	nop
 8002a2c:	50001000 	.word	0x50001000
 8002a30:	2400178e 	.word	0x2400178e
 8002a34:	24006c64 	.word	0x24006c64
 8002a38:	2400178c 	.word	0x2400178c

08002a3c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002a3c:	4770      	bx	lr

08002a3e <_ZN23ApplicationFontProviderD0Ev>:
 8002a3e:	b510      	push	{r4, lr}
 8002a40:	4604      	mov	r4, r0
 8002a42:	2104      	movs	r1, #4
 8002a44:	f019 fb1c 	bl	801c080 <_ZdlPvj>
 8002a48:	4620      	mov	r0, r4
 8002a4a:	bd10      	pop	{r4, pc}

08002a4c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002a4c:	b508      	push	{r3, lr}
 8002a4e:	2903      	cmp	r1, #3
 8002a50:	d813      	bhi.n	8002a7a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002a52:	e8df f001 	tbb	[pc, r1]
 8002a56:	0602      	.short	0x0602
 8002a58:	0e0a      	.short	0x0e0a
    switch (typography)
    {
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002a5a:	f001 ff0f 	bl	800487c <_ZN17TypedTextDatabase8getFontsEv>
 8002a5e:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002a60:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002a62:	f001 ff0b 	bl	800487c <_ZN17TypedTextDatabase8getFontsEv>
 8002a66:	6840      	ldr	r0, [r0, #4]
 8002a68:	e7fa      	b.n	8002a60 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002a6a:	f001 ff07 	bl	800487c <_ZN17TypedTextDatabase8getFontsEv>
 8002a6e:	6880      	ldr	r0, [r0, #8]
 8002a70:	e7f6      	b.n	8002a60 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002a72:	f001 ff03 	bl	800487c <_ZN17TypedTextDatabase8getFontsEv>
 8002a76:	68c0      	ldr	r0, [r0, #12]
 8002a78:	e7f2      	b.n	8002a60 <_ZN23ApplicationFontProvider7getFontEt+0x14>
{
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	e7f0      	b.n	8002a60 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002a80 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002a80:	4800      	ldr	r0, [pc, #0]	; (8002a84 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002a82:	4770      	bx	lr
 8002a84:	0801da68 	.word	0x0801da68

08002a88 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002a88:	200d      	movs	r0, #13
 8002a8a:	4770      	bx	lr

08002a8c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002a8c:	b513      	push	{r0, r1, r4, lr}
 8002a8e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002a90:	b151      	cbz	r1, 8002aa8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002a92:	6803      	ldr	r3, [r0, #0]
 8002a94:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002a96:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002a98:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002a9c:	689c      	ldr	r4, [r3, #8]
 8002a9e:	f10d 0303 	add.w	r3, sp, #3
 8002aa2:	47a0      	blx	r4
        return glyph;
    }
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd10      	pop	{r4, pc}
            return 0;
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	e7fb      	b.n	8002aa4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002aac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002aac:	8940      	ldrh	r0, [r0, #10]
 8002aae:	4770      	bx	lr

08002ab0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002ab0:	8980      	ldrh	r0, [r0, #12]
 8002ab2:	4770      	bx	lr

08002ab4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002ab4:	8880      	ldrh	r0, [r0, #4]
 8002ab6:	4770      	bx	lr

08002ab8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002ab8:	7983      	ldrb	r3, [r0, #6]
 8002aba:	8880      	ldrh	r0, [r0, #4]
 8002abc:	4418      	add	r0, r3
    }
 8002abe:	b280      	uxth	r0, r0
 8002ac0:	4770      	bx	lr

08002ac2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002ac2:	79c0      	ldrb	r0, [r0, #7]
    }
 8002ac4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002ac8:	4770      	bx	lr

08002aca <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002aca:	79c0      	ldrb	r0, [r0, #7]
    }
 8002acc:	09c0      	lsrs	r0, r0, #7
 8002ace:	4770      	bx	lr

08002ad0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002ad0:	4770      	bx	lr

08002ad2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002ad2:	b510      	push	{r4, lr}
 8002ad4:	4604      	mov	r4, r0
    }
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	f019 fad2 	bl	801c080 <_ZdlPvj>
 8002adc:	4620      	mov	r0, r4
 8002ade:	bd10      	pop	{r4, pc}

08002ae0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002ae2:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8002ae6:	6808      	ldr	r0, [r1, #0]
 8002ae8:	6849      	ldr	r1, [r1, #4]
 8002aea:	c303      	stmia	r3!, {r0, r1}
    }
 8002aec:	4770      	bx	lr

08002aee <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002aee:	4770      	bx	lr

08002af0 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002af0:	4770      	bx	lr

08002af2 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002af2:	6041      	str	r1, [r0, #4]
    }
 8002af4:	4770      	bx	lr

08002af6 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002af6:	4770      	bx	lr

08002af8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002af8:	2301      	movs	r3, #1
 8002afa:	7203      	strb	r3, [r0, #8]
    }
 8002afc:	4770      	bx	lr

08002afe <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002afe:	4770      	bx	lr

08002b00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002b00:	4770      	bx	lr

08002b02 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002b02:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8002b04:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8002b06:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8002b08:	68c2      	ldr	r2, [r0, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	1054      	asrs	r4, r2, #1
 8002b0e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002b12:	07d2      	lsls	r2, r2, #31
 8002b14:	bf48      	it	mi
 8002b16:	590a      	ldrmi	r2, [r1, r4]
    }
 8002b18:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8002b1c:	bf48      	it	mi
 8002b1e:	58d3      	ldrmi	r3, [r2, r3]
 8002b20:	4718      	bx	r3

08002b22 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8002b22:	6843      	ldr	r3, [r0, #4]
 8002b24:	b12b      	cbz	r3, 8002b32 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002b26:	6883      	ldr	r3, [r0, #8]
 8002b28:	b92b      	cbnz	r3, 8002b36 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002b2a:	68c0      	ldr	r0, [r0, #12]
 8002b2c:	f000 0001 	and.w	r0, r0, #1
 8002b30:	4770      	bx	lr
 8002b32:	4618      	mov	r0, r3
 8002b34:	4770      	bx	lr
 8002b36:	2001      	movs	r0, #1
    }
 8002b38:	4770      	bx	lr

08002b3a <_ZN8touchgfx12NoTransitionD0Ev>:
 8002b3a:	b510      	push	{r4, lr}
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	210c      	movs	r1, #12
 8002b40:	f019 fa9e 	bl	801c080 <_ZdlPvj>
 8002b44:	4620      	mov	r0, r4
 8002b46:	bd10      	pop	{r4, pc}

08002b48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002b48:	b510      	push	{r4, lr}
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	f019 fa97 	bl	801c080 <_ZdlPvj>
 8002b52:	4620      	mov	r0, r4
 8002b54:	bd10      	pop	{r4, pc}

08002b56 <_ZN23FrontendApplicationBaseD0Ev>:
 8002b56:	b510      	push	{r4, lr}
 8002b58:	4604      	mov	r4, r0
 8002b5a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002b5e:	f019 fa8f 	bl	801c080 <_ZdlPvj>
 8002b62:	4620      	mov	r0, r4
 8002b64:	bd10      	pop	{r4, pc}

08002b66 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002b66:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 8002b68:	f00d fdde 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 8002b6c:	6803      	ldr	r3, [r0, #0]
    }
 8002b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	4718      	bx	r3

08002b76 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002b76:	b510      	push	{r4, lr}
 8002b78:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002b7a:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002b7e:	b158      	cbz	r0, 8002b98 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002b80:	6803      	ldr	r3, [r0, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4798      	blx	r3
 8002b86:	b138      	cbz	r0, 8002b98 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002b88:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002b8c:	6803      	ldr	r3, [r0, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8002b98:	bd10      	pop	{r4, pc}
	...

08002b9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4617      	mov	r7, r2
 8002ba2:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002ba4:	f00d fde2 	bl	801076c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002baa:	2500      	movs	r5, #0
        instance = this;
 8002bac:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002bae:	4629      	mov	r1, r5
      model(m)
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8002bb2:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8002bb6:	4e0f      	ldr	r6, [pc, #60]	; (8002bf4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002bbe:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8002bc2:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002bc6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8002bc8:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f001 fe07 	bl	80047e4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002bd6:	6833      	ldr	r3, [r6, #0]
 8002bd8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002bdc:	b10a      	cbz	r2, 8002be2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002bde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002be0:	b900      	cbnz	r0, 8002be4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002be2:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002be4:	f014 fa7d 	bl	80170e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002be8:	4620      	mov	r0, r4
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bec:	24006cb0 	.word	0x24006cb0
 8002bf0:	0801dfc0 	.word	0x0801dfc0
 8002bf4:	24006c64 	.word	0x24006c64
 8002bf8:	0801dfa8 	.word	0x0801dfa8

08002bfc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002bfe:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002c02:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002c0c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002c10:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	08002d7d 	.word	0x08002d7d

08002c1c <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8002c1e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002c22:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002c2c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002c30:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	08002ee5 	.word	0x08002ee5

08002c3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c40:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c42:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002c44:	4699      	mov	r9, r3
 8002c46:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c48:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4798      	blx	r3
 8002c54:	f5b0 6fe2 	cmp.w	r0, #1808	; 0x710
 8002c58:	d205      	bcs.n	8002c66 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2a>
 8002c5a:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002c5c:	21a3      	movs	r1, #163	; 0xa3
 8002c5e:	4a42      	ldr	r2, [pc, #264]	; (8002d68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002c60:	4842      	ldr	r0, [pc, #264]	; (8002d6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002c62:	f019 fb23 	bl	801c2ac <__assert_func>
 8002c66:	6860      	ldr	r0, [r4, #4]
 8002c68:	6803      	ldr	r3, [r0, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4798      	blx	r3
 8002c6e:	280f      	cmp	r0, #15
 8002c70:	d803      	bhi.n	8002c7a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3e>
 8002c72:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002c74:	21a4      	movs	r1, #164	; 0xa4
 8002c76:	4a3c      	ldr	r2, [pc, #240]	; (8002d68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002c78:	e7f2      	b.n	8002c60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002c7a:	68e0      	ldr	r0, [r4, #12]
 8002c7c:	6803      	ldr	r3, [r0, #0]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4798      	blx	r3
 8002c82:	280b      	cmp	r0, #11
 8002c84:	d803      	bhi.n	8002c8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x52>
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002c88:	21a5      	movs	r1, #165	; 0xa5
 8002c8a:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002c8c:	e7e8      	b.n	8002c60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    Application::getInstance()->clearAllTimerWidgets();
 8002c8e:	f00d fd4b 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 8002c92:	f00d fd4f 	bl	8010734 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002c96:	f8d9 0000 	ldr.w	r0, [r9]
 8002c9a:	b110      	cbz	r0, 8002ca2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x66>
        (*currentTrans)->tearDown();
 8002c9c:	6803      	ldr	r3, [r0, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4798      	blx	r3
    if (*currentTrans)
 8002ca2:	f8d9 0000 	ldr.w	r0, [r9]
 8002ca6:	b110      	cbz	r0, 8002cae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x72>
        (*currentTrans)->~Transition();
 8002ca8:	6803      	ldr	r3, [r0, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4798      	blx	r3
    if (*currentScreen)
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	b110      	cbz	r0, 8002cb8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->tearDownScreen();
 8002cb2:	6803      	ldr	r3, [r0, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4798      	blx	r3
    if (*currentPresenter)
 8002cb8:	f8d8 0000 	ldr.w	r0, [r8]
 8002cbc:	b110      	cbz	r0, 8002cc4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->deactivate();
 8002cbe:	6803      	ldr	r3, [r0, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4798      	blx	r3
    if (*currentScreen)
 8002cc4:	6838      	ldr	r0, [r7, #0]
 8002cc6:	b110      	cbz	r0, 8002cce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x92>
        (*currentScreen)->~Screen();
 8002cc8:	6803      	ldr	r3, [r0, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4798      	blx	r3
    if (*currentPresenter)
 8002cce:	f8d8 0000 	ldr.w	r0, [r8]
 8002cd2:	b110      	cbz	r0, 8002cda <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9e>
        (*currentPresenter)->~Presenter();
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002cda:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002cdc:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002cde:	f04f 0b00 	mov.w	fp, #0
 8002ce2:	6803      	ldr	r3, [r0, #0]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	4798      	blx	r3
 8002ce8:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002cea:	4605      	mov	r5, r0
 8002cec:	f8c0 b004 	str.w	fp, [r0, #4]
 8002cf0:	6003      	str	r3, [r0, #0]
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002cf8:	68a0      	ldr	r0, [r4, #8]
 8002cfa:	6803      	ldr	r3, [r0, #0]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	4798      	blx	r3
 8002d00:	4606      	mov	r6, r0
 8002d02:	f001 fed1 	bl	8004aa8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002d06:	6860      	ldr	r0, [r4, #4]
 8002d08:	4659      	mov	r1, fp
 8002d0a:	6803      	ldr	r3, [r0, #0]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	4798      	blx	r3
 8002d10:	4604      	mov	r4, r0
 8002d12:	4631      	mov	r1, r6
 8002d14:	f001 fdf8 	bl	8004908 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002d18:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8002d1c:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8002d20:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002d22:	b1e4      	cbz	r4, 8002d5e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
 8002d24:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002d26:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002d2e:	f8c4 a008 	str.w	sl, [r4, #8]
 8002d32:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 8002d34:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002d36:	4798      	blx	r3
    newPresenter->activate();
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002d40:	4629      	mov	r1, r5
 8002d42:	4630      	mov	r0, r6
 8002d44:	f00f f8de 	bl	8011f04 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	4798      	blx	r3
    newTransition->invalidate();
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	4628      	mov	r0, r5
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8002d58:	4620      	mov	r0, r4
 8002d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8002d5e:	4623      	mov	r3, r4
 8002d60:	e7e1      	b.n	8002d26 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xea>
 8002d62:	bf00      	nop
 8002d64:	0801db7c 	.word	0x0801db7c
 8002d68:	0801dc0a 	.word	0x0801dc0a
 8002d6c:	0801dd0e 	.word	0x0801dd0e
 8002d70:	0801dd55 	.word	0x0801dd55
 8002d74:	0801ddf8 	.word	0x0801ddf8
 8002d78:	0801e004 	.word	0x0801e004

08002d7c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002d7c:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002d80:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002d82:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
 8002d8a:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002d8e:	4804      	ldr	r0, [pc, #16]	; (8002da0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
 8002d90:	f7ff ff54 	bl	8002c3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002d94:	b003      	add	sp, #12
 8002d96:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d9a:	bf00      	nop
 8002d9c:	24006ca4 	.word	0x24006ca4
 8002da0:	24006ca0 	.word	0x24006ca0

08002da4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002daa:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002dac:	4699      	mov	r9, r3
 8002dae:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002db0:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002db2:	4614      	mov	r4, r2
 8002db4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4798      	blx	r3
 8002dbc:	f240 6323 	movw	r3, #1571	; 0x623
 8002dc0:	4298      	cmp	r0, r3
 8002dc2:	d805      	bhi.n	8002dd0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
 8002dc4:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002dc6:	21a3      	movs	r1, #163	; 0xa3
 8002dc8:	4a41      	ldr	r2, [pc, #260]	; (8002ed0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002dca:	4842      	ldr	r0, [pc, #264]	; (8002ed4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002dcc:	f019 fa6e 	bl	801c2ac <__assert_func>
 8002dd0:	6860      	ldr	r0, [r4, #4]
 8002dd2:	6803      	ldr	r3, [r0, #0]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4798      	blx	r3
 8002dd8:	280f      	cmp	r0, #15
 8002dda:	d803      	bhi.n	8002de4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
 8002ddc:	4b3e      	ldr	r3, [pc, #248]	; (8002ed8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002dde:	21a4      	movs	r1, #164	; 0xa4
 8002de0:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002de2:	e7f2      	b.n	8002dca <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002de4:	68e0      	ldr	r0, [r4, #12]
 8002de6:	6803      	ldr	r3, [r0, #0]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4798      	blx	r3
 8002dec:	280b      	cmp	r0, #11
 8002dee:	d803      	bhi.n	8002df8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
 8002df0:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002df2:	21a5      	movs	r1, #165	; 0xa5
 8002df4:	4a36      	ldr	r2, [pc, #216]	; (8002ed0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002df6:	e7e8      	b.n	8002dca <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
 8002df8:	f00d fc96 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 8002dfc:	f00d fc9a 	bl	8010734 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002e00:	f8d9 0000 	ldr.w	r0, [r9]
 8002e04:	b110      	cbz	r0, 8002e0c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4798      	blx	r3
    if (*currentTrans)
 8002e0c:	f8d9 0000 	ldr.w	r0, [r9]
 8002e10:	b110      	cbz	r0, 8002e18 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
 8002e12:	6803      	ldr	r3, [r0, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4798      	blx	r3
    if (*currentScreen)
 8002e18:	6838      	ldr	r0, [r7, #0]
 8002e1a:	b110      	cbz	r0, 8002e22 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
 8002e1c:	6803      	ldr	r3, [r0, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4798      	blx	r3
    if (*currentPresenter)
 8002e22:	f8d8 0000 	ldr.w	r0, [r8]
 8002e26:	b110      	cbz	r0, 8002e2e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
 8002e28:	6803      	ldr	r3, [r0, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4798      	blx	r3
    if (*currentScreen)
 8002e2e:	6838      	ldr	r0, [r7, #0]
 8002e30:	b110      	cbz	r0, 8002e38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
 8002e32:	6803      	ldr	r3, [r0, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4798      	blx	r3
    if (*currentPresenter)
 8002e38:	f8d8 0000 	ldr.w	r0, [r8]
 8002e3c:	b110      	cbz	r0, 8002e44 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
 8002e3e:	6803      	ldr	r3, [r0, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002e44:	68e0      	ldr	r0, [r4, #12]
 8002e46:	2100      	movs	r1, #0
 8002e48:	f04f 0b00 	mov.w	fp, #0
 8002e4c:	6803      	ldr	r3, [r0, #0]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	4798      	blx	r3
 8002e52:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002e54:	4605      	mov	r5, r0
 8002e56:	f8c0 b004 	str.w	fp, [r0, #4]
 8002e5a:	6003      	str	r3, [r0, #0]
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002e62:	68a0      	ldr	r0, [r4, #8]
 8002e64:	6803      	ldr	r3, [r0, #0]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	4798      	blx	r3
 8002e6a:	4606      	mov	r6, r0
 8002e6c:	f001 ff18 	bl	8004ca0 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002e70:	6860      	ldr	r0, [r4, #4]
 8002e72:	4659      	mov	r1, fp
 8002e74:	6803      	ldr	r3, [r0, #0]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	4798      	blx	r3
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4631      	mov	r1, r6
 8002e7e:	f001 fe9f 	bl	8004bc0 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8002e82:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8002e86:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8002e8a:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002e8c:	b1e4      	cbz	r4, 8002ec8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
 8002e8e:	1d23      	adds	r3, r4, #4
 8002e90:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002e94:	4630      	mov	r0, r6
 8002e96:	6833      	ldr	r3, [r6, #0]
 8002e98:	f8c4 a008 	str.w	sl, [r4, #8]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002ea0:	4798      	blx	r3
    newPresenter->activate();
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002eaa:	4629      	mov	r1, r5
 8002eac:	4630      	mov	r0, r6
 8002eae:	f00f f829 	bl	8011f04 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002eb2:	682b      	ldr	r3, [r5, #0]
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	4798      	blx	r3
    newTransition->invalidate();
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4798      	blx	r3
}
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8002ec8:	4623      	mov	r3, r4
 8002eca:	e7e1      	b.n	8002e90 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
 8002ecc:	0801db7c 	.word	0x0801db7c
 8002ed0:	0801de9b 	.word	0x0801de9b
 8002ed4:	0801dd0e 	.word	0x0801dd0e
 8002ed8:	0801dd55 	.word	0x0801dd55
 8002edc:	0801ddf8 	.word	0x0801ddf8
 8002ee0:	0801e004 	.word	0x0801e004

08002ee4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002ee4:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002ee8:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002eea:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x20>)
 8002ef2:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002ef6:	4804      	ldr	r0, [pc, #16]	; (8002f08 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>)
 8002ef8:	f7ff ff54 	bl	8002da4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002efc:	b003      	add	sp, #12
 8002efe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f02:	bf00      	nop
 8002f04:	24006ca4 	.word	0x24006ca4
 8002f08:	24006ca0 	.word	0x24006ca0

08002f0c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002f0c:	6a00      	ldr	r0, [r0, #32]
 8002f0e:	4770      	bx	lr

08002f10 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002f10:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002f12:	4770      	bx	lr

08002f14 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002f14:	4770      	bx	lr

08002f16 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002f16:	888b      	ldrh	r3, [r1, #4]
 8002f18:	6980      	ldr	r0, [r0, #24]
 8002f1a:	0adb      	lsrs	r3, r3, #11
 8002f1c:	680a      	ldr	r2, [r1, #0]
 8002f1e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002f22:	4410      	add	r0, r2
 8002f24:	4770      	bx	lr

08002f26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002f26:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002f28:	b1c2      	cbz	r2, 8002f5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002f2a:	7b13      	ldrb	r3, [r2, #12]
 8002f2c:	b1b3      	cbz	r3, 8002f5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002f2e:	7b54      	ldrb	r4, [r2, #13]
 8002f30:	7ad2      	ldrb	r2, [r2, #11]
 8002f32:	0224      	lsls	r4, r4, #8
 8002f34:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002f38:	4314      	orrs	r4, r2
 8002f3a:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002f3c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002f3e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002f42:	8813      	ldrh	r3, [r2, #0]
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d102      	bne.n	8002f4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002f48:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002f4c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002f4e:	d805      	bhi.n	8002f5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002f50:	3801      	subs	r0, #1
 8002f52:	3204      	adds	r2, #4
 8002f54:	b280      	uxth	r0, r0
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d1f3      	bne.n	8002f42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002f5a:	e7f7      	b.n	8002f4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e7f5      	b.n	8002f4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002f60 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002f60:	b510      	push	{r4, lr}
 8002f62:	4604      	mov	r4, r0
 8002f64:	2128      	movs	r1, #40	; 0x28
 8002f66:	f019 f88b 	bl	801c080 <_ZdlPvj>
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	bd10      	pop	{r4, pc}
	...

08002f70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002f70:	b530      	push	{r4, r5, lr}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002f76:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8002f7a:	9506      	str	r5, [sp, #24]
 8002f7c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8002f80:	9505      	str	r5, [sp, #20]
 8002f82:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002f86:	9504      	str	r5, [sp, #16]
 8002f88:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002f8c:	9503      	str	r5, [sp, #12]
 8002f8e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8002f92:	9502      	str	r5, [sp, #8]
 8002f94:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8002f98:	9501      	str	r5, [sp, #4]
 8002f9a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8002f9e:	9500      	str	r5, [sp, #0]
 8002fa0:	f00e fbee 	bl	8011780 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8002fa6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fac:	61a3      	str	r3, [r4, #24]
 8002fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002fb0:	61e3      	str	r3, [r4, #28]
 8002fb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002fb4:	6223      	str	r3, [r4, #32]
 8002fb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002fb8:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002fba:	b009      	add	sp, #36	; 0x24
 8002fbc:	bd30      	pop	{r4, r5, pc}
 8002fbe:	bf00      	nop
 8002fc0:	0801e028 	.word	0x0801e028

08002fc4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	4770      	bx	lr

08002fc8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002fc8:	8081      	strh	r1, [r0, #4]
    }
 8002fca:	4770      	bx	lr

08002fcc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002fcc:	80c1      	strh	r1, [r0, #6]
    }
 8002fce:	4770      	bx	lr

08002fd0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002fd0:	8101      	strh	r1, [r0, #8]
    }
 8002fd2:	4770      	bx	lr

08002fd4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002fd4:	8141      	strh	r1, [r0, #10]
    }
 8002fd6:	4770      	bx	lr

08002fd8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002fd8:	4770      	bx	lr

08002fda <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 8002fda:	4770      	bx	lr

08002fdc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8002fdc:	4770      	bx	lr

08002fde <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8002fde:	4770      	bx	lr

08002fe0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002fe0:	4770      	bx	lr

08002fe2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002fe2:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002fe4:	88c4      	ldrh	r4, [r0, #6]
 8002fe6:	6803      	ldr	r3, [r0, #0]
 8002fe8:	1b12      	subs	r2, r2, r4
 8002fea:	8884      	ldrh	r4, [r0, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fee:	1b09      	subs	r1, r1, r4
 8002ff0:	b212      	sxth	r2, r2
    }
 8002ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002ff6:	b209      	sxth	r1, r1
 8002ff8:	4718      	bx	r3

08002ffa <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ffe:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800300a:	6010      	str	r0, [r2, #0]
    }
 800300c:	4770      	bx	lr

0800300e <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800300e:	4770      	bx	lr

08003010 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003010:	4770      	bx	lr

08003012 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003012:	4770      	bx	lr

08003014 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003014:	4770      	bx	lr

08003016 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8003016:	4770      	bx	lr

08003018 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8003018:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800301c:	b11a      	cbz	r2, 8003026 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800301e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003022:	b102      	cbz	r2, 8003026 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003024:	6018      	str	r0, [r3, #0]
        }
    }
 8003026:	4770      	bx	lr

08003028 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8003028:	4770      	bx	lr

0800302a <_ZN15Screen1ViewBase14button9ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button9Clicked()
    {
        // Override and implement this function in Screen1
    }
 800302a:	4770      	bx	lr

0800302c <_ZN15Screen1ViewBase14button8ClickedEv>:

    virtual void button8Clicked()
    {
        // Override and implement this function in Screen1
    }
 800302c:	4770      	bx	lr

0800302e <_ZN15Screen1ViewBase19buttonSwitchClickedEv>:

    virtual void buttonSwitchClicked()
    {
        // Override and implement this function in Screen1
    }
 800302e:	4770      	bx	lr

08003030 <_ZN15Screen1ViewBase17buttonSendClickedEv>:

    virtual void buttonSendClicked()
    {
        // Override and implement this function in Screen1
    }
 8003030:	4770      	bx	lr

08003032 <_ZN15Screen1ViewBase14button0ClickedEv>:

    virtual void button0Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003032:	4770      	bx	lr

08003034 <_ZN15Screen1ViewBase18buttonClearClickedEv>:

    virtual void buttonClearClicked()
    {
        // Override and implement this function in Screen1
    }
 8003034:	4770      	bx	lr

08003036 <_ZN15Screen1ViewBase14button3ClickedEv>:

    virtual void button3Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003036:	4770      	bx	lr

08003038 <_ZN15Screen1ViewBase14button2ClickedEv>:

    virtual void button2Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003038:	4770      	bx	lr

0800303a <_ZN15Screen1ViewBase14button1ClickedEv>:

    virtual void button1Clicked()
    {
        // Override and implement this function in Screen1
    }
 800303a:	4770      	bx	lr

0800303c <_ZN15Screen1ViewBase14button6ClickedEv>:

    virtual void button6Clicked()
    {
        // Override and implement this function in Screen1
    }
 800303c:	4770      	bx	lr

0800303e <_ZN15Screen1ViewBase14button5ClickedEv>:

    virtual void button5Clicked()
    {
        // Override and implement this function in Screen1
    }
 800303e:	4770      	bx	lr

08003040 <_ZN15Screen1ViewBase14button4ClickedEv>:

    virtual void button4Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003040:	4770      	bx	lr

08003042 <_ZN15Screen1ViewBase14button7ClickedEv>:

    virtual void button7Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003042:	4770      	bx	lr

08003044 <_ZN15Screen1ViewBase16buttonDotClickedEv>:

    virtual void buttonDotClicked()
    {
        // Override and implement this function in Screen1
    }
 8003044:	4770      	bx	lr

08003046 <_ZN15Screen1ViewBase17buttonFreqToggledEv>:

    virtual void buttonFreqToggled()
    {
        // Override and implement this function in Screen1
    }
 8003046:	4770      	bx	lr

08003048 <_ZN15Screen1ViewBase15buttonMIToggledEv>:

    virtual void buttonMIToggled()
    {
        // Override and implement this function in Screen1
    }
 8003048:	4770      	bx	lr

0800304a <_ZN15Screen1ViewBase18buttonPowerClickedEv>:

    virtual void buttonPowerClicked()
    {
        // Override and implement this function in Screen1
    }
 800304a:	4770      	bx	lr

0800304c <_ZN15Screen1ViewBase20button2DirectClickedEv>:

    virtual void button2DirectClicked()
    {
        // Override and implement this function in Screen1
    }
 800304c:	4770      	bx	lr

0800304e <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 800304e:	4770      	bx	lr

08003050 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003050:	4770      	bx	lr

08003052 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003052:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003054:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003056:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003058:	68c2      	ldr	r2, [r0, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	1055      	asrs	r5, r2, #1
 800305e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003062:	07d2      	lsls	r2, r2, #31
 8003064:	bf48      	it	mi
 8003066:	5962      	ldrmi	r2, [r4, r5]
    }
 8003068:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800306a:	bf48      	it	mi
 800306c:	58d3      	ldrmi	r3, [r2, r3]
 800306e:	4718      	bx	r3

08003070 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003070:	6843      	ldr	r3, [r0, #4]
 8003072:	b12b      	cbz	r3, 8003080 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003074:	6883      	ldr	r3, [r0, #8]
 8003076:	b92b      	cbnz	r3, 8003084 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003078:	68c0      	ldr	r0, [r0, #12]
 800307a:	f000 0001 	and.w	r0, r0, #1
 800307e:	4770      	bx	lr
 8003080:	4618      	mov	r0, r3
 8003082:	4770      	bx	lr
 8003084:	2001      	movs	r0, #1
    }
 8003086:	4770      	bx	lr

08003088 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003088:	b510      	push	{r4, lr}
 800308a:	4604      	mov	r4, r0
 800308c:	2110      	movs	r1, #16
 800308e:	f018 fff7 	bl	801c080 <_ZdlPvj>
 8003092:	4620      	mov	r0, r4
 8003094:	bd10      	pop	{r4, pc}

08003096 <_ZN15Screen1ViewBaseD0Ev>:
    virtual ~Screen1ViewBase() {}
 8003096:	b510      	push	{r4, lr}
 8003098:	4604      	mov	r4, r0
 800309a:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 800309e:	f018 ffef 	bl	801c080 <_ZdlPvj>
 80030a2:	4620      	mov	r0, r4
 80030a4:	bd10      	pop	{r4, pc}

080030a6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button7)
 80030a6:	f100 0398 	add.w	r3, r0, #152	; 0x98
 80030aa:	4299      	cmp	r1, r3
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4604      	mov	r4, r0
    if (&src == &button7)
 80030b0:	d104      	bne.n	80030bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    {
        //Interaction14
        //When button7 clicked call virtual function
        //Call button7Clicked
        button7Clicked();
 80030b2:	6803      	ldr	r3, [r0, #0]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        //button2DirectClicked
        //When button2Direct clicked call virtual function
        //Call button2DirectClicked
        button2DirectClicked();
    }
}
 80030b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        button2DirectClicked();
 80030ba:	4718      	bx	r3
    else if (&src == &button8)
 80030bc:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 80030c0:	4299      	cmp	r1, r3
 80030c2:	d102      	bne.n	80030ca <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
        button8Clicked();
 80030c4:	6803      	ldr	r3, [r0, #0]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	e7f5      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button9)
 80030ca:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80030ce:	4299      	cmp	r1, r3
 80030d0:	d102      	bne.n	80030d8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
        button9Clicked();
 80030d2:	6803      	ldr	r3, [r0, #0]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	e7ee      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button4)
 80030d8:	f500 73b8 	add.w	r3, r0, #368	; 0x170
 80030dc:	4299      	cmp	r1, r3
 80030de:	d102      	bne.n	80030e6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
        button4Clicked();
 80030e0:	6803      	ldr	r3, [r0, #0]
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	e7e7      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button5)
 80030e6:	f500 73dc 	add.w	r3, r0, #440	; 0x1b8
 80030ea:	4299      	cmp	r1, r3
 80030ec:	d102      	bne.n	80030f4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4e>
        button5Clicked();
 80030ee:	6803      	ldr	r3, [r0, #0]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	e7e0      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button6)
 80030f4:	f500 7300 	add.w	r3, r0, #512	; 0x200
 80030f8:	4299      	cmp	r1, r3
 80030fa:	d102      	bne.n	8003102 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5c>
        button6Clicked();
 80030fc:	6803      	ldr	r3, [r0, #0]
 80030fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003100:	e7d9      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button1)
 8003102:	f500 7312 	add.w	r3, r0, #584	; 0x248
 8003106:	4299      	cmp	r1, r3
 8003108:	d102      	bne.n	8003110 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x6a>
        button1Clicked();
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	e7d2      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button2)
 8003110:	f500 7324 	add.w	r3, r0, #656	; 0x290
 8003114:	4299      	cmp	r1, r3
 8003116:	d102      	bne.n	800311e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x78>
        button2Clicked();
 8003118:	6803      	ldr	r3, [r0, #0]
 800311a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311c:	e7cb      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button3)
 800311e:	f500 7336 	add.w	r3, r0, #728	; 0x2d8
 8003122:	4299      	cmp	r1, r3
 8003124:	d102      	bne.n	800312c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
        button3Clicked();
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	e7c4      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &buttonClear)
 800312c:	f500 7348 	add.w	r3, r0, #800	; 0x320
 8003130:	4299      	cmp	r1, r3
 8003132:	d103      	bne.n	800313c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x96>
        buttonClearClicked();
 8003134:	6803      	ldr	r3, [r0, #0]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        button2DirectClicked();
 8003138:	4620      	mov	r0, r4
 800313a:	e7bc      	b.n	80030b6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button0)
 800313c:	f500 735a 	add.w	r3, r0, #872	; 0x368
 8003140:	4299      	cmp	r1, r3
 8003142:	d102      	bne.n	800314a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa4>
        button0Clicked();
 8003144:	6803      	ldr	r3, [r0, #0]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	e7f6      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonSend)
 800314a:	f500 736c 	add.w	r3, r0, #944	; 0x3b0
 800314e:	4299      	cmp	r1, r3
 8003150:	d102      	bne.n	8003158 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb2>
        buttonSendClicked();
 8003152:	6803      	ldr	r3, [r0, #0]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	e7ef      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonSwitch)
 8003158:	f500 737e 	add.w	r3, r0, #1016	; 0x3f8
 800315c:	4299      	cmp	r1, r3
 800315e:	d102      	bne.n	8003166 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc0>
        buttonSwitchClicked();
 8003160:	6803      	ldr	r3, [r0, #0]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	e7e8      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonDot)
 8003166:	f200 5394 	addw	r3, r0, #1428	; 0x594
 800316a:	4299      	cmp	r1, r3
 800316c:	d102      	bne.n	8003174 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xce>
        buttonDotClicked();
 800316e:	6803      	ldr	r3, [r0, #0]
 8003170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003172:	e7e1      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &toggleButtonFreq)
 8003174:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
 8003178:	4299      	cmp	r1, r3
 800317a:	d102      	bne.n	8003182 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
        buttonFreqToggled();
 800317c:	6803      	ldr	r3, [r0, #0]
 800317e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003180:	e7da      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &toggleButtonMI)
 8003182:	f200 6314 	addw	r3, r0, #1556	; 0x614
 8003186:	4299      	cmp	r1, r3
 8003188:	d102      	bne.n	8003190 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xea>
        buttonMIToggled();
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318e:	e7d3      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonPower)
 8003190:	f200 634c 	addw	r3, r0, #1612	; 0x64c
 8003194:	4299      	cmp	r1, r3
 8003196:	d102      	bne.n	800319e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf8>
        buttonPowerClicked();
 8003198:	6803      	ldr	r3, [r0, #0]
 800319a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319c:	e7cc      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &button2Direct)
 800319e:	f200 63b4 	addw	r3, r0, #1716	; 0x6b4
 80031a2:	4299      	cmp	r1, r3
 80031a4:	d106      	bne.n	80031b4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10e>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80031a6:	f00d fabf 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoScreen2ScreenNoTransition();
 80031aa:	f7ff fd37 	bl	8002c1c <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        button2DirectClicked();
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	e7c1      	b.n	8003138 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
}
 80031b4:	bd10      	pop	{r4, pc}
	...

080031b8 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 80031b8:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 80031ba:	6002      	str	r2, [r0, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80031c2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80031c6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80031ca:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80031ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031d2:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	0801f990 	.word	0x0801f990

080031dc <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80031dc:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80031de:	b570      	push	{r4, r5, r6, lr}
 80031e0:	4604      	mov	r4, r0
        setX(x);
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 80031e4:	4615      	mov	r5, r2
        setX(x);
 80031e6:	4798      	blx	r3
        setY(y);
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	4620      	mov	r0, r4
 80031ec:	4629      	mov	r1, r5
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 80031f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80031f4:	4718      	bx	r3

080031f6 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80031f6:	b570      	push	{r4, r5, r6, lr}
 80031f8:	4604      	mov	r4, r0
 80031fa:	461d      	mov	r5, r3
 80031fc:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003200:	f7ff ffec 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	4629      	mov	r1, r5
 8003208:	4620      	mov	r0, r4
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	4798      	blx	r3
        setHeight(height);
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	4631      	mov	r1, r6
 8003212:	4620      	mov	r0, r4
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 8003216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800321a:	4718      	bx	r3

0800321c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800321c:	b510      	push	{r4, lr}
 800321e:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8003220:	2226      	movs	r2, #38	; 0x26
 8003222:	2100      	movs	r1, #0
 8003224:	f019 f8ce 	bl	801c3c4 <memset>
class Widget : public Drawable
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff ffc5 	bl	80031b8 <_ZN8touchgfx8DrawableC1Ev>
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8003230:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	23ff      	movs	r3, #255	; 0xff
 8003236:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 800323a:	2300      	movs	r3, #0
 800323c:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 800323e:	bd10      	pop	{r4, pc}
 8003240:	0801f38c 	.word	0x0801f38c

08003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8003244:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8003246:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 800324a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
 800324c:	4606      	mov	r6, r0
        if (typedText.hasValidId())
 800324e:	4299      	cmp	r1, r3
 8003250:	d033      	beq.n	80032ba <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	b92b      	cbnz	r3, 8003264 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 800325a:	21ae      	movs	r1, #174	; 0xae
 800325c:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800325e:	481c      	ldr	r0, [pc, #112]	; (80032d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
 8003260:	f019 f824 	bl	801c2ac <__assert_func>
 8003264:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
 8003266:	8812      	ldrh	r2, [r2, #0]
 8003268:	428a      	cmp	r2, r1
 800326a:	d803      	bhi.n	8003274 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
 800326e:	21af      	movs	r1, #175	; 0xaf
 8003270:	4a16      	ldr	r2, [pc, #88]	; (80032cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 8003272:	e7f4      	b.n	800325e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003274:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f001 faea 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	4601      	mov	r1, r0
 800328c:	9001      	str	r0, [sp, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	4628      	mov	r0, r5
 8003292:	4798      	blx	r3
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	4604      	mov	r4, r0
 8003298:	9901      	ldr	r1, [sp, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4628      	mov	r0, r5
 800329e:	4798      	blx	r3
 80032a0:	fb14 f400 	smulbb	r4, r4, r0
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	4628      	mov	r0, r5
 80032a8:	b2e4      	uxtb	r4, r4
 80032aa:	9901      	ldr	r1, [sp, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	4798      	blx	r3
 80032b0:	4404      	add	r4, r0
 80032b2:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80032b6:	b002      	add	sp, #8
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 80032c0:	e7f9      	b.n	80032b6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
 80032c2:	bf00      	nop
 80032c4:	24006cb4 	.word	0x24006cb4
 80032c8:	0801e078 	.word	0x0801e078
 80032cc:	0801e0ba 	.word	0x0801e0ba
 80032d0:	0801e0e8 	.word	0x0801e0e8
 80032d4:	24006cb8 	.word	0x24006cb8
 80032d8:	0801e12f 	.word	0x0801e12f
 80032dc:	24006cbc 	.word	0x24006cbc
 80032e0:	24006cc0 	.word	0x24006cc0

080032e4 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80032e8:	2226      	movs	r2, #38	; 0x26
 80032ea:	2100      	movs	r1, #0
 80032ec:	f019 f86a 	bl	801c3c4 <memset>
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ff61 	bl	80031b8 <_ZN8touchgfx8DrawableC1Ev>
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <_ZN8touchgfx8TextAreaC1Ev+0x30>)
 80032f8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 80032fc:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80032fe:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <_ZN8touchgfx8TextAreaC1Ev+0x34>)
 8003302:	62a3      	str	r3, [r4, #40]	; 0x28
 8003304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003308:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800330a:	2300      	movs	r3, #0
 800330c:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8003310:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8003312:	bd10      	pop	{r4, pc}
 8003314:	0801f2e4 	.word	0x0801f2e4
 8003318:	0801db74 	.word	0x0801db74

0800331c <_ZN8touchgfx12ToggleButtonC1Ev>:
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 800331c:	b510      	push	{r4, lr}
 800331e:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003320:	2226      	movs	r2, #38	; 0x26
 8003322:	2100      	movs	r1, #0
 8003324:	f019 f84e 	bl	801c3c4 <memset>
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff ff45 	bl	80031b8 <_ZN8touchgfx8DrawableC1Ev>
 800332e:	2300      	movs	r3, #0
 8003330:	4a08      	ldr	r2, [pc, #32]	; (8003354 <_ZN8touchgfx12ToggleButtonC1Ev+0x38>)
 8003332:	4620      	mov	r0, r4
 8003334:	62a3      	str	r3, [r4, #40]	; 0x28
 8003336:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        touchable = touch;
 800333a:	2301      	movs	r3, #1
 800333c:	6022      	str	r2, [r4, #0]
 800333e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003346:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003348:	8623      	strh	r3, [r4, #48]	; 0x30
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800334a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 800334e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8003350:	bd10      	pop	{r4, pc}
 8003352:	bf00      	nop
 8003354:	0801f1d0 	.word	0x0801f1d0

08003358 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	4604      	mov	r4, r0
        : presenter(0)
 800335e:	2600      	movs	r6, #0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8003360:	4dea      	ldr	r5, [pc, #936]	; (800370c <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
 8003362:	f04f 0a08 	mov.w	sl, #8
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003366:	f504 7b5a 	add.w	fp, r4, #872	; 0x368
 800336a:	f04f 0909 	mov.w	r9, #9
    button7.setAction(buttonCallback);
 800336e:	f504 68e0 	add.w	r8, r4, #1792	; 0x700
class TypedText
 8003372:	2705      	movs	r7, #5
Screen1ViewBase::Screen1ViewBase() :
 8003374:	ed2d 8b10 	vpush	{d8-d15}
 8003378:	b095      	sub	sp, #84	; 0x54
 800337a:	f00e fc17 	bl	8011bac <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800337e:	4622      	mov	r2, r4
 8003380:	4be3      	ldr	r3, [pc, #908]	; (8003710 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
 8003382:	63e6      	str	r6, [r4, #60]	; 0x3c
 8003384:	f842 3b40 	str.w	r3, [r2], #64
 8003388:	4610      	mov	r0, r2
 800338a:	ee08 2a10 	vmov	s16, r2
 800338e:	f7ff ff45 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 8003392:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003396:	4618      	mov	r0, r3
 8003398:	930a      	str	r3, [sp, #40]	; 0x28
 800339a:	f7ff ff3f 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 800339e:	f104 0398 	add.w	r3, r4, #152	; 0x98
 80033a2:	4618      	mov	r0, r3
 80033a4:	ee08 3a90 	vmov	s17, r3
 80033a8:	f00b fcca 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033ac:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 80033b0:	4618      	mov	r0, r3
 80033b2:	ee09 3a10 	vmov	s18, r3
 80033b6:	f00b fcc3 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033ba:	f504 7394 	add.w	r3, r4, #296	; 0x128
 80033be:	4618      	mov	r0, r3
 80033c0:	ee09 3a90 	vmov	s19, r3
 80033c4:	f00b fcbc 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033c8:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 80033cc:	4618      	mov	r0, r3
 80033ce:	ee0a 3a10 	vmov	s20, r3
 80033d2:	f00b fcb5 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033d6:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 80033da:	4618      	mov	r0, r3
 80033dc:	ee0a 3a90 	vmov	s21, r3
 80033e0:	f00b fcae 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033e4:	f504 7300 	add.w	r3, r4, #512	; 0x200
 80033e8:	4618      	mov	r0, r3
 80033ea:	ee0b 3a10 	vmov	s22, r3
 80033ee:	f00b fca7 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033f2:	f504 7312 	add.w	r3, r4, #584	; 0x248
 80033f6:	4618      	mov	r0, r3
 80033f8:	ee0b 3a90 	vmov	s23, r3
 80033fc:	f00b fca0 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003400:	f504 7324 	add.w	r3, r4, #656	; 0x290
 8003404:	4618      	mov	r0, r3
 8003406:	ee0c 3a10 	vmov	s24, r3
 800340a:	f00b fc99 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800340e:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 8003412:	4618      	mov	r0, r3
 8003414:	ee0c 3a90 	vmov	s25, r3
 8003418:	f00b fc92 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800341c:	f504 7348 	add.w	r3, r4, #800	; 0x320
 8003420:	4618      	mov	r0, r3
 8003422:	ee0d 3a10 	vmov	s26, r3
 8003426:	f00b fc8b 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800342a:	4658      	mov	r0, fp
 800342c:	f00b fc88 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003430:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 8003434:	4618      	mov	r0, r3
 8003436:	ee0d 3a90 	vmov	s27, r3
 800343a:	f00b fc81 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800343e:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 8003442:	4618      	mov	r0, r3
 8003444:	ee0f 3a10 	vmov	s30, r3
 8003448:	f00b fb0e 	bl	800ea68 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800344c:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003450:	4618      	mov	r0, r3
 8003452:	930b      	str	r3, [sp, #44]	; 0x2c
 8003454:	f7ff fee2 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 8003458:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 800345c:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8003460:	4618      	mov	r0, r3
 8003462:	f8c4 6460 	str.w	r6, [r4, #1120]	; 0x460
 8003466:	f8a4 6464 	strh.w	r6, [r4, #1124]	; 0x464
 800346a:	930c      	str	r3, [sp, #48]	; 0x30
 800346c:	f7ff fed6 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 8003470:	f204 439c 	addw	r3, r4, #1180	; 0x49c
 8003474:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
 8003478:	f8c4 6494 	str.w	r6, [r4, #1172]	; 0x494
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
 800347c:	4618      	mov	r0, r3
 800347e:	f8a4 6498 	strh.w	r6, [r4, #1176]	; 0x498
 8003482:	ee0f 3a90 	vmov	s31, r3
 8003486:	4da3      	ldr	r5, [pc, #652]	; (8003714 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 8003488:	f7ff ff2c 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 800348c:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 8003490:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
 8003494:	4618      	mov	r0, r3
 8003496:	f8c4 64d8 	str.w	r6, [r4, #1240]	; 0x4d8
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	f7ff ff22 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 80034a0:	f204 531c 	addw	r3, r4, #1308	; 0x51c
 80034a4:	f8c4 54dc 	str.w	r5, [r4, #1244]	; 0x4dc
 80034a8:	f8c4 6518 	str.w	r6, [r4, #1304]	; 0x518
    __background.setPosition(0, 0, 480, 272);
 80034ac:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80034b0:	4618      	mov	r0, r3
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	f7ff ff16 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 80034b8:	f504 63ab 	add.w	r3, r4, #1368	; 0x558
 80034bc:	4618      	mov	r0, r3
 80034be:	9305      	str	r3, [sp, #20]
 80034c0:	f7ff ff10 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 80034c4:	f204 5394 	addw	r3, r4, #1428	; 0x594
 80034c8:	4618      	mov	r0, r3
 80034ca:	ee0e 3a10 	vmov	s28, r3
 80034ce:	f00b fc37 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80034d2:	f204 53dc 	addw	r3, r4, #1500	; 0x5dc
 80034d6:	4618      	mov	r0, r3
 80034d8:	9306      	str	r3, [sp, #24]
 80034da:	f7ff ff1f 	bl	800331c <_ZN8touchgfx12ToggleButtonC1Ev>
 80034de:	f204 6314 	addw	r3, r4, #1556	; 0x614
 80034e2:	4618      	mov	r0, r3
 80034e4:	9307      	str	r3, [sp, #28]
 80034e6:	f7ff ff19 	bl	800331c <_ZN8touchgfx12ToggleButtonC1Ev>
 80034ea:	f204 634c 	addw	r3, r4, #1612	; 0x64c
 80034ee:	4618      	mov	r0, r3
 80034f0:	9308      	str	r3, [sp, #32]
 80034f2:	f00b fab9 	bl	800ea68 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80034f6:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
 80034fa:	a912      	add	r1, sp, #72	; 0x48
 80034fc:	ee0e 3a90 	vmov	s29, r3
 8003500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003504:	ee1e 0a90 	vmov	r0, s29
 8003508:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800350c:	f00a fb80 	bl	800dc10 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003510:	f204 63b4 	addw	r3, r4, #1716	; 0x6b4
 8003514:	4618      	mov	r0, r3
 8003516:	9309      	str	r3, [sp, #36]	; 0x24
 8003518:	f00b faa6 	bl	800ea68 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800351c:	4b7e      	ldr	r3, [pc, #504]	; (8003718 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
    __background.setPosition(0, 0, 480, 272);
 800351e:	4632      	mov	r2, r6
 8003520:	4631      	mov	r1, r6
 8003522:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
 8003526:	ee18 0a10 	vmov	r0, s16
 800352a:	4b7c      	ldr	r3, [pc, #496]	; (800371c <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 800352c:	9500      	str	r5, [sp, #0]
 800352e:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
 8003532:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003536:	f8c4 4704 	str.w	r4, [r4, #1796]	; 0x704
 800353a:	f8c4 670c 	str.w	r6, [r4, #1804]	; 0x70c
 800353e:	f7ff fe5a 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8003542:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 8003546:	4632      	mov	r2, r6
 8003548:	4631      	mov	r1, r6
 800354a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800354c:	66a3      	str	r3, [r4, #104]	; 0x68
 800354e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003552:	9500      	str	r5, [sp, #0]
        color = col;
 8003554:	f04f 35ff 	mov.w	r5, #4294967295
 8003558:	f7ff fe4d 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800355c:	4b70      	ldr	r3, [pc, #448]	; (8003720 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
    button7.setXY(0, 16);
 800355e:	2210      	movs	r2, #16
 8003560:	4631      	mov	r1, r6
 8003562:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003566:	ee18 0a90 	vmov	r0, s17
 800356a:	f7ff fe37 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button7.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800356e:	aa12      	add	r2, sp, #72	; 0x48
 8003570:	a911      	add	r1, sp, #68	; 0x44
 8003572:	ee18 0a90 	vmov	r0, s17
 8003576:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800357a:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 800357e:	f00a ff73 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003582:	ee18 0a90 	vmov	r0, s17
 8003586:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
 800358a:	f7ff fe5b 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8.setXY(60, 16);
 800358e:	2210      	movs	r2, #16
 8003590:	213c      	movs	r1, #60	; 0x3c
 8003592:	ee19 0a10 	vmov	r0, s18
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003596:	f8c4 80c0 	str.w	r8, [r4, #192]	; 0xc0
        colorPressed = col;
 800359a:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
 800359e:	f7ff fe1d 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button8.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80035a2:	a911      	add	r1, sp, #68	; 0x44
 80035a4:	aa12      	add	r2, sp, #72	; 0x48
 80035a6:	ee19 0a10 	vmov	r0, s18
 80035aa:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80035ae:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80035b2:	f00a ff59 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80035b6:	f04f 0201 	mov.w	r2, #1
        updateTextPosition();
 80035ba:	ee19 0a10 	vmov	r0, s18
 80035be:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
 80035c2:	f7ff fe3f 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9.setXY(120, 16);
 80035c6:	2210      	movs	r2, #16
 80035c8:	2178      	movs	r1, #120	; 0x78
 80035ca:	ee19 0a90 	vmov	r0, s19
 80035ce:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        colorPressed = col;
 80035d2:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
 80035d6:	f7ff fe01 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button9.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80035da:	a911      	add	r1, sp, #68	; 0x44
 80035dc:	aa12      	add	r2, sp, #72	; 0x48
 80035de:	ee19 0a90 	vmov	r0, s19
 80035e2:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80035e6:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80035ea:	f00a ff3d 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80035ee:	f04f 0202 	mov.w	r2, #2
        updateTextPosition();
 80035f2:	ee19 0a90 	vmov	r0, s19
 80035f6:	f8a4 2160 	strh.w	r2, [r4, #352]	; 0x160
 80035fa:	f7ff fe23 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4.setXY(0, 76);
 80035fe:	224c      	movs	r2, #76	; 0x4c
 8003600:	4631      	mov	r1, r6
 8003602:	ee1a 0a10 	vmov	r0, s20
 8003606:	f8c4 8150 	str.w	r8, [r4, #336]	; 0x150
        colorPressed = col;
 800360a:	e9c4 5559 	strd	r5, r5, [r4, #356]	; 0x164
 800360e:	f7ff fde5 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button4.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003612:	a911      	add	r1, sp, #68	; 0x44
 8003614:	aa12      	add	r2, sp, #72	; 0x48
 8003616:	ee1a 0a10 	vmov	r0, s20
 800361a:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800361e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003622:	f00a ff21 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003626:	f04f 0203 	mov.w	r2, #3
        updateTextPosition();
 800362a:	ee1a 0a10 	vmov	r0, s20
 800362e:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
 8003632:	f7ff fe07 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5.setXY(60, 76);
 8003636:	224c      	movs	r2, #76	; 0x4c
 8003638:	213c      	movs	r1, #60	; 0x3c
 800363a:	ee1a 0a90 	vmov	r0, s21
 800363e:	f8c4 8198 	str.w	r8, [r4, #408]	; 0x198
        colorPressed = col;
 8003642:	e9c4 556b 	strd	r5, r5, [r4, #428]	; 0x1ac
 8003646:	f7ff fdc9 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button5.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800364a:	a911      	add	r1, sp, #68	; 0x44
 800364c:	aa12      	add	r2, sp, #72	; 0x48
 800364e:	ee1a 0a90 	vmov	r0, s21
 8003652:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003656:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 800365a:	f00a ff05 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800365e:	f04f 0204 	mov.w	r2, #4
        updateTextPosition();
 8003662:	ee1a 0a90 	vmov	r0, s21
 8003666:	f8a4 21f0 	strh.w	r2, [r4, #496]	; 0x1f0
 800366a:	f7ff fdeb 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6.setXY(120, 76);
 800366e:	224c      	movs	r2, #76	; 0x4c
 8003670:	2178      	movs	r1, #120	; 0x78
 8003672:	ee1b 0a10 	vmov	r0, s22
 8003676:	f8c4 81e0 	str.w	r8, [r4, #480]	; 0x1e0
        colorPressed = col;
 800367a:	e9c4 557d 	strd	r5, r5, [r4, #500]	; 0x1f4
 800367e:	f7ff fdad 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button6.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003682:	aa12      	add	r2, sp, #72	; 0x48
 8003684:	a911      	add	r1, sp, #68	; 0x44
 8003686:	ee1b 0a10 	vmov	r0, s22
 800368a:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800368e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003692:	f00a fee9 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003696:	ee1b 0a10 	vmov	r0, s22
 800369a:	f8a4 7238 	strh.w	r7, [r4, #568]	; 0x238
 800369e:	f7ff fdd1 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1.setXY(0, 136);
 80036a2:	2288      	movs	r2, #136	; 0x88
 80036a4:	4631      	mov	r1, r6
 80036a6:	ee1b 0a90 	vmov	r0, s23
 80036aa:	f8c4 8228 	str.w	r8, [r4, #552]	; 0x228
        colorPressed = col;
 80036ae:	e9c4 558f 	strd	r5, r5, [r4, #572]	; 0x23c
 80036b2:	f7ff fd93 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80036b6:	a911      	add	r1, sp, #68	; 0x44
 80036b8:	aa12      	add	r2, sp, #72	; 0x48
 80036ba:	ee1b 0a90 	vmov	r0, s23
 80036be:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80036c2:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80036c6:	f00a fecf 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80036ca:	f04f 0206 	mov.w	r2, #6
        updateTextPosition();
 80036ce:	ee1b 0a90 	vmov	r0, s23
 80036d2:	f8a4 2280 	strh.w	r2, [r4, #640]	; 0x280
 80036d6:	f7ff fdb5 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2.setXY(60, 136);
 80036da:	2288      	movs	r2, #136	; 0x88
 80036dc:	213c      	movs	r1, #60	; 0x3c
 80036de:	ee1c 0a10 	vmov	r0, s24
 80036e2:	f8c4 8270 	str.w	r8, [r4, #624]	; 0x270
        colorPressed = col;
 80036e6:	e9c4 55a1 	strd	r5, r5, [r4, #644]	; 0x284
 80036ea:	f7ff fd77 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80036ee:	a911      	add	r1, sp, #68	; 0x44
 80036f0:	aa12      	add	r2, sp, #72	; 0x48
 80036f2:	ee1c 0a10 	vmov	r0, s24
 80036f6:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80036fa:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80036fe:	f00a feb3 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003702:	f04f 0207 	mov.w	r2, #7
        updateTextPosition();
 8003706:	ee1c 0a10 	vmov	r0, s24
 800370a:	e00b      	b.n	8003724 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 800370c:	0801f4cc 	.word	0x0801f4cc
 8003710:	0801e1a4 	.word	0x0801e1a4
 8003714:	0801f424 	.word	0x0801f424
 8003718:	0801e18c 	.word	0x0801e18c
 800371c:	080030a7 	.word	0x080030a7
 8003720:	ff570e0e 	.word	0xff570e0e
 8003724:	f8a4 22c8 	strh.w	r2, [r4, #712]	; 0x2c8
 8003728:	f7ff fd8c 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3.setXY(120, 136);
 800372c:	2288      	movs	r2, #136	; 0x88
 800372e:	2178      	movs	r1, #120	; 0x78
 8003730:	ee1c 0a90 	vmov	r0, s25
 8003734:	f8c4 82b8 	str.w	r8, [r4, #696]	; 0x2b8
        colorPressed = col;
 8003738:	e9c4 55b3 	strd	r5, r5, [r4, #716]	; 0x2cc
 800373c:	f7ff fd4e 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003740:	aa12      	add	r2, sp, #72	; 0x48
 8003742:	a911      	add	r1, sp, #68	; 0x44
 8003744:	ee1c 0a90 	vmov	r0, s25
 8003748:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800374c:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003750:	f00a fe8a 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003754:	ee1c 0a90 	vmov	r0, s25
 8003758:	f8a4 a310 	strh.w	sl, [r4, #784]	; 0x310
 800375c:	f7ff fd72 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear.setXY(0, 196);
 8003760:	22c4      	movs	r2, #196	; 0xc4
 8003762:	4631      	mov	r1, r6
 8003764:	ee1d 0a10 	vmov	r0, s26
 8003768:	f8c4 8300 	str.w	r8, [r4, #768]	; 0x300
        colorPressed = col;
 800376c:	e9c4 55c5 	strd	r5, r5, [r4, #788]	; 0x314
 8003770:	f7ff fd34 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003774:	aa12      	add	r2, sp, #72	; 0x48
 8003776:	a911      	add	r1, sp, #68	; 0x44
 8003778:	ee1d 0a10 	vmov	r0, s26
 800377c:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003780:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003784:	f00a fe70 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003788:	ee1d 0a10 	vmov	r0, s26
 800378c:	f8a4 9358 	strh.w	r9, [r4, #856]	; 0x358
 8003790:	f7ff fd58 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0.setXY(60, 196);
 8003794:	22c4      	movs	r2, #196	; 0xc4
 8003796:	213c      	movs	r1, #60	; 0x3c
 8003798:	4658      	mov	r0, fp
 800379a:	f8c4 8348 	str.w	r8, [r4, #840]	; 0x348
        colorPressed = col;
 800379e:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
 80037a2:	f7ff fd1b 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80037a6:	a911      	add	r1, sp, #68	; 0x44
 80037a8:	aa12      	add	r2, sp, #72	; 0x48
 80037aa:	4658      	mov	r0, fp
 80037ac:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80037b0:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80037b4:	f00a fe58 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80037b8:	f04f 020a 	mov.w	r2, #10
        updateTextPosition();
 80037bc:	4658      	mov	r0, fp
 80037be:	f8a4 23a0 	strh.w	r2, [r4, #928]	; 0x3a0
 80037c2:	f7ff fd3f 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend.setXY(120, 196);
 80037c6:	22c4      	movs	r2, #196	; 0xc4
 80037c8:	2178      	movs	r1, #120	; 0x78
 80037ca:	ee1d 0a90 	vmov	r0, s27
 80037ce:	f8c4 8390 	str.w	r8, [r4, #912]	; 0x390
        colorPressed = col;
 80037d2:	e9c4 55e9 	strd	r5, r5, [r4, #932]	; 0x3a4
 80037d6:	f7ff fd01 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80037da:	a911      	add	r1, sp, #68	; 0x44
 80037dc:	aa12      	add	r2, sp, #72	; 0x48
 80037de:	ee1d 0a90 	vmov	r0, s27
 80037e2:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80037e6:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80037ea:	f00a fe3d 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80037ee:	f04f 020b 	mov.w	r2, #11
        updateTextPosition();
 80037f2:	ee1d 0a90 	vmov	r0, s27
 80037f6:	f8a4 23e8 	strh.w	r2, [r4, #1000]	; 0x3e8
 80037fa:	f7ff fd23 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSwitch.setXY(180, 196);
 80037fe:	22c4      	movs	r2, #196	; 0xc4
 8003800:	21b4      	movs	r1, #180	; 0xb4
 8003802:	ee1f 0a10 	vmov	r0, s30
 8003806:	f8c4 83d8 	str.w	r8, [r4, #984]	; 0x3d8
        colorPressed = col;
 800380a:	e9c4 55fb 	strd	r5, r5, [r4, #1004]	; 0x3ec
 800380e:	f7ff fce5 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    buttonSwitch.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID));
 8003812:	aa12      	add	r2, sp, #72	; 0x48
 8003814:	a90f      	add	r1, sp, #60	; 0x3c
 8003816:	ee1f 0a10 	vmov	r0, s30
 800381a:	9200      	str	r2, [sp, #0]
 800381c:	aa11      	add	r2, sp, #68	; 0x44
 800381e:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
 8003822:	4613      	mov	r3, r2
 8003824:	aa10      	add	r2, sp, #64	; 0x40
 8003826:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 800382a:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800382e:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003832:	f00b f876 	bl	800e922 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8003836:	f04f 020f 	mov.w	r2, #15
    boxWithBorder1_1.setPosition(247, 5, 121, 82);
 800383a:	2379      	movs	r3, #121	; 0x79
 800383c:	21f7      	movs	r1, #247	; 0xf7
 800383e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003840:	f8a4 2430 	strh.w	r2, [r4, #1072]	; 0x430
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
    {
        iconY = y;
 8003844:	f04f 0210 	mov.w	r2, #16
 8003848:	f8c4 8420 	str.w	r8, [r4, #1056]	; 0x420
 800384c:	f8a4 2432 	strh.w	r2, [r4, #1074]	; 0x432
 8003850:	2252      	movs	r2, #82	; 0x52
 8003852:	9200      	str	r2, [sp, #0]
 8003854:	463a      	mov	r2, r7
 8003856:	f7ff fcce 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
    {
        borderColor = color;
 800385a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <_ZN15Screen1ViewBaseC1Ev+0x578>)
    boxWithBorder1.setPosition(372, 5, 100, 82);
 8003860:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003864:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
 8003868:	2252      	movs	r2, #82	; 0x52
 800386a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800386c:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
 8003870:	2364      	movs	r3, #100	; 0x64
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8003872:	f8a4 7464 	strh.w	r7, [r4, #1124]	; 0x464
 8003876:	9200      	str	r2, [sp, #0]
 8003878:	463a      	mov	r2, r7
 800387a:	f7ff fcbc 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <_ZN15Screen1ViewBaseC1Ev+0x578>)
 8003880:	f8a4 7498 	strh.w	r7, [r4, #1176]	; 0x498
    textAreaFreq.setPosition(255, 40, 104, 35);
 8003884:	2228      	movs	r2, #40	; 0x28
 8003886:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
        borderColor = color;
 800388a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800388e:	21ff      	movs	r1, #255	; 0xff
 8003890:	ee1f 0a90 	vmov	r0, s31
 8003894:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
 8003898:	2323      	movs	r3, #35	; 0x23
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 800389a:	f504 67de 	add.w	r7, r4, #1776	; 0x6f0
    textAreaFreq.setPosition(255, 40, 104, 35);
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2368      	movs	r3, #104	; 0x68
 80038a2:	f7ff fca8 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <_ZN15Screen1ViewBaseC1Ev+0x57c>)
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80038a8:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
 80038ac:	681b      	ldr	r3, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80038ae:	f8a4 64d0 	strh.w	r6, [r4, #1232]	; 0x4d0
 80038b2:	b92b      	cbnz	r3, 80038c0 <_ZN15Screen1ViewBaseC1Ev+0x568>
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <_ZN15Screen1ViewBaseC1Ev+0x580>)
 80038b6:	21ae      	movs	r1, #174	; 0xae
 80038b8:	4a08      	ldr	r2, [pc, #32]	; (80038dc <_ZN15Screen1ViewBaseC1Ev+0x584>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80038ba:	4809      	ldr	r0, [pc, #36]	; (80038e0 <_ZN15Screen1ViewBaseC1Ev+0x588>)
 80038bc:	f018 fcf6 	bl	801c2ac <__assert_func>
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <_ZN15Screen1ViewBaseC1Ev+0x58c>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d811      	bhi.n	80038ec <_ZN15Screen1ViewBaseC1Ev+0x594>
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <_ZN15Screen1ViewBaseC1Ev+0x590>)
 80038ca:	21af      	movs	r1, #175	; 0xaf
 80038cc:	4a03      	ldr	r2, [pc, #12]	; (80038dc <_ZN15Screen1ViewBaseC1Ev+0x584>)
 80038ce:	e7f4      	b.n	80038ba <_ZN15Screen1ViewBaseC1Ev+0x562>
 80038d0:	ff570e0e 	.word	0xff570e0e
 80038d4:	24006cb4 	.word	0x24006cb4
 80038d8:	0801e078 	.word	0x0801e078
 80038dc:	0801e0ba 	.word	0x0801e0ba
 80038e0:	0801e0e8 	.word	0x0801e0e8
 80038e4:	24006cb8 	.word	0x24006cb8
 80038e8:	0801e12f 	.word	0x0801e12f
        return texts->getText(typedTextId);
 80038ec:	4bc8      	ldr	r3, [pc, #800]	; (8003c10 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 80038ee:	2110      	movs	r1, #16
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f000 ffb3 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 80038f6:	4ac7      	ldr	r2, [pc, #796]	; (8003c14 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 80038f8:	4603      	mov	r3, r0
 80038fa:	2103      	movs	r1, #3
 80038fc:	4638      	mov	r0, r7
 80038fe:	f00f fe29 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003902:	230e      	movs	r3, #14
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
 8003904:	f8c4 74d8 	str.w	r7, [r4, #1240]	; 0x4d8
    textAreaFreq.setTypedText(touchgfx::TypedText(T_FREQ));
 8003908:	a912      	add	r1, sp, #72	; 0x48
 800390a:	4fc3      	ldr	r7, [pc, #780]	; (8003c18 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 800390c:	ee1f 0a90 	vmov	r0, s31
 8003910:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003914:	9712      	str	r7, [sp, #72]	; 0x48
 8003916:	f00a fd67 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreaMI.setPosition(380, 46, 84, 31);
 800391a:	231f      	movs	r3, #31
 800391c:	222e      	movs	r2, #46	; 0x2e
 800391e:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003922:	9803      	ldr	r0, [sp, #12]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2354      	movs	r3, #84	; 0x54
 8003928:	f7ff fc65 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Unicode::snprintf(textAreaMIBuffer, TEXTAREAMI_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LXQE).getText());
 800392c:	f204 62f6 	addw	r2, r4, #1782	; 0x6f6
        this->color = color;
 8003930:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8003934:	920d      	str	r2, [sp, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003936:	4ab9      	ldr	r2, [pc, #740]	; (8003c1c <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
        linespace = space;
 8003938:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 800393c:	6813      	ldr	r3, [r2, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0b8      	beq.n	80038b4 <_ZN15Screen1ViewBaseC1Ev+0x55c>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8003942:	4ab7      	ldr	r2, [pc, #732]	; (8003c20 <_ZN15Screen1ViewBaseC1Ev+0x8c8>)
 8003944:	8813      	ldrh	r3, [r2, #0]
 8003946:	2b11      	cmp	r3, #17
 8003948:	d9be      	bls.n	80038c8 <_ZN15Screen1ViewBaseC1Ev+0x570>
        return texts->getText(typedTextId);
 800394a:	4bb1      	ldr	r3, [pc, #708]	; (8003c10 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 800394c:	2111      	movs	r1, #17
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	f000 ff84 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 8003954:	4aaf      	ldr	r2, [pc, #700]	; (8003c14 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 8003956:	4603      	mov	r3, r0
 8003958:	2104      	movs	r1, #4
 800395a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800395c:	f00f fdfa 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    textAreaMI.setTypedText(touchgfx::TypedText(T_MI));
 8003962:	a912      	add	r1, sp, #72	; 0x48
 8003964:	9803      	ldr	r0, [sp, #12]
 8003966:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
        : typedTextId(id)
 800396a:	f04f 030f 	mov.w	r3, #15
 800396e:	9712      	str	r7, [sp, #72]	; 0x48
 8003970:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003974:	f00a fd38 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2.setXY(402, 15);
 8003978:	220f      	movs	r2, #15
 800397a:	9804      	ldr	r0, [sp, #16]
 800397c:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8003980:	f7ff fc2c 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 8003984:	230c      	movs	r3, #12
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IO59));
 8003986:	a912      	add	r1, sp, #72	; 0x48
 8003988:	9804      	ldr	r0, [sp, #16]
        this->color = color;
 800398a:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
        linespace = space;
 800398e:	f8a4 6550 	strh.w	r6, [r4, #1360]	; 0x550
 8003992:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003996:	9712      	str	r7, [sp, #72]	; 0x48
 8003998:	f00a fd26 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2_1.setXY(255, 15);
 800399c:	220f      	movs	r2, #15
 800399e:	9805      	ldr	r0, [sp, #20]
 80039a0:	21ff      	movs	r1, #255	; 0xff
 80039a2:	f7ff fc1b 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 80039a6:	230d      	movs	r3, #13
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X3GJ));
 80039a8:	a912      	add	r1, sp, #72	; 0x48
 80039aa:	9805      	ldr	r0, [sp, #20]
        this->color = color;
 80039ac:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
        linespace = space;
 80039b0:	f8a4 658c 	strh.w	r6, [r4, #1420]	; 0x58c
 80039b4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80039b8:	9712      	str	r7, [sp, #72]	; 0x48
 80039ba:	f00a fd15 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonDot.setXY(180, 136);
 80039be:	ee1e 0a10 	vmov	r0, s28
 80039c2:	2288      	movs	r2, #136	; 0x88
 80039c4:	21b4      	movs	r1, #180	; 0xb4
 80039c6:	f04f 0706 	mov.w	r7, #6
 80039ca:	f7ff fc07 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    buttonDot.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80039ce:	aa12      	add	r2, sp, #72	; 0x48
 80039d0:	a911      	add	r1, sp, #68	; 0x44
 80039d2:	ee1e 0a10 	vmov	r0, s28
 80039d6:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80039da:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80039de:	f00a fd43 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 80039e2:	2312      	movs	r3, #18
        updateTextPosition();
 80039e4:	ee1e 0a10 	vmov	r0, s28
 80039e8:	f8a4 35cc 	strh.w	r3, [r4, #1484]	; 0x5cc
 80039ec:	f7ff fc2a 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 80039f0:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
        colorPressed = col;
 80039f4:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 80039f8:	f04f 0507 	mov.w	r5, #7
    toggleButtonFreq.setXY(259, 98);
 80039fc:	9806      	ldr	r0, [sp, #24]
 80039fe:	2262      	movs	r2, #98	; 0x62
 8003a00:	f240 1103 	movw	r1, #259	; 0x103
 8003a04:	f8c4 85bc 	str.w	r8, [r4, #1468]	; 0x5bc
 8003a08:	f7ff fbe8 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003a0c:	aa12      	add	r2, sp, #72	; 0x48
 8003a0e:	a911      	add	r1, sp, #68	; 0x44
 8003a10:	9806      	ldr	r0, [sp, #24]
        originalPressed = bitmapPressed;
 8003a12:	f8a4 5610 	strh.w	r5, [r4, #1552]	; 0x610
 8003a16:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 8003a1a:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003a1e:	f00a fd23 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButtonMI.setXY(374, 98);
 8003a22:	9807      	ldr	r0, [sp, #28]
 8003a24:	2262      	movs	r2, #98	; 0x62
 8003a26:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8003a2a:	f8c4 8604 	str.w	r8, [r4, #1540]	; 0x604
 8003a2e:	f7ff fbd5 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 8003a32:	aa12      	add	r2, sp, #72	; 0x48
 8003a34:	a911      	add	r1, sp, #68	; 0x44
 8003a36:	9807      	ldr	r0, [sp, #28]
        originalPressed = bitmapPressed;
 8003a38:	f8a4 5648 	strh.w	r5, [r4, #1608]	; 0x648
 8003a3c:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003a40:	1d25      	adds	r5, r4, #4
 8003a42:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003a46:	f00a fd0f 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonPower.setXY(244, 202);
 8003a4a:	9808      	ldr	r0, [sp, #32]
 8003a4c:	22ca      	movs	r2, #202	; 0xca
 8003a4e:	21f4      	movs	r1, #244	; 0xf4
 8003a50:	f8c4 863c 	str.w	r8, [r4, #1596]	; 0x63c
 8003a54:	f7ff fbc2 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 8003a58:	f04f 020a 	mov.w	r2, #10
    buttonPower.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 8003a5c:	ab12      	add	r3, sp, #72	; 0x48
 8003a5e:	a90f      	add	r1, sp, #60	; 0x3c
 8003a60:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8003a64:	f04f 020b 	mov.w	r2, #11
 8003a68:	9808      	ldr	r0, [sp, #32]
 8003a6a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8003a6e:	f04f 0204 	mov.w	r2, #4
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8003a78:	f04f 0201 	mov.w	r2, #1
 8003a7c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8003a80:	aa11      	add	r2, sp, #68	; 0x44
 8003a82:	4613      	mov	r3, r2
 8003a84:	aa10      	add	r2, sp, #64	; 0x40
 8003a86:	f00a ff4c 	bl	800e922 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8003a8a:	2347      	movs	r3, #71	; 0x47
        iconY = y;
 8003a8c:	f04f 0210 	mov.w	r2, #16
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 8003a90:	a912      	add	r1, sp, #72	; 0x48
 8003a92:	ee1e 0a90 	vmov	r0, s29
        iconX = x;
 8003a96:	f8a4 3684 	strh.w	r3, [r4, #1668]	; 0x684
        iconY = y;
 8003a9a:	f8a4 2686 	strh.w	r2, [r4, #1670]	; 0x686
 8003a9e:	f8c4 8674 	str.w	r8, [r4, #1652]	; 0x674
 8003aa2:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 8003aa6:	f00b f806 	bl	800eab6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(241, 9, 2, 250);
 8003aaa:	23fa      	movs	r3, #250	; 0xfa
 8003aac:	464a      	mov	r2, r9
 8003aae:	ee1e 0a90 	vmov	r0, s29
 8003ab2:	21f1      	movs	r1, #241	; 0xf1
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	f7ff fb9d 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003abc:	4631      	mov	r1, r6
 8003abe:	ee1e 0a90 	vmov	r0, s29
 8003ac2:	f00a f86c 	bl	800db9e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    button2Direct.setXY(416, 202);
 8003ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ac8:	22ca      	movs	r2, #202	; 0xca
 8003aca:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003ace:	f7ff fb85 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 8003ad2:	f04f 0203 	mov.w	r2, #3
    button2Direct.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
 8003ad6:	ab12      	add	r3, sp, #72	; 0x48
 8003ad8:	a90f      	add	r1, sp, #60	; 0x3c
 8003ada:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8003ade:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8003ae2:	aa11      	add	r2, sp, #68	; 0x44
 8003ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	aa10      	add	r2, sp, #64	; 0x40
 8003aec:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003af0:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003af4:	f00a ff15 	bl	800e922 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8003af8:	2316      	movs	r3, #22
 8003afa:	ee18 1a10 	vmov	r1, s16
 8003afe:	4628      	mov	r0, r5
 8003b00:	f8c4 86dc 	str.w	r8, [r4, #1756]	; 0x6dc
 8003b04:	f8a4 36ec 	strh.w	r3, [r4, #1772]	; 0x6ec
        iconY = y;
 8003b08:	f04f 030f 	mov.w	r3, #15
 8003b0c:	f8a4 36ee 	strh.w	r3, [r4, #1774]	; 0x6ee
 8003b10:	f008 fdb8 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b16:	4628      	mov	r0, r5
 8003b18:	f008 fdb4 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b1c:	ee18 1a90 	vmov	r1, s17
 8003b20:	4628      	mov	r0, r5
 8003b22:	f008 fdaf 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b26:	ee19 1a10 	vmov	r1, s18
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f008 fdaa 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b30:	ee19 1a90 	vmov	r1, s19
 8003b34:	4628      	mov	r0, r5
 8003b36:	f008 fda5 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b3a:	ee1a 1a10 	vmov	r1, s20
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f008 fda0 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b44:	ee1a 1a90 	vmov	r1, s21
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f008 fd9b 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b4e:	ee1b 1a10 	vmov	r1, s22
 8003b52:	4628      	mov	r0, r5
 8003b54:	f008 fd96 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b58:	ee1b 1a90 	vmov	r1, s23
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f008 fd91 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b62:	ee1c 1a10 	vmov	r1, s24
 8003b66:	4628      	mov	r0, r5
 8003b68:	f008 fd8c 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b6c:	ee1c 1a90 	vmov	r1, s25
 8003b70:	4628      	mov	r0, r5
 8003b72:	f008 fd87 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b76:	ee1d 1a10 	vmov	r1, s26
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f008 fd82 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b80:	4659      	mov	r1, fp
 8003b82:	4628      	mov	r0, r5
 8003b84:	f008 fd7e 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b88:	ee1d 1a90 	vmov	r1, s27
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f008 fd79 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b92:	ee1f 1a10 	vmov	r1, s30
 8003b96:	4628      	mov	r0, r5
 8003b98:	f008 fd74 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f008 fd70 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003ba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f008 fd6c 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bac:	ee1f 1a90 	vmov	r1, s31
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f008 fd67 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bb6:	9903      	ldr	r1, [sp, #12]
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f008 fd63 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bbe:	9904      	ldr	r1, [sp, #16]
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f008 fd5f 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bc6:	9905      	ldr	r1, [sp, #20]
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f008 fd5b 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bce:	ee1e 1a10 	vmov	r1, s28
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f008 fd56 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bd8:	9906      	ldr	r1, [sp, #24]
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f008 fd52 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003be0:	9907      	ldr	r1, [sp, #28]
 8003be2:	4628      	mov	r0, r5
 8003be4:	f008 fd4e 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003be8:	9908      	ldr	r1, [sp, #32]
 8003bea:	4628      	mov	r0, r5
 8003bec:	f008 fd4a 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bf0:	ee1e 1a90 	vmov	r1, s29
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f008 fd45 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bfe:	f008 fd41 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003c02:	4620      	mov	r0, r4
 8003c04:	b015      	add	sp, #84	; 0x54
 8003c06:	ecbd 8b10 	vpop	{d8-d15}
 8003c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0e:	bf00      	nop
 8003c10:	24006cc0 	.word	0x24006cc0
 8003c14:	0801e181 	.word	0x0801e181
 8003c18:	0801db74 	.word	0x0801db74
 8003c1c:	24006cb4 	.word	0x24006cb4
 8003c20:	24006cb8 	.word	0x24006cb8

08003c24 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8003c24:	4770      	bx	lr

08003c26 <_ZN15Screen2ViewBase17button7_p2ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button7_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c26:	4770      	bx	lr

08003c28 <_ZN15Screen2ViewBase17button8_p2ClickedEv>:

    virtual void button8_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c28:	4770      	bx	lr

08003c2a <_ZN15Screen2ViewBase17button9_p2ClickedEv>:

    virtual void button9_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c2a:	4770      	bx	lr

08003c2c <_ZN15Screen2ViewBase17button4_p2ClickedEv>:

    virtual void button4_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c2c:	4770      	bx	lr

08003c2e <_ZN15Screen2ViewBase17button5_p2ClickedEv>:

    virtual void button5_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c2e:	4770      	bx	lr

08003c30 <_ZN15Screen2ViewBase17button6_p2ClickedEv>:

    virtual void button6_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c30:	4770      	bx	lr

08003c32 <_ZN15Screen2ViewBase17button1_p2ClickedEv>:

    virtual void button1_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c32:	4770      	bx	lr

08003c34 <_ZN15Screen2ViewBase17button2_p2ClickedEv>:

    virtual void button2_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c34:	4770      	bx	lr

08003c36 <_ZN15Screen2ViewBase17button3_p2ClickedEv>:

    virtual void button3_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c36:	4770      	bx	lr

08003c38 <_ZN15Screen2ViewBase21buttonClear_p2ClickedEv>:

    virtual void buttonClear_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c38:	4770      	bx	lr

08003c3a <_ZN15Screen2ViewBase17button0_p2ClickedEv>:

    virtual void button0_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c3a:	4770      	bx	lr

08003c3c <_ZN15Screen2ViewBase20buttonSend_p2ClickedEv>:

    virtual void buttonSend_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c3c:	4770      	bx	lr

08003c3e <_ZN15Screen2ViewBase21buttonPower_p2ClickedEv>:

    virtual void buttonPower_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c3e:	4770      	bx	lr

08003c40 <_ZN15Screen2ViewBase20button2ManualClickedEv>:

    virtual void button2ManualClicked()
    {
        // Override and implement this function in Screen2
    }
 8003c40:	4770      	bx	lr

08003c42 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
 8003c42:	4770      	bx	lr

08003c44 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003c44:	4770      	bx	lr

08003c46 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003c46:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003c48:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003c4a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003c4c:	68c2      	ldr	r2, [r0, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	1055      	asrs	r5, r2, #1
 8003c52:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003c56:	07d2      	lsls	r2, r2, #31
 8003c58:	bf48      	it	mi
 8003c5a:	5962      	ldrmi	r2, [r4, r5]
    }
 8003c5c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003c5e:	bf48      	it	mi
 8003c60:	58d3      	ldrmi	r3, [r2, r3]
 8003c62:	4718      	bx	r3

08003c64 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003c64:	6843      	ldr	r3, [r0, #4]
 8003c66:	b12b      	cbz	r3, 8003c74 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003c68:	6883      	ldr	r3, [r0, #8]
 8003c6a:	b92b      	cbnz	r3, 8003c78 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003c6c:	68c0      	ldr	r0, [r0, #12]
 8003c6e:	f000 0001 	and.w	r0, r0, #1
 8003c72:	4770      	bx	lr
 8003c74:	4618      	mov	r0, r3
 8003c76:	4770      	bx	lr
 8003c78:	2001      	movs	r0, #1
    }
 8003c7a:	4770      	bx	lr

08003c7c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4604      	mov	r4, r0
 8003c80:	2110      	movs	r1, #16
 8003c82:	f018 f9fd 	bl	801c080 <_ZdlPvj>
 8003c86:	4620      	mov	r0, r4
 8003c88:	bd10      	pop	{r4, pc}

08003c8a <_ZN15Screen2ViewBaseD0Ev>:
    virtual ~Screen2ViewBase() {}
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003c92:	f018 f9f5 	bl	801c080 <_ZdlPvj>
 8003c96:	4620      	mov	r0, r4
 8003c98:	bd10      	pop	{r4, pc}

08003c9a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button2Manual_p2)
 8003c9a:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8003c9e:	4299      	cmp	r1, r3
{
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4604      	mov	r4, r0
    if (&src == &button2Manual_p2)
 8003ca4:	d107      	bne.n	8003cb6 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003ca6:	f00c fd3f 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When button2Manual_p2 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 8003caa:	f7fe ffa7 	bl	8002bfc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

        //button2ManualClicked
        //When button2Manual_p2 clicked call virtual function
        //Call button2ManualClicked
        button2ManualClicked();
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    else if (&src == &buttonPower_p2)
    {
        //buttonPower_p2Clicked
        //When buttonPower_p2 clicked call virtual function
        //Call buttonPower_p2Clicked
        buttonPower_p2Clicked();
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	e005      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button7_p2)
 8003cb6:	f100 03d4 	add.w	r3, r0, #212	; 0xd4
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	d104      	bne.n	8003cc8 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
        button7_p2Clicked();
 8003cbe:	6803      	ldr	r3, [r0, #0]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }
}
 8003cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonPower_p2Clicked();
 8003cc6:	4718      	bx	r3
    else if (&src == &button8_p2)
 8003cc8:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003ccc:	4299      	cmp	r1, r3
 8003cce:	d102      	bne.n	8003cd6 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        button8_p2Clicked();
 8003cd0:	6803      	ldr	r3, [r0, #0]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	e7f5      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button9_p2)
 8003cd6:	f500 73b2 	add.w	r3, r0, #356	; 0x164
 8003cda:	4299      	cmp	r1, r3
 8003cdc:	d102      	bne.n	8003ce4 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4a>
        button9_p2Clicked();
 8003cde:	6803      	ldr	r3, [r0, #0]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	e7ee      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button4_p2)
 8003ce4:	f500 73d6 	add.w	r3, r0, #428	; 0x1ac
 8003ce8:	4299      	cmp	r1, r3
 8003cea:	d102      	bne.n	8003cf2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        button4_p2Clicked();
 8003cec:	6803      	ldr	r3, [r0, #0]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	e7e7      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button5_p2)
 8003cf2:	f500 73fa 	add.w	r3, r0, #500	; 0x1f4
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	d102      	bne.n	8003d00 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
        button5_p2Clicked();
 8003cfa:	6803      	ldr	r3, [r0, #0]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	e7e0      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button6_p2)
 8003d00:	f500 730f 	add.w	r3, r0, #572	; 0x23c
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d102      	bne.n	8003d0e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x74>
        button6_p2Clicked();
 8003d08:	6803      	ldr	r3, [r0, #0]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	e7d9      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button1_p2)
 8003d0e:	f500 7321 	add.w	r3, r0, #644	; 0x284
 8003d12:	4299      	cmp	r1, r3
 8003d14:	d102      	bne.n	8003d1c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x82>
        button1_p2Clicked();
 8003d16:	6803      	ldr	r3, [r0, #0]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	e7d2      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button2_p2)
 8003d1c:	f500 7333 	add.w	r3, r0, #716	; 0x2cc
 8003d20:	4299      	cmp	r1, r3
 8003d22:	d102      	bne.n	8003d2a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
        button2_p2Clicked();
 8003d24:	6803      	ldr	r3, [r0, #0]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d28:	e7cb      	b.n	8003cc2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button3_p2)
 8003d2a:	f500 7345 	add.w	r3, r0, #788	; 0x314
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	d102      	bne.n	8003d38 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
        button3_p2Clicked();
 8003d32:	6803      	ldr	r3, [r0, #0]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d36:	e7bc      	b.n	8003cb2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonClear_p2)
 8003d38:	f500 7357 	add.w	r3, r0, #860	; 0x35c
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	d102      	bne.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xac>
        buttonClear_p2Clicked();
 8003d40:	6803      	ldr	r3, [r0, #0]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	e7b5      	b.n	8003cb2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &button0_p2)
 8003d46:	f500 7369 	add.w	r3, r0, #932	; 0x3a4
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	d102      	bne.n	8003d54 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xba>
        button0_p2Clicked();
 8003d4e:	6803      	ldr	r3, [r0, #0]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	e7ae      	b.n	8003cb2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonSend_p2)
 8003d54:	f500 737b 	add.w	r3, r0, #1004	; 0x3ec
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d102      	bne.n	8003d62 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>
        buttonSend_p2Clicked();
 8003d5c:	6803      	ldr	r3, [r0, #0]
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	e7a7      	b.n	8003cb2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonPower_p2)
 8003d62:	f500 63b8 	add.w	r3, r0, #1472	; 0x5c0
 8003d66:	4299      	cmp	r1, r3
 8003d68:	d102      	bne.n	8003d70 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
        buttonPower_p2Clicked();
 8003d6a:	6803      	ldr	r3, [r0, #0]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	e7a0      	b.n	8003cb2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
}
 8003d70:	bd10      	pop	{r4, pc}
	...

08003d74 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	4604      	mov	r4, r0
 8003d7a:	f04f 0a00 	mov.w	sl, #0
        : Box(), borderColor(0), borderSize(0)
 8003d7e:	4eeb      	ldr	r6, [pc, #940]	; (800412c <_ZN15Screen2ViewBaseC1Ev+0x3b8>)
 8003d80:	2708      	movs	r7, #8
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003d82:	f504 7b69 	add.w	fp, r4, #932	; 0x3a4
        : TextArea(), wildcard(0)
 8003d86:	4dea      	ldr	r5, [pc, #936]	; (8004130 <_ZN15Screen2ViewBaseC1Ev+0x3bc>)
 8003d88:	f04f 0802 	mov.w	r8, #2
    button2Manual_p2.setAction(buttonCallback);
 8003d8c:	f504 69c2 	add.w	r9, r4, #1552	; 0x610
Screen2ViewBase::Screen2ViewBase() :
 8003d90:	ed2d 8b10 	vpush	{d8-d15}
 8003d94:	b08f      	sub	sp, #60	; 0x3c
 8003d96:	f00d ff09 	bl	8011bac <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4be5      	ldr	r3, [pc, #916]	; (8004134 <_ZN15Screen2ViewBaseC1Ev+0x3c0>)
 8003d9e:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
 8003da2:	f842 3b40 	str.w	r3, [r2], #64
 8003da6:	4610      	mov	r0, r2
 8003da8:	ee08 2a10 	vmov	s16, r2
 8003dac:	f7ff fa36 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 8003db0:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003db4:	4618      	mov	r0, r3
 8003db6:	9305      	str	r3, [sp, #20]
 8003db8:	f7ff fa30 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 8003dbc:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	ee0e 3a90 	vmov	s29, r3
 8003dc6:	f00a fe4f 	bl	800ea68 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8003dca:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	ee08 3a90 	vmov	s17, r3
 8003dd4:	f00a ffb4 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003dd8:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8003ddc:	4618      	mov	r0, r3
 8003dde:	ee09 3a10 	vmov	s18, r3
 8003de2:	f00a ffad 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003de6:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003dea:	4618      	mov	r0, r3
 8003dec:	ee09 3a90 	vmov	s19, r3
 8003df0:	f00a ffa6 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003df4:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8003df8:	4618      	mov	r0, r3
 8003dfa:	ee0a 3a10 	vmov	s20, r3
 8003dfe:	f00a ff9f 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e02:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8003e06:	4618      	mov	r0, r3
 8003e08:	ee0a 3a90 	vmov	s21, r3
 8003e0c:	f00a ff98 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e10:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 8003e14:	4618      	mov	r0, r3
 8003e16:	ee0b 3a10 	vmov	s22, r3
 8003e1a:	f00a ff91 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e1e:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8003e22:	4618      	mov	r0, r3
 8003e24:	ee0b 3a90 	vmov	s23, r3
 8003e28:	f00a ff8a 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e2c:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 8003e30:	4618      	mov	r0, r3
 8003e32:	ee0c 3a10 	vmov	s24, r3
 8003e36:	f00a ff83 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e3a:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003e3e:	4618      	mov	r0, r3
 8003e40:	ee0c 3a90 	vmov	s25, r3
 8003e44:	f00a ff7c 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e48:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	ee0d 3a10 	vmov	s26, r3
 8003e52:	f00a ff75 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e56:	4658      	mov	r0, fp
 8003e58:	f00a ff72 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e5c:	f504 737b 	add.w	r3, r4, #1004	; 0x3ec
 8003e60:	4618      	mov	r0, r3
 8003e62:	ee0d 3a90 	vmov	s27, r3
 8003e66:	f00a ff6b 	bl	800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e6a:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003e6e:	a90c      	add	r1, sp, #48	; 0x30
 8003e70:	ee0e 3a10 	vmov	s28, r3
 8003e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e78:	ee1e 0a10 	vmov	r0, s28
 8003e7c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8003e80:	f009 fec6 	bl	800dc10 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003e84:	f504 638c 	add.w	r3, r4, #1120	; 0x460
 8003e88:	4618      	mov	r0, r3
 8003e8a:	9306      	str	r3, [sp, #24]
 8003e8c:	f7ff f9c6 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 8003e90:	f204 4394 	addw	r3, r4, #1172	; 0x494
 8003e94:	f8c4 6460 	str.w	r6, [r4, #1120]	; 0x460
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f8c4 a48c 	str.w	sl, [r4, #1164]	; 0x48c
 8003e9e:	f8a4 a490 	strh.w	sl, [r4, #1168]	; 0x490
 8003ea2:	ee0f 3a10 	vmov	s30, r3
 8003ea6:	f7ff fa1d 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 8003eaa:	f204 43d4 	addw	r3, r4, #1236	; 0x4d4
 8003eae:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f8c4 a4d0 	str.w	sl, [r4, #1232]	; 0x4d0
 8003eb8:	ee0f 3a90 	vmov	s31, r3
 8003ebc:	f7ff fa12 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 8003ec0:	f504 63a2 	add.w	r3, r4, #1296	; 0x510
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	9307      	str	r3, [sp, #28]
 8003ec8:	f7ff f9a8 	bl	800321c <_ZN8touchgfx3BoxC1Ev>
 8003ecc:	f204 5344 	addw	r3, r4, #1348	; 0x544
 8003ed0:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
 8003ed4:	2609      	movs	r6, #9
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f8c4 a53c 	str.w	sl, [r4, #1340]	; 0x53c
 8003edc:	f8a4 a540 	strh.w	sl, [r4, #1344]	; 0x540
 8003ee0:	9302      	str	r3, [sp, #8]
 8003ee2:	f7ff f9ff 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 8003ee6:	f204 5384 	addw	r3, r4, #1412	; 0x584
 8003eea:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
 8003eee:	f8c4 a580 	str.w	sl, [r4, #1408]	; 0x580
    __background.setPosition(0, 0, 480, 272);
 8003ef2:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	9303      	str	r3, [sp, #12]
 8003efa:	f7ff f9f3 	bl	80032e4 <_ZN8touchgfx8TextAreaC1Ev>
 8003efe:	f504 63b8 	add.w	r3, r4, #1472	; 0x5c0
 8003f02:	4618      	mov	r0, r3
 8003f04:	9304      	str	r3, [sp, #16]
 8003f06:	f00a fdaf 	bl	800ea68 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003f0a:	4b8b      	ldr	r3, [pc, #556]	; (8004138 <_ZN15Screen2ViewBaseC1Ev+0x3c4>)
    __background.setPosition(0, 0, 480, 272);
 8003f0c:	4652      	mov	r2, sl
 8003f0e:	4651      	mov	r1, sl
 8003f10:	f8c4 3610 	str.w	r3, [r4, #1552]	; 0x610
 8003f14:	ee18 0a10 	vmov	r0, s16
 8003f18:	4b88      	ldr	r3, [pc, #544]	; (800413c <_ZN15Screen2ViewBaseC1Ev+0x3c8>)
 8003f1a:	9500      	str	r5, [sp, #0]
 8003f1c:	f8c4 3618 	str.w	r3, [r4, #1560]	; 0x618
 8003f20:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f24:	f8c4 4614 	str.w	r4, [r4, #1556]	; 0x614
 8003f28:	f8c4 a61c 	str.w	sl, [r4, #1564]	; 0x61c
 8003f2c:	f7ff f963 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003f30:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 8003f34:	4652      	mov	r2, sl
 8003f36:	4651      	mov	r1, sl
 8003f38:	9805      	ldr	r0, [sp, #20]
 8003f3a:	66a3      	str	r3, [r4, #104]	; 0x68
 8003f3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f40:	9500      	str	r5, [sp, #0]
        color = col;
 8003f42:	f04f 35ff 	mov.w	r5, #4294967295
 8003f46:	f7ff f956 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003f4a:	4b7d      	ldr	r3, [pc, #500]	; (8004140 <_ZN15Screen2ViewBaseC1Ev+0x3cc>)
    button2Manual_p2.setXY(4, 202);
 8003f4c:	22ca      	movs	r2, #202	; 0xca
 8003f4e:	2104      	movs	r1, #4
 8003f50:	ee1e 0a90 	vmov	r0, s29
 8003f54:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003f58:	f7ff f940 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button2Manual_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 8003f5c:	aa0c      	add	r2, sp, #48	; 0x30
 8003f5e:	a909      	add	r1, sp, #36	; 0x24
 8003f60:	ee1e 0a90 	vmov	r0, s29
 8003f64:	9200      	str	r2, [sp, #0]
 8003f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f68:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	aa0a      	add	r2, sp, #40	; 0x28
 8003f70:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8003f74:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8003f78:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8003f7c:	f00a fcd1 	bl	800e922 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8003f80:	230f      	movs	r3, #15
        iconX = x;
 8003f82:	f04f 0216 	mov.w	r2, #22
    button7_p2.setXY(283, 16);
 8003f86:	f240 111b 	movw	r1, #283	; 0x11b
 8003f8a:	ee18 0a90 	vmov	r0, s17
        iconY = y;
 8003f8e:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
        iconX = x;
 8003f92:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8003f96:	2210      	movs	r2, #16
 8003f98:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
 8003f9c:	f7ff f91e 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button7_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003fa0:	a90c      	add	r1, sp, #48	; 0x30
 8003fa2:	ee18 0a90 	vmov	r0, s17
 8003fa6:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8003faa:	460a      	mov	r2, r1
 8003fac:	a90b      	add	r1, sp, #44	; 0x2c
 8003fae:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8003fb2:	f00a fa59 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003fb6:	2313      	movs	r3, #19
        updateTextPosition();
 8003fb8:	ee18 0a90 	vmov	r0, s17
 8003fbc:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
 8003fc0:	f7ff f940 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8_p2.setXY(343, 16);
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	f240 1157 	movw	r1, #343	; 0x157
 8003fca:	ee19 0a10 	vmov	r0, s18
 8003fce:	f8c4 90fc 	str.w	r9, [r4, #252]	; 0xfc
        colorPressed = col;
 8003fd2:	e9c4 5544 	strd	r5, r5, [r4, #272]	; 0x110
 8003fd6:	f7ff f901 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button8_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003fda:	a90c      	add	r1, sp, #48	; 0x30
 8003fdc:	ee19 0a10 	vmov	r0, s18
 8003fe0:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	a90b      	add	r1, sp, #44	; 0x2c
 8003fe8:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8003fec:	f00a fa3c 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003ff0:	2314      	movs	r3, #20
        updateTextPosition();
 8003ff2:	ee19 0a10 	vmov	r0, s18
 8003ff6:	f8a4 3154 	strh.w	r3, [r4, #340]	; 0x154
 8003ffa:	f7ff f923 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9_p2.setXY(403, 16);
 8003ffe:	2210      	movs	r2, #16
 8004000:	f240 1193 	movw	r1, #403	; 0x193
 8004004:	ee19 0a90 	vmov	r0, s19
 8004008:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
        colorPressed = col;
 800400c:	e9c4 5556 	strd	r5, r5, [r4, #344]	; 0x158
 8004010:	f7ff f8e4 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button9_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004014:	a90c      	add	r1, sp, #48	; 0x30
 8004016:	ee19 0a90 	vmov	r0, s19
 800401a:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800401e:	460a      	mov	r2, r1
 8004020:	a90b      	add	r1, sp, #44	; 0x2c
 8004022:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004026:	f00a fa1f 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800402a:	2315      	movs	r3, #21
        updateTextPosition();
 800402c:	ee19 0a90 	vmov	r0, s19
 8004030:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
 8004034:	f7ff f906 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4_p2.setXY(283, 76);
 8004038:	224c      	movs	r2, #76	; 0x4c
 800403a:	f240 111b 	movw	r1, #283	; 0x11b
 800403e:	ee1a 0a10 	vmov	r0, s20
 8004042:	f8c4 918c 	str.w	r9, [r4, #396]	; 0x18c
        colorPressed = col;
 8004046:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
 800404a:	f7ff f8c7 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button4_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800404e:	a90c      	add	r1, sp, #48	; 0x30
 8004050:	ee1a 0a10 	vmov	r0, s20
 8004054:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004058:	460a      	mov	r2, r1
 800405a:	a90b      	add	r1, sp, #44	; 0x2c
 800405c:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004060:	f00a fa02 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004064:	f04f 0216 	mov.w	r2, #22
        updateTextPosition();
 8004068:	ee1a 0a10 	vmov	r0, s20
 800406c:	f8a4 21e4 	strh.w	r2, [r4, #484]	; 0x1e4
 8004070:	f7ff f8e8 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5_p2.setXY(343, 76);
 8004074:	224c      	movs	r2, #76	; 0x4c
 8004076:	f240 1157 	movw	r1, #343	; 0x157
 800407a:	ee1a 0a90 	vmov	r0, s21
 800407e:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
        colorPressed = col;
 8004082:	e9c4 557a 	strd	r5, r5, [r4, #488]	; 0x1e8
 8004086:	f7ff f8a9 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button5_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800408a:	aa0c      	add	r2, sp, #48	; 0x30
 800408c:	a90b      	add	r1, sp, #44	; 0x2c
 800408e:	ee1a 0a90 	vmov	r0, s21
 8004092:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004096:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800409a:	f00a f9e5 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800409e:	2317      	movs	r3, #23
        updateTextPosition();
 80040a0:	ee1a 0a90 	vmov	r0, s21
 80040a4:	f8a4 322c 	strh.w	r3, [r4, #556]	; 0x22c
 80040a8:	f7ff f8cc 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6_p2.setXY(403, 76);
 80040ac:	224c      	movs	r2, #76	; 0x4c
 80040ae:	f240 1193 	movw	r1, #403	; 0x193
 80040b2:	ee1b 0a10 	vmov	r0, s22
 80040b6:	f8c4 921c 	str.w	r9, [r4, #540]	; 0x21c
        colorPressed = col;
 80040ba:	e9c4 558c 	strd	r5, r5, [r4, #560]	; 0x230
 80040be:	f7ff f88d 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button6_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80040c2:	aa0c      	add	r2, sp, #48	; 0x30
 80040c4:	a90b      	add	r1, sp, #44	; 0x2c
 80040c6:	ee1b 0a10 	vmov	r0, s22
 80040ca:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80040ce:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80040d2:	f00a f9c9 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80040d6:	2318      	movs	r3, #24
        updateTextPosition();
 80040d8:	ee1b 0a10 	vmov	r0, s22
 80040dc:	f8a4 3274 	strh.w	r3, [r4, #628]	; 0x274
 80040e0:	f7ff f8b0 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1_p2.setXY(283, 136);
 80040e4:	2288      	movs	r2, #136	; 0x88
 80040e6:	f240 111b 	movw	r1, #283	; 0x11b
 80040ea:	ee1b 0a90 	vmov	r0, s23
 80040ee:	f8c4 9264 	str.w	r9, [r4, #612]	; 0x264
        colorPressed = col;
 80040f2:	e9c4 559e 	strd	r5, r5, [r4, #632]	; 0x278
 80040f6:	f7ff f871 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button1_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80040fa:	aa0c      	add	r2, sp, #48	; 0x30
 80040fc:	a90b      	add	r1, sp, #44	; 0x2c
 80040fe:	ee1b 0a90 	vmov	r0, s23
 8004102:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004106:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800410a:	f00a f9ad 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800410e:	2319      	movs	r3, #25
        updateTextPosition();
 8004110:	ee1b 0a90 	vmov	r0, s23
 8004114:	f8a4 32bc 	strh.w	r3, [r4, #700]	; 0x2bc
 8004118:	f7ff f894 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2_p2.setXY(343, 136);
 800411c:	2288      	movs	r2, #136	; 0x88
 800411e:	f240 1157 	movw	r1, #343	; 0x157
 8004122:	ee1c 0a10 	vmov	r0, s24
 8004126:	f8c4 92ac 	str.w	r9, [r4, #684]	; 0x2ac
 800412a:	e00b      	b.n	8004144 <_ZN15Screen2ViewBaseC1Ev+0x3d0>
 800412c:	0801f4cc 	.word	0x0801f4cc
 8004130:	0801f424 	.word	0x0801f424
 8004134:	0801e238 	.word	0x0801e238
 8004138:	0801e220 	.word	0x0801e220
 800413c:	08003c9b 	.word	0x08003c9b
 8004140:	ff570e0e 	.word	0xff570e0e
        colorPressed = col;
 8004144:	e9c4 55b0 	strd	r5, r5, [r4, #704]	; 0x2c0
 8004148:	f7ff f848 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button2_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800414c:	a90b      	add	r1, sp, #44	; 0x2c
 800414e:	aa0c      	add	r2, sp, #48	; 0x30
 8004150:	ee1c 0a10 	vmov	r0, s24
 8004154:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004158:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800415c:	f00a f984 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004160:	f04f 021a 	mov.w	r2, #26
        updateTextPosition();
 8004164:	ee1c 0a10 	vmov	r0, s24
 8004168:	f8a4 2304 	strh.w	r2, [r4, #772]	; 0x304
 800416c:	f7ff f86a 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3_p2.setXY(403, 136);
 8004170:	2288      	movs	r2, #136	; 0x88
 8004172:	f240 1193 	movw	r1, #403	; 0x193
 8004176:	ee1c 0a90 	vmov	r0, s25
 800417a:	f8c4 92f4 	str.w	r9, [r4, #756]	; 0x2f4
        colorPressed = col;
 800417e:	e9c4 55c2 	strd	r5, r5, [r4, #776]	; 0x308
 8004182:	f7ff f82b 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button3_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004186:	aa0c      	add	r2, sp, #48	; 0x30
 8004188:	a90b      	add	r1, sp, #44	; 0x2c
 800418a:	ee1c 0a90 	vmov	r0, s25
 800418e:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004192:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004196:	f00a f967 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800419a:	231b      	movs	r3, #27
        updateTextPosition();
 800419c:	ee1c 0a90 	vmov	r0, s25
 80041a0:	f8a4 334c 	strh.w	r3, [r4, #844]	; 0x34c
 80041a4:	f7ff f84e 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear_p2.setXY(283, 196);
 80041a8:	22c4      	movs	r2, #196	; 0xc4
 80041aa:	f240 111b 	movw	r1, #283	; 0x11b
 80041ae:	ee1d 0a10 	vmov	r0, s26
 80041b2:	f8c4 933c 	str.w	r9, [r4, #828]	; 0x33c
        colorPressed = col;
 80041b6:	e9c4 55d4 	strd	r5, r5, [r4, #848]	; 0x350
 80041ba:	f7ff f80f 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80041be:	aa0c      	add	r2, sp, #48	; 0x30
 80041c0:	a90b      	add	r1, sp, #44	; 0x2c
 80041c2:	ee1d 0a10 	vmov	r0, s26
 80041c6:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80041ca:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80041ce:	f00a f94b 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80041d2:	231c      	movs	r3, #28
        updateTextPosition();
 80041d4:	ee1d 0a10 	vmov	r0, s26
 80041d8:	f8a4 3394 	strh.w	r3, [r4, #916]	; 0x394
 80041dc:	f7ff f832 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0_p2.setXY(343, 196);
 80041e0:	22c4      	movs	r2, #196	; 0xc4
 80041e2:	f240 1157 	movw	r1, #343	; 0x157
 80041e6:	4658      	mov	r0, fp
 80041e8:	f8c4 9384 	str.w	r9, [r4, #900]	; 0x384
        colorPressed = col;
 80041ec:	e9c4 55e6 	strd	r5, r5, [r4, #920]	; 0x398
 80041f0:	f7fe fff4 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    button0_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80041f4:	aa0c      	add	r2, sp, #48	; 0x30
 80041f6:	a90b      	add	r1, sp, #44	; 0x2c
 80041f8:	4658      	mov	r0, fp
 80041fa:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80041fe:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004202:	f00a f931 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004206:	231d      	movs	r3, #29
        updateTextPosition();
 8004208:	4658      	mov	r0, fp
 800420a:	f8a4 33dc 	strh.w	r3, [r4, #988]	; 0x3dc
 800420e:	f7ff f819 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend_p2.setXY(403, 196);
 8004212:	22c4      	movs	r2, #196	; 0xc4
 8004214:	f240 1193 	movw	r1, #403	; 0x193
 8004218:	ee1d 0a90 	vmov	r0, s27
 800421c:	f8c4 93cc 	str.w	r9, [r4, #972]	; 0x3cc
        colorPressed = col;
 8004220:	e9c4 55f8 	strd	r5, r5, [r4, #992]	; 0x3e0
 8004224:	f7fe ffda 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004228:	aa0c      	add	r2, sp, #48	; 0x30
 800422a:	a90b      	add	r1, sp, #44	; 0x2c
 800422c:	ee1d 0a90 	vmov	r0, s27
 8004230:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
        borderSize = size;
 8004234:	2705      	movs	r7, #5
 8004236:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800423a:	f00a f915 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800423e:	231e      	movs	r3, #30
        updateTextPosition();
 8004240:	ee1d 0a90 	vmov	r0, s27
 8004244:	f8a4 3424 	strh.w	r3, [r4, #1060]	; 0x424
 8004248:	f7fe fffc 	bl	8003244 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 800424c:	a90c      	add	r1, sp, #48	; 0x30
 800424e:	ee1e 0a10 	vmov	r0, s28
        color = col;
 8004252:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
        colorPressed = col;
 8004256:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
 800425a:	f8c4 9414 	str.w	r9, [r4, #1044]	; 0x414
 800425e:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 8004262:	f00a fc28 	bl	800eab6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(258, 9, 2, 250);
 8004266:	23fa      	movs	r3, #250	; 0xfa
 8004268:	4632      	mov	r2, r6
 800426a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800426e:	ee1e 0a10 	vmov	r0, s28
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	4643      	mov	r3, r8
 8004276:	f7fe ffbe 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800427a:	4651      	mov	r1, sl
 800427c:	ee1e 0a10 	vmov	r0, s28
    textAreaSRPM.setPosition(12, 51, 104, 35);
 8004280:	f04f 0823 	mov.w	r8, #35	; 0x23
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004284:	f009 fc8b 	bl	800db9e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    boxWithBorder1_1.setPosition(4, 16, 121, 82);
 8004288:	2252      	movs	r2, #82	; 0x52
 800428a:	2379      	movs	r3, #121	; 0x79
 800428c:	2104      	movs	r1, #4
 800428e:	9806      	ldr	r0, [sp, #24]
    Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_30RR).getText());
 8004290:	f204 56fc 	addw	r6, r4, #1532	; 0x5fc
    boxWithBorder1_1.setPosition(4, 16, 121, 82);
 8004294:	9200      	str	r2, [sp, #0]
 8004296:	2210      	movs	r2, #16
 8004298:	f7fe ffad 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800429c:	4b98      	ldr	r3, [pc, #608]	; (8004500 <_ZN15Screen2ViewBaseC1Ev+0x78c>)
    textAreaSRPM.setPosition(12, 51, 104, 35);
 800429e:	2233      	movs	r2, #51	; 0x33
 80042a0:	210c      	movs	r1, #12
 80042a2:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
        borderColor = color;
 80042a6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80042aa:	ee1f 0a10 	vmov	r0, s30
        borderSize = size;
 80042ae:	f8a4 7490 	strh.w	r7, [r4, #1168]	; 0x490
        borderColor = color;
 80042b2:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
 80042b6:	2368      	movs	r3, #104	; 0x68
 80042b8:	f8cd 8000 	str.w	r8, [sp]
 80042bc:	f7fe ff9b 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80042c0:	4b90      	ldr	r3, [pc, #576]	; (8004504 <_ZN15Screen2ViewBaseC1Ev+0x790>)
        this->color = color;
 80042c2:	f8c4 54c4 	str.w	r5, [r4, #1220]	; 0x4c4
 80042c6:	681b      	ldr	r3, [r3, #0]
        linespace = space;
 80042c8:	f8a4 a4c8 	strh.w	sl, [r4, #1224]	; 0x4c8
 80042cc:	b92b      	cbnz	r3, 80042da <_ZN15Screen2ViewBaseC1Ev+0x566>
 80042ce:	4b8e      	ldr	r3, [pc, #568]	; (8004508 <_ZN15Screen2ViewBaseC1Ev+0x794>)
 80042d0:	21ae      	movs	r1, #174	; 0xae
 80042d2:	4a8e      	ldr	r2, [pc, #568]	; (800450c <_ZN15Screen2ViewBaseC1Ev+0x798>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80042d4:	488e      	ldr	r0, [pc, #568]	; (8004510 <_ZN15Screen2ViewBaseC1Ev+0x79c>)
 80042d6:	f017 ffe9 	bl	801c2ac <__assert_func>
 80042da:	4b8e      	ldr	r3, [pc, #568]	; (8004514 <_ZN15Screen2ViewBaseC1Ev+0x7a0>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	2b1f      	cmp	r3, #31
 80042e0:	d803      	bhi.n	80042ea <_ZN15Screen2ViewBaseC1Ev+0x576>
 80042e2:	4b8d      	ldr	r3, [pc, #564]	; (8004518 <_ZN15Screen2ViewBaseC1Ev+0x7a4>)
 80042e4:	21af      	movs	r1, #175	; 0xaf
 80042e6:	4a89      	ldr	r2, [pc, #548]	; (800450c <_ZN15Screen2ViewBaseC1Ev+0x798>)
 80042e8:	e7f4      	b.n	80042d4 <_ZN15Screen2ViewBaseC1Ev+0x560>
        return texts->getText(typedTextId);
 80042ea:	4b8c      	ldr	r3, [pc, #560]	; (800451c <_ZN15Screen2ViewBaseC1Ev+0x7a8>)
 80042ec:	211f      	movs	r1, #31
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	f000 fab4 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_30RR).getText());
 80042f4:	4a8a      	ldr	r2, [pc, #552]	; (8004520 <_ZN15Screen2ViewBaseC1Ev+0x7ac>)
 80042f6:	4603      	mov	r3, r0
 80042f8:	4639      	mov	r1, r7
 80042fa:	4630      	mov	r0, r6
 80042fc:	f00f f92a 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wildcard = value;
 8004300:	f8c4 64d0 	str.w	r6, [r4, #1232]	; 0x4d0
        : typedTextId(id)
 8004304:	4e87      	ldr	r6, [pc, #540]	; (8004524 <_ZN15Screen2ViewBaseC1Ev+0x7b0>)
    textAreaSRPM.setTypedText(touchgfx::TypedText(T_SRPM));
 8004306:	a90c      	add	r1, sp, #48	; 0x30
 8004308:	ee1f 0a10 	vmov	r0, s30
 800430c:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8004310:	960c      	str	r6, [sp, #48]	; 0x30
 8004312:	f00a f869 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreasrpm.setXY(34, 26);
 8004316:	221a      	movs	r2, #26
 8004318:	2122      	movs	r1, #34	; 0x22
 800431a:	ee1f 0a90 	vmov	r0, s31
 800431e:	f7fe ff5d 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 8004322:	2320      	movs	r3, #32
    textAreasrpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EP5D));
 8004324:	a90c      	add	r1, sp, #48	; 0x30
 8004326:	ee1f 0a90 	vmov	r0, s31
        this->color = color;
 800432a:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
        linespace = space;
 800432e:	f8a4 a508 	strh.w	sl, [r4, #1288]	; 0x508
 8004332:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8004336:	960c      	str	r6, [sp, #48]	; 0x30
 8004338:	f00a f856 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    boxWithBorder1_1_1.setPosition(131, 16, 121, 82);
 800433c:	2252      	movs	r2, #82	; 0x52
 800433e:	2379      	movs	r3, #121	; 0x79
 8004340:	2183      	movs	r1, #131	; 0x83
 8004342:	9807      	ldr	r0, [sp, #28]
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	2210      	movs	r2, #16
 8004348:	f7fe ff55 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800434c:	4a6c      	ldr	r2, [pc, #432]	; (8004500 <_ZN15Screen2ViewBaseC1Ev+0x78c>)
    textAreaMRPM.setPosition(139, 51, 104, 35);
 800434e:	2368      	movs	r3, #104	; 0x68
 8004350:	f8cd 8000 	str.w	r8, [sp]
 8004354:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
 8004358:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800435c:	218b      	movs	r1, #139	; 0x8b
 800435e:	9802      	ldr	r0, [sp, #8]
 8004360:	f8c4 253c 	str.w	r2, [r4, #1340]	; 0x53c
 8004364:	2233      	movs	r2, #51	; 0x33
        borderSize = size;
 8004366:	f8a4 7540 	strh.w	r7, [r4, #1344]	; 0x540
    Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M26F).getText());
 800436a:	f204 6806 	addw	r8, r4, #1542	; 0x606
    textAreaMRPM.setPosition(139, 51, 104, 35);
 800436e:	f7fe ff42 	bl	80031f6 <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004372:	4a64      	ldr	r2, [pc, #400]	; (8004504 <_ZN15Screen2ViewBaseC1Ev+0x790>)
        this->color = color;
 8004374:	f8c4 5574 	str.w	r5, [r4, #1396]	; 0x574
 8004378:	6813      	ldr	r3, [r2, #0]
        linespace = space;
 800437a:	f8a4 a578 	strh.w	sl, [r4, #1400]	; 0x578
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0a5      	beq.n	80042ce <_ZN15Screen2ViewBaseC1Ev+0x55a>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8004382:	4a64      	ldr	r2, [pc, #400]	; (8004514 <_ZN15Screen2ViewBaseC1Ev+0x7a0>)
 8004384:	8813      	ldrh	r3, [r2, #0]
 8004386:	2b21      	cmp	r3, #33	; 0x21
 8004388:	d9ab      	bls.n	80042e2 <_ZN15Screen2ViewBaseC1Ev+0x56e>
        return texts->getText(typedTextId);
 800438a:	4b64      	ldr	r3, [pc, #400]	; (800451c <_ZN15Screen2ViewBaseC1Ev+0x7a8>)
 800438c:	2121      	movs	r1, #33	; 0x21
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	f000 fa64 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M26F).getText());
 8004394:	4a62      	ldr	r2, [pc, #392]	; (8004520 <_ZN15Screen2ViewBaseC1Ev+0x7ac>)
 8004396:	4603      	mov	r3, r0
 8004398:	4639      	mov	r1, r7
 800439a:	4640      	mov	r0, r8
 800439c:	f00f f8da 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80043a0:	2324      	movs	r3, #36	; 0x24
    textAreaMRPM.setTypedText(touchgfx::TypedText(T_MRPM));
 80043a2:	a90c      	add	r1, sp, #48	; 0x30
 80043a4:	9802      	ldr	r0, [sp, #8]
 80043a6:	f8c4 8580 	str.w	r8, [r4, #1408]	; 0x580
 80043aa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80043ae:	960c      	str	r6, [sp, #48]	; 0x30
 80043b0:	f00a f81a 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreamrpm.setXY(158, 26);
 80043b4:	221a      	movs	r2, #26
 80043b6:	9803      	ldr	r0, [sp, #12]
 80043b8:	219e      	movs	r1, #158	; 0x9e
 80043ba:	f7fe ff0f 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 80043be:	2322      	movs	r3, #34	; 0x22
    textAreamrpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DTOP));
 80043c0:	a90c      	add	r1, sp, #48	; 0x30
 80043c2:	9803      	ldr	r0, [sp, #12]
        this->color = color;
 80043c4:	f8c4 55b4 	str.w	r5, [r4, #1460]	; 0x5b4
 80043c8:	1d25      	adds	r5, r4, #4
        linespace = space;
 80043ca:	f8a4 a5b8 	strh.w	sl, [r4, #1464]	; 0x5b8
 80043ce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80043d2:	960c      	str	r6, [sp, #48]	; 0x30
 80043d4:	f00a f808 	bl	800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonPower_p2.setXY(74, 202);
 80043d8:	9804      	ldr	r0, [sp, #16]
 80043da:	22ca      	movs	r2, #202	; 0xca
 80043dc:	214a      	movs	r1, #74	; 0x4a
 80043de:	f7fe fefd 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 80043e2:	230a      	movs	r3, #10
    buttonPower_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 80043e4:	aa0a      	add	r2, sp, #40	; 0x28
 80043e6:	a909      	add	r1, sp, #36	; 0x24
 80043e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80043ec:	230b      	movs	r3, #11
 80043ee:	9804      	ldr	r0, [sp, #16]
 80043f0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80043f4:	2304      	movs	r3, #4
 80043f6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80043fa:	2301      	movs	r3, #1
 80043fc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8004400:	ab0c      	add	r3, sp, #48	; 0x30
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	ab0b      	add	r3, sp, #44	; 0x2c
 8004406:	f00a fa8c 	bl	800e922 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 800440a:	2347      	movs	r3, #71	; 0x47
 800440c:	ee18 1a10 	vmov	r1, s16
 8004410:	4628      	mov	r0, r5
 8004412:	f8a4 35f8 	strh.w	r3, [r4, #1528]	; 0x5f8
        iconY = y;
 8004416:	2310      	movs	r3, #16
 8004418:	f8c4 95e8 	str.w	r9, [r4, #1512]	; 0x5e8
 800441c:	f8a4 35fa 	strh.w	r3, [r4, #1530]	; 0x5fa
 8004420:	f008 f930 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004424:	9905      	ldr	r1, [sp, #20]
 8004426:	4628      	mov	r0, r5
 8004428:	f008 f92c 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800442c:	ee1e 1a90 	vmov	r1, s29
 8004430:	4628      	mov	r0, r5
 8004432:	f008 f927 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004436:	ee18 1a90 	vmov	r1, s17
 800443a:	4628      	mov	r0, r5
 800443c:	f008 f922 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004440:	ee19 1a10 	vmov	r1, s18
 8004444:	4628      	mov	r0, r5
 8004446:	f008 f91d 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800444a:	ee19 1a90 	vmov	r1, s19
 800444e:	4628      	mov	r0, r5
 8004450:	f008 f918 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004454:	ee1a 1a10 	vmov	r1, s20
 8004458:	4628      	mov	r0, r5
 800445a:	f008 f913 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800445e:	ee1a 1a90 	vmov	r1, s21
 8004462:	4628      	mov	r0, r5
 8004464:	f008 f90e 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004468:	ee1b 1a10 	vmov	r1, s22
 800446c:	4628      	mov	r0, r5
 800446e:	f008 f909 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004472:	ee1b 1a90 	vmov	r1, s23
 8004476:	4628      	mov	r0, r5
 8004478:	f008 f904 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800447c:	ee1c 1a10 	vmov	r1, s24
 8004480:	4628      	mov	r0, r5
 8004482:	f008 f8ff 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004486:	ee1c 1a90 	vmov	r1, s25
 800448a:	4628      	mov	r0, r5
 800448c:	f008 f8fa 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004490:	ee1d 1a10 	vmov	r1, s26
 8004494:	4628      	mov	r0, r5
 8004496:	f008 f8f5 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800449a:	4659      	mov	r1, fp
 800449c:	4628      	mov	r0, r5
 800449e:	f008 f8f1 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044a2:	ee1d 1a90 	vmov	r1, s27
 80044a6:	4628      	mov	r0, r5
 80044a8:	f008 f8ec 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044ac:	ee1e 1a10 	vmov	r1, s28
 80044b0:	4628      	mov	r0, r5
 80044b2:	f008 f8e7 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044b6:	9906      	ldr	r1, [sp, #24]
 80044b8:	4628      	mov	r0, r5
 80044ba:	f008 f8e3 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044be:	ee1f 1a10 	vmov	r1, s30
 80044c2:	4628      	mov	r0, r5
 80044c4:	f008 f8de 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044c8:	ee1f 1a90 	vmov	r1, s31
 80044cc:	4628      	mov	r0, r5
 80044ce:	f008 f8d9 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044d2:	9907      	ldr	r1, [sp, #28]
 80044d4:	4628      	mov	r0, r5
 80044d6:	f008 f8d5 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044da:	9902      	ldr	r1, [sp, #8]
 80044dc:	4628      	mov	r0, r5
 80044de:	f008 f8d1 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044e2:	9903      	ldr	r1, [sp, #12]
 80044e4:	4628      	mov	r0, r5
 80044e6:	f008 f8cd 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044ea:	4628      	mov	r0, r5
 80044ec:	9904      	ldr	r1, [sp, #16]
 80044ee:	f008 f8c9 	bl	800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80044f2:	4620      	mov	r0, r4
 80044f4:	b00f      	add	sp, #60	; 0x3c
 80044f6:	ecbd 8b10 	vpop	{d8-d15}
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	ff570e0e 	.word	0xff570e0e
 8004504:	24006cb4 	.word	0x24006cb4
 8004508:	0801e078 	.word	0x0801e078
 800450c:	0801e0ba 	.word	0x0801e0ba
 8004510:	0801e0e8 	.word	0x0801e0e8
 8004514:	24006cb8 	.word	0x24006cb8
 8004518:	0801e12f 	.word	0x0801e12f
 800451c:	24006cc0 	.word	0x24006cc0
 8004520:	0801e181 	.word	0x0801e181
 8004524:	0801db74 	.word	0x0801db74

08004528 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004528:	4770      	bx	lr
	...

0800452c <_Z23getFont_verdana_10_4bppv>:
{
 800452c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800452e:	4d15      	ldr	r5, [pc, #84]	; (8004584 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8004530:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004532:	782c      	ldrb	r4, [r5, #0]
 8004534:	f3bf 8f5b 	dmb	ish
 8004538:	f014 0401 	ands.w	r4, r4, #1
 800453c:	d11e      	bne.n	800457c <_Z23getFont_verdana_10_4bppv+0x50>
 800453e:	4628      	mov	r0, r5
 8004540:	f017 fda0 	bl	801c084 <__cxa_guard_acquire>
 8004544:	b1d0      	cbz	r0, 800457c <_Z23getFont_verdana_10_4bppv+0x50>
 8004546:	233f      	movs	r3, #63	; 0x3f
 8004548:	2201      	movs	r2, #1
 800454a:	490f      	ldr	r1, [pc, #60]	; (8004588 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800454c:	9307      	str	r3, [sp, #28]
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <_Z23getFont_verdana_10_4bppv+0x60>)
 8004550:	480f      	ldr	r0, [pc, #60]	; (8004590 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004552:	9306      	str	r3, [sp, #24]
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004556:	9408      	str	r4, [sp, #32]
 8004558:	9403      	str	r4, [sp, #12]
 800455a:	9400      	str	r4, [sp, #0]
 800455c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004560:	2304      	movs	r3, #4
 8004562:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004566:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800456a:	230a      	movs	r3, #10
 800456c:	f7fe fd00 	bl	8002f70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004570:	4628      	mov	r0, r5
 8004572:	f017 fd93 	bl	801c09c <__cxa_guard_release>
 8004576:	4808      	ldr	r0, [pc, #32]	; (8004598 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004578:	f017 feb6 	bl	801c2e8 <atexit>
    return verdana_10_4bpp;
}
 800457c:	4804      	ldr	r0, [pc, #16]	; (8004590 <_Z23getFont_verdana_10_4bppv+0x64>)
 800457e:	b00d      	add	sp, #52	; 0x34
 8004580:	bd30      	pop	{r4, r5, pc}
 8004582:	bf00      	nop
 8004584:	24001790 	.word	0x24001790
 8004588:	08021e8c 	.word	0x08021e8c
 800458c:	0802207c 	.word	0x0802207c
 8004590:	24001794 	.word	0x24001794
 8004594:	08022098 	.word	0x08022098
 8004598:	08004529 	.word	0x08004529

0800459c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800459c:	4770      	bx	lr
	...

080045a0 <_Z23getFont_verdana_20_4bppv>:
{
 80045a0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80045a2:	4d15      	ldr	r5, [pc, #84]	; (80045f8 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80045a4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80045a6:	782c      	ldrb	r4, [r5, #0]
 80045a8:	f3bf 8f5b 	dmb	ish
 80045ac:	f014 0401 	ands.w	r4, r4, #1
 80045b0:	d11f      	bne.n	80045f2 <_Z23getFont_verdana_20_4bppv+0x52>
 80045b2:	4628      	mov	r0, r5
 80045b4:	f017 fd66 	bl	801c084 <__cxa_guard_acquire>
 80045b8:	b1d8      	cbz	r0, 80045f2 <_Z23getFont_verdana_20_4bppv+0x52>
 80045ba:	233f      	movs	r3, #63	; 0x3f
 80045bc:	2201      	movs	r2, #1
 80045be:	490f      	ldr	r1, [pc, #60]	; (80045fc <_Z23getFont_verdana_20_4bppv+0x5c>)
 80045c0:	9307      	str	r3, [sp, #28]
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <_Z23getFont_verdana_20_4bppv+0x60>)
 80045c4:	480f      	ldr	r0, [pc, #60]	; (8004604 <_Z23getFont_verdana_20_4bppv+0x64>)
 80045c6:	9306      	str	r3, [sp, #24]
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <_Z23getFont_verdana_20_4bppv+0x68>)
 80045ca:	9408      	str	r4, [sp, #32]
 80045cc:	9403      	str	r4, [sp, #12]
 80045ce:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80045d2:	2304      	movs	r3, #4
 80045d4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80045d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2210      	movs	r2, #16
 80045e0:	2314      	movs	r3, #20
 80045e2:	f7fe fcc5 	bl	8002f70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80045e6:	4628      	mov	r0, r5
 80045e8:	f017 fd58 	bl	801c09c <__cxa_guard_release>
 80045ec:	4807      	ldr	r0, [pc, #28]	; (800460c <_Z23getFont_verdana_20_4bppv+0x6c>)
 80045ee:	f017 fe7b 	bl	801c2e8 <atexit>
    return verdana_20_4bpp;
}
 80045f2:	4804      	ldr	r0, [pc, #16]	; (8004604 <_Z23getFont_verdana_20_4bppv+0x64>)
 80045f4:	b00d      	add	sp, #52	; 0x34
 80045f6:	bd30      	pop	{r4, r5, pc}
 80045f8:	240017bc 	.word	0x240017bc
 80045fc:	08021e9c 	.word	0x08021e9c
 8004600:	08022080 	.word	0x08022080
 8004604:	240017c0 	.word	0x240017c0
 8004608:	0802209c 	.word	0x0802209c
 800460c:	0800459d 	.word	0x0800459d

08004610 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8004610:	4770      	bx	lr
	...

08004614 <_Z23getFont_verdana_30_4bppv>:
{
 8004614:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8004616:	4d15      	ldr	r5, [pc, #84]	; (800466c <_Z23getFont_verdana_30_4bppv+0x58>)
{
 8004618:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800461a:	782c      	ldrb	r4, [r5, #0]
 800461c:	f3bf 8f5b 	dmb	ish
 8004620:	f014 0401 	ands.w	r4, r4, #1
 8004624:	d11f      	bne.n	8004666 <_Z23getFont_verdana_30_4bppv+0x52>
 8004626:	4628      	mov	r0, r5
 8004628:	f017 fd2c 	bl	801c084 <__cxa_guard_acquire>
 800462c:	b1d8      	cbz	r0, 8004666 <_Z23getFont_verdana_30_4bppv+0x52>
 800462e:	233f      	movs	r3, #63	; 0x3f
 8004630:	2201      	movs	r2, #1
 8004632:	490f      	ldr	r1, [pc, #60]	; (8004670 <_Z23getFont_verdana_30_4bppv+0x5c>)
 8004634:	9307      	str	r3, [sp, #28]
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <_Z23getFont_verdana_30_4bppv+0x60>)
 8004638:	480f      	ldr	r0, [pc, #60]	; (8004678 <_Z23getFont_verdana_30_4bppv+0x64>)
 800463a:	9306      	str	r3, [sp, #24]
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <_Z23getFont_verdana_30_4bppv+0x68>)
 800463e:	9408      	str	r4, [sp, #32]
 8004640:	9403      	str	r4, [sp, #12]
 8004642:	9400      	str	r4, [sp, #0]
 8004644:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004648:	2304      	movs	r3, #4
 800464a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800464e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004652:	231e      	movs	r3, #30
 8004654:	2211      	movs	r2, #17
 8004656:	f7fe fc8b 	bl	8002f70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800465a:	4628      	mov	r0, r5
 800465c:	f017 fd1e 	bl	801c09c <__cxa_guard_release>
 8004660:	4807      	ldr	r0, [pc, #28]	; (8004680 <_Z23getFont_verdana_30_4bppv+0x6c>)
 8004662:	f017 fe41 	bl	801c2e8 <atexit>
    return verdana_30_4bpp;
}
 8004666:	4804      	ldr	r0, [pc, #16]	; (8004678 <_Z23getFont_verdana_30_4bppv+0x64>)
 8004668:	b00d      	add	sp, #52	; 0x34
 800466a:	bd30      	pop	{r4, r5, pc}
 800466c:	240017e8 	.word	0x240017e8
 8004670:	08021f7c 	.word	0x08021f7c
 8004674:	08022090 	.word	0x08022090
 8004678:	240017ec 	.word	0x240017ec
 800467c:	080220a0 	.word	0x080220a0
 8004680:	08004611 	.word	0x08004611

08004684 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004684:	4770      	bx	lr
	...

08004688 <_Z23getFont_verdana_40_4bppv>:
{
 8004688:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800468a:	4d15      	ldr	r5, [pc, #84]	; (80046e0 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 800468c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800468e:	782c      	ldrb	r4, [r5, #0]
 8004690:	f3bf 8f5b 	dmb	ish
 8004694:	f014 0401 	ands.w	r4, r4, #1
 8004698:	d11e      	bne.n	80046d8 <_Z23getFont_verdana_40_4bppv+0x50>
 800469a:	4628      	mov	r0, r5
 800469c:	f017 fcf2 	bl	801c084 <__cxa_guard_acquire>
 80046a0:	b1d0      	cbz	r0, 80046d8 <_Z23getFont_verdana_40_4bppv+0x50>
 80046a2:	233f      	movs	r3, #63	; 0x3f
 80046a4:	2201      	movs	r2, #1
 80046a6:	490f      	ldr	r1, [pc, #60]	; (80046e4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80046a8:	9307      	str	r3, [sp, #28]
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80046ac:	480f      	ldr	r0, [pc, #60]	; (80046ec <_Z23getFont_verdana_40_4bppv+0x64>)
 80046ae:	9306      	str	r3, [sp, #24]
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <_Z23getFont_verdana_40_4bppv+0x68>)
 80046b2:	9408      	str	r4, [sp, #32]
 80046b4:	9403      	str	r4, [sp, #12]
 80046b6:	9400      	str	r4, [sp, #0]
 80046b8:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80046bc:	2304      	movs	r3, #4
 80046be:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80046c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046c6:	2328      	movs	r3, #40	; 0x28
 80046c8:	f7fe fc52 	bl	8002f70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80046cc:	4628      	mov	r0, r5
 80046ce:	f017 fce5 	bl	801c09c <__cxa_guard_release>
 80046d2:	4808      	ldr	r0, [pc, #32]	; (80046f4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80046d4:	f017 fe08 	bl	801c2e8 <atexit>
    return verdana_40_4bpp;
}
 80046d8:	4804      	ldr	r0, [pc, #16]	; (80046ec <_Z23getFont_verdana_40_4bppv+0x64>)
 80046da:	b00d      	add	sp, #52	; 0x34
 80046dc:	bd30      	pop	{r4, r5, pc}
 80046de:	bf00      	nop
 80046e0:	24001814 	.word	0x24001814
 80046e4:	0802206c 	.word	0x0802206c
 80046e8:	08022094 	.word	0x08022094
 80046ec:	24001818 	.word	0x24001818
 80046f0:	080220a4 	.word	0x080220a4
 80046f4:	08004685 	.word	0x08004685

080046f8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80046f8:	2000      	movs	r0, #0
 80046fa:	4770      	bx	lr

080046fc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80046fc:	2000      	movs	r0, #0
 80046fe:	4770      	bx	lr

08004700 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004700:	b40e      	push	{r1, r2, r3}
 8004702:	b503      	push	{r0, r1, lr}
 8004704:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004706:	2100      	movs	r1, #0
{
 8004708:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800470c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800470e:	f00c fe6b 	bl	80113e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004712:	b002      	add	sp, #8
 8004714:	f85d eb04 	ldr.w	lr, [sp], #4
 8004718:	b003      	add	sp, #12
 800471a:	4770      	bx	lr

0800471c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800471c:	b40c      	push	{r2, r3}
 800471e:	b507      	push	{r0, r1, r2, lr}
 8004720:	ab04      	add	r3, sp, #16
 8004722:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004726:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004728:	f00c fe5e 	bl	80113e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800472c:	b003      	add	sp, #12
 800472e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004732:	b002      	add	sp, #8
 8004734:	4770      	bx	lr
	...

08004738 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004738:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800473a:	b510      	push	{r4, lr}
 800473c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800473e:	b373      	cbz	r3, 800479e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004740:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8004742:	b92b      	cbnz	r3, 8004750 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004744:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004746:	21c0      	movs	r1, #192	; 0xc0
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800474a:	4819      	ldr	r0, [pc, #100]	; (80047b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800474c:	f017 fdae 	bl	801c2ac <__assert_func>
            return buffer[pos];
 8004750:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004752:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004756:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004758:	b30b      	cbz	r3, 800479e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800475a:	f00e f943 	bl	80129e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800475e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8004760:	2b01      	cmp	r3, #1
 8004762:	d803      	bhi.n	800476c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004766:	21c5      	movs	r1, #197	; 0xc5
 8004768:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800476a:	e7ee      	b.n	800474a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800476c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800476e:	f640 103f 	movw	r0, #2367	; 0x93f
 8004772:	1c53      	adds	r3, r2, #1
 8004774:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004776:	2b09      	cmp	r3, #9
 8004778:	4619      	mov	r1, r3
 800477a:	bf88      	it	hi
 800477c:	f1a3 010a 	subhi.w	r1, r3, #10
 8004780:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004784:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8004786:	4281      	cmp	r1, r0
 8004788:	d109      	bne.n	800479e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800478a:	2b0a      	cmp	r3, #10
 800478c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004790:	bf28      	it	cs
 8004792:	2300      	movcs	r3, #0
            return buffer[pos];
 8004794:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004796:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800479a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 800479c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800479e:	4620      	mov	r0, r4
}
 80047a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80047a4:	f00e b802 	b.w	80127ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 80047a8:	0801e29c 	.word	0x0801e29c
 80047ac:	0801e2a5 	.word	0x0801e2a5
 80047b0:	0801e350 	.word	0x0801e350
 80047b4:	0801e39a 	.word	0x0801e39a
 80047b8:	0801e3a8 	.word	0x0801e3a8

080047bc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80047bc:	f00d bfae 	b.w	801271c <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080047c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80047c0:	b510      	push	{r4, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	ac02      	add	r4, sp, #8
 80047c6:	e884 0006 	stmia.w	r4, {r1, r2}
 80047ca:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80047cc:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80047ce:	4621      	mov	r1, r4
    va_start(pArg, format);
 80047d0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	9b08      	ldr	r3, [sp, #32]
 80047da:	f00b faff 	bl	800fddc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80047de:	b006      	add	sp, #24
 80047e0:	bd10      	pop	{r4, pc}
	...

080047e4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80047e4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80047e6:	bb18      	cbnz	r0, 8004830 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80047e8:	4b12      	ldr	r3, [pc, #72]	; (8004834 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80047ea:	4813      	ldr	r0, [pc, #76]	; (8004838 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4913      	ldr	r1, [pc, #76]	; (800483c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80047f0:	b1b3      	cbz	r3, 8004820 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80047f2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80047f4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80047f6:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80047f8:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80047fa:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	441a      	add	r2, r3
 8004800:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004804:	2200      	movs	r2, #0
 8004806:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004808:	f000 f838 	bl	800487c <_ZN17TypedTextDatabase8getFontsEv>
 800480c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800480e:	f000 f833 	bl	8004878 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004814:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004818:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800481c:	8018      	strh	r0, [r3, #0]
    }
}
 800481e:	e007      	b.n	8004830 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004822:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004826:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800482a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800482c:	2c00      	cmp	r4, #0
 800482e:	d1e8      	bne.n	8004802 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004830:	bd38      	pop	{r3, r4, r5, pc}
 8004832:	bf00      	nop
 8004834:	24001840 	.word	0x24001840
 8004838:	24001844 	.word	0x24001844
 800483c:	24001848 	.word	0x24001848
 8004840:	2400184c 	.word	0x2400184c
 8004844:	24006cb4 	.word	0x24006cb4
 8004848:	24006cbc 	.word	0x24006cbc
 800484c:	24006cb8 	.word	0x24006cb8
 8004850:	0802213c 	.word	0x0802213c
 8004854:	080220a8 	.word	0x080220a8
 8004858:	08022204 	.word	0x08022204

0800485c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	24001848 	.word	0x24001848
 8004874:	24001844 	.word	0x24001844

08004878 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004878:	2025      	movs	r0, #37	; 0x25
 800487a:	4770      	bx	lr

0800487c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800487c:	4800      	ldr	r0, [pc, #0]	; (8004880 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800487e:	4770      	bx	lr
 8004880:	24001850 	.word	0x24001850

08004884 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004884:	b510      	push	{r4, lr}
};
 8004886:	4c07      	ldr	r4, [pc, #28]	; (80048a4 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_30_4bpp()),
 8004888:	f7ff fec4 	bl	8004614 <_Z23getFont_verdana_30_4bppv>
};
 800488c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800488e:	f7ff fefb 	bl	8004688 <_Z23getFont_verdana_40_4bppv>
};
 8004892:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8004894:	f7ff fe4a 	bl	800452c <_Z23getFont_verdana_10_4bppv>
};
 8004898:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 800489a:	f7ff fe81 	bl	80045a0 <_Z23getFont_verdana_20_4bppv>
};
 800489e:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	bf00      	nop
 80048a4:	24001850 	.word	0x24001850

080048a8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80048a8:	4770      	bx	lr

080048aa <_ZN19FrontendApplicationD0Ev>:
 80048aa:	b510      	push	{r4, lr}
 80048ac:	4604      	mov	r4, r0
 80048ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80048b2:	f017 fbe5 	bl	801c080 <_ZdlPvj>
 80048b6:	4620      	mov	r0, r4
 80048b8:	bd10      	pop	{r4, pc}

080048ba <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80048ba:	b510      	push	{r4, lr}
 80048bc:	4604      	mov	r4, r0
    {
        model.tick();
 80048be:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80048c2:	f000 f812 	bl	80048ea <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80048c6:	4620      	mov	r0, r4
    }
 80048c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80048cc:	f00b be00 	b.w	80104d0 <_ZN8touchgfx11Application15handleTickEventEv>

080048d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80048d4:	f7fe f962 	bl	8002b9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80048d8:	4b01      	ldr	r3, [pc, #4]	; (80048e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80048da:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80048dc:	6023      	str	r3, [r4, #0]
}
 80048de:	bd10      	pop	{r4, pc}
 80048e0:	0801e484 	.word	0x0801e484

080048e4 <_ZN5ModelC1Ev>:





Model::Model() : modelListener(0)
 80048e4:	2200      	movs	r2, #0
 80048e6:	6002      	str	r2, [r0, #0]
{

}
 80048e8:	4770      	bx	lr

080048ea <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80048ea:	4770      	bx	lr

080048ec <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80048ec:	4770      	bx	lr

080048ee <_ZThn4_N16Screen1PresenterD1Ev>:
 80048ee:	3804      	subs	r0, #4
 80048f0:	4770      	bx	lr

080048f2 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80048f2:	4770      	bx	lr

080048f4 <_ZN16Screen1PresenterD0Ev>:
 80048f4:	b510      	push	{r4, lr}
 80048f6:	4604      	mov	r4, r0
 80048f8:	2110      	movs	r1, #16
 80048fa:	f017 fbc1 	bl	801c080 <_ZdlPvj>
 80048fe:	4620      	mov	r0, r4
 8004900:	bd10      	pop	{r4, pc}

08004902 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004902:	f1a0 0004 	sub.w	r0, r0, #4
 8004906:	e7f5      	b.n	80048f4 <_ZN16Screen1PresenterD0Ev>

08004908 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004908:	2200      	movs	r2, #0
    : view(v)
 800490a:	60c1      	str	r1, [r0, #12]
 800490c:	6082      	str	r2, [r0, #8]
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004910:	b510      	push	{r4, lr}
    : view(v)
 8004912:	f102 0408 	add.w	r4, r2, #8
 8004916:	3220      	adds	r2, #32
 8004918:	6004      	str	r4, [r0, #0]
 800491a:	6042      	str	r2, [r0, #4]
}
 800491c:	bd10      	pop	{r4, pc}
 800491e:	bf00      	nop
 8004920:	0801e4c0 	.word	0x0801e4c0

08004924 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004924:	4770      	bx	lr

08004926 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004926:	4770      	bx	lr

08004928 <_ZN11Screen1View19buttonSwitchClickedEv>:
{
	fillBuffer(7);
}
void Screen1View::buttonSwitchClicked()
{
	switchPressed = !switchPressed;
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <_ZN11Screen1View19buttonSwitchClickedEv+0x14>)
 800492a:	7813      	ldrb	r3, [r2, #0]
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	7013      	strb	r3, [r2, #0]
	dotPressed = 0;
 8004934:	2200      	movs	r2, #0
 8004936:	4b02      	ldr	r3, [pc, #8]	; (8004940 <_ZN11Screen1View19buttonSwitchClickedEv+0x18>)
 8004938:	701a      	strb	r2, [r3, #0]
}
 800493a:	4770      	bx	lr
 800493c:	24001874 	.word	0x24001874
 8004940:	24001860 	.word	0x24001860

08004944 <_ZN11Screen1View16buttonDotClickedEv>:
	textAreaMI.invalidate();
	textAreaFreq.invalidate();
}
void Screen1View::buttonDotClicked()
{
	dotPressed = 1;
 8004944:	4b01      	ldr	r3, [pc, #4]	; (800494c <_ZN11Screen1View16buttonDotClickedEv+0x8>)
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
}
 800494a:	4770      	bx	lr
 800494c:	24001860 	.word	0x24001860

08004950 <_ZN11Screen1View17buttonFreqToggledEv>:
void Screen1View::buttonFreqToggled()
{
	freqReady = 1;
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <_ZN11Screen1View17buttonFreqToggledEv+0x8>)
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
}
 8004956:	4770      	bx	lr
 8004958:	24001861 	.word	0x24001861

0800495c <_ZN11Screen1View15buttonMIToggledEv>:
void Screen1View::buttonMIToggled()
{
	miReady = 1;
 800495c:	4b01      	ldr	r3, [pc, #4]	; (8004964 <_ZN11Screen1View15buttonMIToggledEv+0x8>)
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
}
 8004962:	4770      	bx	lr
 8004964:	2400186c 	.word	0x2400186c

08004968 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004968:	f7fe bb71 	b.w	800304e <_ZN15Screen1ViewBase11setupScreenEv>

0800496c <_ZN11Screen1View18buttonPowerClickedEv>:
void Screen1View::buttonPowerClicked()
{
 800496c:	b508      	push	{r3, lr}
	buttonClearClicked();
 800496e:	6803      	ldr	r3, [r0, #0]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4798      	blx	r3
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <_ZN11Screen1View18buttonPowerClickedEv+0x18>)
 8004976:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004988 <_ZN11Screen1View18buttonPowerClickedEv+0x1c>
 800497a:	6818      	ldr	r0, [r3, #0]
}
 800497c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 8004980:	f7fb bffa 	b.w	8000978 <adjustMIAndFreq>
 8004984:	24001864 	.word	0x24001864
 8004988:	00000000 	.word	0x00000000

0800498c <_ZN11Screen1ViewD0Ev>:
 800498c:	b510      	push	{r4, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8004994:	f017 fb74 	bl	801c080 <_ZdlPvj>
 8004998:	4620      	mov	r0, r4
 800499a:	bd10      	pop	{r4, pc}

0800499c <_ZN11Screen1View17buttonSendClickedEv>:
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 800499c:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <_ZN11Screen1View17buttonSendClickedEv+0x5c>)
{
 800499e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 80049a0:	781a      	ldrb	r2, [r3, #0]
{
 80049a2:	4604      	mov	r4, r0
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 80049a4:	2a01      	cmp	r2, #1
 80049a6:	d124      	bne.n	80049f2 <_ZN11Screen1View17buttonSendClickedEv+0x56>
 80049a8:	4e14      	ldr	r6, [pc, #80]	; (80049fc <_ZN11Screen1View17buttonSendClickedEv+0x60>)
 80049aa:	7832      	ldrb	r2, [r6, #0]
 80049ac:	2a01      	cmp	r2, #1
 80049ae:	d120      	bne.n	80049f2 <_ZN11Screen1View17buttonSendClickedEv+0x56>
 	   dotPressed = 0;
 80049b0:	2500      	movs	r5, #0
 80049b2:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <_ZN11Screen1View17buttonSendClickedEv+0x64>)
 	   toggleButtonMI.forceState(0);
 80049b4:	f200 6014 	addw	r0, r0, #1556	; 0x614
 80049b8:	4629      	mov	r1, r5
 	   miReady = 0;
 80049ba:	701d      	strb	r5, [r3, #0]
 	   dotPressed = 0;
 80049bc:	7015      	strb	r5, [r2, #0]
 	   toggleButtonMI.forceState(0);
 80049be:	9001      	str	r0, [sp, #4]
 80049c0:	f009 f8cc 	bl	800db5c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonMI.invalidate();
 80049c4:	9801      	ldr	r0, [sp, #4]
 80049c6:	f00c fe31 	bl	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
 	   toggleButtonFreq.forceState(0);
 80049ca:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 80049ce:	4629      	mov	r1, r5
 	   freqReady = 0;
 80049d0:	7035      	strb	r5, [r6, #0]
 	   toggleButtonFreq.forceState(0);
 80049d2:	9001      	str	r0, [sp, #4]
 80049d4:	f009 f8c2 	bl	800db5c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonFreq.invalidate();
 80049d8:	9801      	ldr	r0, [sp, #4]
 80049da:	f00c fe27 	bl	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <_ZN11Screen1View17buttonSendClickedEv+0x68>)
 80049e0:	ed93 0a00 	vldr	s0, [r3]
 80049e4:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <_ZN11Screen1View17buttonSendClickedEv+0x6c>)
 80049e6:	6818      	ldr	r0, [r3, #0]
}
 80049e8:	b002      	add	sp, #8
 80049ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 80049ee:	f7fb bfc3 	b.w	8000978 <adjustMIAndFreq>
}
 80049f2:	b002      	add	sp, #8
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	bf00      	nop
 80049f8:	2400186c 	.word	0x2400186c
 80049fc:	24001861 	.word	0x24001861
 8004a00:	24001860 	.word	0x24001860
 8004a04:	24001870 	.word	0x24001870
 8004a08:	24001864 	.word	0x24001864

08004a0c <_ZN11Screen1View18buttonClearClickedEv>:
{
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	dotPressed = 0;
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	; (8004a88 <_ZN11Screen1View18buttonClearClickedEv+0x7c>)
 8004a10:	2500      	movs	r5, #0
{
 8004a12:	b085      	sub	sp, #20
 8004a14:	4604      	mov	r4, r0
	dotPressed = 0;
 8004a16:	701d      	strb	r5, [r3, #0]
	toggleButtonMI.forceState(0);
 8004a18:	f200 6014 	addw	r0, r0, #1556	; 0x614
	freqReady = 0;
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <_ZN11Screen1View18buttonClearClickedEv+0x80>)
	toggleButtonMI.forceState(0);
 8004a1e:	4629      	mov	r1, r5
	miScreenBuffer = 0.0;
 8004a20:	4f1b      	ldr	r7, [pc, #108]	; (8004a90 <_ZN11Screen1View18buttonClearClickedEv+0x84>)
	freqReady = 0;
 8004a22:	701d      	strb	r5, [r3, #0]
	miReady = 0;
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <_ZN11Screen1View18buttonClearClickedEv+0x88>)
	freqScreenBuffer = 0;
 8004a26:	4e1c      	ldr	r6, [pc, #112]	; (8004a98 <_ZN11Screen1View18buttonClearClickedEv+0x8c>)
	miReady = 0;
 8004a28:	701d      	strb	r5, [r3, #0]
	miBuffer = 0;
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <_ZN11Screen1View18buttonClearClickedEv+0x90>)
	toggleButtonMI.forceState(0);
 8004a2c:	9001      	str	r0, [sp, #4]
	miBuffer = 0;
 8004a2e:	601d      	str	r5, [r3, #0]
	miScreenBuffer = 0.0;
 8004a30:	2300      	movs	r3, #0
	freqScreenBuffer = 0;
 8004a32:	6035      	str	r5, [r6, #0]
	miScreenBuffer = 0.0;
 8004a34:	603b      	str	r3, [r7, #0]
	toggleButtonMI.forceState(0);
 8004a36:	f009 f891 	bl	800db5c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonMI.invalidate();
 8004a3a:	9801      	ldr	r0, [sp, #4]
 8004a3c:	f00c fdf6 	bl	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
	toggleButtonFreq.forceState(0);
 8004a40:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8004a44:	4629      	mov	r1, r5
 8004a46:	9001      	str	r0, [sp, #4]
 8004a48:	f009 f888 	bl	800db5c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonFreq.invalidate();
 8004a4c:	9801      	ldr	r0, [sp, #4]
 8004a4e:	f00c fded 	bl	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(textAreaMIBuffer, 4, "%3.2f", miScreenBuffer);
 8004a52:	683b      	ldr	r3, [r7, #0]
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8004a54:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <_ZN11Screen1View18buttonClearClickedEv+0x94>)
 8004a56:	2104      	movs	r1, #4
 8004a58:	9303      	str	r3, [sp, #12]
 8004a5a:	f204 60f6 	addw	r0, r4, #1782	; 0x6f6
 8004a5e:	ab03      	add	r3, sp, #12
 8004a60:	f00e ff36 	bl	80138d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <_ZN11Screen1View18buttonClearClickedEv+0x98>)
 8004a68:	2103      	movs	r1, #3
 8004a6a:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
 8004a6e:	f00e fd71 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaMI.invalidate();
 8004a72:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8004a76:	f00c fdd9 	bl	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaFreq.invalidate();
 8004a7a:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8004a7e:	f00c fdd5 	bl	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8004a82:	b005      	add	sp, #20
 8004a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a86:	bf00      	nop
 8004a88:	24001860 	.word	0x24001860
 8004a8c:	24001861 	.word	0x24001861
 8004a90:	24001870 	.word	0x24001870
 8004a94:	2400186c 	.word	0x2400186c
 8004a98:	24001864 	.word	0x24001864
 8004a9c:	24001868 	.word	0x24001868
 8004aa0:	0801e4e8 	.word	0x0801e4e8
 8004aa4:	0801e4ee 	.word	0x0801e4ee

08004aa8 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	f7fe fc54 	bl	8003358 <_ZN15Screen1ViewBaseC1Ev>
 8004ab0:	4b01      	ldr	r3, [pc, #4]	; (8004ab8 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8004ab2:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8004ab4:	6023      	str	r3, [r4, #0]
}
 8004ab6:	bd10      	pop	{r4, pc}
 8004ab8:	0801e500 	.word	0x0801e500

08004abc <_ZN11Screen1View10fillBufferEh>:
	if(switchPressed == 1)
 8004abc:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <_ZN11Screen1View10fillBufferEh+0x90>)
{
 8004abe:	b513      	push	{r0, r1, r4, lr}
	if(switchPressed == 1)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
{
 8004ac2:	4604      	mov	r4, r0
	if(switchPressed == 1)
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d131      	bne.n	8004b2c <_ZN11Screen1View10fillBufferEh+0x70>
			if(dotPressed == 0)
 8004ac8:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <_ZN11Screen1View10fillBufferEh+0x94>)
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8004aca:	ee07 1a90 	vmov	s15, r1
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <_ZN11Screen1View10fillBufferEh+0x98>)
			if(dotPressed == 0)
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	ed93 6a00 	vldr	s12, [r3]
 8004ad6:	b9e2      	cbnz	r2, 8004b12 <_ZN11Screen1View10fillBufferEh+0x56>
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8004ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004adc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004ae0:	eea6 7a27 	vfma.f32	s14, s12, s15
		miBuffer = (miBuffer*10) + foo;
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <_ZN11Screen1View10fillBufferEh+0x9c>)
 8004ae6:	200a      	movs	r0, #10
 8004ae8:	ed83 7a00 	vstr	s14, [r3]
 8004aec:	6813      	ldr	r3, [r2, #0]
 8004aee:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004af2:	fb00 1103 	mla	r1, r0, r3, r1
 8004af6:	ab01      	add	r3, sp, #4
 8004af8:	f204 60f6 	addw	r0, r4, #1782	; 0x6f6
 8004afc:	6011      	str	r1, [r2, #0]
 8004afe:	2104      	movs	r1, #4
 8004b00:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <_ZN11Screen1View10fillBufferEh+0xa0>)
 8004b02:	f00e fee5 	bl	80138d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
		textAreaMI.invalidate();
 8004b06:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
		textAreaFreq.invalidate();
 8004b0a:	f00c fd8f 	bl	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8004b0e:	b002      	add	sp, #8
 8004b10:	bd10      	pop	{r4, pc}
				miScreenBuffer = miScreenBuffer + (foo/10.0);
 8004b12:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004b16:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004b1a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8004b1e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004b22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b26:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004b2a:	e7db      	b.n	8004ae4 <_ZN11Screen1View10fillBufferEh+0x28>
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8004b2c:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <_ZN11Screen1View10fillBufferEh+0xa4>)
 8004b2e:	200a      	movs	r0, #10
 8004b30:	6813      	ldr	r3, [r2, #0]
 8004b32:	fb00 1303 	mla	r3, r0, r3, r1
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004b36:	2103      	movs	r1, #3
 8004b38:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8004b3c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <_ZN11Screen1View10fillBufferEh+0xa8>)
 8004b40:	f00e fd08 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaFreq.invalidate();
 8004b44:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8004b48:	e7df      	b.n	8004b0a <_ZN11Screen1View10fillBufferEh+0x4e>
 8004b4a:	bf00      	nop
 8004b4c:	24001874 	.word	0x24001874
 8004b50:	24001860 	.word	0x24001860
 8004b54:	24001870 	.word	0x24001870
 8004b58:	24001868 	.word	0x24001868
 8004b5c:	0801e4f1 	.word	0x0801e4f1
 8004b60:	24001864 	.word	0x24001864
 8004b64:	0801e4ee 	.word	0x0801e4ee

08004b68 <_ZN11Screen1View14button9ClickedEv>:
	fillBuffer(9);
 8004b68:	2109      	movs	r1, #9
 8004b6a:	f7ff bfa7 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b6e <_ZN11Screen1View14button8ClickedEv>:
	fillBuffer(8);
 8004b6e:	2108      	movs	r1, #8
 8004b70:	f7ff bfa4 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b74 <_ZN11Screen1View14button0ClickedEv>:
	fillBuffer(0);
 8004b74:	2100      	movs	r1, #0
 8004b76:	f7ff bfa1 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b7a <_ZN11Screen1View14button3ClickedEv>:
	fillBuffer(3);
 8004b7a:	2103      	movs	r1, #3
 8004b7c:	f7ff bf9e 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b80 <_ZN11Screen1View14button2ClickedEv>:
	fillBuffer(2);
 8004b80:	2102      	movs	r1, #2
 8004b82:	f7ff bf9b 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b86 <_ZN11Screen1View14button1ClickedEv>:
	fillBuffer(1);
 8004b86:	2101      	movs	r1, #1
 8004b88:	f7ff bf98 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b8c <_ZN11Screen1View14button6ClickedEv>:
	fillBuffer(6);
 8004b8c:	2106      	movs	r1, #6
 8004b8e:	f7ff bf95 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b92 <_ZN11Screen1View14button5ClickedEv>:
	fillBuffer(5);
 8004b92:	2105      	movs	r1, #5
 8004b94:	f7ff bf92 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b98 <_ZN11Screen1View14button4ClickedEv>:
	fillBuffer(4);
 8004b98:	2104      	movs	r1, #4
 8004b9a:	f7ff bf8f 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004b9e <_ZN11Screen1View14button7ClickedEv>:
	fillBuffer(7);
 8004b9e:	2107      	movs	r1, #7
 8004ba0:	f7ff bf8c 	b.w	8004abc <_ZN11Screen1View10fillBufferEh>

08004ba4 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8004ba4:	4770      	bx	lr

08004ba6 <_ZThn4_N16Screen2PresenterD1Ev>:
 8004ba6:	3804      	subs	r0, #4
 8004ba8:	4770      	bx	lr

08004baa <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8004baa:	4770      	bx	lr

08004bac <_ZN16Screen2PresenterD0Ev>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	4604      	mov	r4, r0
 8004bb0:	2110      	movs	r1, #16
 8004bb2:	f017 fa65 	bl	801c080 <_ZdlPvj>
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <_ZThn4_N16Screen2PresenterD0Ev>:
 8004bba:	f1a0 0004 	sub.w	r0, r0, #4
 8004bbe:	e7f5      	b.n	8004bac <_ZN16Screen2PresenterD0Ev>

08004bc0 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8004bc0:	2200      	movs	r2, #0
    : view(v)
 8004bc2:	60c1      	str	r1, [r0, #12]
 8004bc4:	6082      	str	r2, [r0, #8]
 8004bc6:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 8004bc8:	b510      	push	{r4, lr}
    : view(v)
 8004bca:	f102 0408 	add.w	r4, r2, #8
 8004bce:	3220      	adds	r2, #32
 8004bd0:	6004      	str	r4, [r0, #0]
 8004bd2:	6042      	str	r2, [r0, #4]
}
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	bf00      	nop
 8004bd8:	0801e578 	.word	0x0801e578

08004bdc <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8004bdc:	4770      	bx	lr

08004bde <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8004bde:	4770      	bx	lr

08004be0 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8004be0:	f7ff b82f 	b.w	8003c42 <_ZN15Screen2ViewBase11setupScreenEv>

08004be4 <_ZN11Screen2View21buttonClear_p2ClickedEv>:
	fillBuffer(0);
}

void Screen2View::buttonClear_p2Clicked()
{
	rpmScreenBuffer = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <_ZN11Screen2View21buttonClear_p2ClickedEv+0x24>)
	Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%d", rpmScreenBuffer);
 8004be8:	2105      	movs	r1, #5
{
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
	rpmScreenBuffer = 0;
 8004bee:	6013      	str	r3, [r2, #0]
	Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%d", rpmScreenBuffer);
 8004bf0:	f200 50fc 	addw	r0, r0, #1532	; 0x5fc
 8004bf4:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <_ZN11Screen2View21buttonClear_p2ClickedEv+0x28>)
 8004bf6:	f00e fcad 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaSRPM.invalidate();
 8004bfa:	f204 4094 	addw	r0, r4, #1172	; 0x494

}
 8004bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaSRPM.invalidate();
 8004c02:	f00c bd13 	b.w	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
 8004c06:	bf00      	nop
 8004c08:	24001878 	.word	0x24001878
 8004c0c:	0801e4ee 	.word	0x0801e4ee

08004c10 <_ZN11Screen2View20button2DirectClickedEv>:
	adjustRPM(0);
	adjustMIAndFreq(0, 0.0);
}
void Screen2View::button2DirectClicked()
{
	togglePiFlag(0);
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7fb bd95 	b.w	8000740 <togglePiFlag>
	...

08004c18 <_ZN11Screen2View20buttonSend_p2ClickedEv>:
{
 8004c18:	b508      	push	{r3, lr}
	togglePiFlag(1);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fb fd90 	bl	8000740 <togglePiFlag>
	adjustRPM(rpmScreenBuffer);
 8004c20:	4b02      	ldr	r3, [pc, #8]	; (8004c2c <_ZN11Screen2View20buttonSend_p2ClickedEv+0x14>)
 8004c22:	6818      	ldr	r0, [r3, #0]
}
 8004c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustRPM(rpmScreenBuffer);
 8004c28:	f7fb be4e 	b.w	80008c8 <adjustRPM>
 8004c2c:	24001878 	.word	0x24001878

08004c30 <_ZN11Screen2View21buttonPower_p2ClickedEv>:
{
 8004c30:	b508      	push	{r3, lr}
	buttonClear_p2Clicked();
 8004c32:	6803      	ldr	r3, [r0, #0]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	4798      	blx	r3
	adjustRPM(0);
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f7fb fe45 	bl	80008c8 <adjustRPM>
	adjustMIAndFreq(0, 0.0);
 8004c3e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004c4c <_ZN11Screen2View21buttonPower_p2ClickedEv+0x1c>
 8004c42:	2000      	movs	r0, #0
}
 8004c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustMIAndFreq(0, 0.0);
 8004c48:	f7fb be96 	b.w	8000978 <adjustMIAndFreq>
 8004c4c:	00000000 	.word	0x00000000

08004c50 <_ZN11Screen2ViewD0Ev>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	4604      	mov	r4, r0
 8004c54:	f240 6124 	movw	r1, #1572	; 0x624
 8004c58:	f017 fa12 	bl	801c080 <_ZdlPvj>
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <_ZN11Screen2View15handleTickEventEv>:
}
void Screen2View::handleTickEvent()
{
	count++;
 8004c60:	f8d0 3620 	ldr.w	r3, [r0, #1568]	; 0x620
 8004c64:	3301      	adds	r3, #1
	if (count>10){
 8004c66:	2b0a      	cmp	r3, #10
{
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	4604      	mov	r4, r0
	if (count>10){
 8004c6c:	d802      	bhi.n	8004c74 <_ZN11Screen2View15handleTickEventEv+0x14>
	count++;
 8004c6e:	f8c0 3620 	str.w	r3, [r0, #1568]	; 0x620

		count = 0;
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", newAvgRpm);
		textAreaMRPM.invalidate();
	}
}
 8004c72:	bd10      	pop	{r4, pc}
		count = 0;
 8004c74:	2300      	movs	r3, #0
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", newAvgRpm);
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <_ZN11Screen2View15handleTickEventEv+0x38>)
 8004c78:	2105      	movs	r1, #5
 8004c7a:	f200 6006 	addw	r0, r0, #1542	; 0x606
		count = 0;
 8004c7e:	f8c0 301a 	str.w	r3, [r0, #26]
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", newAvgRpm);
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <_ZN11Screen2View15handleTickEventEv+0x3c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f00e fc65 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaMRPM.invalidate();
 8004c8a:	f204 5044 	addw	r0, r4, #1348	; 0x544
}
 8004c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		textAreaMRPM.invalidate();
 8004c92:	f00c bccb 	b.w	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
 8004c96:	bf00      	nop
 8004c98:	0801e4ee 	.word	0x0801e4ee
 8004c9c:	24000184 	.word	0x24000184

08004ca0 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	f7ff f866 	bl	8003d74 <_ZN15Screen2ViewBaseC1Ev>
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <_ZN11Screen2ViewC1Ev+0x18>)
}
 8004caa:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c4 3620 	str.w	r3, [r4, #1568]	; 0x620
}
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	bf00      	nop
 8004cb8:	0801e5a8 	.word	0x0801e5a8

08004cbc <_ZN11Screen2View10fillBufferEh>:
{
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	4604      	mov	r4, r0
	rpmScreenBuffer = (rpmScreenBuffer * 10) + foo;
 8004cc0:	4808      	ldr	r0, [pc, #32]	; (8004ce4 <_ZN11Screen2View10fillBufferEh+0x28>)
 8004cc2:	230a      	movs	r3, #10
 8004cc4:	6802      	ldr	r2, [r0, #0]
 8004cc6:	fb03 1302 	mla	r3, r3, r2, r1
	Unicode::snprintf(textAreaSRPMBuffer, 5, "%d", rpmScreenBuffer);
 8004cca:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <_ZN11Screen2View10fillBufferEh+0x2c>)
 8004ccc:	2105      	movs	r1, #5
	rpmScreenBuffer = (rpmScreenBuffer * 10) + foo;
 8004cce:	6003      	str	r3, [r0, #0]
	Unicode::snprintf(textAreaSRPMBuffer, 5, "%d", rpmScreenBuffer);
 8004cd0:	f204 50fc 	addw	r0, r4, #1532	; 0x5fc
 8004cd4:	f00e fc3e 	bl	8013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaSRPM.invalidate();
 8004cd8:	f204 4094 	addw	r0, r4, #1172	; 0x494
}
 8004cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaSRPM.invalidate();
 8004ce0:	f00c bca4 	b.w	801162c <_ZNK8touchgfx8Drawable10invalidateEv>
 8004ce4:	24001878 	.word	0x24001878
 8004ce8:	0801e4ee 	.word	0x0801e4ee

08004cec <_ZN11Screen2View17button7_p2ClickedEv>:
	fillBuffer(7);
 8004cec:	2107      	movs	r1, #7
 8004cee:	f7ff bfe5 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004cf2 <_ZN11Screen2View17button8_p2ClickedEv>:
	fillBuffer(8);
 8004cf2:	2108      	movs	r1, #8
 8004cf4:	f7ff bfe2 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004cf8 <_ZN11Screen2View17button9_p2ClickedEv>:
	fillBuffer(9);
 8004cf8:	2109      	movs	r1, #9
 8004cfa:	f7ff bfdf 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004cfe <_ZN11Screen2View17button4_p2ClickedEv>:
	fillBuffer(4);
 8004cfe:	2104      	movs	r1, #4
 8004d00:	f7ff bfdc 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004d04 <_ZN11Screen2View17button5_p2ClickedEv>:
	fillBuffer(5);
 8004d04:	2105      	movs	r1, #5
 8004d06:	f7ff bfd9 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004d0a <_ZN11Screen2View17button6_p2ClickedEv>:
	fillBuffer(6);
 8004d0a:	2106      	movs	r1, #6
 8004d0c:	f7ff bfd6 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004d10 <_ZN11Screen2View17button1_p2ClickedEv>:
	fillBuffer(1);
 8004d10:	2101      	movs	r1, #1
 8004d12:	f7ff bfd3 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004d16 <_ZN11Screen2View17button2_p2ClickedEv>:
	fillBuffer(2);
 8004d16:	2102      	movs	r1, #2
 8004d18:	f7ff bfd0 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004d1c <_ZN11Screen2View17button3_p2ClickedEv>:
	fillBuffer(3);
 8004d1c:	2103      	movs	r1, #3
 8004d1e:	f7ff bfcd 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004d22 <_ZN11Screen2View17button0_p2ClickedEv>:
	fillBuffer(0);
 8004d22:	2100      	movs	r1, #0
 8004d24:	f7ff bfca 	b.w	8004cbc <_ZN11Screen2View10fillBufferEh>

08004d28 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004d28:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004d2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8004d30:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004d32:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8004d34:	2305      	movs	r3, #5
 8004d36:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004d38:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004d3c:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004d40:	4770      	bx	lr

08004d42 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8004d42:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004d46:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004d48:	bf04      	itt	eq
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8004d50:	2000      	movs	r0, #0
 8004d52:	4770      	bx	lr

08004d54 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8004d54:	2000      	movs	r0, #0
 8004d56:	4770      	bx	lr

08004d58 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004d58:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d5a:	6904      	ldr	r4, [r0, #16]
 8004d5c:	8900      	ldrh	r0, [r0, #8]
 8004d5e:	46a4      	mov	ip, r4
}
 8004d60:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d64:	4760      	bx	ip

08004d66 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004d66:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d68:	68c4      	ldr	r4, [r0, #12]
 8004d6a:	8900      	ldrh	r0, [r0, #8]
 8004d6c:	46a4      	mov	ip, r4
}
 8004d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d72:	4760      	bx	ip

08004d74 <FT5336_GestureConfig>:
{
 8004d74:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004d78:	f100 0818 	add.w	r8, r0, #24
{
 8004d7c:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004d7e:	7809      	ldrb	r1, [r1, #0]
 8004d80:	4640      	mov	r0, r8
 8004d82:	f000 f8fb 	bl	8004f7c <ft5336_radian_value>
 8004d86:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004d88:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	f000 f901 	bl	8004f94 <ft5336_offset_left_right>
 8004d92:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004d94:	f899 1008 	ldrb.w	r1, [r9, #8]
 8004d98:	4640      	mov	r0, r8
 8004d9a:	f000 f907 	bl	8004fac <ft5336_offset_up_down>
 8004d9e:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004da0:	f899 100c 	ldrb.w	r1, [r9, #12]
 8004da4:	4640      	mov	r0, r8
 8004da6:	f000 f90d 	bl	8004fc4 <ft5336_disatnce_left_right>
 8004daa:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004dac:	f899 1010 	ldrb.w	r1, [r9, #16]
 8004db0:	4640      	mov	r0, r8
 8004db2:	f000 f913 	bl	8004fdc <ft5336_distance_up_down>
 8004db6:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004db8:	f899 1014 	ldrb.w	r1, [r9, #20]
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	f000 f919 	bl	8004ff4 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8004dc2:	42c5      	cmn	r5, r0
}
 8004dc4:	bf14      	ite	ne
 8004dc6:	f04f 30ff 	movne.w	r0, #4294967295
 8004dca:	2000      	moveq	r0, #0
 8004dcc:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08004dd0 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8004dd0:	3018      	adds	r0, #24
 8004dd2:	f000 b927 	b.w	8005024 <ft5336_chip_id>

08004dd6 <FT5336_GetMultiTouchState>:
{
 8004dd6:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004dd8:	f100 0518 	add.w	r5, r0, #24
{
 8004ddc:	b088      	sub	sp, #32
 8004dde:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004de0:	4628      	mov	r0, r5
 8004de2:	4669      	mov	r1, sp
 8004de4:	f000 f8bd 	bl	8004f62 <ft5336_td_status>
 8004de8:	bb98      	cbnz	r0, 8004e52 <FT5336_GetMultiTouchState+0x7c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8004dea:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	bf98      	it	ls
 8004df2:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8004df4:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004df6:	231e      	movs	r3, #30
 8004df8:	466a      	mov	r2, sp
 8004dfa:	2103      	movs	r1, #3
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 f89d 	bl	8004f3c <ft5336_read_reg>
 8004e02:	bb48      	cbnz	r0, 8004e58 <FT5336_GetMultiTouchState+0x82>
 8004e04:	466b      	mov	r3, sp
 8004e06:	1d22      	adds	r2, r4, #4
 8004e08:	f104 0118 	add.w	r1, r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004e0c:	781d      	ldrb	r5, [r3, #0]
 8004e0e:	3306      	adds	r3, #6
 8004e10:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8004e14:	022c      	lsls	r4, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8004e16:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004e18:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8004e1c:	4334      	orrs	r4, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004e1e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004e22:	f842 4b04 	str.w	r4, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8004e26:	4291      	cmp	r1, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004e28:	f813 4c04 	ldrb.w	r4, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8004e2c:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004e2e:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8004e32:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8004e36:	ea44 0406 	orr.w	r4, r4, r6
 8004e3a:	6114      	str	r4, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8004e3c:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8004e40:	6254      	str	r4, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8004e42:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8004e46:	ea4f 1414 	mov.w	r4, r4, lsr #4
 8004e4a:	64d4      	str	r4, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8004e4c:	d1de      	bne.n	8004e0c <FT5336_GetMultiTouchState+0x36>
}
 8004e4e:	b008      	add	sp, #32
 8004e50:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8004e52:	f04f 30ff 	mov.w	r0, #4294967295
 8004e56:	e7cd      	b.n	8004df4 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004e5c:	e7f7      	b.n	8004e4e <FT5336_GetMultiTouchState+0x78>

08004e5e <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8004e5e:	3018      	adds	r0, #24
 8004e60:	f000 b87a 	b.w	8004f58 <ft5336_gest_id>

08004e64 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8004e64:	2101      	movs	r1, #1
 8004e66:	3018      	adds	r0, #24
 8004e68:	f000 b8d0 	b.w	800500c <ft5336_g_mode>

08004e6c <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	3018      	adds	r0, #24
 8004e70:	f000 b8cc 	b.w	800500c <ft5336_g_mode>

08004e74 <FT5336_Init>:
{
 8004e74:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004e76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8004e7a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004e7c:	b96b      	cbnz	r3, 8004e9a <FT5336_Init+0x26>
    pObj->IO.Init();
 8004e7e:	6803      	ldr	r3, [r0, #0]
 8004e80:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8004e82:	4620      	mov	r0, r4
 8004e84:	f7ff fff2 	bl	8004e6c <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8004e88:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004e8a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8004e8e:	bf18      	it	ne
 8004e90:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004e92:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8004e96:	4240      	negs	r0, r0
}
 8004e98:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8004e9a:	2000      	movs	r0, #0
  return ret;
 8004e9c:	e7fc      	b.n	8004e98 <FT5336_Init+0x24>

08004e9e <FT5336_ClearIT>:
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	4770      	bx	lr

08004ea2 <FT5336_GetState>:
{
 8004ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004ea4:	f100 0518 	add.w	r5, r0, #24
{
 8004ea8:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004eaa:	a901      	add	r1, sp, #4
 8004eac:	4628      	mov	r0, r5
 8004eae:	f000 f858 	bl	8004f62 <ft5336_td_status>
 8004eb2:	bb08      	cbnz	r0, 8004ef8 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8004eb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004eb8:	2b05      	cmp	r3, #5
 8004eba:	bf98      	it	ls
 8004ebc:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004ebe:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8004ec0:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004ec2:	2103      	movs	r1, #3
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	eb0d 0203 	add.w	r2, sp, r3
 8004eca:	f000 f837 	bl	8004f3c <ft5336_read_reg>
 8004ece:	b9b0      	cbnz	r0, 8004efe <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8004ed0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ed4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ede:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8004ee0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8004ee4:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8004ee6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60a3      	str	r3, [r4, #8]
}
 8004ef4:	b003      	add	sp, #12
 8004ef6:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	e7df      	b.n	8004ebe <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004f02:	e7f7      	b.n	8004ef4 <FT5336_GetState+0x52>

08004f04 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8004f04:	b190      	cbz	r0, 8004f2c <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004f06:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004f08:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f0a:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004f0c:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004f0e:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004f10:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f12:	68ca      	ldr	r2, [r1, #12]
 8004f14:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f16:	690a      	ldr	r2, [r1, #16]
 8004f18:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f1a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004f1c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f1e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <FT5336_RegisterBusIO+0x30>)
 8004f22:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004f24:	4a04      	ldr	r2, [pc, #16]	; (8004f38 <FT5336_RegisterBusIO+0x34>)
 8004f26:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004f28:	b103      	cbz	r3, 8004f2c <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004f2a:	4718      	bx	r3
}
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	08004d59 	.word	0x08004d59
 8004f38:	08004d67 	.word	0x08004d67

08004f3c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004f3c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004f3e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004f42:	46a4      	mov	ip, r4
}
 8004f44:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004f48:	4760      	bx	ip

08004f4a <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004f4a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004f4c:	6804      	ldr	r4, [r0, #0]
 8004f4e:	6880      	ldr	r0, [r0, #8]
 8004f50:	46a4      	mov	ip, r4
}
 8004f52:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004f56:	4760      	bx	ip

08004f58 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004f58:	2301      	movs	r3, #1
{
 8004f5a:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f7ff bfed 	b.w	8004f3c <ft5336_read_reg>

08004f62 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8004f62:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8004f64:	460a      	mov	r2, r1
{
 8004f66:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8004f68:	2301      	movs	r3, #1
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	f7ff ffe6 	bl	8004f3c <ft5336_read_reg>
  
  if(ret == 0)
 8004f70:	b918      	cbnz	r0, 8004f7a <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8004f72:	7823      	ldrb	r3, [r4, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004f7a:	bd10      	pop	{r4, pc}

08004f7c <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8004f7c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8004f7e:	2301      	movs	r3, #1
{
 8004f80:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8004f84:	f10d 0207 	add.w	r2, sp, #7
 8004f88:	2191      	movs	r1, #145	; 0x91
 8004f8a:	f7ff ffde 	bl	8004f4a <ft5336_write_reg>
}
 8004f8e:	b003      	add	sp, #12
 8004f90:	f85d fb04 	ldr.w	pc, [sp], #4

08004f94 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8004f94:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8004f96:	2301      	movs	r3, #1
{
 8004f98:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8004f9c:	f10d 0207 	add.w	r2, sp, #7
 8004fa0:	2192      	movs	r1, #146	; 0x92
 8004fa2:	f7ff ffd2 	bl	8004f4a <ft5336_write_reg>
}
 8004fa6:	b003      	add	sp, #12
 8004fa8:	f85d fb04 	ldr.w	pc, [sp], #4

08004fac <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8004fac:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8004fae:	2301      	movs	r3, #1
{
 8004fb0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8004fb4:	f10d 0207 	add.w	r2, sp, #7
 8004fb8:	2193      	movs	r1, #147	; 0x93
 8004fba:	f7ff ffc6 	bl	8004f4a <ft5336_write_reg>
}
 8004fbe:	b003      	add	sp, #12
 8004fc0:	f85d fb04 	ldr.w	pc, [sp], #4

08004fc4 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8004fc4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8004fc6:	2301      	movs	r3, #1
{
 8004fc8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8004fcc:	f10d 0207 	add.w	r2, sp, #7
 8004fd0:	2194      	movs	r1, #148	; 0x94
 8004fd2:	f7ff ffba 	bl	8004f4a <ft5336_write_reg>
}
 8004fd6:	b003      	add	sp, #12
 8004fd8:	f85d fb04 	ldr.w	pc, [sp], #4

08004fdc <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8004fdc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8004fde:	2301      	movs	r3, #1
{
 8004fe0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8004fe4:	f10d 0207 	add.w	r2, sp, #7
 8004fe8:	2195      	movs	r1, #149	; 0x95
 8004fea:	f7ff ffae 	bl	8004f4a <ft5336_write_reg>
}
 8004fee:	b003      	add	sp, #12
 8004ff0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ff4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8004ff4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8004ff6:	2301      	movs	r3, #1
{
 8004ff8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8004ffc:	f10d 0207 	add.w	r2, sp, #7
 8005000:	2196      	movs	r1, #150	; 0x96
 8005002:	f7ff ffa2 	bl	8004f4a <ft5336_write_reg>
}
 8005006:	b003      	add	sp, #12
 8005008:	f85d fb04 	ldr.w	pc, [sp], #4

0800500c <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800500c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800500e:	2301      	movs	r3, #1
{
 8005010:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8005014:	f10d 0207 	add.w	r2, sp, #7
 8005018:	21a4      	movs	r1, #164	; 0xa4
 800501a:	f7ff ff96 	bl	8004f4a <ft5336_write_reg>
}
 800501e:	b003      	add	sp, #12
 8005020:	f85d fb04 	ldr.w	pc, [sp], #4

08005024 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8005024:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8005026:	2301      	movs	r3, #1
 8005028:	21a8      	movs	r1, #168	; 0xa8
 800502a:	f7ff bf87 	b.w	8004f3c <ft5336_read_reg>

0800502e <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800502e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8005036:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800503a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800503e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005046:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800504a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800504e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8005052:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8005054:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005058:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 800505c:	2000      	movs	r0, #0
 800505e:	4770      	bx	lr

08005060 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	b09a      	sub	sp, #104	; 0x68
 8005064:	460d      	mov	r5, r1
 8005066:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8005068:	2100      	movs	r1, #0
{
 800506a:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 800506c:	a806      	add	r0, sp, #24
 800506e:	2250      	movs	r2, #80	; 0x50
 8005070:	f017 f9a8 	bl	801c3c4 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8005074:	2214      	movs	r2, #20
 8005076:	2100      	movs	r1, #0
 8005078:	a801      	add	r0, sp, #4
 800507a:	f017 f9a3 	bl	801c3c4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800507e:	b92d      	cbnz	r5, 800508c <MX25LM51245G_AutoPollingMemReady+0x2c>
 8005080:	2c01      	cmp	r4, #1
 8005082:	d103      	bne.n	800508c <MX25LM51245G_AutoPollingMemReady+0x2c>
  {
    return MX25LM51245G_ERROR;
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005088:	b01a      	add	sp, #104	; 0x68
 800508a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800508c:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800508e:	a906      	add	r1, sp, #24
 8005090:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005092:	429d      	cmp	r5, r3
  s_command.Address            = 0U;
 8005094:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005096:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005098:	bf0c      	ite	eq
 800509a:	2201      	moveq	r2, #1
 800509c:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800509e:	2c01      	cmp	r4, #1
  s_config.Match         = 0U;
 80050a0:	9301      	str	r3, [sp, #4]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80050a2:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80050a4:	bf14      	ite	ne
 80050a6:	461a      	movne	r2, r3
 80050a8:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80050aa:	429d      	cmp	r5, r3
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80050ac:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80050ae:	bf0c      	ite	eq
 80050b0:	461a      	moveq	r2, r3
 80050b2:	2210      	movne	r2, #16
 80050b4:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80050b6:	f240 52fa 	movw	r2, #1530	; 0x5fa
 80050ba:	bf08      	it	eq
 80050bc:	2205      	moveq	r2, #5
 80050be:	9208      	str	r2, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80050c0:	bf0c      	ite	eq
 80050c2:	461a      	moveq	r2, r3
 80050c4:	f44f 6280 	movne.w	r2, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80050c8:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80050ca:	920d      	str	r2, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80050cc:	bf14      	ite	ne
 80050ce:	461a      	movne	r2, r3
 80050d0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80050d4:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80050d6:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80050d8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80050dc:	920e      	str	r2, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80050de:	bf0c      	ite	eq
 80050e0:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 80050e4:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80050e8:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80050ea:	9214      	str	r2, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80050ec:	bf14      	ite	ne
 80050ee:	461a      	movne	r2, r3
 80050f0:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80050f4:	429d      	cmp	r5, r3
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80050f6:	9216      	str	r2, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80050f8:	bf0c      	ite	eq
 80050fa:	461a      	moveq	r2, r3
 80050fc:	2205      	movne	r2, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80050fe:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005100:	9217      	str	r2, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005102:	bf0c      	ite	eq
 8005104:	2202      	moveq	r2, #2
 8005106:	2201      	movne	r2, #1
 8005108:	9215      	str	r2, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800510a:	bf14      	ite	ne
 800510c:	461a      	movne	r2, r3
 800510e:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005112:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8005116:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005118:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800511c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005120:	2210      	movs	r2, #16
 8005122:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005126:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	f002 fbd0 	bl	80078d2 <HAL_OSPI_Command>
 8005132:	2800      	cmp	r0, #0
 8005134:	d1a6      	bne.n	8005084 <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	a901      	add	r1, sp, #4
 800513c:	4630      	mov	r0, r6
 800513e:	f002 fd05 	bl	8007b4c <HAL_OSPI_AutoPolling>
 8005142:	3800      	subs	r0, #0
 8005144:	bf18      	it	ne
 8005146:	2001      	movne	r0, #1
 8005148:	4240      	negs	r0, r0
 800514a:	e79d      	b.n	8005088 <MX25LM51245G_AutoPollingMemReady+0x28>

0800514c <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	b096      	sub	sp, #88	; 0x58
 8005150:	460c      	mov	r4, r1
 8005152:	4606      	mov	r6, r0
 8005154:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8005156:	2100      	movs	r1, #0
 8005158:	2250      	movs	r2, #80	; 0x50
 800515a:	a802      	add	r0, sp, #8
 800515c:	f017 f932 	bl	801c3c4 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005160:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8005162:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005164:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8005168:	d104      	bne.n	8005174 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 800516a:	b91d      	cbnz	r5, 8005174 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005170:	b016      	add	sp, #88	; 0x58
 8005172:	bd70      	pop	{r4, r5, r6, pc}
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005174:	2300      	movs	r3, #0
 8005176:	2101      	movs	r1, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005178:	429c      	cmp	r4, r3
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800517a:	9307      	str	r3, [sp, #28]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800517c:	bf0c      	ite	eq
 800517e:	2201      	moveq	r2, #1
 8005180:	2204      	movne	r2, #4
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005182:	e9cd 1302 	strd	r1, r3, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005186:	bf18      	it	ne
 8005188:	2310      	movne	r3, #16
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800518a:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800518c:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800518e:	d146      	bne.n	800521e <MX25LM51245G_EnableSTRMemoryMappedMode+0xd2>
 8005190:	2d00      	cmp	r5, #0
 8005192:	bf0c      	ite	eq
 8005194:	230b      	moveq	r3, #11
 8005196:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005198:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800519a:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800519c:	a902      	add	r1, sp, #8
 800519e:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80051a0:	bf0c      	ite	eq
 80051a2:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80051a6:	f44f 6380 	movne.w	r3, #1024	; 0x400
 80051aa:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80051ac:	2300      	movs	r3, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80051ae:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80051b0:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80051b2:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80051b4:	bf0c      	ite	eq
 80051b6:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80051ba:	f44f 5240 	movne.w	r2, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80051be:	429c      	cmp	r4, r3
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80051c0:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80051c2:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80051c4:	bf0c      	ite	eq
 80051c6:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 80051ca:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80051ce:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80051d0:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80051d2:	bf0c      	ite	eq
 80051d4:	2208      	moveq	r2, #8
 80051d6:	2206      	movne	r2, #6
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80051d8:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	f002 fb77 	bl	80078d2 <HAL_OSPI_Command>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1c1      	bne.n	800516c <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80051e8:	2302      	movs	r3, #2
 80051ea:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80051ec:	b9d4      	cbnz	r4, 8005224 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd8>
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	bf18      	it	ne
 80051f2:	2312      	movne	r3, #18
 80051f4:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80051f6:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	a902      	add	r1, sp, #8
 80051fe:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 8005200:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005202:	f002 fb66 	bl	80078d2 <HAL_OSPI_Command>
 8005206:	2800      	cmp	r0, #0
 8005208:	d1b0      	bne.n	800516c <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800520a:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800520c:	4669      	mov	r1, sp
 800520e:	4630      	mov	r0, r6
 8005210:	f002 fcec 	bl	8007bec <HAL_OSPI_MemoryMapped>
 8005214:	3800      	subs	r0, #0
 8005216:	bf18      	it	ne
 8005218:	2001      	movne	r0, #1
 800521a:	4240      	negs	r0, r0
 800521c:	e7a8      	b.n	8005170 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800521e:	f64e 4313 	movw	r3, #60435	; 0xec13
 8005222:	e7b9      	b.n	8005198 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005224:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8005228:	e7e4      	b.n	80051f4 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa8>

0800522a <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800522a:	b510      	push	{r4, lr}
 800522c:	b096      	sub	sp, #88	; 0x58
 800522e:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8005230:	2228      	movs	r2, #40	; 0x28
 8005232:	2100      	movs	r1, #0
 8005234:	a808      	add	r0, sp, #32
 8005236:	f017 f8c5 	bl	801c3c4 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800523a:	2300      	movs	r3, #0

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800523c:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800523e:	2008      	movs	r0, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005240:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8005244:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005248:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800524c:	2204      	movs	r2, #4
 800524e:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8005250:	2210      	movs	r2, #16
 8005252:	e9cd 2006 	strd	r2, r0, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8005256:	f64e 6211 	movw	r2, #60945	; 0xee11
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800525a:	4620      	mov	r0, r4
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800525c:	9204      	str	r2, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800525e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005262:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005264:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005268:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800526c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005270:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8005272:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8005274:	2206      	movs	r2, #6
 8005276:	e9cd c212 	strd	ip, r2, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800527a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800527e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005282:	f241 3288 	movw	r2, #5000	; 0x1388
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005286:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800528a:	f002 fb22 	bl	80078d2 <HAL_OSPI_Command>
 800528e:	b118      	cbz	r0, 8005298 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25LM51245G_ERROR;
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005294:	b016      	add	sp, #88	; 0x58
 8005296:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8005298:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800529a:	f241 3288 	movw	r2, #5000	; 0x1388
 800529e:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80052a0:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80052a2:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80052a6:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052aa:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80052ac:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052ae:	f002 fb10 	bl	80078d2 <HAL_OSPI_Command>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d1ec      	bne.n	8005290 <MX25LM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80052b6:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80052b8:	4669      	mov	r1, sp
 80052ba:	4620      	mov	r0, r4
 80052bc:	f002 fc96 	bl	8007bec <HAL_OSPI_MemoryMapped>
 80052c0:	3800      	subs	r0, #0
 80052c2:	bf18      	it	ne
 80052c4:	2001      	movne	r0, #1
 80052c6:	4240      	negs	r0, r0
 80052c8:	e7e4      	b.n	8005294 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6a>

080052ca <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80052ca:	b570      	push	{r4, r5, r6, lr}
 80052cc:	b09a      	sub	sp, #104	; 0x68
 80052ce:	460c      	mov	r4, r1
 80052d0:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 80052d2:	2100      	movs	r1, #0
{
 80052d4:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 80052d6:	a806      	add	r0, sp, #24
 80052d8:	2250      	movs	r2, #80	; 0x50
 80052da:	f017 f873 	bl	801c3c4 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80052de:	2214      	movs	r2, #20
 80052e0:	2100      	movs	r1, #0
 80052e2:	a801      	add	r0, sp, #4
 80052e4:	f017 f86e 	bl	801c3c4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80052e8:	b92c      	cbnz	r4, 80052f6 <MX25LM51245G_WriteEnable+0x2c>
 80052ea:	2d01      	cmp	r5, #1
 80052ec:	d103      	bne.n	80052f6 <MX25LM51245G_WriteEnable+0x2c>
  {
    return MX25LM51245G_ERROR;
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80052f2:	b01a      	add	sp, #104	; 0x68
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80052f6:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052f8:	a906      	add	r1, sp, #24
 80052fa:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80052fc:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80052fe:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005300:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005302:	bf0c      	ite	eq
 8005304:	2201      	moveq	r2, #1
 8005306:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005308:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800530a:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800530c:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800530e:	bf0c      	ite	eq
 8005310:	2208      	moveq	r2, #8
 8005312:	461a      	movne	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005314:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005316:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005318:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800531a:	bf0c      	ite	eq
 800531c:	461a      	moveq	r2, r3
 800531e:	2210      	movne	r2, #16
 8005320:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8005322:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8005326:	bf08      	it	eq
 8005328:	2206      	moveq	r2, #6
 800532a:	9208      	str	r2, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005330:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005334:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005338:	f002 facb 	bl	80078d2 <HAL_OSPI_Command>
 800533c:	2800      	cmp	r0, #0
 800533e:	d1d6      	bne.n	80052ee <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005340:	2c00      	cmp	r4, #0
 8005342:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 8005346:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800534c:	bf08      	it	eq
 800534e:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005350:	a906      	add	r1, sp, #24
 8005352:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005354:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005356:	bf0c      	ite	eq
 8005358:	2300      	moveq	r3, #0
 800535a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800535e:	2d01      	cmp	r5, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005360:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005362:	bf0c      	ite	eq
 8005364:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8005368:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800536a:	2c00      	cmp	r4, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800536c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800536e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005372:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005374:	bf0c      	ite	eq
 8005376:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800537a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800537e:	2d01      	cmp	r5, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005380:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005382:	bf0c      	ite	eq
 8005384:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8005388:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800538a:	2c00      	cmp	r4, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800538c:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800538e:	bf0c      	ite	eq
 8005390:	2300      	moveq	r3, #0
 8005392:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005394:	2d01      	cmp	r5, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005396:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005398:	bf0c      	ite	eq
 800539a:	2302      	moveq	r3, #2
 800539c:	2301      	movne	r3, #1
 800539e:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80053a0:	bf0c      	ite	eq
 80053a2:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 80053a6:	2300      	movne	r3, #0
 80053a8:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053aa:	f002 fa92 	bl	80078d2 <HAL_OSPI_Command>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d19d      	bne.n	80052ee <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 80053b2:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80053b4:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80053b6:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053b8:	a901      	add	r1, sp, #4
 80053ba:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 80053bc:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80053c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053c4:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053cc:	f002 fbbe 	bl	8007b4c <HAL_OSPI_AutoPolling>
 80053d0:	3800      	subs	r0, #0
 80053d2:	bf18      	it	ne
 80053d4:	2001      	movne	r0, #1
 80053d6:	4240      	negs	r0, r0
 80053d8:	e78b      	b.n	80052f2 <MX25LM51245G_WriteEnable+0x28>

080053da <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80053da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053dc:	b095      	sub	sp, #84	; 0x54
 80053de:	460d      	mov	r5, r1
 80053e0:	4606      	mov	r6, r0
 80053e2:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80053e4:	2100      	movs	r1, #0
 80053e6:	2250      	movs	r2, #80	; 0x50
 80053e8:	4668      	mov	r0, sp
{
 80053ea:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80053ec:	f016 ffea 	bl	801c3c4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80053f0:	b92d      	cbnz	r5, 80053fe <MX25LM51245G_WriteCfg2Register+0x24>
 80053f2:	2c01      	cmp	r4, #1
 80053f4:	d103      	bne.n	80053fe <MX25LM51245G_WriteCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80053fa:	b015      	add	sp, #84	; 0x54
 80053fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80053fe:	2200      	movs	r2, #0
  s_command.Address            = WriteAddr;
 8005400:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005402:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005404:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800540c:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800540e:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005410:	bf0c      	ite	eq
 8005412:	2308      	moveq	r3, #8
 8005414:	4613      	movne	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005416:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005418:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800541a:	bf0c      	ite	eq
 800541c:	4613      	moveq	r3, r2
 800541e:	2310      	movne	r3, #16
 8005420:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8005422:	f247 238d 	movw	r3, #29325	; 0x728d
 8005426:	bf08      	it	eq
 8005428:	2372      	moveq	r3, #114	; 0x72
 800542a:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800542c:	bf0c      	ite	eq
 800542e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005432:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005436:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005438:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800543a:	bf0c      	ite	eq
 800543c:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8005440:	4613      	movne	r3, r2
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005442:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005444:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005446:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800544a:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800544c:	bf0c      	ite	eq
 800544e:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8005452:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005456:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005458:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800545a:	bf0c      	ite	eq
 800545c:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8005460:	4613      	movne	r3, r2
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005462:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.DummyCycles        = 0U;
 8005466:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800546a:	b1d5      	cbz	r5, 80054a2 <MX25LM51245G_WriteCfg2Register+0xc8>
 800546c:	2c01      	cmp	r4, #1
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2302      	moveq	r3, #2
 8005474:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005476:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005478:	f241 3288 	movw	r2, #5000	; 0x1388
 800547c:	4669      	mov	r1, sp
 800547e:	4630      	mov	r0, r6
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005480:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005484:	f002 fa25 	bl	80078d2 <HAL_OSPI_Command>
 8005488:	2800      	cmp	r0, #0
 800548a:	d1b4      	bne.n	80053f6 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	a91a      	add	r1, sp, #104	; 0x68
 8005492:	4630      	mov	r0, r6
 8005494:	f002 fac8 	bl	8007a28 <HAL_OSPI_Transmit>
 8005498:	3800      	subs	r0, #0
 800549a:	bf18      	it	ne
 800549c:	2001      	movne	r0, #1
 800549e:	4240      	negs	r0, r0
 80054a0:	e7ab      	b.n	80053fa <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80054a2:	2301      	movs	r3, #1
 80054a4:	e7e6      	b.n	8005474 <MX25LM51245G_WriteCfg2Register+0x9a>

080054a6 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80054a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a8:	b095      	sub	sp, #84	; 0x54
 80054aa:	460d      	mov	r5, r1
 80054ac:	4606      	mov	r6, r0
 80054ae:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80054b0:	2100      	movs	r1, #0
 80054b2:	2250      	movs	r2, #80	; 0x50
 80054b4:	4668      	mov	r0, sp
{
 80054b6:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80054b8:	f016 ff84 	bl	801c3c4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80054bc:	b92d      	cbnz	r5, 80054ca <MX25LM51245G_ReadCfg2Register+0x24>
 80054be:	2c01      	cmp	r4, #1
 80054c0:	d103      	bne.n	80054ca <MX25LM51245G_ReadCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80054c6:	b015      	add	sp, #84	; 0x54
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80054ca:	2200      	movs	r2, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054cc:	4669      	mov	r1, sp
 80054ce:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 80054d0:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80054d2:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80054d4:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80054dc:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80054de:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80054e0:	bf14      	ite	ne
 80054e2:	4613      	movne	r3, r2
 80054e4:	2308      	moveq	r3, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80054e6:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80054e8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80054ea:	bf0c      	ite	eq
 80054ec:	4613      	moveq	r3, r2
 80054ee:	2310      	movne	r3, #16
 80054f0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80054f2:	f247 138e 	movw	r3, #29070	; 0x718e
 80054f6:	bf08      	it	eq
 80054f8:	2371      	moveq	r3, #113	; 0x71
 80054fa:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80054fc:	bf0c      	ite	eq
 80054fe:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005502:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005506:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005508:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800550a:	bf14      	ite	ne
 800550c:	4613      	movne	r3, r2
 800550e:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005512:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005514:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005516:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800551a:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800551c:	bf0c      	ite	eq
 800551e:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8005522:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005526:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005528:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800552a:	bf14      	ite	ne
 800552c:	4613      	movne	r3, r2
 800552e:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005532:	4295      	cmp	r5, r2
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005534:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005536:	bf0c      	ite	eq
 8005538:	4613      	moveq	r3, r2
 800553a:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800553c:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800553e:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005540:	bf0c      	ite	eq
 8005542:	2302      	moveq	r3, #2
 8005544:	2301      	movne	r3, #1
 8005546:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005548:	bf14      	ite	ne
 800554a:	4613      	movne	r3, r2
 800554c:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005550:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005554:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005558:	f241 3288 	movw	r2, #5000	; 0x1388
 800555c:	f002 f9b9 	bl	80078d2 <HAL_OSPI_Command>
 8005560:	2800      	cmp	r0, #0
 8005562:	d1ae      	bne.n	80054c2 <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005564:	f241 3288 	movw	r2, #5000	; 0x1388
 8005568:	991a      	ldr	r1, [sp, #104]	; 0x68
 800556a:	4630      	mov	r0, r6
 800556c:	f002 fa9c 	bl	8007aa8 <HAL_OSPI_Receive>
 8005570:	3800      	subs	r0, #0
 8005572:	bf18      	it	ne
 8005574:	2001      	movne	r0, #1
 8005576:	4240      	negs	r0, r0
 8005578:	e7a5      	b.n	80054c6 <MX25LM51245G_ReadCfg2Register+0x20>

0800557a <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800557a:	b570      	push	{r4, r5, r6, lr}
 800557c:	b094      	sub	sp, #80	; 0x50
 800557e:	460c      	mov	r4, r1
 8005580:	4606      	mov	r6, r0
 8005582:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8005584:	2100      	movs	r1, #0
 8005586:	2250      	movs	r2, #80	; 0x50
 8005588:	4668      	mov	r0, sp
 800558a:	f016 ff1b 	bl	801c3c4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800558e:	b90c      	cbnz	r4, 8005594 <MX25LM51245G_ResetEnable+0x1a>
 8005590:	2d01      	cmp	r5, #1
 8005592:	d028      	beq.n	80055e6 <MX25LM51245G_ResetEnable+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005594:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005596:	4669      	mov	r1, sp
 8005598:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800559a:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800559c:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800559e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80055a0:	bf0c      	ite	eq
 80055a2:	2201      	moveq	r2, #1
 80055a4:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80055a6:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80055a8:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80055aa:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80055ac:	bf14      	ite	ne
 80055ae:	461a      	movne	r2, r3
 80055b0:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80055b2:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80055b4:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80055b6:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80055b8:	bf0c      	ite	eq
 80055ba:	461a      	moveq	r2, r3
 80055bc:	2210      	movne	r2, #16
 80055be:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80055c0:	f246 6299 	movw	r2, #26265	; 0x6699
 80055c4:	bf08      	it	eq
 80055c6:	2266      	moveq	r2, #102	; 0x66
 80055c8:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80055ce:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80055d2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055d6:	f002 f97c 	bl	80078d2 <HAL_OSPI_Command>
 80055da:	3800      	subs	r0, #0
 80055dc:	bf18      	it	ne
 80055de:	2001      	movne	r0, #1
 80055e0:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80055e2:	b014      	add	sp, #80	; 0x50
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ea:	e7fa      	b.n	80055e2 <MX25LM51245G_ResetEnable+0x68>

080055ec <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	b094      	sub	sp, #80	; 0x50
 80055f0:	460c      	mov	r4, r1
 80055f2:	4606      	mov	r6, r0
 80055f4:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80055f6:	2100      	movs	r1, #0
 80055f8:	2250      	movs	r2, #80	; 0x50
 80055fa:	4668      	mov	r0, sp
 80055fc:	f016 fee2 	bl	801c3c4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005600:	b90c      	cbnz	r4, 8005606 <MX25LM51245G_ResetMemory+0x1a>
 8005602:	2d01      	cmp	r5, #1
 8005604:	d028      	beq.n	8005658 <MX25LM51245G_ResetMemory+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005606:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005608:	4669      	mov	r1, sp
 800560a:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800560c:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800560e:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005610:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005612:	bf0c      	ite	eq
 8005614:	2201      	moveq	r2, #1
 8005616:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005618:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800561a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800561c:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800561e:	bf14      	ite	ne
 8005620:	461a      	movne	r2, r3
 8005622:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005624:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005626:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005628:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800562a:	bf0c      	ite	eq
 800562c:	461a      	moveq	r2, r3
 800562e:	2210      	movne	r2, #16
 8005630:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8005632:	f649 1266 	movw	r2, #39270	; 0x9966
 8005636:	bf08      	it	eq
 8005638:	2299      	moveq	r2, #153	; 0x99
 800563a:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800563c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005640:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005644:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005648:	f002 f943 	bl	80078d2 <HAL_OSPI_Command>
 800564c:	3800      	subs	r0, #0
 800564e:	bf18      	it	ne
 8005650:	2001      	movne	r0, #1
 8005652:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005654:	b014      	add	sp, #80	; 0x50
 8005656:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	e7fa      	b.n	8005654 <MX25LM51245G_ResetMemory+0x68>
	...

08005660 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 8005660:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <BSP_I2C4_DeInit+0x48>)
{
 8005662:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 8005664:	6813      	ldr	r3, [r2, #0]
 8005666:	b90b      	cbnz	r3, 800566c <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 8005668:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 800566a:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 800566c:	3b01      	subs	r3, #1
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f9      	bne.n	8005668 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005678:	480c      	ldr	r0, [pc, #48]	; (80056ac <BSP_I2C4_DeInit+0x4c>)
 800567a:	f001 f959 	bl	8006930 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800567e:	480b      	ldr	r0, [pc, #44]	; (80056ac <BSP_I2C4_DeInit+0x4c>)
 8005680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005684:	f001 f954 	bl	8006930 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800568a:	480a      	ldr	r0, [pc, #40]	; (80056b4 <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 800568c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8005690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005694:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005698:	f001 fbe3 	bl	8006e62 <HAL_I2C_DeInit>
 800569c:	2800      	cmp	r0, #0
 800569e:	d0e3      	beq.n	8005668 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 80056a0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80056a4:	e7e1      	b.n	800566a <BSP_I2C4_DeInit+0xa>
 80056a6:	bf00      	nop
 80056a8:	2400187c 	.word	0x2400187c
 80056ac:	58021400 	.word	0x58021400
 80056b0:	58024400 	.word	0x58024400
 80056b4:	240072a4 	.word	0x240072a4

080056b8 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80056b8:	2300      	movs	r3, #0
 80056ba:	2201      	movs	r2, #1
{
 80056bc:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80056be:	6041      	str	r1, [r0, #4]
{
 80056c0:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80056c2:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80056c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80056c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80056cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80056d0:	f001 fb75 	bl	8006dbe <HAL_I2C_Init>
 80056d4:	4601      	mov	r1, r0
 80056d6:	b108      	cbz	r0, 80056dc <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80056d8:	2001      	movs	r0, #1
}
 80056da:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80056dc:	4620      	mov	r0, r4
 80056de:	f001 fd50 	bl	8007182 <HAL_I2CEx_ConfigAnalogFilter>
 80056e2:	4601      	mov	r1, r0
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1f7      	bne.n	80056d8 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80056e8:	4620      	mov	r0, r4
 80056ea:	f001 fd70 	bl	80071ce <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 80056ee:	3800      	subs	r0, #0
 80056f0:	bf18      	it	ne
 80056f2:	2001      	movne	r0, #1
 80056f4:	e7f1      	b.n	80056da <MX_I2C4_Init+0x22>
	...

080056f8 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80056f8:	4ba3      	ldr	r3, [pc, #652]	; (8005988 <BSP_I2C4_Init+0x290>)
 80056fa:	48a4      	ldr	r0, [pc, #656]	; (800598c <BSP_I2C4_Init+0x294>)
{
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005700:	6003      	str	r3, [r0, #0]
{
 8005702:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 8005704:	4ba2      	ldr	r3, [pc, #648]	; (8005990 <BSP_I2C4_Init+0x298>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	9200      	str	r2, [sp, #0]
 800570a:	3201      	adds	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	9b00      	ldr	r3, [sp, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 80c9 	bne.w	80058a8 <BSP_I2C4_Init+0x1b0>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005716:	f001 fd2f 	bl	8007178 <HAL_I2C_GetState>
 800571a:	2800      	cmp	r0, #0
 800571c:	f040 80c4 	bne.w	80058a8 <BSP_I2C4_Init+0x1b0>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005720:	4d9c      	ldr	r5, [pc, #624]	; (8005994 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005726:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005728:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800572a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800572e:	489a      	ldr	r0, [pc, #616]	; (8005998 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005730:	f043 0320 	orr.w	r3, r3, #32
 8005734:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005738:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	930a      	str	r3, [sp, #40]	; 0x28
 8005742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005744:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005748:	f043 0320 	orr.w	r3, r3, #32
 800574c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005750:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005754:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	930b      	str	r3, [sp, #44]	; 0x2c
 800575c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800575e:	2312      	movs	r3, #18
 8005760:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005764:	2302      	movs	r3, #2
 8005766:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800576a:	a90d      	add	r1, sp, #52	; 0x34
 800576c:	f000 fffa 	bl	8006764 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005774:	a90d      	add	r1, sp, #52	; 0x34
 8005776:	4888      	ldr	r0, [pc, #544]	; (8005998 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005778:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800577a:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800577c:	f000 fff2 	bl	8006764 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005780:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005788:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800578c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	930c      	str	r3, [sp, #48]	; 0x30
 8005796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8005798:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 80057a4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80057a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ac:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80057b0:	f003 f9c8 	bl	8008b44 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d071      	beq.n	800589c <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80057b8:	4b78      	ldr	r3, [pc, #480]	; (800599c <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 80057ba:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80057be:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80059a4 <BSP_I2C4_Init+0x2ac>
 80057c2:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80057c6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80057ca:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80057ce:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80057d2:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80057d6:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80057d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80057dc:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80057e0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80057e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80057e8:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	4b6c      	ldr	r3, [pc, #432]	; (80059a0 <BSP_I2C4_Init+0x2a8>)
 80057ee:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80057f2:	9a00      	ldr	r2, [sp, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4690      	mov	r8, r2
{
 80057f8:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80057fa:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80057fc:	f240 3479 	movw	r4, #889	; 0x379
 8005800:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005802:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005804:	45a4      	cmp	ip, r4
 8005806:	d95a      	bls.n	80058be <BSP_I2C4_Init+0x1c6>
 8005808:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800580a:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800580c:	45ab      	cmp	fp, r5
 800580e:	d852      	bhi.n	80058b6 <BSP_I2C4_Init+0x1be>
 8005810:	9c02      	ldr	r4, [sp, #8]
 8005812:	42ac      	cmp	r4, r5
 8005814:	d34f      	bcc.n	80058b6 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8005816:	4596      	cmp	lr, r2
 8005818:	d04d      	beq.n	80058b6 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800581a:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 800581e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005820:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005822:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005828:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800582c:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005830:	d93e      	bls.n	80058b0 <BSP_I2C4_Init+0x1b8>
 8005832:	4a5b      	ldr	r2, [pc, #364]	; (80059a0 <BSP_I2C4_Init+0x2a8>)
 8005834:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005836:	4b5a      	ldr	r3, [pc, #360]	; (80059a0 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005838:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 800583c:	4a59      	ldr	r2, [pc, #356]	; (80059a4 <BSP_I2C4_Init+0x2ac>)
 800583e:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005840:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005842:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005846:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005848:	f242 7310 	movw	r3, #10000	; 0x2710
 800584c:	9303      	str	r3, [sp, #12]
 800584e:	f10b 0332 	add.w	r3, fp, #50	; 0x32
 8005852:	9309      	str	r3, [sp, #36]	; 0x24
 8005854:	f5ab 5311 	sub.w	r3, fp, #9280	; 0x2440
 8005858:	3b0a      	subs	r3, #10
 800585a:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800585c:	9b06      	ldr	r3, [sp, #24]
 800585e:	429e      	cmp	r6, r3
 8005860:	d138      	bne.n	80058d4 <BSP_I2C4_Init+0x1dc>
        if (idx < I2C_VALID_TIMING_NBR)
 8005862:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8005866:	d819      	bhi.n	800589c <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005868:	2314      	movs	r3, #20
 800586a:	fb03 f808 	mul.w	r8, r3, r8
 800586e:	4b4d      	ldr	r3, [pc, #308]	; (80059a4 <BSP_I2C4_Init+0x2ac>)
 8005870:	eb03 0208 	add.w	r2, r3, r8
 8005874:	f853 3008 	ldr.w	r3, [r3, r8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005878:	7c14      	ldrb	r4, [r2, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800587a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800587e:	6853      	ldr	r3, [r2, #4]
 8005880:	051b      	lsls	r3, r3, #20
 8005882:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005886:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005888:	6893      	ldr	r3, [r2, #8]
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005890:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005892:	68d3      	ldr	r3, [r2, #12]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005898:	4323      	orrs	r3, r4
 800589a:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800589c:	9900      	ldr	r1, [sp, #0]
 800589e:	483b      	ldr	r0, [pc, #236]	; (800598c <BSP_I2C4_Init+0x294>)
 80058a0:	f7ff ff0a 	bl	80056b8 <MX_I2C4_Init>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d16b      	bne.n	8005980 <BSP_I2C4_Init+0x288>
  int32_t ret = BSP_ERROR_NONE;
 80058a8:	2000      	movs	r0, #0
}
 80058aa:	b013      	add	sp, #76	; 0x4c
 80058ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b0:	4696      	mov	lr, r2
 80058b2:	f04f 0801 	mov.w	r8, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80058b6:	3701      	adds	r7, #1
 80058b8:	440d      	add	r5, r1
 80058ba:	2f10      	cmp	r7, #16
 80058bc:	d1a6      	bne.n	800580c <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80058be:	2e10      	cmp	r6, #16
 80058c0:	448c      	add	ip, r1
 80058c2:	d19b      	bne.n	80057fc <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80058c4:	3201      	adds	r2, #1
 80058c6:	4401      	add	r1, r0
 80058c8:	2a10      	cmp	r2, #16
 80058ca:	d195      	bne.n	80057f8 <BSP_I2C4_Init+0x100>
 80058cc:	f1b8 0f00 	cmp.w	r8, #0
 80058d0:	d1af      	bne.n	8005832 <BSP_I2C4_Init+0x13a>
 80058d2:	e7b0      	b.n	8005836 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80058d4:	6813      	ldr	r3, [r2, #0]
 80058d6:	f06f 0401 	mvn.w	r4, #1
 80058da:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80058dc:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80058de:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80058e2:	4419      	add	r1, r3
 80058e4:	9104      	str	r1, [sp, #16]
 80058e6:	eb03 010b 	add.w	r1, r3, fp
 80058ea:	4361      	muls	r1, r4
 80058ec:	9c02      	ldr	r4, [sp, #8]
 80058ee:	9101      	str	r1, [sp, #4]
 80058f0:	441c      	add	r4, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80058f2:	9904      	ldr	r1, [sp, #16]
 80058f4:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80058f6:	f241 245c 	movw	r4, #4700	; 0x125c
 80058fa:	9707      	str	r7, [sp, #28]
 80058fc:	f1a1 0532 	sub.w	r5, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005900:	3701      	adds	r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005902:	42a1      	cmp	r1, r4
 8005904:	d931      	bls.n	800596a <BSP_I2C4_Init+0x272>
 8005906:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
 800590a:	d22e      	bcs.n	800596a <BSP_I2C4_Init+0x272>
 800590c:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800590e:	f04f 0c00 	mov.w	ip, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005912:	f8dd e010 	ldr.w	lr, [sp, #16]
 8005916:	f504 5910 	add.w	r9, r4, #9216	; 0x2400
 800591a:	9c08      	ldr	r4, [sp, #32]
 800591c:	f109 0918 	add.w	r9, r9, #24
 8005920:	1865      	adds	r5, r4, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005922:	f205 6a83 	addw	sl, r5, #1667	; 0x683
 8005926:	f241 0447 	movw	r4, #4167	; 0x1047
 800592a:	f8cd c014 	str.w	ip, [sp, #20]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800592e:	f10c 0c01 	add.w	ip, ip, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005932:	45a2      	cmp	sl, r4
 8005934:	d812      	bhi.n	800595c <BSP_I2C4_Init+0x264>
 8005936:	f5be 6f7a 	cmp.w	lr, #4000	; 0xfa0
 800593a:	d30f      	bcc.n	800595c <BSP_I2C4_Init+0x264>
 800593c:	4570      	cmp	r0, lr
 800593e:	d20d      	bcs.n	800595c <BSP_I2C4_Init+0x264>
              error = -error;
 8005940:	ea35 0a25 	bics.w	sl, r5, r5, asr #32
 8005944:	bf28      	it	cs
 8005946:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005948:	9c03      	ldr	r4, [sp, #12]
 800594a:	4554      	cmp	r4, sl
 800594c:	d906      	bls.n	800595c <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 800594e:	9c07      	ldr	r4, [sp, #28]
              I2c_valid_timing[count].sclh = sclh;
 8005950:	46b0      	mov	r8, r6
 8005952:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8005956:	6114      	str	r4, [r2, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005958:	9c05      	ldr	r4, [sp, #20]
 800595a:	60d4      	str	r4, [r2, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800595c:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8005960:	eba9 0903 	sub.w	r9, r9, r3
 8005964:	441d      	add	r5, r3
 8005966:	449e      	add	lr, r3
 8005968:	d1db      	bne.n	8005922 <BSP_I2C4_Init+0x22a>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800596a:	9c01      	ldr	r4, [sp, #4]
 800596c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8005970:	4419      	add	r1, r3
 8005972:	eba4 0403 	sub.w	r4, r4, r3
 8005976:	9401      	str	r4, [sp, #4]
 8005978:	d1bd      	bne.n	80058f6 <BSP_I2C4_Init+0x1fe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800597a:	3601      	adds	r6, #1
 800597c:	3214      	adds	r2, #20
 800597e:	e76d      	b.n	800585c <BSP_I2C4_Init+0x164>
          ret = BSP_ERROR_BUS_FAILURE;
 8005980:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005984:	e791      	b.n	80058aa <BSP_I2C4_Init+0x1b2>
 8005986:	bf00      	nop
 8005988:	58001c00 	.word	0x58001c00
 800598c:	240072a4 	.word	0x240072a4
 8005990:	2400187c 	.word	0x2400187c
 8005994:	58024400 	.word	0x58024400
 8005998:	58021400 	.word	0x58021400
 800599c:	3b9aca00 	.word	0x3b9aca00
 80059a0:	24002280 	.word	0x24002280
 80059a4:	24001880 	.word	0x24001880

080059a8 <BSP_I2C4_WriteReg>:
{
 80059a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80059aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80059ae:	9200      	str	r2, [sp, #0]
 80059b0:	460a      	mov	r2, r1
 80059b2:	4601      	mov	r1, r0
 80059b4:	4808      	ldr	r0, [pc, #32]	; (80059d8 <BSP_I2C4_WriteReg+0x30>)
 80059b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059ba:	2301      	movs	r3, #1
 80059bc:	f001 fa6a 	bl	8006e94 <HAL_I2C_Mem_Write>
 80059c0:	b140      	cbz	r0, 80059d4 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80059c2:	4805      	ldr	r0, [pc, #20]	; (80059d8 <BSP_I2C4_WriteReg+0x30>)
 80059c4:	f001 fbdb 	bl	800717e <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80059c8:	2804      	cmp	r0, #4
 80059ca:	bf0c      	ite	eq
 80059cc:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80059d0:	f06f 0003 	mvnne.w	r0, #3
}
 80059d4:	b004      	add	sp, #16
 80059d6:	bd10      	pop	{r4, pc}
 80059d8:	240072a4 	.word	0x240072a4

080059dc <BSP_I2C4_ReadReg>:
{
 80059dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80059de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80059e2:	9200      	str	r2, [sp, #0]
 80059e4:	460a      	mov	r2, r1
 80059e6:	4601      	mov	r1, r0
 80059e8:	4808      	ldr	r0, [pc, #32]	; (8005a0c <BSP_I2C4_ReadReg+0x30>)
 80059ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059ee:	2301      	movs	r3, #1
 80059f0:	f001 fb06 	bl	8007000 <HAL_I2C_Mem_Read>
 80059f4:	b140      	cbz	r0, 8005a08 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80059f6:	4805      	ldr	r0, [pc, #20]	; (8005a0c <BSP_I2C4_ReadReg+0x30>)
 80059f8:	f001 fbc1 	bl	800717e <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80059fc:	2804      	cmp	r0, #4
 80059fe:	bf0c      	ite	eq
 8005a00:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005a04:	f06f 0003 	mvnne.w	r0, #3
}
 8005a08:	b004      	add	sp, #16
 8005a0a:	bd10      	pop	{r4, pc}
 8005a0c:	240072a4 	.word	0x240072a4

08005a10 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005a10:	f000 bcd0 	b.w	80063b4 <HAL_GetTick>

08005a14 <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8005a14:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005a16:	4c21      	ldr	r4, [pc, #132]	; (8005a9c <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8005a18:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005a1a:	4821      	ldr	r0, [pc, #132]	; (8005aa0 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a1c:	78a2      	ldrb	r2, [r4, #2]
 8005a1e:	7861      	ldrb	r1, [r4, #1]
 8005a20:	f7ff fc53 	bl	80052ca <MX25LM51245G_WriteEnable>
 8005a24:	b118      	cbz	r0, 8005a2e <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a26:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005a2a:	b005      	add	sp, #20
 8005a2c:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8005a2e:	2303      	movs	r3, #3
 8005a30:	481b      	ldr	r0, [pc, #108]	; (8005aa0 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a38:	78a2      	ldrb	r2, [r4, #2]
 8005a3a:	7861      	ldrb	r1, [r4, #1]
 8005a3c:	f7ff fccd 	bl	80053da <MX25LM51245G_WriteCfg2Register>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d1f0      	bne.n	8005a26 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005a44:	78a2      	ldrb	r2, [r4, #2]
 8005a46:	7861      	ldrb	r1, [r4, #1]
 8005a48:	4815      	ldr	r0, [pc, #84]	; (8005aa0 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a4a:	f7ff fc3e 	bl	80052ca <MX25LM51245G_WriteEnable>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d1e8      	bne.n	8005a26 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8005a54:	2501      	movs	r5, #1
 8005a56:	4812      	ldr	r0, [pc, #72]	; (8005aa0 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a58:	9500      	str	r5, [sp, #0]
 8005a5a:	78a2      	ldrb	r2, [r4, #2]
 8005a5c:	7861      	ldrb	r1, [r4, #1]
 8005a5e:	f7ff fcbc 	bl	80053da <MX25LM51245G_WriteCfg2Register>
 8005a62:	4604      	mov	r4, r0
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d1de      	bne.n	8005a26 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005a68:	2028      	movs	r0, #40	; 0x28
 8005a6a:	f000 fca9 	bl	80063c0 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8005a6e:	4622      	mov	r2, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	480b      	ldr	r0, [pc, #44]	; (8005aa0 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a74:	f7ff faf4 	bl	8005060 <MX25LM51245G_AutoPollingMemReady>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d1d4      	bne.n	8005a26 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005a7c:	ab03      	add	r3, sp, #12
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4629      	mov	r1, r5
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	4603      	mov	r3, r0
 8005a86:	4806      	ldr	r0, [pc, #24]	; (8005aa0 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a88:	f7ff fd0d 	bl	80054a6 <MX25LM51245G_ReadCfg2Register>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d1ca      	bne.n	8005a26 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8005a90:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	d0c8      	beq.n	8005a2a <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8005a98:	e7c5      	b.n	8005a26 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8005a9a:	bf00      	nop
 8005a9c:	24002284 	.word	0x24002284
 8005aa0:	2400228c 	.word	0x2400228c

08005aa4 <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8005aa4:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005aa6:	4d27      	ldr	r5, [pc, #156]	; (8005b44 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8005aa8:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005aaa:	4c27      	ldr	r4, [pc, #156]	; (8005b48 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8005aac:	78aa      	ldrb	r2, [r5, #2]
 8005aae:	7869      	ldrb	r1, [r5, #1]
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7ff fc0a 	bl	80052ca <MX25LM51245G_WriteEnable>
 8005ab6:	b118      	cbz	r0, 8005ac0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ab8:	f06f 0004 	mvn.w	r0, #4
}
 8005abc:	b005      	add	sp, #20
 8005abe:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	78aa      	ldrb	r2, [r5, #2]
 8005ac4:	7869      	ldrb	r1, [r5, #1]
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ace:	f7ff fc84 	bl	80053da <MX25LM51245G_WriteCfg2Register>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005ad6:	78aa      	ldrb	r2, [r5, #2]
 8005ad8:	4620      	mov	r0, r4
 8005ada:	7869      	ldrb	r1, [r5, #1]
 8005adc:	f7ff fbf5 	bl	80052ca <MX25LM51245G_WriteEnable>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d1e9      	bne.n	8005ab8 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	78aa      	ldrb	r2, [r5, #2]
 8005ae8:	7869      	ldrb	r1, [r5, #1]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4603      	mov	r3, r0
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7ff fc73 	bl	80053da <MX25LM51245G_WriteCfg2Register>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d1df      	bne.n	8005ab8 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005af8:	2028      	movs	r0, #40	; 0x28
 8005afa:	f000 fc61 	bl	80063c0 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005b02:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005b04:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005b06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005b0c:	f001 fe58 	bl	80077c0 <HAL_OSPI_Init>
 8005b10:	b9a8      	cbnz	r0, 8005b3e <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8005b12:	2201      	movs	r2, #1
 8005b14:	4620      	mov	r0, r4
 8005b16:	4611      	mov	r1, r2
 8005b18:	f7ff faa2 	bl	8005060 <MX25LM51245G_AutoPollingMemReady>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1cb      	bne.n	8005ab8 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005b20:	ab03      	add	r3, sp, #12
 8005b22:	2201      	movs	r2, #1
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4603      	mov	r3, r0
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7ff fcbb 	bl	80054a6 <MX25LM51245G_ReadCfg2Register>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d1c1      	bne.n	8005ab8 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8005b34:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d0bf      	beq.n	8005abc <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8005b3c:	e7bc      	b.n	8005ab8 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005b3e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005b42:	e7bb      	b.n	8005abc <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8005b44:	24002284 	.word	0x24002284
 8005b48:	2400228c 	.word	0x2400228c

08005b4c <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8005b4c:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <MX_OSPI_NOR_Init+0x3c>)
 8005b4e:	2304      	movs	r3, #4
 8005b50:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8005b54:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8005b56:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8005b58:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8005b5a:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8005b5c:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8005b5e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005b62:	684a      	ldr	r2, [r1, #4]
 8005b64:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8005b66:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8005b68:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8005b6a:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8005b6c:	68ca      	ldr	r2, [r1, #12]
 8005b6e:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8005b70:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005b74:	bf09      	itett	eq
 8005b76:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8005b7a:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005b7c:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005b7e:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005b82:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8005b84:	f001 be1c 	b.w	80077c0 <HAL_OSPI_Init>
 8005b88:	52005000 	.word	0x52005000

08005b8c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8005b8c:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005b8e:	b998      	cbnz	r0, 8005bb8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005b90:	4c0b      	ldr	r4, [pc, #44]	; (8005bc0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
 8005b92:	78a2      	ldrb	r2, [r4, #2]
 8005b94:	7861      	ldrb	r1, [r4, #1]
 8005b96:	b95a      	cbnz	r2, 8005bb0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	480a      	ldr	r0, [pc, #40]	; (8005bc4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8005b9c:	f7ff fad6 	bl	800514c <MX25LM51245G_EnableSTRMemoryMappedMode>
 8005ba0:	b110      	cbz	r0, 8005ba8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ba2:	f06f 0004 	mvn.w	r0, #4
}
 8005ba6:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8005ba8:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005baa:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8005bac:	7023      	strb	r3, [r4, #0]
 8005bae:	e7fa      	b.n	8005ba6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8005bb0:	4804      	ldr	r0, [pc, #16]	; (8005bc4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8005bb2:	f7ff fb3a 	bl	800522a <MX25LM51245G_EnableDTRMemoryMappedMode>
 8005bb6:	e7f3      	b.n	8005ba0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8005bb8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005bbc:	e7f3      	b.n	8005ba6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8005bbe:	bf00      	nop
 8005bc0:	24002284 	.word	0x24002284
 8005bc4:	2400228c 	.word	0x2400228c

08005bc8 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8005bc8:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005bca:	b950      	cbnz	r0, 8005be2 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8005bcc:	4c09      	ldr	r4, [pc, #36]	; (8005bf4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8005bce:	7823      	ldrb	r3, [r4, #0]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d109      	bne.n	8005be8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8005bd4:	4808      	ldr	r0, [pc, #32]	; (8005bf8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8005bd6:	f002 f838 	bl	8007c4a <HAL_OSPI_Abort>
 8005bda:	b940      	cbnz	r0, 8005bee <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	7023      	strb	r3, [r4, #0]
}
 8005be0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005be2:	f06f 0001 	mvn.w	r0, #1
 8005be6:	e7fb      	b.n	8005be0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8005be8:	f06f 001a 	mvn.w	r0, #26
 8005bec:	e7f8      	b.n	8005be0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005bee:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005bf2:	e7f5      	b.n	8005be0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8005bf4:	24002284 	.word	0x24002284
 8005bf8:	2400228c 	.word	0x2400228c

08005bfc <BSP_OSPI_NOR_DeInit>:
{
 8005bfc:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d156      	bne.n	8005cb0 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8005c02:	4c2d      	ldr	r4, [pc, #180]	; (8005cb8 <BSP_OSPI_NOR_DeInit+0xbc>)
 8005c04:	7823      	ldrb	r3, [r4, #0]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d04b      	beq.n	8005ca2 <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8005c0a:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8005c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c10:	482a      	ldr	r0, [pc, #168]	; (8005cbc <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8005c12:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8005c14:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8005c16:	f000 fe8b 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	4828      	ldr	r0, [pc, #160]	; (8005cc0 <BSP_OSPI_NOR_DeInit+0xc4>)
 8005c1e:	f000 fe87 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8005c22:	2140      	movs	r1, #64	; 0x40
 8005c24:	4827      	ldr	r0, [pc, #156]	; (8005cc4 <BSP_OSPI_NOR_DeInit+0xc8>)
 8005c26:	f000 fe83 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8005c2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c2e:	4826      	ldr	r0, [pc, #152]	; (8005cc8 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c30:	f000 fe7e 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8005c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c38:	4823      	ldr	r0, [pc, #140]	; (8005cc8 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c3a:	f000 fe79 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8005c3e:	2104      	movs	r1, #4
 8005c40:	4822      	ldr	r0, [pc, #136]	; (8005ccc <BSP_OSPI_NOR_DeInit+0xd0>)
 8005c42:	f000 fe75 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8005c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c4a:	481f      	ldr	r0, [pc, #124]	; (8005cc8 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c4c:	f000 fe70 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8005c50:	2110      	movs	r1, #16
 8005c52:	481d      	ldr	r0, [pc, #116]	; (8005cc8 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c54:	f000 fe6c 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8005c58:	2120      	movs	r1, #32
 8005c5a:	481b      	ldr	r0, [pc, #108]	; (8005cc8 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c5c:	f000 fe68 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8005c60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c64:	4817      	ldr	r0, [pc, #92]	; (8005cc4 <BSP_OSPI_NOR_DeInit+0xc8>)
 8005c66:	f000 fe63 	bl	8006930 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8005c6a:	2180      	movs	r1, #128	; 0x80
 8005c6c:	4816      	ldr	r0, [pc, #88]	; (8005cc8 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c6e:	f000 fe5f 	bl	8006930 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8005c72:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8005c74:	4817      	ldr	r0, [pc, #92]	; (8005cd4 <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8005c76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c7c:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8005c7e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005c80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c84:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8005c86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005c8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c8e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8005c92:	f001 fe0b 	bl	80078ac <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c96:	2800      	cmp	r0, #0
 8005c98:	bf0c      	ite	eq
 8005c9a:	2000      	moveq	r0, #0
 8005c9c:	f06f 0003 	mvnne.w	r0, #3
}
 8005ca0:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8005ca2:	f7ff ff91 	bl	8005bc8 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d0af      	beq.n	8005c0a <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8005caa:	f06f 0004 	mvn.w	r0, #4
 8005cae:	e7f7      	b.n	8005ca0 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8005cb0:	f06f 0001 	mvn.w	r0, #1
 8005cb4:	e7f4      	b.n	8005ca0 <BSP_OSPI_NOR_DeInit+0xa4>
 8005cb6:	bf00      	nop
 8005cb8:	24002284 	.word	0x24002284
 8005cbc:	58021400 	.word	0x58021400
 8005cc0:	58020400 	.word	0x58020400
 8005cc4:	58021800 	.word	0x58021800
 8005cc8:	58020c00 	.word	0x58020c00
 8005ccc:	58021000 	.word	0x58021000
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	2400228c 	.word	0x2400228c

08005cd8 <BSP_OSPI_NOR_ConfigFlash>:
{
 8005cd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005cdc:	460d      	mov	r5, r1
 8005cde:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d156      	bne.n	8005d92 <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8005ce4:	4c2e      	ldr	r4, [pc, #184]	; (8005da0 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8005ce6:	7823      	ldrb	r3, [r4, #0]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d055      	beq.n	8005d98 <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8005cec:	7863      	ldrb	r3, [r4, #1]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d146      	bne.n	8005d80 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8005cf2:	2901      	cmp	r1, #1
 8005cf4:	78a2      	ldrb	r2, [r4, #2]
 8005cf6:	d109      	bne.n	8005d0c <BSP_OSPI_NOR_ConfigFlash+0x34>
 8005cf8:	4296      	cmp	r6, r2
 8005cfa:	d107      	bne.n	8005d0c <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005cfc:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8005cfe:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8005d00:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005d02:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8005d04:	70a6      	strb	r6, [r4, #2]
}
 8005d06:	b004      	add	sp, #16
 8005d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005d0c:	4f25      	ldr	r7, [pc, #148]	; (8005da4 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4638      	mov	r0, r7
 8005d12:	f7ff fada 	bl	80052ca <MX25LM51245G_WriteEnable>
 8005d16:	4603      	mov	r3, r0
 8005d18:	bb78      	cbnz	r0, 8005d7a <BSP_OSPI_NOR_ConfigFlash+0xa2>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8005d1a:	f8ad 000c 	strh.w	r0, [sp, #12]
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8005d1e:	9000      	str	r0, [sp, #0]
 8005d20:	4638      	mov	r0, r7
 8005d22:	78a2      	ldrb	r2, [r4, #2]
 8005d24:	7861      	ldrb	r1, [r4, #1]
 8005d26:	f7ff fb58 	bl	80053da <MX25LM51245G_WriteCfg2Register>
 8005d2a:	4680      	mov	r8, r0
 8005d2c:	bb28      	cbnz	r0, 8005d7a <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005d2e:	2028      	movs	r0, #40	; 0x28
 8005d30:	f000 fb46 	bl	80063c0 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8005d34:	78a3      	ldrb	r3, [r4, #2]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d106      	bne.n	8005d48 <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005d3a:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8005d3c:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005d40:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005d44:	f001 fd3c 	bl	80077c0 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4816      	ldr	r0, [pc, #88]	; (8005da4 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	f7ff f987 	bl	8005060 <MX25LM51245G_AutoPollingMemReady>
 8005d52:	b990      	cbnz	r0, 8005d7a <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005d54:	ab03      	add	r3, sp, #12
 8005d56:	4602      	mov	r2, r0
 8005d58:	4601      	mov	r1, r0
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4811      	ldr	r0, [pc, #68]	; (8005da4 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005d60:	f7ff fba1 	bl	80054a6 <MX25LM51245G_ReadCfg2Register>
 8005d64:	b948      	cbnz	r0, 8005d7a <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8005d66:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005d6a:	b933      	cbnz	r3, 8005d7a <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8005d6c:	2d01      	cmp	r5, #1
 8005d6e:	d1c5      	bne.n	8005cfc <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005d70:	78a3      	ldrb	r3, [r4, #2]
 8005d72:	b94b      	cbnz	r3, 8005d88 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8005d74:	f7ff fe96 	bl	8005aa4 <OSPI_NOR_EnterDOPIMode.constprop.0>
 8005d78:	e008      	b.n	8005d8c <BSP_OSPI_NOR_ConfigFlash+0xb4>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8005d7a:	f06f 0004 	mvn.w	r0, #4
 8005d7e:	e7c2      	b.n	8005d06 <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8005d80:	2901      	cmp	r1, #1
 8005d82:	d1bb      	bne.n	8005cfc <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	d1f5      	bne.n	8005d74 <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8005d88:	f7ff fe44 	bl	8005a14 <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d1ba      	bne.n	8005d06 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8005d90:	e7b4      	b.n	8005cfc <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8005d92:	f06f 0001 	mvn.w	r0, #1
 8005d96:	e7b6      	b.n	8005d06 <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8005d98:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8005d9c:	e7b3      	b.n	8005d06 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8005d9e:	bf00      	nop
 8005da0:	24002284 	.word	0x24002284
 8005da4:	2400228c 	.word	0x2400228c

08005da8 <MX_OSPI_ClockConfig>:
{
 8005da8:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8005daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8005dae:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8005db0:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8005db2:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8005db4:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005db6:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8005db8:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8005dba:	2305      	movs	r3, #5
 8005dbc:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8005dc0:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005dc2:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005dc4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005dc8:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8005dca:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005dce:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005dd0:	f002 ffe4 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
}
 8005dd4:	b02f      	add	sp, #188	; 0xbc
 8005dd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005ddc <BSP_OSPI_NOR_Init>:
{
 8005ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005de0:	460e      	mov	r6, r1
 8005de2:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f040 8160 	bne.w	80060aa <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8005dea:	4cb1      	ldr	r4, [pc, #708]	; (80060b0 <BSP_OSPI_NOR_Init+0x2d4>)
 8005dec:	7825      	ldrb	r5, [r4, #0]
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	f040 8159 	bne.w	80060a6 <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8005df4:	4baf      	ldr	r3, [pc, #700]	; (80060b4 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005df6:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8005dfa:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005dfe:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8005e00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8005e04:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005e06:	48ac      	ldr	r0, [pc, #688]	; (80060b8 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8005e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005e10:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005e14:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005e18:	9201      	str	r2, [sp, #4]
 8005e1a:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8005e1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e22:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8005e24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e2a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8005e2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e30:	f042 0220 	orr.w	r2, r2, #32
 8005e34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e3c:	f002 0220 	and.w	r2, r2, #32
 8005e40:	9202      	str	r2, [sp, #8]
 8005e42:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8005e44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e48:	f042 0202 	orr.w	r2, r2, #2
 8005e4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e54:	f002 0202 	and.w	r2, r2, #2
 8005e58:	9203      	str	r2, [sp, #12]
 8005e5a:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8005e5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e6c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005e70:	9204      	str	r2, [sp, #16]
 8005e72:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8005e74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e78:	f042 0208 	orr.w	r2, r2, #8
 8005e7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e84:	f002 0208 	and.w	r2, r2, #8
 8005e88:	9205      	str	r2, [sp, #20]
 8005e8a:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8005e8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e90:	f042 0208 	orr.w	r2, r2, #8
 8005e94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e9c:	f002 0208 	and.w	r2, r2, #8
 8005ea0:	9206      	str	r2, [sp, #24]
 8005ea2:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8005ea4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ea8:	f042 0210 	orr.w	r2, r2, #16
 8005eac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005eb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005eb4:	f002 0210 	and.w	r2, r2, #16
 8005eb8:	9207      	str	r2, [sp, #28]
 8005eba:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8005ebc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ec0:	f042 0208 	orr.w	r2, r2, #8
 8005ec4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ec8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ecc:	f002 0208 	and.w	r2, r2, #8
 8005ed0:	9208      	str	r2, [sp, #32]
 8005ed2:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8005ed4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ed8:	f042 0208 	orr.w	r2, r2, #8
 8005edc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ee0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ee4:	f002 0208 	and.w	r2, r2, #8
 8005ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8005eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8005eec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ef0:	f042 0208 	orr.w	r2, r2, #8
 8005ef4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ef8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005efc:	f002 0208 	and.w	r2, r2, #8
 8005f00:	920a      	str	r2, [sp, #40]	; 0x28
 8005f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8005f04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f14:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005f18:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8005f1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f20:	f042 0208 	orr.w	r2, r2, #8
 8005f24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f28:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8005f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	930c      	str	r3, [sp, #48]	; 0x30
 8005f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f3c:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8005f3e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f42:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005f46:	f000 fc0d 	bl	8006764 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005f4a:	a911      	add	r1, sp, #68	; 0x44
 8005f4c:	485b      	ldr	r0, [pc, #364]	; (80060bc <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8005f4e:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005f50:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8005f52:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005f56:	f000 fc05 	bl	8006764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8005f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005f5e:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8005f60:	2509      	movs	r5, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005f62:	a911      	add	r1, sp, #68	; 0x44
 8005f64:	4856      	ldr	r0, [pc, #344]	; (80060c0 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8005f66:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8005f68:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005f6a:	f000 fbfb 	bl	8006764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8005f6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8005f72:	a911      	add	r1, sp, #68	; 0x44
 8005f74:	4853      	ldr	r0, [pc, #332]	; (80060c4 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8005f76:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8005f78:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8005f7a:	f000 fbf3 	bl	8006764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8005f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8005f82:	a911      	add	r1, sp, #68	; 0x44
 8005f84:	484f      	ldr	r0, [pc, #316]	; (80060c4 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8005f86:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8005f88:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8005f8a:	f000 fbeb 	bl	8006764 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8005f8e:	a911      	add	r1, sp, #68	; 0x44
 8005f90:	484d      	ldr	r0, [pc, #308]	; (80060c8 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8005f92:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8005f94:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8005f96:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8005f98:	f000 fbe4 	bl	8006764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8005f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8005fa0:	a911      	add	r1, sp, #68	; 0x44
 8005fa2:	4848      	ldr	r0, [pc, #288]	; (80060c4 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8005fa4:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8005fa6:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8005fa8:	f000 fbdc 	bl	8006764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8005fac:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8005fae:	a911      	add	r1, sp, #68	; 0x44
 8005fb0:	4844      	ldr	r0, [pc, #272]	; (80060c4 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8005fb2:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8005fb4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8005fb8:	f000 fbd4 	bl	8006764 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8005fbc:	a911      	add	r1, sp, #68	; 0x44
 8005fbe:	4841      	ldr	r0, [pc, #260]	; (80060c4 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8005fc0:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8005fc2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8005fc6:	f000 fbcd 	bl	8006764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8005fca:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8005fce:	a911      	add	r1, sp, #68	; 0x44
 8005fd0:	4839      	ldr	r0, [pc, #228]	; (80060b8 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8005fd2:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8005fd4:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8005fd6:	f000 fbc5 	bl	8006764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8005fda:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8005fdc:	a911      	add	r1, sp, #68	; 0x44
 8005fde:	4839      	ldr	r0, [pc, #228]	; (80060c4 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8005fe0:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8005fe2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8005fe6:	f000 fbbd 	bl	8006764 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8005fea:	a811      	add	r0, sp, #68	; 0x44
 8005fec:	f7ff f81f 	bl	800502e <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 8005ff2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005ff6:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ffa:	b10b      	cbz	r3, 8006000 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005ffc:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006000:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8006002:	4832      	ldr	r0, [pc, #200]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006004:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006006:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8006008:	7873      	ldrb	r3, [r6, #1]
 800600a:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 800600c:	f7ff fecc 	bl	8005da8 <MX_OSPI_ClockConfig>
 8006010:	b120      	cbz	r0, 800601c <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006012:	f06f 0003 	mvn.w	r0, #3
}
 8006016:	b01b      	add	sp, #108	; 0x6c
 8006018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800601c:	a90d      	add	r1, sp, #52	; 0x34
 800601e:	482b      	ldr	r0, [pc, #172]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 8006020:	f7ff fd94 	bl	8005b4c <MX_OSPI_NOR_Init>
 8006024:	4602      	mov	r2, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d1f3      	bne.n	8006012 <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800602a:	4601      	mov	r1, r0
 800602c:	4827      	ldr	r0, [pc, #156]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 800602e:	f7ff faa4 	bl	800557a <MX25LM51245G_ResetEnable>
 8006032:	4602      	mov	r2, r0
 8006034:	b110      	cbz	r0, 800603c <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006036:	f06f 0004 	mvn.w	r0, #4
 800603a:	e7ec      	b.n	8006016 <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800603c:	4601      	mov	r1, r0
 800603e:	4823      	ldr	r0, [pc, #140]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 8006040:	f7ff fad4 	bl	80055ec <MX25LM51245G_ResetMemory>
 8006044:	4602      	mov	r2, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	d1f5      	bne.n	8006036 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800604a:	2101      	movs	r1, #1
 800604c:	481f      	ldr	r0, [pc, #124]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 800604e:	f7ff fa94 	bl	800557a <MX25LM51245G_ResetEnable>
 8006052:	4602      	mov	r2, r0
 8006054:	2800      	cmp	r0, #0
 8006056:	d1ee      	bne.n	8006036 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006058:	2101      	movs	r1, #1
 800605a:	481c      	ldr	r0, [pc, #112]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 800605c:	f7ff fac6 	bl	80055ec <MX25LM51245G_ResetMemory>
 8006060:	2800      	cmp	r0, #0
 8006062:	d1e8      	bne.n	8006036 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8006064:	2201      	movs	r2, #1
 8006066:	4819      	ldr	r0, [pc, #100]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 8006068:	4611      	mov	r1, r2
 800606a:	f7ff fa86 	bl	800557a <MX25LM51245G_ResetEnable>
 800606e:	2800      	cmp	r0, #0
 8006070:	d1e1      	bne.n	8006036 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8006072:	2201      	movs	r2, #1
 8006074:	4815      	ldr	r0, [pc, #84]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 8006076:	4611      	mov	r1, r2
 8006078:	f7ff fab8 	bl	80055ec <MX25LM51245G_ResetMemory>
 800607c:	2800      	cmp	r0, #0
 800607e:	d1da      	bne.n	8006036 <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8006080:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8006082:	70a0      	strb	r0, [r4, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8006084:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8006086:	8023      	strh	r3, [r4, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8006088:	f000 f99a 	bl	80063c0 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800608c:	78a2      	ldrb	r2, [r4, #2]
 800608e:	7861      	ldrb	r1, [r4, #1]
 8006090:	480e      	ldr	r0, [pc, #56]	; (80060cc <BSP_OSPI_NOR_Init+0x2f0>)
 8006092:	f7fe ffe5 	bl	8005060 <MX25LM51245G_AutoPollingMemReady>
 8006096:	2800      	cmp	r0, #0
 8006098:	d1cd      	bne.n	8006036 <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800609a:	7872      	ldrb	r2, [r6, #1]
 800609c:	7831      	ldrb	r1, [r6, #0]
 800609e:	f7ff fe1b 	bl	8005cd8 <BSP_OSPI_NOR_ConfigFlash>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d1c7      	bne.n	8006036 <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 80060a6:	2000      	movs	r0, #0
 80060a8:	e7b5      	b.n	8006016 <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 80060aa:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80060ae:	e7b2      	b.n	8006016 <BSP_OSPI_NOR_Init+0x23a>
 80060b0:	24002284 	.word	0x24002284
 80060b4:	58024400 	.word	0x58024400
 80060b8:	58021800 	.word	0x58021800
 80060bc:	58020400 	.word	0x58020400
 80060c0:	58021400 	.word	0x58021400
 80060c4:	58020c00 	.word	0x58020c00
 80060c8:	58021000 	.word	0x58021000
 80060cc:	2400228c 	.word	0x2400228c

080060d0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	460c      	mov	r4, r1
 80060d6:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80060d8:	2800      	cmp	r0, #0
 80060da:	d163      	bne.n	80061a4 <BSP_TS_Init+0xd4>
 80060dc:	680b      	ldr	r3, [r1, #0]
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 80060e4:	d25e      	bcs.n	80061a4 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80060e6:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80060e8:	1e51      	subs	r1, r2, #1
 80060ea:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 80060ee:	d259      	bcs.n	80061a4 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80060f0:	4293      	cmp	r3, r2
 80060f2:	bf28      	it	cs
 80060f4:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80060f6:	68e2      	ldr	r2, [r4, #12]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d853      	bhi.n	80061a4 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80060fc:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80060fe:	4d2b      	ldr	r5, [pc, #172]	; (80061ac <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8006100:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006102:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 8006104:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006108:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 800610a:	4b29      	ldr	r3, [pc, #164]	; (80061b0 <BSP_TS_Init+0xe0>)
 800610c:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800610e:	4b29      	ldr	r3, [pc, #164]	; (80061b4 <BSP_TS_Init+0xe4>)
 8006110:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006112:	4b29      	ldr	r3, [pc, #164]	; (80061b8 <BSP_TS_Init+0xe8>)
 8006114:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <BSP_TS_Init+0xec>)
 8006118:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <BSP_TS_Init+0xf0>)
 800611c:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800611e:	f7fe fef1 	bl	8004f04 <FT5336_RegisterBusIO>
 8006122:	b128      	cbz	r0, 8006130 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 8006124:	f04f 35ff 	mov.w	r5, #4294967295
}
 8006128:	4628      	mov	r0, r5
 800612a:	b008      	add	sp, #32
 800612c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8006130:	a901      	add	r1, sp, #4
 8006132:	4628      	mov	r0, r5
 8006134:	f7fe fe4c 	bl	8004dd0 <FT5336_ReadID>
 8006138:	2800      	cmp	r0, #0
 800613a:	d1f3      	bne.n	8006124 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	2b51      	cmp	r3, #81	; 0x51
 8006140:	d1f0      	bne.n	8006124 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8006142:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8006144:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 8006146:	4f20      	ldr	r7, [pc, #128]	; (80061c8 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8006148:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80061d0 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 800614c:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800614e:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4798      	blx	r3
 8006156:	4605      	mov	r5, r0
 8006158:	2800      	cmp	r0, #0
 800615a:	d1e3      	bne.n	8006124 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800615c:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800615e:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8006160:	4e1a      	ldr	r6, [pc, #104]	; (80061cc <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006162:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8006164:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006172:	f8d8 3000 	ldr.w	r3, [r8]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	4798      	blx	r3
 800617a:	2800      	cmp	r0, #0
 800617c:	db0f      	blt.n	800619e <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800617e:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006180:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006182:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006184:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006186:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006188:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800618a:	68e3      	ldr	r3, [r4, #12]
 800618c:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800618e:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006190:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006192:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006194:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006196:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006198:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800619c:	e7c4      	b.n	8006128 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800619e:	f06f 0504 	mvn.w	r5, #4
 80061a2:	e7c1      	b.n	8006128 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 80061a4:	f06f 0501 	mvn.w	r5, #1
  return ret;
 80061a8:	e7be      	b.n	8006128 <BSP_TS_Init+0x58>
 80061aa:	bf00      	nop
 80061ac:	240022ec 	.word	0x240022ec
 80061b0:	080056f9 	.word	0x080056f9
 80061b4:	08005661 	.word	0x08005661
 80061b8:	080059dd 	.word	0x080059dd
 80061bc:	080059a9 	.word	0x080059a9
 80061c0:	08005a11 	.word	0x08005a11
 80061c4:	2400003c 	.word	0x2400003c
 80061c8:	24002314 	.word	0x24002314
 80061cc:	24002318 	.word	0x24002318
 80061d0:	24002340 	.word	0x24002340

080061d4 <BSP_TS_GetState>:
{
 80061d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80061d8:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 80061da:	2800      	cmp	r0, #0
 80061dc:	d151      	bne.n	8006282 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80061de:	4b2a      	ldr	r3, [pc, #168]	; (8006288 <BSP_TS_GetState+0xb4>)
 80061e0:	a901      	add	r1, sp, #4
 80061e2:	4a2a      	ldr	r2, [pc, #168]	; (800628c <BSP_TS_GetState+0xb8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6810      	ldr	r0, [r2, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	4798      	blx	r3
 80061ec:	2800      	cmp	r0, #0
 80061ee:	db45      	blt.n	800627c <BSP_TS_GetState+0xa8>
    else if(state.TouchDetected != 0U)
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <BSP_TS_GetState+0xbc>)
 80061f2:	9801      	ldr	r0, [sp, #4]
 80061f4:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80061f8:	6a1f      	ldr	r7, [r3, #32]
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d03a      	beq.n	8006274 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80061fe:	689e      	ldr	r6, [r3, #8]
 8006200:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006204:	0732      	lsls	r2, r6, #28
      y_oriented = state.TouchY;
 8006206:	e9dd e102 	ldrd	lr, r1, [sp, #8]
        x_oriented = state.TouchY;
 800620a:	bf4b      	itete	mi
 800620c:	460d      	movmi	r5, r1
      x_oriented = state.TouchX;
 800620e:	4675      	movpl	r5, lr
        y_oriented = state.TouchX;
 8006210:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 8006212:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006214:	f016 0f02 	tst.w	r6, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8006218:	bf1c      	itt	ne
 800621a:	f108 35ff 	addne.w	r5, r8, #4294967295
 800621e:	eba5 050e 	subne.w	r5, r5, lr
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006222:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8006226:	0776      	lsls	r6, r6, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006228:	681e      	ldr	r6, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800622a:	bf48      	it	mi
 800622c:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006230:	4375      	muls	r5, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006232:	6859      	ldr	r1, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006234:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006236:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006238:	68d8      	ldr	r0, [r3, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800623a:	fbb5 f5f8 	udiv	r5, r5, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800623e:	fbb2 f2fe 	udiv	r2, r2, lr
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006242:	4565      	cmp	r5, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006244:	6065      	str	r5, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006246:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006248:	bf8c      	ite	hi
 800624a:	eba5 060c 	subhi.w	r6, r5, ip
 800624e:	ebac 0605 	subls.w	r6, ip, r5
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006252:	42ba      	cmp	r2, r7
 8006254:	bf8c      	ite	hi
 8006256:	1bd1      	subhi	r1, r2, r7
 8006258:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800625a:	42b0      	cmp	r0, r6
 800625c:	d301      	bcc.n	8006262 <BSP_TS_GetState+0x8e>
 800625e:	4288      	cmp	r0, r1
 8006260:	d205      	bcs.n	800626e <BSP_TS_GetState+0x9a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006262:	619d      	str	r5, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006264:	621a      	str	r2, [r3, #32]
  int32_t ret = BSP_ERROR_NONE;
 8006266:	2000      	movs	r0, #0
}
 8006268:	b004      	add	sp, #16
 800626a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800626e:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8006272:	e7f8      	b.n	8006266 <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006274:	e9c4 0c00 	strd	r0, ip, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006278:	60a7      	str	r7, [r4, #8]
 800627a:	e7f5      	b.n	8006268 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800627c:	f06f 0004 	mvn.w	r0, #4
 8006280:	e7f2      	b.n	8006268 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006282:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006286:	e7ef      	b.n	8006268 <BSP_TS_GetState+0x94>
 8006288:	24002340 	.word	0x24002340
 800628c:	24002314 	.word	0x24002314
 8006290:	24002318 	.word	0x24002318

08006294 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006294:	4a22      	ldr	r2, [pc, #136]	; (8006320 <SystemInit+0x8c>)
 8006296:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800629a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800629e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062a2:	4a20      	ldr	r2, [pc, #128]	; (8006324 <SystemInit+0x90>)
 80062a4:	6813      	ldr	r3, [r2, #0]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d805      	bhi.n	80062ba <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	f023 030f 	bic.w	r3, r3, #15
 80062b4:	f043 0307 	orr.w	r3, r3, #7
 80062b8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <SystemInit+0x94>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80062c8:	4a18      	ldr	r2, [pc, #96]	; (800632c <SystemInit+0x98>)
 80062ca:	6819      	ldr	r1, [r3, #0]
 80062cc:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062ce:	4915      	ldr	r1, [pc, #84]	; (8006324 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 80062d0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062d2:	680a      	ldr	r2, [r1, #0]
 80062d4:	0712      	lsls	r2, r2, #28
 80062d6:	d505      	bpl.n	80062e4 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80062d8:	680a      	ldr	r2, [r1, #0]
 80062da:	f022 020f 	bic.w	r2, r2, #15
 80062de:	f042 0207 	orr.w	r2, r2, #7
 80062e2:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80062e4:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80062e6:	4912      	ldr	r1, [pc, #72]	; (8006330 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 80062e8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80062ea:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80062ec:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80062ee:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80062f0:	4910      	ldr	r1, [pc, #64]	; (8006334 <SystemInit+0xa0>)
 80062f2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80062f4:	4910      	ldr	r1, [pc, #64]	; (8006338 <SystemInit+0xa4>)
 80062f6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80062fa:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80062fe:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006300:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006308:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800630a:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800630c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <SystemInit+0xa8>)
 8006312:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006314:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006318:	4b01      	ldr	r3, [pc, #4]	; (8006320 <SystemInit+0x8c>)
 800631a:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	e000ed00 	.word	0xe000ed00
 8006324:	52002000 	.word	0x52002000
 8006328:	58024400 	.word	0x58024400
 800632c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006330:	02020200 	.word	0x02020200
 8006334:	01ff0000 	.word	0x01ff0000
 8006338:	01010280 	.word	0x01010280
 800633c:	52004000 	.word	0x52004000

08006340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006340:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006342:	2003      	movs	r0, #3
 8006344:	f000 f84e 	bl	80063e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006348:	f002 fa02 	bl	8008750 <HAL_RCC_GetSysClockFreq>
 800634c:	490f      	ldr	r1, [pc, #60]	; (800638c <HAL_Init+0x4c>)
 800634e:	4a10      	ldr	r2, [pc, #64]	; (8006390 <HAL_Init+0x50>)
 8006350:	698b      	ldr	r3, [r1, #24]
 8006352:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006356:	5cd3      	ldrb	r3, [r2, r3]
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800635e:	698b      	ldr	r3, [r1, #24]
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	5cd3      	ldrb	r3, [r2, r3]
 8006366:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <HAL_Init+0x54>)
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	fa20 f303 	lsr.w	r3, r0, r3
 8006370:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_Init+0x58>)
 8006374:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006376:	2000      	movs	r0, #0
 8006378:	f7fb fc12 	bl	8001ba0 <HAL_InitTick>
 800637c:	4604      	mov	r4, r0
 800637e:	b918      	cbnz	r0, 8006388 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006380:	f7fb f806 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006384:	4620      	mov	r0, r4
 8006386:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006388:	2401      	movs	r4, #1
 800638a:	e7fb      	b.n	8006384 <HAL_Init+0x44>
 800638c:	58024400 	.word	0x58024400
 8006390:	0801e610 	.word	0x0801e610
 8006394:	24000070 	.word	0x24000070
 8006398:	2400006c 	.word	0x2400006c

0800639c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800639c:	4a03      	ldr	r2, [pc, #12]	; (80063ac <HAL_IncTick+0x10>)
 800639e:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_IncTick+0x14>)
 80063a0:	6811      	ldr	r1, [r2, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	440b      	add	r3, r1
 80063a6:	6013      	str	r3, [r2, #0]
}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	240072f0 	.word	0x240072f0
 80063b0:	24000074 	.word	0x24000074

080063b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80063b4:	4b01      	ldr	r3, [pc, #4]	; (80063bc <HAL_GetTick+0x8>)
 80063b6:	6818      	ldr	r0, [r3, #0]
}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	240072f0 	.word	0x240072f0

080063c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80063c4:	f7ff fff6 	bl	80063b4 <HAL_GetTick>
 80063c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063ca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80063cc:	bf1e      	ittt	ne
 80063ce:	4b04      	ldrne	r3, [pc, #16]	; (80063e0 <HAL_Delay+0x20>)
 80063d0:	781b      	ldrbne	r3, [r3, #0]
 80063d2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063d4:	f7ff ffee 	bl	80063b4 <HAL_GetTick>
 80063d8:	1b43      	subs	r3, r0, r5
 80063da:	42a3      	cmp	r3, r4
 80063dc:	d3fa      	bcc.n	80063d4 <HAL_Delay+0x14>
  {
  }
}
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	24000074 	.word	0x24000074

080063e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063e4:	4907      	ldr	r1, [pc, #28]	; (8006404 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063e6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063e8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063f2:	0412      	lsls	r2, r2, #16
 80063f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006400:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006402:	4770      	bx	lr
 8006404:	e000ed00 	.word	0xe000ed00

08006408 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006408:	4b16      	ldr	r3, [pc, #88]	; (8006464 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800640a:	b530      	push	{r4, r5, lr}
 800640c:	68dc      	ldr	r4, [r3, #12]
 800640e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006412:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006416:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006418:	2d04      	cmp	r5, #4
 800641a:	bf28      	it	cs
 800641c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800641e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006424:	bf8c      	ite	hi
 8006426:	3c03      	subhi	r4, #3
 8006428:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800642a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800642e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006430:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006434:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006438:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800643c:	fa01 f104 	lsl.w	r1, r1, r4
 8006440:	ea41 0302 	orr.w	r3, r1, r2
 8006444:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006448:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800644a:	db06      	blt.n	800645a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800644c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006450:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006454:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006458:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800645a:	f000 000f 	and.w	r0, r0, #15
 800645e:	4a02      	ldr	r2, [pc, #8]	; (8006468 <HAL_NVIC_SetPriority+0x60>)
 8006460:	5413      	strb	r3, [r2, r0]
 8006462:	e7f9      	b.n	8006458 <HAL_NVIC_SetPriority+0x50>
 8006464:	e000ed00 	.word	0xe000ed00
 8006468:	e000ed14 	.word	0xe000ed14

0800646c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800646c:	2800      	cmp	r0, #0
 800646e:	db08      	blt.n	8006482 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006470:	2301      	movs	r3, #1
 8006472:	0942      	lsrs	r2, r0, #5
 8006474:	f000 001f 	and.w	r0, r0, #31
 8006478:	fa03 f000 	lsl.w	r0, r3, r0
 800647c:	4b01      	ldr	r3, [pc, #4]	; (8006484 <HAL_NVIC_EnableIRQ+0x18>)
 800647e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006482:	4770      	bx	lr
 8006484:	e000e100 	.word	0xe000e100

08006488 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006488:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800648c:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <HAL_MPU_Disable+0x18>)
 800648e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006496:	2200      	movs	r2, #0
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <HAL_MPU_Disable+0x1c>)
 800649a:	605a      	str	r2, [r3, #4]
}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000ed00 	.word	0xe000ed00
 80064a4:	e000ed90 	.word	0xe000ed90

080064a8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80064a8:	4a06      	ldr	r2, [pc, #24]	; (80064c4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80064aa:	f040 0001 	orr.w	r0, r0, #1
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <HAL_MPU_Enable+0x20>)
 80064b0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80064b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80064ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80064be:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80064c2:	4770      	bx	lr
 80064c4:	e000ed00 	.word	0xe000ed00
 80064c8:	e000ed90 	.word	0xe000ed90

080064cc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80064cc:	7843      	ldrb	r3, [r0, #1]
 80064ce:	4a12      	ldr	r2, [pc, #72]	; (8006518 <HAL_MPU_ConfigRegion+0x4c>)
{
 80064d0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80064d2:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 80064d4:	7801      	ldrb	r1, [r0, #0]
 80064d6:	b1d9      	cbz	r1, 8006510 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80064d8:	6843      	ldr	r3, [r0, #4]
 80064da:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80064dc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80064de:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80064e0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80064e2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80064e6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80064e8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80064ea:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80064ee:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80064f0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80064f4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80064f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80064fa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80064fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006500:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006502:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006506:	7a01      	ldrb	r1, [r0, #8]
 8006508:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800650c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800650e:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8006510:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8006512:	6111      	str	r1, [r2, #16]
}
 8006514:	e7fb      	b.n	800650e <HAL_MPU_ConfigRegion+0x42>
 8006516:	bf00      	nop
 8006518:	e000ed90 	.word	0xe000ed90

0800651c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800651c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800651e:	4604      	mov	r4, r0
 8006520:	b908      	cbnz	r0, 8006526 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8006522:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006524:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006526:	7f43      	ldrb	r3, [r0, #29]
 8006528:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800652c:	b913      	cbnz	r3, 8006534 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800652e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006530:	f7fa ff46 	bl	80013c0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006534:	2302      	movs	r3, #2
 8006536:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006538:	7923      	ldrb	r3, [r4, #4]
 800653a:	b9e3      	cbnz	r3, 8006576 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <HAL_CRC_Init+0x70>)
 8006540:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	f022 0218 	bic.w	r2, r2, #24
 8006548:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800654a:	7962      	ldrb	r2, [r4, #5]
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	b9d2      	cbnz	r2, 8006586 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006554:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006556:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	6961      	ldr	r1, [r4, #20]
 800655c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006560:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006562:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006564:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006570:	2301      	movs	r3, #1
 8006572:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006574:	e7d6      	b.n	8006524 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006576:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800657a:	4620      	mov	r0, r4
 800657c:	f000 f808 	bl	8006590 <HAL_CRCEx_Polynomial_Set>
 8006580:	2800      	cmp	r0, #0
 8006582:	d0e2      	beq.n	800654a <HAL_CRC_Init+0x2e>
 8006584:	e7cd      	b.n	8006522 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006586:	6922      	ldr	r2, [r4, #16]
 8006588:	e7e4      	b.n	8006554 <HAL_CRC_Init+0x38>
 800658a:	bf00      	nop
 800658c:	04c11db7 	.word	0x04c11db7

08006590 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006590:	231f      	movs	r3, #31
{
 8006592:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006594:	3b01      	subs	r3, #1
 8006596:	d306      	bcc.n	80065a6 <HAL_CRCEx_Polynomial_Set+0x16>
 8006598:	fa21 f403 	lsr.w	r4, r1, r3
 800659c:	07e4      	lsls	r4, r4, #31
 800659e:	d5f9      	bpl.n	8006594 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80065a0:	2a08      	cmp	r2, #8
 80065a2:	d014      	beq.n	80065ce <HAL_CRCEx_Polynomial_Set+0x3e>
 80065a4:	d802      	bhi.n	80065ac <HAL_CRCEx_Polynomial_Set+0x1c>
 80065a6:	b13a      	cbz	r2, 80065b8 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80065a8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80065aa:	e00d      	b.n	80065c8 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80065ac:	2a10      	cmp	r2, #16
 80065ae:	d00c      	beq.n	80065ca <HAL_CRCEx_Polynomial_Set+0x3a>
 80065b0:	2a18      	cmp	r2, #24
 80065b2:	d1f9      	bne.n	80065a8 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 80065b4:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80065b6:	d8f7      	bhi.n	80065a8 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80065b8:	6800      	ldr	r0, [r0, #0]
 80065ba:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80065bc:	6883      	ldr	r3, [r0, #8]
 80065be:	f023 0318 	bic.w	r3, r3, #24
 80065c2:	431a      	orrs	r2, r3
 80065c4:	6082      	str	r2, [r0, #8]
 80065c6:	2000      	movs	r0, #0
}
 80065c8:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80065ca:	2b07      	cmp	r3, #7
 80065cc:	e7f3      	b.n	80065b6 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80065ce:	2b0f      	cmp	r3, #15
 80065d0:	e7f1      	b.n	80065b6 <HAL_CRCEx_Polynomial_Set+0x26>

080065d2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80065d2:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80065d4:	4604      	mov	r4, r0
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d036      	beq.n	8006648 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80065da:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80065de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80065e2:	b91b      	cbnz	r3, 80065ec <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80065e4:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80065e8:	f7fa ff02 	bl	80013f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80065ec:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80065ee:	69e0      	ldr	r0, [r4, #28]
 80065f0:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80065f2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80065fa:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80065fc:	6819      	ldr	r1, [r3, #0]
 80065fe:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006602:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006606:	430a      	orrs	r2, r1
 8006608:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800660a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800660c:	68a2      	ldr	r2, [r4, #8]
 800660e:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8006612:	4302      	orrs	r2, r0
 8006614:	f021 0101 	bic.w	r1, r1, #1
 8006618:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800661a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800661c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800661e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006620:	0c12      	lsrs	r2, r2, #16
 8006622:	0412      	lsls	r2, r2, #16
 8006624:	430a      	orrs	r2, r1
 8006626:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800662a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800662e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006632:	0552      	lsls	r2, r2, #21
 8006634:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006638:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800663a:	430a      	orrs	r2, r1
 800663c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800663e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006640:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006642:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8006646:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006648:	2001      	movs	r0, #1
 800664a:	e7fc      	b.n	8006646 <HAL_DMA2D_Init+0x74>

0800664c <HAL_DMA2D_LineEventCallback>:
 800664c:	4770      	bx	lr

0800664e <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800664e:	4770      	bx	lr

08006650 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006650:	6803      	ldr	r3, [r0, #0]
{
 8006652:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006654:	685e      	ldr	r6, [r3, #4]
{
 8006656:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006658:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800665a:	07f2      	lsls	r2, r6, #31
 800665c:	d514      	bpl.n	8006688 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800665e:	05e9      	lsls	r1, r5, #23
 8006660:	d512      	bpl.n	8006688 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006668:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800666a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800666c:	f042 0201 	orr.w	r2, r2, #1
 8006670:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006672:	2201      	movs	r2, #1
 8006674:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006676:	2304      	movs	r3, #4
 8006678:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800667c:	2300      	movs	r3, #0
 800667e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006682:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006684:	b103      	cbz	r3, 8006688 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006686:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006688:	06b2      	lsls	r2, r6, #26
 800668a:	d516      	bpl.n	80066ba <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800668c:	04ab      	lsls	r3, r5, #18
 800668e:	d514      	bpl.n	80066ba <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006698:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800669a:	2220      	movs	r2, #32
 800669c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800669e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066a6:	2304      	movs	r3, #4
 80066a8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066ac:	2300      	movs	r3, #0
 80066ae:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80066b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b4:	b10b      	cbz	r3, 80066ba <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80066b6:	4620      	mov	r0, r4
 80066b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80066ba:	0730      	lsls	r0, r6, #28
 80066bc:	d516      	bpl.n	80066ec <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80066be:	0529      	lsls	r1, r5, #20
 80066c0:	d514      	bpl.n	80066ec <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80066cc:	2208      	movs	r2, #8
 80066ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80066d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066d8:	2304      	movs	r3, #4
 80066da:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066de:	2300      	movs	r3, #0
 80066e0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80066e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e6:	b10b      	cbz	r3, 80066ec <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80066e8:	4620      	mov	r0, r4
 80066ea:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80066ec:	0772      	lsls	r2, r6, #29
 80066ee:	d50b      	bpl.n	8006708 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80066f0:	056b      	lsls	r3, r5, #21
 80066f2:	d509      	bpl.n	8006708 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80066f4:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80066f6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006700:	2204      	movs	r2, #4
 8006702:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006704:	f7ff ffa2 	bl	800664c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006708:	07b0      	lsls	r0, r6, #30
 800670a:	d514      	bpl.n	8006736 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800670c:	05a9      	lsls	r1, r5, #22
 800670e:	d512      	bpl.n	8006736 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006718:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800671a:	2202      	movs	r2, #2
 800671c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800671e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006720:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006722:	2301      	movs	r3, #1
 8006724:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006728:	2300      	movs	r3, #0
 800672a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800672e:	6a23      	ldr	r3, [r4, #32]
 8006730:	b10b      	cbz	r3, 8006736 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006732:	4620      	mov	r0, r4
 8006734:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006736:	06f2      	lsls	r2, r6, #27
 8006738:	d513      	bpl.n	8006762 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800673a:	04eb      	lsls	r3, r5, #19
 800673c:	d511      	bpl.n	8006762 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800673e:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006740:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006748:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800674a:	2210      	movs	r2, #16
 800674c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800674e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006750:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006752:	2301      	movs	r3, #1
 8006754:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8006758:	2300      	movs	r3, #0
 800675a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800675e:	f7ff ff76 	bl	800664e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006762:	bd70      	pop	{r4, r5, r6, pc}

08006764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006768:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800676a:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 800676e:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 800692c <HAL_GPIO_Init+0x1c8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006772:	680a      	ldr	r2, [r1, #0]
 8006774:	fa32 f403 	lsrs.w	r4, r2, r3
 8006778:	d102      	bne.n	8006780 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800677a:	b003      	add	sp, #12
 800677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006780:	f04f 0c01 	mov.w	ip, #1
 8006784:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8006788:	ea1c 0202 	ands.w	r2, ip, r2
 800678c:	f000 80b7 	beq.w	80068fe <HAL_GPIO_Init+0x19a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006790:	684d      	ldr	r5, [r1, #4]
 8006792:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006796:	2603      	movs	r6, #3
 8006798:	f005 0403 	and.w	r4, r5, #3
 800679c:	fa06 f608 	lsl.w	r6, r6, r8
 80067a0:	1e67      	subs	r7, r4, #1
 80067a2:	43f6      	mvns	r6, r6
 80067a4:	2f01      	cmp	r7, #1
 80067a6:	d834      	bhi.n	8006812 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80067a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067aa:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067ae:	68cf      	ldr	r7, [r1, #12]
 80067b0:	fa07 f708 	lsl.w	r7, r7, r8
 80067b4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80067b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80067ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067bc:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067c0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80067c4:	409f      	lsls	r7, r3
 80067c6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80067ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80067cc:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067ce:	2c02      	cmp	r4, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067d0:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067d4:	688f      	ldr	r7, [r1, #8]
 80067d6:	fa07 f708 	lsl.w	r7, r7, r8
 80067da:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 80067de:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067e0:	d119      	bne.n	8006816 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80067e2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067e6:	f003 0b07 	and.w	fp, r3, #7
 80067ea:	f04f 0c0f 	mov.w	ip, #15
 80067ee:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80067f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80067f6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067fa:	fa0c fc0b 	lsl.w	ip, ip, fp
 80067fe:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006802:	690f      	ldr	r7, [r1, #16]
 8006804:	fa07 f70b 	lsl.w	r7, r7, fp
 8006808:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800680c:	f8ca 7020 	str.w	r7, [sl, #32]
 8006810:	e001      	b.n	8006816 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006812:	2c03      	cmp	r4, #3
 8006814:	d1da      	bne.n	80067cc <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8006816:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006818:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800681c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006820:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006824:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8006828:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800682a:	d068      	beq.n	80068fe <HAL_GPIO_Init+0x19a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800682c:	4e3d      	ldr	r6, [pc, #244]	; (8006924 <HAL_GPIO_Init+0x1c0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800682e:	f003 0703 	and.w	r7, r3, #3
 8006832:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006836:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800683a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800683c:	f044 0402 	orr.w	r4, r4, #2
 8006840:	f8c6 40f4 	str.w	r4, [r6, #244]	; 0xf4
 8006844:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
 8006848:	f023 0603 	bic.w	r6, r3, #3
 800684c:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
 8006850:	f004 0402 	and.w	r4, r4, #2
 8006854:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006858:	9401      	str	r4, [sp, #4]
 800685a:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800685c:	fa0c f407 	lsl.w	r4, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8006860:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006864:	ea28 0c04 	bic.w	ip, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006868:	4c2f      	ldr	r4, [pc, #188]	; (8006928 <HAL_GPIO_Init+0x1c4>)
 800686a:	42a0      	cmp	r0, r4
 800686c:	d049      	beq.n	8006902 <HAL_GPIO_Init+0x19e>
 800686e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006872:	42a0      	cmp	r0, r4
 8006874:	d047      	beq.n	8006906 <HAL_GPIO_Init+0x1a2>
 8006876:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800687a:	42a0      	cmp	r0, r4
 800687c:	d045      	beq.n	800690a <HAL_GPIO_Init+0x1a6>
 800687e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006882:	42a0      	cmp	r0, r4
 8006884:	d043      	beq.n	800690e <HAL_GPIO_Init+0x1aa>
 8006886:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800688a:	42a0      	cmp	r0, r4
 800688c:	d041      	beq.n	8006912 <HAL_GPIO_Init+0x1ae>
 800688e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006892:	42a0      	cmp	r0, r4
 8006894:	d03f      	beq.n	8006916 <HAL_GPIO_Init+0x1b2>
 8006896:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800689a:	42a0      	cmp	r0, r4
 800689c:	d03d      	beq.n	800691a <HAL_GPIO_Init+0x1b6>
 800689e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068a2:	42a0      	cmp	r0, r4
 80068a4:	d03b      	beq.n	800691e <HAL_GPIO_Init+0x1ba>
 80068a6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80068aa:	42a0      	cmp	r0, r4
 80068ac:	bf0c      	ite	eq
 80068ae:	2409      	moveq	r4, #9
 80068b0:	240a      	movne	r4, #10
 80068b2:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068b4:	02ef      	lsls	r7, r5, #11
        EXTI->RTSR1 = temp;
 80068b6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068ba:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068be:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 80068c0:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI->RTSR1;
 80068c4:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 80068c8:	bf54      	ite	pl
 80068ca:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80068cc:	4314      	orrmi	r4, r2
        EXTI->RTSR1 = temp;
 80068ce:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 80068d0:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068d2:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 80068d4:	bf54      	ite	pl
 80068d6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80068d8:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068da:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80068dc:	f8c9 4004 	str.w	r4, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80068e0:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 80068e4:	bf54      	ite	pl
 80068e6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80068e8:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068ea:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80068ec:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->IMR1;
 80068f0:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80068f4:	bf54      	ite	pl
 80068f6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80068f8:	4314      	orrmi	r4, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80068fa:	f8ce 4000 	str.w	r4, [lr]
    position++;
 80068fe:	3301      	adds	r3, #1
 8006900:	e737      	b.n	8006772 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006902:	2400      	movs	r4, #0
 8006904:	e7d5      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 8006906:	2401      	movs	r4, #1
 8006908:	e7d3      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 800690a:	2402      	movs	r4, #2
 800690c:	e7d1      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 800690e:	2403      	movs	r4, #3
 8006910:	e7cf      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 8006912:	2404      	movs	r4, #4
 8006914:	e7cd      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 8006916:	2405      	movs	r4, #5
 8006918:	e7cb      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 800691a:	2406      	movs	r4, #6
 800691c:	e7c9      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 800691e:	2407      	movs	r4, #7
 8006920:	e7c7      	b.n	80068b2 <HAL_GPIO_Init+0x14e>
 8006922:	bf00      	nop
 8006924:	58024400 	.word	0x58024400
 8006928:	58020000 	.word	0x58020000
 800692c:	58000080 	.word	0x58000080

08006930 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006934:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006936:	4d49      	ldr	r5, [pc, #292]	; (8006a5c <HAL_GPIO_DeInit+0x12c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006938:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006a64 <HAL_GPIO_DeInit+0x134>
 800693c:	f8df a128 	ldr.w	sl, [pc, #296]	; 8006a68 <HAL_GPIO_DeInit+0x138>
 8006940:	f8df b128 	ldr.w	fp, [pc, #296]	; 8006a6c <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 8006944:	fa31 f302 	lsrs.w	r3, r1, r2
 8006948:	d101      	bne.n	800694e <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800694e:	2301      	movs	r3, #1
 8006950:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 8006954:	ea1e 0701 	ands.w	r7, lr, r1
 8006958:	d06e      	beq.n	8006a38 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800695a:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800695e:	f002 0c03 	and.w	ip, r2, #3
 8006962:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006964:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <HAL_GPIO_DeInit+0x130>)
 8006966:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800696a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800696e:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006970:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006974:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006978:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800697c:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006980:	d05c      	beq.n	8006a3c <HAL_GPIO_DeInit+0x10c>
 8006982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006986:	4298      	cmp	r0, r3
 8006988:	d05a      	beq.n	8006a40 <HAL_GPIO_DeInit+0x110>
 800698a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800698e:	4298      	cmp	r0, r3
 8006990:	d058      	beq.n	8006a44 <HAL_GPIO_DeInit+0x114>
 8006992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006996:	4298      	cmp	r0, r3
 8006998:	d056      	beq.n	8006a48 <HAL_GPIO_DeInit+0x118>
 800699a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800699e:	4298      	cmp	r0, r3
 80069a0:	d054      	beq.n	8006a4c <HAL_GPIO_DeInit+0x11c>
 80069a2:	4548      	cmp	r0, r9
 80069a4:	d054      	beq.n	8006a50 <HAL_GPIO_DeInit+0x120>
 80069a6:	4550      	cmp	r0, sl
 80069a8:	d054      	beq.n	8006a54 <HAL_GPIO_DeInit+0x124>
 80069aa:	4558      	cmp	r0, fp
 80069ac:	d054      	beq.n	8006a58 <HAL_GPIO_DeInit+0x128>
 80069ae:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80069b2:	4298      	cmp	r0, r3
 80069b4:	bf0c      	ite	eq
 80069b6:	2309      	moveq	r3, #9
 80069b8:	230a      	movne	r3, #10
 80069ba:	fa03 f30c 	lsl.w	r3, r3, ip
 80069be:	4543      	cmp	r3, r8
 80069c0:	d118      	bne.n	80069f4 <HAL_GPIO_DeInit+0xc4>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	ea23 0307 	bic.w	r3, r3, r7
 80069c8:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80069ca:	686b      	ldr	r3, [r5, #4]
 80069cc:	ea23 0307 	bic.w	r3, r3, r7
 80069d0:	606b      	str	r3, [r5, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 80069d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80069da:	ea2c 0c07 	bic.w	ip, ip, r7
 80069de:	f8c3 c004 	str.w	ip, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80069e2:	f8d3 c000 	ldr.w	ip, [r3]
 80069e6:	ea2c 0707 	bic.w	r7, ip, r7
 80069ea:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	ea23 0606 	bic.w	r6, r3, r6
 80069f2:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80069f4:	2603      	movs	r6, #3
 80069f6:	0053      	lsls	r3, r2, #1
 80069f8:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80069fa:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80069fe:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a02:	270f      	movs	r7, #15
 8006a04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a08:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a0a:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a0e:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a10:	fa22 f406 	lsr.w	r4, r2, r6
 8006a14:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006a18:	6a26      	ldr	r6, [r4, #32]
 8006a1a:	ea26 0707 	bic.w	r7, r6, r7
 8006a1e:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a20:	68c4      	ldr	r4, [r0, #12]
 8006a22:	ea24 0403 	bic.w	r4, r4, r3
 8006a26:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a28:	6844      	ldr	r4, [r0, #4]
 8006a2a:	ea24 040e 	bic.w	r4, r4, lr
 8006a2e:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a30:	6884      	ldr	r4, [r0, #8]
 8006a32:	ea24 0303 	bic.w	r3, r4, r3
 8006a36:	6083      	str	r3, [r0, #8]
    position++;
 8006a38:	3201      	adds	r2, #1
 8006a3a:	e783      	b.n	8006944 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e7bc      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e7ba      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e7b8      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e7b6      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	e7b4      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a50:	2305      	movs	r3, #5
 8006a52:	e7b2      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a54:	2306      	movs	r3, #6
 8006a56:	e7b0      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a58:	2307      	movs	r3, #7
 8006a5a:	e7ae      	b.n	80069ba <HAL_GPIO_DeInit+0x8a>
 8006a5c:	58000080 	.word	0x58000080
 8006a60:	58020000 	.word	0x58020000
 8006a64:	58021400 	.word	0x58021400
 8006a68:	58021800 	.word	0x58021800
 8006a6c:	58021c00 	.word	0x58021c00

08006a70 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006a70:	6903      	ldr	r3, [r0, #16]
 8006a72:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006a74:	bf14      	ite	ne
 8006a76:	2001      	movne	r0, #1
 8006a78:	2000      	moveq	r0, #0
 8006a7a:	4770      	bx	lr

08006a7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a7c:	b10a      	cbz	r2, 8006a82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a7e:	6181      	str	r1, [r0, #24]
  }
}
 8006a80:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a82:	0409      	lsls	r1, r1, #16
 8006a84:	e7fb      	b.n	8006a7e <HAL_GPIO_WritePin+0x2>

08006a86 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a86:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a88:	ea01 0203 	and.w	r2, r1, r3
 8006a8c:	ea21 0103 	bic.w	r1, r1, r3
 8006a90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a94:	6181      	str	r1, [r0, #24]
}
 8006a96:	4770      	bx	lr

08006a98 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a98:	6803      	ldr	r3, [r0, #0]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	0791      	lsls	r1, r2, #30
 8006a9e:	d501      	bpl.n	8006aa4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	07d2      	lsls	r2, r2, #31
 8006aa8:	d403      	bmi.n	8006ab2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006aaa:	699a      	ldr	r2, [r3, #24]
 8006aac:	f042 0201 	orr.w	r2, r2, #1
 8006ab0:	619a      	str	r2, [r3, #24]
  }
}
 8006ab2:	4770      	bx	lr

08006ab4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ab4:	b530      	push	{r4, r5, lr}
 8006ab6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ab8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006abc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006abe:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ac0:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ac6:	4a05      	ldr	r2, [pc, #20]	; (8006adc <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ac8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006aca:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ad2:	ea20 0002 	bic.w	r0, r0, r2
 8006ad6:	4303      	orrs	r3, r0
 8006ad8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ada:	bd30      	pop	{r4, r5, pc}
 8006adc:	03ff63ff 	.word	0x03ff63ff

08006ae0 <I2C_IsErrorOccurred>:
{
 8006ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ae4:	6803      	ldr	r3, [r0, #0]
{
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4688      	mov	r8, r1
 8006aea:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8006aec:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006aee:	f015 0510 	ands.w	r5, r5, #16
 8006af2:	d079      	beq.n	8006be8 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af4:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006af6:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8006af8:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006afc:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	0695      	lsls	r5, r2, #26
 8006b04:	d436      	bmi.n	8006b74 <I2C_IsErrorOccurred+0x94>
 8006b06:	b10e      	cbz	r6, 8006b0c <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8006b08:	2504      	movs	r5, #4
 8006b0a:	e039      	b.n	8006b80 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006b0c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006b10:	d0f6      	beq.n	8006b00 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b12:	f7ff fc4f 	bl	80063b4 <HAL_GetTick>
 8006b16:	1bc0      	subs	r0, r0, r7
 8006b18:	4540      	cmp	r0, r8
 8006b1a:	d802      	bhi.n	8006b22 <I2C_IsErrorOccurred+0x42>
 8006b1c:	f1b8 0f00 	cmp.w	r8, #0
 8006b20:	d1ed      	bne.n	8006afe <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8006b26:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b2a:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8006b2c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b2e:	0400      	lsls	r0, r0, #16
 8006b30:	d50a      	bpl.n	8006b48 <I2C_IsErrorOccurred+0x68>
 8006b32:	0449      	lsls	r1, r1, #17
 8006b34:	d408      	bmi.n	8006b48 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8006b36:	2a20      	cmp	r2, #32
 8006b38:	d006      	beq.n	8006b48 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b40:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006b42:	f7ff fc37 	bl	80063b4 <HAL_GetTick>
 8006b46:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	699d      	ldr	r5, [r3, #24]
 8006b4c:	f015 0520 	ands.w	r5, r5, #32
 8006b50:	d1d5      	bne.n	8006afe <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b52:	f7ff fc2f 	bl	80063b4 <HAL_GetTick>
 8006b56:	1bc0      	subs	r0, r0, r7
 8006b58:	2819      	cmp	r0, #25
 8006b5a:	d9f5      	bls.n	8006b48 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8006b5e:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8006b60:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b64:	f043 0320 	orr.w	r3, r3, #32
 8006b68:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006b6a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8006b72:	e7e9      	b.n	8006b48 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	d1c7      	bne.n	8006b08 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b78:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8006b7a:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8006b7c:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7e:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b84:	05d0      	lsls	r0, r2, #23
 8006b86:	d505      	bpl.n	8006b94 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b88:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8006b8c:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8006b90:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b92:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b94:	0551      	lsls	r1, r2, #21
 8006b96:	d505      	bpl.n	8006ba4 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006b9c:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8006ba0:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ba2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ba4:	0592      	lsls	r2, r2, #22
 8006ba6:	d521      	bpl.n	8006bec <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006bac:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bb0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006bb2:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006bb4:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8006bb6:	f7ff ff6f 	bl	8006a98 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	6853      	ldr	r3, [r2, #4]
 8006bbe:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006bc2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006bc6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006bca:	f023 0301 	bic.w	r3, r3, #1
 8006bce:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006bd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006bd2:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd4:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8006bd6:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006be2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006be6:	e003      	b.n	8006bf0 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8006be8:	462e      	mov	r6, r5
 8006bea:	e7c9      	b.n	8006b80 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8006bec:	2e00      	cmp	r6, #0
 8006bee:	d1e0      	bne.n	8006bb2 <I2C_IsErrorOccurred+0xd2>
}
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006bf6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006bf6:	b570      	push	{r4, r5, r6, lr}
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	079b      	lsls	r3, r3, #30
 8006c04:	d501      	bpl.n	8006c0a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8006c06:	2000      	movs	r0, #0
}
 8006c08:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c0a:	4632      	mov	r2, r6
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff ff66 	bl	8006ae0 <I2C_IsErrorOccurred>
 8006c14:	b9a0      	cbnz	r0, 8006c40 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006c16:	1c6a      	adds	r2, r5, #1
 8006c18:	d0f1      	beq.n	8006bfe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1a:	f7ff fbcb 	bl	80063b4 <HAL_GetTick>
 8006c1e:	1b80      	subs	r0, r0, r6
 8006c20:	42a8      	cmp	r0, r5
 8006c22:	d801      	bhi.n	8006c28 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	d1ea      	bne.n	8006bfe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c2a:	f043 0320 	orr.w	r3, r3, #32
 8006c2e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c30:	2320      	movs	r3, #32
 8006c32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006c3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006c40:	2001      	movs	r0, #1
 8006c42:	e7e1      	b.n	8006c08 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08006c44 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	460d      	mov	r5, r1
 8006c4a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	069b      	lsls	r3, r3, #26
 8006c52:	d501      	bpl.n	8006c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006c54:	2000      	movs	r0, #0
}
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c58:	4632      	mov	r2, r6
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f7ff ff3f 	bl	8006ae0 <I2C_IsErrorOccurred>
 8006c62:	b990      	cbnz	r0, 8006c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c64:	f7ff fba6 	bl	80063b4 <HAL_GetTick>
 8006c68:	1b80      	subs	r0, r0, r6
 8006c6a:	42a8      	cmp	r0, r5
 8006c6c:	d801      	bhi.n	8006c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	d1ec      	bne.n	8006c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c7a:	2320      	movs	r3, #32
 8006c7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006c86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e7e3      	b.n	8006c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08006c8e <I2C_WaitOnFlagUntilTimeout>:
{
 8006c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c92:	9f06      	ldr	r7, [sp, #24]
 8006c94:	4604      	mov	r4, r0
 8006c96:	4688      	mov	r8, r1
 8006c98:	4616      	mov	r6, r2
 8006c9a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	6993      	ldr	r3, [r2, #24]
 8006ca0:	ea38 0303 	bics.w	r3, r8, r3
 8006ca4:	bf0c      	ite	eq
 8006ca6:	2301      	moveq	r3, #1
 8006ca8:	2300      	movne	r3, #0
 8006caa:	42b3      	cmp	r3, r6
 8006cac:	d001      	beq.n	8006cb2 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e015      	b.n	8006cde <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	1c6b      	adds	r3, r5, #1
 8006cb4:	d0f3      	beq.n	8006c9e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb6:	f7ff fb7d 	bl	80063b4 <HAL_GetTick>
 8006cba:	1bc0      	subs	r0, r0, r7
 8006cbc:	42a8      	cmp	r0, r5
 8006cbe:	d801      	bhi.n	8006cc4 <I2C_WaitOnFlagUntilTimeout+0x36>
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	d1eb      	bne.n	8006c9c <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006cc6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cc8:	f043 0320 	orr.w	r3, r3, #32
 8006ccc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	2320      	movs	r3, #32
 8006cd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006cda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006ce4 <I2C_RequestMemoryWrite>:
{
 8006ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006ce8:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <I2C_RequestMemoryWrite+0x68>)
{
 8006cec:	4605      	mov	r5, r0
 8006cee:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	b2f2      	uxtb	r2, r6
 8006cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8006cf8:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006cfc:	f7ff feda 	bl	8006ab4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d00:	4628      	mov	r0, r5
 8006d02:	4642      	mov	r2, r8
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7ff ff76 	bl	8006bf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d0a:	b118      	cbz	r0, 8006d14 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8006d0c:	2001      	movs	r0, #1
}
 8006d0e:	b002      	add	sp, #8
 8006d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d14:	2e01      	cmp	r6, #1
 8006d16:	682b      	ldr	r3, [r5, #0]
 8006d18:	d10d      	bne.n	8006d36 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d1a:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d22:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d24:	463b      	mov	r3, r7
 8006d26:	f8cd 8000 	str.w	r8, [sp]
 8006d2a:	f7ff ffb0 	bl	8006c8e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006d2e:	3800      	subs	r0, #0
 8006d30:	bf18      	it	ne
 8006d32:	2001      	movne	r0, #1
 8006d34:	e7eb      	b.n	8006d0e <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d36:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d38:	4639      	mov	r1, r7
 8006d3a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d3e:	4642      	mov	r2, r8
 8006d40:	f7ff ff59 	bl	8006bf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d1e1      	bne.n	8006d0c <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	e7e6      	b.n	8006d1a <I2C_RequestMemoryWrite+0x36>
 8006d4c:	80002000 	.word	0x80002000

08006d50 <I2C_RequestMemoryRead>:
{
 8006d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d54:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d56:	4b18      	ldr	r3, [pc, #96]	; (8006db8 <I2C_RequestMemoryRead+0x68>)
{
 8006d58:	4605      	mov	r5, r0
 8006d5a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	b2f2      	uxtb	r2, r6
 8006d60:	2300      	movs	r3, #0
{
 8006d62:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d66:	f7ff fea5 	bl	8006ab4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7ff ff41 	bl	8006bf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d74:	b118      	cbz	r0, 8006d7e <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8006d76:	2001      	movs	r0, #1
}
 8006d78:	b002      	add	sp, #8
 8006d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d7e:	2e01      	cmp	r6, #1
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	d10d      	bne.n	8006da0 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d84:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d86:	2200      	movs	r2, #0
 8006d88:	2140      	movs	r1, #64	; 0x40
 8006d8a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d8c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8e:	463b      	mov	r3, r7
 8006d90:	f8cd 8000 	str.w	r8, [sp]
 8006d94:	f7ff ff7b 	bl	8006c8e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006d98:	3800      	subs	r0, #0
 8006d9a:	bf18      	it	ne
 8006d9c:	2001      	movne	r0, #1
 8006d9e:	e7eb      	b.n	8006d78 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006da0:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da2:	4639      	mov	r1, r7
 8006da4:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006da6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da8:	4642      	mov	r2, r8
 8006daa:	f7ff ff24 	bl	8006bf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1e1      	bne.n	8006d76 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	e7e6      	b.n	8006d84 <I2C_RequestMemoryRead+0x34>
 8006db6:	bf00      	nop
 8006db8:	80002000 	.word	0x80002000

08006dbc <HAL_I2C_MspInit>:
}
 8006dbc:	4770      	bx	lr

08006dbe <HAL_I2C_Init>:
{
 8006dbe:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d04a      	beq.n	8006e5c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006dca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006dce:	b91b      	cbnz	r3, 8006dd8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8006dd0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006dd4:	f7ff fff2 	bl	8006dbc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dd8:	2324      	movs	r3, #36	; 0x24
 8006dda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006de8:	6862      	ldr	r2, [r4, #4]
 8006dea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006dee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006df6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006df8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006dfc:	2901      	cmp	r1, #1
 8006dfe:	d124      	bne.n	8006e4a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e04:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e06:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e08:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e0a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e12:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e1a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e1c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006e20:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e22:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006e28:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e2a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006e3a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e3c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e42:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e44:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006e48:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e4e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e50:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e52:	d1d8      	bne.n	8006e06 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	e7d4      	b.n	8006e06 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	e7f3      	b.n	8006e48 <HAL_I2C_Init+0x8a>

08006e60 <HAL_I2C_MspDeInit>:
 8006e60:	4770      	bx	lr

08006e62 <HAL_I2C_DeInit>:
{
 8006e62:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006e64:	4604      	mov	r4, r0
 8006e66:	b198      	cbz	r0, 8006e90 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8006e68:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e6a:	2324      	movs	r3, #36	; 0x24
 8006e6c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006e70:	6813      	ldr	r3, [r2, #0]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006e78:	f7ff fff2 	bl	8006e60 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8006e80:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8006e84:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e88:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006e8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006e90:	2001      	movs	r0, #1
 8006e92:	e7fc      	b.n	8006e8e <HAL_I2C_DeInit+0x2c>

08006e94 <HAL_I2C_Mem_Write>:
{
 8006e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	469b      	mov	fp, r3
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460f      	mov	r7, r1
 8006ea0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006ea4:	4692      	mov	sl, r2
 8006ea6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8006eaa:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	f040 80a3 	bne.w	8006ffc <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8006eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eb8:	b10b      	cbz	r3, 8006ebe <HAL_I2C_Mem_Write+0x2a>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	b933      	cbnz	r3, 8006ecc <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006ec4:	2001      	movs	r0, #1
}
 8006ec6:	b005      	add	sp, #20
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006ecc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	f000 8093 	beq.w	8006ffc <HAL_I2C_Mem_Write+0x168>
 8006ed6:	2501      	movs	r5, #1
 8006ed8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006edc:	f7ff fa6a 	bl	80063b4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ee0:	2319      	movs	r3, #25
 8006ee2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8006ee4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7ff fece 	bl	8006c8e <I2C_WaitOnFlagUntilTimeout>
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ef8:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8006efa:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006efc:	4652      	mov	r2, sl
 8006efe:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f0c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f0e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8006f10:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f12:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f14:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8006f18:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f1a:	465b      	mov	r3, fp
 8006f1c:	f7ff fee2 	bl	8006ce4 <I2C_RequestMemoryWrite>
 8006f20:	b110      	cbz	r0, 8006f28 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8006f22:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006f26:	e7cd      	b.n	8006ec4 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2bff      	cmp	r3, #255	; 0xff
 8006f2e:	d955      	bls.n	8006fdc <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f30:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f36:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f38:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f7ff fdb9 	bl	8006ab4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f42:	4632      	mov	r2, r6
 8006f44:	4649      	mov	r1, r9
 8006f46:	4620      	mov	r0, r4
 8006f48:	f7ff fe55 	bl	8006bf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1b9      	bne.n	8006ec4 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006f58:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006f5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006f5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006f5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006f60:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006f62:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006f64:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006f66:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006f68:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006f6c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	b1ab      	cbz	r3, 8006f9e <HAL_I2C_Mem_Write+0x10a>
 8006f72:	b9a2      	cbnz	r2, 8006f9e <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f74:	464b      	mov	r3, r9
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	4620      	mov	r0, r4
 8006f7a:	9600      	str	r6, [sp, #0]
 8006f7c:	f7ff fe87 	bl	8006c8e <I2C_WaitOnFlagUntilTimeout>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d19f      	bne.n	8006ec4 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2bff      	cmp	r3, #255	; 0xff
 8006f8a:	d92f      	bls.n	8006fec <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f8c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f92:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f96:	4639      	mov	r1, r7
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f7ff fd8b 	bl	8006ab4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006f9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1cd      	bne.n	8006f42 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fa6:	4632      	mov	r2, r6
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4620      	mov	r0, r4
 8006fac:	f7ff fe4a 	bl	8006c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d187      	bne.n	8006ec4 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	2120      	movs	r1, #32
 8006fb8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006fc0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006fc4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006fc8:	f022 0201 	bic.w	r2, r2, #1
 8006fcc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006fd2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fd6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006fda:	e774      	b.n	8006ec6 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8006fdc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fe2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	e7a6      	b.n	8006f3a <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8006fec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ff2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	e7cc      	b.n	8006f96 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	e762      	b.n	8006ec6 <HAL_I2C_Mem_Write+0x32>

08007000 <HAL_I2C_Mem_Read>:
{
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	b085      	sub	sp, #20
 8007006:	469b      	mov	fp, r3
 8007008:	4604      	mov	r4, r0
 800700a:	460f      	mov	r7, r1
 800700c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8007010:	4692      	mov	sl, r2
 8007012:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8007016:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007018:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800701c:	2b20      	cmp	r3, #32
 800701e:	f040 80a7 	bne.w	8007170 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8007022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007024:	b10b      	cbz	r3, 800702a <HAL_I2C_Mem_Read+0x2a>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	b933      	cbnz	r3, 8007038 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800702a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800702e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007030:	2001      	movs	r0, #1
}
 8007032:	b005      	add	sp, #20
 8007034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007038:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800703c:	2b01      	cmp	r3, #1
 800703e:	f000 8097 	beq.w	8007170 <HAL_I2C_Mem_Read+0x170>
 8007042:	2501      	movs	r5, #1
 8007044:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007048:	f7ff f9b4 	bl	80063b4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800704c:	2319      	movs	r3, #25
 800704e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007050:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007052:	462a      	mov	r2, r5
 8007054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007058:	4620      	mov	r0, r4
 800705a:	f7ff fe18 	bl	8006c8e <I2C_WaitOnFlagUntilTimeout>
 800705e:	4680      	mov	r8, r0
 8007060:	2800      	cmp	r0, #0
 8007062:	d1e5      	bne.n	8007030 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007064:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8007066:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007068:	4652      	mov	r2, sl
 800706a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800706c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007070:	2340      	movs	r3, #64	; 0x40
 8007072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8007076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007078:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800707a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800707c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800707e:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007080:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8007084:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007086:	465b      	mov	r3, fp
 8007088:	f7ff fe62 	bl	8006d50 <I2C_RequestMemoryRead>
 800708c:	b110      	cbz	r0, 8007094 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800708e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007092:	e7cd      	b.n	8007030 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007094:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007096:	b29b      	uxth	r3, r3
 8007098:	2bff      	cmp	r3, #255	; 0xff
 800709a:	4b36      	ldr	r3, [pc, #216]	; (8007174 <HAL_I2C_Mem_Read+0x174>)
 800709c:	d958      	bls.n	8007150 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800709e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070a6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070a8:	4639      	mov	r1, r7
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff fd02 	bl	8006ab4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070b0:	464b      	mov	r3, r9
 80070b2:	2200      	movs	r2, #0
 80070b4:	2104      	movs	r1, #4
 80070b6:	4620      	mov	r0, r4
 80070b8:	9600      	str	r6, [sp, #0]
 80070ba:	f7ff fde8 	bl	8006c8e <I2C_WaitOnFlagUntilTimeout>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d1b6      	bne.n	8007030 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80070ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80070cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80070ce:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80070d0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80070d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80070d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80070d6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80070d8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80070da:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80070dc:	b29b      	uxth	r3, r3
 80070de:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	b1ab      	cbz	r3, 8007112 <HAL_I2C_Mem_Read+0x112>
 80070e6:	b9a2      	cbnz	r2, 8007112 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070e8:	464b      	mov	r3, r9
 80070ea:	2180      	movs	r1, #128	; 0x80
 80070ec:	4620      	mov	r0, r4
 80070ee:	9600      	str	r6, [sp, #0]
 80070f0:	f7ff fdcd 	bl	8006c8e <I2C_WaitOnFlagUntilTimeout>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d19b      	bne.n	8007030 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2bff      	cmp	r3, #255	; 0xff
 80070fe:	d92f      	bls.n	8007160 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007100:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007106:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007108:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800710a:	4639      	mov	r1, r7
 800710c:	4620      	mov	r0, r4
 800710e:	f7ff fcd1 	bl	8006ab4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007112:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1ca      	bne.n	80070b0 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800711a:	4632      	mov	r2, r6
 800711c:	4649      	mov	r1, r9
 800711e:	4620      	mov	r0, r4
 8007120:	f7ff fd90 	bl	8006c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007124:	2800      	cmp	r0, #0
 8007126:	d183      	bne.n	8007030 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	2120      	movs	r1, #32
 800712c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007134:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007138:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007142:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007146:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800714a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800714e:	e770      	b.n	8007032 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8007150:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007158:	b292      	uxth	r2, r2
 800715a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	e7a3      	b.n	80070a8 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8007160:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007166:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007168:	b292      	uxth	r2, r2
 800716a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	e7cc      	b.n	800710a <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8007170:	2002      	movs	r0, #2
 8007172:	e75e      	b.n	8007032 <HAL_I2C_Mem_Read+0x32>
 8007174:	80002400 	.word	0x80002400

08007178 <HAL_I2C_GetState>:
  return hi2c->State;
 8007178:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800717c:	4770      	bx	lr

0800717e <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800717e:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8007180:	4770      	bx	lr

08007182 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007182:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007184:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007188:	2b20      	cmp	r3, #32
 800718a:	b2dc      	uxtb	r4, r3
 800718c:	d11d      	bne.n	80071ca <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800718e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007192:	2b01      	cmp	r3, #1
 8007194:	d019      	beq.n	80071ca <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007196:	2324      	movs	r3, #36	; 0x24
 8007198:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800719c:	6803      	ldr	r3, [r0, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4311      	orrs	r1, r2
 80071b2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071bc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80071be:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80071c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80071c6:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80071c8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80071ca:	2002      	movs	r0, #2
 80071cc:	e7fc      	b.n	80071c8 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080071ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071ce:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	b2dc      	uxtb	r4, r3
 80071d8:	d11c      	bne.n	8007214 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d018      	beq.n	8007214 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071e2:	2324      	movs	r3, #36	; 0x24
 80071e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071e8:	6803      	ldr	r3, [r0, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f022 0201 	bic.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071f2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071f4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071f8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071fc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007206:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007208:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800720c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007210:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007212:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007214:	2002      	movs	r0, #2
 8007216:	e7fc      	b.n	8007212 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007218 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007218:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800721a:	f8d1 c000 	ldr.w	ip, [r1]
{
 800721e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007222:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007224:	6804      	ldr	r4, [r0, #0]
 8007226:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007228:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800722c:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800722e:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007230:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007234:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007238:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800723a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800723e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007242:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007244:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007246:	68e0      	ldr	r0, [r4, #12]
 8007248:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800724c:	4430      	add	r0, r6
 800724e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007252:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007254:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007256:	68e0      	ldr	r0, [r4, #12]
 8007258:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800725c:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800725e:	6898      	ldr	r0, [r3, #8]
 8007260:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8007264:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007266:	6888      	ldr	r0, [r1, #8]
 8007268:	68e6      	ldr	r6, [r4, #12]
 800726a:	3001      	adds	r0, #1
 800726c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8007270:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007272:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007274:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8007278:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800727a:	6918      	ldr	r0, [r3, #16]
 800727c:	f020 0007 	bic.w	r0, r0, #7
 8007280:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007282:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007284:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007286:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800728a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800728e:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007292:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007296:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800729a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800729e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80072a2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80072a4:	6958      	ldr	r0, [r3, #20]
 80072a6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80072aa:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072ac:	6948      	ldr	r0, [r1, #20]
 80072ae:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072b0:	69d8      	ldr	r0, [r3, #28]
 80072b2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80072b6:	f020 0007 	bic.w	r0, r0, #7
 80072ba:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072bc:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 80072c0:	4305      	orrs	r5, r0
 80072c2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80072c6:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072c8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80072cc:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80072ce:	b31e      	cbz	r6, 8007318 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80072d0:	2e01      	cmp	r6, #1
 80072d2:	d023      	beq.n	800731c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80072d4:	1eb0      	subs	r0, r6, #2
 80072d6:	2802      	cmp	r0, #2
 80072d8:	d922      	bls.n	8007320 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80072da:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80072dc:	bf0c      	ite	eq
 80072de:	2002      	moveq	r0, #2
 80072e0:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80072e2:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80072e4:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80072e8:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80072ec:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80072ee:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80072f2:	4345      	muls	r5, r0
 80072f4:	4378      	muls	r0, r7
 80072f6:	3007      	adds	r0, #7
 80072f8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80072fc:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007300:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8007304:	f020 0007 	bic.w	r0, r0, #7
 8007308:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800730a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800730c:	58a3      	ldr	r3, [r4, r2]
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	50a3      	str	r3, [r4, r2]
}
 8007314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8007318:	2004      	movs	r0, #4
 800731a:	e7e2      	b.n	80072e2 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800731c:	2003      	movs	r0, #3
 800731e:	e7e0      	b.n	80072e2 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8007320:	2002      	movs	r0, #2
 8007322:	e7de      	b.n	80072e2 <LTDC_SetConfig+0xca>

08007324 <HAL_LTDC_Init>:
{
 8007324:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8007326:	4604      	mov	r4, r0
 8007328:	2800      	cmp	r0, #0
 800732a:	d063      	beq.n	80073f4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800732c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007330:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007334:	b91b      	cbnz	r3, 800733e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8007336:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800733a:	f7fa f87d 	bl	8001438 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800733e:	2302      	movs	r3, #2
 8007340:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800734c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800734e:	6999      	ldr	r1, [r3, #24]
 8007350:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8007354:	4302      	orrs	r2, r0
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800735a:	6920      	ldr	r0, [r4, #16]
 800735c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800735e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007360:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007362:	4925      	ldr	r1, [pc, #148]	; (80073f8 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007364:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	400a      	ands	r2, r1
 800736a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007372:	69a0      	ldr	r0, [r4, #24]
 8007374:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007376:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007378:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	400a      	ands	r2, r1
 800737e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007386:	6a20      	ldr	r0, [r4, #32]
 8007388:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800738a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800738c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	400a      	ands	r2, r1
 8007392:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800739a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800739c:	4302      	orrs	r2, r0
 800739e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	4011      	ands	r1, r2
 80073a4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80073a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80073ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80073b0:	430a      	orrs	r2, r1
 80073b2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073b6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073ba:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80073be:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073c2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073c6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80073ca:	430a      	orrs	r2, r1
 80073cc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80073d0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073d4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073da:	f042 0206 	orr.w	r2, r2, #6
 80073de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80073e8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073ea:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80073ee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80073f4:	2001      	movs	r0, #1
 80073f6:	e7fc      	b.n	80073f2 <HAL_LTDC_Init+0xce>
 80073f8:	f000f800 	.word	0xf000f800

080073fc <HAL_LTDC_ErrorCallback>:
 80073fc:	4770      	bx	lr

080073fe <HAL_LTDC_ReloadEventCallback>:
 80073fe:	4770      	bx	lr

08007400 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007400:	6803      	ldr	r3, [r0, #0]
{
 8007402:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007404:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8007406:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007408:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800740a:	0772      	lsls	r2, r6, #29
 800740c:	d514      	bpl.n	8007438 <HAL_LTDC_IRQHandler+0x38>
 800740e:	0769      	lsls	r1, r5, #29
 8007410:	d512      	bpl.n	8007438 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007414:	f022 0204 	bic.w	r2, r2, #4
 8007418:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800741a:	2204      	movs	r2, #4
 800741c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800741e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800742a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800742c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007430:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8007434:	f7ff ffe2 	bl	80073fc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007438:	07b2      	lsls	r2, r6, #30
 800743a:	d516      	bpl.n	800746a <HAL_LTDC_IRQHandler+0x6a>
 800743c:	07ab      	lsls	r3, r5, #30
 800743e:	d514      	bpl.n	800746a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007440:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8007442:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007446:	f022 0202 	bic.w	r2, r2, #2
 800744a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800744c:	2202      	movs	r2, #2
 800744e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007450:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800745a:	2304      	movs	r3, #4
 800745c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007460:	2300      	movs	r3, #0
 8007462:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8007466:	f7ff ffc9 	bl	80073fc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800746a:	07f0      	lsls	r0, r6, #31
 800746c:	d510      	bpl.n	8007490 <HAL_LTDC_IRQHandler+0x90>
 800746e:	07e9      	lsls	r1, r5, #31
 8007470:	d50e      	bpl.n	8007490 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007472:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8007474:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800747e:	2201      	movs	r2, #1
 8007480:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8007482:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8007484:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007488:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800748c:	f7fb faa6 	bl	80029dc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007490:	0732      	lsls	r2, r6, #28
 8007492:	d511      	bpl.n	80074b8 <HAL_LTDC_IRQHandler+0xb8>
 8007494:	072b      	lsls	r3, r5, #28
 8007496:	d50f      	bpl.n	80074b8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007498:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800749a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800749c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800749e:	f022 0208 	bic.w	r2, r2, #8
 80074a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80074a4:	2208      	movs	r2, #8
 80074a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80074a8:	2301      	movs	r3, #1
 80074aa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80074ae:	2300      	movs	r3, #0
 80074b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80074b4:	f7ff ffa3 	bl	80073fe <HAL_LTDC_ReloadEventCallback>
}
 80074b8:	bd70      	pop	{r4, r5, r6, pc}

080074ba <HAL_LTDC_ConfigLayer>:
{
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80074be:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80074c2:	4606      	mov	r6, r0
 80074c4:	460f      	mov	r7, r1
 80074c6:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	f04f 0002 	mov.w	r0, #2
 80074ce:	d01f      	beq.n	8007510 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80074d0:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80074d2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80074d6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074d8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80074dc:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80074e0:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80074e4:	3438      	adds	r4, #56	; 0x38
 80074e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80074f4:	4630      	mov	r0, r6
 80074f6:	4662      	mov	r2, ip
 80074f8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80074fa:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80074fc:	f7ff fe8c 	bl	8007218 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007500:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8007502:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007504:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007508:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800750c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8007510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007514 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8007514:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007518:	2b01      	cmp	r3, #1
 800751a:	f04f 0302 	mov.w	r3, #2
 800751e:	d012      	beq.n	8007546 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007520:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007524:	6803      	ldr	r3, [r0, #0]
 8007526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007528:	f022 0201 	bic.w	r2, r2, #1
 800752c:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800752e:	4a07      	ldr	r2, [pc, #28]	; (800754c <HAL_LTDC_ProgramLineEvent+0x38>)
 8007530:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007534:	f042 0201 	orr.w	r2, r2, #1
 8007538:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800753a:	2301      	movs	r3, #1
 800753c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007540:	2300      	movs	r3, #0
 8007542:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8007546:	4618      	mov	r0, r3
}
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	50001000 	.word	0x50001000

08007550 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8007554:	f7fe ff2e 	bl	80063b4 <HAL_GetTick>
 8007558:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800755a:	b144      	cbz	r4, 800756e <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800755c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007560:	2b02      	cmp	r3, #2
 8007562:	d006      	beq.n	8007572 <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8007564:	2380      	movs	r3, #128	; 0x80
 8007566:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007568:	2300      	movs	r3, #0
 800756a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800756e:	2001      	movs	r0, #1
 8007570:	e015      	b.n	800759e <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800757a:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	f022 0201 	bic.w	r2, r2, #1
 8007582:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007584:	6822      	ldr	r2, [r4, #0]
 8007586:	68d3      	ldr	r3, [r2, #12]
 8007588:	f013 0301 	ands.w	r3, r3, #1
 800758c:	d108      	bne.n	80075a0 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800758e:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 8007590:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8007592:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 8007594:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 8007596:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800759a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 800759e:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80075a0:	f7fe ff08 	bl	80063b4 <HAL_GetTick>
 80075a4:	1b40      	subs	r0, r0, r5
 80075a6:	2805      	cmp	r0, #5
 80075a8:	d9ec      	bls.n	8007584 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80075aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80075ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b0:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 80075b2:	2300      	movs	r3, #0
 80075b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 80075b8:	2303      	movs	r3, #3
 80075ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 80075be:	e7d6      	b.n	800756e <HAL_MDMA_Abort+0x1e>

080075c0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80075c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80075c4:	6804      	ldr	r4, [r0, #0]
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80075cc:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80075ce:	6883      	ldr	r3, [r0, #8]
 80075d0:	b92b      	cbnz	r3, 80075de <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	684a      	ldr	r2, [r1, #4]
 80075d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075da:	4313      	orrs	r3, r2
 80075dc:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80075de:	680b      	ldr	r3, [r1, #0]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d14e      	bne.n	8007682 <OSPI_ConfigCmd+0xc2>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80075e4:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 80075e8:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 80075ec:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 80075f0:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80075f4:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 80075f8:	433b      	orrs	r3, r7
 80075fa:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80075fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80075fe:	b16b      	cbz	r3, 800761c <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8007600:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007602:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8007606:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8007608:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800760a:	f8d2 c000 	ldr.w	ip, [r2]
 800760e:	433b      	orrs	r3, r7
 8007610:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 8007612:	433b      	orrs	r3, r7
 8007614:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 8007618:	433b      	orrs	r3, r7
 800761a:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800761c:	6833      	ldr	r3, [r6, #0]
 800761e:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8007620:	f023 031f 	bic.w	r3, r3, #31
 8007624:	433b      	orrs	r3, r7
 8007626:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007628:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800762a:	b123      	cbz	r3, 8007636 <OSPI_ConfigCmd+0x76>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800762c:	680e      	ldr	r6, [r1, #0]
 800762e:	b916      	cbnz	r6, 8007636 <OSPI_ConfigCmd+0x76>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8007630:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8007632:	3e01      	subs	r6, #1
 8007634:	6426      	str	r6, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8007636:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800763a:	f8d1 901c 	ldr.w	r9, [r1, #28]
 800763e:	f1ba 0f00 	cmp.w	sl, #0
 8007642:	d076      	beq.n	8007732 <OSPI_ConfigCmd+0x172>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8007644:	e9d1 e804 	ldrd	lr, r8, [r1, #16]
 8007648:	f1b9 0f00 	cmp.w	r9, #0
 800764c:	d047      	beq.n	80076de <OSPI_ConfigCmd+0x11e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800764e:	6817      	ldr	r7, [r2, #0]
 8007650:	e9d1 6c08 	ldrd	r6, ip, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007654:	b34b      	cbz	r3, 80076aa <OSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007656:	ea43 000a 	orr.w	r0, r3, sl
 800765a:	ea40 0309 	orr.w	r3, r0, r9
 800765e:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8007660:	ea43 0308 	orr.w	r3, r3, r8
 8007664:	ea43 030e 	orr.w	r3, r3, lr
 8007668:	ea43 030c 	orr.w	r3, r3, ip
 800766c:	4333      	orrs	r3, r6
 800766e:	4303      	orrs	r3, r0
 8007670:	483e      	ldr	r0, [pc, #248]	; (800776c <OSPI_ConfigCmd+0x1ac>)
 8007672:	4038      	ands	r0, r7
 8007674:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007676:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8007678:	688b      	ldr	r3, [r1, #8]
 800767a:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800767c:	698b      	ldr	r3, [r1, #24]
 800767e:	64a3      	str	r3, [r4, #72]	; 0x48
 8007680:	e040      	b.n	8007704 <OSPI_ConfigCmd+0x144>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8007682:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 8007684:	bf01      	itttt	eq
 8007686:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800768a:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800768e:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 8007692:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 8007696:	bf1f      	itttt	ne
 8007698:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800769c:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 80076a0:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 80076a4:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 80076a8:	e7a4      	b.n	80075f4 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80076aa:	ea4a 0309 	orr.w	r3, sl, r9
 80076ae:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 80076b2:	ea43 0308 	orr.w	r3, r3, r8
 80076b6:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 80076ba:	ea43 030e 	orr.w	r3, r3, lr
 80076be:	ea43 030c 	orr.w	r3, r3, ip
 80076c2:	4333      	orrs	r3, r6
 80076c4:	433b      	orrs	r3, r7
 80076c6:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80076c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80076ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ce:	d1d3      	bne.n	8007678 <OSPI_ConfigCmd+0xb8>
 80076d0:	694b      	ldr	r3, [r1, #20]
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d1d0      	bne.n	8007678 <OSPI_ConfigCmd+0xb8>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80076d6:	6813      	ldr	r3, [r2, #0]
 80076d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076dc:	e7cb      	b.n	8007676 <OSPI_ConfigCmd+0xb6>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80076de:	b1a3      	cbz	r3, 800770a <OSPI_ConfigCmd+0x14a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80076e0:	ea43 030a 	orr.w	r3, r3, sl
 80076e4:	6810      	ldr	r0, [r2, #0]
 80076e6:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80076e8:	ea43 0308 	orr.w	r3, r3, r8
 80076ec:	ea43 030e 	orr.w	r3, r3, lr
 80076f0:	f020 6e70 	bic.w	lr, r0, #251658240	; 0xf000000
 80076f4:	4323      	orrs	r3, r4
 80076f6:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 80076fa:	ea43 030e 	orr.w	r3, r3, lr
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80076fe:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 8007700:	688b      	ldr	r3, [r1, #8]
 8007702:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007704:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8007706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800770a:	6814      	ldr	r4, [r2, #0]
 800770c:	ea4a 0308 	orr.w	r3, sl, r8
 8007710:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8007714:	ea43 030e 	orr.w	r3, r3, lr
 8007718:	4323      	orrs	r3, r4
 800771a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800771c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800771e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007722:	d1ed      	bne.n	8007700 <OSPI_ConfigCmd+0x140>
 8007724:	694b      	ldr	r3, [r1, #20]
 8007726:	2b08      	cmp	r3, #8
 8007728:	d1ea      	bne.n	8007700 <OSPI_ConfigCmd+0x140>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007730:	e7e5      	b.n	80076fe <OSPI_ConfigCmd+0x13e>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	d014      	beq.n	8007762 <OSPI_ConfigCmd+0x1a2>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8007738:	6810      	ldr	r0, [r2, #0]
 800773a:	e9d1 5608 	ldrd	r5, r6, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800773e:	b163      	cbz	r3, 800775a <OSPI_ConfigCmd+0x19a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8007740:	ea43 0309 	orr.w	r3, r3, r9
 8007744:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8007748:	4333      	orrs	r3, r6
 800774a:	432b      	orrs	r3, r5
 800774c:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800774e:	432b      	orrs	r3, r5
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8007750:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8007754:	4303      	orrs	r3, r0
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	e790      	b.n	800767c <OSPI_ConfigCmd+0xbc>
 800775a:	ea49 0306 	orr.w	r3, r9, r6
 800775e:	432b      	orrs	r3, r5
 8007760:	e7f6      	b.n	8007750 <OSPI_ConfigCmd+0x190>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007762:	2308      	movs	r3, #8
 8007764:	6583      	str	r3, [r0, #88]	; 0x58
      status = HAL_ERROR;
 8007766:	2001      	movs	r0, #1
 8007768:	e7cd      	b.n	8007706 <OSPI_ConfigCmd+0x146>
 800776a:	bf00      	nop
 800776c:	f0ffc0c0 	.word	0xf0ffc0c0

08007770 <OSPI_WaitFlagStateUntilTimeout>:
{
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007778:	4604      	mov	r4, r0
 800777a:	460e      	mov	r6, r1
 800777c:	4615      	mov	r5, r2
 800777e:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	6a13      	ldr	r3, [r2, #32]
 8007784:	4233      	tst	r3, r6
 8007786:	bf14      	ite	ne
 8007788:	2301      	movne	r3, #1
 800778a:	2300      	moveq	r3, #0
 800778c:	42ab      	cmp	r3, r5
 800778e:	d101      	bne.n	8007794 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8007790:	2000      	movs	r0, #0
 8007792:	e012      	b.n	80077ba <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8007794:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007798:	d0f3      	beq.n	8007782 <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fe fe0b 	bl	80063b4 <HAL_GetTick>
 800779e:	1bc0      	subs	r0, r0, r7
 80077a0:	4540      	cmp	r0, r8
 80077a2:	d802      	bhi.n	80077aa <OSPI_WaitFlagStateUntilTimeout+0x3a>
 80077a4:	f1b8 0f00 	cmp.w	r8, #0
 80077a8:	d1ea      	bne.n	8007780 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80077aa:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80077ae:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80077b0:	6563      	str	r3, [r4, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80077b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077b4:	f043 0301 	orr.w	r3, r3, #1
 80077b8:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80077ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080077c0 <HAL_OSPI_Init>:
{
 80077c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c2:	4604      	mov	r4, r0
 80077c4:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80077c6:	f7fe fdf5 	bl	80063b4 <HAL_GetTick>
 80077ca:	4603      	mov	r3, r0
  if (hospi == NULL)
 80077cc:	2c00      	cmp	r4, #0
 80077ce:	d068      	beq.n	80078a2 <HAL_OSPI_Init+0xe2>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80077d0:	2000      	movs	r0, #0
 80077d2:	65a0      	str	r0, [r4, #88]	; 0x58
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80077d4:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d161      	bne.n	800789e <HAL_OSPI_Init+0xde>
      HAL_OSPI_MspInit(hospi);
 80077da:	4620      	mov	r0, r4
 80077dc:	9303      	str	r3, [sp, #12]
 80077de:	f7f9 ff3b 	bl	8001658 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 80077e2:	69e0      	ldr	r0, [r4, #28]
 80077e4:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 80077e6:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 80077ea:	6825      	ldr	r5, [r4, #0]
 80077ec:	4301      	orrs	r1, r0
 80077ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80077f0:	68af      	ldr	r7, [r5, #8]
 80077f2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80077f6:	482c      	ldr	r0, [pc, #176]	; (80078a8 <HAL_OSPI_Init+0xe8>)
  hospi->Timeout = Timeout;
 80077f8:	65e2      	str	r2, [r4, #92]	; 0x5c
      MODIFY_REG(hospi->Instance->DCR1,
 80077fa:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80077fc:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 80077fe:	4301      	orrs	r1, r0
 8007800:	6920      	ldr	r0, [r4, #16]
 8007802:	3801      	subs	r0, #1
 8007804:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007808:	6960      	ldr	r0, [r4, #20]
 800780a:	3801      	subs	r0, #1
 800780c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8007810:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 8007812:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8007814:	68e9      	ldr	r1, [r5, #12]
 8007816:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800781a:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800781c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800781e:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007820:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007822:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007826:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007828:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800782a:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800782c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800782e:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007830:	6829      	ldr	r1, [r5, #0]
 8007832:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8007836:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800783a:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800783c:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800783e:	2120      	movs	r1, #32
 8007840:	9200      	str	r2, [sp, #0]
 8007842:	4632      	mov	r2, r6
 8007844:	f7ff ff94 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007848:	bb48      	cbnz	r0, 800789e <HAL_OSPI_Init+0xde>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800784e:	68d9      	ldr	r1, [r3, #12]
 8007850:	3a01      	subs	r2, #1
 8007852:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007856:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007858:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800785a:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007862:	430a      	orrs	r2, r1
 8007864:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007866:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800786a:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 800786e:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 8007872:	432a      	orrs	r2, r5
 8007874:	430a      	orrs	r2, r1
 8007876:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007882:	69a2      	ldr	r2, [r4, #24]
 8007884:	2a02      	cmp	r2, #2
 8007886:	d103      	bne.n	8007890 <HAL_OSPI_Init+0xd0>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	f042 0202 	orr.w	r2, r2, #2
 800788e:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007890:	68e3      	ldr	r3, [r4, #12]
 8007892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007896:	bf0c      	ite	eq
 8007898:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 800789a:	2302      	movne	r3, #2
 800789c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800789e:	b005      	add	sp, #20
 80078a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 80078a2:	2001      	movs	r0, #1
 80078a4:	e7fb      	b.n	800789e <HAL_OSPI_Init+0xde>
 80078a6:	bf00      	nop
 80078a8:	f8e0f88c 	.word	0xf8e0f88c

080078ac <HAL_OSPI_DeInit>:
{
 80078ac:	b510      	push	{r4, lr}
  if (hospi == NULL)
 80078ae:	4604      	mov	r4, r0
 80078b0:	b168      	cbz	r0, 80078ce <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 80078b2:	6803      	ldr	r3, [r0, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	f022 0201 	bic.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	f022 0202 	bic.w	r2, r2, #2
 80078c2:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 80078c4:	f7f9 fff8 	bl	80018b8 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 80078c8:	2000      	movs	r0, #0
 80078ca:	6560      	str	r0, [r4, #84]	; 0x54
}
 80078cc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80078ce:	2001      	movs	r0, #1
 80078d0:	e7fc      	b.n	80078cc <HAL_OSPI_DeInit+0x20>

080078d2 <HAL_OSPI_Command>:
{
 80078d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80078d4:	4604      	mov	r4, r0
 80078d6:	4616      	mov	r6, r2
 80078d8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80078da:	f7fe fd6b 	bl	80063b4 <HAL_GetTick>
  state = hospi->State;
 80078de:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 80078e0:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80078e2:	2a02      	cmp	r2, #2
 80078e4:	d107      	bne.n	80078f6 <HAL_OSPI_Command+0x24>
 80078e6:	68e2      	ldr	r2, [r4, #12]
 80078e8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80078ec:	d109      	bne.n	8007902 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80078ee:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80078f0:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80078f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80078f4:	e01f      	b.n	8007936 <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80078f6:	2a14      	cmp	r2, #20
 80078f8:	d11f      	bne.n	800793a <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80078fa:	682a      	ldr	r2, [r5, #0]
 80078fc:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80078fe:	2a01      	cmp	r2, #1
 8007900:	d8f5      	bhi.n	80078ee <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007902:	2200      	movs	r2, #0
 8007904:	2120      	movs	r1, #32
 8007906:	4620      	mov	r0, r4
 8007908:	9600      	str	r6, [sp, #0]
 800790a:	9303      	str	r3, [sp, #12]
 800790c:	f7ff ff30 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007910:	b988      	cbnz	r0, 8007936 <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007912:	65a0      	str	r0, [r4, #88]	; 0x58
      status = OSPI_ConfigCmd(hospi, cmd);
 8007914:	4629      	mov	r1, r5
 8007916:	4620      	mov	r0, r4
 8007918:	f7ff fe52 	bl	80075c0 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800791c:	b958      	cbnz	r0, 8007936 <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800791e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	b992      	cbnz	r2, 800794a <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007924:	2201      	movs	r2, #1
 8007926:	2102      	movs	r1, #2
 8007928:	4620      	mov	r0, r4
 800792a:	9600      	str	r6, [sp, #0]
 800792c:	f7ff ff20 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	2202      	movs	r2, #2
 8007934:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007936:	b004      	add	sp, #16
 8007938:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800793a:	2a24      	cmp	r2, #36	; 0x24
 800793c:	d1d7      	bne.n	80078ee <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800793e:	682a      	ldr	r2, [r5, #0]
 8007940:	f022 0202 	bic.w	r2, r2, #2
 8007944:	2a01      	cmp	r2, #1
 8007946:	d1d2      	bne.n	80078ee <HAL_OSPI_Command+0x1c>
 8007948:	e7db      	b.n	8007902 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800794a:	682b      	ldr	r3, [r5, #0]
 800794c:	b90b      	cbnz	r3, 8007952 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800794e:	2304      	movs	r3, #4
 8007950:	e005      	b.n	800795e <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8007952:	2b01      	cmp	r3, #1
 8007954:	d105      	bne.n	8007962 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8007956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007958:	2b24      	cmp	r3, #36	; 0x24
 800795a:	d0f8      	beq.n	800794e <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800795c:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800795e:	6563      	str	r3, [r4, #84]	; 0x54
 8007960:	e7e9      	b.n	8007936 <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007962:	2b02      	cmp	r3, #2
 8007964:	d1e7      	bne.n	8007936 <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8007966:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007968:	2b14      	cmp	r3, #20
 800796a:	d0f0      	beq.n	800794e <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800796c:	2324      	movs	r3, #36	; 0x24
 800796e:	e7f6      	b.n	800795e <HAL_OSPI_Command+0x8c>

08007970 <HAL_OSPI_HyperbusCfg>:
{
 8007970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007972:	4604      	mov	r4, r0
 8007974:	4616      	mov	r6, r2
 8007976:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007978:	f7fe fd1c 	bl	80063b4 <HAL_GetTick>
  state = hospi->State;
 800797c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 800797e:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007980:	3a01      	subs	r2, #1
 8007982:	2a01      	cmp	r2, #1
 8007984:	d816      	bhi.n	80079b4 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007986:	2200      	movs	r2, #0
 8007988:	2120      	movs	r1, #32
 800798a:	4620      	mov	r0, r4
 800798c:	9600      	str	r6, [sp, #0]
 800798e:	f7ff feef 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007992:	b968      	cbnz	r0, 80079b0 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 800799a:	430b      	orrs	r3, r1
 800799c:	6829      	ldr	r1, [r5, #0]
 800799e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80079a2:	6869      	ldr	r1, [r5, #4]
 80079a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079a8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 80079ac:	2302      	movs	r3, #2
 80079ae:	6563      	str	r3, [r4, #84]	; 0x54
}
 80079b0:	b002      	add	sp, #8
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80079b4:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80079b6:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80079b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80079ba:	e7f9      	b.n	80079b0 <HAL_OSPI_HyperbusCfg+0x40>

080079bc <HAL_OSPI_HyperbusCmd>:
{
 80079bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	4616      	mov	r6, r2
 80079c2:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80079c4:	f7fe fcf6 	bl	80063b4 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80079c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 80079ca:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80079cc:	2a02      	cmp	r2, #2
 80079ce:	d127      	bne.n	8007a20 <HAL_OSPI_HyperbusCmd+0x64>
 80079d0:	68e2      	ldr	r2, [r4, #12]
 80079d2:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80079d6:	d123      	bne.n	8007a20 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80079d8:	2200      	movs	r2, #0
 80079da:	2120      	movs	r1, #32
 80079dc:	4620      	mov	r0, r4
 80079de:	9600      	str	r6, [sp, #0]
 80079e0:	f7ff fec6 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80079e4:	b9d0      	cbnz	r0, 8007a1c <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80079e6:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 80079e8:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80079f0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80079f8:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 80079fa:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 80079fc:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 80079fe:	692a      	ldr	r2, [r5, #16]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8007a06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8007a0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8007a0e:	68ea      	ldr	r2, [r5, #12]
 8007a10:	3a01      	subs	r2, #1
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8007a14:	686a      	ldr	r2, [r5, #4]
 8007a16:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007a18:	2304      	movs	r3, #4
 8007a1a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a20:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007a22:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a24:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a26:	e7f9      	b.n	8007a1c <HAL_OSPI_HyperbusCmd+0x60>

08007a28 <HAL_OSPI_Transmit>:
{
 8007a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a2a:	460f      	mov	r7, r1
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8007a32:	f7fe fcbf 	bl	80063b4 <HAL_GetTick>
 8007a36:	4603      	mov	r3, r0
  if (pData == NULL)
 8007a38:	b91f      	cbnz	r7, 8007a42 <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007a3a:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8007a3c:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a40:	e02e      	b.n	8007aa0 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007a42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007a44:	2a04      	cmp	r2, #4
 8007a46:	d12d      	bne.n	8007aa4 <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007a48:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007a4a:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8007a4c:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007a4e:	3201      	adds	r2, #1
 8007a50:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8007a52:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007a54:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007a56:	6832      	ldr	r2, [r6, #0]
 8007a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a5c:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8007a5e:	2201      	movs	r2, #1
 8007a60:	2104      	movs	r1, #4
 8007a62:	4620      	mov	r0, r4
 8007a64:	9500      	str	r5, [sp, #0]
 8007a66:	9303      	str	r3, [sp, #12]
 8007a68:	f7ff fe82 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007a6c:	b9c0      	cbnz	r0, 8007aa0 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8007a6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while (hospi->XferCount > 0U);
 8007a70:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8007a72:	7812      	ldrb	r2, [r2, #0]
 8007a74:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 8007a78:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8007a7e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007a80:	3a01      	subs	r2, #1
 8007a82:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 8007a84:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	d1e9      	bne.n	8007a5e <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	4620      	mov	r0, r4
 8007a90:	9500      	str	r5, [sp, #0]
 8007a92:	f7ff fe6d 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007a96:	b918      	cbnz	r0, 8007aa0 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007a98:	2302      	movs	r3, #2
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8007a9e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007aa0:	b005      	add	sp, #20
 8007aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	e7c9      	b.n	8007a3c <HAL_OSPI_Transmit+0x14>

08007aa8 <HAL_OSPI_Receive>:
{
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aaa:	4604      	mov	r4, r0
 8007aac:	b085      	sub	sp, #20
 8007aae:	460f      	mov	r7, r1
 8007ab0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8007ab2:	f7fe fc7f 	bl	80063b4 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007ab6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007ab8:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8007aba:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8007abc:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8007ac0:	b91f      	cbnz	r7, 8007aca <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007ac2:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8007ac4:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007ac6:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ac8:	e034      	b.n	8007b34 <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007aca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007acc:	2a04      	cmp	r2, #4
 8007ace:	d13b      	bne.n	8007b48 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007ad0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8007ad2:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007ad4:	3201      	adds	r2, #1
 8007ad6:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8007ad8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ada:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007adc:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007ade:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007ae0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007ae4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007ae8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007aec:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007aee:	d123      	bne.n	8007b38 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007af0:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8007af2:	2201      	movs	r2, #1
 8007af4:	2106      	movs	r1, #6
 8007af6:	4620      	mov	r0, r4
 8007af8:	9600      	str	r6, [sp, #0]
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	f7ff fe38 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007b00:	b9c0      	cbnz	r0, 8007b34 <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007b02:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8007b06:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while(hospi->XferCount > 0U);
 8007b08:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007b0a:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8007b0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007b0e:	3201      	adds	r2, #1
 8007b10:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8007b12:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b14:	3a01      	subs	r2, #1
 8007b16:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8007b18:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	d1e9      	bne.n	8007af2 <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007b1e:	2201      	movs	r2, #1
 8007b20:	2102      	movs	r1, #2
 8007b22:	4620      	mov	r0, r4
 8007b24:	9600      	str	r6, [sp, #0]
 8007b26:	f7ff fe23 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007b2a:	b918      	cbnz	r0, 8007b34 <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8007b32:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007b34:	b005      	add	sp, #20
 8007b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007b38:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8007b3c:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8007b40:	d1d6      	bne.n	8007af0 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007b42:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8007b46:	e7d4      	b.n	8007af2 <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007b48:	2310      	movs	r3, #16
 8007b4a:	e7bb      	b.n	8007ac4 <HAL_OSPI_Receive+0x1c>

08007b4c <HAL_OSPI_AutoPolling>:
{
 8007b4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007b50:	4604      	mov	r4, r0
 8007b52:	4616      	mov	r6, r2
 8007b54:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007b56:	f7fe fc2d 	bl	80063b4 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8007b5a:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007b5c:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8007b5e:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8007b60:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8007b64:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007b66:	2a04      	cmp	r2, #4
 8007b68:	d13c      	bne.n	8007be4 <HAL_OSPI_AutoPolling+0x98>
 8007b6a:	68ea      	ldr	r2, [r5, #12]
 8007b6c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8007b70:	d138      	bne.n	8007be4 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007b72:	9003      	str	r0, [sp, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	2120      	movs	r1, #32
 8007b78:	4620      	mov	r0, r4
 8007b7a:	9600      	str	r6, [sp, #0]
 8007b7c:	f7ff fdf8 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007b80:	bb28      	cbnz	r0, 8007bce <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8007b82:	6829      	ldr	r1, [r5, #0]
 8007b84:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b86:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8007b88:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8007b8c:	6869      	ldr	r1, [r5, #4]
 8007b8e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8007b92:	6929      	ldr	r1, [r5, #16]
 8007b94:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8007b98:	6810      	ldr	r0, [r2, #0]
 8007b9a:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8007b9e:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 8007ba2:	4329      	orrs	r1, r5
 8007ba4:	4301      	orrs	r1, r0
 8007ba6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007baa:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007bac:	68e1      	ldr	r1, [r4, #12]
 8007bae:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007bb2:	d10f      	bne.n	8007bd4 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007bb4:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	2108      	movs	r1, #8
 8007bba:	4620      	mov	r0, r4
 8007bbc:	9600      	str	r6, [sp, #0]
 8007bbe:	f7ff fdd7 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007bc2:	b920      	cbnz	r0, 8007bce <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007bce:	b004      	add	sp, #16
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007bd4:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8007bd8:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8007bdc:	d1ea      	bne.n	8007bb4 <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007bde:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8007be2:	e7e8      	b.n	8007bb6 <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007be4:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007be6:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007be8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007bea:	e7f0      	b.n	8007bce <HAL_OSPI_AutoPolling+0x82>

08007bec <HAL_OSPI_MemoryMapped>:
{
 8007bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bee:	4604      	mov	r4, r0
 8007bf0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007bf2:	f7fe fbdf 	bl	80063b4 <HAL_GetTick>
 8007bf6:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007bf8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007bfa:	2a04      	cmp	r2, #4
 8007bfc:	d121      	bne.n	8007c42 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007bfe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007c00:	2120      	movs	r1, #32
 8007c02:	4620      	mov	r0, r4
 8007c04:	9200      	str	r2, [sp, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f7ff fdb2 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007c0c:	b9b8      	cbnz	r0, 8007c3e <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007c0e:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007c10:	2388      	movs	r3, #136	; 0x88
 8007c12:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007c14:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007c16:	6563      	str	r3, [r4, #84]	; 0x54
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007c18:	d108      	bne.n	8007c2c <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8007c1a:	686b      	ldr	r3, [r5, #4]
 8007c1c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8007c20:	2310      	movs	r3, #16
 8007c22:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8007c24:	6811      	ldr	r1, [r2, #0]
 8007c26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007c2a:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8007c2c:	6813      	ldr	r3, [r2, #0]
 8007c2e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007c32:	f023 0308 	bic.w	r3, r3, #8
 8007c36:	4333      	orrs	r3, r6
 8007c38:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8007c3c:	6013      	str	r3, [r2, #0]
}
 8007c3e:	b002      	add	sp, #8
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c42:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007c44:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c46:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c48:	e7f9      	b.n	8007c3e <HAL_OSPI_MemoryMapped+0x52>

08007c4a <HAL_OSPI_Abort>:
{
 8007c4a:	b530      	push	{r4, r5, lr}
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8007c50:	f7fe fbb0 	bl	80063b4 <HAL_GetTick>
 8007c54:	4603      	mov	r3, r0
  state = hospi->State;
 8007c56:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007c58:	f012 0f0c 	tst.w	r2, #12
 8007c5c:	d035      	beq.n	8007cca <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007c5e:	6821      	ldr	r1, [r4, #0]
 8007c60:	680a      	ldr	r2, [r1, #0]
 8007c62:	f012 0204 	ands.w	r2, r2, #4
 8007c66:	d02b      	beq.n	8007cc0 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007c68:	680a      	ldr	r2, [r1, #0]
 8007c6a:	9003      	str	r0, [sp, #12]
 8007c6c:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 8007c70:	6d20      	ldr	r0, [r4, #80]	; 0x50
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007c72:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8007c74:	f7ff fc6c 	bl	8007550 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	b108      	cbz	r0, 8007c80 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	65a2      	str	r2, [r4, #88]	; 0x58
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	6a11      	ldr	r1, [r2, #32]
 8007c84:	0689      	lsls	r1, r1, #26
 8007c86:	d51d      	bpl.n	8007cc4 <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007c88:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007c8e:	f041 0102 	orr.w	r1, r1, #2
 8007c92:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007c94:	2102      	movs	r1, #2
 8007c96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007c98:	9200      	str	r2, [sp, #0]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f7ff fd68 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	b958      	cbnz	r0, 8007cbc <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007ca8:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007caa:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007cac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007cae:	9200      	str	r2, [sp, #0]
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7ff fd5c 	bl	8007770 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007cb8:	b900      	cbnz	r0, 8007cbc <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8007cba:	6565      	str	r5, [r4, #84]	; 0x54
}
 8007cbc:	b005      	add	sp, #20
 8007cbe:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	e7dd      	b.n	8007c80 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	6563      	str	r3, [r4, #84]	; 0x54
 8007cc8:	e7f8      	b.n	8007cbc <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007cca:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007ccc:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007cce:	65a3      	str	r3, [r4, #88]	; 0x58
 8007cd0:	e7f4      	b.n	8007cbc <HAL_OSPI_Abort+0x72>
	...

08007cd4 <HAL_OSPIM_Config>:
    other_instance = 0U;
 8007cd4:	4bc4      	ldr	r3, [pc, #784]	; (8007fe8 <HAL_OSPIM_Config+0x314>)
  if (hospi->Instance == OCTOSPI1)
 8007cd6:	6802      	ldr	r2, [r0, #0]
{
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8007cdc:	429a      	cmp	r2, r3
{
 8007cde:	b08f      	sub	sp, #60	; 0x3c
 8007ce0:	4688      	mov	r8, r1
    instance = 1U;
 8007ce2:	f04f 0501 	mov.w	r5, #1
    other_instance = 0U;
 8007ce6:	bf0b      	itete	eq
 8007ce8:	f04f 0c01 	moveq.w	ip, #1
 8007cec:	f04f 0c00 	movne.w	ip, #0
 8007cf0:	2400      	moveq	r4, #0
 8007cf2:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007cf4:	ab02      	add	r3, sp, #8
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007cf6:	2600      	movs	r6, #0
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007cf8:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 8007ff0 <HAL_OSPIM_Config+0x31c>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007cfc:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8007ff4 <HAL_OSPIM_Config+0x320>
    if (instance_nb == 2U)
 8007d00:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8007d02:	611e      	str	r6, [r3, #16]
    cfg->DQSPort    = 0U;
 8007d04:	e9c3 6600 	strd	r6, r6, [r3]
    cfg->IOLowPort  = 0U;
 8007d08:	e9c3 6602 	strd	r6, r6, [r3, #8]
    if (instance_nb == 2U)
 8007d0c:	f040 8126 	bne.w	8007f5c <HAL_OSPIM_Config+0x288>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007d10:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8007d14:	f012 0f01 	tst.w	r2, #1
 8007d18:	bf0c      	ite	eq
 8007d1a:	4648      	moveq	r0, r9
 8007d1c:	f44f 7000 	movne.w	r0, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007d20:	2700      	movs	r7, #0
    {
      reg = OCTOSPIM->PCR[index];
 8007d22:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 8007d26:	1c79      	adds	r1, r7, #1
 8007d28:	6852      	ldr	r2, [r2, #4]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007d2a:	07d7      	lsls	r7, r2, #31
 8007d2c:	d504      	bpl.n	8007d38 <HAL_OSPIM_Config+0x64>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007d2e:	ea82 0700 	eor.w	r7, r2, r0
 8007d32:	07bf      	lsls	r7, r7, #30
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8007d34:	bf58      	it	pl
 8007d36:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007d38:	06d7      	lsls	r7, r2, #27
 8007d3a:	d504      	bpl.n	8007d46 <HAL_OSPIM_Config+0x72>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007d3c:	ea82 0700 	eor.w	r7, r2, r0
 8007d40:	06bf      	lsls	r7, r7, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8007d42:	bf58      	it	pl
 8007d44:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007d46:	05d7      	lsls	r7, r2, #23
 8007d48:	d504      	bpl.n	8007d54 <HAL_OSPIM_Config+0x80>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007d4a:	ea82 0700 	eor.w	r7, r2, r0
 8007d4e:	05bf      	lsls	r7, r7, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8007d50:	bf58      	it	pl
 8007d52:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007d54:	03d7      	lsls	r7, r2, #15
 8007d56:	d50a      	bpl.n	8007d6e <HAL_OSPIM_Config+0x9a>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007d58:	ea82 0700 	eor.w	r7, r2, r0
 8007d5c:	037f      	lsls	r7, r7, #13
 8007d5e:	d406      	bmi.n	8007d6e <HAL_OSPIM_Config+0x9a>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007d60:	0397      	lsls	r7, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007d62:	bf54      	ite	pl
 8007d64:	f441 3780 	orrpl.w	r7, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007d68:	f041 7780 	orrmi.w	r7, r1, #16777216	; 0x1000000
 8007d6c:	60df      	str	r7, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007d6e:	01d7      	lsls	r7, r2, #7
 8007d70:	d50a      	bpl.n	8007d88 <HAL_OSPIM_Config+0xb4>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007d72:	ea82 0700 	eor.w	r7, r2, r0
 8007d76:	017f      	lsls	r7, r7, #5
 8007d78:	d406      	bmi.n	8007d88 <HAL_OSPIM_Config+0xb4>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007d7a:	0197      	lsls	r7, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007d7c:	bf54      	ite	pl
 8007d7e:	f441 3280 	orrpl.w	r2, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007d82:	f041 7280 	orrmi.w	r2, r1, #16777216	; 0x1000000
 8007d86:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007d88:	2902      	cmp	r1, #2
 8007d8a:	f04f 0701 	mov.w	r7, #1
 8007d8e:	d1c8      	bne.n	8007d22 <HAL_OSPIM_Config+0x4e>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007d90:	2d02      	cmp	r5, #2
 8007d92:	f103 0318 	add.w	r3, r3, #24
 8007d96:	f040 80df 	bne.w	8007f58 <HAL_OSPIM_Config+0x284>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007d9a:	4a93      	ldr	r2, [pc, #588]	; (8007fe8 <HAL_OSPIM_Config+0x314>)
 8007d9c:	6815      	ldr	r5, [r2, #0]
 8007d9e:	403d      	ands	r5, r7
 8007da0:	d004      	beq.n	8007dac <HAL_OSPIM_Config+0xd8>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007da2:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007da4:	463d      	mov	r5, r7
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007dac:	4b8f      	ldr	r3, [pc, #572]	; (8007fec <HAL_OSPIM_Config+0x318>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	07d0      	lsls	r0, r2, #31
 8007db2:	f140 80d5 	bpl.w	8007f60 <HAL_OSPIM_Config+0x28c>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8007dbe:	f045 0302 	orr.w	r3, r5, #2
 8007dc2:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007dc4:	ab0e      	add	r3, sp, #56	; 0x38
 8007dc6:	2218      	movs	r2, #24
 8007dc8:	fb02 3204 	mla	r2, r2, r4, r3
 8007dcc:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007dd6:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007dda:	6819      	ldr	r1, [r3, #0]
 8007ddc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007de0:	6019      	str	r1, [r3, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007de2:	4b83      	ldr	r3, [pc, #524]	; (8007ff0 <HAL_OSPIM_Config+0x31c>)
 8007de4:	6819      	ldr	r1, [r3, #0]
 8007de6:	07c9      	lsls	r1, r1, #31
 8007de8:	f140 80bc 	bpl.w	8007f64 <HAL_OSPIM_Config+0x290>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8007df4:	f1bc 0f00 	cmp.w	ip, #0
 8007df8:	d030      	beq.n	8007e5c <HAL_OSPIM_Config+0x188>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e02:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	f042 0202 	orr.w	r2, r2, #2
 8007e0c:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e10:	b143      	cbz	r3, 8007e24 <HAL_OSPIM_Config+0x150>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e18:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	f042 0220 	orr.w	r2, r2, #32
 8007e22:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e26:	b15b      	cbz	r3, 8007e40 <HAL_OSPIM_Config+0x16c>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e34:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007e3e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e42:	b15b      	cbz	r3, 8007e5c <HAL_OSPIM_Config+0x188>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8007e44:	3b01      	subs	r3, #1
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e50:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007e5a:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007e5c:	ab0e      	add	r3, sp, #56	; 0x38
 8007e5e:	f04f 0a18 	mov.w	sl, #24
 8007e62:	f8d8 7000 	ldr.w	r7, [r8]
 8007e66:	fb0a 3a0c 	mla	sl, sl, ip, r3
 8007e6a:	f85a 9c30 	ldr.w	r9, [sl, #-48]
 8007e6e:	f85a 1c20 	ldr.w	r1, [sl, #-32]
 8007e72:	454f      	cmp	r7, r9
 8007e74:	f85a bc2c 	ldr.w	fp, [sl, #-44]
 8007e78:	e9d8 0e01 	ldrd	r0, lr, [r8, #4]
 8007e7c:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 8007e80:	f000 80ba 	beq.w	8007ff8 <HAL_OSPIM_Config+0x324>
 8007e84:	4583      	cmp	fp, r0
 8007e86:	d00a      	beq.n	8007e9e <HAL_OSPIM_Config+0x1ca>
 8007e88:	f85a 6c28 	ldr.w	r6, [sl, #-40]
 8007e8c:	4576      	cmp	r6, lr
 8007e8e:	d006      	beq.n	8007e9e <HAL_OSPIM_Config+0x1ca>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007e90:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8007e94:	4592      	cmp	sl, r2
 8007e96:	d002      	beq.n	8007e9e <HAL_OSPIM_Config+0x1ca>
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	f040 80c0 	bne.w	800801e <HAL_OSPIM_Config+0x34a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007e9e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007ea2:	ae0e      	add	r6, sp, #56	; 0x38
 8007ea4:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007ea8:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007eac:	f8d9 a000 	ldr.w	sl, [r9]
 8007eb0:	f02a 0a01 	bic.w	sl, sl, #1
 8007eb4:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007eb8:	f04f 0918 	mov.w	r9, #24
 8007ebc:	fb09 690c 	mla	r9, r9, ip, r6
 8007ec0:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8007ec4:	f1b9 0f00 	cmp.w	r9, #0
 8007ec8:	d00b      	beq.n	8007ee2 <HAL_OSPIM_Config+0x20e>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007eca:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007ece:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007ed2:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
 8007ed6:	f8d9 a000 	ldr.w	sl, [r9]
 8007eda:	f02a 0a10 	bic.w	sl, sl, #16
 8007ede:	f8c9 a000 	str.w	sl, [r9]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007ee2:	f04f 0918 	mov.w	r9, #24
 8007ee6:	ae0e      	add	r6, sp, #56	; 0x38
 8007ee8:	fb09 6c0c 	mla	ip, r9, ip, r6
 8007eec:	f85c 6c28 	ldr.w	r6, [ip, #-40]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007ef0:	f85c cc24 	ldr.w	ip, [ip, #-36]
 8007ef4:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007ef8:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007efc:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007f00:	f8d9 a000 	ldr.w	sl, [r9]
 8007f04:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8007f08:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007f0c:	f1bc 0f00 	cmp.w	ip, #0
 8007f10:	d00f      	beq.n	8007f32 <HAL_OSPIM_Config+0x25e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007f12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f16:	f00c 0c01 	and.w	ip, ip, #1
 8007f1a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f1e:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8007f22:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8007f26:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8007f2a:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8007f2e:	f8cc 9004 	str.w	r9, [ip, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007f32:	2900      	cmp	r1, #0
 8007f34:	d073      	beq.n	800801e <HAL_OSPIM_Config+0x34a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007f36:	f101 3cff 	add.w	ip, r1, #4294967295
 8007f3a:	f00c 0c01 	and.w	ip, ip, #1
 8007f3e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f42:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8007f46:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8007f4a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007f4e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007f52:	f8cc 1004 	str.w	r1, [ip, #4]
 8007f56:	e062      	b.n	800801e <HAL_OSPIM_Config+0x34a>
 8007f58:	460d      	mov	r5, r1
 8007f5a:	e6d1      	b.n	8007d00 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e6df      	b.n	8007d20 <HAL_OSPIM_Config+0x4c>
 8007f60:	9501      	str	r5, [sp, #4]
 8007f62:	e72f      	b.n	8007dc4 <HAL_OSPIM_Config+0xf0>
      if (IOM_cfg[instance].ClkPort != 0U)
 8007f64:	f852 3c30 	ldr.w	r3, [r2, #-48]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f43f af77 	beq.w	8007e5c <HAL_OSPIM_Config+0x188>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007f74:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007f78:	6819      	ldr	r1, [r3, #0]
 8007f7a:	f021 0101 	bic.w	r1, r1, #1
 8007f7e:	6019      	str	r1, [r3, #0]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007f80:	f852 3c2c 	ldr.w	r3, [r2, #-44]
 8007f84:	b143      	cbz	r3, 8007f98 <HAL_OSPIM_Config+0x2c4>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007f8c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	f022 0210 	bic.w	r2, r2, #16
 8007f96:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007f98:	2318      	movs	r3, #24
 8007f9a:	aa0e      	add	r2, sp, #56	; 0x38
 8007f9c:	fb03 2304 	mla	r3, r3, r4, r2
 8007fa0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8007fa4:	b15b      	cbz	r3, 8007fbe <HAL_OSPIM_Config+0x2ea>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007fb2:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fbc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007fbe:	2318      	movs	r3, #24
 8007fc0:	aa0e      	add	r2, sp, #56	; 0x38
 8007fc2:	fb03 2304 	mla	r3, r3, r4, r2
 8007fc6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f43f af46 	beq.w	8007e5c <HAL_OSPIM_Config+0x188>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007fdc:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007fe6:	e738      	b.n	8007e5a <HAL_OSPIM_Config+0x186>
 8007fe8:	52005000 	.word	0x52005000
 8007fec:	5200a000 	.word	0x5200a000
 8007ff0:	5200b400 	.word	0x5200b400
 8007ff4:	04040222 	.word	0x04040222
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007ff8:	4583      	cmp	fp, r0
 8007ffa:	f47f af50 	bne.w	8007e9e <HAL_OSPIM_Config+0x1ca>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007ffe:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8008002:	4592      	cmp	sl, r2
 8008004:	f47f af4b 	bne.w	8007e9e <HAL_OSPIM_Config+0x1ca>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8008008:	4299      	cmp	r1, r3
 800800a:	f47f af48 	bne.w	8007e9e <HAL_OSPIM_Config+0x1ca>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800800e:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 800820c <HAL_OSPIM_Config+0x538>
 8008012:	f8dc 1000 	ldr.w	r1, [ip]
 8008016:	f041 0101 	orr.w	r1, r1, #1
 800801a:	f8cc 1000 	str.w	r1, [ip]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800801e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8008022:	f10e 4ea4 	add.w	lr, lr, #1375731712	; 0x52000000
 8008026:	f50e 4e34 	add.w	lr, lr, #46080	; 0xb400
 800802a:	f8de 1000 	ldr.w	r1, [lr]
 800802e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8008032:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8008036:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800803a:	f8ce 1000 	str.w	r1, [lr]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800803e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8008042:	f101 3eff 	add.w	lr, r1, #4294967295
 8008046:	4971      	ldr	r1, [pc, #452]	; (800820c <HAL_OSPIM_Config+0x538>)
 8008048:	f8d1 c000 	ldr.w	ip, [r1]
 800804c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8008050:	45e6      	cmp	lr, ip
 8008052:	d907      	bls.n	8008064 <HAL_OSPIM_Config+0x390>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8008054:	f8d1 c000 	ldr.w	ip, [r1]
 8008058:	f42c 0c7f 	bic.w	ip, ip, #16711680	; 0xff0000
 800805c:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 8008060:	f8c1 c000 	str.w	ip, [r1]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8008064:	6809      	ldr	r1, [r1, #0]
 8008066:	f402 3c80 	and.w	ip, r2, #65536	; 0x10000
 800806a:	f011 0f01 	tst.w	r1, #1
 800806e:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8008072:	f403 3780 	and.w	r7, r3, #65536	; 0x10000
 8008076:	f101 41a4 	add.w	r1, r1, #1375731712	; 0x52000000
 800807a:	f501 4134 	add.w	r1, r1, #46080	; 0xb400
 800807e:	d063      	beq.n	8008148 <HAL_OSPIM_Config+0x474>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8008080:	680c      	ldr	r4, [r1, #0]
 8008082:	f024 0403 	bic.w	r4, r4, #3
 8008086:	f044 0401 	orr.w	r4, r4, #1
 800808a:	600c      	str	r4, [r1, #0]
      if (cfg->DQSPort != 0U)
 800808c:	b150      	cbz	r0, 80080a4 <HAL_OSPIM_Config+0x3d0>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800808e:	0080      	lsls	r0, r0, #2
 8008090:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8008094:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8008098:	6801      	ldr	r1, [r0, #0]
 800809a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800809e:	f041 0110 	orr.w	r1, r1, #16
 80080a2:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80080a4:	f1bc 0f00 	cmp.w	ip, #0
 80080a8:	d02e      	beq.n	8008108 <HAL_OSPIM_Config+0x434>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80080aa:	3a01      	subs	r2, #1
 80080ac:	f002 0201 	and.w	r2, r2, #1
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 80080b6:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 80080ba:	6851      	ldr	r1, [r2, #4]
 80080bc:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80080c0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80080c4:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80080c6:	b37f      	cbz	r7, 8008128 <HAL_OSPIM_Config+0x454>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80080c8:	3b01      	subs	r3, #1
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80080d4:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80080de:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80080e2:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 80080e4:	b125      	cbz	r5, 80080f0 <HAL_OSPIM_Config+0x41c>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80080e6:	4a4a      	ldr	r2, [pc, #296]	; (8008210 <HAL_OSPIM_Config+0x53c>)
 80080e8:	6813      	ldr	r3, [r2, #0]
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	079b      	lsls	r3, r3, #30
 80080f4:	d504      	bpl.n	8008100 <HAL_OSPIM_Config+0x42c>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80080f6:	4a47      	ldr	r2, [pc, #284]	; (8008214 <HAL_OSPIM_Config+0x540>)
 80080f8:	6813      	ldr	r3, [r2, #0]
 80080fa:	f043 0301 	orr.w	r3, r3, #1
 80080fe:	6013      	str	r3, [r2, #0]
}
 8008100:	2000      	movs	r0, #0
 8008102:	b00f      	add	sp, #60	; 0x3c
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008108:	2a00      	cmp	r2, #0
 800810a:	d0dc      	beq.n	80080c6 <HAL_OSPIM_Config+0x3f2>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800810c:	3a01      	subs	r2, #1
 800810e:	f002 0201 	and.w	r2, r2, #1
 8008112:	0092      	lsls	r2, r2, #2
 8008114:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8008118:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800811c:	6851      	ldr	r1, [r2, #4]
 800811e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8008122:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008126:	e7cd      	b.n	80080c4 <HAL_OSPIM_Config+0x3f0>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0db      	beq.n	80080e4 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800812c:	3b01      	subs	r3, #1
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008138:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008142:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8008146:	e7cc      	b.n	80080e2 <HAL_OSPIM_Config+0x40e>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8008148:	f8d1 e000 	ldr.w	lr, [r1]
 800814c:	f02e 0e03 	bic.w	lr, lr, #3
 8008150:	ea4e 0e44 	orr.w	lr, lr, r4, lsl #1
 8008154:	f04e 0e01 	orr.w	lr, lr, #1
 8008158:	f8c1 e000 	str.w	lr, [r1]
      if (cfg->DQSPort != 0U)
 800815c:	b160      	cbz	r0, 8008178 <HAL_OSPIM_Config+0x4a4>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800815e:	0080      	lsls	r0, r0, #2
 8008160:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8008164:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8008168:	6801      	ldr	r1, [r0, #0]
 800816a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800816e:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8008172:	f041 0110 	orr.w	r1, r1, #16
 8008176:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008178:	f1bc 0f00 	cmp.w	ip, #0
 800817c:	d021      	beq.n	80081c2 <HAL_OSPIM_Config+0x4ee>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800817e:	3a01      	subs	r2, #1
 8008180:	f002 0201 	and.w	r2, r2, #1
 8008184:	0092      	lsls	r2, r2, #2
 8008186:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800818a:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800818e:	6851      	ldr	r1, [r2, #4]
 8008190:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8008194:	ea41 4184 	orr.w	r1, r1, r4, lsl #18
 8008198:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800819c:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800819e:	b317      	cbz	r7, 80081e6 <HAL_OSPIM_Config+0x512>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80081a0:	3b01      	subs	r3, #1
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80081ac:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80081b6:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 80081ba:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80081be:	605c      	str	r4, [r3, #4]
 80081c0:	e790      	b.n	80080e4 <HAL_OSPIM_Config+0x410>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d0eb      	beq.n	800819e <HAL_OSPIM_Config+0x4ca>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80081c6:	3a01      	subs	r2, #1
 80081c8:	f002 0201 	and.w	r2, r2, #1
 80081cc:	0092      	lsls	r2, r2, #2
 80081ce:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 80081d2:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 80081d6:	6851      	ldr	r1, [r2, #4]
 80081d8:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80081dc:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 80081e0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80081e4:	e7da      	b.n	800819c <HAL_OSPIM_Config+0x4c8>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f43f af7c 	beq.w	80080e4 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80081ec:	3b01      	subs	r3, #1
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80081f8:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008202:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 8008206:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 800820a:	e7d8      	b.n	80081be <HAL_OSPIM_Config+0x4ea>
 800820c:	5200b400 	.word	0x5200b400
 8008210:	52005000 	.word	0x52005000
 8008214:	5200a000 	.word	0x5200a000

08008218 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008218:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800821a:	4d1d      	ldr	r5, [pc, #116]	; (8008290 <HAL_PWREx_ConfigSupply+0x78>)
{
 800821c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800821e:	68eb      	ldr	r3, [r5, #12]
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	2b06      	cmp	r3, #6
 8008226:	d006      	beq.n	8008236 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008228:	68e8      	ldr	r0, [r5, #12]
 800822a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800822e:	1b00      	subs	r0, r0, r4
 8008230:	bf18      	it	ne
 8008232:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008234:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008236:	68eb      	ldr	r3, [r5, #12]
 8008238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800823c:	4303      	orrs	r3, r0
 800823e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008240:	f7fe f8b8 	bl	80063b4 <HAL_GetTick>
 8008244:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008246:	686b      	ldr	r3, [r5, #4]
 8008248:	049b      	lsls	r3, r3, #18
 800824a:	d508      	bpl.n	800825e <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800824c:	f1a4 031d 	sub.w	r3, r4, #29
 8008250:	2b01      	cmp	r3, #1
 8008252:	d90c      	bls.n	800826e <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008254:	3c2d      	subs	r4, #45	; 0x2d
 8008256:	2c01      	cmp	r4, #1
 8008258:	d909      	bls.n	800826e <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800825a:	2000      	movs	r0, #0
 800825c:	e7ea      	b.n	8008234 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800825e:	f7fe f8a9 	bl	80063b4 <HAL_GetTick>
 8008262:	1b80      	subs	r0, r0, r6
 8008264:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008268:	d9ed      	bls.n	8008246 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800826a:	2001      	movs	r0, #1
 800826c:	e7e2      	b.n	8008234 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800826e:	f7fe f8a1 	bl	80063b4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008272:	4d07      	ldr	r5, [pc, #28]	; (8008290 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 8008274:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008276:	68eb      	ldr	r3, [r5, #12]
 8008278:	f003 0311 	and.w	r3, r3, #17
 800827c:	2b11      	cmp	r3, #17
 800827e:	d0ec      	beq.n	800825a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008280:	f7fe f898 	bl	80063b4 <HAL_GetTick>
 8008284:	1b00      	subs	r0, r0, r4
 8008286:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800828a:	d9f4      	bls.n	8008276 <HAL_PWREx_ConfigSupply+0x5e>
 800828c:	e7ed      	b.n	800826a <HAL_PWREx_ConfigSupply+0x52>
 800828e:	bf00      	nop
 8008290:	58024800 	.word	0x58024800

08008294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008296:	4604      	mov	r4, r0
 8008298:	b908      	cbnz	r0, 800829e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800829a:	2001      	movs	r0, #1
 800829c:	e07f      	b.n	800839e <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800829e:	6803      	ldr	r3, [r0, #0]
 80082a0:	07df      	lsls	r7, r3, #31
 80082a2:	d453      	bmi.n	800834c <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	079e      	lsls	r6, r3, #30
 80082a8:	f100 80a3 	bmi.w	80083f2 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	06da      	lsls	r2, r3, #27
 80082b0:	d51c      	bpl.n	80082ec <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082b2:	4ba0      	ldr	r3, [pc, #640]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 80082b4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082b8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082bc:	2a08      	cmp	r2, #8
 80082be:	d007      	beq.n	80082d0 <HAL_RCC_OscConfig+0x3c>
 80082c0:	2a18      	cmp	r2, #24
 80082c2:	f040 80e5 	bne.w	8008490 <HAL_RCC_OscConfig+0x1fc>
 80082c6:	f001 0203 	and.w	r2, r1, #3
 80082ca:	2a01      	cmp	r2, #1
 80082cc:	f040 80e0 	bne.w	8008490 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	05db      	lsls	r3, r3, #23
 80082d4:	d502      	bpl.n	80082dc <HAL_RCC_OscConfig+0x48>
 80082d6:	69e3      	ldr	r3, [r4, #28]
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d1de      	bne.n	800829a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082dc:	4a95      	ldr	r2, [pc, #596]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 80082de:	6a21      	ldr	r1, [r4, #32]
 80082e0:	68d3      	ldr	r3, [r2, #12]
 80082e2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80082e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80082ea:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	0719      	lsls	r1, r3, #28
 80082f0:	f100 80fb 	bmi.w	80084ea <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	069a      	lsls	r2, r3, #26
 80082f8:	f100 8120 	bmi.w	800853c <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	075d      	lsls	r5, r3, #29
 8008300:	d51e      	bpl.n	8008340 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 8008302:	4d8d      	ldr	r5, [pc, #564]	; (8008538 <HAL_RCC_OscConfig+0x2a4>)
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800830a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800830c:	f7fe f852 	bl	80063b4 <HAL_GetTick>
 8008310:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008312:	682b      	ldr	r3, [r5, #0]
 8008314:	05da      	lsls	r2, r3, #23
 8008316:	f140 8136 	bpl.w	8008586 <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	4d85      	ldr	r5, [pc, #532]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 800831e:	2b01      	cmp	r3, #1
 8008320:	f040 8138 	bne.w	8008594 <HAL_RCC_OscConfig+0x300>
 8008324:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008326:	f043 0301 	orr.w	r3, r3, #1
 800832a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800832c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008330:	f7fe f840 	bl	80063b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008334:	4e7f      	ldr	r6, [pc, #508]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
      tickstart = HAL_GetTick();
 8008336:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008338:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800833a:	079b      	lsls	r3, r3, #30
 800833c:	f140 8150 	bpl.w	80085e0 <HAL_RCC_OscConfig+0x34c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008340:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008342:	2800      	cmp	r0, #0
 8008344:	f040 8153 	bne.w	80085ee <HAL_RCC_OscConfig+0x35a>
      }
    }
  }
  return HAL_OK;
 8008348:	2000      	movs	r0, #0
 800834a:	e028      	b.n	800839e <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800834c:	4b79      	ldr	r3, [pc, #484]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 800834e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008350:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008352:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008356:	2a10      	cmp	r2, #16
 8008358:	d005      	beq.n	8008366 <HAL_RCC_OscConfig+0xd2>
 800835a:	2a18      	cmp	r2, #24
 800835c:	d10a      	bne.n	8008374 <HAL_RCC_OscConfig+0xe0>
 800835e:	f001 0203 	and.w	r2, r1, #3
 8008362:	2a02      	cmp	r2, #2
 8008364:	d106      	bne.n	8008374 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	039d      	lsls	r5, r3, #14
 800836a:	d59b      	bpl.n	80082a4 <HAL_RCC_OscConfig+0x10>
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d198      	bne.n	80082a4 <HAL_RCC_OscConfig+0x10>
 8008372:	e792      	b.n	800829a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008374:	6862      	ldr	r2, [r4, #4]
 8008376:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800837a:	d111      	bne.n	80083a0 <HAL_RCC_OscConfig+0x10c>
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008382:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008384:	f7fe f816 	bl	80063b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008388:	4e6a      	ldr	r6, [pc, #424]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 800838a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800838c:	6833      	ldr	r3, [r6, #0]
 800838e:	0398      	lsls	r0, r3, #14
 8008390:	d488      	bmi.n	80082a4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008392:	f7fe f80f 	bl	80063b4 <HAL_GetTick>
 8008396:	1b40      	subs	r0, r0, r5
 8008398:	2864      	cmp	r0, #100	; 0x64
 800839a:	d9f7      	bls.n	800838c <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 800839c:	2003      	movs	r0, #3
}
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083a0:	4d64      	ldr	r5, [pc, #400]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	b99a      	cbnz	r2, 80083ce <HAL_RCC_OscConfig+0x13a>
 80083a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083aa:	602b      	str	r3, [r5, #0]
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80083b4:	f7fd fffe 	bl	80063b4 <HAL_GetTick>
 80083b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	0399      	lsls	r1, r3, #14
 80083be:	f57f af71 	bpl.w	80082a4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c2:	f7fd fff7 	bl	80063b4 <HAL_GetTick>
 80083c6:	1b80      	subs	r0, r0, r6
 80083c8:	2864      	cmp	r0, #100	; 0x64
 80083ca:	d9f6      	bls.n	80083ba <HAL_RCC_OscConfig+0x126>
 80083cc:	e7e6      	b.n	800839c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ce:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80083d2:	d107      	bne.n	80083e4 <HAL_RCC_OscConfig+0x150>
 80083d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	e7cf      	b.n	8008384 <HAL_RCC_OscConfig+0xf0>
 80083e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	682b      	ldr	r3, [r5, #0]
 80083ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083f0:	e7f6      	b.n	80083e0 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083f2:	4b50      	ldr	r3, [pc, #320]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 80083f4:	68e1      	ldr	r1, [r4, #12]
 80083f6:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083fa:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80083fe:	d003      	beq.n	8008408 <HAL_RCC_OscConfig+0x174>
 8008400:	2a18      	cmp	r2, #24
 8008402:	d121      	bne.n	8008448 <HAL_RCC_OscConfig+0x1b4>
 8008404:	0782      	lsls	r2, r0, #30
 8008406:	d11f      	bne.n	8008448 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	075b      	lsls	r3, r3, #29
 800840c:	d502      	bpl.n	8008414 <HAL_RCC_OscConfig+0x180>
 800840e:	2900      	cmp	r1, #0
 8008410:	f43f af43 	beq.w	800829a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008414:	4d47      	ldr	r5, [pc, #284]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 8008416:	682a      	ldr	r2, [r5, #0]
 8008418:	f022 0219 	bic.w	r2, r2, #25
 800841c:	430a      	orrs	r2, r1
 800841e:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8008420:	f7fd ffc8 	bl	80063b4 <HAL_GetTick>
 8008424:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	075f      	lsls	r7, r3, #29
 800842a:	d507      	bpl.n	800843c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800842c:	686b      	ldr	r3, [r5, #4]
 800842e:	6922      	ldr	r2, [r4, #16]
 8008430:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008434:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008438:	606b      	str	r3, [r5, #4]
 800843a:	e737      	b.n	80082ac <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800843c:	f7fd ffba 	bl	80063b4 <HAL_GetTick>
 8008440:	1b80      	subs	r0, r0, r6
 8008442:	2802      	cmp	r0, #2
 8008444:	d9ef      	bls.n	8008426 <HAL_RCC_OscConfig+0x192>
 8008446:	e7a9      	b.n	800839c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008448:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800844a:	b181      	cbz	r1, 800846e <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800844c:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008450:	4d38      	ldr	r5, [pc, #224]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008452:	430a      	orrs	r2, r1
 8008454:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008456:	f7fd ffad 	bl	80063b4 <HAL_GetTick>
 800845a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	0758      	lsls	r0, r3, #29
 8008460:	d4e4      	bmi.n	800842c <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008462:	f7fd ffa7 	bl	80063b4 <HAL_GetTick>
 8008466:	1b80      	subs	r0, r0, r6
 8008468:	2802      	cmp	r0, #2
 800846a:	d9f7      	bls.n	800845c <HAL_RCC_OscConfig+0x1c8>
 800846c:	e796      	b.n	800839c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 800846e:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008472:	4e30      	ldr	r6, [pc, #192]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_DISABLE();
 8008474:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008476:	f7fd ff9d 	bl	80063b4 <HAL_GetTick>
 800847a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800847c:	6833      	ldr	r3, [r6, #0]
 800847e:	0759      	lsls	r1, r3, #29
 8008480:	f57f af14 	bpl.w	80082ac <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008484:	f7fd ff96 	bl	80063b4 <HAL_GetTick>
 8008488:	1b40      	subs	r0, r0, r5
 800848a:	2802      	cmp	r0, #2
 800848c:	d9f6      	bls.n	800847c <HAL_RCC_OscConfig+0x1e8>
 800848e:	e785      	b.n	800839c <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008490:	69e2      	ldr	r2, [r4, #28]
 8008492:	b1c2      	cbz	r2, 80084c6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 8008494:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008496:	4d27      	ldr	r5, [pc, #156]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_ENABLE();
 8008498:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800849c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800849e:	f7fd ff89 	bl	80063b4 <HAL_GetTick>
 80084a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	05df      	lsls	r7, r3, #23
 80084a8:	d507      	bpl.n	80084ba <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084aa:	68eb      	ldr	r3, [r5, #12]
 80084ac:	6a22      	ldr	r2, [r4, #32]
 80084ae:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80084b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084b6:	60eb      	str	r3, [r5, #12]
 80084b8:	e718      	b.n	80082ec <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084ba:	f7fd ff7b 	bl	80063b4 <HAL_GetTick>
 80084be:	1b80      	subs	r0, r0, r6
 80084c0:	2802      	cmp	r0, #2
 80084c2:	d9ef      	bls.n	80084a4 <HAL_RCC_OscConfig+0x210>
 80084c4:	e76a      	b.n	800839c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 80084c6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084c8:	4e1a      	ldr	r6, [pc, #104]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_DISABLE();
 80084ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80084d0:	f7fd ff70 	bl	80063b4 <HAL_GetTick>
 80084d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084d6:	6833      	ldr	r3, [r6, #0]
 80084d8:	05d8      	lsls	r0, r3, #23
 80084da:	f57f af07 	bpl.w	80082ec <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084de:	f7fd ff69 	bl	80063b4 <HAL_GetTick>
 80084e2:	1b40      	subs	r0, r0, r5
 80084e4:	2802      	cmp	r0, #2
 80084e6:	d9f6      	bls.n	80084d6 <HAL_RCC_OscConfig+0x242>
 80084e8:	e758      	b.n	800839c <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084ea:	6963      	ldr	r3, [r4, #20]
 80084ec:	4d11      	ldr	r5, [pc, #68]	; (8008534 <HAL_RCC_OscConfig+0x2a0>)
 80084ee:	b183      	cbz	r3, 8008512 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 80084f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80084f2:	f043 0301 	orr.w	r3, r3, #1
 80084f6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80084f8:	f7fd ff5c 	bl	80063b4 <HAL_GetTick>
 80084fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008500:	079b      	lsls	r3, r3, #30
 8008502:	f53f aef7 	bmi.w	80082f4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008506:	f7fd ff55 	bl	80063b4 <HAL_GetTick>
 800850a:	1b80      	subs	r0, r0, r6
 800850c:	2802      	cmp	r0, #2
 800850e:	d9f6      	bls.n	80084fe <HAL_RCC_OscConfig+0x26a>
 8008510:	e744      	b.n	800839c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_LSI_DISABLE();
 8008512:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008514:	f023 0301 	bic.w	r3, r3, #1
 8008518:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800851a:	f7fd ff4b 	bl	80063b4 <HAL_GetTick>
 800851e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008520:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008522:	079f      	lsls	r7, r3, #30
 8008524:	f57f aee6 	bpl.w	80082f4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008528:	f7fd ff44 	bl	80063b4 <HAL_GetTick>
 800852c:	1b80      	subs	r0, r0, r6
 800852e:	2802      	cmp	r0, #2
 8008530:	d9f6      	bls.n	8008520 <HAL_RCC_OscConfig+0x28c>
 8008532:	e733      	b.n	800839c <HAL_RCC_OscConfig+0x108>
 8008534:	58024400 	.word	0x58024400
 8008538:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800853c:	69a3      	ldr	r3, [r4, #24]
 800853e:	4d83      	ldr	r5, [pc, #524]	; (800874c <HAL_RCC_OscConfig+0x4b8>)
 8008540:	b183      	cbz	r3, 8008564 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_HSI48_ENABLE();
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008548:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800854a:	f7fd ff33 	bl	80063b4 <HAL_GetTick>
 800854e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	0498      	lsls	r0, r3, #18
 8008554:	f53f aed2 	bmi.w	80082fc <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008558:	f7fd ff2c 	bl	80063b4 <HAL_GetTick>
 800855c:	1b80      	subs	r0, r0, r6
 800855e:	2802      	cmp	r0, #2
 8008560:	d9f6      	bls.n	8008550 <HAL_RCC_OscConfig+0x2bc>
 8008562:	e71b      	b.n	800839c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800856a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800856c:	f7fd ff22 	bl	80063b4 <HAL_GetTick>
 8008570:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	0499      	lsls	r1, r3, #18
 8008576:	f57f aec1 	bpl.w	80082fc <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800857a:	f7fd ff1b 	bl	80063b4 <HAL_GetTick>
 800857e:	1b80      	subs	r0, r0, r6
 8008580:	2802      	cmp	r0, #2
 8008582:	d9f6      	bls.n	8008572 <HAL_RCC_OscConfig+0x2de>
 8008584:	e70a      	b.n	800839c <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008586:	f7fd ff15 	bl	80063b4 <HAL_GetTick>
 800858a:	1b80      	subs	r0, r0, r6
 800858c:	2864      	cmp	r0, #100	; 0x64
 800858e:	f67f aec0 	bls.w	8008312 <HAL_RCC_OscConfig+0x7e>
 8008592:	e703      	b.n	800839c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008594:	b9b3      	cbnz	r3, 80085c4 <HAL_RCC_OscConfig+0x330>
 8008596:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008598:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800859c:	f023 0301 	bic.w	r3, r3, #1
 80085a0:	672b      	str	r3, [r5, #112]	; 0x70
 80085a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085a4:	f023 0304 	bic.w	r3, r3, #4
 80085a8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80085aa:	f7fd ff03 	bl	80063b4 <HAL_GetTick>
 80085ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085b2:	0798      	lsls	r0, r3, #30
 80085b4:	f57f aec4 	bpl.w	8008340 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085b8:	f7fd fefc 	bl	80063b4 <HAL_GetTick>
 80085bc:	1b80      	subs	r0, r0, r6
 80085be:	42b8      	cmp	r0, r7
 80085c0:	d9f6      	bls.n	80085b0 <HAL_RCC_OscConfig+0x31c>
 80085c2:	e6eb      	b.n	800839c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c4:	2b05      	cmp	r3, #5
 80085c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085c8:	d103      	bne.n	80085d2 <HAL_RCC_OscConfig+0x33e>
 80085ca:	f043 0304 	orr.w	r3, r3, #4
 80085ce:	672b      	str	r3, [r5, #112]	; 0x70
 80085d0:	e6a8      	b.n	8008324 <HAL_RCC_OscConfig+0x90>
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	672b      	str	r3, [r5, #112]	; 0x70
 80085d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085da:	f023 0304 	bic.w	r3, r3, #4
 80085de:	e6a4      	b.n	800832a <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085e0:	f7fd fee8 	bl	80063b4 <HAL_GetTick>
 80085e4:	1b40      	subs	r0, r0, r5
 80085e6:	42b8      	cmp	r0, r7
 80085e8:	f67f aea6 	bls.w	8008338 <HAL_RCC_OscConfig+0xa4>
 80085ec:	e6d6      	b.n	800839c <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80085ee:	4d57      	ldr	r5, [pc, #348]	; (800874c <HAL_RCC_OscConfig+0x4b8>)
 80085f0:	692b      	ldr	r3, [r5, #16]
 80085f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085f6:	2b18      	cmp	r3, #24
 80085f8:	d07a      	beq.n	80086f0 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 80085fa:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085fc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80085fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008602:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008604:	d167      	bne.n	80086d6 <HAL_RCC_OscConfig+0x442>
        tickstart = HAL_GetTick();
 8008606:	f7fd fed5 	bl	80063b4 <HAL_GetTick>
 800860a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	0199      	lsls	r1, r3, #6
 8008610:	d45b      	bmi.n	80086ca <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008612:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008616:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	4313      	orrs	r3, r2
 8008620:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008622:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008626:	62ab      	str	r3, [r5, #40]	; 0x28
 8008628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800862a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800862c:	3b01      	subs	r3, #1
 800862e:	3a01      	subs	r2, #1
 8008630:	025b      	lsls	r3, r3, #9
 8008632:	0412      	lsls	r2, r2, #16
 8008634:	b29b      	uxth	r3, r3
 8008636:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800863a:	4313      	orrs	r3, r2
 800863c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800863e:	3a01      	subs	r2, #1
 8008640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008644:	4313      	orrs	r3, r2
 8008646:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008648:	3a01      	subs	r2, #1
 800864a:	0612      	lsls	r2, r2, #24
 800864c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008650:	4313      	orrs	r3, r2
 8008652:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008654:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008656:	f023 0301 	bic.w	r3, r3, #1
 800865a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800865c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800865e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008660:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008664:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008668:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800866c:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800866e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008670:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008672:	f023 030c 	bic.w	r3, r3, #12
 8008676:	4313      	orrs	r3, r2
 8008678:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800867a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800867c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800867e:	f023 0302 	bic.w	r3, r3, #2
 8008682:	4313      	orrs	r3, r2
 8008684:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008686:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800868c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800868e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008694:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008696:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800869c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800869e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80086ae:	f7fd fe81 	bl	80063b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086b2:	4d26      	ldr	r5, [pc, #152]	; (800874c <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 80086b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	019a      	lsls	r2, r3, #6
 80086ba:	f53f ae45 	bmi.w	8008348 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086be:	f7fd fe79 	bl	80063b4 <HAL_GetTick>
 80086c2:	1b00      	subs	r0, r0, r4
 80086c4:	2802      	cmp	r0, #2
 80086c6:	d9f6      	bls.n	80086b6 <HAL_RCC_OscConfig+0x422>
 80086c8:	e668      	b.n	800839c <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ca:	f7fd fe73 	bl	80063b4 <HAL_GetTick>
 80086ce:	1b80      	subs	r0, r0, r6
 80086d0:	2802      	cmp	r0, #2
 80086d2:	d99b      	bls.n	800860c <HAL_RCC_OscConfig+0x378>
 80086d4:	e662      	b.n	800839c <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 80086d6:	f7fd fe6d 	bl	80063b4 <HAL_GetTick>
 80086da:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	019b      	lsls	r3, r3, #6
 80086e0:	f57f ae32 	bpl.w	8008348 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e4:	f7fd fe66 	bl	80063b4 <HAL_GetTick>
 80086e8:	1b00      	subs	r0, r0, r4
 80086ea:	2802      	cmp	r0, #2
 80086ec:	d9f6      	bls.n	80086dc <HAL_RCC_OscConfig+0x448>
 80086ee:	e655      	b.n	800839c <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086f0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086f6:	f43f ae52 	beq.w	800839e <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086fa:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008700:	4281      	cmp	r1, r0
 8008702:	f47f adca 	bne.w	800829a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008706:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800870a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800870c:	428a      	cmp	r2, r1
 800870e:	f47f adc4 	bne.w	800829a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008712:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008714:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8008718:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800871a:	4291      	cmp	r1, r2
 800871c:	f47f adbd 	bne.w	800829a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008720:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008722:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8008726:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008728:	4291      	cmp	r1, r2
 800872a:	f47f adb6 	bne.w	800829a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800872e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008730:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8008734:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008736:	4291      	cmp	r1, r2
 8008738:	f47f adaf 	bne.w	800829a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800873c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800873e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008742:	3801      	subs	r0, #1
  return HAL_OK;
 8008744:	1a18      	subs	r0, r3, r0
 8008746:	bf18      	it	ne
 8008748:	2001      	movne	r0, #1
 800874a:	e628      	b.n	800839e <HAL_RCC_OscConfig+0x10a>
 800874c:	58024400 	.word	0x58024400

08008750 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008750:	4b48      	ldr	r3, [pc, #288]	; (8008874 <HAL_RCC_GetSysClockFreq+0x124>)
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008758:	2a10      	cmp	r2, #16
{
 800875a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800875c:	f000 8086 	beq.w	800886c <HAL_RCC_GetSysClockFreq+0x11c>
 8008760:	2a18      	cmp	r2, #24
 8008762:	d00c      	beq.n	800877e <HAL_RCC_GetSysClockFreq+0x2e>
 8008764:	2a00      	cmp	r2, #0
 8008766:	f040 8083 	bne.w	8008870 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4842      	ldr	r0, [pc, #264]	; (8008878 <HAL_RCC_GetSysClockFreq+0x128>)
 800876e:	f012 0f20 	tst.w	r2, #32
 8008772:	d003      	beq.n	800877c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800877a:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800877c:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800877e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008780:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8008784:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008788:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800878c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 800878e:	d0f5      	beq.n	800877c <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008790:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008794:	f002 0201 	and.w	r2, r2, #1
 8008798:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800879c:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087a0:	4362      	muls	r2, r4
 80087a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80087a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80087aa:	2901      	cmp	r1, #1
 80087ac:	ee07 2a90 	vmov	s15, r2
 80087b0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80087b4:	d04c      	beq.n	8008850 <HAL_RCC_GetSysClockFreq+0x100>
 80087b6:	2902      	cmp	r1, #2
 80087b8:	d03c      	beq.n	8008834 <HAL_RCC_GetSysClockFreq+0xe4>
 80087ba:	2900      	cmp	r1, #0
 80087bc:	d148      	bne.n	8008850 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	0692      	lsls	r2, r2, #26
 80087c2:	d527      	bpl.n	8008814 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087c4:	6819      	ldr	r1, [r3, #0]
 80087c6:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <HAL_RCC_GetSysClockFreq+0x128>)
 80087c8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ce:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	ee07 2a10 	vmov	s14, r2
 80087d8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80087dc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80087e0:	ee06 3a90 	vmov	s13, r3
 80087e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80087e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ec:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80087f0:	4b20      	ldr	r3, [pc, #128]	; (8008874 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087f2:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80087fc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80087fe:	ee07 3a10 	vmov	s14, r3
 8008802:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008806:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800880a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800880e:	ee17 0a90 	vmov	r0, s15
 8008812:	e7b3      	b.n	800877c <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881a:	ee07 3a10 	vmov	s14, r3
 800881e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008826:	ee77 7a86 	vadd.f32	s15, s15, s12
 800882a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800887c <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800882e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008832:	e7dd      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883a:	ee07 3a10 	vmov	s14, r3
 800883e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008846:	ee77 7a86 	vadd.f32	s15, s15, s12
 800884a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8008880 <HAL_RCC_GetSysClockFreq+0x130>
 800884e:	e7ee      	b.n	800882e <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a10 	vmov	s14, r3
 800885a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800885e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008862:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008866:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008884 <HAL_RCC_GetSysClockFreq+0x134>
 800886a:	e7e0      	b.n	800882e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800886c:	4806      	ldr	r0, [pc, #24]	; (8008888 <HAL_RCC_GetSysClockFreq+0x138>)
 800886e:	e785      	b.n	800877c <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8008870:	4806      	ldr	r0, [pc, #24]	; (800888c <HAL_RCC_GetSysClockFreq+0x13c>)
 8008872:	e783      	b.n	800877c <HAL_RCC_GetSysClockFreq+0x2c>
 8008874:	58024400 	.word	0x58024400
 8008878:	03d09000 	.word	0x03d09000
 800887c:	4c742400 	.word	0x4c742400
 8008880:	4b989680 	.word	0x4b989680
 8008884:	4a742400 	.word	0x4a742400
 8008888:	01312d00 	.word	0x01312d00
 800888c:	003d0900 	.word	0x003d0900

08008890 <HAL_RCC_ClockConfig>:
{
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008896:	4604      	mov	r4, r0
 8008898:	b910      	cbnz	r0, 80088a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800889a:	2001      	movs	r0, #1
}
 800889c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088a0:	4a88      	ldr	r2, [pc, #544]	; (8008ac4 <HAL_RCC_ClockConfig+0x234>)
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	428b      	cmp	r3, r1
 80088aa:	f0c0 8093 	bcc.w	80089d4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	075f      	lsls	r7, r3, #29
 80088b2:	f100 809b 	bmi.w	80089ec <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088b6:	071e      	lsls	r6, r3, #28
 80088b8:	d50b      	bpl.n	80088d2 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088ba:	4983      	ldr	r1, [pc, #524]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 80088bc:	6966      	ldr	r6, [r4, #20]
 80088be:	69c8      	ldr	r0, [r1, #28]
 80088c0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80088c4:	4286      	cmp	r6, r0
 80088c6:	d904      	bls.n	80088d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088c8:	69ca      	ldr	r2, [r1, #28]
 80088ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088ce:	4332      	orrs	r2, r6
 80088d0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d2:	06d8      	lsls	r0, r3, #27
 80088d4:	d50b      	bpl.n	80088ee <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088d6:	497c      	ldr	r1, [pc, #496]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 80088d8:	69a6      	ldr	r6, [r4, #24]
 80088da:	69c8      	ldr	r0, [r1, #28]
 80088dc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80088e0:	4286      	cmp	r6, r0
 80088e2:	d904      	bls.n	80088ee <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088e4:	69ca      	ldr	r2, [r1, #28]
 80088e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088ea:	4332      	orrs	r2, r6
 80088ec:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ee:	0699      	lsls	r1, r3, #26
 80088f0:	d50b      	bpl.n	800890a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088f2:	4975      	ldr	r1, [pc, #468]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 80088f4:	69e6      	ldr	r6, [r4, #28]
 80088f6:	6a08      	ldr	r0, [r1, #32]
 80088f8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80088fc:	4286      	cmp	r6, r0
 80088fe:	d904      	bls.n	800890a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008900:	6a0a      	ldr	r2, [r1, #32]
 8008902:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008906:	4332      	orrs	r2, r6
 8008908:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800890a:	079a      	lsls	r2, r3, #30
 800890c:	d50b      	bpl.n	8008926 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800890e:	496e      	ldr	r1, [pc, #440]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 8008910:	68e6      	ldr	r6, [r4, #12]
 8008912:	6988      	ldr	r0, [r1, #24]
 8008914:	f000 000f 	and.w	r0, r0, #15
 8008918:	4286      	cmp	r6, r0
 800891a:	d904      	bls.n	8008926 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800891c:	698a      	ldr	r2, [r1, #24]
 800891e:	f022 020f 	bic.w	r2, r2, #15
 8008922:	4332      	orrs	r2, r6
 8008924:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008926:	07df      	lsls	r7, r3, #31
 8008928:	d46e      	bmi.n	8008a08 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	079e      	lsls	r6, r3, #30
 800892e:	f100 80a1 	bmi.w	8008a74 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008932:	4964      	ldr	r1, [pc, #400]	; (8008ac4 <HAL_RCC_ClockConfig+0x234>)
 8008934:	680a      	ldr	r2, [r1, #0]
 8008936:	f002 020f 	and.w	r2, r2, #15
 800893a:	42aa      	cmp	r2, r5
 800893c:	f200 80a8 	bhi.w	8008a90 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008940:	0758      	lsls	r0, r3, #29
 8008942:	f100 80b1 	bmi.w	8008aa8 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008946:	0719      	lsls	r1, r3, #28
 8008948:	d50b      	bpl.n	8008962 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800894a:	495f      	ldr	r1, [pc, #380]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 800894c:	6965      	ldr	r5, [r4, #20]
 800894e:	69c8      	ldr	r0, [r1, #28]
 8008950:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008954:	4285      	cmp	r5, r0
 8008956:	d204      	bcs.n	8008962 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008958:	69ca      	ldr	r2, [r1, #28]
 800895a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800895e:	432a      	orrs	r2, r5
 8008960:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008962:	06da      	lsls	r2, r3, #27
 8008964:	d50b      	bpl.n	800897e <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008966:	4958      	ldr	r1, [pc, #352]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 8008968:	69a5      	ldr	r5, [r4, #24]
 800896a:	69c8      	ldr	r0, [r1, #28]
 800896c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008970:	4285      	cmp	r5, r0
 8008972:	d204      	bcs.n	800897e <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008974:	69ca      	ldr	r2, [r1, #28]
 8008976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800897a:	432a      	orrs	r2, r5
 800897c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800897e:	069b      	lsls	r3, r3, #26
 8008980:	d50b      	bpl.n	800899a <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008982:	4a51      	ldr	r2, [pc, #324]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 8008984:	69e0      	ldr	r0, [r4, #28]
 8008986:	6a11      	ldr	r1, [r2, #32]
 8008988:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800898c:	4288      	cmp	r0, r1
 800898e:	d204      	bcs.n	800899a <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008990:	6a13      	ldr	r3, [r2, #32]
 8008992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008996:	4303      	orrs	r3, r0
 8008998:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800899a:	f7ff fed9 	bl	8008750 <HAL_RCC_GetSysClockFreq>
 800899e:	494a      	ldr	r1, [pc, #296]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 80089a0:	4a4a      	ldr	r2, [pc, #296]	; (8008acc <HAL_RCC_ClockConfig+0x23c>)
 80089a2:	698b      	ldr	r3, [r1, #24]
 80089a4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80089a8:	5cd3      	ldrb	r3, [r2, r3]
 80089aa:	f003 031f 	and.w	r3, r3, #31
 80089ae:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089b0:	698b      	ldr	r3, [r1, #24]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	5cd3      	ldrb	r3, [r2, r3]
 80089b8:	4a45      	ldr	r2, [pc, #276]	; (8008ad0 <HAL_RCC_ClockConfig+0x240>)
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	fa20 f303 	lsr.w	r3, r0, r3
 80089c2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80089c4:	4b43      	ldr	r3, [pc, #268]	; (8008ad4 <HAL_RCC_ClockConfig+0x244>)
 80089c6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80089c8:	4b43      	ldr	r3, [pc, #268]	; (8008ad8 <HAL_RCC_ClockConfig+0x248>)
}
 80089ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	f7f9 b8e6 	b.w	8001ba0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d4:	6813      	ldr	r3, [r2, #0]
 80089d6:	f023 030f 	bic.w	r3, r3, #15
 80089da:	430b      	orrs	r3, r1
 80089dc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089de:	6813      	ldr	r3, [r2, #0]
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	428b      	cmp	r3, r1
 80089e6:	f47f af58 	bne.w	800889a <HAL_RCC_ClockConfig+0xa>
 80089ea:	e760      	b.n	80088ae <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089ec:	4936      	ldr	r1, [pc, #216]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 80089ee:	6926      	ldr	r6, [r4, #16]
 80089f0:	6988      	ldr	r0, [r1, #24]
 80089f2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80089f6:	4286      	cmp	r6, r0
 80089f8:	f67f af5d 	bls.w	80088b6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089fc:	698a      	ldr	r2, [r1, #24]
 80089fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a02:	4332      	orrs	r2, r6
 8008a04:	618a      	str	r2, [r1, #24]
 8008a06:	e756      	b.n	80088b6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a08:	4b2f      	ldr	r3, [pc, #188]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 8008a0a:	68a1      	ldr	r1, [r4, #8]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008a12:	430a      	orrs	r2, r1
 8008a14:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a16:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a18:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a1a:	2a02      	cmp	r2, #2
 8008a1c:	d11d      	bne.n	8008a5a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a22:	f43f af3a 	beq.w	800889a <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a26:	4e28      	ldr	r6, [pc, #160]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a28:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a2c:	6933      	ldr	r3, [r6, #16]
 8008a2e:	f023 0307 	bic.w	r3, r3, #7
 8008a32:	4313      	orrs	r3, r2
 8008a34:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8008a36:	f7fd fcbd 	bl	80063b4 <HAL_GetTick>
 8008a3a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a3c:	6933      	ldr	r3, [r6, #16]
 8008a3e:	6862      	ldr	r2, [r4, #4]
 8008a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a44:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008a48:	f43f af6f 	beq.w	800892a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a4c:	f7fd fcb2 	bl	80063b4 <HAL_GetTick>
 8008a50:	1bc0      	subs	r0, r0, r7
 8008a52:	4540      	cmp	r0, r8
 8008a54:	d9f2      	bls.n	8008a3c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008a56:	2003      	movs	r0, #3
 8008a58:	e720      	b.n	800889c <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a5a:	2a03      	cmp	r2, #3
 8008a5c:	d102      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008a62:	e7de      	b.n	8008a22 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a64:	2a01      	cmp	r2, #1
 8008a66:	d102      	bne.n	8008a6e <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a6c:	e7d9      	b.n	8008a22 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a6e:	f013 0f04 	tst.w	r3, #4
 8008a72:	e7d6      	b.n	8008a22 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a74:	4914      	ldr	r1, [pc, #80]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 8008a76:	68e6      	ldr	r6, [r4, #12]
 8008a78:	6988      	ldr	r0, [r1, #24]
 8008a7a:	f000 000f 	and.w	r0, r0, #15
 8008a7e:	4286      	cmp	r6, r0
 8008a80:	f4bf af57 	bcs.w	8008932 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a84:	698a      	ldr	r2, [r1, #24]
 8008a86:	f022 020f 	bic.w	r2, r2, #15
 8008a8a:	4332      	orrs	r2, r6
 8008a8c:	618a      	str	r2, [r1, #24]
 8008a8e:	e750      	b.n	8008932 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a90:	680a      	ldr	r2, [r1, #0]
 8008a92:	f022 020f 	bic.w	r2, r2, #15
 8008a96:	432a      	orrs	r2, r5
 8008a98:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9a:	680a      	ldr	r2, [r1, #0]
 8008a9c:	f002 020f 	and.w	r2, r2, #15
 8008aa0:	42aa      	cmp	r2, r5
 8008aa2:	f47f aefa 	bne.w	800889a <HAL_RCC_ClockConfig+0xa>
 8008aa6:	e74b      	b.n	8008940 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008aa8:	4907      	ldr	r1, [pc, #28]	; (8008ac8 <HAL_RCC_ClockConfig+0x238>)
 8008aaa:	6925      	ldr	r5, [r4, #16]
 8008aac:	6988      	ldr	r0, [r1, #24]
 8008aae:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008ab2:	4285      	cmp	r5, r0
 8008ab4:	f4bf af47 	bcs.w	8008946 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ab8:	698a      	ldr	r2, [r1, #24]
 8008aba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008abe:	432a      	orrs	r2, r5
 8008ac0:	618a      	str	r2, [r1, #24]
 8008ac2:	e740      	b.n	8008946 <HAL_RCC_ClockConfig+0xb6>
 8008ac4:	52002000 	.word	0x52002000
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	0801e610 	.word	0x0801e610
 8008ad0:	24000070 	.word	0x24000070
 8008ad4:	2400006c 	.word	0x2400006c
 8008ad8:	24000078 	.word	0x24000078

08008adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008adc:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ade:	4c0c      	ldr	r4, [pc, #48]	; (8008b10 <HAL_RCC_GetHCLKFreq+0x34>)
 8008ae0:	f7ff fe36 	bl	8008750 <HAL_RCC_GetSysClockFreq>
 8008ae4:	490b      	ldr	r1, [pc, #44]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x38>)
 8008ae6:	69a3      	ldr	r3, [r4, #24]
 8008ae8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008aec:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008aee:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008af0:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008af4:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008af8:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008afc:	5ccb      	ldrb	r3, [r1, r3]
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	fa22 f003 	lsr.w	r0, r2, r3
 8008b06:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x3c>)
 8008b08:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <HAL_RCC_GetHCLKFreq+0x40>)
 8008b0c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008b0e:	bd10      	pop	{r4, pc}
 8008b10:	58024400 	.word	0x58024400
 8008b14:	0801e610 	.word	0x0801e610
 8008b18:	24000070 	.word	0x24000070
 8008b1c:	2400006c 	.word	0x2400006c

08008b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b20:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b22:	f7ff ffdb 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008b28:	4a05      	ldr	r2, [pc, #20]	; (8008b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008b30:	5cd3      	ldrb	r3, [r2, r3]
 8008b32:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b36:	40d8      	lsrs	r0, r3
 8008b38:	bd08      	pop	{r3, pc}
 8008b3a:	bf00      	nop
 8008b3c:	58024400 	.word	0x58024400
 8008b40:	0801e610 	.word	0x0801e610

08008b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b44:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b46:	f7ff ffc9 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008b4c:	4a05      	ldr	r2, [pc, #20]	; (8008b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008b54:	5cd3      	ldrb	r3, [r2, r3]
 8008b56:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b5a:	40d8      	lsrs	r0, r3
 8008b5c:	bd08      	pop	{r3, pc}
 8008b5e:	bf00      	nop
 8008b60:	58024400 	.word	0x58024400
 8008b64:	0801e610 	.word	0x0801e610

08008b68 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008b68:	233f      	movs	r3, #63	; 0x3f
 8008b6a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <HAL_RCC_GetClockConfig+0x4c>)
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	f002 0207 	and.w	r2, r2, #7
 8008b74:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008b76:	699a      	ldr	r2, [r3, #24]
 8008b78:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008b7c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	f002 020f 	and.w	r2, r2, #15
 8008b84:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b8c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008b8e:	69da      	ldr	r2, [r3, #28]
 8008b90:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b94:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008b9c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ba4:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ba6:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <HAL_RCC_GetClockConfig+0x50>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 030f 	and.w	r3, r3, #15
 8008bae:	600b      	str	r3, [r1, #0]
}
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	52002000 	.word	0x52002000

08008bbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bbe:	4c3a      	ldr	r4, [pc, #232]	; (8008ca8 <RCCEx_PLL2_Config+0xec>)
{
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d069      	beq.n	8008ca2 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bd4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd6:	f7fd fbed 	bl	80063b4 <HAL_GetTick>
 8008bda:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	011a      	lsls	r2, r3, #4
 8008be0:	d44b      	bmi.n	8008c7a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008be2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008be4:	6832      	ldr	r2, [r6, #0]
 8008be6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008bea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008bee:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bf0:	68b3      	ldr	r3, [r6, #8]
 8008bf2:	68f2      	ldr	r2, [r6, #12]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	025b      	lsls	r3, r3, #9
 8008bfa:	0412      	lsls	r2, r2, #16
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008c02:	4313      	orrs	r3, r2
 8008c04:	6872      	ldr	r2, [r6, #4]
 8008c06:	3a01      	subs	r2, #1
 8008c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	6932      	ldr	r2, [r6, #16]
 8008c10:	3a01      	subs	r2, #1
 8008c12:	0612      	lsls	r2, r2, #24
 8008c14:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c1e:	6972      	ldr	r2, [r6, #20]
 8008c20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c24:	4313      	orrs	r3, r2
 8008c26:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c2a:	69b2      	ldr	r2, [r6, #24]
 8008c2c:	f023 0320 	bic.w	r3, r3, #32
 8008c30:	4313      	orrs	r3, r2
 8008c32:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c36:	f023 0310 	bic.w	r3, r3, #16
 8008c3a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c3e:	69f2      	ldr	r2, [r6, #28]
 8008c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008c4c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c50:	f043 0310 	orr.w	r3, r3, #16
 8008c54:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c58:	b9b5      	cbnz	r5, 8008c88 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c60:	4c11      	ldr	r4, [pc, #68]	; (8008ca8 <RCCEx_PLL2_Config+0xec>)
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c68:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6a:	f7fd fba3 	bl	80063b4 <HAL_GetTick>
 8008c6e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	d50f      	bpl.n	8008c96 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8008c76:	2000      	movs	r0, #0
 8008c78:	e005      	b.n	8008c86 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c7a:	f7fd fb9b 	bl	80063b4 <HAL_GetTick>
 8008c7e:	1bc0      	subs	r0, r0, r7
 8008c80:	2802      	cmp	r0, #2
 8008c82:	d9ab      	bls.n	8008bdc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8008c84:	2003      	movs	r0, #3
}
 8008c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c88:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c8a:	bf0c      	ite	eq
 8008c8c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c90:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008c94:	e7e3      	b.n	8008c5e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c96:	f7fd fb8d 	bl	80063b4 <HAL_GetTick>
 8008c9a:	1b40      	subs	r0, r0, r5
 8008c9c:	2802      	cmp	r0, #2
 8008c9e:	d9e7      	bls.n	8008c70 <RCCEx_PLL2_Config+0xb4>
 8008ca0:	e7f0      	b.n	8008c84 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	e7ef      	b.n	8008c86 <RCCEx_PLL2_Config+0xca>
 8008ca6:	bf00      	nop
 8008ca8:	58024400 	.word	0x58024400

08008cac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cae:	4c3a      	ldr	r4, [pc, #232]	; (8008d98 <RCCEx_PLL3_Config+0xec>)
{
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d069      	beq.n	8008d92 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc6:	f7fd fb75 	bl	80063b4 <HAL_GetTick>
 8008cca:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	009a      	lsls	r2, r3, #2
 8008cd0:	d44b      	bmi.n	8008d6a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008cd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cd4:	6832      	ldr	r2, [r6, #0]
 8008cd6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008cda:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008cde:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ce0:	68b3      	ldr	r3, [r6, #8]
 8008ce2:	68f2      	ldr	r2, [r6, #12]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	3a01      	subs	r2, #1
 8008ce8:	025b      	lsls	r3, r3, #9
 8008cea:	0412      	lsls	r2, r2, #16
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	6872      	ldr	r2, [r6, #4]
 8008cf6:	3a01      	subs	r2, #1
 8008cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	6932      	ldr	r2, [r6, #16]
 8008d00:	3a01      	subs	r2, #1
 8008d02:	0612      	lsls	r2, r2, #24
 8008d04:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d0e:	6972      	ldr	r2, [r6, #20]
 8008d10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d14:	4313      	orrs	r3, r2
 8008d16:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d1a:	69b2      	ldr	r2, [r6, #24]
 8008d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d20:	4313      	orrs	r3, r2
 8008d22:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d2a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d2e:	69f2      	ldr	r2, [r6, #28]
 8008d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008d3c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d44:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008d48:	b9b5      	cbnz	r5, 8008d78 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d50:	4c11      	ldr	r4, [pc, #68]	; (8008d98 <RCCEx_PLL3_Config+0xec>)
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5a:	f7fd fb2b 	bl	80063b4 <HAL_GetTick>
 8008d5e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	d50f      	bpl.n	8008d86 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8008d66:	2000      	movs	r0, #0
 8008d68:	e005      	b.n	8008d76 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d6a:	f7fd fb23 	bl	80063b4 <HAL_GetTick>
 8008d6e:	1bc0      	subs	r0, r0, r7
 8008d70:	2802      	cmp	r0, #2
 8008d72:	d9ab      	bls.n	8008ccc <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8008d74:	2003      	movs	r0, #3
}
 8008d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d78:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d7a:	bf0c      	ite	eq
 8008d7c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d80:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008d84:	e7e3      	b.n	8008d4e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d86:	f7fd fb15 	bl	80063b4 <HAL_GetTick>
 8008d8a:	1b40      	subs	r0, r0, r5
 8008d8c:	2802      	cmp	r0, #2
 8008d8e:	d9e7      	bls.n	8008d60 <RCCEx_PLL3_Config+0xb4>
 8008d90:	e7f0      	b.n	8008d74 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8008d92:	2001      	movs	r0, #1
 8008d94:	e7ef      	b.n	8008d76 <RCCEx_PLL3_Config+0xca>
 8008d96:	bf00      	nop
 8008d98:	58024400 	.word	0x58024400

08008d9c <HAL_RCCEx_PeriphCLKConfig>:
{
 8008d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008da0:	6806      	ldr	r6, [r0, #0]
{
 8008da2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008da4:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8008da8:	d009      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008daa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008db0:	d02c      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8008db2:	d811      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8008db4:	b1e3      	cbz	r3, 8008df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dba:	d01f      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008dbc:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	05d8      	lsls	r0, r3, #23
 8008dc2:	f140 80d7 	bpl.w	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008dc6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	f200 80d2 	bhi.w	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8008dce:	e8df f003 	tbb	[pc, r3]
 8008dd2:	2922      	.short	0x2922
 8008dd4:	27ca      	.short	0x27ca
 8008dd6:	27          	.byte	0x27
 8008dd7:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ddc:	d1ee      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008dde:	4ab6      	ldr	r2, [pc, #728]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008de0:	2600      	movs	r6, #0
 8008de2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008de4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008de6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008dea:	430b      	orrs	r3, r1
 8008dec:	6513      	str	r3, [r2, #80]	; 0x50
 8008dee:	e7e6      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df0:	4ab1      	ldr	r2, [pc, #708]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008df2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008dfa:	e7f0      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dfc:	2102      	movs	r1, #2
 8008dfe:	3004      	adds	r0, #4
 8008e00:	f7ff fedc 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e04:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d1d9      	bne.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x22>
 8008e0a:	e7e8      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e0c:	2102      	movs	r1, #2
 8008e0e:	3024      	adds	r0, #36	; 0x24
 8008e10:	f7ff ff4c 	bl	8008cac <RCCEx_PLL3_Config>
 8008e14:	e7f6      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e16:	4aa8      	ldr	r2, [pc, #672]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e20:	4634      	mov	r4, r6
 8008e22:	e004      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e24:	2100      	movs	r1, #0
 8008e26:	1d28      	adds	r0, r5, #4
 8008e28:	f7ff fec8 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e2c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008e2e:	2c00      	cmp	r4, #0
 8008e30:	f040 80a2 	bne.w	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e34:	4aa0      	ldr	r2, [pc, #640]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e36:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8008e38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	430b      	orrs	r3, r1
 8008e40:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e42:	682b      	ldr	r3, [r5, #0]
 8008e44:	0559      	lsls	r1, r3, #21
 8008e46:	d510      	bpl.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e48:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8008e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e50:	f000 80b3 	beq.w	8008fba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008e54:	f200 8092 	bhi.w	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 80a2 	beq.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e62:	f000 80a4 	beq.w	8008fae <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008e66:	2601      	movs	r6, #1
 8008e68:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e6a:	682b      	ldr	r3, [r5, #0]
 8008e6c:	051a      	lsls	r2, r3, #20
 8008e6e:	d510      	bpl.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e70:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8008e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e78:	f000 80c6 	beq.w	8009008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008e7c:	f200 80a5 	bhi.w	8008fca <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80b5 	beq.w	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e8a:	f000 80b7 	beq.w	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008e8e:	2601      	movs	r6, #1
 8008e90:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	019b      	lsls	r3, r3, #6
 8008e96:	d50d      	bpl.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8008e98:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	f000 80ce 	beq.w	800903c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8008ea0:	f200 80ba 	bhi.w	8009018 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80ba 	beq.w	800901e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8008eaa:	2b10      	cmp	r3, #16
 8008eac:	f000 80c0 	beq.w	8009030 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8008eb0:	2601      	movs	r6, #1
 8008eb2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	04df      	lsls	r7, r3, #19
 8008eb8:	d50f      	bpl.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008eba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec0:	f000 80e0 	beq.w	8009084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8008ec4:	f200 80c2 	bhi.w	800904c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80cf 	beq.w	800906c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed2:	f000 80d1 	beq.w	8009078 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008ed6:	2601      	movs	r6, #1
 8008ed8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	0498      	lsls	r0, r3, #18
 8008ede:	d50f      	bpl.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ee0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8008ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee6:	f000 80ef 	beq.w	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8008eea:	f200 80d3 	bhi.w	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80d9 	beq.w	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8008ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef8:	f000 80e0 	beq.w	80090bc <HAL_RCCEx_PeriphCLKConfig+0x320>
 8008efc:	2601      	movs	r6, #1
 8008efe:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	0459      	lsls	r1, r3, #17
 8008f04:	d510      	bpl.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f06:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8008f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f0e:	f000 80fc 	beq.w	800910a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f12:	f200 80e1 	bhi.w	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 80e7 	beq.w	80090ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f20:	f000 80ed 	beq.w	80090fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008f24:	2601      	movs	r6, #1
 8008f26:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	041a      	lsls	r2, r3, #16
 8008f2c:	d50d      	bpl.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8008f2e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f34:	f000 80f1 	beq.w	800911a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f3c:	f000 80fb 	beq.w	8009136 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80ef 	beq.w	8009124 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008f46:	2601      	movs	r6, #1
 8008f48:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f4a:	682b      	ldr	r3, [r5, #0]
 8008f4c:	01db      	lsls	r3, r3, #7
 8008f4e:	f140 8108 	bpl.w	8009162 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8008f52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	f200 8148 	bhi.w	80091ea <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008f5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f5e:	00f9      	.short	0x00f9
 8008f60:	014000f4 	.word	0x014000f4
 8008f64:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f66:	2100      	movs	r1, #0
 8008f68:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008f6c:	f7ff fe9e 	bl	8008cac <RCCEx_PLL3_Config>
 8008f70:	e75c      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f72:	2601      	movs	r6, #1
 8008f74:	4634      	mov	r4, r6
 8008f76:	e764      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8008f78:	4626      	mov	r6, r4
 8008f7a:	e762      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008f7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f80:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008f84:	d003      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8008f86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f8a:	f47f af6c 	bne.w	8008e66 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 8008f8e:	b9d4      	cbnz	r4, 8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f90:	4a49      	ldr	r2, [pc, #292]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008f92:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8008f96:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008f98:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8008fa0:	e763      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa2:	4a45      	ldr	r2, [pc, #276]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008fa4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008faa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008fac:	e7ef      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fae:	2100      	movs	r1, #0
 8008fb0:	1d28      	adds	r0, r5, #4
 8008fb2:	f7ff fe03 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fb6:	4604      	mov	r4, r0
      break;
 8008fb8:	e7e9      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fba:	2100      	movs	r1, #0
 8008fbc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008fc0:	f7ff fe74 	bl	8008cac <RCCEx_PLL3_Config>
 8008fc4:	e7f7      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008fc6:	4626      	mov	r6, r4
 8008fc8:	e74f      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008fca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fce:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008fd2:	d003      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fd8:	f47f af59 	bne.w	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 8008fdc:	b9d4      	cbnz	r4, 8009014 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fde:	4a36      	ldr	r2, [pc, #216]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008fe0:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8008fe4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008fea:	430b      	orrs	r3, r1
 8008fec:	6593      	str	r3, [r2, #88]	; 0x58
 8008fee:	e750      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff0:	4a31      	ldr	r2, [pc, #196]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008ff2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008ffa:	e7ef      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	1d28      	adds	r0, r5, #4
 8009000:	f7ff fddc 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009004:	4604      	mov	r4, r0
      break;
 8009006:	e7e9      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009008:	2100      	movs	r1, #0
 800900a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800900e:	f7ff fe4d 	bl	8008cac <RCCEx_PLL3_Config>
 8009012:	e7f7      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8009014:	4626      	mov	r6, r4
 8009016:	e73c      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 8009018:	2b30      	cmp	r3, #48	; 0x30
 800901a:	f47f af49 	bne.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 800901e:	b99c      	cbnz	r4, 8009048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009020:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009022:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8009024:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009026:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800902a:	430b      	orrs	r3, r1
 800902c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800902e:	e741      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009030:	4a21      	ldr	r2, [pc, #132]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009032:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009038:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800903a:	e7f0      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800903c:	2102      	movs	r1, #2
 800903e:	1d28      	adds	r0, r5, #4
 8009040:	f7ff fdbc 	bl	8008bbc <RCCEx_PLL2_Config>
 8009044:	4604      	mov	r4, r0
      break;
 8009046:	e7ea      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8009048:	4626      	mov	r6, r4
 800904a:	e733      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 800904c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009050:	d003      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8009052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009056:	f47f af3e 	bne.w	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 800905a:	b9cc      	cbnz	r4, 8009090 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800905c:	4a16      	ldr	r2, [pc, #88]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800905e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8009060:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009066:	430b      	orrs	r3, r1
 8009068:	6513      	str	r3, [r2, #80]	; 0x50
 800906a:	e736      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800906c:	4a12      	ldr	r2, [pc, #72]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800906e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009074:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009076:	e7f0      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009078:	2100      	movs	r1, #0
 800907a:	1d28      	adds	r0, r5, #4
 800907c:	f7ff fd9e 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009080:	4604      	mov	r4, r0
      break;
 8009082:	e7ea      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009084:	2100      	movs	r1, #0
 8009086:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800908a:	f7ff fe0f 	bl	8008cac <RCCEx_PLL3_Config>
 800908e:	e7f7      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8009090:	4626      	mov	r6, r4
 8009092:	e722      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009094:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009098:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800909c:	d003      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800909e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090a2:	f47f af2b 	bne.w	8008efc <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 80090a6:	b9ac      	cbnz	r4, 80090d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090a8:	4a03      	ldr	r2, [pc, #12]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80090aa:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80090ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090ae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80090b2:	430b      	orrs	r3, r1
 80090b4:	6513      	str	r3, [r2, #80]	; 0x50
 80090b6:	e723      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80090b8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090bc:	2101      	movs	r1, #1
 80090be:	1d28      	adds	r0, r5, #4
 80090c0:	f7ff fd7c 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090c4:	4604      	mov	r4, r0
      break;
 80090c6:	e7ee      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090c8:	2101      	movs	r1, #1
 80090ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80090ce:	f7ff fded 	bl	8008cac <RCCEx_PLL3_Config>
 80090d2:	e7f7      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80090d4:	4626      	mov	r6, r4
 80090d6:	e713      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 80090d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80090dc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80090e0:	d003      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80090e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090e6:	f47f af1d 	bne.w	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 80090ea:	b9a4      	cbnz	r4, 8009116 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090ec:	4a7f      	ldr	r2, [pc, #508]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80090ee:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80090f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80090f4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6593      	str	r3, [r2, #88]	; 0x58
 80090fc:	e714      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090fe:	2101      	movs	r1, #1
 8009100:	1d28      	adds	r0, r5, #4
 8009102:	f7ff fd5b 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009106:	4604      	mov	r4, r0
      break;
 8009108:	e7ef      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800910a:	2101      	movs	r1, #1
 800910c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009110:	f7ff fdcc 	bl	8008cac <RCCEx_PLL3_Config>
 8009114:	e7f7      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009116:	4626      	mov	r6, r4
 8009118:	e706      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800911a:	4a74      	ldr	r2, [pc, #464]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800911c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800911e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009122:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009124:	b96c      	cbnz	r4, 8009142 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009126:	4a71      	ldr	r2, [pc, #452]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009128:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800912a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800912c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009130:	430b      	orrs	r3, r1
 8009132:	6513      	str	r3, [r2, #80]	; 0x50
 8009134:	e709      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009136:	2101      	movs	r1, #1
 8009138:	1d28      	adds	r0, r5, #4
 800913a:	f7ff fd3f 	bl	8008bbc <RCCEx_PLL2_Config>
 800913e:	4604      	mov	r4, r0
      break;
 8009140:	e7f0      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009142:	4626      	mov	r6, r4
 8009144:	e701      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009146:	4a69      	ldr	r2, [pc, #420]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009148:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800914a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800914e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009150:	2c00      	cmp	r4, #0
 8009152:	d14d      	bne.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009154:	4a65      	ldr	r2, [pc, #404]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009156:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009158:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800915a:	f023 0303 	bic.w	r3, r3, #3
 800915e:	430b      	orrs	r3, r1
 8009160:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	025f      	lsls	r7, r3, #9
 8009166:	d54d      	bpl.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009168:	4f61      	ldr	r7, [pc, #388]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009170:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009172:	f7fd f91f 	bl	80063b4 <HAL_GetTick>
 8009176:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	05d8      	lsls	r0, r3, #23
 800917c:	d53a      	bpl.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 800917e:	2c00      	cmp	r4, #0
 8009180:	d16c      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009182:	4b5a      	ldr	r3, [pc, #360]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009184:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 8009188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800918a:	4042      	eors	r2, r0
 800918c:	f412 7f40 	tst.w	r2, #768	; 0x300
 8009190:	d00b      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009194:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009196:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800919a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800919e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80091a2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80091a6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80091a8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091aa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80091ae:	d040      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091b0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80091b4:	494d      	ldr	r1, [pc, #308]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091b6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80091ba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80091be:	d149      	bne.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80091c0:	6908      	ldr	r0, [r1, #16]
 80091c2:	4a4c      	ldr	r2, [pc, #304]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80091c4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80091c8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80091cc:	4302      	orrs	r2, r0
 80091ce:	610a      	str	r2, [r1, #16]
 80091d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091d4:	4a45      	ldr	r2, [pc, #276]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80091d8:	430b      	orrs	r3, r1
 80091da:	6713      	str	r3, [r2, #112]	; 0x70
 80091dc:	e012      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091de:	2102      	movs	r1, #2
 80091e0:	1d28      	adds	r0, r5, #4
 80091e2:	f7ff fceb 	bl	8008bbc <RCCEx_PLL2_Config>
 80091e6:	4604      	mov	r4, r0
      break;
 80091e8:	e7b2      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 80091ea:	2601      	movs	r6, #1
 80091ec:	4634      	mov	r4, r6
 80091ee:	e7b8      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80091f0:	4626      	mov	r6, r4
 80091f2:	e7b6      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091f4:	f7fd f8de 	bl	80063b4 <HAL_GetTick>
 80091f8:	eba0 0008 	sub.w	r0, r0, r8
 80091fc:	2864      	cmp	r0, #100	; 0x64
 80091fe:	d9bb      	bls.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8009200:	2603      	movs	r6, #3
 8009202:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	07da      	lsls	r2, r3, #31
 8009208:	d508      	bpl.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 800920a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800920c:	2b10      	cmp	r3, #16
 800920e:	d03c      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009210:	d826      	bhi.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8009212:	b35b      	cbz	r3, 800926c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009214:	2b08      	cmp	r3, #8
 8009216:	d032      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009218:	2601      	movs	r6, #1
 800921a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	079b      	lsls	r3, r3, #30
 8009220:	d548      	bpl.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009222:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009224:	2b05      	cmp	r3, #5
 8009226:	d85b      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8009228:	e8df f003 	tbb	[pc, r3]
 800922c:	3c54373c 	.word	0x3c54373c
 8009230:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 8009232:	f7fd f8bf 	bl	80063b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009236:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 800923a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800923c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009240:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8009244:	0799      	lsls	r1, r3, #30
 8009246:	d4b3      	bmi.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009248:	f7fd f8b4 	bl	80063b4 <HAL_GetTick>
 800924c:	1bc0      	subs	r0, r0, r7
 800924e:	4548      	cmp	r0, r9
 8009250:	d9f6      	bls.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009252:	e7d5      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009254:	690a      	ldr	r2, [r1, #16]
 8009256:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800925a:	e7b8      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x432>
 800925c:	4626      	mov	r6, r4
 800925e:	e7d1      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009260:	f023 0208 	bic.w	r2, r3, #8
 8009264:	2a20      	cmp	r2, #32
 8009266:	d001      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009268:	2b18      	cmp	r3, #24
 800926a:	d1d5      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 800926c:	b99c      	cbnz	r4, 8009296 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800926e:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009270:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8009272:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009274:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009278:	430b      	orrs	r3, r1
 800927a:	6553      	str	r3, [r2, #84]	; 0x54
 800927c:	e7ce      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800927e:	2101      	movs	r1, #1
 8009280:	1d28      	adds	r0, r5, #4
 8009282:	f7ff fc9b 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009286:	4604      	mov	r4, r0
      break;
 8009288:	e7f0      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800928a:	2101      	movs	r1, #1
 800928c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009290:	f7ff fd0c 	bl	8008cac <RCCEx_PLL3_Config>
 8009294:	e7f7      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009296:	4626      	mov	r6, r4
 8009298:	e7c0      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800929a:	2101      	movs	r1, #1
 800929c:	1d28      	adds	r0, r5, #4
 800929e:	f7ff fc8d 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092a2:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80092a4:	b9fc      	cbnz	r4, 80092e6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092a6:	4a11      	ldr	r2, [pc, #68]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80092a8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80092aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80092ac:	f023 0307 	bic.w	r3, r3, #7
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	075f      	lsls	r7, r3, #29
 80092b8:	d52e      	bpl.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092ba:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80092be:	2b05      	cmp	r3, #5
 80092c0:	f200 8134 	bhi.w	800952c <HAL_RCCEx_PeriphCLKConfig+0x790>
 80092c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80092c8:	0018001d 	.word	0x0018001d
 80092cc:	001d012c 	.word	0x001d012c
 80092d0:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092d4:	2101      	movs	r1, #1
 80092d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80092da:	f7ff fce7 	bl	8008cac <RCCEx_PLL3_Config>
 80092de:	e7e0      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80092e0:	2601      	movs	r6, #1
 80092e2:	4634      	mov	r4, r6
 80092e4:	e7e6      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80092e6:	4626      	mov	r6, r4
 80092e8:	e7e4      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
 80092f0:	58024800 	.word	0x58024800
 80092f4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092f8:	2101      	movs	r1, #1
 80092fa:	1d28      	adds	r0, r5, #4
 80092fc:	f7ff fc5e 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009300:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8009302:	2c00      	cmp	r4, #0
 8009304:	f040 8115 	bne.w	8009532 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009308:	4ab8      	ldr	r2, [pc, #736]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800930a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800930e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009310:	f023 0307 	bic.w	r3, r3, #7
 8009314:	430b      	orrs	r3, r1
 8009316:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	0698      	lsls	r0, r3, #26
 800931c:	d510      	bpl.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800931e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009326:	f000 811f 	beq.w	8009568 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800932a:	f200 8104 	bhi.w	8009536 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 810a 	beq.w	8009548 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8009334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009338:	f000 8110 	beq.w	800955c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800933c:	2601      	movs	r6, #1
 800933e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	0659      	lsls	r1, r3, #25
 8009344:	d510      	bpl.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009346:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800934a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800934e:	f000 812c 	beq.w	80095aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8009352:	f200 8111 	bhi.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 8117 	beq.w	800958a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 800935c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009360:	f000 811d 	beq.w	800959e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8009364:	2601      	movs	r6, #1
 8009366:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	061a      	lsls	r2, r3, #24
 800936c:	d510      	bpl.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800936e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8009372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009376:	f000 813b 	beq.w	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800937a:	f200 811e 	bhi.w	80095ba <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 8124 	beq.w	80095cc <HAL_RCCEx_PeriphCLKConfig+0x830>
 8009384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009388:	f000 812a 	beq.w	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800938c:	2601      	movs	r6, #1
 800938e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	071b      	lsls	r3, r3, #28
 8009394:	d512      	bpl.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009396:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939c:	d107      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800939e:	2102      	movs	r1, #2
 80093a0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80093a4:	f7ff fc82 	bl	8008cac <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80093a8:	2800      	cmp	r0, #0
 80093aa:	bf18      	it	ne
 80093ac:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80093ae:	4a8f      	ldr	r2, [pc, #572]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80093b0:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80093b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80093b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80093b8:	430b      	orrs	r3, r1
 80093ba:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	06df      	lsls	r7, r3, #27
 80093c0:	d514      	bpl.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80093c2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80093c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ca:	d107      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80093cc:	2102      	movs	r1, #2
 80093ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80093d2:	f7ff fc6b 	bl	8008cac <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80093d6:	2800      	cmp	r0, #0
 80093d8:	bf18      	it	ne
 80093da:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093dc:	4a83      	ldr	r2, [pc, #524]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80093de:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80093e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e8:	430b      	orrs	r3, r1
 80093ea:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	0318      	lsls	r0, r3, #12
 80093f0:	d51a      	bpl.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 80093f2:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80093f6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80093fa:	f000 8101 	beq.w	8009600 <HAL_RCCEx_PeriphCLKConfig+0x864>
 80093fe:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009402:	d006      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009404:	2900      	cmp	r1, #0
 8009406:	f040 8101 	bne.w	800960c <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800940a:	1d28      	adds	r0, r5, #4
 800940c:	f7ff fbd6 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009410:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8009412:	2c00      	cmp	r4, #0
 8009414:	f040 80fd 	bne.w	8009612 <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009418:	4a74      	ldr	r2, [pc, #464]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800941a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800941e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009420:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009424:	430b      	orrs	r3, r1
 8009426:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	0359      	lsls	r1, r3, #13
 800942c:	d51c      	bpl.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 800942e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8009432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009436:	f000 80ee 	beq.w	8009616 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800943a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800943e:	d008      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8009440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009444:	f040 80ee 	bne.w	8009624 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009448:	4a68      	ldr	r2, [pc, #416]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800944a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800944c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009450:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009452:	2c00      	cmp	r4, #0
 8009454:	f040 80e9 	bne.w	800962a <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009458:	4a64      	ldr	r2, [pc, #400]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800945a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800945e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009460:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009464:	430b      	orrs	r3, r1
 8009466:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	03da      	lsls	r2, r3, #15
 800946c:	d509      	bpl.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 800946e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 80dc 	beq.w	800962e <HAL_RCCEx_PeriphCLKConfig+0x892>
 8009476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947a:	f000 80e6 	beq.w	800964a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 800947e:	2601      	movs	r6, #1
 8009480:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	d507      	bpl.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009488:	2102      	movs	r1, #2
 800948a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800948e:	f7ff fc0d 	bl	8008cac <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8009492:	2800      	cmp	r0, #0
 8009494:	bf18      	it	ne
 8009496:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	039f      	lsls	r7, r3, #14
 800949c:	d50a      	bpl.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 800949e:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80094a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80094a4:	f000 80e7 	beq.w	8009676 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80094a8:	f200 80d7 	bhi.w	800965a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80094ac:	2900      	cmp	r1, #0
 80094ae:	f000 80da 	beq.w	8009666 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80094b2:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094b4:	02d8      	lsls	r0, r3, #11
 80094b6:	d506      	bpl.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094b8:	494c      	ldr	r1, [pc, #304]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094ba:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80094bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80094be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80094c2:	4302      	orrs	r2, r0
 80094c4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094c6:	0299      	lsls	r1, r3, #10
 80094c8:	d506      	bpl.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094ca:	4948      	ldr	r1, [pc, #288]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094cc:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80094ce:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80094d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80094d4:	4302      	orrs	r2, r0
 80094d6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094d8:	005a      	lsls	r2, r3, #1
 80094da:	d509      	bpl.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094dc:	4a43      	ldr	r2, [pc, #268]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094de:	6911      	ldr	r1, [r2, #16]
 80094e0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80094e4:	6111      	str	r1, [r2, #16]
 80094e6:	6911      	ldr	r1, [r2, #16]
 80094e8:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 80094ec:	4301      	orrs	r1, r0
 80094ee:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	da06      	bge.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094f4:	493d      	ldr	r1, [pc, #244]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094f6:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80094f8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80094fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094fe:	4302      	orrs	r2, r0
 8009500:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009502:	021b      	lsls	r3, r3, #8
 8009504:	d507      	bpl.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009506:	4a39      	ldr	r2, [pc, #228]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009508:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800950c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800950e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009512:	430b      	orrs	r3, r1
 8009514:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009516:	1e30      	subs	r0, r6, #0
 8009518:	bf18      	it	ne
 800951a:	2001      	movne	r0, #1
 800951c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009520:	2101      	movs	r1, #1
 8009522:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009526:	f7ff fbc1 	bl	8008cac <RCCEx_PLL3_Config>
 800952a:	e6e9      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800952c:	2601      	movs	r6, #1
 800952e:	4634      	mov	r4, r6
 8009530:	e6f2      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009532:	4626      	mov	r6, r4
 8009534:	e6f0      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800953a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800953e:	d003      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8009540:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009544:	f47f aefa 	bne.w	800933c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 8009548:	b9a4      	cbnz	r4, 8009574 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800954a:	4a28      	ldr	r2, [pc, #160]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800954c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8009550:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009552:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009556:	430b      	orrs	r3, r1
 8009558:	6553      	str	r3, [r2, #84]	; 0x54
 800955a:	e6f1      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800955c:	2100      	movs	r1, #0
 800955e:	1d28      	adds	r0, r5, #4
 8009560:	f7ff fb2c 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009564:	4604      	mov	r4, r0
      break;
 8009566:	e7ef      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009568:	2102      	movs	r1, #2
 800956a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800956e:	f7ff fb9d 	bl	8008cac <RCCEx_PLL3_Config>
 8009572:	e7f7      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8009574:	4626      	mov	r6, r4
 8009576:	e6e3      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009578:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800957c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009580:	d003      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8009582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009586:	f47f aeed 	bne.w	8009364 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 800958a:	b9a4      	cbnz	r4, 80095b6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800958c:	4a17      	ldr	r2, [pc, #92]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800958e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8009592:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009594:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009598:	430b      	orrs	r3, r1
 800959a:	6593      	str	r3, [r2, #88]	; 0x58
 800959c:	e6e4      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800959e:	2100      	movs	r1, #0
 80095a0:	1d28      	adds	r0, r5, #4
 80095a2:	f7ff fb0b 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095a6:	4604      	mov	r4, r0
      break;
 80095a8:	e7ef      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095aa:	2102      	movs	r1, #2
 80095ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095b0:	f7ff fb7c 	bl	8008cac <RCCEx_PLL3_Config>
 80095b4:	e7f7      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80095b6:	4626      	mov	r6, r4
 80095b8:	e6d6      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095ba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80095c2:	d003      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x830>
 80095c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095c8:	f47f aee0 	bne.w	800938c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 80095cc:	b9b4      	cbnz	r4, 80095fc <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095ce:	4a07      	ldr	r2, [pc, #28]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80095d0:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80095d4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80095d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80095da:	430b      	orrs	r3, r1
 80095dc:	6593      	str	r3, [r2, #88]	; 0x58
 80095de:	e6d7      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095e0:	2100      	movs	r1, #0
 80095e2:	1d28      	adds	r0, r5, #4
 80095e4:	f7ff faea 	bl	8008bbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e8:	4604      	mov	r4, r0
      break;
 80095ea:	e7ef      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x830>
 80095ec:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095f0:	2102      	movs	r1, #2
 80095f2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095f6:	f7ff fb59 	bl	8008cac <RCCEx_PLL3_Config>
 80095fa:	e7f5      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80095fc:	4626      	mov	r6, r4
 80095fe:	e6c7      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009600:	2102      	movs	r1, #2
 8009602:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009606:	f7ff fb51 	bl	8008cac <RCCEx_PLL3_Config>
 800960a:	e701      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 800960c:	2601      	movs	r6, #1
 800960e:	4634      	mov	r4, r6
 8009610:	e70a      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8009612:	4626      	mov	r6, r4
 8009614:	e708      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009616:	2101      	movs	r1, #1
 8009618:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800961c:	f7ff fb46 	bl	8008cac <RCCEx_PLL3_Config>
 8009620:	4604      	mov	r4, r0
      break;
 8009622:	e716      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 8009624:	2601      	movs	r6, #1
 8009626:	4634      	mov	r4, r6
 8009628:	e71e      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800962a:	4626      	mov	r6, r4
 800962c:	e71c      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800962e:	4a16      	ldr	r2, [pc, #88]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009630:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009636:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009638:	b96c      	cbnz	r4, 8009656 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800963a:	4a13      	ldr	r2, [pc, #76]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800963c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800963e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009644:	430b      	orrs	r3, r1
 8009646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009648:	e71b      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800964a:	2102      	movs	r1, #2
 800964c:	1d28      	adds	r0, r5, #4
 800964e:	f7ff fab5 	bl	8008bbc <RCCEx_PLL2_Config>
 8009652:	4604      	mov	r4, r0
      break;
 8009654:	e7f0      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8009656:	4626      	mov	r6, r4
 8009658:	e713      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 800965a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800965e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009662:	f47f af26 	bne.w	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 8009666:	b964      	cbnz	r4, 8009682 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009668:	4807      	ldr	r0, [pc, #28]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800966a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800966c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009670:	430a      	orrs	r2, r1
 8009672:	6542      	str	r2, [r0, #84]	; 0x54
 8009674:	e71e      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009676:	4804      	ldr	r0, [pc, #16]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009678:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800967a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800967e:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8009680:	e7f1      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8009682:	4626      	mov	r6, r4
 8009684:	e716      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8009686:	bf00      	nop
 8009688:	58024400 	.word	0x58024400

0800968c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800968c:	6a03      	ldr	r3, [r0, #32]
 800968e:	f023 0301 	bic.w	r3, r3, #1
{
 8009692:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009694:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009696:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009698:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800969a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800969c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80096a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096a6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80096aa:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096ac:	688d      	ldr	r5, [r1, #8]
 80096ae:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096b0:	4d1b      	ldr	r5, [pc, #108]	; (8009720 <TIM_OC1_SetConfig+0x94>)
 80096b2:	42a8      	cmp	r0, r5
 80096b4:	d00f      	beq.n	80096d6 <TIM_OC1_SetConfig+0x4a>
 80096b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096ba:	42a8      	cmp	r0, r5
 80096bc:	d00b      	beq.n	80096d6 <TIM_OC1_SetConfig+0x4a>
 80096be:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80096c2:	42a8      	cmp	r0, r5
 80096c4:	d007      	beq.n	80096d6 <TIM_OC1_SetConfig+0x4a>
 80096c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096ca:	42a8      	cmp	r0, r5
 80096cc:	d003      	beq.n	80096d6 <TIM_OC1_SetConfig+0x4a>
 80096ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096d2:	42a8      	cmp	r0, r5
 80096d4:	d11e      	bne.n	8009714 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096d6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80096d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80096dc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096de:	4d10      	ldr	r5, [pc, #64]	; (8009720 <TIM_OC1_SetConfig+0x94>)
 80096e0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80096e2:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e6:	d00f      	beq.n	8009708 <TIM_OC1_SetConfig+0x7c>
 80096e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096ec:	42a8      	cmp	r0, r5
 80096ee:	d00b      	beq.n	8009708 <TIM_OC1_SetConfig+0x7c>
 80096f0:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80096f4:	42a8      	cmp	r0, r5
 80096f6:	d007      	beq.n	8009708 <TIM_OC1_SetConfig+0x7c>
 80096f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096fc:	42a8      	cmp	r0, r5
 80096fe:	d003      	beq.n	8009708 <TIM_OC1_SetConfig+0x7c>
 8009700:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009704:	42a8      	cmp	r0, r5
 8009706:	d105      	bne.n	8009714 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009708:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800970c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8009710:	4334      	orrs	r4, r6
 8009712:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009714:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009716:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009718:	684a      	ldr	r2, [r1, #4]
 800971a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971c:	6203      	str	r3, [r0, #32]
}
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	40010000 	.word	0x40010000

08009724 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009724:	6a03      	ldr	r3, [r0, #32]
 8009726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800972a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800972c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009730:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009732:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8009738:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800973a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800973e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009742:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009744:	688d      	ldr	r5, [r1, #8]
 8009746:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800974a:	4d16      	ldr	r5, [pc, #88]	; (80097a4 <TIM_OC3_SetConfig+0x80>)
 800974c:	42a8      	cmp	r0, r5
 800974e:	d003      	beq.n	8009758 <TIM_OC3_SetConfig+0x34>
 8009750:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009754:	42a8      	cmp	r0, r5
 8009756:	d10d      	bne.n	8009774 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009758:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800975a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800975e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009762:	4d10      	ldr	r5, [pc, #64]	; (80097a4 <TIM_OC3_SetConfig+0x80>)
 8009764:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8009766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976a:	d00e      	beq.n	800978a <TIM_OC3_SetConfig+0x66>
 800976c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009770:	42a8      	cmp	r0, r5
 8009772:	d00a      	beq.n	800978a <TIM_OC3_SetConfig+0x66>
 8009774:	4d0c      	ldr	r5, [pc, #48]	; (80097a8 <TIM_OC3_SetConfig+0x84>)
 8009776:	42a8      	cmp	r0, r5
 8009778:	d007      	beq.n	800978a <TIM_OC3_SetConfig+0x66>
 800977a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800977e:	42a8      	cmp	r0, r5
 8009780:	d003      	beq.n	800978a <TIM_OC3_SetConfig+0x66>
 8009782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009786:	42a8      	cmp	r0, r5
 8009788:	d106      	bne.n	8009798 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800978a:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800978e:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8009792:	4334      	orrs	r4, r6
 8009794:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009798:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800979a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800979c:	684a      	ldr	r2, [r1, #4]
 800979e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097a0:	6203      	str	r3, [r0, #32]
}
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40014000 	.word	0x40014000

080097ac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097ac:	6a03      	ldr	r3, [r0, #32]
 80097ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80097b2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ba:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80097c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097ce:	688d      	ldr	r5, [r1, #8]
 80097d0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d4:	4d0e      	ldr	r5, [pc, #56]	; (8009810 <TIM_OC4_SetConfig+0x64>)
 80097d6:	42a8      	cmp	r0, r5
 80097d8:	d00f      	beq.n	80097fa <TIM_OC4_SetConfig+0x4e>
 80097da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097de:	42a8      	cmp	r0, r5
 80097e0:	d00b      	beq.n	80097fa <TIM_OC4_SetConfig+0x4e>
 80097e2:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80097e6:	42a8      	cmp	r0, r5
 80097e8:	d007      	beq.n	80097fa <TIM_OC4_SetConfig+0x4e>
 80097ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097ee:	42a8      	cmp	r0, r5
 80097f0:	d003      	beq.n	80097fa <TIM_OC4_SetConfig+0x4e>
 80097f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097f6:	42a8      	cmp	r0, r5
 80097f8:	d104      	bne.n	8009804 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097fa:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097fe:	694d      	ldr	r5, [r1, #20]
 8009800:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009804:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009806:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009808:	684a      	ldr	r2, [r1, #4]
 800980a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980c:	6203      	str	r3, [r0, #32]
}
 800980e:	bd30      	pop	{r4, r5, pc}
 8009810:	40010000 	.word	0x40010000

08009814 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009814:	6a03      	ldr	r3, [r0, #32]
 8009816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800981a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800981c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009820:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009822:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009824:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8009828:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800982a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800982e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8009832:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009834:	688d      	ldr	r5, [r1, #8]
 8009836:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	4d0f      	ldr	r5, [pc, #60]	; (8009878 <TIM_OC5_SetConfig+0x64>)
 800983c:	42a8      	cmp	r0, r5
 800983e:	d00f      	beq.n	8009860 <TIM_OC5_SetConfig+0x4c>
 8009840:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009844:	42a8      	cmp	r0, r5
 8009846:	d00b      	beq.n	8009860 <TIM_OC5_SetConfig+0x4c>
 8009848:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800984c:	42a8      	cmp	r0, r5
 800984e:	d007      	beq.n	8009860 <TIM_OC5_SetConfig+0x4c>
 8009850:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009854:	42a8      	cmp	r0, r5
 8009856:	d003      	beq.n	8009860 <TIM_OC5_SetConfig+0x4c>
 8009858:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800985c:	42a8      	cmp	r0, r5
 800985e:	d104      	bne.n	800986a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009860:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009864:	694d      	ldr	r5, [r1, #20]
 8009866:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800986c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800986e:	684a      	ldr	r2, [r1, #4]
 8009870:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009872:	6203      	str	r3, [r0, #32]
}
 8009874:	bd30      	pop	{r4, r5, pc}
 8009876:	bf00      	nop
 8009878:	40010000 	.word	0x40010000

0800987c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800987c:	6a03      	ldr	r3, [r0, #32]
 800987e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8009882:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009884:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009886:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800988a:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800988c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009890:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009892:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009896:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800989a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800989e:	688d      	ldr	r5, [r1, #8]
 80098a0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a4:	4d0e      	ldr	r5, [pc, #56]	; (80098e0 <TIM_OC6_SetConfig+0x64>)
 80098a6:	42a8      	cmp	r0, r5
 80098a8:	d00f      	beq.n	80098ca <TIM_OC6_SetConfig+0x4e>
 80098aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098ae:	42a8      	cmp	r0, r5
 80098b0:	d00b      	beq.n	80098ca <TIM_OC6_SetConfig+0x4e>
 80098b2:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80098b6:	42a8      	cmp	r0, r5
 80098b8:	d007      	beq.n	80098ca <TIM_OC6_SetConfig+0x4e>
 80098ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098be:	42a8      	cmp	r0, r5
 80098c0:	d003      	beq.n	80098ca <TIM_OC6_SetConfig+0x4e>
 80098c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098c6:	42a8      	cmp	r0, r5
 80098c8:	d104      	bne.n	80098d4 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098ca:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098ce:	694d      	ldr	r5, [r1, #20]
 80098d0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098d6:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098d8:	684a      	ldr	r2, [r1, #4]
 80098da:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098dc:	6203      	str	r3, [r0, #32]
}
 80098de:	bd30      	pop	{r4, r5, pc}
 80098e0:	40010000 	.word	0x40010000

080098e4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80098e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d13b      	bne.n	8009964 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 80098ec:	2302      	movs	r3, #2
 80098ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098f2:	6803      	ldr	r3, [r0, #0]
 80098f4:	68da      	ldr	r2, [r3, #12]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098fc:	4a1a      	ldr	r2, [pc, #104]	; (8009968 <HAL_TIM_Base_Start_IT+0x84>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d022      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009906:	d01f      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009908:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800990c:	4293      	cmp	r3, r2
 800990e:	d01b      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009914:	4293      	cmp	r3, r2
 8009916:	d017      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009918:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800991c:	4293      	cmp	r3, r2
 800991e:	d013      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009920:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009924:	4293      	cmp	r3, r2
 8009926:	d00f      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009928:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800992c:	4293      	cmp	r3, r2
 800992e:	d00b      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009930:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009934:	4293      	cmp	r3, r2
 8009936:	d007      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009938:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800993c:	4293      	cmp	r3, r2
 800993e:	d003      	beq.n	8009948 <HAL_TIM_Base_Start_IT+0x64>
 8009940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009944:	4293      	cmp	r3, r2
 8009946:	d107      	bne.n	8009958 <HAL_TIM_Base_Start_IT+0x74>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009948:	6899      	ldr	r1, [r3, #8]
 800994a:	4a08      	ldr	r2, [pc, #32]	; (800996c <HAL_TIM_Base_Start_IT+0x88>)
 800994c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994e:	2a06      	cmp	r2, #6
 8009950:	d006      	beq.n	8009960 <HAL_TIM_Base_Start_IT+0x7c>
 8009952:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009956:	d003      	beq.n	8009960 <HAL_TIM_Base_Start_IT+0x7c>
    __HAL_TIM_ENABLE(htim);
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	f042 0201 	orr.w	r2, r2, #1
 800995e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009960:	2000      	movs	r0, #0
}
 8009962:	4770      	bx	lr
    return HAL_ERROR;
 8009964:	2001      	movs	r0, #1
 8009966:	4770      	bx	lr
 8009968:	40010000 	.word	0x40010000
 800996c:	00010007 	.word	0x00010007

08009970 <HAL_TIM_Encoder_Start_IT>:
{
 8009970:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009972:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009976:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800997a:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800997e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009980:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009984:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009986:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009988:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 800998a:	b9e9      	cbnz	r1, 80099c8 <HAL_TIM_Encoder_Start_IT+0x58>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800998c:	2a01      	cmp	r2, #1
 800998e:	d15a      	bne.n	8009a46 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009990:	2d01      	cmp	r5, #1
 8009992:	d15a      	bne.n	8009a4a <HAL_TIM_Encoder_Start_IT+0xda>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009994:	2302      	movs	r3, #2
 8009996:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800999a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800999e:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099a0:	6a1a      	ldr	r2, [r3, #32]
 80099a2:	f022 0201 	bic.w	r2, r2, #1
 80099a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099a8:	6a1a      	ldr	r2, [r3, #32]
 80099aa:	f042 0201 	orr.w	r2, r2, #1
 80099ae:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	f042 0202 	orr.w	r2, r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80099b6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80099b8:	6802      	ldr	r2, [r0, #0]
 80099ba:	6813      	ldr	r3, [r2, #0]
 80099bc:	f043 0301 	orr.w	r3, r3, #1
 80099c0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 80099c8:	2904      	cmp	r1, #4
 80099ca:	d115      	bne.n	80099f8 <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d13a      	bne.n	8009a46 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80099d0:	2c01      	cmp	r4, #1
 80099d2:	d1f7      	bne.n	80099c4 <HAL_TIM_Encoder_Start_IT+0x54>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099d4:	2302      	movs	r3, #2
 80099d6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099da:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80099de:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80099e0:	6a1a      	ldr	r2, [r3, #32]
 80099e2:	f022 0210 	bic.w	r2, r2, #16
 80099e6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099e8:	6a1a      	ldr	r2, [r3, #32]
 80099ea:	f042 0210 	orr.w	r2, r2, #16
 80099ee:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	f042 0204 	orr.w	r2, r2, #4
 80099f6:	e7de      	b.n	80099b6 <HAL_TIM_Encoder_Start_IT+0x46>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099f8:	2a01      	cmp	r2, #1
 80099fa:	d124      	bne.n	8009a46 <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d124      	bne.n	8009a4a <HAL_TIM_Encoder_Start_IT+0xda>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a00:	2d01      	cmp	r5, #1
 8009a02:	d1df      	bne.n	80099c4 <HAL_TIM_Encoder_Start_IT+0x54>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a04:	2c01      	cmp	r4, #1
 8009a06:	d1dd      	bne.n	80099c4 <HAL_TIM_Encoder_Start_IT+0x54>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a08:	2302      	movs	r3, #2
 8009a0a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a0e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a12:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a16:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  switch (Channel)
 8009a1a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8009a1c:	6a1a      	ldr	r2, [r3, #32]
 8009a1e:	f022 0201 	bic.w	r2, r2, #1
 8009a22:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a24:	6a1a      	ldr	r2, [r3, #32]
 8009a26:	f042 0201 	orr.w	r2, r2, #1
 8009a2a:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8009a2c:	6a1a      	ldr	r2, [r3, #32]
 8009a2e:	f022 0210 	bic.w	r2, r2, #16
 8009a32:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a34:	6a1a      	ldr	r2, [r3, #32]
 8009a36:	f042 0210 	orr.w	r2, r2, #16
 8009a3a:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	f042 0202 	orr.w	r2, r2, #2
 8009a42:	60da      	str	r2, [r3, #12]
 8009a44:	e7d4      	b.n	80099f0 <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e7bc      	b.n	80099c4 <HAL_TIM_Encoder_Start_IT+0x54>
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	e7ba      	b.n	80099c4 <HAL_TIM_Encoder_Start_IT+0x54>

08009a4e <HAL_TIM_OC_DelayElapsedCallback>:
 8009a4e:	4770      	bx	lr

08009a50 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009a50:	4770      	bx	lr

08009a52 <HAL_TIM_TriggerCallback>:
 8009a52:	4770      	bx	lr

08009a54 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a54:	6803      	ldr	r3, [r0, #0]
 8009a56:	691a      	ldr	r2, [r3, #16]
 8009a58:	0791      	lsls	r1, r2, #30
{
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a5e:	d50f      	bpl.n	8009a80 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	0792      	lsls	r2, r2, #30
 8009a64:	d50c      	bpl.n	8009a80 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a66:	f06f 0202 	mvn.w	r2, #2
 8009a6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	0799      	lsls	r1, r3, #30
 8009a74:	f000 8085 	beq.w	8009b82 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009a78:	f7f6 ff66 	bl	8000948 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	0752      	lsls	r2, r2, #29
 8009a86:	d510      	bpl.n	8009aaa <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	0750      	lsls	r0, r2, #29
 8009a8c:	d50d      	bpl.n	8009aaa <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a8e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8009a92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a96:	2202      	movs	r2, #2
 8009a98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009aa0:	d075      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009aa2:	f7f6 ff51 	bl	8000948 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	0711      	lsls	r1, r2, #28
 8009ab0:	d50f      	bpl.n	8009ad2 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	0712      	lsls	r2, r2, #28
 8009ab6:	d50c      	bpl.n	8009ad2 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ab8:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8009abc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ac0:	2204      	movs	r2, #4
 8009ac2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	079b      	lsls	r3, r3, #30
 8009ac8:	d067      	beq.n	8009b9a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009aca:	f7f6 ff3d 	bl	8000948 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	691a      	ldr	r2, [r3, #16]
 8009ad6:	06d0      	lsls	r0, r2, #27
 8009ad8:	d510      	bpl.n	8009afc <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	06d1      	lsls	r1, r2, #27
 8009ade:	d50d      	bpl.n	8009afc <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ae0:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8009ae4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ae8:	2208      	movs	r2, #8
 8009aea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009af2:	d058      	beq.n	8009ba6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8009af4:	f7f6 ff28 	bl	8000948 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af8:	2300      	movs	r3, #0
 8009afa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	07d2      	lsls	r2, r2, #31
 8009b02:	d508      	bpl.n	8009b16 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	07d0      	lsls	r0, r2, #31
 8009b08:	d505      	bpl.n	8009b16 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b0a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b10:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b12:	f7f7 fae9 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	691a      	ldr	r2, [r3, #16]
 8009b1a:	0611      	lsls	r1, r2, #24
 8009b1c:	d508      	bpl.n	8009b30 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	0612      	lsls	r2, r2, #24
 8009b22:	d505      	bpl.n	8009b30 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8009b28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009b2c:	f000 fb7f 	bl	800a22e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	691a      	ldr	r2, [r3, #16]
 8009b34:	05d0      	lsls	r0, r2, #23
 8009b36:	d508      	bpl.n	8009b4a <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	0611      	lsls	r1, r2, #24
 8009b3c:	d505      	bpl.n	8009b4a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8009b42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009b46:	f000 fb73 	bl	800a230 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	691a      	ldr	r2, [r3, #16]
 8009b4e:	0652      	lsls	r2, r2, #25
 8009b50:	d508      	bpl.n	8009b64 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	0650      	lsls	r0, r2, #25
 8009b56:	d505      	bpl.n	8009b64 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009b5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009b60:	f7ff ff77 	bl	8009a52 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	0691      	lsls	r1, r2, #26
 8009b6a:	d522      	bpl.n	8009bb2 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	0692      	lsls	r2, r2, #26
 8009b70:	d51f      	bpl.n	8009bb2 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b72:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009b76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b78:	611a      	str	r2, [r3, #16]
}
 8009b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009b7e:	f000 bb55 	b.w	800a22c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b82:	f7ff ff64 	bl	8009a4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b86:	4620      	mov	r0, r4
 8009b88:	f7ff ff62 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
 8009b8c:	e776      	b.n	8009a7c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8e:	f7ff ff5e 	bl	8009a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7ff ff5c 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
 8009b98:	e785      	b.n	8009aa6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b9a:	f7ff ff58 	bl	8009a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f7ff ff56 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ba4:	e793      	b.n	8009ace <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba6:	f7ff ff52 	bl	8009a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff ff50 	bl	8009a50 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bb0:	e7a2      	b.n	8009af8 <HAL_TIM_IRQHandler+0xa4>
}
 8009bb2:	bd10      	pop	{r4, pc}

08009bb4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bb4:	4a34      	ldr	r2, [pc, #208]	; (8009c88 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8009bb6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bb8:	4290      	cmp	r0, r2
 8009bba:	d012      	beq.n	8009be2 <TIM_Base_SetConfig+0x2e>
 8009bbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009bc0:	d00f      	beq.n	8009be2 <TIM_Base_SetConfig+0x2e>
 8009bc2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009bc6:	4290      	cmp	r0, r2
 8009bc8:	d00b      	beq.n	8009be2 <TIM_Base_SetConfig+0x2e>
 8009bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bce:	4290      	cmp	r0, r2
 8009bd0:	d007      	beq.n	8009be2 <TIM_Base_SetConfig+0x2e>
 8009bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bd6:	4290      	cmp	r0, r2
 8009bd8:	d003      	beq.n	8009be2 <TIM_Base_SetConfig+0x2e>
 8009bda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009bde:	4290      	cmp	r0, r2
 8009be0:	d119      	bne.n	8009c16 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8009be2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009be8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bea:	4a27      	ldr	r2, [pc, #156]	; (8009c88 <TIM_Base_SetConfig+0xd4>)
 8009bec:	4290      	cmp	r0, r2
 8009bee:	d025      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009bf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009bf4:	d022      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009bf6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009bfa:	4290      	cmp	r0, r2
 8009bfc:	d01e      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c02:	4290      	cmp	r0, r2
 8009c04:	d01a      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c0a:	4290      	cmp	r0, r2
 8009c0c:	d016      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009c0e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009c12:	4290      	cmp	r0, r2
 8009c14:	d012      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009c16:	4a1d      	ldr	r2, [pc, #116]	; (8009c8c <TIM_Base_SetConfig+0xd8>)
 8009c18:	4290      	cmp	r0, r2
 8009c1a:	d00f      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c20:	4290      	cmp	r0, r2
 8009c22:	d00b      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009c24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c28:	4290      	cmp	r0, r2
 8009c2a:	d007      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009c2c:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8009c30:	4290      	cmp	r0, r2
 8009c32:	d003      	beq.n	8009c3c <TIM_Base_SetConfig+0x88>
 8009c34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c38:	4290      	cmp	r0, r2
 8009c3a:	d103      	bne.n	8009c44 <TIM_Base_SetConfig+0x90>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c40:	68ca      	ldr	r2, [r1, #12]
 8009c42:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c44:	694a      	ldr	r2, [r1, #20]
 8009c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c4a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009c4c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c4e:	688b      	ldr	r3, [r1, #8]
 8009c50:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009c52:	680b      	ldr	r3, [r1, #0]
 8009c54:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <TIM_Base_SetConfig+0xd4>)
 8009c58:	4298      	cmp	r0, r3
 8009c5a:	d00f      	beq.n	8009c7c <TIM_Base_SetConfig+0xc8>
 8009c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c60:	4298      	cmp	r0, r3
 8009c62:	d00b      	beq.n	8009c7c <TIM_Base_SetConfig+0xc8>
 8009c64:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009c68:	4298      	cmp	r0, r3
 8009c6a:	d007      	beq.n	8009c7c <TIM_Base_SetConfig+0xc8>
 8009c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c70:	4298      	cmp	r0, r3
 8009c72:	d003      	beq.n	8009c7c <TIM_Base_SetConfig+0xc8>
 8009c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c78:	4298      	cmp	r0, r3
 8009c7a:	d101      	bne.n	8009c80 <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8009c7c:	690b      	ldr	r3, [r1, #16]
 8009c7e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009c80:	2301      	movs	r3, #1
 8009c82:	6143      	str	r3, [r0, #20]
}
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	40010000 	.word	0x40010000
 8009c8c:	40014000 	.word	0x40014000

08009c90 <HAL_TIM_Base_Init>:
{
 8009c90:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009c92:	4604      	mov	r4, r0
 8009c94:	b350      	cbz	r0, 8009cec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009c96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c9e:	b91b      	cbnz	r3, 8009ca8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009ca0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009ca4:	f7f7 fea8 	bl	80019f8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009cae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb2:	f7ff ff7f 	bl	8009bb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cb6:	2301      	movs	r3, #1
  return HAL_OK;
 8009cb8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009cc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009cc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009cca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cde:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009ce2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009ce6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009cea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009cec:	2001      	movs	r0, #1
 8009cee:	e7fc      	b.n	8009cea <HAL_TIM_Base_Init+0x5a>

08009cf0 <HAL_TIM_PWM_Init>:
{
 8009cf0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	b350      	cbz	r0, 8009d4c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009cf6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009cfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009cfe:	b91b      	cbnz	r3, 8009d08 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009d00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009d04:	f7f7 fe3a 	bl	800197c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009d08:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009d0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d12:	f7ff ff4f 	bl	8009bb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d16:	2301      	movs	r3, #1
  return HAL_OK;
 8009d18:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d1a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009d22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009d26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009d2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009d2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d3e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009d42:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009d4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	e7fc      	b.n	8009d4a <HAL_TIM_PWM_Init+0x5a>

08009d50 <HAL_TIM_Encoder_Init>:
{
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	460d      	mov	r5, r1
  if (htim == NULL)
 8009d54:	4604      	mov	r4, r0
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d04d      	beq.n	8009df6 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009d5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d62:	b91b      	cbnz	r3, 8009d6c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8009d64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8009d68:	f7f7 fe6a 	bl	8001a40 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009d6c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009d74:	f851 0b04 	ldr.w	r0, [r1], #4
 8009d78:	6883      	ldr	r3, [r0, #8]
 8009d7a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009d7e:	f023 0307 	bic.w	r3, r3, #7
 8009d82:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d84:	f7ff ff16 	bl	8009bb4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8009d88:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8009d8a:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8009d8c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8009d8e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009d90:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8009d92:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009d94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009d98:	69ab      	ldr	r3, [r5, #24]
  tmpccer = htim->Instance->CCER;
 8009d9a:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009d9c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009da0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009da4:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009da6:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009da8:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009dac:	692b      	ldr	r3, [r5, #16]
 8009dae:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009db0:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009db4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009db8:	68e9      	ldr	r1, [r5, #12]
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	6a29      	ldr	r1, [r5, #32]
 8009dbe:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dc2:	6969      	ldr	r1, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009dc4:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009dc6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dca:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8009dcc:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dce:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8009dd2:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dd4:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dd6:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8009dd8:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8009dda:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ddc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009de0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009de4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009de8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009dec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009df0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8009df6:	2001      	movs	r0, #1
 8009df8:	e7fc      	b.n	8009df4 <HAL_TIM_Encoder_Init+0xa4>
	...

08009dfc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dfc:	6a03      	ldr	r3, [r0, #32]
 8009dfe:	f023 0310 	bic.w	r3, r3, #16
{
 8009e02:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e04:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009e06:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009e08:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009e0a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8009e0c:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009e16:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e1e:	688d      	ldr	r5, [r1, #8]
 8009e20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e24:	4d16      	ldr	r5, [pc, #88]	; (8009e80 <TIM_OC2_SetConfig+0x84>)
 8009e26:	42a8      	cmp	r0, r5
 8009e28:	d003      	beq.n	8009e32 <TIM_OC2_SetConfig+0x36>
 8009e2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e2e:	42a8      	cmp	r0, r5
 8009e30:	d10d      	bne.n	8009e4e <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e32:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3c:	4d10      	ldr	r5, [pc, #64]	; (8009e80 <TIM_OC2_SetConfig+0x84>)
 8009e3e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e44:	d00e      	beq.n	8009e64 <TIM_OC2_SetConfig+0x68>
 8009e46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e4a:	42a8      	cmp	r0, r5
 8009e4c:	d00a      	beq.n	8009e64 <TIM_OC2_SetConfig+0x68>
 8009e4e:	4d0d      	ldr	r5, [pc, #52]	; (8009e84 <TIM_OC2_SetConfig+0x88>)
 8009e50:	42a8      	cmp	r0, r5
 8009e52:	d007      	beq.n	8009e64 <TIM_OC2_SetConfig+0x68>
 8009e54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e58:	42a8      	cmp	r0, r5
 8009e5a:	d003      	beq.n	8009e64 <TIM_OC2_SetConfig+0x68>
 8009e5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e60:	42a8      	cmp	r0, r5
 8009e62:	d106      	bne.n	8009e72 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e64:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e68:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8009e6c:	4334      	orrs	r4, r6
 8009e6e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8009e72:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009e74:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009e76:	684a      	ldr	r2, [r1, #4]
 8009e78:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009e7a:	6203      	str	r3, [r0, #32]
}
 8009e7c:	bd70      	pop	{r4, r5, r6, pc}
 8009e7e:	bf00      	nop
 8009e80:	40010000 	.word	0x40010000
 8009e84:	40014000 	.word	0x40014000

08009e88 <HAL_TIM_PWM_ConfigChannel>:
{
 8009e88:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8009e8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8009e8e:	4605      	mov	r5, r0
 8009e90:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d07a      	beq.n	8009f8c <HAL_TIM_PWM_ConfigChannel+0x104>
 8009e96:	2201      	movs	r2, #1
  switch (Channel)
 8009e98:	2c0c      	cmp	r4, #12
  __HAL_LOCK(htim);
 8009e9a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 8009e9e:	d053      	beq.n	8009f48 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8009ea0:	d809      	bhi.n	8009eb6 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8009ea2:	2c04      	cmp	r4, #4
 8009ea4:	d02e      	beq.n	8009f04 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8009ea6:	2c08      	cmp	r4, #8
 8009ea8:	d03d      	beq.n	8009f26 <HAL_TIM_PWM_ConfigChannel+0x9e>
 8009eaa:	b1cc      	cbz	r4, 8009ee0 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_UNLOCK(htim);
 8009eac:	2300      	movs	r3, #0
 8009eae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8009eb6:	2c10      	cmp	r4, #16
 8009eb8:	d057      	beq.n	8009f6a <HAL_TIM_PWM_ConfigChannel+0xe2>
 8009eba:	2c14      	cmp	r4, #20
 8009ebc:	d1f6      	bne.n	8009eac <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ebe:	6800      	ldr	r0, [r0, #0]
 8009ec0:	f7ff fcdc 	bl	800987c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ec4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ec6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ece:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ed6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009ede:	e053      	b.n	8009f88 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ee0:	6800      	ldr	r0, [r0, #0]
 8009ee2:	f7ff fbd3 	bl	800968c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ee6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ee8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009eea:	699a      	ldr	r2, [r3, #24]
 8009eec:	f042 0208 	orr.w	r2, r2, #8
 8009ef0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ef2:	699a      	ldr	r2, [r3, #24]
 8009ef4:	f022 0204 	bic.w	r2, r2, #4
 8009ef8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009efa:	699a      	ldr	r2, [r3, #24]
 8009efc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009efe:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009f00:	2200      	movs	r2, #0
      break;
 8009f02:	e7d3      	b.n	8009eac <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f04:	6800      	ldr	r0, [r0, #0]
 8009f06:	f7ff ff79 	bl	8009dfc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f0a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f0c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f0e:	699a      	ldr	r2, [r3, #24]
 8009f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f16:	699a      	ldr	r2, [r3, #24]
 8009f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f1e:	699a      	ldr	r2, [r3, #24]
 8009f20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f24:	e7eb      	b.n	8009efe <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f26:	6800      	ldr	r0, [r0, #0]
 8009f28:	f7ff fbfc 	bl	8009724 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f2c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f2e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f30:	69da      	ldr	r2, [r3, #28]
 8009f32:	f042 0208 	orr.w	r2, r2, #8
 8009f36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f38:	69da      	ldr	r2, [r3, #28]
 8009f3a:	f022 0204 	bic.w	r2, r2, #4
 8009f3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f40:	69da      	ldr	r2, [r3, #28]
 8009f42:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f44:	61da      	str	r2, [r3, #28]
      break;
 8009f46:	e7db      	b.n	8009f00 <HAL_TIM_PWM_ConfigChannel+0x78>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f48:	6800      	ldr	r0, [r0, #0]
 8009f4a:	f7ff fc2f 	bl	80097ac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f4e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f50:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f52:	69da      	ldr	r2, [r3, #28]
 8009f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f5a:	69da      	ldr	r2, [r3, #28]
 8009f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f62:	69da      	ldr	r2, [r3, #28]
 8009f64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f68:	e7ec      	b.n	8009f44 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	f7ff fc52 	bl	8009814 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f70:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f72:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f76:	f042 0208 	orr.w	r2, r2, #8
 8009f7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f7e:	f022 0204 	bic.w	r2, r2, #4
 8009f82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f86:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f88:	655a      	str	r2, [r3, #84]	; 0x54
 8009f8a:	e7b9      	b.n	8009f00 <HAL_TIM_PWM_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	e790      	b.n	8009eb2 <HAL_TIM_PWM_ConfigChannel+0x2a>

08009f90 <TIM_CCxChannelCmd>:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f90:	f001 011f 	and.w	r1, r1, #31
  TIMx->CCER &= ~tmp;
 8009f94:	6a03      	ldr	r3, [r0, #32]
{
 8009f96:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f98:	2401      	movs	r4, #1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f9a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f9c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8009f9e:	ea23 0304 	bic.w	r3, r3, r4
 8009fa2:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fa4:	6a03      	ldr	r3, [r0, #32]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	6202      	str	r2, [r0, #32]
}
 8009faa:	bd10      	pop	{r4, pc}

08009fac <HAL_TIM_OC_Start>:
{
 8009fac:	b510      	push	{r4, lr}
 8009fae:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fb0:	b929      	cbnz	r1, 8009fbe <HAL_TIM_OC_Start+0x12>
 8009fb2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d031      	beq.n	800a01e <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8009fba:	2001      	movs	r0, #1
}
 8009fbc:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fbe:	2904      	cmp	r1, #4
 8009fc0:	d107      	bne.n	8009fd2 <HAL_TIM_OC_Start+0x26>
 8009fc2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d1f7      	bne.n	8009fba <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fca:	2302      	movs	r3, #2
 8009fcc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8009fd0:	e028      	b.n	800a024 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fd2:	2908      	cmp	r1, #8
 8009fd4:	d107      	bne.n	8009fe6 <HAL_TIM_OC_Start+0x3a>
 8009fd6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d1ed      	bne.n	8009fba <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fde:	2302      	movs	r3, #2
 8009fe0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009fe4:	e01e      	b.n	800a024 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fe6:	290c      	cmp	r1, #12
 8009fe8:	d107      	bne.n	8009ffa <HAL_TIM_OC_Start+0x4e>
 8009fea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d1e3      	bne.n	8009fba <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8009ff8:	e014      	b.n	800a024 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ffa:	2910      	cmp	r1, #16
 8009ffc:	d107      	bne.n	800a00e <HAL_TIM_OC_Start+0x62>
 8009ffe:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a002:	2b01      	cmp	r3, #1
 800a004:	d1d9      	bne.n	8009fba <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a006:	2302      	movs	r3, #2
 800a008:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800a00c:	e00a      	b.n	800a024 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a00e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a012:	2b01      	cmp	r3, #1
 800a014:	d1d1      	bne.n	8009fba <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a016:	2302      	movs	r3, #2
 800a018:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800a01c:	e002      	b.n	800a024 <HAL_TIM_OC_Start+0x78>
 800a01e:	2302      	movs	r3, #2
 800a020:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a024:	2201      	movs	r2, #1
 800a026:	6820      	ldr	r0, [r4, #0]
 800a028:	f7ff ffb2 	bl	8009f90 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	4a26      	ldr	r2, [pc, #152]	; (800a0c8 <HAL_TIM_OC_Start+0x11c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d019      	beq.n	800a068 <HAL_TIM_OC_Start+0xbc>
 800a034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a038:	4293      	cmp	r3, r2
 800a03a:	d015      	beq.n	800a068 <HAL_TIM_OC_Start+0xbc>
 800a03c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a040:	4293      	cmp	r3, r2
 800a042:	d011      	beq.n	800a068 <HAL_TIM_OC_Start+0xbc>
 800a044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a048:	4293      	cmp	r3, r2
 800a04a:	d00d      	beq.n	800a068 <HAL_TIM_OC_Start+0xbc>
 800a04c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a050:	4293      	cmp	r3, r2
 800a052:	d009      	beq.n	800a068 <HAL_TIM_OC_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a058:	d10e      	bne.n	800a078 <HAL_TIM_OC_Start+0xcc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a05a:	6899      	ldr	r1, [r3, #8]
 800a05c:	4a1b      	ldr	r2, [pc, #108]	; (800a0cc <HAL_TIM_OC_Start+0x120>)
 800a05e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a060:	2a06      	cmp	r2, #6
 800a062:	d12d      	bne.n	800a0c0 <HAL_TIM_OC_Start+0x114>
  return HAL_OK;
 800a064:	2000      	movs	r0, #0
 800a066:	e7a9      	b.n	8009fbc <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 800a068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a06a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a06e:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a070:	4a15      	ldr	r2, [pc, #84]	; (800a0c8 <HAL_TIM_OC_Start+0x11c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d1ee      	bne.n	800a054 <HAL_TIM_OC_Start+0xa8>
 800a076:	e7f0      	b.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a078:	4a15      	ldr	r2, [pc, #84]	; (800a0d0 <HAL_TIM_OC_Start+0x124>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d0ed      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a07e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a082:	4293      	cmp	r3, r2
 800a084:	d0e9      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d0e5      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a08e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a092:	4293      	cmp	r3, r2
 800a094:	d0e1      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a096:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d0dd      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a09e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d0d9      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a0a6:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d0d5      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
 800a0ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d0d1      	beq.n	800a05a <HAL_TIM_OC_Start+0xae>
    __HAL_TIM_ENABLE(htim);
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	f042 0201 	orr.w	r2, r2, #1
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	e7d1      	b.n	800a064 <HAL_TIM_OC_Start+0xb8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a0c4:	d1f7      	bne.n	800a0b6 <HAL_TIM_OC_Start+0x10a>
 800a0c6:	e7cd      	b.n	800a064 <HAL_TIM_OC_Start+0xb8>
 800a0c8:	40010000 	.word	0x40010000
 800a0cc:	00010007 	.word	0x00010007
 800a0d0:	40000400 	.word	0x40000400

0800a0d4 <HAL_TIM_PWM_Start>:
 800a0d4:	f7ff bf6a 	b.w	8009fac <HAL_TIM_OC_Start>

0800a0d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0d8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	f04f 0302 	mov.w	r3, #2
 800a0e4:	d045      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0ea:	4d23      	ldr	r5, [pc, #140]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 800a0ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0ee:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a0f0:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a0f2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0f4:	d003      	beq.n	800a0fe <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800a0f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a0fa:	42ab      	cmp	r3, r5
 800a0fc:	d103      	bne.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a102:	684d      	ldr	r5, [r1, #4]
 800a104:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a106:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a108:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a10c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a10e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a110:	4a19      	ldr	r2, [pc, #100]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d022      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11a:	d01f      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a11c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a120:	4293      	cmp	r3, r2
 800a122:	d01b      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a124:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a128:	4293      	cmp	r3, r2
 800a12a:	d017      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a12c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a130:	4293      	cmp	r3, r2
 800a132:	d013      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a134:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a138:	4293      	cmp	r3, r2
 800a13a:	d00f      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a13c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a140:	4293      	cmp	r3, r2
 800a142:	d00b      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a144:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a148:	4293      	cmp	r3, r2
 800a14a:	d007      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a14c:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a158:	4293      	cmp	r3, r2
 800a15a:	d104      	bne.n	800a166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a15c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a15e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a162:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a164:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a166:	2301      	movs	r3, #1
 800a168:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a16c:	2300      	movs	r3, #0
 800a16e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800a172:	4618      	mov	r0, r3

  return HAL_OK;
}
 800a174:	bd30      	pop	{r4, r5, pc}
 800a176:	bf00      	nop
 800a178:	40010000 	.word	0x40010000

0800a17c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a17c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d04c      	beq.n	800a220 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a186:	68cb      	ldr	r3, [r1, #12]
 800a188:	688a      	ldr	r2, [r1, #8]
 800a18a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a18e:	4c25      	ldr	r4, [pc, #148]	; (800a224 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a190:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a192:	684a      	ldr	r2, [r1, #4]
 800a194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a198:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a19a:	680a      	ldr	r2, [r1, #0]
 800a19c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1a2:	690a      	ldr	r2, [r1, #16]
 800a1a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1aa:	694a      	ldr	r2, [r1, #20]
 800a1ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1b2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a1b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1ba:	698a      	ldr	r2, [r1, #24]
 800a1bc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800a1c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1c4:	6802      	ldr	r2, [r0, #0]
 800a1c6:	42a2      	cmp	r2, r4
 800a1c8:	d002      	beq.n	800a1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800a1ca:	4d17      	ldr	r5, [pc, #92]	; (800a228 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800a1cc:	42aa      	cmp	r2, r5
 800a1ce:	d121      	bne.n	800a214 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1d4:	69cd      	ldr	r5, [r1, #28]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a1d6:	42a2      	cmp	r2, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1d8:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a1dc:	d002      	beq.n	800a1e4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800a1de:	4c12      	ldr	r4, [pc, #72]	; (800a228 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800a1e0:	42a2      	cmp	r2, r4
 800a1e2:	d117      	bne.n	800a214 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a1e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800a1e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1ea:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a1ee:	6a0c      	ldr	r4, [r1, #32]
 800a1f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1f4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a1f6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800a1f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a1fc:	4323      	orrs	r3, r4
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1fe:	4c09      	ldr	r4, [pc, #36]	; (800a224 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800a200:	42a2      	cmp	r2, r4
 800a202:	d003      	beq.n	800a20c <HAL_TIMEx_ConfigBreakDeadTime+0x90>
 800a204:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a208:	42a2      	cmp	r2, r4
 800a20a:	d103      	bne.n	800a214 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a20c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a210:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a212:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a214:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a216:	2300      	movs	r3, #0
 800a218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800a21c:	4618      	mov	r0, r3
}
 800a21e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800a220:	2002      	movs	r0, #2
 800a222:	e7fc      	b.n	800a21e <HAL_TIMEx_ConfigBreakDeadTime+0xa2>
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400

0800a22c <HAL_TIMEx_CommutCallback>:
 800a22c:	4770      	bx	lr

0800a22e <HAL_TIMEx_BreakCallback>:
 800a22e:	4770      	bx	lr

0800a230 <HAL_TIMEx_Break2Callback>:
 800a230:	4770      	bx	lr
	...

0800a234 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a234:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800a236:	4b05      	ldr	r3, [pc, #20]	; (800a24c <SysTick_Handler+0x18>)
 800a238:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a23a:	f001 fe47 	bl	800becc <xTaskGetSchedulerState>
 800a23e:	2801      	cmp	r0, #1
 800a240:	d003      	beq.n	800a24a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800a242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800a246:	f000 bbdd 	b.w	800aa04 <xPortSysTickHandler>
}
 800a24a:	bd08      	pop	{r3, pc}
 800a24c:	e000e010 	.word	0xe000e010

0800a250 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a250:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a254:	b92b      	cbnz	r3, 800a262 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800a256:	4b06      	ldr	r3, [pc, #24]	; (800a270 <osKernelInitialize+0x20>)
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	b928      	cbnz	r0, 800a268 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a25c:	2201      	movs	r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a260:	4770      	bx	lr
    stat = osErrorISR;
 800a262:	f06f 0005 	mvn.w	r0, #5
 800a266:	4770      	bx	lr
    } else {
      stat = osError;
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	240025a4 	.word	0x240025a4

0800a274 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a274:	b510      	push	{r4, lr}
 800a276:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a27a:	b95c      	cbnz	r4, 800a294 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800a27c:	4b08      	ldr	r3, [pc, #32]	; (800a2a0 <osKernelStart+0x2c>)
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	2a01      	cmp	r2, #1
 800a282:	d10a      	bne.n	800a29a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a284:	4a07      	ldr	r2, [pc, #28]	; (800a2a4 <osKernelStart+0x30>)
 800a286:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a288:	2202      	movs	r2, #2
 800a28a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a28c:	f001 fcc4 	bl	800bc18 <vTaskStartScheduler>
      stat = osOK;
 800a290:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800a292:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a294:	f06f 0005 	mvn.w	r0, #5
 800a298:	e7fb      	b.n	800a292 <osKernelStart+0x1e>
      stat = osError;
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800a29e:	e7f8      	b.n	800a292 <osKernelStart+0x1e>
 800a2a0:	240025a4 	.word	0x240025a4
 800a2a4:	e000ed00 	.word	0xe000ed00

0800a2a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2aa:	4614      	mov	r4, r2
 800a2ac:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2ae:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2b0:	460b      	mov	r3, r1
  hTask = NULL;
 800a2b2:	9205      	str	r2, [sp, #20]
 800a2b4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800a2b8:	b9d2      	cbnz	r2, 800a2f0 <osThreadNew+0x48>
 800a2ba:	b1c8      	cbz	r0, 800a2f0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800a2bc:	2c00      	cmp	r4, #0
 800a2be:	d02f      	beq.n	800a320 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800a2c0:	69a5      	ldr	r5, [r4, #24]
 800a2c2:	2d00      	cmp	r5, #0
 800a2c4:	bf08      	it	eq
 800a2c6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2c8:	1e69      	subs	r1, r5, #1
 800a2ca:	46ac      	mov	ip, r5
 800a2cc:	2937      	cmp	r1, #55	; 0x37
 800a2ce:	d82b      	bhi.n	800a328 <osThreadNew+0x80>
 800a2d0:	6861      	ldr	r1, [r4, #4]
 800a2d2:	07c9      	lsls	r1, r1, #31
 800a2d4:	d428      	bmi.n	800a328 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800a2d6:	6966      	ldr	r6, [r4, #20]
 800a2d8:	b16e      	cbz	r6, 800a2f6 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a2da:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800a2dc:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2de:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800a2e2:	b157      	cbz	r7, 800a2fa <osThreadNew+0x52>
 800a2e4:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a2e8:	d902      	bls.n	800a2f0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2ea:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2ec:	b104      	cbz	r4, 800a2f0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2ee:	b9ee      	cbnz	r6, 800a32c <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a2f0:	9805      	ldr	r0, [sp, #20]
}
 800a2f2:	b007      	add	sp, #28
 800a2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800a2f6:	2280      	movs	r2, #128	; 0x80
 800a2f8:	e7f0      	b.n	800a2dc <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2fa:	f1be 0f00 	cmp.w	lr, #0
 800a2fe:	d1f7      	bne.n	800a2f0 <osThreadNew+0x48>
      if (mem == 0) {
 800a300:	6924      	ldr	r4, [r4, #16]
 800a302:	2c00      	cmp	r4, #0
 800a304:	d1f4      	bne.n	800a2f0 <osThreadNew+0x48>
 800a306:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a308:	a905      	add	r1, sp, #20
 800a30a:	b292      	uxth	r2, r2
 800a30c:	e9cd c100 	strd	ip, r1, [sp]
 800a310:	4621      	mov	r1, r4
 800a312:	f001 fafb 	bl	800b90c <xTaskCreate>
 800a316:	2801      	cmp	r0, #1
            hTask = NULL;
 800a318:	bf1c      	itt	ne
 800a31a:	2300      	movne	r3, #0
 800a31c:	9305      	strne	r3, [sp, #20]
 800a31e:	e7e7      	b.n	800a2f0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800a320:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800a324:	2280      	movs	r2, #128	; 0x80
 800a326:	e7ef      	b.n	800a308 <osThreadNew+0x60>
        return (NULL);
 800a328:	4610      	mov	r0, r2
 800a32a:	e7e2      	b.n	800a2f2 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a32c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800a330:	9500      	str	r5, [sp, #0]
 800a332:	f001 fab3 	bl	800b89c <xTaskCreateStatic>
 800a336:	9005      	str	r0, [sp, #20]
 800a338:	e7da      	b.n	800a2f0 <osThreadNew+0x48>

0800a33a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a33a:	b510      	push	{r4, lr}
 800a33c:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a340:	b924      	cbnz	r4, 800a34c <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800a342:	b110      	cbz	r0, 800a34a <osDelay+0x10>
      vTaskDelay(ticks);
 800a344:	f001 fc28 	bl	800bb98 <vTaskDelay>
    stat = osOK;
 800a348:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800a34a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a34c:	f06f 0005 	mvn.w	r0, #5
 800a350:	e7fb      	b.n	800a34a <osDelay+0x10>

0800a352 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	460e      	mov	r6, r1
 800a358:	4615      	mov	r5, r2
 800a35a:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a35e:	b11a      	cbz	r2, 800a368 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800a360:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800a362:	4620      	mov	r0, r4
 800a364:	b003      	add	sp, #12
 800a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a368:	2800      	cmp	r0, #0
 800a36a:	d0f9      	beq.n	800a360 <osSemaphoreNew+0xe>
 800a36c:	4288      	cmp	r0, r1
 800a36e:	d3f7      	bcc.n	800a360 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800a370:	b1e5      	cbz	r5, 800a3ac <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a372:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800a376:	b1bb      	cbz	r3, 800a3a8 <osSemaphoreNew+0x56>
 800a378:	2f4f      	cmp	r7, #79	; 0x4f
 800a37a:	d9f1      	bls.n	800a360 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a37c:	2801      	cmp	r0, #1
 800a37e:	d12a      	bne.n	800a3d6 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a380:	2103      	movs	r1, #3
 800a382:	9100      	str	r1, [sp, #0]
 800a384:	4611      	mov	r1, r2
 800a386:	f000 fceb 	bl	800ad60 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800a38a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d0e7      	beq.n	800a360 <osSemaphoreNew+0xe>
 800a390:	b1de      	cbz	r6, 800a3ca <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a392:	2300      	movs	r3, #0
 800a394:	461a      	mov	r2, r3
 800a396:	4619      	mov	r1, r3
 800a398:	f000 fd98 	bl	800aecc <xQueueGenericSend>
 800a39c:	2801      	cmp	r0, #1
 800a39e:	d014      	beq.n	800a3ca <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f001 f8d9 	bl	800b558 <vQueueDelete>
 800a3a6:	e7db      	b.n	800a360 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a3a8:	2f00      	cmp	r7, #0
 800a3aa:	d1d9      	bne.n	800a360 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a3ac:	2c01      	cmp	r4, #1
 800a3ae:	d105      	bne.n	800a3bc <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800a3b0:	2203      	movs	r2, #3
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f000 fd21 	bl	800adfc <xQueueGenericCreate>
 800a3ba:	e7e6      	b.n	800a38a <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4631      	mov	r1, r6
 800a3c0:	f000 fd65 	bl	800ae8e <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d0ca      	beq.n	800a360 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800a3ca:	b955      	cbnz	r5, 800a3e2 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f001 f898 	bl	800b504 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800a3d4:	e7c5      	b.n	800a362 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f000 fd37 	bl	800ae4a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800a3dc:	4604      	mov	r4, r0
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d0be      	beq.n	800a360 <osSemaphoreNew+0xe>
          name = attr->name;
 800a3e2:	682d      	ldr	r5, [r5, #0]
 800a3e4:	e7f2      	b.n	800a3cc <osSemaphoreNew+0x7a>
	...

0800a3e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a3e8:	b513      	push	{r0, r1, r4, lr}
 800a3ea:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a3ec:	b1f8      	cbz	r0, 800a42e <osSemaphoreAcquire+0x46>
 800a3ee:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a3f2:	b1a3      	cbz	r3, 800a41e <osSemaphoreAcquire+0x36>
    if (timeout != 0U) {
 800a3f4:	b9d9      	cbnz	r1, 800a42e <osSemaphoreAcquire+0x46>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a3f6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a3f8:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a3fa:	f001 f833 	bl	800b464 <xQueueReceiveFromISR>
 800a3fe:	2801      	cmp	r0, #1
 800a400:	d112      	bne.n	800a428 <osSemaphoreAcquire+0x40>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	b913      	cbnz	r3, 800a40c <osSemaphoreAcquire+0x24>
  stat = osOK;
 800a406:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a408:	b002      	add	sp, #8
 800a40a:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800a40c:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <osSemaphoreAcquire+0x54>)
 800a40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	e7f3      	b.n	800a406 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a41e:	f000 ff5d 	bl	800b2dc <xQueueSemaphoreTake>
 800a422:	2801      	cmp	r0, #1
 800a424:	d0ef      	beq.n	800a406 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800a426:	b92c      	cbnz	r4, 800a434 <osSemaphoreAcquire+0x4c>
        stat = osErrorResource;
 800a428:	f06f 0002 	mvn.w	r0, #2
 800a42c:	e7ec      	b.n	800a408 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a42e:	f06f 0003 	mvn.w	r0, #3
 800a432:	e7e9      	b.n	800a408 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800a434:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a438:	e7e6      	b.n	800a408 <osSemaphoreAcquire+0x20>
 800a43a:	bf00      	nop
 800a43c:	e000ed04 	.word	0xe000ed04

0800a440 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a440:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a442:	b300      	cbz	r0, 800a486 <osSemaphoreRelease+0x46>
 800a444:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a448:	b1a3      	cbz	r3, 800a474 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 800a44a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a44c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800a44e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a450:	f000 fe50 	bl	800b0f4 <xQueueGiveFromISR>
 800a454:	2801      	cmp	r0, #1
 800a456:	d113      	bne.n	800a480 <osSemaphoreRelease+0x40>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	b913      	cbnz	r3, 800a462 <osSemaphoreRelease+0x22>
  stat = osOK;
 800a45c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800a45e:	b002      	add	sp, #8
 800a460:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800a462:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <osSemaphoreRelease+0x4c>)
 800a464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	e7f3      	b.n	800a45c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a474:	461a      	mov	r2, r3
 800a476:	4619      	mov	r1, r3
 800a478:	f000 fd28 	bl	800aecc <xQueueGenericSend>
 800a47c:	2801      	cmp	r0, #1
 800a47e:	d0ed      	beq.n	800a45c <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800a480:	f06f 0002 	mvn.w	r0, #2
 800a484:	e7eb      	b.n	800a45e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a486:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800a48a:	e7e8      	b.n	800a45e <osSemaphoreRelease+0x1e>
 800a48c:	e000ed04 	.word	0xe000ed04

0800a490 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a492:	4606      	mov	r6, r0
 800a494:	460d      	mov	r5, r1
 800a496:	4614      	mov	r4, r2
 800a498:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a49c:	b11f      	cbz	r7, 800a4a6 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800a49e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	b003      	add	sp, #12
 800a4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d0f9      	beq.n	800a49e <osMessageQueueNew+0xe>
 800a4aa:	2900      	cmp	r1, #0
 800a4ac:	d0f7      	beq.n	800a49e <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800a4ae:	b1da      	cbz	r2, 800a4e8 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4b0:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800a4b4:	b183      	cbz	r3, 800a4d8 <osMessageQueueNew+0x48>
 800a4b6:	2a4f      	cmp	r2, #79	; 0x4f
 800a4b8:	d9f1      	bls.n	800a49e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4ba:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4bc:	2a00      	cmp	r2, #0
 800a4be:	d0ee      	beq.n	800a49e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4c0:	4345      	muls	r5, r0
 800a4c2:	6966      	ldr	r6, [r4, #20]
 800a4c4:	42ae      	cmp	r6, r5
 800a4c6:	d3ea      	bcc.n	800a49e <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a4c8:	9700      	str	r7, [sp, #0]
 800a4ca:	f000 fc49 	bl	800ad60 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d0e4      	beq.n	800a49e <osMessageQueueNew+0xe>
        name = attr->name;
 800a4d4:	6824      	ldr	r4, [r4, #0]
 800a4d6:	e011      	b.n	800a4fc <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4d8:	2a00      	cmp	r2, #0
 800a4da:	d1e0      	bne.n	800a49e <osMessageQueueNew+0xe>
 800a4dc:	6923      	ldr	r3, [r4, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1dd      	bne.n	800a49e <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4e2:	6963      	ldr	r3, [r4, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1da      	bne.n	800a49e <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f000 fc85 	bl	800adfc <xQueueGenericCreate>
    if (hQueue != NULL) {
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d0d2      	beq.n	800a49e <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800a4f8:	2c00      	cmp	r4, #0
 800a4fa:	d1eb      	bne.n	800a4d4 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4628      	mov	r0, r5
 800a500:	f001 f800 	bl	800b504 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800a504:	e7cc      	b.n	800a4a0 <osMessageQueueNew+0x10>
	...

0800a508 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a50a:	461c      	mov	r4, r3
 800a50c:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a510:	b1b6      	cbz	r6, 800a540 <osMessageQueuePut+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a512:	b308      	cbz	r0, 800a558 <osMessageQueuePut+0x50>
 800a514:	b301      	cbz	r1, 800a558 <osMessageQueuePut+0x50>
 800a516:	b9fb      	cbnz	r3, 800a558 <osMessageQueuePut+0x50>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a518:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a51a:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a51c:	f000 fd88 	bl	800b030 <xQueueGenericSendFromISR>
 800a520:	2801      	cmp	r0, #1
 800a522:	d116      	bne.n	800a552 <osMessageQueuePut+0x4a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	b913      	cbnz	r3, 800a52e <osMessageQueuePut+0x26>
  stat = osOK;
 800a528:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a52a:	b002      	add	sp, #8
 800a52c:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800a52e:	4b0d      	ldr	r3, [pc, #52]	; (800a564 <osMessageQueuePut+0x5c>)
 800a530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	e7f3      	b.n	800a528 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a540:	b150      	cbz	r0, 800a558 <osMessageQueuePut+0x50>
 800a542:	b149      	cbz	r1, 800a558 <osMessageQueuePut+0x50>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a544:	4633      	mov	r3, r6
 800a546:	4622      	mov	r2, r4
 800a548:	f000 fcc0 	bl	800aecc <xQueueGenericSend>
 800a54c:	2801      	cmp	r0, #1
 800a54e:	d0eb      	beq.n	800a528 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800a550:	b92c      	cbnz	r4, 800a55e <osMessageQueuePut+0x56>
          stat = osErrorResource;
 800a552:	f06f 0002 	mvn.w	r0, #2
 800a556:	e7e8      	b.n	800a52a <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800a558:	f06f 0003 	mvn.w	r0, #3
 800a55c:	e7e5      	b.n	800a52a <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800a55e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a562:	e7e2      	b.n	800a52a <osMessageQueuePut+0x22>
 800a564:	e000ed04 	.word	0xe000ed04

0800a568 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a56a:	461c      	mov	r4, r3
 800a56c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a570:	b1b3      	cbz	r3, 800a5a0 <osMessageQueueGet+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a572:	b300      	cbz	r0, 800a5b6 <osMessageQueueGet+0x4e>
 800a574:	b1f9      	cbz	r1, 800a5b6 <osMessageQueueGet+0x4e>
 800a576:	b9f4      	cbnz	r4, 800a5b6 <osMessageQueueGet+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a578:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a57a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a57c:	f000 ff72 	bl	800b464 <xQueueReceiveFromISR>
 800a580:	2801      	cmp	r0, #1
 800a582:	d115      	bne.n	800a5b0 <osMessageQueueGet+0x48>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a584:	9b01      	ldr	r3, [sp, #4]
 800a586:	b913      	cbnz	r3, 800a58e <osMessageQueueGet+0x26>
  stat = osOK;
 800a588:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a58a:	b003      	add	sp, #12
 800a58c:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800a58e:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <osMessageQueueGet+0x5c>)
 800a590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	e7f3      	b.n	800a588 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5a0:	b148      	cbz	r0, 800a5b6 <osMessageQueueGet+0x4e>
 800a5a2:	b141      	cbz	r1, 800a5b6 <osMessageQueueGet+0x4e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	f000 fdf9 	bl	800b19c <xQueueReceive>
 800a5aa:	2801      	cmp	r0, #1
 800a5ac:	d0ec      	beq.n	800a588 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800a5ae:	b92c      	cbnz	r4, 800a5bc <osMessageQueueGet+0x54>
          stat = osErrorResource;
 800a5b0:	f06f 0002 	mvn.w	r0, #2
 800a5b4:	e7e9      	b.n	800a58a <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800a5b6:	f06f 0003 	mvn.w	r0, #3
 800a5ba:	e7e6      	b.n	800a58a <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800a5bc:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a5c0:	e7e3      	b.n	800a58a <osMessageQueueGet+0x22>
 800a5c2:	bf00      	nop
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a5c8:	4b03      	ldr	r3, [pc, #12]	; (800a5d8 <vApplicationGetIdleTaskMemory+0x10>)
 800a5ca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a5cc:	4b03      	ldr	r3, [pc, #12]	; (800a5dc <vApplicationGetIdleTaskMemory+0x14>)
 800a5ce:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a5d0:	2380      	movs	r3, #128	; 0x80
 800a5d2:	6013      	str	r3, [r2, #0]
}
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	24002544 	.word	0x24002544
 800a5dc:	24002344 	.word	0x24002344

0800a5e0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a5e0:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <vApplicationGetTimerTaskMemory+0x10>)
 800a5e2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a5e4:	4b03      	ldr	r3, [pc, #12]	; (800a5f4 <vApplicationGetTimerTaskMemory+0x14>)
 800a5e6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a5e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ec:	6013      	str	r3, [r2, #0]
}
 800a5ee:	4770      	bx	lr
 800a5f0:	240029a8 	.word	0x240029a8
 800a5f4:	240025a8 	.word	0x240025a8

0800a5f8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5f8:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <prvInsertBlockIntoFreeList+0x40>)
{
 800a5fa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4283      	cmp	r3, r0
 800a602:	d3fb      	bcc.n	800a5fc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a604:	6854      	ldr	r4, [r2, #4]
 800a606:	1911      	adds	r1, r2, r4
 800a608:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a60a:	bf01      	itttt	eq
 800a60c:	6841      	ldreq	r1, [r0, #4]
 800a60e:	4610      	moveq	r0, r2
 800a610:	1909      	addeq	r1, r1, r4
 800a612:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a614:	6844      	ldr	r4, [r0, #4]
 800a616:	1901      	adds	r1, r0, r4
 800a618:	428b      	cmp	r3, r1
 800a61a:	d107      	bne.n	800a62c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a61c:	4907      	ldr	r1, [pc, #28]	; (800a63c <prvInsertBlockIntoFreeList+0x44>)
 800a61e:	6809      	ldr	r1, [r1, #0]
 800a620:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a622:	bf1f      	itttt	ne
 800a624:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a626:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a628:	1909      	addne	r1, r1, r4
 800a62a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a62c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a62e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a630:	bf18      	it	ne
 800a632:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a634:	bd10      	pop	{r4, pc}
 800a636:	bf00      	nop
 800a638:	24006620 	.word	0x24006620
 800a63c:	24002a08 	.word	0x24002a08

0800a640 <pvPortMalloc>:
{
 800a640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a644:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a646:	f001 f98f 	bl	800b968 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a64a:	4b3e      	ldr	r3, [pc, #248]	; (800a744 <pvPortMalloc+0x104>)
 800a64c:	483e      	ldr	r0, [pc, #248]	; (800a748 <pvPortMalloc+0x108>)
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	469c      	mov	ip, r3
 800a652:	b9d2      	cbnz	r2, 800a68a <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 800a654:	4a3d      	ldr	r2, [pc, #244]	; (800a74c <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 800a656:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a658:	4b3d      	ldr	r3, [pc, #244]	; (800a750 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a65a:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 800a65c:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a65e:	bf1c      	itt	ne
 800a660:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a662:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a666:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 800a668:	4b3a      	ldr	r3, [pc, #232]	; (800a754 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a66a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800a66e:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a672:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800a674:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a678:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a67c:	4b36      	ldr	r3, [pc, #216]	; (800a758 <pvPortMalloc+0x118>)
 800a67e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a680:	4b36      	ldr	r3, [pc, #216]	; (800a75c <pvPortMalloc+0x11c>)
 800a682:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a688:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a68a:	6807      	ldr	r7, [r0, #0]
 800a68c:	4227      	tst	r7, r4
 800a68e:	d153      	bne.n	800a738 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 800a690:	2c00      	cmp	r4, #0
 800a692:	d044      	beq.n	800a71e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800a694:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a698:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a69a:	bf1c      	itt	ne
 800a69c:	f023 0307 	bicne.w	r3, r3, #7
 800a6a0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d048      	beq.n	800a738 <pvPortMalloc+0xf8>
 800a6a6:	4a2d      	ldr	r2, [pc, #180]	; (800a75c <pvPortMalloc+0x11c>)
 800a6a8:	6816      	ldr	r6, [r2, #0]
 800a6aa:	4690      	mov	r8, r2
 800a6ac:	429e      	cmp	r6, r3
 800a6ae:	d343      	bcc.n	800a738 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 800a6b0:	4a27      	ldr	r2, [pc, #156]	; (800a750 <pvPortMalloc+0x110>)
 800a6b2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6b4:	6869      	ldr	r1, [r5, #4]
 800a6b6:	4299      	cmp	r1, r3
 800a6b8:	d201      	bcs.n	800a6be <pvPortMalloc+0x7e>
 800a6ba:	6828      	ldr	r0, [r5, #0]
 800a6bc:	b9a8      	cbnz	r0, 800a6ea <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 800a6be:	f8dc 0000 	ldr.w	r0, [ip]
 800a6c2:	42a8      	cmp	r0, r5
 800a6c4:	d038      	beq.n	800a738 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6c6:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6c8:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6ca:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6cc:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6ce:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6d0:	d912      	bls.n	800a6f8 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6d2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d4:	0742      	lsls	r2, r0, #29
 800a6d6:	d00b      	beq.n	800a6f0 <pvPortMalloc+0xb0>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	e7fe      	b.n	800a6e8 <pvPortMalloc+0xa8>
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	e7e1      	b.n	800a6b4 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6f0:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6f2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6f4:	f7ff ff80 	bl	800a5f8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6f8:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6fa:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6fc:	4916      	ldr	r1, [pc, #88]	; (800a758 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6fe:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a700:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800a702:	4a17      	ldr	r2, [pc, #92]	; (800a760 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800a704:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a706:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800a708:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800a70a:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a70c:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a70e:	f8c8 6000 	str.w	r6, [r8]
					xNumberOfSuccessfulAllocations++;
 800a712:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a716:	bf38      	it	cc
 800a718:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a71a:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800a71c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800a71e:	f001 f9c7 	bl	800bab0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a722:	0763      	lsls	r3, r4, #29
 800a724:	d00a      	beq.n	800a73c <pvPortMalloc+0xfc>
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	e7fe      	b.n	800a736 <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 800a738:	2400      	movs	r4, #0
 800a73a:	e7f0      	b.n	800a71e <pvPortMalloc+0xde>
}
 800a73c:	4620      	mov	r0, r4
 800a73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a742:	bf00      	nop
 800a744:	24002a08 	.word	0x24002a08
 800a748:	2400660c 	.word	0x2400660c
 800a74c:	24002a0c 	.word	0x24002a0c
 800a750:	24006620 	.word	0x24006620
 800a754:	24006604 	.word	0x24006604
 800a758:	24006614 	.word	0x24006614
 800a75c:	24006610 	.word	0x24006610
 800a760:	24006618 	.word	0x24006618

0800a764 <vPortFree>:
{
 800a764:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a766:	4604      	mov	r4, r0
 800a768:	b390      	cbz	r0, 800a7d0 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a76a:	4a1a      	ldr	r2, [pc, #104]	; (800a7d4 <vPortFree+0x70>)
 800a76c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	4213      	tst	r3, r2
 800a774:	d108      	bne.n	800a788 <vPortFree+0x24>
 800a776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	e7fe      	b.n	800a786 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a788:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a78c:	b141      	cbz	r1, 800a7a0 <vPortFree+0x3c>
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	e7fe      	b.n	800a79e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7a0:	ea23 0302 	bic.w	r3, r3, r2
 800a7a4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a7a8:	f001 f8de 	bl	800b968 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7ac:	4a0a      	ldr	r2, [pc, #40]	; (800a7d8 <vPortFree+0x74>)
 800a7ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7b2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7b6:	6811      	ldr	r1, [r2, #0]
 800a7b8:	440b      	add	r3, r1
 800a7ba:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7bc:	f7ff ff1c 	bl	800a5f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7c0:	4a06      	ldr	r2, [pc, #24]	; (800a7dc <vPortFree+0x78>)
 800a7c2:	6813      	ldr	r3, [r2, #0]
 800a7c4:	3301      	adds	r3, #1
}
 800a7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800a7ca:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a7cc:	f001 b970 	b.w	800bab0 <xTaskResumeAll>
}
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	bf00      	nop
 800a7d4:	2400660c 	.word	0x2400660c
 800a7d8:	24006610 	.word	0x24006610
 800a7dc:	2400661c 	.word	0x2400661c

0800a7e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7e0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7e4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7e8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7ea:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7ec:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7f4:	4770      	bx	lr

0800a7f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7fa:	4770      	bx	lr

0800a7fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7fc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7fe:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800a800:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a802:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a808:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a80a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a80c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a80e:	3301      	adds	r3, #1
 800a810:	6003      	str	r3, [r0, #0]
}
 800a812:	4770      	bx	lr

0800a814 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a814:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a816:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a818:	1c63      	adds	r3, r4, #1
 800a81a:	d10a      	bne.n	800a832 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a81c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a822:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a824:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a826:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a828:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a82a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a82c:	3301      	adds	r3, #1
 800a82e:	6003      	str	r3, [r0, #0]
}
 800a830:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a832:	f100 0208 	add.w	r2, r0, #8
 800a836:	4613      	mov	r3, r2
 800a838:	6852      	ldr	r2, [r2, #4]
 800a83a:	6815      	ldr	r5, [r2, #0]
 800a83c:	42a5      	cmp	r5, r4
 800a83e:	d9fa      	bls.n	800a836 <vListInsert+0x22>
 800a840:	e7ed      	b.n	800a81e <vListInsert+0xa>

0800a842 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a842:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a844:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800a848:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a84a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a84c:	6859      	ldr	r1, [r3, #4]
 800a84e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a850:	bf08      	it	eq
 800a852:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a854:	2200      	movs	r2, #0
 800a856:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	3a01      	subs	r2, #1
 800a85c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a85e:	6818      	ldr	r0, [r3, #0]
}
 800a860:	4770      	bx	lr
	...

0800a864 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a864:	4808      	ldr	r0, [pc, #32]	; (800a888 <prvPortStartFirstTask+0x24>)
 800a866:	6800      	ldr	r0, [r0, #0]
 800a868:	6800      	ldr	r0, [r0, #0]
 800a86a:	f380 8808 	msr	MSP, r0
 800a86e:	f04f 0000 	mov.w	r0, #0
 800a872:	f380 8814 	msr	CONTROL, r0
 800a876:	b662      	cpsie	i
 800a878:	b661      	cpsie	f
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	df00      	svc	0
 800a884:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a886:	0000      	.short	0x0000
 800a888:	e000ed08 	.word	0xe000ed08

0800a88c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a88c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a89c <vPortEnableVFP+0x10>
 800a890:	6801      	ldr	r1, [r0, #0]
 800a892:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a896:	6001      	str	r1, [r0, #0]
 800a898:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a89a:	0000      	.short	0x0000
 800a89c:	e000ed88 	.word	0xe000ed88

0800a8a0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800a8a0:	2300      	movs	r3, #0
{
 800a8a2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a8a4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a8a6:	4b0d      	ldr	r3, [pc, #52]	; (800a8dc <prvTaskExitError+0x3c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	d008      	beq.n	800a8c0 <prvTaskExitError+0x20>
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	e7fe      	b.n	800a8be <prvTaskExitError+0x1e>
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0fc      	beq.n	800a8d0 <prvTaskExitError+0x30>
}
 800a8d6:	b002      	add	sp, #8
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	2400007c 	.word	0x2400007c

0800a8e0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8e4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8e8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a8ec:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8ee:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8f0:	4b03      	ldr	r3, [pc, #12]	; (800a900 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8f2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8f4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8f6:	f06f 0302 	mvn.w	r3, #2
 800a8fa:	6203      	str	r3, [r0, #32]
}
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	0800a8a1 	.word	0x0800a8a1
	...

0800a910 <SVC_Handler>:
	__asm volatile (
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <pxCurrentTCBConst2>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f380 8809 	msr	PSP, r0
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8811 	msr	BASEPRI, r0
 800a92a:	4770      	bx	lr
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst2>:
 800a930:	24006630 	.word	0x24006630

0800a934 <vPortEnterCritical>:
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a944:	4a0a      	ldr	r2, [pc, #40]	; (800a970 <vPortEnterCritical+0x3c>)
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a94a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a94c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a94e:	d10d      	bne.n	800a96c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a950:	4b08      	ldr	r3, [pc, #32]	; (800a974 <vPortEnterCritical+0x40>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a958:	d008      	beq.n	800a96c <vPortEnterCritical+0x38>
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	e7fe      	b.n	800a96a <vPortEnterCritical+0x36>
}
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	2400007c 	.word	0x2400007c
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a978:	4a08      	ldr	r2, [pc, #32]	; (800a99c <vPortExitCritical+0x24>)
 800a97a:	6813      	ldr	r3, [r2, #0]
 800a97c:	b943      	cbnz	r3, 800a990 <vPortExitCritical+0x18>
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	e7fe      	b.n	800a98e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a990:	3b01      	subs	r3, #1
 800a992:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a994:	b90b      	cbnz	r3, 800a99a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a996:	f383 8811 	msr	BASEPRI, r3
}
 800a99a:	4770      	bx	lr
 800a99c:	2400007c 	.word	0x2400007c

0800a9a0 <PendSV_Handler>:
	__asm volatile
 800a9a0:	f3ef 8009 	mrs	r0, PSP
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	4b15      	ldr	r3, [pc, #84]	; (800aa00 <pxCurrentTCBConst>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	f01e 0f10 	tst.w	lr, #16
 800a9b0:	bf08      	it	eq
 800a9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ba:	6010      	str	r0, [r2, #0]
 800a9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9c4:	f380 8811 	msr	BASEPRI, r0
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f001 f96c 	bl	800bcac <vTaskSwitchContext>
 800a9d4:	f04f 0000 	mov.w	r0, #0
 800a9d8:	f380 8811 	msr	BASEPRI, r0
 800a9dc:	bc09      	pop	{r0, r3}
 800a9de:	6819      	ldr	r1, [r3, #0]
 800a9e0:	6808      	ldr	r0, [r1, #0]
 800a9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e6:	f01e 0f10 	tst.w	lr, #16
 800a9ea:	bf08      	it	eq
 800a9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9f0:	f380 8809 	msr	PSP, r0
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	f3af 8000 	nop.w

0800aa00 <pxCurrentTCBConst>:
 800aa00:	24006630 	.word	0x24006630

0800aa04 <xPortSysTickHandler>:
{
 800aa04:	b508      	push	{r3, lr}
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800aa16:	f000 ffb5 	bl	800b984 <xTaskIncrementTick>
 800aa1a:	b118      	cbz	r0, 800aa24 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa1c:	4b03      	ldr	r3, [pc, #12]	; (800aa2c <xPortSysTickHandler+0x28>)
 800aa1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa22:	601a      	str	r2, [r3, #0]
	__asm volatile
 800aa24:	2300      	movs	r3, #0
 800aa26:	f383 8811 	msr	BASEPRI, r3
}
 800aa2a:	bd08      	pop	{r3, pc}
 800aa2c:	e000ed04 	.word	0xe000ed04

0800aa30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa34:	4908      	ldr	r1, [pc, #32]	; (800aa58 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa38:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aa3e:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <vPortSetupTimerInterrupt+0x2c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa46:	4906      	ldr	r1, [pc, #24]	; (800aa60 <vPortSetupTimerInterrupt+0x30>)
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa4c:	2307      	movs	r3, #7
 800aa4e:	6013      	str	r3, [r2, #0]
}
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	e000e010 	.word	0xe000e010
 800aa58:	e000e018 	.word	0xe000e018
 800aa5c:	2400006c 	.word	0x2400006c
 800aa60:	e000e014 	.word	0xe000e014

0800aa64 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa64:	4b37      	ldr	r3, [pc, #220]	; (800ab44 <xPortStartScheduler+0xe0>)
 800aa66:	4a38      	ldr	r2, [pc, #224]	; (800ab48 <xPortStartScheduler+0xe4>)
{
 800aa68:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa6a:	6819      	ldr	r1, [r3, #0]
 800aa6c:	4291      	cmp	r1, r2
 800aa6e:	d108      	bne.n	800aa82 <xPortStartScheduler+0x1e>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	e7fe      	b.n	800aa80 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	4b31      	ldr	r3, [pc, #196]	; (800ab4c <xPortStartScheduler+0xe8>)
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d108      	bne.n	800aa9c <xPortStartScheduler+0x38>
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	e7fe      	b.n	800aa9a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa9c:	4b2c      	ldr	r3, [pc, #176]	; (800ab50 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa9e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaa0:	781a      	ldrb	r2, [r3, #0]
 800aaa2:	b2d2      	uxtb	r2, r2
 800aaa4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aaa6:	22ff      	movs	r2, #255	; 0xff
 800aaa8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aaaa:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aaac:	4a29      	ldr	r2, [pc, #164]	; (800ab54 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aab4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aab8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aabc:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aabe:	2307      	movs	r3, #7
 800aac0:	4a25      	ldr	r2, [pc, #148]	; (800ab58 <xPortStartScheduler+0xf4>)
 800aac2:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aac4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800aac8:	1e5c      	subs	r4, r3, #1
 800aaca:	0600      	lsls	r0, r0, #24
 800aacc:	d40c      	bmi.n	800aae8 <xPortStartScheduler+0x84>
 800aace:	b111      	cbz	r1, 800aad6 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	d011      	beq.n	800aafa <xPortStartScheduler+0x96>
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	e7fe      	b.n	800aae6 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aaec:	2101      	movs	r1, #1
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	f88d 3003 	strb.w	r3, [sp, #3]
 800aaf6:	4623      	mov	r3, r4
 800aaf8:	e7e4      	b.n	800aac4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aafa:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800aafe:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab00:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	4a12      	ldr	r2, [pc, #72]	; (800ab50 <xPortStartScheduler+0xec>)
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab0a:	4b14      	ldr	r3, [pc, #80]	; (800ab5c <xPortStartScheduler+0xf8>)
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800ab12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800ab1a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800ab1c:	f7ff ff88 	bl	800aa30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ab20:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <xPortStartScheduler+0xfc>)
 800ab22:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800ab24:	f7ff feb2 	bl	800a88c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab28:	4a0e      	ldr	r2, [pc, #56]	; (800ab64 <xPortStartScheduler+0x100>)
 800ab2a:	6813      	ldr	r3, [r2, #0]
 800ab2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab30:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800ab32:	f7ff fe97 	bl	800a864 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ab36:	f001 f8b9 	bl	800bcac <vTaskSwitchContext>
	prvTaskExitError();
 800ab3a:	f7ff feb1 	bl	800a8a0 <prvTaskExitError>
}
 800ab3e:	4620      	mov	r0, r4
 800ab40:	b002      	add	sp, #8
 800ab42:	bd10      	pop	{r4, pc}
 800ab44:	e000ed00 	.word	0xe000ed00
 800ab48:	410fc271 	.word	0x410fc271
 800ab4c:	410fc270 	.word	0x410fc270
 800ab50:	e000e400 	.word	0xe000e400
 800ab54:	24006628 	.word	0x24006628
 800ab58:	2400662c 	.word	0x2400662c
 800ab5c:	e000ed20 	.word	0xe000ed20
 800ab60:	2400007c 	.word	0x2400007c
 800ab64:	e000ef34 	.word	0xe000ef34

0800ab68 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab68:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab6c:	2b0f      	cmp	r3, #15
 800ab6e:	d90e      	bls.n	800ab8e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab70:	4a10      	ldr	r2, [pc, #64]	; (800abb4 <vPortValidateInterruptPriority+0x4c>)
 800ab72:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab74:	4a10      	ldr	r2, [pc, #64]	; (800abb8 <vPortValidateInterruptPriority+0x50>)
 800ab76:	7812      	ldrb	r2, [r2, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d908      	bls.n	800ab8e <vPortValidateInterruptPriority+0x26>
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	e7fe      	b.n	800ab8c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <vPortValidateInterruptPriority+0x54>)
 800ab90:	4a0b      	ldr	r2, [pc, #44]	; (800abc0 <vPortValidateInterruptPriority+0x58>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d908      	bls.n	800abb0 <vPortValidateInterruptPriority+0x48>
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	e7fe      	b.n	800abae <vPortValidateInterruptPriority+0x46>
	}
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	e000e3f0 	.word	0xe000e3f0
 800abb8:	24006628 	.word	0x24006628
 800abbc:	e000ed0c 	.word	0xe000ed0c
 800abc0:	2400662c 	.word	0x2400662c

0800abc4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abc4:	b510      	push	{r4, lr}
 800abc6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abc8:	f7ff feb4 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abcc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800abce:	f7ff fed3 	bl	800a978 <vPortExitCritical>

	return xReturn;
}
 800abd2:	fab4 f084 	clz	r0, r4
 800abd6:	0940      	lsrs	r0, r0, #5
 800abd8:	bd10      	pop	{r4, pc}

0800abda <prvCopyDataToQueue>:
{
 800abda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abdc:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abde:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800abe0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abe2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abe4:	b952      	cbnz	r2, 800abfc <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abe6:	6807      	ldr	r7, [r0, #0]
 800abe8:	bb47      	cbnz	r7, 800ac3c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abea:	6880      	ldr	r0, [r0, #8]
 800abec:	f001 f9c0 	bl	800bf70 <xTaskPriorityDisinherit>
 800abf0:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abf2:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abf4:	3601      	adds	r6, #1
}
 800abf6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abf8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800abfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800abfc:	b965      	cbnz	r5, 800ac18 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abfe:	6840      	ldr	r0, [r0, #4]
 800ac00:	f011 fbd2 	bl	801c3a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ac08:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac0a:	68a2      	ldr	r2, [r4, #8]
 800ac0c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac0e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac10:	d3f0      	bcc.n	800abf4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	6063      	str	r3, [r4, #4]
 800ac16:	e7ed      	b.n	800abf4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac18:	68c0      	ldr	r0, [r0, #12]
 800ac1a:	f011 fbc5 	bl	801c3a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ac20:	68e3      	ldr	r3, [r4, #12]
 800ac22:	4251      	negs	r1, r2
 800ac24:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac26:	6822      	ldr	r2, [r4, #0]
 800ac28:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac2a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac2c:	bf3e      	ittt	cc
 800ac2e:	68a3      	ldrcc	r3, [r4, #8]
 800ac30:	185b      	addcc	r3, r3, r1
 800ac32:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ac34:	2d02      	cmp	r5, #2
 800ac36:	d101      	bne.n	800ac3c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac38:	b116      	cbz	r6, 800ac40 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800ac3a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800ac3c:	2500      	movs	r5, #0
 800ac3e:	e7d9      	b.n	800abf4 <prvCopyDataToQueue+0x1a>
 800ac40:	4635      	mov	r5, r6
 800ac42:	e7d7      	b.n	800abf4 <prvCopyDataToQueue+0x1a>

0800ac44 <prvCopyDataFromQueue>:
{
 800ac44:	4603      	mov	r3, r0
 800ac46:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800ac4a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac4c:	b162      	cbz	r2, 800ac68 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac4e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac50:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac52:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac54:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac56:	60dc      	str	r4, [r3, #12]
}
 800ac58:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac5c:	bf24      	itt	cs
 800ac5e:	6819      	ldrcs	r1, [r3, #0]
 800ac60:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac62:	68d9      	ldr	r1, [r3, #12]
 800ac64:	f011 bba0 	b.w	801c3a8 <memcpy>
}
 800ac68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <prvUnlockQueue>:
{
 800ac6e:	b570      	push	{r4, r5, r6, lr}
 800ac70:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ac72:	f7ff fe5f 	bl	800a934 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ac76:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac7a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800ac7e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac80:	2d00      	cmp	r5, #0
 800ac82:	dc14      	bgt.n	800acae <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800ac84:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac86:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800ac8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ac8e:	f7ff fe73 	bl	800a978 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ac92:	f7ff fe4f 	bl	800a934 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ac96:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ac9a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac9c:	2d00      	cmp	r5, #0
 800ac9e:	dc12      	bgt.n	800acc6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800aca0:	23ff      	movs	r3, #255	; 0xff
 800aca2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800aca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800acaa:	f7ff be65 	b.w	800a978 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0e7      	beq.n	800ac84 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acb4:	4630      	mov	r0, r6
 800acb6:	f001 f877 	bl	800bda8 <xTaskRemoveFromEventList>
 800acba:	b108      	cbz	r0, 800acc0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800acbc:	f001 f900 	bl	800bec0 <vTaskMissedYield>
			--cTxLock;
 800acc0:	3d01      	subs	r5, #1
 800acc2:	b26d      	sxtb	r5, r5
 800acc4:	e7dc      	b.n	800ac80 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d0e9      	beq.n	800aca0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800accc:	4630      	mov	r0, r6
 800acce:	f001 f86b 	bl	800bda8 <xTaskRemoveFromEventList>
 800acd2:	b108      	cbz	r0, 800acd8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800acd4:	f001 f8f4 	bl	800bec0 <vTaskMissedYield>
				--cRxLock;
 800acd8:	3d01      	subs	r5, #1
 800acda:	b26d      	sxtb	r5, r5
 800acdc:	e7de      	b.n	800ac9c <prvUnlockQueue+0x2e>
	...

0800ace0 <xQueueGenericReset>:
{
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ace4:	4604      	mov	r4, r0
 800ace6:	b940      	cbnz	r0, 800acfa <xQueueGenericReset+0x1a>
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	e7fe      	b.n	800acf8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800acfa:	f7ff fe1b 	bl	800a934 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acfe:	6822      	ldr	r2, [r4, #0]
 800ad00:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad04:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad06:	434b      	muls	r3, r1
 800ad08:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad0a:	1a5b      	subs	r3, r3, r1
 800ad0c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad0e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad10:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad12:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad14:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad16:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ad18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ad20:	b995      	cbnz	r5, 800ad48 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	b163      	cbz	r3, 800ad40 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad26:	f104 0010 	add.w	r0, r4, #16
 800ad2a:	f001 f83d 	bl	800bda8 <xTaskRemoveFromEventList>
 800ad2e:	b138      	cbz	r0, 800ad40 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800ad30:	4b0a      	ldr	r3, [pc, #40]	; (800ad5c <xQueueGenericReset+0x7c>)
 800ad32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ad40:	f7ff fe1a 	bl	800a978 <vPortExitCritical>
}
 800ad44:	2001      	movs	r0, #1
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad48:	f104 0010 	add.w	r0, r4, #16
 800ad4c:	f7ff fd48 	bl	800a7e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ad54:	f7ff fd44 	bl	800a7e0 <vListInitialise>
 800ad58:	e7f2      	b.n	800ad40 <xQueueGenericReset+0x60>
 800ad5a:	bf00      	nop
 800ad5c:	e000ed04 	.word	0xe000ed04

0800ad60 <xQueueGenericCreateStatic>:
	{
 800ad60:	b513      	push	{r0, r1, r4, lr}
 800ad62:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad64:	b940      	cbnz	r0, 800ad78 <xQueueGenericCreateStatic+0x18>
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	e7fe      	b.n	800ad76 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800ad78:	b943      	cbnz	r3, 800ad8c <xQueueGenericCreateStatic+0x2c>
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	e7fe      	b.n	800ad8a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad8c:	b14a      	cbz	r2, 800ada2 <xQueueGenericCreateStatic+0x42>
 800ad8e:	b991      	cbnz	r1, 800adb6 <xQueueGenericCreateStatic+0x56>
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	e7fe      	b.n	800ada0 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ada2:	b141      	cbz	r1, 800adb6 <xQueueGenericCreateStatic+0x56>
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	e7fe      	b.n	800adb4 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800adb6:	2350      	movs	r3, #80	; 0x50
 800adb8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800adba:	9b01      	ldr	r3, [sp, #4]
 800adbc:	2b50      	cmp	r3, #80	; 0x50
 800adbe:	d008      	beq.n	800add2 <xQueueGenericCreateStatic+0x72>
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	e7fe      	b.n	800add0 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800add2:	2900      	cmp	r1, #0
 800add4:	bf08      	it	eq
 800add6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800add8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adda:	2301      	movs	r3, #1
 800addc:	6022      	str	r2, [r4, #0]
 800adde:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800ade2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ade6:	4619      	mov	r1, r3
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff ff79 	bl	800ace0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800adee:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800adf2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800adf4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800adf8:	b002      	add	sp, #8
 800adfa:	bd10      	pop	{r4, pc}

0800adfc <xQueueGenericCreate>:
	{
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	460d      	mov	r5, r1
 800ae00:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae02:	4606      	mov	r6, r0
 800ae04:	b940      	cbnz	r0, 800ae18 <xQueueGenericCreate+0x1c>
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	e7fe      	b.n	800ae16 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae18:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae1a:	3050      	adds	r0, #80	; 0x50
 800ae1c:	f7ff fc10 	bl	800a640 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ae20:	4604      	mov	r4, r0
 800ae22:	b170      	cbz	r0, 800ae42 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae2a:	b165      	cbz	r5, 800ae46 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae2c:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae30:	2101      	movs	r1, #1
 800ae32:	4620      	mov	r0, r4
 800ae34:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ae36:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae3a:	f7ff ff51 	bl	800ace0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ae3e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800ae42:	4620      	mov	r0, r4
 800ae44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae46:	4603      	mov	r3, r0
 800ae48:	e7f2      	b.n	800ae30 <xQueueGenericCreate+0x34>

0800ae4a <xQueueCreateCountingSemaphoreStatic>:
	{
 800ae4a:	b513      	push	{r0, r1, r4, lr}
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ae50:	b940      	cbnz	r0, 800ae64 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	e7fe      	b.n	800ae62 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae64:	4288      	cmp	r0, r1
 800ae66:	d208      	bcs.n	800ae7a <xQueueCreateCountingSemaphoreStatic+0x30>
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	e7fe      	b.n	800ae78 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	9200      	str	r2, [sp, #0]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	4611      	mov	r1, r2
 800ae82:	f7ff ff6d 	bl	800ad60 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ae86:	b100      	cbz	r0, 800ae8a <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae88:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ae8a:	b002      	add	sp, #8
 800ae8c:	bd10      	pop	{r4, pc}

0800ae8e <xQueueCreateCountingSemaphore>:
	{
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ae92:	b940      	cbnz	r0, 800aea6 <xQueueCreateCountingSemaphore+0x18>
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	e7fe      	b.n	800aea4 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aea6:	4288      	cmp	r0, r1
 800aea8:	d208      	bcs.n	800aebc <xQueueCreateCountingSemaphore+0x2e>
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	e7fe      	b.n	800aeba <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aebc:	2202      	movs	r2, #2
 800aebe:	2100      	movs	r1, #0
 800aec0:	f7ff ff9c 	bl	800adfc <xQueueGenericCreate>
		if( xHandle != NULL )
 800aec4:	b100      	cbz	r0, 800aec8 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aec6:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800aec8:	bd10      	pop	{r4, pc}
	...

0800aecc <xQueueGenericSend>:
{
 800aecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	4688      	mov	r8, r1
 800aed2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800aed4:	4604      	mov	r4, r0
{
 800aed6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800aed8:	b940      	cbnz	r0, 800aeec <xQueueGenericSend+0x20>
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	e7fe      	b.n	800aeea <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeec:	b951      	cbnz	r1, 800af04 <xQueueGenericSend+0x38>
 800aeee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aef0:	b143      	cbz	r3, 800af04 <xQueueGenericSend+0x38>
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	e7fe      	b.n	800af02 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af04:	2f02      	cmp	r7, #2
 800af06:	d10b      	bne.n	800af20 <xQueueGenericSend+0x54>
 800af08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d008      	beq.n	800af20 <xQueueGenericSend+0x54>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	e7fe      	b.n	800af1e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af20:	f000 ffd4 	bl	800becc <xTaskGetSchedulerState>
 800af24:	4606      	mov	r6, r0
 800af26:	b950      	cbnz	r0, 800af3e <xQueueGenericSend+0x72>
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	b14b      	cbz	r3, 800af40 <xQueueGenericSend+0x74>
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	e7fe      	b.n	800af3c <xQueueGenericSend+0x70>
 800af3e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800af40:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800af44:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b02c <xQueueGenericSend+0x160>
 800af48:	e037      	b.n	800afba <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 800af4a:	9d01      	ldr	r5, [sp, #4]
 800af4c:	b91d      	cbnz	r5, 800af56 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 800af4e:	f7ff fd13 	bl	800a978 <vPortExitCritical>
			return errQUEUE_FULL;
 800af52:	2000      	movs	r0, #0
 800af54:	e050      	b.n	800aff8 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 800af56:	b916      	cbnz	r6, 800af5e <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af58:	a802      	add	r0, sp, #8
 800af5a:	f000 ff69 	bl	800be30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800af5e:	f7ff fd0b 	bl	800a978 <vPortExitCritical>
		vTaskSuspendAll();
 800af62:	f000 fd01 	bl	800b968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af66:	f7ff fce5 	bl	800a934 <vPortEnterCritical>
 800af6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800af6e:	2bff      	cmp	r3, #255	; 0xff
 800af70:	d101      	bne.n	800af76 <xQueueGenericSend+0xaa>
 800af72:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800af76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800af7a:	2bff      	cmp	r3, #255	; 0xff
 800af7c:	d101      	bne.n	800af82 <xQueueGenericSend+0xb6>
 800af7e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800af82:	f7ff fcf9 	bl	800a978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af86:	a901      	add	r1, sp, #4
 800af88:	a802      	add	r0, sp, #8
 800af8a:	f000 ff5d 	bl	800be48 <xTaskCheckForTimeOut>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d146      	bne.n	800b020 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af92:	f7ff fccf 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800af98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d12f      	bne.n	800affe <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800af9e:	f7ff fceb 	bl	800a978 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afa2:	9901      	ldr	r1, [sp, #4]
 800afa4:	f104 0010 	add.w	r0, r4, #16
 800afa8:	f000 fec6 	bl	800bd38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afac:	4620      	mov	r0, r4
 800afae:	f7ff fe5e 	bl	800ac6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afb2:	f000 fd7d 	bl	800bab0 <xTaskResumeAll>
 800afb6:	b350      	cbz	r0, 800b00e <xQueueGenericSend+0x142>
 800afb8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800afba:	f7ff fcbb 	bl	800a934 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800afc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d301      	bcc.n	800afca <xQueueGenericSend+0xfe>
 800afc6:	2f02      	cmp	r7, #2
 800afc8:	d1bf      	bne.n	800af4a <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afca:	463a      	mov	r2, r7
 800afcc:	4641      	mov	r1, r8
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff fe03 	bl	800abda <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afd6:	b11b      	cbz	r3, 800afe0 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800afdc:	f000 fee4 	bl	800bda8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800afe0:	b138      	cbz	r0, 800aff2 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 800afe2:	4b12      	ldr	r3, [pc, #72]	; (800b02c <xQueueGenericSend+0x160>)
 800afe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800aff2:	f7ff fcc1 	bl	800a978 <vPortExitCritical>
				return pdPASS;
 800aff6:	2001      	movs	r0, #1
}
 800aff8:	b004      	add	sp, #16
 800affa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800affe:	f7ff fcbb 	bl	800a978 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b002:	4620      	mov	r0, r4
 800b004:	f7ff fe33 	bl	800ac6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b008:	f000 fd52 	bl	800bab0 <xTaskResumeAll>
 800b00c:	e7d4      	b.n	800afb8 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 800b00e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b012:	f8ca 3000 	str.w	r3, [sl]
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	e7cb      	b.n	800afb8 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 800b020:	4620      	mov	r0, r4
 800b022:	f7ff fe24 	bl	800ac6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b026:	f000 fd43 	bl	800bab0 <xTaskResumeAll>
 800b02a:	e792      	b.n	800af52 <xQueueGenericSend+0x86>
 800b02c:	e000ed04 	.word	0xe000ed04

0800b030 <xQueueGenericSendFromISR>:
{
 800b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b034:	4689      	mov	r9, r1
 800b036:	4690      	mov	r8, r2
 800b038:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b03a:	4604      	mov	r4, r0
 800b03c:	b940      	cbnz	r0, 800b050 <xQueueGenericSendFromISR+0x20>
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	e7fe      	b.n	800b04e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b050:	b951      	cbnz	r1, 800b068 <xQueueGenericSendFromISR+0x38>
 800b052:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b054:	b143      	cbz	r3, 800b068 <xQueueGenericSendFromISR+0x38>
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	e7fe      	b.n	800b066 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b068:	2f02      	cmp	r7, #2
 800b06a:	d10b      	bne.n	800b084 <xQueueGenericSendFromISR+0x54>
 800b06c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d008      	beq.n	800b084 <xQueueGenericSendFromISR+0x54>
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	e7fe      	b.n	800b082 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b084:	f7ff fd70 	bl	800ab68 <vPortValidateInterruptPriority>
	__asm volatile
 800b088:	f3ef 8611 	mrs	r6, BASEPRI
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b09c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b09e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d301      	bcc.n	800b0a8 <xQueueGenericSendFromISR+0x78>
 800b0a4:	2f02      	cmp	r7, #2
 800b0a6:	d123      	bne.n	800b0f0 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0a8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0ac:	463a      	mov	r2, r7
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0b2:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0b6:	f7ff fd90 	bl	800abda <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b0ba:	1c6b      	adds	r3, r5, #1
 800b0bc:	d113      	bne.n	800b0e6 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0c0:	b90b      	cbnz	r3, 800b0c6 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	e00b      	b.n	800b0de <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b0ca:	f000 fe6d 	bl	800bda8 <xTaskRemoveFromEventList>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d0f7      	beq.n	800b0c2 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800b0d2:	f1b8 0f00 	cmp.w	r8, #0
 800b0d6:	d0f4      	beq.n	800b0c2 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0d8:	2001      	movs	r0, #1
 800b0da:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b0de:	f386 8811 	msr	BASEPRI, r6
}
 800b0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0e6:	3501      	adds	r5, #1
 800b0e8:	b26d      	sxtb	r5, r5
 800b0ea:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b0ee:	e7e8      	b.n	800b0c2 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	e7f4      	b.n	800b0de <xQueueGenericSendFromISR+0xae>

0800b0f4 <xQueueGiveFromISR>:
{
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	b940      	cbnz	r0, 800b10e <xQueueGiveFromISR+0x1a>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	e7fe      	b.n	800b10c <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b10e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b110:	b143      	cbz	r3, 800b124 <xQueueGiveFromISR+0x30>
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	e7fe      	b.n	800b122 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b124:	6803      	ldr	r3, [r0, #0]
 800b126:	b953      	cbnz	r3, 800b13e <xQueueGiveFromISR+0x4a>
 800b128:	6883      	ldr	r3, [r0, #8]
 800b12a:	b143      	cbz	r3, 800b13e <xQueueGiveFromISR+0x4a>
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	e7fe      	b.n	800b13c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b13e:	f7ff fd13 	bl	800ab68 <vPortValidateInterruptPriority>
	__asm volatile
 800b142:	f3ef 8611 	mrs	r6, BASEPRI
 800b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d91c      	bls.n	800b198 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b15e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b162:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800b164:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800b166:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b168:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b16a:	d110      	bne.n	800b18e <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b16c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b16e:	b90b      	cbnz	r3, 800b174 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800b170:	2001      	movs	r0, #1
 800b172:	e009      	b.n	800b188 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b174:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b178:	f000 fe16 	bl	800bda8 <xTaskRemoveFromEventList>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d0f7      	beq.n	800b170 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800b180:	2d00      	cmp	r5, #0
 800b182:	d0f5      	beq.n	800b170 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b184:	2001      	movs	r0, #1
 800b186:	6028      	str	r0, [r5, #0]
	__asm volatile
 800b188:	f386 8811 	msr	BASEPRI, r6
}
 800b18c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b18e:	3301      	adds	r3, #1
 800b190:	b25b      	sxtb	r3, r3
 800b192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b196:	e7eb      	b.n	800b170 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800b198:	2000      	movs	r0, #0
 800b19a:	e7f5      	b.n	800b188 <xQueueGiveFromISR+0x94>

0800b19c <xQueueReceive>:
{
 800b19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800b1a4:	4604      	mov	r4, r0
{
 800b1a6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b1a8:	b940      	cbnz	r0, 800b1bc <xQueueReceive+0x20>
	__asm volatile
 800b1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ae:	f383 8811 	msr	BASEPRI, r3
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	f3bf 8f4f 	dsb	sy
 800b1ba:	e7fe      	b.n	800b1ba <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1bc:	b951      	cbnz	r1, 800b1d4 <xQueueReceive+0x38>
 800b1be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b1c0:	b143      	cbz	r3, 800b1d4 <xQueueReceive+0x38>
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	e7fe      	b.n	800b1d2 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1d4:	f000 fe7a 	bl	800becc <xTaskGetSchedulerState>
 800b1d8:	4606      	mov	r6, r0
 800b1da:	b950      	cbnz	r0, 800b1f2 <xQueueReceive+0x56>
 800b1dc:	9b01      	ldr	r3, [sp, #4]
 800b1de:	b14b      	cbz	r3, 800b1f4 <xQueueReceive+0x58>
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueReceive+0x54>
 800b1f2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b1f4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800b1f8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800b2d8 <xQueueReceive+0x13c>
 800b1fc:	e03b      	b.n	800b276 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1fe:	9d01      	ldr	r5, [sp, #4]
 800b200:	b91d      	cbnz	r5, 800b20a <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 800b202:	f7ff fbb9 	bl	800a978 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800b206:	2000      	movs	r0, #0
 800b208:	e052      	b.n	800b2b0 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 800b20a:	b916      	cbnz	r6, 800b212 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b20c:	a802      	add	r0, sp, #8
 800b20e:	f000 fe0f 	bl	800be30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b212:	f7ff fbb1 	bl	800a978 <vPortExitCritical>
		vTaskSuspendAll();
 800b216:	f000 fba7 	bl	800b968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b21a:	f7ff fb8b 	bl	800a934 <vPortEnterCritical>
 800b21e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b222:	2bff      	cmp	r3, #255	; 0xff
 800b224:	d101      	bne.n	800b22a <xQueueReceive+0x8e>
 800b226:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800b22a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b22e:	2bff      	cmp	r3, #255	; 0xff
 800b230:	d101      	bne.n	800b236 <xQueueReceive+0x9a>
 800b232:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800b236:	f7ff fb9f 	bl	800a978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b23a:	a901      	add	r1, sp, #4
 800b23c:	a802      	add	r0, sp, #8
 800b23e:	f000 fe03 	bl	800be48 <xTaskCheckForTimeOut>
 800b242:	2800      	cmp	r0, #0
 800b244:	d13d      	bne.n	800b2c2 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b246:	4620      	mov	r0, r4
 800b248:	f7ff fcbc 	bl	800abc4 <prvIsQueueEmpty>
 800b24c:	b398      	cbz	r0, 800b2b6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b24e:	9901      	ldr	r1, [sp, #4]
 800b250:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b254:	f000 fd70 	bl	800bd38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b258:	4620      	mov	r0, r4
 800b25a:	f7ff fd08 	bl	800ac6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b25e:	f000 fc27 	bl	800bab0 <xTaskResumeAll>
 800b262:	b938      	cbnz	r0, 800b274 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 800b264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b268:	f8c9 3000 	str.w	r3, [r9]
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b276:	f7ff fb5d 	bl	800a934 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b27a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b27c:	2d00      	cmp	r5, #0
 800b27e:	d0be      	beq.n	800b1fe <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b280:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b282:	4639      	mov	r1, r7
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff fcdd 	bl	800ac44 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b28a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	b163      	cbz	r3, 800b2aa <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b290:	f104 0010 	add.w	r0, r4, #16
 800b294:	f000 fd88 	bl	800bda8 <xTaskRemoveFromEventList>
 800b298:	b138      	cbz	r0, 800b2aa <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800b29a:	4b0f      	ldr	r3, [pc, #60]	; (800b2d8 <xQueueReceive+0x13c>)
 800b29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b2aa:	f7ff fb65 	bl	800a978 <vPortExitCritical>
				return pdPASS;
 800b2ae:	2001      	movs	r0, #1
}
 800b2b0:	b005      	add	sp, #20
 800b2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f7ff fcd9 	bl	800ac6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2bc:	f000 fbf8 	bl	800bab0 <xTaskResumeAll>
 800b2c0:	e7d8      	b.n	800b274 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff fcd3 	bl	800ac6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2c8:	f000 fbf2 	bl	800bab0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f7ff fc79 	bl	800abc4 <prvIsQueueEmpty>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0ce      	beq.n	800b274 <xQueueReceive+0xd8>
 800b2d6:	e796      	b.n	800b206 <xQueueReceive+0x6a>
 800b2d8:	e000ed04 	.word	0xe000ed04

0800b2dc <xQueueSemaphoreTake>:
{
 800b2dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800b2e0:	4604      	mov	r4, r0
{
 800b2e2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b2e4:	b940      	cbnz	r0, 800b2f8 <xQueueSemaphoreTake+0x1c>
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	e7fe      	b.n	800b2f6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b2f8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b2fa:	b145      	cbz	r5, 800b30e <xQueueSemaphoreTake+0x32>
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	e7fe      	b.n	800b30c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b30e:	f000 fddd 	bl	800becc <xTaskGetSchedulerState>
 800b312:	4606      	mov	r6, r0
 800b314:	b950      	cbnz	r0, 800b32c <xQueueSemaphoreTake+0x50>
 800b316:	9b01      	ldr	r3, [sp, #4]
 800b318:	b16b      	cbz	r3, 800b336 <xQueueSemaphoreTake+0x5a>
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	e7fe      	b.n	800b32a <xQueueSemaphoreTake+0x4e>
 800b32c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800b32e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800b330:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800b460 <xQueueSemaphoreTake+0x184>
 800b334:	e051      	b.n	800b3da <xQueueSemaphoreTake+0xfe>
 800b336:	4605      	mov	r5, r0
 800b338:	e7f9      	b.n	800b32e <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	b963      	cbnz	r3, 800b358 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b33e:	b145      	cbz	r5, 800b352 <xQueueSemaphoreTake+0x76>
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	e7fe      	b.n	800b350 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 800b352:	f7ff fb11 	bl	800a978 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b356:	e05e      	b.n	800b416 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800b358:	b916      	cbnz	r6, 800b360 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b35a:	a802      	add	r0, sp, #8
 800b35c:	f000 fd68 	bl	800be30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b360:	f7ff fb0a 	bl	800a978 <vPortExitCritical>
		vTaskSuspendAll();
 800b364:	f000 fb00 	bl	800b968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b368:	f7ff fae4 	bl	800a934 <vPortEnterCritical>
 800b36c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b370:	2bff      	cmp	r3, #255	; 0xff
 800b372:	d101      	bne.n	800b378 <xQueueSemaphoreTake+0x9c>
 800b374:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800b378:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b37c:	2bff      	cmp	r3, #255	; 0xff
 800b37e:	d101      	bne.n	800b384 <xQueueSemaphoreTake+0xa8>
 800b380:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b384:	f7ff faf8 	bl	800a978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b388:	a901      	add	r1, sp, #4
 800b38a:	a802      	add	r0, sp, #8
 800b38c:	f000 fd5c 	bl	800be48 <xTaskCheckForTimeOut>
 800b390:	2800      	cmp	r0, #0
 800b392:	d14a      	bne.n	800b42a <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff fc15 	bl	800abc4 <prvIsQueueEmpty>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d03f      	beq.n	800b41e <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	b93b      	cbnz	r3, 800b3b2 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 800b3a2:	f7ff fac7 	bl	800a934 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3a6:	68a0      	ldr	r0, [r4, #8]
 800b3a8:	f000 fda0 	bl	800beec <xTaskPriorityInherit>
 800b3ac:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b3ae:	f7ff fae3 	bl	800a978 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3b2:	9901      	ldr	r1, [sp, #4]
 800b3b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b3b8:	f000 fcbe 	bl	800bd38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f7ff fc56 	bl	800ac6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3c2:	f000 fb75 	bl	800bab0 <xTaskResumeAll>
 800b3c6:	b938      	cbnz	r0, 800b3d8 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800b3c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3cc:	f8c8 3000 	str.w	r3, [r8]
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b3da:	f7ff faab 	bl	800a934 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b3de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0aa      	beq.n	800b33a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	b913      	cbnz	r3, 800b3f2 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b3ec:	f000 fe56 	bl	800c09c <pvTaskIncrementMutexHeldCount>
 800b3f0:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3f2:	6923      	ldr	r3, [r4, #16]
 800b3f4:	b163      	cbz	r3, 800b410 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3f6:	f104 0010 	add.w	r0, r4, #16
 800b3fa:	f000 fcd5 	bl	800bda8 <xTaskRemoveFromEventList>
 800b3fe:	b138      	cbz	r0, 800b410 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800b400:	4b17      	ldr	r3, [pc, #92]	; (800b460 <xQueueSemaphoreTake+0x184>)
 800b402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800b410:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800b412:	f7ff fab1 	bl	800a978 <vPortExitCritical>
}
 800b416:	4628      	mov	r0, r5
 800b418:	b004      	add	sp, #16
 800b41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800b41e:	4620      	mov	r0, r4
 800b420:	f7ff fc25 	bl	800ac6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b424:	f000 fb44 	bl	800bab0 <xTaskResumeAll>
 800b428:	e7d6      	b.n	800b3d8 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7ff fc1f 	bl	800ac6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b430:	f000 fb3e 	bl	800bab0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b434:	4620      	mov	r0, r4
 800b436:	f7ff fbc5 	bl	800abc4 <prvIsQueueEmpty>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d0cc      	beq.n	800b3d8 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800b43e:	2d00      	cmp	r5, #0
 800b440:	d0e9      	beq.n	800b416 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800b442:	f7ff fa77 	bl	800a934 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b446:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b448:	b119      	cbz	r1, 800b452 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b44a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b44c:	6819      	ldr	r1, [r3, #0]
 800b44e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b452:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800b454:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b456:	f000 fdcf 	bl	800bff8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b45a:	f7ff fa8d 	bl	800a978 <vPortExitCritical>
 800b45e:	e7da      	b.n	800b416 <xQueueSemaphoreTake+0x13a>
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <xQueueReceiveFromISR>:
{
 800b464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b468:	4689      	mov	r9, r1
 800b46a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800b46c:	4605      	mov	r5, r0
 800b46e:	b940      	cbnz	r0, 800b482 <xQueueReceiveFromISR+0x1e>
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	e7fe      	b.n	800b480 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b482:	b951      	cbnz	r1, 800b49a <xQueueReceiveFromISR+0x36>
 800b484:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b486:	b143      	cbz	r3, 800b49a <xQueueReceiveFromISR+0x36>
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	e7fe      	b.n	800b498 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b49a:	f7ff fb65 	bl	800ab68 <vPortValidateInterruptPriority>
	__asm volatile
 800b49e:	f3ef 8711 	mrs	r7, BASEPRI
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4b2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4b4:	b31c      	cbz	r4, 800b4fe <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4b6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4be:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4c0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4c2:	f7ff fbbf 	bl	800ac44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4c6:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800b4c8:	1c73      	adds	r3, r6, #1
 800b4ca:	d113      	bne.n	800b4f4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4cc:	692b      	ldr	r3, [r5, #16]
 800b4ce:	b90b      	cbnz	r3, 800b4d4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800b4d0:	2001      	movs	r0, #1
 800b4d2:	e00b      	b.n	800b4ec <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4d4:	f105 0010 	add.w	r0, r5, #16
 800b4d8:	f000 fc66 	bl	800bda8 <xTaskRemoveFromEventList>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d0f7      	beq.n	800b4d0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800b4e0:	f1b8 0f00 	cmp.w	r8, #0
 800b4e4:	d0f4      	beq.n	800b4d0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b4ec:	f387 8811 	msr	BASEPRI, r7
}
 800b4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b4f4:	3601      	adds	r6, #1
 800b4f6:	b276      	sxtb	r6, r6
 800b4f8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800b4fc:	e7e8      	b.n	800b4d0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800b4fe:	4620      	mov	r0, r4
 800b500:	e7f4      	b.n	800b4ec <xQueueReceiveFromISR+0x88>
	...

0800b504 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b504:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b506:	4a07      	ldr	r2, [pc, #28]	; (800b524 <vQueueAddToRegistry+0x20>)
	{
 800b508:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b50a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800b50e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800b512:	b91d      	cbnz	r5, 800b51c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b514:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b518:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b51a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b51c:	3301      	adds	r3, #1
 800b51e:	2b08      	cmp	r3, #8
 800b520:	d1f3      	bne.n	800b50a <vQueueAddToRegistry+0x6>
 800b522:	e7fa      	b.n	800b51a <vQueueAddToRegistry+0x16>
 800b524:	240072f4 	.word	0x240072f4

0800b528 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b528:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b52a:	4909      	ldr	r1, [pc, #36]	; (800b550 <vQueueUnregisterQueue+0x28>)
	{
 800b52c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b52e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800b532:	00dc      	lsls	r4, r3, #3
 800b534:	4282      	cmp	r2, r0
 800b536:	d106      	bne.n	800b546 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b538:	4a06      	ldr	r2, [pc, #24]	; (800b554 <vQueueUnregisterQueue+0x2c>)
 800b53a:	2100      	movs	r1, #0
 800b53c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b540:	4422      	add	r2, r4
 800b542:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b544:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b546:	3301      	adds	r3, #1
 800b548:	2b08      	cmp	r3, #8
 800b54a:	d1f0      	bne.n	800b52e <vQueueUnregisterQueue+0x6>
 800b54c:	e7fa      	b.n	800b544 <vQueueUnregisterQueue+0x1c>
 800b54e:	bf00      	nop
 800b550:	240072f8 	.word	0x240072f8
 800b554:	240072f4 	.word	0x240072f4

0800b558 <vQueueDelete>:
{
 800b558:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800b55a:	b940      	cbnz	r0, 800b56e <vQueueDelete+0x16>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	e7fe      	b.n	800b56c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800b56e:	f7ff ffdb 	bl	800b528 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b572:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800b576:	b91b      	cbnz	r3, 800b580 <vQueueDelete+0x28>
}
 800b578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800b57c:	f7ff b8f2 	b.w	800a764 <vPortFree>
}
 800b580:	bd10      	pop	{r4, pc}

0800b582 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b582:	b570      	push	{r4, r5, r6, lr}
 800b584:	4604      	mov	r4, r0
 800b586:	460d      	mov	r5, r1
 800b588:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b58a:	f7ff f9d3 	bl	800a934 <vPortEnterCritical>
 800b58e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b592:	2bff      	cmp	r3, #255	; 0xff
 800b594:	d102      	bne.n	800b59c <vQueueWaitForMessageRestricted+0x1a>
 800b596:	2300      	movs	r3, #0
 800b598:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b59c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b5a0:	2bff      	cmp	r3, #255	; 0xff
 800b5a2:	d102      	bne.n	800b5aa <vQueueWaitForMessageRestricted+0x28>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5aa:	f7ff f9e5 	bl	800a978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b5b0:	b92b      	cbnz	r3, 800b5be <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b5ba:	f000 fbd7 	bl	800bd6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5be:	4620      	mov	r0, r4
	}
 800b5c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800b5c4:	f7ff bb53 	b.w	800ac6e <prvUnlockQueue>

0800b5c8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5ce:	f7ff f9b1 	bl	800a934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5d2:	4b2e      	ldr	r3, [pc, #184]	; (800b68c <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800b5d4:	4d2e      	ldr	r5, [pc, #184]	; (800b690 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	4f2e      	ldr	r7, [pc, #184]	; (800b694 <prvAddNewTaskToReadyList+0xcc>)
 800b5da:	3201      	adds	r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b5de:	682e      	ldr	r6, [r5, #0]
 800b5e0:	2e00      	cmp	r6, #0
 800b5e2:	d148      	bne.n	800b676 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5e4:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d11f      	bne.n	800b62c <prvAddNewTaskToReadyList+0x64>
 800b5ec:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5ee:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	f7ff f8f5 	bl	800a7e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5f6:	f108 0814 	add.w	r8, r8, #20
 800b5fa:	2e38      	cmp	r6, #56	; 0x38
 800b5fc:	d1f7      	bne.n	800b5ee <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5fe:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b6c0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800b602:	4e25      	ldr	r6, [pc, #148]	; (800b698 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800b604:	4640      	mov	r0, r8
 800b606:	f7ff f8eb 	bl	800a7e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff f8e8 	bl	800a7e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b610:	4822      	ldr	r0, [pc, #136]	; (800b69c <prvAddNewTaskToReadyList+0xd4>)
 800b612:	f7ff f8e5 	bl	800a7e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b616:	4822      	ldr	r0, [pc, #136]	; (800b6a0 <prvAddNewTaskToReadyList+0xd8>)
 800b618:	f7ff f8e2 	bl	800a7e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b61c:	4821      	ldr	r0, [pc, #132]	; (800b6a4 <prvAddNewTaskToReadyList+0xdc>)
 800b61e:	f7ff f8df 	bl	800a7e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b622:	4b21      	ldr	r3, [pc, #132]	; (800b6a8 <prvAddNewTaskToReadyList+0xe0>)
 800b624:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b628:	4b20      	ldr	r3, [pc, #128]	; (800b6ac <prvAddNewTaskToReadyList+0xe4>)
 800b62a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800b62c:	4a20      	ldr	r2, [pc, #128]	; (800b6b0 <prvAddNewTaskToReadyList+0xe8>)
 800b62e:	6813      	ldr	r3, [r2, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800b634:	4a1f      	ldr	r2, [pc, #124]	; (800b6b4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b636:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b638:	6811      	ldr	r1, [r2, #0]
 800b63a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b63c:	428b      	cmp	r3, r1
 800b63e:	d900      	bls.n	800b642 <prvAddNewTaskToReadyList+0x7a>
 800b640:	6013      	str	r3, [r2, #0]
 800b642:	2014      	movs	r0, #20
 800b644:	1d21      	adds	r1, r4, #4
 800b646:	fb00 7003 	mla	r0, r0, r3, r7
 800b64a:	f7ff f8d7 	bl	800a7fc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b64e:	f7ff f993 	bl	800a978 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b652:	4b19      	ldr	r3, [pc, #100]	; (800b6b8 <prvAddNewTaskToReadyList+0xf0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	b163      	cbz	r3, 800b672 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b65e:	429a      	cmp	r2, r3
 800b660:	d207      	bcs.n	800b672 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800b662:	4b16      	ldr	r3, [pc, #88]	; (800b6bc <prvAddNewTaskToReadyList+0xf4>)
 800b664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	f3bf 8f6f 	isb	sy
}
 800b672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800b676:	4b10      	ldr	r3, [pc, #64]	; (800b6b8 <prvAddNewTaskToReadyList+0xf0>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1d6      	bne.n	800b62c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b67e:	682b      	ldr	r3, [r5, #0]
 800b680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b684:	429a      	cmp	r2, r3
 800b686:	d8d1      	bhi.n	800b62c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800b688:	602c      	str	r4, [r5, #0]
 800b68a:	e7cf      	b.n	800b62c <prvAddNewTaskToReadyList+0x64>
 800b68c:	24006a9c 	.word	0x24006a9c
 800b690:	24006630 	.word	0x24006630
 800b694:	2400663c 	.word	0x2400663c
 800b698:	24006ac4 	.word	0x24006ac4
 800b69c:	24006ae4 	.word	0x24006ae4
 800b6a0:	24006b10 	.word	0x24006b10
 800b6a4:	24006afc 	.word	0x24006afc
 800b6a8:	24006634 	.word	0x24006634
 800b6ac:	24006638 	.word	0x24006638
 800b6b0:	24006aa8 	.word	0x24006aa8
 800b6b4:	24006aac 	.word	0x24006aac
 800b6b8:	24006af8 	.word	0x24006af8
 800b6bc:	e000ed04 	.word	0xe000ed04
 800b6c0:	24006ab0 	.word	0x24006ab0

0800b6c4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c4:	4a06      	ldr	r2, [pc, #24]	; (800b6e0 <prvResetNextTaskUnblockTime+0x1c>)
 800b6c6:	6813      	ldr	r3, [r2, #0]
 800b6c8:	6819      	ldr	r1, [r3, #0]
 800b6ca:	4b06      	ldr	r3, [pc, #24]	; (800b6e4 <prvResetNextTaskUnblockTime+0x20>)
 800b6cc:	b919      	cbnz	r1, 800b6d6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6d2:	601a      	str	r2, [r3, #0]
	}
}
 800b6d4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d6:	6812      	ldr	r2, [r2, #0]
 800b6d8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6da:	68d2      	ldr	r2, [r2, #12]
 800b6dc:	6852      	ldr	r2, [r2, #4]
 800b6de:	e7f8      	b.n	800b6d2 <prvResetNextTaskUnblockTime+0xe>
 800b6e0:	24006634 	.word	0x24006634
 800b6e4:	24006ad8 	.word	0x24006ad8

0800b6e8 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6ec:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6f4:	21a5      	movs	r1, #165	; 0xa5
 800b6f6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b6f8:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6fa:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b6fe:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b702:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b704:	f010 fe5e 	bl	801c3c4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b708:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b70a:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b70c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800b710:	2d00      	cmp	r5, #0
 800b712:	d037      	beq.n	800b784 <prvInitialiseNewTask.isra.0+0x9c>
 800b714:	1e6b      	subs	r3, r5, #1
 800b716:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800b71a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b71c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b720:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800b724:	7819      	ldrb	r1, [r3, #0]
 800b726:	b109      	cbz	r1, 800b72c <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b728:	42ab      	cmp	r3, r5
 800b72a:	d1f7      	bne.n	800b71c <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b72c:	2300      	movs	r3, #0
 800b72e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b732:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800b734:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b738:	1d20      	adds	r0, r4, #4
 800b73a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800b73c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800b740:	bf28      	it	cs
 800b742:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b744:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b746:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b748:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b74c:	f7ff f853 	bl	800a7f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b750:	f104 0018 	add.w	r0, r4, #24
 800b754:	f7ff f84f 	bl	800a7f6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800b758:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b75c:	463a      	mov	r2, r7
 800b75e:	4631      	mov	r1, r6
 800b760:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b762:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b764:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b766:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800b768:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b76c:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b770:	f7ff f8b6 	bl	800a8e0 <pxPortInitialiseStack>
 800b774:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800b776:	f1b8 0f00 	cmp.w	r8, #0
 800b77a:	d001      	beq.n	800b780 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b77c:	f8c8 4000 	str.w	r4, [r8]
}
 800b780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b784:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800b788:	e7d3      	b.n	800b732 <prvInitialiseNewTask.isra.0+0x4a>

0800b78a <prvDeleteTCB>:
	{
 800b78a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b78c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800b790:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b792:	b93b      	cbnz	r3, 800b7a4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800b794:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b796:	f7fe ffe5 	bl	800a764 <vPortFree>
				vPortFree( pxTCB );
 800b79a:	4620      	mov	r0, r4
	}
 800b79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800b7a0:	f7fe bfe0 	b.w	800a764 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d0f9      	beq.n	800b79c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d008      	beq.n	800b7be <prvDeleteTCB+0x34>
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	e7fe      	b.n	800b7bc <prvDeleteTCB+0x32>
	}
 800b7be:	bd10      	pop	{r4, pc}

0800b7c0 <prvIdleTask>:
{
 800b7c0:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c2:	4e14      	ldr	r6, [pc, #80]	; (800b814 <prvIdleTask+0x54>)
				taskYIELD();
 800b7c4:	4f14      	ldr	r7, [pc, #80]	; (800b818 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7c6:	4c15      	ldr	r4, [pc, #84]	; (800b81c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800b7c8:	4d15      	ldr	r5, [pc, #84]	; (800b820 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	b96b      	cbnz	r3, 800b7ea <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7ce:	4b15      	ldr	r3, [pc, #84]	; (800b824 <prvIdleTask+0x64>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d906      	bls.n	800b7e4 <prvIdleTask+0x24>
				taskYIELD();
 800b7d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800b7e4:	f7f4 ffa0 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b7e8:	e7ed      	b.n	800b7c6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800b7ea:	f7ff f8a3 	bl	800a934 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ee:	68f3      	ldr	r3, [r6, #12]
 800b7f0:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7f4:	f108 0004 	add.w	r0, r8, #4
 800b7f8:	f7ff f823 	bl	800a842 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	3b01      	subs	r3, #1
 800b806:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800b808:	f7ff f8b6 	bl	800a978 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b80c:	4640      	mov	r0, r8
 800b80e:	f7ff ffbc 	bl	800b78a <prvDeleteTCB>
 800b812:	e7da      	b.n	800b7ca <prvIdleTask+0xa>
 800b814:	24006b10 	.word	0x24006b10
 800b818:	e000ed04 	.word	0xe000ed04
 800b81c:	24006aa0 	.word	0x24006aa0
 800b820:	24006a9c 	.word	0x24006a9c
 800b824:	2400663c 	.word	0x2400663c

0800b828 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b82a:	4b16      	ldr	r3, [pc, #88]	; (800b884 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800b82c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b82e:	4e16      	ldr	r6, [pc, #88]	; (800b888 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800b830:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800b832:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b834:	6830      	ldr	r0, [r6, #0]
 800b836:	3004      	adds	r0, #4
 800b838:	f7ff f803 	bl	800a842 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b83c:	1c63      	adds	r3, r4, #1
 800b83e:	4633      	mov	r3, r6
 800b840:	d107      	bne.n	800b852 <prvAddCurrentTaskToDelayedList+0x2a>
 800b842:	b137      	cbz	r7, 800b852 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b844:	6831      	ldr	r1, [r6, #0]
 800b846:	4811      	ldr	r0, [pc, #68]	; (800b88c <prvAddCurrentTaskToDelayedList+0x64>)
 800b848:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b84a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b84e:	f7fe bfd5 	b.w	800a7fc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b852:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800b858:	d307      	bcc.n	800b86a <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b85a:	4a0d      	ldr	r2, [pc, #52]	; (800b890 <prvAddCurrentTaskToDelayedList+0x68>)
 800b85c:	6810      	ldr	r0, [r2, #0]
 800b85e:	6819      	ldr	r1, [r3, #0]
}
 800b860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b864:	3104      	adds	r1, #4
 800b866:	f7fe bfd5 	b.w	800a814 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b86a:	4a0a      	ldr	r2, [pc, #40]	; (800b894 <prvAddCurrentTaskToDelayedList+0x6c>)
 800b86c:	6810      	ldr	r0, [r2, #0]
 800b86e:	6819      	ldr	r1, [r3, #0]
 800b870:	3104      	adds	r1, #4
 800b872:	f7fe ffcf 	bl	800a814 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b876:	4b08      	ldr	r3, [pc, #32]	; (800b898 <prvAddCurrentTaskToDelayedList+0x70>)
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	42a2      	cmp	r2, r4
 800b87c:	d900      	bls.n	800b880 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800b87e:	601c      	str	r4, [r3, #0]
}
 800b880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b882:	bf00      	nop
 800b884:	24006b24 	.word	0x24006b24
 800b888:	24006630 	.word	0x24006630
 800b88c:	24006afc 	.word	0x24006afc
 800b890:	24006638 	.word	0x24006638
 800b894:	24006634 	.word	0x24006634
 800b898:	24006ad8 	.word	0x24006ad8

0800b89c <xTaskCreateStatic>:
	{
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800b8a4:	b945      	cbnz	r5, 800b8b8 <xTaskCreateStatic+0x1c>
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	e7fe      	b.n	800b8b6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800b8b8:	b944      	cbnz	r4, 800b8cc <xTaskCreateStatic+0x30>
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	e7fe      	b.n	800b8ca <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8cc:	2660      	movs	r6, #96	; 0x60
 800b8ce:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8d0:	9e05      	ldr	r6, [sp, #20]
 800b8d2:	2e60      	cmp	r6, #96	; 0x60
 800b8d4:	d008      	beq.n	800b8e8 <xTaskCreateStatic+0x4c>
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	e7fe      	b.n	800b8e6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8e8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8ea:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8ec:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8ee:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8f2:	ad04      	add	r5, sp, #16
 800b8f4:	9402      	str	r4, [sp, #8]
 800b8f6:	9501      	str	r5, [sp, #4]
 800b8f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b8fa:	9500      	str	r5, [sp, #0]
 800b8fc:	f7ff fef4 	bl	800b6e8 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b900:	4620      	mov	r0, r4
 800b902:	f7ff fe61 	bl	800b5c8 <prvAddNewTaskToReadyList>
	}
 800b906:	9804      	ldr	r0, [sp, #16]
 800b908:	b006      	add	sp, #24
 800b90a:	bd70      	pop	{r4, r5, r6, pc}

0800b90c <xTaskCreate>:
	{
 800b90c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b910:	4607      	mov	r7, r0
 800b912:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b914:	0090      	lsls	r0, r2, #2
	{
 800b916:	4688      	mov	r8, r1
 800b918:	4616      	mov	r6, r2
 800b91a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b91c:	f7fe fe90 	bl	800a640 <pvPortMalloc>
			if( pxStack != NULL )
 800b920:	4605      	mov	r5, r0
 800b922:	b1e8      	cbz	r0, 800b960 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b924:	2060      	movs	r0, #96	; 0x60
 800b926:	f7fe fe8b 	bl	800a640 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b92a:	4604      	mov	r4, r0
 800b92c:	b1a8      	cbz	r0, 800b95a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b92e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800b930:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b932:	4632      	mov	r2, r6
 800b934:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b936:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b93a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b93c:	9002      	str	r0, [sp, #8]
 800b93e:	4638      	mov	r0, r7
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	464b      	mov	r3, r9
 800b948:	f7ff fece 	bl	800b6e8 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b94c:	4620      	mov	r0, r4
 800b94e:	f7ff fe3b 	bl	800b5c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b952:	2001      	movs	r0, #1
	}
 800b954:	b005      	add	sp, #20
 800b956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b95a:	4628      	mov	r0, r5
 800b95c:	f7fe ff02 	bl	800a764 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800b964:	e7f6      	b.n	800b954 <xTaskCreate+0x48>
	...

0800b968 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b968:	4a02      	ldr	r2, [pc, #8]	; (800b974 <vTaskSuspendAll+0xc>)
 800b96a:	6813      	ldr	r3, [r2, #0]
 800b96c:	3301      	adds	r3, #1
 800b96e:	6013      	str	r3, [r2, #0]
}
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	24006aa4 	.word	0x24006aa4

0800b978 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b978:	4b01      	ldr	r3, [pc, #4]	; (800b980 <xTaskGetTickCount+0x8>)
 800b97a:	6818      	ldr	r0, [r3, #0]
}
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	24006b24 	.word	0x24006b24

0800b984 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b984:	4b3f      	ldr	r3, [pc, #252]	; (800ba84 <xTaskIncrementTick+0x100>)
 800b986:	681b      	ldr	r3, [r3, #0]
{
 800b988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d172      	bne.n	800ba76 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b990:	4b3d      	ldr	r3, [pc, #244]	; (800ba88 <xTaskIncrementTick+0x104>)
 800b992:	681d      	ldr	r5, [r3, #0]
 800b994:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b996:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b998:	b9bd      	cbnz	r5, 800b9ca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800b99a:	4b3c      	ldr	r3, [pc, #240]	; (800ba8c <xTaskIncrementTick+0x108>)
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	6812      	ldr	r2, [r2, #0]
 800b9a0:	b142      	cbz	r2, 800b9b4 <xTaskIncrementTick+0x30>
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	e7fe      	b.n	800b9b2 <xTaskIncrementTick+0x2e>
 800b9b4:	4a36      	ldr	r2, [pc, #216]	; (800ba90 <xTaskIncrementTick+0x10c>)
 800b9b6:	6819      	ldr	r1, [r3, #0]
 800b9b8:	6810      	ldr	r0, [r2, #0]
 800b9ba:	6018      	str	r0, [r3, #0]
 800b9bc:	6011      	str	r1, [r2, #0]
 800b9be:	4a35      	ldr	r2, [pc, #212]	; (800ba94 <xTaskIncrementTick+0x110>)
 800b9c0:	6813      	ldr	r3, [r2, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	f7ff fe7d 	bl	800b6c4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9ca:	4e33      	ldr	r6, [pc, #204]	; (800ba98 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800b9cc:	2400      	movs	r4, #0
 800b9ce:	4f33      	ldr	r7, [pc, #204]	; (800ba9c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9d0:	6833      	ldr	r3, [r6, #0]
 800b9d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800baa8 <xTaskIncrementTick+0x124>
 800b9d6:	429d      	cmp	r5, r3
 800b9d8:	d211      	bcs.n	800b9fe <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9da:	f8d8 3000 	ldr.w	r3, [r8]
 800b9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e0:	2314      	movs	r3, #20
 800b9e2:	4353      	muls	r3, r2
 800b9e4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800b9e6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800b9e8:	4b2d      	ldr	r3, [pc, #180]	; (800baa0 <xTaskIncrementTick+0x11c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800b9ec:	bf28      	it	cs
 800b9ee:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bf18      	it	ne
 800b9f4:	2401      	movne	r4, #1
}
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	b003      	add	sp, #12
 800b9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9fe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ba8c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800ba02:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800baac <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba06:	f8d9 3000 	ldr.w	r3, [r9]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	b91b      	cbnz	r3, 800ba16 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba12:	6033      	str	r3, [r6, #0]
					break;
 800ba14:	e7e1      	b.n	800b9da <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba16:	f8d9 3000 	ldr.w	r3, [r9]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba20:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800ba24:	4295      	cmp	r5, r2
 800ba26:	d201      	bcs.n	800ba2c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800ba28:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba2a:	e7d6      	b.n	800b9da <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba2c:	f10b 0104 	add.w	r1, fp, #4
 800ba30:	4608      	mov	r0, r1
 800ba32:	9101      	str	r1, [sp, #4]
 800ba34:	f7fe ff05 	bl	800a842 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba38:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800ba3c:	9901      	ldr	r1, [sp, #4]
 800ba3e:	b122      	cbz	r2, 800ba4a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba40:	f10b 0018 	add.w	r0, fp, #24
 800ba44:	f7fe fefd 	bl	800a842 <uxListRemove>
 800ba48:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800ba4a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800ba4e:	f8da 2000 	ldr.w	r2, [sl]
 800ba52:	4290      	cmp	r0, r2
 800ba54:	d901      	bls.n	800ba5a <xTaskIncrementTick+0xd6>
 800ba56:	f8ca 0000 	str.w	r0, [sl]
 800ba5a:	2314      	movs	r3, #20
 800ba5c:	fb03 7000 	mla	r0, r3, r0, r7
 800ba60:	f7fe fecc 	bl	800a7fc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba64:	f8d8 1000 	ldr.w	r1, [r8]
 800ba68:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800ba6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	bf28      	it	cs
 800ba72:	2401      	movcs	r4, #1
 800ba74:	e7c7      	b.n	800ba06 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800ba76:	4a0b      	ldr	r2, [pc, #44]	; (800baa4 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800ba78:	2400      	movs	r4, #0
		++xPendedTicks;
 800ba7a:	6813      	ldr	r3, [r2, #0]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800ba80:	e7b9      	b.n	800b9f6 <xTaskIncrementTick+0x72>
 800ba82:	bf00      	nop
 800ba84:	24006aa4 	.word	0x24006aa4
 800ba88:	24006b24 	.word	0x24006b24
 800ba8c:	24006634 	.word	0x24006634
 800ba90:	24006638 	.word	0x24006638
 800ba94:	24006adc 	.word	0x24006adc
 800ba98:	24006ad8 	.word	0x24006ad8
 800ba9c:	2400663c 	.word	0x2400663c
 800baa0:	24006b28 	.word	0x24006b28
 800baa4:	24006ae0 	.word	0x24006ae0
 800baa8:	24006630 	.word	0x24006630
 800baac:	24006aac 	.word	0x24006aac

0800bab0 <xTaskResumeAll>:
{
 800bab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800bab2:	4c30      	ldr	r4, [pc, #192]	; (800bb74 <xTaskResumeAll+0xc4>)
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	b943      	cbnz	r3, 800baca <xTaskResumeAll+0x1a>
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	e7fe      	b.n	800bac8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800baca:	f7fe ff33 	bl	800a934 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bad4:	6824      	ldr	r4, [r4, #0]
 800bad6:	b12c      	cbz	r4, 800bae4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800bad8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bada:	f7fe ff4d 	bl	800a978 <vPortExitCritical>
}
 800bade:	4620      	mov	r0, r4
 800bae0:	b003      	add	sp, #12
 800bae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <xTaskResumeAll+0xc8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d0f5      	beq.n	800bad8 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baec:	4d23      	ldr	r5, [pc, #140]	; (800bb7c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800baee:	4e24      	ldr	r6, [pc, #144]	; (800bb80 <xTaskResumeAll+0xd0>)
 800baf0:	4f24      	ldr	r7, [pc, #144]	; (800bb84 <xTaskResumeAll+0xd4>)
 800baf2:	e01e      	b.n	800bb32 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baf4:	68eb      	ldr	r3, [r5, #12]
 800baf6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baf8:	f104 0018 	add.w	r0, r4, #24
 800bafc:	f7fe fea1 	bl	800a842 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb00:	1d21      	adds	r1, r4, #4
 800bb02:	4608      	mov	r0, r1
 800bb04:	9101      	str	r1, [sp, #4]
 800bb06:	f7fe fe9c 	bl	800a842 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb0c:	6832      	ldr	r2, [r6, #0]
 800bb0e:	9901      	ldr	r1, [sp, #4]
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d900      	bls.n	800bb16 <xTaskResumeAll+0x66>
 800bb14:	6033      	str	r3, [r6, #0]
 800bb16:	2014      	movs	r0, #20
 800bb18:	fb00 7003 	mla	r0, r0, r3, r7
 800bb1c:	f7fe fe6e 	bl	800a7fc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb20:	4b19      	ldr	r3, [pc, #100]	; (800bb88 <xTaskResumeAll+0xd8>)
 800bb22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d302      	bcc.n	800bb32 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800bb2c:	4b17      	ldr	r3, [pc, #92]	; (800bb8c <xTaskResumeAll+0xdc>)
 800bb2e:	2201      	movs	r2, #1
 800bb30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb32:	682b      	ldr	r3, [r5, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1dd      	bne.n	800baf4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800bb38:	b10c      	cbz	r4, 800bb3e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800bb3a:	f7ff fdc3 	bl	800b6c4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb3e:	4d14      	ldr	r5, [pc, #80]	; (800bb90 <xTaskResumeAll+0xe0>)
 800bb40:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800bb42:	b144      	cbz	r4, 800bb56 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800bb44:	4e11      	ldr	r6, [pc, #68]	; (800bb8c <xTaskResumeAll+0xdc>)
 800bb46:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800bb48:	f7ff ff1c 	bl	800b984 <xTaskIncrementTick>
 800bb4c:	b100      	cbz	r0, 800bb50 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800bb4e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb50:	3c01      	subs	r4, #1
 800bb52:	d1f9      	bne.n	800bb48 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800bb54:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800bb56:	4b0d      	ldr	r3, [pc, #52]	; (800bb8c <xTaskResumeAll+0xdc>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0bc      	beq.n	800bad8 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800bb5e:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <xTaskResumeAll+0xe4>)
 800bb60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800bb6e:	2401      	movs	r4, #1
 800bb70:	e7b3      	b.n	800bada <xTaskResumeAll+0x2a>
 800bb72:	bf00      	nop
 800bb74:	24006aa4 	.word	0x24006aa4
 800bb78:	24006a9c 	.word	0x24006a9c
 800bb7c:	24006ae4 	.word	0x24006ae4
 800bb80:	24006aac 	.word	0x24006aac
 800bb84:	2400663c 	.word	0x2400663c
 800bb88:	24006630 	.word	0x24006630
 800bb8c:	24006b28 	.word	0x24006b28
 800bb90:	24006ae0 	.word	0x24006ae0
 800bb94:	e000ed04 	.word	0xe000ed04

0800bb98 <vTaskDelay>:
	{
 800bb98:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb9a:	b940      	cbnz	r0, 800bbae <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <vTaskDelay+0x40>)
 800bb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	f3bf 8f6f 	isb	sy
	}
 800bbac:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800bbae:	4b0b      	ldr	r3, [pc, #44]	; (800bbdc <vTaskDelay+0x44>)
 800bbb0:	6819      	ldr	r1, [r3, #0]
 800bbb2:	b141      	cbz	r1, 800bbc6 <vTaskDelay+0x2e>
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	e7fe      	b.n	800bbc4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bbc6:	f7ff fecf 	bl	800b968 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbca:	f7ff fe2d 	bl	800b828 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800bbce:	f7ff ff6f 	bl	800bab0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0e2      	beq.n	800bb9c <vTaskDelay+0x4>
 800bbd6:	e7e9      	b.n	800bbac <vTaskDelay+0x14>
 800bbd8:	e000ed04 	.word	0xe000ed04
 800bbdc:	24006aa4 	.word	0x24006aa4

0800bbe0 <vTaskSetApplicationTaskTag>:
	{
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	460d      	mov	r5, r1
		if( xTask == NULL )
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	b908      	cbnz	r0, 800bbec <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800bbe8:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <vTaskSetApplicationTaskTag+0x1c>)
 800bbea:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800bbec:	f7fe fea2 	bl	800a934 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800bbf0:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800bbf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800bbf6:	f7fe bebf 	b.w	800a978 <vPortExitCritical>
 800bbfa:	bf00      	nop
 800bbfc:	24006630 	.word	0x24006630

0800bc00 <xTaskCallApplicationTaskHook>:
	{
 800bc00:	4603      	mov	r3, r0
 800bc02:	4608      	mov	r0, r1
		if( xTask == NULL )
 800bc04:	b90b      	cbnz	r3, 800bc0a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800bc06:	4b03      	ldr	r3, [pc, #12]	; (800bc14 <xTaskCallApplicationTaskHook+0x14>)
 800bc08:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800bc0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0c:	b103      	cbz	r3, 800bc10 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800bc0e:	4718      	bx	r3
	}
 800bc10:	4618      	mov	r0, r3
 800bc12:	4770      	bx	lr
 800bc14:	24006630 	.word	0x24006630

0800bc18 <vTaskStartScheduler>:
{
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc1c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc1e:	aa07      	add	r2, sp, #28
 800bc20:	a906      	add	r1, sp, #24
 800bc22:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc24:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc28:	f7fe fcce 	bl	800a5c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc2c:	9b05      	ldr	r3, [sp, #20]
 800bc2e:	9a07      	ldr	r2, [sp, #28]
 800bc30:	9302      	str	r3, [sp, #8]
 800bc32:	9b06      	ldr	r3, [sp, #24]
 800bc34:	4917      	ldr	r1, [pc, #92]	; (800bc94 <vTaskStartScheduler+0x7c>)
 800bc36:	4818      	ldr	r0, [pc, #96]	; (800bc98 <vTaskStartScheduler+0x80>)
 800bc38:	e9cd 4300 	strd	r4, r3, [sp]
 800bc3c:	4623      	mov	r3, r4
 800bc3e:	f7ff fe2d 	bl	800b89c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800bc42:	b1d0      	cbz	r0, 800bc7a <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800bc44:	f000 fa88 	bl	800c158 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800bc48:	2801      	cmp	r0, #1
 800bc4a:	d118      	bne.n	800bc7e <vTaskStartScheduler+0x66>
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc5c:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <vTaskStartScheduler+0x84>)
 800bc5e:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 800bc62:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc66:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <vTaskStartScheduler+0x88>)
 800bc68:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc6a:	4b0e      	ldr	r3, [pc, #56]	; (800bca4 <vTaskStartScheduler+0x8c>)
 800bc6c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <vTaskStartScheduler+0x90>)
 800bc70:	6818      	ldr	r0, [r3, #0]
 800bc72:	f7ff ffc5 	bl	800bc00 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800bc76:	f7fe fef5 	bl	800aa64 <xPortStartScheduler>
}
 800bc7a:	b008      	add	sp, #32
 800bc7c:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc7e:	3001      	adds	r0, #1
 800bc80:	d1fb      	bne.n	800bc7a <vTaskStartScheduler+0x62>
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	e7fe      	b.n	800bc92 <vTaskStartScheduler+0x7a>
 800bc94:	0801e620 	.word	0x0801e620
 800bc98:	0800b7c1 	.word	0x0800b7c1
 800bc9c:	24006ad8 	.word	0x24006ad8
 800bca0:	24006af8 	.word	0x24006af8
 800bca4:	24006b24 	.word	0x24006b24
 800bca8:	24006630 	.word	0x24006630

0800bcac <vTaskSwitchContext>:
{
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcae:	4b1d      	ldr	r3, [pc, #116]	; (800bd24 <vTaskSwitchContext+0x78>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	4b1d      	ldr	r3, [pc, #116]	; (800bd28 <vTaskSwitchContext+0x7c>)
 800bcb4:	b112      	cbz	r2, 800bcbc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]
}
 800bcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800bcbc:	4e1b      	ldr	r6, [pc, #108]	; (800bd2c <vTaskSwitchContext+0x80>)
 800bcbe:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 800bcc0:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800bcc2:	6830      	ldr	r0, [r6, #0]
 800bcc4:	f7ff ff9c 	bl	800bc00 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc8:	4d19      	ldr	r5, [pc, #100]	; (800bd30 <vTaskSwitchContext+0x84>)
 800bcca:	4a1a      	ldr	r2, [pc, #104]	; (800bd34 <vTaskSwitchContext+0x88>)
 800bccc:	f04f 0c14 	mov.w	ip, #20
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	4617      	mov	r7, r2
 800bcd4:	fb0c f103 	mul.w	r1, ip, r3
 800bcd8:	5854      	ldr	r4, [r2, r1]
 800bcda:	1850      	adds	r0, r2, r1
 800bcdc:	b1ac      	cbz	r4, 800bd0a <vTaskSwitchContext+0x5e>
 800bcde:	6844      	ldr	r4, [r0, #4]
 800bce0:	3108      	adds	r1, #8
 800bce2:	6864      	ldr	r4, [r4, #4]
 800bce4:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800bce6:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce8:	4294      	cmp	r4, r2
 800bcea:	6044      	str	r4, [r0, #4]
 800bcec:	bf04      	itt	eq
 800bcee:	6862      	ldreq	r2, [r4, #4]
 800bcf0:	6042      	streq	r2, [r0, #4]
 800bcf2:	2214      	movs	r2, #20
 800bcf4:	fb02 7203 	mla	r2, r2, r3, r7
 800bcf8:	6852      	ldr	r2, [r2, #4]
 800bcfa:	68d2      	ldr	r2, [r2, #12]
 800bcfc:	6032      	str	r2, [r6, #0]
 800bcfe:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 800bd00:	6830      	ldr	r0, [r6, #0]
}
 800bd02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800bd06:	f7ff bf7b 	b.w	800bc00 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd0a:	b943      	cbnz	r3, 800bd1e <vTaskSwitchContext+0x72>
 800bd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	e7fe      	b.n	800bd1c <vTaskSwitchContext+0x70>
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	e7d8      	b.n	800bcd4 <vTaskSwitchContext+0x28>
 800bd22:	bf00      	nop
 800bd24:	24006aa4 	.word	0x24006aa4
 800bd28:	24006b28 	.word	0x24006b28
 800bd2c:	24006630 	.word	0x24006630
 800bd30:	24006aac 	.word	0x24006aac
 800bd34:	2400663c 	.word	0x2400663c

0800bd38 <vTaskPlaceOnEventList>:
{
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800bd3c:	b940      	cbnz	r0, 800bd50 <vTaskPlaceOnEventList+0x18>
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	e7fe      	b.n	800bd4e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd50:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <vTaskPlaceOnEventList+0x30>)
 800bd52:	6819      	ldr	r1, [r3, #0]
 800bd54:	3118      	adds	r1, #24
 800bd56:	f7fe fd5d 	bl	800a814 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	2101      	movs	r1, #1
}
 800bd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd62:	f7ff bd61 	b.w	800b828 <prvAddCurrentTaskToDelayedList>
 800bd66:	bf00      	nop
 800bd68:	24006630 	.word	0x24006630

0800bd6c <vTaskPlaceOnEventListRestricted>:
	{
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	460d      	mov	r5, r1
 800bd70:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800bd72:	b940      	cbnz	r0, 800bd86 <vTaskPlaceOnEventListRestricted+0x1a>
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	e7fe      	b.n	800bd84 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd86:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <vTaskPlaceOnEventListRestricted+0x38>)
 800bd88:	6819      	ldr	r1, [r3, #0]
 800bd8a:	3118      	adds	r1, #24
 800bd8c:	f7fe fd36 	bl	800a7fc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800bd90:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd92:	4621      	mov	r1, r4
 800bd94:	bf0c      	ite	eq
 800bd96:	4628      	moveq	r0, r5
 800bd98:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800bd9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bda0:	f7ff bd42 	b.w	800b828 <prvAddCurrentTaskToDelayedList>
 800bda4:	24006630 	.word	0x24006630

0800bda8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda8:	68c3      	ldr	r3, [r0, #12]
{
 800bdaa:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800bdae:	b944      	cbnz	r4, 800bdc2 <xTaskRemoveFromEventList+0x1a>
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	e7fe      	b.n	800bdc0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdc2:	f104 0118 	add.w	r1, r4, #24
 800bdc6:	4608      	mov	r0, r1
 800bdc8:	9101      	str	r1, [sp, #4]
 800bdca:	f7fe fd3a 	bl	800a842 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdce:	4b12      	ldr	r3, [pc, #72]	; (800be18 <xTaskRemoveFromEventList+0x70>)
 800bdd0:	9901      	ldr	r1, [sp, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	b9e3      	cbnz	r3, 800be10 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdd6:	1d21      	adds	r1, r4, #4
 800bdd8:	4608      	mov	r0, r1
 800bdda:	9101      	str	r1, [sp, #4]
 800bddc:	f7fe fd31 	bl	800a842 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bde0:	4a0e      	ldr	r2, [pc, #56]	; (800be1c <xTaskRemoveFromEventList+0x74>)
 800bde2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bde4:	6810      	ldr	r0, [r2, #0]
 800bde6:	9901      	ldr	r1, [sp, #4]
 800bde8:	4283      	cmp	r3, r0
 800bdea:	d900      	bls.n	800bdee <xTaskRemoveFromEventList+0x46>
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	4a0c      	ldr	r2, [pc, #48]	; (800be20 <xTaskRemoveFromEventList+0x78>)
 800bdf0:	2014      	movs	r0, #20
 800bdf2:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdf6:	f7fe fd01 	bl	800a7fc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdfa:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <xTaskRemoveFromEventList+0x7c>)
 800bdfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be02:	429a      	cmp	r2, r3
 800be04:	d906      	bls.n	800be14 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800be06:	2001      	movs	r0, #1
 800be08:	4b07      	ldr	r3, [pc, #28]	; (800be28 <xTaskRemoveFromEventList+0x80>)
 800be0a:	6018      	str	r0, [r3, #0]
}
 800be0c:	b002      	add	sp, #8
 800be0e:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be10:	4806      	ldr	r0, [pc, #24]	; (800be2c <xTaskRemoveFromEventList+0x84>)
 800be12:	e7f0      	b.n	800bdf6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800be14:	2000      	movs	r0, #0
	return xReturn;
 800be16:	e7f9      	b.n	800be0c <xTaskRemoveFromEventList+0x64>
 800be18:	24006aa4 	.word	0x24006aa4
 800be1c:	24006aac 	.word	0x24006aac
 800be20:	2400663c 	.word	0x2400663c
 800be24:	24006630 	.word	0x24006630
 800be28:	24006b28 	.word	0x24006b28
 800be2c:	24006ae4 	.word	0x24006ae4

0800be30 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be30:	4b03      	ldr	r3, [pc, #12]	; (800be40 <vTaskInternalSetTimeOutState+0x10>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be36:	4b03      	ldr	r3, [pc, #12]	; (800be44 <vTaskInternalSetTimeOutState+0x14>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6043      	str	r3, [r0, #4]
}
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	24006adc 	.word	0x24006adc
 800be44:	24006b24 	.word	0x24006b24

0800be48 <xTaskCheckForTimeOut>:
{
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800be4c:	4605      	mov	r5, r0
 800be4e:	b940      	cbnz	r0, 800be62 <xTaskCheckForTimeOut+0x1a>
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	e7fe      	b.n	800be60 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800be62:	b941      	cbnz	r1, 800be76 <xTaskCheckForTimeOut+0x2e>
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	e7fe      	b.n	800be74 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800be76:	f7fe fd5d 	bl	800a934 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800be7a:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <xTaskCheckForTimeOut+0x70>)
 800be7c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	d010      	beq.n	800bea6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be84:	480d      	ldr	r0, [pc, #52]	; (800bebc <xTaskCheckForTimeOut+0x74>)
 800be86:	682e      	ldr	r6, [r5, #0]
 800be88:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be8a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be8c:	4286      	cmp	r6, r0
 800be8e:	d001      	beq.n	800be94 <xTaskCheckForTimeOut+0x4c>
 800be90:	428a      	cmp	r2, r1
 800be92:	d90f      	bls.n	800beb4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be94:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be96:	4283      	cmp	r3, r0
 800be98:	d90a      	bls.n	800beb0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800be9a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be9c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800be9e:	4413      	add	r3, r2
 800bea0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bea2:	f7ff ffc5 	bl	800be30 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800bea6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bea8:	f7fe fd66 	bl	800a978 <vPortExitCritical>
}
 800beac:	4620      	mov	r0, r4
 800beae:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800beb4:	2401      	movs	r4, #1
 800beb6:	e7f7      	b.n	800bea8 <xTaskCheckForTimeOut+0x60>
 800beb8:	24006b24 	.word	0x24006b24
 800bebc:	24006adc 	.word	0x24006adc

0800bec0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800bec0:	4b01      	ldr	r3, [pc, #4]	; (800bec8 <vTaskMissedYield+0x8>)
 800bec2:	2201      	movs	r2, #1
 800bec4:	601a      	str	r2, [r3, #0]
}
 800bec6:	4770      	bx	lr
 800bec8:	24006b28 	.word	0x24006b28

0800becc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <xTaskGetSchedulerState+0x18>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	b133      	cbz	r3, 800bee0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bed2:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <xTaskGetSchedulerState+0x1c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800bed8:	bf0c      	ite	eq
 800beda:	2002      	moveq	r0, #2
 800bedc:	2000      	movne	r0, #0
 800bede:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bee0:	2001      	movs	r0, #1
	}
 800bee2:	4770      	bx	lr
 800bee4:	24006af8 	.word	0x24006af8
 800bee8:	24006aa4 	.word	0x24006aa4

0800beec <xTaskPriorityInherit>:
	{
 800beec:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800beee:	4604      	mov	r4, r0
 800bef0:	b348      	cbz	r0, 800bf46 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bef2:	4a1c      	ldr	r2, [pc, #112]	; (800bf64 <xTaskPriorityInherit+0x78>)
 800bef4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bef6:	6811      	ldr	r1, [r2, #0]
 800bef8:	4616      	mov	r6, r2
 800befa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800befc:	428b      	cmp	r3, r1
 800befe:	d228      	bcs.n	800bf52 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf00:	6982      	ldr	r2, [r0, #24]
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	db04      	blt.n	800bf10 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf06:	6832      	ldr	r2, [r6, #0]
 800bf08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bf0a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bf0e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf10:	2214      	movs	r2, #20
 800bf12:	4d15      	ldr	r5, [pc, #84]	; (800bf68 <xTaskPriorityInherit+0x7c>)
 800bf14:	fb02 5303 	mla	r3, r2, r3, r5
 800bf18:	6962      	ldr	r2, [r4, #20]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d115      	bne.n	800bf4a <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf1e:	1d21      	adds	r1, r4, #4
 800bf20:	4608      	mov	r0, r1
 800bf22:	9101      	str	r1, [sp, #4]
 800bf24:	f7fe fc8d 	bl	800a842 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf28:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf2a:	4a10      	ldr	r2, [pc, #64]	; (800bf6c <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf2e:	6810      	ldr	r0, [r2, #0]
 800bf30:	9901      	ldr	r1, [sp, #4]
 800bf32:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf34:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf36:	d900      	bls.n	800bf3a <xTaskPriorityInherit+0x4e>
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	2014      	movs	r0, #20
 800bf3c:	fb00 5003 	mla	r0, r0, r3, r5
 800bf40:	f7fe fc5c 	bl	800a7fc <vListInsertEnd>
				xReturn = pdTRUE;
 800bf44:	2001      	movs	r0, #1
	}
 800bf46:	b002      	add	sp, #8
 800bf48:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf4a:	6833      	ldr	r3, [r6, #0]
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf50:	e7f8      	b.n	800bf44 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf52:	6813      	ldr	r3, [r2, #0]
 800bf54:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800bf56:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bf58:	42a0      	cmp	r0, r4
 800bf5a:	bf2c      	ite	cs
 800bf5c:	2000      	movcs	r0, #0
 800bf5e:	2001      	movcc	r0, #1
 800bf60:	e7f1      	b.n	800bf46 <xTaskPriorityInherit+0x5a>
 800bf62:	bf00      	nop
 800bf64:	24006630 	.word	0x24006630
 800bf68:	2400663c 	.word	0x2400663c
 800bf6c:	24006aac 	.word	0x24006aac

0800bf70 <xTaskPriorityDisinherit>:
	{
 800bf70:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800bf72:	b910      	cbnz	r0, 800bf7a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800bf74:	2000      	movs	r0, #0
	}
 800bf76:	b002      	add	sp, #8
 800bf78:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800bf7a:	4b1c      	ldr	r3, [pc, #112]	; (800bfec <xTaskPriorityDisinherit+0x7c>)
 800bf7c:	681c      	ldr	r4, [r3, #0]
 800bf7e:	4284      	cmp	r4, r0
 800bf80:	d008      	beq.n	800bf94 <xTaskPriorityDisinherit+0x24>
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	e7fe      	b.n	800bf92 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bf96:	b943      	cbnz	r3, 800bfaa <xTaskPriorityDisinherit+0x3a>
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	e7fe      	b.n	800bfa8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800bfac:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800bfb0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfb2:	4291      	cmp	r1, r2
 800bfb4:	d0de      	beq.n	800bf74 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1dc      	bne.n	800bf74 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfba:	1d21      	adds	r1, r4, #4
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	9101      	str	r1, [sp, #4]
 800bfc0:	f7fe fc3f 	bl	800a842 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800bfc6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfcc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfce:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfd0:	4a07      	ldr	r2, [pc, #28]	; (800bff0 <xTaskPriorityDisinherit+0x80>)
 800bfd2:	6810      	ldr	r0, [r2, #0]
 800bfd4:	4283      	cmp	r3, r0
 800bfd6:	d900      	bls.n	800bfda <xTaskPriorityDisinherit+0x6a>
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	4a06      	ldr	r2, [pc, #24]	; (800bff4 <xTaskPriorityDisinherit+0x84>)
 800bfdc:	2014      	movs	r0, #20
 800bfde:	fb00 2003 	mla	r0, r0, r3, r2
 800bfe2:	f7fe fc0b 	bl	800a7fc <vListInsertEnd>
					xReturn = pdTRUE;
 800bfe6:	2001      	movs	r0, #1
		return xReturn;
 800bfe8:	e7c5      	b.n	800bf76 <xTaskPriorityDisinherit+0x6>
 800bfea:	bf00      	nop
 800bfec:	24006630 	.word	0x24006630
 800bff0:	24006aac 	.word	0x24006aac
 800bff4:	2400663c 	.word	0x2400663c

0800bff8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800bff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800bffa:	4604      	mov	r4, r0
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d044      	beq.n	800c08a <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800c000:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c002:	b942      	cbnz	r2, 800c016 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	e7fe      	b.n	800c014 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c016:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c018:	4299      	cmp	r1, r3
 800c01a:	bf38      	it	cc
 800c01c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c01e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c020:	428b      	cmp	r3, r1
 800c022:	d032      	beq.n	800c08a <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c024:	2a01      	cmp	r2, #1
 800c026:	d130      	bne.n	800c08a <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800c028:	4a19      	ldr	r2, [pc, #100]	; (800c090 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800c02a:	6812      	ldr	r2, [r2, #0]
 800c02c:	4282      	cmp	r2, r0
 800c02e:	d108      	bne.n	800c042 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	e7fe      	b.n	800c040 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c042:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c044:	4d13      	ldr	r5, [pc, #76]	; (800c094 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c046:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c048:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800c04c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c04e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c052:	bfa8      	it	ge
 800c054:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c058:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c05a:	bfa8      	it	ge
 800c05c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c05e:	429a      	cmp	r2, r3
 800c060:	d113      	bne.n	800c08a <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c062:	1d01      	adds	r1, r0, #4
 800c064:	4608      	mov	r0, r1
 800c066:	9101      	str	r1, [sp, #4]
 800c068:	f7fe fbeb 	bl	800a842 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800c06c:	4a0a      	ldr	r2, [pc, #40]	; (800c098 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800c06e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c070:	6810      	ldr	r0, [r2, #0]
 800c072:	9901      	ldr	r1, [sp, #4]
 800c074:	4283      	cmp	r3, r0
 800c076:	d900      	bls.n	800c07a <vTaskPriorityDisinheritAfterTimeout+0x82>
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	2014      	movs	r0, #20
 800c07c:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800c080:	b003      	add	sp, #12
 800c082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800c086:	f7fe bbb9 	b.w	800a7fc <vListInsertEnd>
	}
 800c08a:	b003      	add	sp, #12
 800c08c:	bd30      	pop	{r4, r5, pc}
 800c08e:	bf00      	nop
 800c090:	24006630 	.word	0x24006630
 800c094:	2400663c 	.word	0x2400663c
 800c098:	24006aac 	.word	0x24006aac

0800c09c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c09c:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <pvTaskIncrementMutexHeldCount+0x14>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	b11a      	cbz	r2, 800c0aa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c0a2:	6819      	ldr	r1, [r3, #0]
 800c0a4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c0a6:	3201      	adds	r2, #1
 800c0a8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800c0aa:	6818      	ldr	r0, [r3, #0]
	}
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	24006630 	.word	0x24006630

0800c0b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800c0b6:	4c11      	ldr	r4, [pc, #68]	; (800c0fc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800c0b8:	f7fe fc3c 	bl	800a934 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800c0bc:	6825      	ldr	r5, [r4, #0]
 800c0be:	b9bd      	cbnz	r5, 800c0f0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0c0:	4f0f      	ldr	r7, [pc, #60]	; (800c100 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800c0c2:	4e10      	ldr	r6, [pc, #64]	; (800c104 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	f7fe fb8b 	bl	800a7e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f7fe fb88 	bl	800a7e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0d0:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0d2:	4a0e      	ldr	r2, [pc, #56]	; (800c10c <prvCheckForValidListAndQueue+0x58>)
 800c0d4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c0d6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0d8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c0da:	4b0d      	ldr	r3, [pc, #52]	; (800c110 <prvCheckForValidListAndQueue+0x5c>)
 800c0dc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0de:	4b0d      	ldr	r3, [pc, #52]	; (800c114 <prvCheckForValidListAndQueue+0x60>)
 800c0e0:	9500      	str	r5, [sp, #0]
 800c0e2:	f7fe fe3d 	bl	800ad60 <xQueueGenericCreateStatic>
 800c0e6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c0e8:	b110      	cbz	r0, 800c0f0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c0ea:	490b      	ldr	r1, [pc, #44]	; (800c118 <prvCheckForValidListAndQueue+0x64>)
 800c0ec:	f7ff fa0a 	bl	800b504 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800c0f0:	b003      	add	sp, #12
 800c0f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800c0f6:	f7fe bc3f 	b.w	800a978 <vPortExitCritical>
 800c0fa:	bf00      	nop
 800c0fc:	24006c50 	.word	0x24006c50
 800c100:	24006bd4 	.word	0x24006bd4
 800c104:	24006be8 	.word	0x24006be8
 800c108:	24006b2c 	.word	0x24006b2c
 800c10c:	24006b34 	.word	0x24006b34
 800c110:	24006b30 	.word	0x24006b30
 800c114:	24006c00 	.word	0x24006c00
 800c118:	0801e625 	.word	0x0801e625

0800c11c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800c11c:	4291      	cmp	r1, r2
{
 800c11e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c120:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c122:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800c124:	d80a      	bhi.n	800c13c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c126:	1ad2      	subs	r2, r2, r3
 800c128:	6983      	ldr	r3, [r0, #24]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d20d      	bcs.n	800c14a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c12e:	1d01      	adds	r1, r0, #4
 800c130:	4b07      	ldr	r3, [pc, #28]	; (800c150 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c132:	6818      	ldr	r0, [r3, #0]
 800c134:	f7fe fb6e 	bl	800a814 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c138:	2000      	movs	r0, #0
}
 800c13a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d201      	bcs.n	800c144 <prvInsertTimerInActiveList+0x28>
 800c140:	4299      	cmp	r1, r3
 800c142:	d202      	bcs.n	800c14a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c144:	1d01      	adds	r1, r0, #4
 800c146:	4b03      	ldr	r3, [pc, #12]	; (800c154 <prvInsertTimerInActiveList+0x38>)
 800c148:	e7f3      	b.n	800c132 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800c14a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800c14c:	e7f5      	b.n	800c13a <prvInsertTimerInActiveList+0x1e>
 800c14e:	bf00      	nop
 800c150:	24006b30 	.word	0x24006b30
 800c154:	24006b2c 	.word	0x24006b2c

0800c158 <xTimerCreateTimerTask>:
{
 800c158:	b510      	push	{r4, lr}
 800c15a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800c15c:	f7ff ffaa 	bl	800c0b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c160:	4b12      	ldr	r3, [pc, #72]	; (800c1ac <xTimerCreateTimerTask+0x54>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	b1b3      	cbz	r3, 800c194 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c166:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c168:	aa07      	add	r2, sp, #28
 800c16a:	a906      	add	r1, sp, #24
 800c16c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c16e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c172:	f7fe fa35 	bl	800a5e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c176:	9b05      	ldr	r3, [sp, #20]
 800c178:	9a07      	ldr	r2, [sp, #28]
 800c17a:	9302      	str	r3, [sp, #8]
 800c17c:	9b06      	ldr	r3, [sp, #24]
 800c17e:	490c      	ldr	r1, [pc, #48]	; (800c1b0 <xTimerCreateTimerTask+0x58>)
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	2302      	movs	r3, #2
 800c184:	480b      	ldr	r0, [pc, #44]	; (800c1b4 <xTimerCreateTimerTask+0x5c>)
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	4623      	mov	r3, r4
 800c18a:	f7ff fb87 	bl	800b89c <xTaskCreateStatic>
 800c18e:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <xTimerCreateTimerTask+0x60>)
 800c190:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c192:	b940      	cbnz	r0, 800c1a6 <xTimerCreateTimerTask+0x4e>
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800c1a4:	e7fe      	b.n	800c1a4 <xTimerCreateTimerTask+0x4c>
}
 800c1a6:	2001      	movs	r0, #1
 800c1a8:	b008      	add	sp, #32
 800c1aa:	bd10      	pop	{r4, pc}
 800c1ac:	24006c50 	.word	0x24006c50
 800c1b0:	0801e62a 	.word	0x0801e62a
 800c1b4:	0800c28d 	.word	0x0800c28d
 800c1b8:	24006c54 	.word	0x24006c54

0800c1bc <xTimerGenericCommand>:
{
 800c1bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c1be:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800c1c0:	4604      	mov	r4, r0
{
 800c1c2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800c1c4:	b940      	cbnz	r0, 800c1d8 <xTimerGenericCommand+0x1c>
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	e7fe      	b.n	800c1d6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800c1d8:	4d0c      	ldr	r5, [pc, #48]	; (800c20c <xTimerGenericCommand+0x50>)
 800c1da:	6828      	ldr	r0, [r5, #0]
 800c1dc:	b178      	cbz	r0, 800c1fe <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1de:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c1e0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c1e2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1e6:	dc0c      	bgt.n	800c202 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1e8:	f7ff fe70 	bl	800becc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1ec:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1ee:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1f0:	4669      	mov	r1, sp
 800c1f2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1f4:	bf0c      	ite	eq
 800c1f6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1f8:	461a      	movne	r2, r3
 800c1fa:	f7fe fe67 	bl	800aecc <xQueueGenericSend>
}
 800c1fe:	b004      	add	sp, #16
 800c200:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c202:	2300      	movs	r3, #0
 800c204:	4669      	mov	r1, sp
 800c206:	f7fe ff13 	bl	800b030 <xQueueGenericSendFromISR>
 800c20a:	e7f8      	b.n	800c1fe <xTimerGenericCommand+0x42>
 800c20c:	24006c50 	.word	0x24006c50

0800c210 <prvSwitchTimerLists>:
{
 800c210:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c212:	4d1c      	ldr	r5, [pc, #112]	; (800c284 <prvSwitchTimerLists+0x74>)
{
 800c214:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c216:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	b92a      	cbnz	r2, 800c22a <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 800c21e:	4a1a      	ldr	r2, [pc, #104]	; (800c288 <prvSwitchTimerLists+0x78>)
 800c220:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c222:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800c224:	6029      	str	r1, [r5, #0]
}
 800c226:	b005      	add	sp, #20
 800c228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c22a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c22c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c22e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c230:	1d21      	adds	r1, r4, #4
 800c232:	4608      	mov	r0, r1
 800c234:	9103      	str	r1, [sp, #12]
 800c236:	f7fe fb04 	bl	800a842 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c23a:	6a23      	ldr	r3, [r4, #32]
 800c23c:	4620      	mov	r0, r4
 800c23e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c240:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c244:	9903      	ldr	r1, [sp, #12]
 800c246:	f013 0f04 	tst.w	r3, #4
 800c24a:	d0e5      	beq.n	800c218 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c24c:	69a3      	ldr	r3, [r4, #24]
 800c24e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800c250:	429e      	cmp	r6, r3
 800c252:	d205      	bcs.n	800c260 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c254:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c256:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c258:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c25a:	f7fe fadb 	bl	800a814 <vListInsert>
 800c25e:	e7db      	b.n	800c218 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c260:	2300      	movs	r3, #0
 800c262:	4632      	mov	r2, r6
 800c264:	4620      	mov	r0, r4
 800c266:	9700      	str	r7, [sp, #0]
 800c268:	4619      	mov	r1, r3
 800c26a:	f7ff ffa7 	bl	800c1bc <xTimerGenericCommand>
				configASSERT( xResult );
 800c26e:	2800      	cmp	r0, #0
 800c270:	d1d2      	bne.n	800c218 <prvSwitchTimerLists+0x8>
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	e7fe      	b.n	800c282 <prvSwitchTimerLists+0x72>
 800c284:	24006b2c 	.word	0x24006b2c
 800c288:	24006b30 	.word	0x24006b30

0800c28c <prvTimerTask>:
{
 800c28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c290:	4f77      	ldr	r7, [pc, #476]	; (800c470 <prvTimerTask+0x1e4>)
{
 800c292:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800c294:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800c480 <prvTimerTask+0x1f4>
 800c298:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	f8d3 b000 	ldr.w	fp, [r3]
 800c2a0:	f1bb 0f00 	cmp.w	fp, #0
 800c2a4:	d028      	beq.n	800c2f8 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2a6:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2a8:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2aa:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 800c2ae:	4e71      	ldr	r6, [pc, #452]	; (800c474 <prvTimerTask+0x1e8>)
	vTaskSuspendAll();
 800c2b0:	f7ff fb5a 	bl	800b968 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c2b4:	f7ff fb60 	bl	800b978 <xTaskGetTickCount>
 800c2b8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c2ba:	6833      	ldr	r3, [r6, #0]
 800c2bc:	46b0      	mov	r8, r6
 800c2be:	4298      	cmp	r0, r3
 800c2c0:	d31c      	bcc.n	800c2fc <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800c2c2:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2c4:	b31c      	cbz	r4, 800c30e <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2c6:	4b6c      	ldr	r3, [pc, #432]	; (800c478 <prvTimerTask+0x1ec>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681c      	ldr	r4, [r3, #0]
 800c2cc:	fab4 f484 	clz	r4, r4
 800c2d0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2d2:	4b6a      	ldr	r3, [pc, #424]	; (800c47c <prvTimerTask+0x1f0>)
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	ebab 0105 	sub.w	r1, fp, r5
 800c2da:	6818      	ldr	r0, [r3, #0]
 800c2dc:	f7ff f951 	bl	800b582 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2e0:	f7ff fbe6 	bl	800bab0 <xTaskResumeAll>
 800c2e4:	b978      	cbnz	r0, 800c306 <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800c2e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c2ea:	f8ca 3000 	str.w	r3, [sl]
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	e006      	b.n	800c306 <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2f8:	2401      	movs	r4, #1
 800c2fa:	e7d8      	b.n	800c2ae <prvTimerTask+0x22>
		prvSwitchTimerLists();
 800c2fc:	f7ff ff88 	bl	800c210 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c300:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800c302:	f7ff fbd5 	bl	800bab0 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c306:	4e5d      	ldr	r6, [pc, #372]	; (800c47c <prvTimerTask+0x1f0>)
 800c308:	f04f 0b00 	mov.w	fp, #0
 800c30c:	e035      	b.n	800c37a <prvTimerTask+0xee>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c30e:	4583      	cmp	fp, r0
 800c310:	d8df      	bhi.n	800c2d2 <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 800c312:	f7ff fbcd 	bl	800bab0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c316:	f8d9 3000 	ldr.w	r3, [r9]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c31e:	1d30      	adds	r0, r6, #4
 800c320:	f7fe fa8f 	bl	800a842 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c324:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800c328:	0758      	lsls	r0, r3, #29
 800c32a:	d518      	bpl.n	800c35e <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c32c:	69b1      	ldr	r1, [r6, #24]
 800c32e:	465b      	mov	r3, fp
 800c330:	462a      	mov	r2, r5
 800c332:	4630      	mov	r0, r6
 800c334:	4459      	add	r1, fp
 800c336:	f7ff fef1 	bl	800c11c <prvInsertTimerInActiveList>
 800c33a:	b1a0      	cbz	r0, 800c366 <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c33c:	4623      	mov	r3, r4
 800c33e:	465a      	mov	r2, fp
 800c340:	4621      	mov	r1, r4
 800c342:	4630      	mov	r0, r6
 800c344:	9400      	str	r4, [sp, #0]
 800c346:	f7ff ff39 	bl	800c1bc <xTimerGenericCommand>
			configASSERT( xResult );
 800c34a:	b960      	cbnz	r0, 800c366 <prvTimerTask+0xda>
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	e7fe      	b.n	800c35c <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c35e:	f023 0301 	bic.w	r3, r3, #1
 800c362:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c366:	6a33      	ldr	r3, [r6, #32]
 800c368:	4630      	mov	r0, r6
 800c36a:	4798      	blx	r3
}
 800c36c:	e7cb      	b.n	800c306 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c36e:	9b03      	ldr	r3, [sp, #12]
 800c370:	9905      	ldr	r1, [sp, #20]
 800c372:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c374:	9b02      	ldr	r3, [sp, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	da0a      	bge.n	800c390 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c37a:	2200      	movs	r2, #0
 800c37c:	a902      	add	r1, sp, #8
 800c37e:	6830      	ldr	r0, [r6, #0]
 800c380:	f7fe ff0c 	bl	800b19c <xQueueReceive>
 800c384:	2800      	cmp	r0, #0
 800c386:	d088      	beq.n	800c29a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c388:	9b02      	ldr	r3, [sp, #8]
 800c38a:	9804      	ldr	r0, [sp, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dbee      	blt.n	800c36e <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c390:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c392:	6963      	ldr	r3, [r4, #20]
 800c394:	b9a3      	cbnz	r3, 800c3c0 <prvTimerTask+0x134>
	xTimeNow = xTaskGetTickCount();
 800c396:	f7ff faef 	bl	800b978 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c39a:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800c39e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	d201      	bcs.n	800c3a8 <prvTimerTask+0x11c>
		prvSwitchTimerLists();
 800c3a4:	f7ff ff34 	bl	800c210 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c3a8:	9b02      	ldr	r3, [sp, #8]
 800c3aa:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800c3ae:	2b09      	cmp	r3, #9
 800c3b0:	d8e3      	bhi.n	800c37a <prvTimerTask+0xee>
 800c3b2:	e8df f003 	tbb	[pc, r3]
 800c3b6:	0909      	.short	0x0909
 800c3b8:	543b3409 	.word	0x543b3409
 800c3bc:	3b340909 	.word	0x3b340909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3c0:	1d20      	adds	r0, r4, #4
 800c3c2:	f7fe fa3e 	bl	800a842 <uxListRemove>
 800c3c6:	e7e6      	b.n	800c396 <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	69a1      	ldr	r1, [r4, #24]
 800c3d0:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3d2:	f043 0301 	orr.w	r3, r3, #1
 800c3d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	4419      	add	r1, r3
 800c3de:	f7ff fe9d 	bl	800c11c <prvInsertTimerInActiveList>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d0c9      	beq.n	800c37a <prvTimerTask+0xee>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3e6:	6a23      	ldr	r3, [r4, #32]
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c3f0:	0759      	lsls	r1, r3, #29
 800c3f2:	d5c2      	bpl.n	800c37a <prvTimerTask+0xee>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3f4:	69a2      	ldr	r2, [r4, #24]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	9903      	ldr	r1, [sp, #12]
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f8cd b000 	str.w	fp, [sp]
 800c400:	440a      	add	r2, r1
 800c402:	4619      	mov	r1, r3
 800c404:	f7ff feda 	bl	800c1bc <xTimerGenericCommand>
							configASSERT( xResult );
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1b6      	bne.n	800c37a <prvTimerTask+0xee>
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	e7fe      	b.n	800c41c <prvTimerTask+0x190>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c41e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800c42a:	e7a6      	b.n	800c37a <prvTimerTask+0xee>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c42c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c430:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c432:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c436:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c438:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c43c:	b941      	cbnz	r1, 800c450 <prvTimerTask+0x1c4>
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	e7fe      	b.n	800c44e <prvTimerTask+0x1c2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c450:	462b      	mov	r3, r5
 800c452:	462a      	mov	r2, r5
 800c454:	4429      	add	r1, r5
 800c456:	4620      	mov	r0, r4
 800c458:	f7ff fe60 	bl	800c11c <prvInsertTimerInActiveList>
					break;
 800c45c:	e78d      	b.n	800c37a <prvTimerTask+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c45e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c462:	079a      	lsls	r2, r3, #30
 800c464:	d4dd      	bmi.n	800c422 <prvTimerTask+0x196>
							vPortFree( pxTimer );
 800c466:	4620      	mov	r0, r4
 800c468:	f7fe f97c 	bl	800a764 <vPortFree>
 800c46c:	e785      	b.n	800c37a <prvTimerTask+0xee>
 800c46e:	bf00      	nop
 800c470:	24006b2c 	.word	0x24006b2c
 800c474:	24006bfc 	.word	0x24006bfc
 800c478:	24006b30 	.word	0x24006b30
 800c47c:	24006c50 	.word	0x24006c50
 800c480:	e000ed04 	.word	0xe000ed04

0800c484 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c484:	8880      	ldrh	r0, [r0, #4]
 800c486:	4770      	bx	lr

0800c488 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c488:	2300      	movs	r3, #0
 800c48a:	8083      	strh	r3, [r0, #4]
 800c48c:	4770      	bx	lr
	...

0800c490 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	6803      	ldr	r3, [r0, #0]
 800c494:	460e      	mov	r6, r1
 800c496:	2100      	movs	r1, #0
 800c498:	4605      	mov	r5, r0
 800c49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49c:	4798      	blx	r3
 800c49e:	4604      	mov	r4, r0
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	1b34      	subs	r4, r6, r4
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	b2a4      	uxth	r4, r4
 800c4aa:	4798      	blx	r3
 800c4ac:	88ab      	ldrh	r3, [r5, #4]
 800c4ae:	fbb4 f4f0 	udiv	r4, r4, r0
 800c4b2:	42a3      	cmp	r3, r4
 800c4b4:	d805      	bhi.n	800c4c2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800c4b6:	4b0e      	ldr	r3, [pc, #56]	; (800c4f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800c4b8:	211e      	movs	r1, #30
 800c4ba:	4a0e      	ldr	r2, [pc, #56]	; (800c4f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c4bc:	480e      	ldr	r0, [pc, #56]	; (800c4f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800c4be:	f00f fef5 	bl	801c2ac <__assert_func>
 800c4c2:	682b      	ldr	r3, [r5, #0]
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ca:	4798      	blx	r3
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	4607      	mov	r7, r0
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	4798      	blx	r3
 800c4d6:	1bf3      	subs	r3, r6, r7
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	fbb3 f2f0 	udiv	r2, r3, r0
 800c4de:	fb02 3010 	mls	r0, r2, r0, r3
 800c4e2:	b118      	cbz	r0, 800c4ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800c4e4:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800c4e6:	211f      	movs	r1, #31
 800c4e8:	4a02      	ldr	r2, [pc, #8]	; (800c4f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c4ea:	e7e7      	b.n	800c4bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f0:	0801e632 	.word	0x0801e632
 800c4f4:	0801e79e 	.word	0x0801e79e
 800c4f8:	0801e647 	.word	0x0801e647
 800c4fc:	0801e675 	.word	0x0801e675

0800c500 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	6803      	ldr	r3, [r0, #0]
 800c504:	460d      	mov	r5, r1
 800c506:	4604      	mov	r4, r0
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	4798      	blx	r3
 800c50c:	4285      	cmp	r5, r0
 800c50e:	d905      	bls.n	800c51c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800c510:	4b0c      	ldr	r3, [pc, #48]	; (800c544 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800c512:	2130      	movs	r1, #48	; 0x30
 800c514:	4a0c      	ldr	r2, [pc, #48]	; (800c548 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c516:	480d      	ldr	r0, [pc, #52]	; (800c54c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800c518:	f00f fec8 	bl	801c2ac <__assert_func>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	4620      	mov	r0, r4
 800c520:	88a5      	ldrh	r5, [r4, #4]
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	4798      	blx	r3
 800c526:	4285      	cmp	r5, r0
 800c528:	d303      	bcc.n	800c532 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800c52a:	4b09      	ldr	r3, [pc, #36]	; (800c550 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800c52c:	2131      	movs	r1, #49	; 0x31
 800c52e:	4a06      	ldr	r2, [pc, #24]	; (800c548 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c530:	e7f1      	b.n	800c516 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	4620      	mov	r0, r4
 800c536:	88a1      	ldrh	r1, [r4, #4]
 800c538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53a:	4798      	blx	r3
 800c53c:	88a3      	ldrh	r3, [r4, #4]
 800c53e:	3301      	adds	r3, #1
 800c540:	80a3      	strh	r3, [r4, #4]
 800c542:	bd38      	pop	{r3, r4, r5, pc}
 800c544:	0801e6ef 	.word	0x0801e6ef
 800c548:	0801e7e1 	.word	0x0801e7e1
 800c54c:	0801e647 	.word	0x0801e647
 800c550:	0801e706 	.word	0x0801e706

0800c554 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	6803      	ldr	r3, [r0, #0]
 800c558:	4616      	mov	r6, r2
 800c55a:	4604      	mov	r4, r0
 800c55c:	460d      	mov	r5, r1
 800c55e:	6a1b      	ldr	r3, [r3, #32]
 800c560:	4798      	blx	r3
 800c562:	4286      	cmp	r6, r0
 800c564:	d905      	bls.n	800c572 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800c566:	4b06      	ldr	r3, [pc, #24]	; (800c580 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800c568:	213a      	movs	r1, #58	; 0x3a
 800c56a:	4a06      	ldr	r2, [pc, #24]	; (800c584 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800c56c:	4806      	ldr	r0, [pc, #24]	; (800c588 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800c56e:	f00f fe9d 	bl	801c2ac <__assert_func>
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	4629      	mov	r1, r5
 800c576:	4620      	mov	r0, r4
 800c578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c57e:	4718      	bx	r3
 800c580:	0801e6ef 	.word	0x0801e6ef
 800c584:	0801e754 	.word	0x0801e754
 800c588:	0801e647 	.word	0x0801e647

0800c58c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c58c:	4770      	bx	lr
	...

0800c590 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c590:	4a02      	ldr	r2, [pc, #8]	; (800c59c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c592:	6002      	str	r2, [r0, #0]
 800c594:	2200      	movs	r2, #0
 800c596:	8082      	strh	r2, [r0, #4]
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	0801e728 	.word	0x0801e728

0800c5a0 <_ZN8touchgfx9Container13getFirstChildEv>:
 800c5a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c5a2:	4770      	bx	lr

0800c5a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c5a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	b12b      	cbz	r3, 800c5b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c5aa:	b920      	cbnz	r0, 800c5b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c5ac:	1a5a      	subs	r2, r3, r1
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	4250      	negs	r0, r2
 800c5b2:	4150      	adcs	r0, r2
 800c5b4:	e7f8      	b.n	800c5a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c5b6:	4770      	bx	lr

0800c5b8 <_ZN8touchgfx9Container9removeAllEv>:
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c5bc:	b123      	cbz	r3, 800c5c8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800c5be:	6999      	ldr	r1, [r3, #24]
 800c5c0:	6281      	str	r1, [r0, #40]	; 0x28
 800c5c2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800c5c6:	e7f8      	b.n	800c5ba <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c5c8:	4770      	bx	lr

0800c5ca <_ZN8touchgfx9Container6unlinkEv>:
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	6283      	str	r3, [r0, #40]	; 0x28
 800c5ce:	4770      	bx	lr

0800c5d0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	8002      	strh	r2, [r0, #0]
 800c5d4:	8042      	strh	r2, [r0, #2]
 800c5d6:	8082      	strh	r2, [r0, #4]
 800c5d8:	80c2      	strh	r2, [r0, #6]
 800c5da:	4770      	bx	lr

0800c5dc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	460d      	mov	r5, r1
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c5e4:	b13c      	cbz	r4, 800c5f6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	4632      	mov	r2, r6
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5f0:	4798      	blx	r3
 800c5f2:	69a4      	ldr	r4, [r4, #24]
 800c5f4:	e7f6      	b.n	800c5e4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c5f6:	bd70      	pop	{r4, r5, r6, pc}

0800c5f8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c5fe:	b134      	cbz	r4, 800c60e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800c600:	682b      	ldr	r3, [r5, #0]
 800c602:	4621      	mov	r1, r4
 800c604:	4628      	mov	r0, r5
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	4798      	blx	r3
 800c60a:	69a4      	ldr	r4, [r4, #24]
 800c60c:	e7f7      	b.n	800c5fe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c60e:	bd38      	pop	{r3, r4, r5, pc}

0800c610 <_ZN8touchgfx9ContainerD1Ev>:
 800c610:	4770      	bx	lr

0800c612 <_ZN8touchgfx9ContainerD0Ev>:
 800c612:	b510      	push	{r4, lr}
 800c614:	4604      	mov	r4, r0
 800c616:	212c      	movs	r1, #44	; 0x2c
 800c618:	f00f fd32 	bl	801c080 <_ZdlPvj>
 800c61c:	4620      	mov	r0, r4
 800c61e:	bd10      	pop	{r4, pc}

0800c620 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c620:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c622:	b19b      	cbz	r3, 800c64c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c624:	428b      	cmp	r3, r1
 800c626:	d109      	bne.n	800c63c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c628:	699a      	ldr	r2, [r3, #24]
 800c62a:	2100      	movs	r1, #0
 800c62c:	6159      	str	r1, [r3, #20]
 800c62e:	6282      	str	r2, [r0, #40]	; 0x28
 800c630:	b902      	cbnz	r2, 800c634 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800c632:	4770      	bx	lr
 800c634:	6199      	str	r1, [r3, #24]
 800c636:	4770      	bx	lr
 800c638:	4613      	mov	r3, r2
 800c63a:	b13a      	cbz	r2, 800c64c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c63c:	699a      	ldr	r2, [r3, #24]
 800c63e:	428a      	cmp	r2, r1
 800c640:	d1fa      	bne.n	800c638 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c642:	698a      	ldr	r2, [r1, #24]
 800c644:	619a      	str	r2, [r3, #24]
 800c646:	2300      	movs	r3, #0
 800c648:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800c64c:	4770      	bx	lr

0800c64e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c64e:	b410      	push	{r4}
 800c650:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c652:	4604      	mov	r4, r0
 800c654:	b92b      	cbnz	r3, 800c662 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800c656:	6803      	ldr	r3, [r0, #0]
 800c658:	4611      	mov	r1, r2
 800c65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c660:	4718      	bx	r3
 800c662:	b941      	cbnz	r1, 800c676 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800c664:	6193      	str	r3, [r2, #24]
 800c666:	6282      	str	r2, [r0, #40]	; 0x28
 800c668:	6154      	str	r4, [r2, #20]
 800c66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	4603      	mov	r3, r0
 800c672:	2800      	cmp	r0, #0
 800c674:	d0f9      	beq.n	800c66a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800c676:	4299      	cmp	r1, r3
 800c678:	6998      	ldr	r0, [r3, #24]
 800c67a:	d1f9      	bne.n	800c670 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c67c:	6190      	str	r0, [r2, #24]
 800c67e:	618a      	str	r2, [r1, #24]
 800c680:	e7f2      	b.n	800c668 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800c684 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c684:	4288      	cmp	r0, r1
 800c686:	b508      	push	{r3, lr}
 800c688:	d105      	bne.n	800c696 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800c68a:	4b11      	ldr	r3, [pc, #68]	; (800c6d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800c68c:	2123      	movs	r1, #35	; 0x23
 800c68e:	4a11      	ldr	r2, [pc, #68]	; (800c6d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c690:	4811      	ldr	r0, [pc, #68]	; (800c6d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800c692:	f00f fe0b 	bl	801c2ac <__assert_func>
 800c696:	694b      	ldr	r3, [r1, #20]
 800c698:	b11b      	cbz	r3, 800c6a2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800c69a:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c69c:	2124      	movs	r1, #36	; 0x24
 800c69e:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c6a0:	e7f6      	b.n	800c690 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c6a2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800c6a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c6a8:	b913      	cbnz	r3, 800c6b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800c6aa:	6281      	str	r1, [r0, #40]	; 0x28
 800c6ac:	bd08      	pop	{r3, pc}
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	699a      	ldr	r2, [r3, #24]
 800c6b2:	b12a      	cbz	r2, 800c6c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800c6b4:	428b      	cmp	r3, r1
 800c6b6:	d1fa      	bne.n	800c6ae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800c6b8:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c6ba:	2135      	movs	r1, #53	; 0x35
 800c6bc:	4a05      	ldr	r2, [pc, #20]	; (800c6d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c6be:	e7e7      	b.n	800c690 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	d103      	bne.n	800c6cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800c6c4:	4b06      	ldr	r3, [pc, #24]	; (800c6e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c6c6:	2138      	movs	r1, #56	; 0x38
 800c6c8:	4a02      	ldr	r2, [pc, #8]	; (800c6d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c6ca:	e7e1      	b.n	800c690 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c6cc:	6199      	str	r1, [r3, #24]
 800c6ce:	e7ed      	b.n	800c6ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800c6d0:	0801e81f 	.word	0x0801e81f
 800c6d4:	0801e974 	.word	0x0801e974
 800c6d8:	0801e84b 	.word	0x0801e84b
 800c6dc:	0801e87e 	.word	0x0801e87e
 800c6e0:	0801e8b4 	.word	0x0801e8b4

0800c6e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	461f      	mov	r7, r3
 800c6ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c6ee:	460d      	mov	r5, r1
 800c6f0:	4616      	mov	r6, r2
 800c6f2:	b103      	cbz	r3, 800c6f6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800c6f4:	6038      	str	r0, [r7, #0]
 800c6f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c6f8:	b314      	cbz	r4, 800c740 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800c6fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c6fe:	b1eb      	cbz	r3, 800c73c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c700:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c704:	428d      	cmp	r5, r1
 800c706:	db19      	blt.n	800c73c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c708:	b289      	uxth	r1, r1
 800c70a:	8923      	ldrh	r3, [r4, #8]
 800c70c:	440b      	add	r3, r1
 800c70e:	b21b      	sxth	r3, r3
 800c710:	429d      	cmp	r5, r3
 800c712:	da13      	bge.n	800c73c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c714:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800c718:	4296      	cmp	r6, r2
 800c71a:	db0f      	blt.n	800c73c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c71c:	b292      	uxth	r2, r2
 800c71e:	8963      	ldrh	r3, [r4, #10]
 800c720:	4413      	add	r3, r2
 800c722:	b21b      	sxth	r3, r3
 800c724:	429e      	cmp	r6, r3
 800c726:	da09      	bge.n	800c73c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c728:	6823      	ldr	r3, [r4, #0]
 800c72a:	1ab2      	subs	r2, r6, r2
 800c72c:	1a69      	subs	r1, r5, r1
 800c72e:	4620      	mov	r0, r4
 800c730:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800c734:	b212      	sxth	r2, r2
 800c736:	463b      	mov	r3, r7
 800c738:	b209      	sxth	r1, r1
 800c73a:	47c0      	blx	r8
 800c73c:	69a4      	ldr	r4, [r4, #24]
 800c73e:	e7db      	b.n	800c6f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c744 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	4c6d      	ldr	r4, [pc, #436]	; (800c900 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800c74a:	b0a1      	sub	sp, #132	; 0x84
 800c74c:	4606      	mov	r6, r0
 800c74e:	6824      	ldr	r4, [r4, #0]
 800c750:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800c752:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800c756:	2400      	movs	r4, #0
 800c758:	9303      	str	r3, [sp, #12]
 800c75a:	802c      	strh	r4, [r5, #0]
 800c75c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800c75e:	802c      	strh	r4, [r5, #0]
 800c760:	601c      	str	r4, [r3, #0]
 800c762:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800c766:	f7ff ffbd 	bl	800c6e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c76a:	f1b9 0f03 	cmp.w	r9, #3
 800c76e:	f340 80c1 	ble.w	800c8f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800c772:	4631      	mov	r1, r6
 800c774:	a80c      	add	r0, sp, #48	; 0x30
 800c776:	f004 fff1 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c77a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800c77e:	9306      	str	r3, [sp, #24]
 800c780:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800c784:	9307      	str	r3, [sp, #28]
 800c786:	9b03      	ldr	r3, [sp, #12]
 800c788:	f8d3 a000 	ldr.w	sl, [r3]
 800c78c:	f1ba 0f00 	cmp.w	sl, #0
 800c790:	f000 80b3 	beq.w	800c8fa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800c794:	4651      	mov	r1, sl
 800c796:	a810      	add	r0, sp, #64	; 0x40
 800c798:	f004 ffe0 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c79c:	2002      	movs	r0, #2
 800c79e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c7a2:	9b01      	ldr	r3, [sp, #4]
 800c7a4:	9a06      	ldr	r2, [sp, #24]
 800c7a6:	fb91 f1f0 	sdiv	r1, r1, r0
 800c7aa:	189d      	adds	r5, r3, r2
 800c7ac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800c7b0:	9a07      	ldr	r2, [sp, #28]
 800c7b2:	4419      	add	r1, r3
 800c7b4:	9b02      	ldr	r3, [sp, #8]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800c7bc:	1a6d      	subs	r5, r5, r1
 800c7be:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800c7c2:	fb92 f2f0 	sdiv	r2, r2, r0
 800c7c6:	440a      	add	r2, r1
 800c7c8:	1a9b      	subs	r3, r3, r2
 800c7ca:	435b      	muls	r3, r3
 800c7cc:	fb05 3505 	mla	r5, r5, r5, r3
 800c7d0:	4f4c      	ldr	r7, [pc, #304]	; (800c904 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800c7d2:	ac10      	add	r4, sp, #64	; 0x40
 800c7d4:	f1b9 0f0c 	cmp.w	r9, #12
 800c7d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c7da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c7de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c7e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7e4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800c7e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c7ec:	f04f 0303 	mov.w	r3, #3
 800c7f0:	bfd8      	it	le
 800c7f2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800c7f6:	f04f 0400 	mov.w	r4, #0
 800c7fa:	f8cd 9000 	str.w	r9, [sp]
 800c7fe:	bfcc      	ite	gt
 800c800:	4698      	movgt	r8, r3
 800c802:	fb92 f8f3 	sdivle	r8, r2, r3
 800c806:	1c63      	adds	r3, r4, #1
 800c808:	aa10      	add	r2, sp, #64	; 0x40
 800c80a:	f004 0401 	and.w	r4, r4, #1
 800c80e:	f04f 0b00 	mov.w	fp, #0
 800c812:	9308      	str	r3, [sp, #32]
 800c814:	9b00      	ldr	r3, [sp, #0]
 800c816:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800c81a:	fb93 f3f8 	sdiv	r3, r3, r8
 800c81e:	3404      	adds	r4, #4
 800c820:	b29b      	uxth	r3, r3
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	9a04      	ldr	r2, [sp, #16]
 800c826:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c82a:	fb13 f302 	smulbb	r3, r3, r2
 800c82e:	9a01      	ldr	r2, [sp, #4]
 800c830:	b29b      	uxth	r3, r3
 800c832:	1899      	adds	r1, r3, r2
 800c834:	9305      	str	r3, [sp, #20]
 800c836:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c83a:	b209      	sxth	r1, r1
 800c83c:	4299      	cmp	r1, r3
 800c83e:	db4d      	blt.n	800c8dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c840:	8932      	ldrh	r2, [r6, #8]
 800c842:	4413      	add	r3, r2
 800c844:	b21b      	sxth	r3, r3
 800c846:	4299      	cmp	r1, r3
 800c848:	da48      	bge.n	800c8dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c84a:	9b04      	ldr	r3, [sp, #16]
 800c84c:	6827      	ldr	r7, [r4, #0]
 800c84e:	fb17 f703 	smulbb	r7, r7, r3
 800c852:	9b02      	ldr	r3, [sp, #8]
 800c854:	b2bf      	uxth	r7, r7
 800c856:	18fa      	adds	r2, r7, r3
 800c858:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c85c:	b212      	sxth	r2, r2
 800c85e:	429a      	cmp	r2, r3
 800c860:	db3c      	blt.n	800c8dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c862:	8970      	ldrh	r0, [r6, #10]
 800c864:	4403      	add	r3, r0
 800c866:	b21b      	sxth	r3, r3
 800c868:	429a      	cmp	r2, r3
 800c86a:	da37      	bge.n	800c8dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c86c:	2300      	movs	r3, #0
 800c86e:	4630      	mov	r0, r6
 800c870:	930b      	str	r3, [sp, #44]	; 0x2c
 800c872:	ab0b      	add	r3, sp, #44	; 0x2c
 800c874:	f7ff ff36 	bl	800c6e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c87a:	b37a      	cbz	r2, 800c8dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c87c:	4552      	cmp	r2, sl
 800c87e:	d02d      	beq.n	800c8dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c880:	4611      	mov	r1, r2
 800c882:	a80e      	add	r0, sp, #56	; 0x38
 800c884:	9209      	str	r2, [sp, #36]	; 0x24
 800c886:	f004 ff69 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c88a:	f04f 0e02 	mov.w	lr, #2
 800c88e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800c892:	9a06      	ldr	r2, [sp, #24]
 800c894:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800c898:	9b01      	ldr	r3, [sp, #4]
 800c89a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800c89e:	4413      	add	r3, r2
 800c8a0:	9a07      	ldr	r2, [sp, #28]
 800c8a2:	fb91 f1fe 	sdiv	r1, r1, lr
 800c8a6:	fb9c fcfe 	sdiv	ip, ip, lr
 800c8aa:	4401      	add	r1, r0
 800c8ac:	1a58      	subs	r0, r3, r1
 800c8ae:	9b02      	ldr	r3, [sp, #8]
 800c8b0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800c8b4:	4413      	add	r3, r2
 800c8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8b8:	448c      	add	ip, r1
 800c8ba:	eba3 030c 	sub.w	r3, r3, ip
 800c8be:	435b      	muls	r3, r3
 800c8c0:	fb00 3300 	mla	r3, r0, r0, r3
 800c8c4:	42ab      	cmp	r3, r5
 800c8c6:	d208      	bcs.n	800c8da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800c8c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8ca:	461d      	mov	r5, r3
 800c8cc:	9803      	ldr	r0, [sp, #12]
 800c8ce:	6001      	str	r1, [r0, #0]
 800c8d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c8d2:	9805      	ldr	r0, [sp, #20]
 800c8d4:	8008      	strh	r0, [r1, #0]
 800c8d6:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c8d8:	800f      	strh	r7, [r1, #0]
 800c8da:	4692      	mov	sl, r2
 800c8dc:	f10b 0b01 	add.w	fp, fp, #1
 800c8e0:	3408      	adds	r4, #8
 800c8e2:	f1bb 0f04 	cmp.w	fp, #4
 800c8e6:	d19d      	bne.n	800c824 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800c8e8:	9b00      	ldr	r3, [sp, #0]
 800c8ea:	9c08      	ldr	r4, [sp, #32]
 800c8ec:	444b      	add	r3, r9
 800c8ee:	4544      	cmp	r4, r8
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	d188      	bne.n	800c806 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800c8f4:	b021      	add	sp, #132	; 0x84
 800c8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fa:	f04f 35ff 	mov.w	r5, #4294967295
 800c8fe:	e767      	b.n	800c7d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800c900:	24006c64 	.word	0x24006c64
 800c904:	0801d3b8 	.word	0x0801d3b8

0800c908 <_ZN8touchgfx4RectaNERKS0_>:
 800c908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c90c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c910:	888c      	ldrh	r4, [r1, #4]
 800c912:	f9b0 9000 	ldrsh.w	r9, [r0]
 800c916:	443c      	add	r4, r7
 800c918:	b2a4      	uxth	r4, r4
 800c91a:	fa0f f884 	sxth.w	r8, r4
 800c91e:	45c1      	cmp	r9, r8
 800c920:	da2f      	bge.n	800c982 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c922:	8882      	ldrh	r2, [r0, #4]
 800c924:	444a      	add	r2, r9
 800c926:	b292      	uxth	r2, r2
 800c928:	fa0f fe82 	sxth.w	lr, r2
 800c92c:	4577      	cmp	r7, lr
 800c92e:	da28      	bge.n	800c982 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c930:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c934:	88cb      	ldrh	r3, [r1, #6]
 800c936:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800c93a:	442b      	add	r3, r5
 800c93c:	b21b      	sxth	r3, r3
 800c93e:	429e      	cmp	r6, r3
 800c940:	da1f      	bge.n	800c982 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c942:	88c3      	ldrh	r3, [r0, #6]
 800c944:	4433      	add	r3, r6
 800c946:	b29b      	uxth	r3, r3
 800c948:	fa0f fc83 	sxth.w	ip, r3
 800c94c:	4565      	cmp	r5, ip
 800c94e:	da18      	bge.n	800c982 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c950:	454f      	cmp	r7, r9
 800c952:	bfb8      	it	lt
 800c954:	464f      	movlt	r7, r9
 800c956:	42b5      	cmp	r5, r6
 800c958:	bfb8      	it	lt
 800c95a:	4635      	movlt	r5, r6
 800c95c:	45f0      	cmp	r8, lr
 800c95e:	bfd8      	it	le
 800c960:	4622      	movle	r2, r4
 800c962:	1bd2      	subs	r2, r2, r7
 800c964:	8082      	strh	r2, [r0, #4]
 800c966:	884a      	ldrh	r2, [r1, #2]
 800c968:	88c9      	ldrh	r1, [r1, #6]
 800c96a:	8007      	strh	r7, [r0, #0]
 800c96c:	440a      	add	r2, r1
 800c96e:	8045      	strh	r5, [r0, #2]
 800c970:	b292      	uxth	r2, r2
 800c972:	b211      	sxth	r1, r2
 800c974:	458c      	cmp	ip, r1
 800c976:	bfa8      	it	ge
 800c978:	4613      	movge	r3, r2
 800c97a:	1b5b      	subs	r3, r3, r5
 800c97c:	80c3      	strh	r3, [r0, #6]
 800c97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c982:	2300      	movs	r3, #0
 800c984:	8003      	strh	r3, [r0, #0]
 800c986:	8043      	strh	r3, [r0, #2]
 800c988:	8083      	strh	r3, [r0, #4]
 800c98a:	80c3      	strh	r3, [r0, #6]
 800c98c:	e7f7      	b.n	800c97e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800c98e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800c98e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	dd06      	ble.n	800c9a4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800c996:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c99a:	2800      	cmp	r0, #0
 800c99c:	bfcc      	ite	gt
 800c99e:	2000      	movgt	r0, #0
 800c9a0:	2001      	movle	r0, #1
 800c9a2:	4770      	bx	lr
 800c9a4:	2001      	movs	r0, #1
 800c9a6:	4770      	bx	lr

0800c9a8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800c9b2:	8003      	strh	r3, [r0, #0]
 800c9b4:	8043      	strh	r3, [r0, #2]
 800c9b6:	8083      	strh	r3, [r0, #4]
 800c9b8:	80c3      	strh	r3, [r0, #6]
 800c9ba:	2d00      	cmp	r5, #0
 800c9bc:	d040      	beq.n	800ca40 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800c9be:	1d28      	adds	r0, r5, #4
 800c9c0:	f7ff ffe5 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 800c9c4:	b988      	cbnz	r0, 800c9ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f7ff ffe1 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 800c9cc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800c9d0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800c9d4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800c9d8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800c9dc:	b138      	cbz	r0, 800c9ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800c9de:	8022      	strh	r2, [r4, #0]
 800c9e0:	8063      	strh	r3, [r4, #2]
 800c9e2:	f8a4 e004 	strh.w	lr, [r4, #4]
 800c9e6:	f8a4 c006 	strh.w	ip, [r4, #6]
 800c9ea:	69ad      	ldr	r5, [r5, #24]
 800c9ec:	e7e5      	b.n	800c9ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800c9ee:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c9f2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c9f6:	4290      	cmp	r0, r2
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800c9fe:	460e      	mov	r6, r1
 800ca00:	bfa8      	it	ge
 800ca02:	4617      	movge	r7, r2
 800ca04:	4299      	cmp	r1, r3
 800ca06:	4472      	add	r2, lr
 800ca08:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ca0c:	bfa8      	it	ge
 800ca0e:	461e      	movge	r6, r3
 800ca10:	4440      	add	r0, r8
 800ca12:	4471      	add	r1, lr
 800ca14:	4463      	add	r3, ip
 800ca16:	b200      	sxth	r0, r0
 800ca18:	8027      	strh	r7, [r4, #0]
 800ca1a:	b212      	sxth	r2, r2
 800ca1c:	8066      	strh	r6, [r4, #2]
 800ca1e:	b209      	sxth	r1, r1
 800ca20:	b21b      	sxth	r3, r3
 800ca22:	4290      	cmp	r0, r2
 800ca24:	bfac      	ite	ge
 800ca26:	ebc7 0200 	rsbge	r2, r7, r0
 800ca2a:	ebc7 0202 	rsblt	r2, r7, r2
 800ca2e:	4299      	cmp	r1, r3
 800ca30:	bfac      	ite	ge
 800ca32:	ebc6 0301 	rsbge	r3, r6, r1
 800ca36:	ebc6 0303 	rsblt	r3, r6, r3
 800ca3a:	80a2      	strh	r2, [r4, #4]
 800ca3c:	80e3      	strh	r3, [r4, #6]
 800ca3e:	e7d4      	b.n	800c9ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ca40:	4620      	mov	r0, r4
 800ca42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca46 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800ca46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ca4a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ca4e:	b383      	cbz	r3, 800cab2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ca50:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ca52:	b374      	cbz	r4, 800cab2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ca54:	f9b1 5000 	ldrsh.w	r5, [r1]
 800ca58:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800ca5c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800ca60:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800ca64:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ca68:	b303      	cbz	r3, 800caac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ca6a:	4668      	mov	r0, sp
 800ca6c:	1d21      	adds	r1, r4, #4
 800ca6e:	f8ad 5000 	strh.w	r5, [sp]
 800ca72:	f8ad 6002 	strh.w	r6, [sp, #2]
 800ca76:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ca7a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800ca7e:	f7ff ff43 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800ca82:	4668      	mov	r0, sp
 800ca84:	f7ff ff83 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca88:	b980      	cbnz	r0, 800caac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ca8a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ca8e:	4669      	mov	r1, sp
 800ca90:	88a2      	ldrh	r2, [r4, #4]
 800ca92:	4620      	mov	r0, r4
 800ca94:	1a9b      	subs	r3, r3, r2
 800ca96:	88e2      	ldrh	r2, [r4, #6]
 800ca98:	f8ad 3000 	strh.w	r3, [sp]
 800ca9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800caa0:	1a9b      	subs	r3, r3, r2
 800caa2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	4798      	blx	r3
 800caac:	69a4      	ldr	r4, [r4, #24]
 800caae:	2c00      	cmp	r4, #0
 800cab0:	d1d8      	bne.n	800ca64 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800cab2:	b002      	add	sp, #8
 800cab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cab8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800cab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800cabe:	460d      	mov	r5, r1
 800cac0:	4616      	mov	r6, r2
 800cac2:	b323      	cbz	r3, 800cb0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800cac4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cac6:	b314      	cbz	r4, 800cb0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800cac8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cacc:	b1eb      	cbz	r3, 800cb0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800cace:	6828      	ldr	r0, [r5, #0]
 800cad0:	466b      	mov	r3, sp
 800cad2:	6869      	ldr	r1, [r5, #4]
 800cad4:	c303      	stmia	r3!, {r0, r1}
 800cad6:	4668      	mov	r0, sp
 800cad8:	1d21      	adds	r1, r4, #4
 800cada:	f7ff ff15 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800cade:	4668      	mov	r0, sp
 800cae0:	f7ff ff55 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 800cae4:	b988      	cbnz	r0, 800cb0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800cae6:	f8bd 3000 	ldrh.w	r3, [sp]
 800caea:	4669      	mov	r1, sp
 800caec:	88a2      	ldrh	r2, [r4, #4]
 800caee:	4620      	mov	r0, r4
 800caf0:	1a9b      	subs	r3, r3, r2
 800caf2:	88e2      	ldrh	r2, [r4, #6]
 800caf4:	f8ad 3000 	strh.w	r3, [sp]
 800caf8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	4632      	mov	r2, r6
 800cb00:	f8ad 3002 	strh.w	r3, [sp, #2]
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb08:	4798      	blx	r3
 800cb0a:	69a4      	ldr	r4, [r4, #24]
 800cb0c:	e7db      	b.n	800cac6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800cb0e:	b002      	add	sp, #8
 800cb10:	bd70      	pop	{r4, r5, r6, pc}

0800cb12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800cb12:	6803      	ldr	r3, [r0, #0]
 800cb14:	b513      	push	{r0, r1, r4, lr}
 800cb16:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e9cd 3300 	strd	r3, r3, [sp]
 800cb20:	466b      	mov	r3, sp
 800cb22:	47a0      	blx	r4
 800cb24:	b002      	add	sp, #8
 800cb26:	bd10      	pop	{r4, pc}

0800cb28 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800cb28:	2301      	movs	r3, #1
 800cb2a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800cb2e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800cb32:	4770      	bx	lr

0800cb34 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800cb34:	2301      	movs	r3, #1
 800cb36:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800cb3a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800cb3e:	4770      	bx	lr

0800cb40 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800cb40:	6843      	ldr	r3, [r0, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	725a      	strb	r2, [r3, #9]
 800cb46:	6840      	ldr	r0, [r0, #4]
 800cb48:	6803      	ldr	r3, [r0, #0]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	4718      	bx	r3

0800cb4e <_ZN8touchgfx3HAL8flushDMAEv>:
 800cb4e:	6840      	ldr	r0, [r0, #4]
 800cb50:	6803      	ldr	r3, [r0, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	4718      	bx	r3

0800cb56 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800cb56:	b530      	push	{r4, r5, lr}
 800cb58:	b08b      	sub	sp, #44	; 0x2c
 800cb5a:	6804      	ldr	r4, [r0, #0]
 800cb5c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800cb60:	9509      	str	r5, [sp, #36]	; 0x24
 800cb62:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800cb66:	9508      	str	r5, [sp, #32]
 800cb68:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800cb6c:	9507      	str	r5, [sp, #28]
 800cb6e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800cb72:	9506      	str	r5, [sp, #24]
 800cb74:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800cb78:	9505      	str	r5, [sp, #20]
 800cb7a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800cb7e:	9504      	str	r5, [sp, #16]
 800cb80:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800cb84:	9503      	str	r5, [sp, #12]
 800cb86:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800cb8a:	9502      	str	r5, [sp, #8]
 800cb8c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800cb90:	e9cd 3500 	strd	r3, r5, [sp]
 800cb94:	4613      	mov	r3, r2
 800cb96:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800cb98:	2200      	movs	r2, #0
 800cb9a:	47a0      	blx	r4
 800cb9c:	b00b      	add	sp, #44	; 0x2c
 800cb9e:	bd30      	pop	{r4, r5, pc}

0800cba0 <_ZN8touchgfx3HAL10beginFrameEv>:
 800cba0:	4b04      	ldr	r3, [pc, #16]	; (800cbb4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	b123      	cbz	r3, 800cbb0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800cba6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800cbaa:	f080 0001 	eor.w	r0, r0, #1
 800cbae:	4770      	bx	lr
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	4770      	bx	lr
 800cbb4:	24006c62 	.word	0x24006c62

0800cbb8 <_ZN8touchgfx3HAL8endFrameEv>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	4604      	mov	r4, r0
 800cbbc:	6840      	ldr	r0, [r0, #4]
 800cbbe:	6803      	ldr	r3, [r0, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	4798      	blx	r3
 800cbc4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800cbc8:	b113      	cbz	r3, 800cbd0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800cbd0:	bd10      	pop	{r4, pc}

0800cbd2 <_ZN8touchgfx3HAL10initializeEv>:
 800cbd2:	b510      	push	{r4, lr}
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	f7f5 fad5 	bl	8002184 <_ZN8touchgfx10OSWrappers10initializeEv>
 800cbda:	6860      	ldr	r0, [r4, #4]
 800cbdc:	6803      	ldr	r3, [r0, #0]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	4798      	blx	r3
 800cbe2:	68e0      	ldr	r0, [r4, #12]
 800cbe4:	6803      	ldr	r3, [r0, #0]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	4798      	blx	r3
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	4620      	mov	r0, r4
 800cbee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbf4:	4718      	bx	r3
	...

0800cbf8 <_ZN8touchgfx3HAL4tickEv>:
 800cbf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cbfa:	6803      	ldr	r3, [r0, #0]
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	4d5c      	ldr	r5, [pc, #368]	; (800cd70 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800cc00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cc04:	4798      	blx	r3
 800cc06:	2800      	cmp	r0, #0
 800cc08:	f000 8097 	beq.w	800cd3a <_ZN8touchgfx3HAL4tickEv+0x142>
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	2600      	movs	r6, #0
 800cc10:	f7f5 f936 	bl	8001e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cc14:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800cc18:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800cc1c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800cc20:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800cc24:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800cc28:	b133      	cbz	r3, 800cc38 <_ZN8touchgfx3HAL4tickEv+0x40>
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cc32:	4798      	blx	r3
 800cc34:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800cc38:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800cc3c:	2601      	movs	r6, #1
 800cc3e:	6862      	ldr	r2, [r4, #4]
 800cc40:	f083 0301 	eor.w	r3, r3, #1
 800cc44:	702e      	strb	r6, [r5, #0]
 800cc46:	7253      	strb	r3, [r2, #9]
 800cc48:	f003 fd6e 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 800cc4c:	6803      	ldr	r3, [r0, #0]
 800cc4e:	4631      	mov	r1, r6
 800cc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc52:	4798      	blx	r3
 800cc54:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cc58:	b90b      	cbnz	r3, 800cc5e <_ZN8touchgfx3HAL4tickEv+0x66>
 800cc5a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800cc5e:	f003 fd63 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 800cc62:	6803      	ldr	r3, [r0, #0]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	4798      	blx	r3
 800cc68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc6a:	6803      	ldr	r3, [r0, #0]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	4798      	blx	r3
 800cc70:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cc74:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800cc80:	b10a      	cbz	r2, 800cc86 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1eb      	bne.n	800cc5e <_ZN8touchgfx3HAL4tickEv+0x66>
 800cc86:	4a3b      	ldr	r2, [pc, #236]	; (800cd74 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800cc88:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800cc8c:	7813      	ldrb	r3, [r2, #0]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	b25b      	sxtb	r3, r3
 800cc92:	4299      	cmp	r1, r3
 800cc94:	7013      	strb	r3, [r2, #0]
 800cc96:	dc10      	bgt.n	800ccba <_ZN8touchgfx3HAL4tickEv+0xc2>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	68e0      	ldr	r0, [r4, #12]
 800cc9c:	a902      	add	r1, sp, #8
 800cc9e:	7013      	strb	r3, [r2, #0]
 800cca0:	aa03      	add	r2, sp, #12
 800cca2:	6803      	ldr	r3, [r0, #0]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	4798      	blx	r3
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d051      	beq.n	800cd52 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800ccae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ccb8:	4798      	blx	r3
 800ccba:	2300      	movs	r3, #0
 800ccbc:	6960      	ldr	r0, [r4, #20]
 800ccbe:	f88d 3007 	strb.w	r3, [sp, #7]
 800ccc2:	b158      	cbz	r0, 800ccdc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800ccc4:	6803      	ldr	r3, [r0, #0]
 800ccc6:	f10d 0107 	add.w	r1, sp, #7
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	4798      	blx	r3
 800ccce:	b128      	cbz	r0, 800ccdc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800ccd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccd2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ccd6:	6803      	ldr	r3, [r0, #0]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	4798      	blx	r3
 800ccdc:	f104 001c 	add.w	r0, r4, #28
 800cce0:	f00f f8f6 	bl	801bed0 <_ZN8touchgfx8Gestures4tickEv>
 800cce4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800cce8:	b30b      	cbz	r3, 800cd2e <_ZN8touchgfx3HAL4tickEv+0x136>
 800ccea:	6920      	ldr	r0, [r4, #16]
 800ccec:	6803      	ldr	r3, [r0, #0]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	4798      	blx	r3
 800ccf2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	b903      	cbnz	r3, 800ccfa <_ZN8touchgfx3HAL4tickEv+0x102>
 800ccf8:	6720      	str	r0, [r4, #112]	; 0x70
 800ccfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ccfc:	4a1e      	ldr	r2, [pc, #120]	; (800cd78 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800ccfe:	1af3      	subs	r3, r6, r3
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d914      	bls.n	800cd2e <_ZN8touchgfx3HAL4tickEv+0x136>
 800cd04:	6920      	ldr	r0, [r4, #16]
 800cd06:	6803      	ldr	r3, [r0, #0]
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	4798      	blx	r3
 800cd0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd0e:	2264      	movs	r2, #100	; 0x64
 800cd10:	1af3      	subs	r3, r6, r3
 800cd12:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd16:	fbb0 f0f3 	udiv	r0, r0, r3
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	dc1e      	bgt.n	800cd5c <_ZN8touchgfx3HAL4tickEv+0x164>
 800cd1e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800cd22:	6920      	ldr	r0, [r4, #16]
 800cd24:	2100      	movs	r1, #0
 800cd26:	6803      	ldr	r3, [r0, #0]
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	4798      	blx	r3
 800cd2c:	6726      	str	r6, [r4, #112]	; 0x70
 800cd2e:	f003 fcfb 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 800cd32:	6803      	ldr	r3, [r0, #0]
 800cd34:	2100      	movs	r1, #0
 800cd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd38:	4798      	blx	r3
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cd42:	4798      	blx	r3
 800cd44:	2001      	movs	r0, #1
 800cd46:	f7f5 f8b3 	bl	8001eb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	702b      	strb	r3, [r5, #0]
 800cd4e:	b004      	add	sp, #16
 800cd50:	bd70      	pop	{r4, r5, r6, pc}
 800cd52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd56:	4620      	mov	r0, r4
 800cd58:	4798      	blx	r3
 800cd5a:	e7ae      	b.n	800ccba <_ZN8touchgfx3HAL4tickEv+0xc2>
 800cd5c:	2863      	cmp	r0, #99	; 0x63
 800cd5e:	bfcb      	itete	gt
 800cd60:	2300      	movgt	r3, #0
 800cd62:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800cd66:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800cd6a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800cd6e:	e7d8      	b.n	800cd22 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800cd70:	24006c68 	.word	0x24006c68
 800cd74:	24006c69 	.word	0x24006c69
 800cd78:	05f5e100 	.word	0x05f5e100

0800cd7c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800cd7c:	f7f5 ba32 	b.w	80021e4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800cd80 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800cd80:	6581      	str	r1, [r0, #88]	; 0x58
 800cd82:	301c      	adds	r0, #28
 800cd84:	f00f b8a2 	b.w	801becc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800cd88 <_ZN8touchgfx3HAL5touchEll>:
 800cd88:	b530      	push	{r4, r5, lr}
 800cd8a:	b087      	sub	sp, #28
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	a804      	add	r0, sp, #16
 800cd90:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800cd94:	f003 fa62 	bl	801025c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800cd98:	9b04      	ldr	r3, [sp, #16]
 800cd9a:	a906      	add	r1, sp, #24
 800cd9c:	a803      	add	r0, sp, #12
 800cd9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cda2:	9b05      	ldr	r3, [sp, #20]
 800cda4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800cda8:	f003 faaa 	bl	8010300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800cdac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800cdb0:	f104 001c 	add.w	r0, r4, #28
 800cdb4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800cdb8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800cdbc:	b189      	cbz	r1, 800cde2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800cdbe:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800cdca:	462a      	mov	r2, r5
 800cdcc:	f00f f88e 	bl	801beec <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800cdd0:	b128      	cbz	r0, 800cdde <_ZN8touchgfx3HAL5touchEll+0x56>
 800cdd2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800cdd6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800cdd8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800cddc:	6623      	str	r3, [r4, #96]	; 0x60
 800cdde:	b007      	add	sp, #28
 800cde0:	bd30      	pop	{r4, r5, pc}
 800cde2:	f00f f8c7 	bl	801bf74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800cde6:	2301      	movs	r3, #1
 800cde8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800cdec:	e7f1      	b.n	800cdd2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800cdee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800cdee:	b510      	push	{r4, lr}
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d046      	beq.n	800ce82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800cdf4:	ea81 0002 	eor.w	r0, r1, r2
 800cdf8:	07c4      	lsls	r4, r0, #31
 800cdfa:	d508      	bpl.n	800ce0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3a01      	subs	r2, #1
 800ce00:	428b      	cmp	r3, r1
 800ce02:	d93e      	bls.n	800ce82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ce04:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ce08:	f801 0b01 	strb.w	r0, [r1], #1
 800ce0c:	e7f8      	b.n	800ce00 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800ce0e:	07d0      	lsls	r0, r2, #31
 800ce10:	bf42      	ittt	mi
 800ce12:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800ce16:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800ce1a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d911      	bls.n	800ce46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ce22:	ea81 0402 	eor.w	r4, r1, r2
 800ce26:	4610      	mov	r0, r2
 800ce28:	07a4      	lsls	r4, r4, #30
 800ce2a:	d022      	beq.n	800ce72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800ce2c:	f023 0401 	bic.w	r4, r3, #1
 800ce30:	440c      	add	r4, r1
 800ce32:	428c      	cmp	r4, r1
 800ce34:	4602      	mov	r2, r0
 800ce36:	d904      	bls.n	800ce42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800ce38:	8812      	ldrh	r2, [r2, #0]
 800ce3a:	3002      	adds	r0, #2
 800ce3c:	f821 2b02 	strh.w	r2, [r1], #2
 800ce40:	e7f7      	b.n	800ce32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	f023 0003 	bic.w	r0, r3, #3
 800ce4a:	4408      	add	r0, r1
 800ce4c:	4288      	cmp	r0, r1
 800ce4e:	4614      	mov	r4, r2
 800ce50:	d904      	bls.n	800ce5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800ce52:	6824      	ldr	r4, [r4, #0]
 800ce54:	3204      	adds	r2, #4
 800ce56:	f841 4b04 	str.w	r4, [r1], #4
 800ce5a:	e7f7      	b.n	800ce4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800ce5c:	f003 0303 	and.w	r3, r3, #3
 800ce60:	3a01      	subs	r2, #1
 800ce62:	440b      	add	r3, r1
 800ce64:	428b      	cmp	r3, r1
 800ce66:	d90c      	bls.n	800ce82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ce68:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ce6c:	f801 0b01 	strb.w	r0, [r1], #1
 800ce70:	e7f8      	b.n	800ce64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800ce72:	0790      	lsls	r0, r2, #30
 800ce74:	d0e7      	beq.n	800ce46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ce76:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ce7a:	3b02      	subs	r3, #2
 800ce7c:	f821 0b02 	strh.w	r0, [r1], #2
 800ce80:	e7e1      	b.n	800ce46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ce82:	2001      	movs	r0, #1
 800ce84:	bd10      	pop	{r4, pc}

0800ce86 <_ZN8touchgfx3HAL7noTouchEv>:
 800ce86:	b510      	push	{r4, lr}
 800ce88:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	b153      	cbz	r3, 800cea6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800ce90:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800ce94:	2101      	movs	r1, #1
 800ce96:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800ce9a:	301c      	adds	r0, #28
 800ce9c:	f00f f86a 	bl	801bf74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800cea0:	2300      	movs	r3, #0
 800cea2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800cea6:	bd10      	pop	{r4, pc}

0800cea8 <_ZN8touchgfx3HAL3lcdEv>:
 800cea8:	4b04      	ldr	r3, [pc, #16]	; (800cebc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ceb0:	b10a      	cbz	r2, 800ceb6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800ceb2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ceb4:	b900      	cbnz	r0, 800ceb8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800ceb6:	6898      	ldr	r0, [r3, #8]
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	24006c64 	.word	0x24006c64

0800cec0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800cec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cec4:	4604      	mov	r4, r0
 800cec6:	6980      	ldr	r0, [r0, #24]
 800cec8:	b085      	sub	sp, #20
 800ceca:	460f      	mov	r7, r1
 800cecc:	4690      	mov	r8, r2
 800cece:	4699      	mov	r9, r3
 800ced0:	b930      	cbnz	r0, 800cee0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800ced2:	4b1c      	ldr	r3, [pc, #112]	; (800cf44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800ced4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800ced8:	4a1b      	ldr	r2, [pc, #108]	; (800cf48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800ceda:	481c      	ldr	r0, [pc, #112]	; (800cf4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800cedc:	f00f f9e6 	bl	801c2ac <__assert_func>
 800cee0:	ad04      	add	r5, sp, #16
 800cee2:	2600      	movs	r6, #0
 800cee4:	f845 6d04 	str.w	r6, [r5, #-4]!
 800cee8:	6806      	ldr	r6, [r0, #0]
 800ceea:	9501      	str	r5, [sp, #4]
 800ceec:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800cef0:	9500      	str	r5, [sp, #0]
 800cef2:	6835      	ldr	r5, [r6, #0]
 800cef4:	47a8      	blx	r5
 800cef6:	4d16      	ldr	r5, [pc, #88]	; (800cf50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800cef8:	4606      	mov	r6, r0
 800cefa:	f8a5 9000 	strh.w	r9, [r5]
 800cefe:	f7ff ffd3 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800cf02:	6803      	ldr	r3, [r0, #0]
 800cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf06:	4798      	blx	r3
 800cf08:	2801      	cmp	r0, #1
 800cf0a:	d012      	beq.n	800cf32 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800cf0c:	d306      	bcc.n	800cf1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800cf0e:	280d      	cmp	r0, #13
 800cf10:	d80b      	bhi.n	800cf2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cf12:	4b10      	ldr	r3, [pc, #64]	; (800cf54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800cf14:	f240 1167 	movw	r1, #359	; 0x167
 800cf18:	4a0b      	ldr	r2, [pc, #44]	; (800cf48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800cf1a:	e7de      	b.n	800ceda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800cf1c:	882b      	ldrh	r3, [r5, #0]
 800cf1e:	fb08 7203 	mla	r2, r8, r3, r7
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800cf28:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	b005      	add	sp, #20
 800cf2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf32:	882a      	ldrh	r2, [r5, #0]
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	fb08 7202 	mla	r2, r8, r2, r7
 800cf3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cf3e:	1a9a      	subs	r2, r3, r2
 800cf40:	63e2      	str	r2, [r4, #60]	; 0x3c
 800cf42:	e7f2      	b.n	800cf2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cf44:	0801eb1c 	.word	0x0801eb1c
 800cf48:	0801edda 	.word	0x0801edda
 800cf4c:	0801eb61 	.word	0x0801eb61
 800cf50:	24006c5e 	.word	0x24006c5e
 800cf54:	0801eb87 	.word	0x0801eb87

0800cf58 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5a:	b08b      	sub	sp, #44	; 0x2c
 800cf5c:	4617      	mov	r7, r2
 800cf5e:	4604      	mov	r4, r0
 800cf60:	460e      	mov	r6, r1
 800cf62:	461d      	mov	r5, r3
 800cf64:	f7ff ffa0 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800cf68:	6803      	ldr	r3, [r0, #0]
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	4798      	blx	r3
 800cf6e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800cf72:	9007      	str	r0, [sp, #28]
 800cf74:	4631      	mov	r1, r6
 800cf76:	6822      	ldr	r2, [r4, #0]
 800cf78:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800cf7c:	4b0c      	ldr	r3, [pc, #48]	; (800cfb0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800cf7e:	4620      	mov	r0, r4
 800cf80:	881b      	ldrh	r3, [r3, #0]
 800cf82:	9306      	str	r3, [sp, #24]
 800cf84:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800cf88:	9305      	str	r3, [sp, #20]
 800cf8a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800cf8e:	9304      	str	r3, [sp, #16]
 800cf90:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cf94:	9303      	str	r3, [sp, #12]
 800cf96:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800cfa0:	e9cd 5300 	strd	r5, r3, [sp]
 800cfa4:	463b      	mov	r3, r7
 800cfa6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	47a8      	blx	r5
 800cfac:	b00b      	add	sp, #44	; 0x2c
 800cfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb0:	24006c5e 	.word	0x24006c5e

0800cfb4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800cfb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfb8:	4698      	mov	r8, r3
 800cfba:	6803      	ldr	r3, [r0, #0]
 800cfbc:	b08b      	sub	sp, #44	; 0x2c
 800cfbe:	4617      	mov	r7, r2
 800cfc0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800cfc2:	460e      	mov	r6, r1
 800cfc4:	4b13      	ldr	r3, [pc, #76]	; (800d014 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	f8b3 9000 	ldrh.w	r9, [r3]
 800cfcc:	f7ff ff6c 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800cfd0:	6803      	ldr	r3, [r0, #0]
 800cfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd4:	4798      	blx	r3
 800cfd6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800cfda:	2200      	movs	r2, #0
 800cfdc:	4631      	mov	r1, r6
 800cfde:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800cfe2:	2302      	movs	r3, #2
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800cfea:	2301      	movs	r3, #1
 800cfec:	9305      	str	r3, [sp, #20]
 800cfee:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800cff2:	9304      	str	r3, [sp, #16]
 800cff4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800cff8:	9303      	str	r3, [sp, #12]
 800cffa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cffe:	9302      	str	r3, [sp, #8]
 800d000:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d004:	e9cd 8300 	strd	r8, r3, [sp]
 800d008:	463b      	mov	r3, r7
 800d00a:	47a8      	blx	r5
 800d00c:	b00b      	add	sp, #44	; 0x2c
 800d00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d012:	bf00      	nop
 800d014:	24006c5e 	.word	0x24006c5e

0800d018 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d01c:	4698      	mov	r8, r3
 800d01e:	6803      	ldr	r3, [r0, #0]
 800d020:	b087      	sub	sp, #28
 800d022:	460e      	mov	r6, r1
 800d024:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800d026:	4617      	mov	r7, r2
 800d028:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d02a:	4604      	mov	r4, r0
 800d02c:	f8b3 9000 	ldrh.w	r9, [r3]
 800d030:	f7ff ff3a 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800d034:	6803      	ldr	r3, [r0, #0]
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	4798      	blx	r3
 800d03a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800d03e:	463a      	mov	r2, r7
 800d040:	4631      	mov	r1, r6
 800d042:	f8cd 900c 	str.w	r9, [sp, #12]
 800d046:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d04a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800d04e:	4620      	mov	r0, r4
 800d050:	9302      	str	r3, [sp, #8]
 800d052:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d056:	9301      	str	r3, [sp, #4]
 800d058:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800d05c:	9300      	str	r3, [sp, #0]
 800d05e:	4643      	mov	r3, r8
 800d060:	47a8      	blx	r5
 800d062:	b007      	add	sp, #28
 800d064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d068:	24006c5e 	.word	0x24006c5e

0800d06c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d070:	4604      	mov	r4, r0
 800d072:	b08f      	sub	sp, #60	; 0x3c
 800d074:	4610      	mov	r0, r2
 800d076:	460d      	mov	r5, r1
 800d078:	4691      	mov	r9, r2
 800d07a:	461e      	mov	r6, r3
 800d07c:	f006 fc4a 	bl	8013914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d080:	2800      	cmp	r0, #0
 800d082:	f000 809c 	beq.w	800d1be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800d086:	6823      	ldr	r3, [r4, #0]
 800d088:	4620      	mov	r0, r4
 800d08a:	f8df b194 	ldr.w	fp, [pc, #404]	; 800d220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800d08e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d094:	4798      	blx	r3
 800d096:	6823      	ldr	r3, [r4, #0]
 800d098:	4620      	mov	r0, r4
 800d09a:	f8df a188 	ldr.w	sl, [pc, #392]	; 800d224 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800d09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a0:	4798      	blx	r3
 800d0a2:	f8bb 3000 	ldrh.w	r3, [fp]
 800d0a6:	4f5b      	ldr	r7, [pc, #364]	; (800d214 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	f8ba 3000 	ldrh.w	r3, [sl]
 800d0ae:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800d0b2:	4640      	mov	r0, r8
 800d0b4:	9302      	str	r3, [sp, #8]
 800d0b6:	883b      	ldrh	r3, [r7, #0]
 800d0b8:	9303      	str	r3, [sp, #12]
 800d0ba:	4b57      	ldr	r3, [pc, #348]	; (800d218 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d0bc:	881a      	ldrh	r2, [r3, #0]
 800d0be:	9305      	str	r3, [sp, #20]
 800d0c0:	9204      	str	r2, [sp, #16]
 800d0c2:	f006 fce1 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d0c6:	8038      	strh	r0, [r7, #0]
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f006 fd17 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d0ce:	9b05      	ldr	r3, [sp, #20]
 800d0d0:	8018      	strh	r0, [r3, #0]
 800d0d2:	4b52      	ldr	r3, [pc, #328]	; (800d21c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d174      	bne.n	800d1c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800d0da:	883b      	ldrh	r3, [r7, #0]
 800d0dc:	f8aa 0000 	strh.w	r0, [sl]
 800d0e0:	f8ab 3000 	strh.w	r3, [fp]
 800d0e4:	4648      	mov	r0, r9
 800d0e6:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800d0ea:	f006 fc13 	bl	8013914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800d0fc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d100:	f7f6 f86c 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 800d104:	2301      	movs	r3, #1
 800d106:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800d10a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d10e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	dd5c      	ble.n	800d1d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d116:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	dd58      	ble.n	800d1d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d11e:	462a      	mov	r2, r5
 800d120:	ab0a      	add	r3, sp, #40	; 0x28
 800d122:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d126:	6851      	ldr	r1, [r2, #4]
 800d128:	c303      	stmia	r3!, {r0, r1}
 800d12a:	4631      	mov	r1, r6
 800d12c:	a80a      	add	r0, sp, #40	; 0x28
 800d12e:	f7ff fbeb 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800d132:	4b38      	ldr	r3, [pc, #224]	; (800d214 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d134:	2100      	movs	r1, #0
 800d136:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d13a:	4b37      	ldr	r3, [pc, #220]	; (800d218 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d13c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d140:	aa0a      	add	r2, sp, #40	; 0x28
 800d142:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d146:	910c      	str	r1, [sp, #48]	; 0x30
 800d148:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d14c:	ab08      	add	r3, sp, #32
 800d14e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d152:	e883 0003 	stmia.w	r3, {r0, r1}
 800d156:	4618      	mov	r0, r3
 800d158:	a90c      	add	r1, sp, #48	; 0x30
 800d15a:	f7ff fbd5 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800d15e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d160:	2b00      	cmp	r3, #0
 800d162:	d13c      	bne.n	800d1de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800d164:	2000      	movs	r0, #0
 800d166:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800d16a:	2600      	movs	r6, #0
 800d16c:	696b      	ldr	r3, [r5, #20]
 800d16e:	a908      	add	r1, sp, #32
 800d170:	682a      	ldr	r2, [r5, #0]
 800d172:	4628      	mov	r0, r5
 800d174:	9305      	str	r3, [sp, #20]
 800d176:	616e      	str	r6, [r5, #20]
 800d178:	6892      	ldr	r2, [r2, #8]
 800d17a:	4790      	blx	r2
 800d17c:	9b05      	ldr	r3, [sp, #20]
 800d17e:	4652      	mov	r2, sl
 800d180:	4649      	mov	r1, r9
 800d182:	616b      	str	r3, [r5, #20]
 800d184:	4628      	mov	r0, r5
 800d186:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800d18a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800d18e:	f7f6 f825 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 800d192:	9a01      	ldr	r2, [sp, #4]
 800d194:	4b22      	ldr	r3, [pc, #136]	; (800d220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800d196:	4620      	mov	r0, r4
 800d198:	801a      	strh	r2, [r3, #0]
 800d19a:	9a02      	ldr	r2, [sp, #8]
 800d19c:	4b21      	ldr	r3, [pc, #132]	; (800d224 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800d19e:	801a      	strh	r2, [r3, #0]
 800d1a0:	9a03      	ldr	r2, [sp, #12]
 800d1a2:	4b1c      	ldr	r3, [pc, #112]	; (800d214 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d1a4:	801a      	strh	r2, [r3, #0]
 800d1a6:	4b1c      	ldr	r3, [pc, #112]	; (800d218 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d1a8:	9a04      	ldr	r2, [sp, #16]
 800d1aa:	801a      	strh	r2, [r3, #0]
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800d1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b4:	4798      	blx	r3
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1bc:	4798      	blx	r3
 800d1be:	b00f      	add	sp, #60	; 0x3c
 800d1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c4:	883b      	ldrh	r3, [r7, #0]
 800d1c6:	f8ab 0000 	strh.w	r0, [fp]
 800d1ca:	f8aa 3000 	strh.w	r3, [sl]
 800d1ce:	e789      	b.n	800d0e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800d1d0:	462a      	mov	r2, r5
 800d1d2:	ab0a      	add	r3, sp, #40	; 0x28
 800d1d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d1d8:	6851      	ldr	r1, [r2, #4]
 800d1da:	c303      	stmia	r3!, {r0, r1}
 800d1dc:	e7a9      	b.n	800d132 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800d1de:	a807      	add	r0, sp, #28
 800d1e0:	f006 fde4 	bl	8013dac <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d1e8:	6803      	ldr	r3, [r0, #0]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	4798      	blx	r3
 800d1ee:	4286      	cmp	r6, r0
 800d1f0:	d1b8      	bne.n	800d164 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800d1f2:	f7ff fe59 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800d1f6:	6803      	ldr	r3, [r0, #0]
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	a807      	add	r0, sp, #28
 800d1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fe:	9305      	str	r3, [sp, #20]
 800d200:	f006 fdd4 	bl	8013dac <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d204:	9b05      	ldr	r3, [sp, #20]
 800d206:	4601      	mov	r1, r0
 800d208:	4630      	mov	r0, r6
 800d20a:	4798      	blx	r3
 800d20c:	f080 0001 	eor.w	r0, r0, #1
 800d210:	b2c0      	uxtb	r0, r0
 800d212:	e7a8      	b.n	800d166 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800d214:	24006c58 	.word	0x24006c58
 800d218:	24006c5a 	.word	0x24006c5a
 800d21c:	24006c5c 	.word	0x24006c5c
 800d220:	24006c5e 	.word	0x24006c5e
 800d224:	24006c60 	.word	0x24006c60

0800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800d228:	4b07      	ldr	r3, [pc, #28]	; (800d248 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800d22a:	b510      	push	{r4, lr}
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	4604      	mov	r4, r0
 800d230:	b13b      	cbz	r3, 800d242 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d232:	6803      	ldr	r3, [r0, #0]
 800d234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d236:	4798      	blx	r3
 800d238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d23a:	4283      	cmp	r3, r0
 800d23c:	d101      	bne.n	800d242 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d23e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d240:	bd10      	pop	{r4, pc}
 800d242:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d244:	e7fc      	b.n	800d240 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800d246:	bf00      	nop
 800d248:	24006c62 	.word	0x24006c62

0800d24c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800d24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d250:	b088      	sub	sp, #32
 800d252:	4692      	mov	sl, r2
 800d254:	461d      	mov	r5, r3
 800d256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d25a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800d25e:	2400      	movs	r4, #0
 800d260:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800d264:	4606      	mov	r6, r0
 800d266:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800d26a:	fb09 a505 	mla	r5, r9, r5, sl
 800d26e:	9403      	str	r4, [sp, #12]
 800d270:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d274:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d278:	f88d 401c 	strb.w	r4, [sp, #28]
 800d27c:	e9cd 3100 	strd	r3, r1, [sp]
 800d280:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d284:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d288:	f7ff ffce 	bl	800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d28c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d290:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d294:	f88d 401e 	strb.w	r4, [sp, #30]
 800d298:	9504      	str	r5, [sp, #16]
 800d29a:	f88d 401d 	strb.w	r4, [sp, #29]
 800d29e:	f88d 401f 	strb.w	r4, [sp, #31]
 800d2a2:	f1b8 0f00 	cmp.w	r8, #0
 800d2a6:	d000      	beq.n	800d2aa <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800d2a8:	b937      	cbnz	r7, 800d2b8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800d2aa:	4b0d      	ldr	r3, [pc, #52]	; (800d2e0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800d2ac:	f240 210b 	movw	r1, #523	; 0x20b
 800d2b0:	4a0c      	ldr	r2, [pc, #48]	; (800d2e4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d2b2:	480d      	ldr	r0, [pc, #52]	; (800d2e8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800d2b4:	f00e fffa 	bl	801c2ac <__assert_func>
 800d2b8:	6833      	ldr	r3, [r6, #0]
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	9c00      	ldr	r4, [sp, #0]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c0:	4798      	blx	r3
 800d2c2:	4220      	tst	r0, r4
 800d2c4:	d104      	bne.n	800d2d0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800d2c6:	4b09      	ldr	r3, [pc, #36]	; (800d2ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800d2c8:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800d2cc:	4a05      	ldr	r2, [pc, #20]	; (800d2e4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d2ce:	e7f0      	b.n	800d2b2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800d2d0:	6870      	ldr	r0, [r6, #4]
 800d2d2:	4669      	mov	r1, sp
 800d2d4:	6803      	ldr	r3, [r0, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	4798      	blx	r3
 800d2da:	b008      	add	sp, #32
 800d2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e0:	0801e9af 	.word	0x0801e9af
 800d2e4:	0801ec0f 	.word	0x0801ec0f
 800d2e8:	0801eb61 	.word	0x0801eb61
 800d2ec:	0801e9e7 	.word	0x0801e9e7

0800d2f0 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800d2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f4:	b089      	sub	sp, #36	; 0x24
 800d2f6:	4693      	mov	fp, r2
 800d2f8:	461d      	mov	r5, r3
 800d2fa:	2400      	movs	r4, #0
 800d2fc:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800d300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d304:	468a      	mov	sl, r1
 800d306:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800d30a:	fb09 b505 	mla	r5, r9, r5, fp
 800d30e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d312:	4606      	mov	r6, r0
 800d314:	9403      	str	r4, [sp, #12]
 800d316:	e9cd 3400 	strd	r3, r4, [sp]
 800d31a:	f7ff ff85 	bl	800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d31e:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d322:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d326:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d32a:	f8ad 4018 	strh.w	r4, [sp, #24]
 800d32e:	9504      	str	r5, [sp, #16]
 800d330:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d334:	f8cd a00c 	str.w	sl, [sp, #12]
 800d338:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d33c:	f88d 401e 	strb.w	r4, [sp, #30]
 800d340:	f88d 401f 	strb.w	r4, [sp, #31]
 800d344:	f1b8 0f00 	cmp.w	r8, #0
 800d348:	d000      	beq.n	800d34c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800d34a:	b937      	cbnz	r7, 800d35a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800d34c:	4b0d      	ldr	r3, [pc, #52]	; (800d384 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800d34e:	f240 2121 	movw	r1, #545	; 0x221
 800d352:	4a0d      	ldr	r2, [pc, #52]	; (800d388 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d354:	480d      	ldr	r0, [pc, #52]	; (800d38c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800d356:	f00e ffa9 	bl	801c2ac <__assert_func>
 800d35a:	6833      	ldr	r3, [r6, #0]
 800d35c:	4630      	mov	r0, r6
 800d35e:	9c00      	ldr	r4, [sp, #0]
 800d360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d362:	4798      	blx	r3
 800d364:	4220      	tst	r0, r4
 800d366:	d104      	bne.n	800d372 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800d368:	4b09      	ldr	r3, [pc, #36]	; (800d390 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800d36a:	f240 2122 	movw	r1, #546	; 0x222
 800d36e:	4a06      	ldr	r2, [pc, #24]	; (800d388 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d370:	e7f0      	b.n	800d354 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800d372:	6870      	ldr	r0, [r6, #4]
 800d374:	4669      	mov	r1, sp
 800d376:	6803      	ldr	r3, [r0, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	4798      	blx	r3
 800d37c:	b009      	add	sp, #36	; 0x24
 800d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d382:	bf00      	nop
 800d384:	0801ea2c 	.word	0x0801ea2c
 800d388:	0801ec85 	.word	0x0801ec85
 800d38c:	0801eb61 	.word	0x0801eb61
 800d390:	0801ea64 	.word	0x0801ea64

0800d394 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800d394:	b508      	push	{r3, lr}
 800d396:	290d      	cmp	r1, #13
 800d398:	d817      	bhi.n	800d3ca <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800d39a:	e8df f001 	tbb	[pc, r1]
 800d39e:	090b      	.short	0x090b
 800d3a0:	0d0d0d07 	.word	0x0d0d0d07
 800d3a4:	1414140d 	.word	0x1414140d
 800d3a8:	0d0d1414 	.word	0x0d0d1414
 800d3ac:	2020      	movs	r0, #32
 800d3ae:	bd08      	pop	{r3, pc}
 800d3b0:	2018      	movs	r0, #24
 800d3b2:	e7fc      	b.n	800d3ae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3b4:	2010      	movs	r0, #16
 800d3b6:	e7fa      	b.n	800d3ae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800d3ba:	f240 2182 	movw	r1, #642	; 0x282
 800d3be:	4a05      	ldr	r2, [pc, #20]	; (800d3d4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800d3c0:	4805      	ldr	r0, [pc, #20]	; (800d3d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800d3c2:	f00e ff73 	bl	801c2ac <__assert_func>
 800d3c6:	2008      	movs	r0, #8
 800d3c8:	e7f1      	b.n	800d3ae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	e7ef      	b.n	800d3ae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3ce:	bf00      	nop
 800d3d0:	0801ebdd 	.word	0x0801ebdd
 800d3d4:	0801efb0 	.word	0x0801efb0
 800d3d8:	0801eb61 	.word	0x0801eb61

0800d3dc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	460d      	mov	r5, r1
 800d3e0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800d3e4:	4616      	mov	r6, r2
 800d3e6:	461c      	mov	r4, r3
 800d3e8:	f7ff ffd4 	bl	800d394 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800d3ec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d3f0:	10c0      	asrs	r0, r0, #3
 800d3f2:	fb06 5101 	mla	r1, r6, r1, r5
 800d3f6:	fb00 4001 	mla	r0, r0, r1, r4
 800d3fa:	bd70      	pop	{r4, r5, r6, pc}

0800d3fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800d3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d400:	b08a      	sub	sp, #40	; 0x28
 800d402:	f04f 0c00 	mov.w	ip, #0
 800d406:	4604      	mov	r4, r0
 800d408:	469a      	mov	sl, r3
 800d40a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800d40e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d412:	2d0b      	cmp	r5, #11
 800d414:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800d418:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d41c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800d420:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800d424:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800d428:	f8cd c014 	str.w	ip, [sp, #20]
 800d42c:	d12d      	bne.n	800d48a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800d42e:	2080      	movs	r0, #128	; 0x80
 800d430:	9204      	str	r2, [sp, #16]
 800d432:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800d436:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d43a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d43e:	f8ad 701c 	strh.w	r7, [sp, #28]
 800d442:	f8ad 601e 	strh.w	r6, [sp, #30]
 800d446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7ff feec 	bl	800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d450:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800d454:	4603      	mov	r3, r0
 800d456:	4651      	mov	r1, sl
 800d458:	4620      	mov	r0, r4
 800d45a:	e9cd 9800 	strd	r9, r8, [sp]
 800d45e:	f7ff ffbd 	bl	800d3dc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d462:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800d466:	9006      	str	r0, [sp, #24]
 800d468:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800d46c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d470:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800d474:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d478:	b107      	cbz	r7, 800d47c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800d47a:	b9d6      	cbnz	r6, 800d4b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800d47c:	4b17      	ldr	r3, [pc, #92]	; (800d4dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800d47e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d482:	4a17      	ldr	r2, [pc, #92]	; (800d4e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d484:	4817      	ldr	r0, [pc, #92]	; (800d4e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800d486:	f00e ff11 	bl	801c2ac <__assert_func>
 800d48a:	2d02      	cmp	r5, #2
 800d48c:	d108      	bne.n	800d4a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800d48e:	2bff      	cmp	r3, #255	; 0xff
 800d490:	d104      	bne.n	800d49c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800d492:	2800      	cmp	r0, #0
 800d494:	bf14      	ite	ne
 800d496:	2040      	movne	r0, #64	; 0x40
 800d498:	2020      	moveq	r0, #32
 800d49a:	e7c9      	b.n	800d430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d49c:	2040      	movs	r0, #64	; 0x40
 800d49e:	e7c7      	b.n	800d430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d4a0:	2bff      	cmp	r3, #255	; 0xff
 800d4a2:	d104      	bne.n	800d4ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	bf14      	ite	ne
 800d4a8:	2004      	movne	r0, #4
 800d4aa:	2001      	moveq	r0, #1
 800d4ac:	e7c0      	b.n	800d430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d4ae:	2004      	movs	r0, #4
 800d4b0:	e7be      	b.n	800d430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	9d02      	ldr	r5, [sp, #8]
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ba:	4798      	blx	r3
 800d4bc:	4228      	tst	r0, r5
 800d4be:	d104      	bne.n	800d4ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800d4c0:	4b09      	ldr	r3, [pc, #36]	; (800d4e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800d4c2:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d4c6:	4a06      	ldr	r2, [pc, #24]	; (800d4e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d4c8:	e7dc      	b.n	800d484 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800d4ca:	6860      	ldr	r0, [r4, #4]
 800d4cc:	a902      	add	r1, sp, #8
 800d4ce:	6803      	ldr	r3, [r0, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	4798      	blx	r3
 800d4d4:	b00a      	add	sp, #40	; 0x28
 800d4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4da:	bf00      	nop
 800d4dc:	0801e9af 	.word	0x0801e9af
 800d4e0:	0801ee3e 	.word	0x0801ee3e
 800d4e4:	0801eb61 	.word	0x0801eb61
 800d4e8:	0801e9e7 	.word	0x0801e9e7

0800d4ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	b08b      	sub	sp, #44	; 0x2c
 800d4f2:	469b      	mov	fp, r3
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	4692      	mov	sl, r2
 800d4f8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800d4fc:	2600      	movs	r6, #0
 800d4fe:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800d502:	4689      	mov	r9, r1
 800d504:	2fff      	cmp	r7, #255	; 0xff
 800d506:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800d50a:	9605      	str	r6, [sp, #20]
 800d50c:	bf14      	ite	ne
 800d50e:	2308      	movne	r3, #8
 800d510:	2302      	moveq	r3, #2
 800d512:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800d516:	f7ff fe87 	bl	800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d51a:	465a      	mov	r2, fp
 800d51c:	4603      	mov	r3, r0
 800d51e:	4651      	mov	r1, sl
 800d520:	4620      	mov	r0, r4
 800d522:	e9cd 8500 	strd	r8, r5, [sp]
 800d526:	f7ff ff59 	bl	800d3dc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d52a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d52e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d532:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d536:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d53a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800d53e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d542:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d546:	9d02      	ldr	r5, [sp, #8]
 800d548:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d54c:	6823      	ldr	r3, [r4, #0]
 800d54e:	9006      	str	r0, [sp, #24]
 800d550:	4620      	mov	r0, r4
 800d552:	f8ad 6020 	strh.w	r6, [sp, #32]
 800d556:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800d55a:	f8cd 9014 	str.w	r9, [sp, #20]
 800d55e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800d562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d564:	4798      	blx	r3
 800d566:	4228      	tst	r0, r5
 800d568:	d106      	bne.n	800d578 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800d56a:	4b07      	ldr	r3, [pc, #28]	; (800d588 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800d56c:	f240 2137 	movw	r1, #567	; 0x237
 800d570:	4a06      	ldr	r2, [pc, #24]	; (800d58c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800d572:	4807      	ldr	r0, [pc, #28]	; (800d590 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800d574:	f00e fe9a 	bl	801c2ac <__assert_func>
 800d578:	6860      	ldr	r0, [r4, #4]
 800d57a:	a902      	add	r1, sp, #8
 800d57c:	6803      	ldr	r3, [r0, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	4798      	blx	r3
 800d582:	b00b      	add	sp, #44	; 0x2c
 800d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d588:	0801e9e7 	.word	0x0801e9e7
 800d58c:	0801ef15 	.word	0x0801ef15
 800d590:	0801eb61 	.word	0x0801eb61

0800d594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d598:	461f      	mov	r7, r3
 800d59a:	4b0b      	ldr	r3, [pc, #44]	; (800d5c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d59c:	460d      	mov	r5, r1
 800d59e:	4616      	mov	r6, r2
 800d5a0:	f8b3 8000 	ldrh.w	r8, [r3]
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	f7ff fc7f 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800d5aa:	6803      	ldr	r3, [r0, #0]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	4798      	blx	r3
 800d5b0:	463b      	mov	r3, r7
 800d5b2:	4632      	mov	r2, r6
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	e9cd 8000 	strd	r8, r0, [sp]
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff ff0e 	bl	800d3dc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d5c0:	b002      	add	sp, #8
 800d5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c6:	bf00      	nop
 800d5c8:	24006c5e 	.word	0x24006c5e

0800d5cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800d5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d0:	4698      	mov	r8, r3
 800d5d2:	b088      	sub	sp, #32
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4617      	mov	r7, r2
 800d5d8:	4604      	mov	r4, r0
 800d5da:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800d5de:	9303      	str	r3, [sp, #12]
 800d5e0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d5e4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d5e8:	f8ad 6014 	strh.w	r6, [sp, #20]
 800d5ec:	f8ad 5016 	strh.w	r5, [sp, #22]
 800d5f0:	e9cd 3100 	strd	r3, r1, [sp]
 800d5f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d5f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d5fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d600:	f88d 301c 	strb.w	r3, [sp, #28]
 800d604:	f7ff fe10 	bl	800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d608:	4642      	mov	r2, r8
 800d60a:	4603      	mov	r3, r0
 800d60c:	4639      	mov	r1, r7
 800d60e:	4620      	mov	r0, r4
 800d610:	f7ff ffc0 	bl	800d594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d614:	4b18      	ldr	r3, [pc, #96]	; (800d678 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800d616:	9004      	str	r0, [sp, #16]
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d61e:	f7ff fc43 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800d622:	6803      	ldr	r3, [r0, #0]
 800d624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d626:	4798      	blx	r3
 800d628:	f88d 001e 	strb.w	r0, [sp, #30]
 800d62c:	f88d 001d 	strb.w	r0, [sp, #29]
 800d630:	b106      	cbz	r6, 800d634 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800d632:	b935      	cbnz	r5, 800d642 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800d634:	4b11      	ldr	r3, [pc, #68]	; (800d67c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800d636:	f240 11f1 	movw	r1, #497	; 0x1f1
 800d63a:	4a11      	ldr	r2, [pc, #68]	; (800d680 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d63c:	4811      	ldr	r0, [pc, #68]	; (800d684 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800d63e:	f00e fe35 	bl	801c2ac <__assert_func>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	4620      	mov	r0, r4
 800d646:	9d00      	ldr	r5, [sp, #0]
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	4798      	blx	r3
 800d64c:	4228      	tst	r0, r5
 800d64e:	d104      	bne.n	800d65a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800d650:	4b0d      	ldr	r3, [pc, #52]	; (800d688 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800d652:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800d656:	4a0a      	ldr	r2, [pc, #40]	; (800d680 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d658:	e7f0      	b.n	800d63c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800d65a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d65c:	4669      	mov	r1, sp
 800d65e:	6860      	ldr	r0, [r4, #4]
 800d660:	9303      	str	r3, [sp, #12]
 800d662:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d666:	f88d 301f 	strb.w	r3, [sp, #31]
 800d66a:	6803      	ldr	r3, [r0, #0]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	4798      	blx	r3
 800d670:	b008      	add	sp, #32
 800d672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d676:	bf00      	nop
 800d678:	24006c5e 	.word	0x24006c5e
 800d67c:	0801e9af 	.word	0x0801e9af
 800d680:	0801ecea 	.word	0x0801ecea
 800d684:	0801eb61 	.word	0x0801eb61
 800d688:	0801e9e7 	.word	0x0801e9e7

0800d68c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d68e:	b08b      	sub	sp, #44	; 0x2c
 800d690:	4604      	mov	r4, r0
 800d692:	466b      	mov	r3, sp
 800d694:	e883 0006 	stmia.w	r3, {r1, r2}
 800d698:	4b20      	ldr	r3, [pc, #128]	; (800d71c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	b933      	cbnz	r3, 800d6ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800d69e:	4b20      	ldr	r3, [pc, #128]	; (800d720 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800d6a0:	f44f 7112 	mov.w	r1, #584	; 0x248
 800d6a4:	4a1f      	ldr	r2, [pc, #124]	; (800d724 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800d6a6:	4820      	ldr	r0, [pc, #128]	; (800d728 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800d6a8:	f00e fe00 	bl	801c2ac <__assert_func>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	2500      	movs	r5, #0
 800d6b0:	f8bd 6000 	ldrh.w	r6, [sp]
 800d6b4:	9302      	str	r3, [sp, #8]
 800d6b6:	6803      	ldr	r3, [r0, #0]
 800d6b8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800d6bc:	9505      	str	r5, [sp, #20]
 800d6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c0:	4798      	blx	r3
 800d6c2:	463a      	mov	r2, r7
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f7ff ff63 	bl	800d594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d6ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6d0:	9003      	str	r0, [sp, #12]
 800d6d2:	9306      	str	r3, [sp, #24]
 800d6d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d6d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d6dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d6e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d6e4:	4b11      	ldr	r3, [pc, #68]	; (800d72c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d6ec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d6f0:	f7ff fbda 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800d6f4:	6803      	ldr	r3, [r0, #0]
 800d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f8:	4798      	blx	r3
 800d6fa:	23ff      	movs	r3, #255	; 0xff
 800d6fc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d700:	a902      	add	r1, sp, #8
 800d702:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d706:	6860      	ldr	r0, [r4, #4]
 800d708:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d70c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800d710:	6803      	ldr	r3, [r0, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	4798      	blx	r3
 800d716:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d718:	b00b      	add	sp, #44	; 0x2c
 800d71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71c:	24006c63 	.word	0x24006c63
 800d720:	0801eaae 	.word	0x0801eaae
 800d724:	0801ed94 	.word	0x0801ed94
 800d728:	0801eb61 	.word	0x0801eb61
 800d72c:	24006c5e 	.word	0x24006c5e

0800d730 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d734:	b08a      	sub	sp, #40	; 0x28
 800d736:	2600      	movs	r6, #0
 800d738:	4604      	mov	r4, r0
 800d73a:	466d      	mov	r5, sp
 800d73c:	9605      	str	r6, [sp, #20]
 800d73e:	e885 0006 	stmia.w	r5, {r1, r2}
 800d742:	461d      	mov	r5, r3
 800d744:	2301      	movs	r3, #1
 800d746:	f8bd 7000 	ldrh.w	r7, [sp]
 800d74a:	9302      	str	r3, [sp, #8]
 800d74c:	6803      	ldr	r3, [r0, #0]
 800d74e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800d752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d754:	4798      	blx	r3
 800d756:	4642      	mov	r2, r8
 800d758:	4639      	mov	r1, r7
 800d75a:	4603      	mov	r3, r0
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7ff ff19 	bl	800d594 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d762:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d766:	9003      	str	r0, [sp, #12]
 800d768:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d76c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d770:	9506      	str	r5, [sp, #24]
 800d772:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d776:	4b0f      	ldr	r3, [pc, #60]	; (800d7b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d77e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d780:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d784:	f7ff fb90 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800d788:	6803      	ldr	r3, [r0, #0]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78c:	4798      	blx	r3
 800d78e:	23ff      	movs	r3, #255	; 0xff
 800d790:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d794:	a902      	add	r1, sp, #8
 800d796:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d79a:	6860      	ldr	r0, [r4, #4]
 800d79c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d7a0:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800d7a4:	6803      	ldr	r3, [r0, #0]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	4798      	blx	r3
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	b00a      	add	sp, #40	; 0x28
 800d7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b2:	bf00      	nop
 800d7b4:	24006c5e 	.word	0x24006c5e

0800d7b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800d7be:	4604      	mov	r4, r0
 800d7c0:	b19b      	cbz	r3, 800d7ea <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800d7c2:	2002      	movs	r0, #2
 800d7c4:	f7f4 fb8c 	bl	8001ee0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d7d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800d7da:	f7ff fd25 	bl	800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d7de:	4601      	mov	r1, r0
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	462b      	mov	r3, r5
 800d7e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7e8:	4718      	bx	r3
 800d7ea:	bd70      	pop	{r4, r5, r6, pc}

0800d7ec <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	2003      	movs	r0, #3
 800d7f4:	b149      	cbz	r1, 800d80a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800d7f6:	f7f4 fb43 	bl	8001e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d7fa:	6928      	ldr	r0, [r5, #16]
 800d7fc:	b168      	cbz	r0, 800d81a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d7fe:	6803      	ldr	r3, [r0, #0]
 800d800:	2101      	movs	r1, #1
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d808:	4718      	bx	r3
 800d80a:	f7f4 fb51 	bl	8001eb0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d80e:	6928      	ldr	r0, [r5, #16]
 800d810:	b118      	cbz	r0, 800d81a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d812:	6803      	ldr	r3, [r0, #0]
 800d814:	4621      	mov	r1, r4
 800d816:	695b      	ldr	r3, [r3, #20]
 800d818:	e7f4      	b.n	800d804 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800d81a:	bd70      	pop	{r4, r5, r6, pc}

0800d81c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800d822:	4604      	mov	r4, r0
 800d824:	460d      	mov	r5, r1
 800d826:	428a      	cmp	r2, r1
 800d828:	d008      	beq.n	800d83c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800d82a:	2a01      	cmp	r2, #1
 800d82c:	6803      	ldr	r3, [r0, #0]
 800d82e:	d106      	bne.n	800d83e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800d830:	b929      	cbnz	r1, 800d83e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800d832:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d836:	4798      	blx	r3
 800d838:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800d83c:	bd38      	pop	{r3, r4, r5, pc}
 800d83e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d842:	4620      	mov	r0, r4
 800d844:	e7f7      	b.n	800d836 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800d848 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800d848:	4b0d      	ldr	r3, [pc, #52]	; (800d880 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800d84a:	b510      	push	{r4, lr}
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	4604      	mov	r4, r0
 800d850:	b95b      	cbnz	r3, 800d86a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d852:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d856:	2b02      	cmp	r3, #2
 800d858:	d007      	beq.n	800d86a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d85a:	6840      	ldr	r0, [r0, #4]
 800d85c:	f000 f93a 	bl	800dad4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800d860:	b118      	cbz	r0, 800d86a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d862:	6862      	ldr	r2, [r4, #4]
 800d864:	7a53      	ldrb	r3, [r2, #9]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0fc      	beq.n	800d864 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800d86a:	f7f4 fcb3 	bl	80021d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d86e:	4620      	mov	r0, r4
 800d870:	2100      	movs	r1, #0
 800d872:	f7ff ffd3 	bl	800d81c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d876:	4620      	mov	r0, r4
 800d878:	f7ff fcd6 	bl	800d228 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d87c:	bd10      	pop	{r4, pc}
 800d87e:	bf00      	nop
 800d880:	24006c62 	.word	0x24006c62

0800d884 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800d884:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800d888:	1a13      	subs	r3, r2, r0
 800d88a:	4258      	negs	r0, r3
 800d88c:	4158      	adcs	r0, r3
 800d88e:	4770      	bx	lr

0800d890 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d890:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d894:	1a9b      	subs	r3, r3, r2
 800d896:	2b00      	cmp	r3, #0
 800d898:	bfdc      	itt	le
 800d89a:	6882      	ldrle	r2, [r0, #8]
 800d89c:	189b      	addle	r3, r3, r2
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	bfcc      	ite	gt
 800d8a2:	2000      	movgt	r0, #0
 800d8a4:	2001      	movle	r0, #1
 800d8a6:	4770      	bx	lr

0800d8a8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d8a8:	6902      	ldr	r2, [r0, #16]
 800d8aa:	6840      	ldr	r0, [r0, #4]
 800d8ac:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800d8b0:	4770      	bx	lr

0800d8b2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d8b2:	6803      	ldr	r3, [r0, #0]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	4718      	bx	r3

0800d8b8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d8b8:	4770      	bx	lr

0800d8ba <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d8ba:	4770      	bx	lr

0800d8bc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800d8bc:	4770      	bx	lr
	...

0800d8c0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	b570      	push	{r4, r5, r6, lr}
 800d8c4:	7203      	strb	r3, [r0, #8]
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	6840      	ldr	r0, [r0, #4]
 800d8ca:	6803      	ldr	r3, [r0, #0]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	4798      	blx	r3
 800d8d0:	6803      	ldr	r3, [r0, #0]
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	2b40      	cmp	r3, #64	; 0x40
 800d8d6:	d039      	beq.n	800d94c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d8d8:	d815      	bhi.n	800d906 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	d022      	beq.n	800d924 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d8de:	d808      	bhi.n	800d8f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d033      	beq.n	800d94c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d108      	bne.n	800d8fa <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ee:	4798      	blx	r3
 800d8f0:	e025      	b.n	800d93e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800d8f2:	2b08      	cmp	r3, #8
 800d8f4:	d01e      	beq.n	800d934 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800d8f6:	2b20      	cmp	r3, #32
 800d8f8:	d028      	beq.n	800d94c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d8fa:	4b17      	ldr	r3, [pc, #92]	; (800d958 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800d8fc:	218b      	movs	r1, #139	; 0x8b
 800d8fe:	4a17      	ldr	r2, [pc, #92]	; (800d95c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800d900:	4817      	ldr	r0, [pc, #92]	; (800d960 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800d902:	f00e fcd3 	bl	801c2ac <__assert_func>
 800d906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d90a:	d01f      	beq.n	800d94c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d90c:	d804      	bhi.n	800d918 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800d90e:	2b80      	cmp	r3, #128	; 0x80
 800d910:	d01c      	beq.n	800d94c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d916:	e7ef      	b.n	800d8f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800d918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d91c:	d016      	beq.n	800d94c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d91e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d922:	e7e0      	b.n	800d8e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	7f01      	ldrb	r1, [r0, #28]
 800d928:	4620      	mov	r0, r4
 800d92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92c:	4798      	blx	r3
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d932:	e006      	b.n	800d942 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	7f01      	ldrb	r1, [r0, #28]
 800d938:	4620      	mov	r0, r4
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	4798      	blx	r3
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d942:	4629      	mov	r1, r5
 800d944:	4620      	mov	r0, r4
 800d946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d94a:	4718      	bx	r3
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	4620      	mov	r0, r4
 800d950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d952:	4798      	blx	r3
 800d954:	e7eb      	b.n	800d92e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800d956:	bf00      	nop
 800d958:	0801eff9 	.word	0x0801eff9
 800d95c:	0801f0b8 	.word	0x0801f0b8
 800d960:	0801f01e 	.word	0x0801f01e

0800d964 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	4604      	mov	r4, r0
 800d968:	460e      	mov	r6, r1
 800d96a:	6860      	ldr	r0, [r4, #4]
 800d96c:	6803      	ldr	r3, [r0, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4798      	blx	r3
 800d972:	2800      	cmp	r0, #0
 800d974:	d1f9      	bne.n	800d96a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800d976:	4d0d      	ldr	r5, [pc, #52]	; (800d9ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800d978:	6828      	ldr	r0, [r5, #0]
 800d97a:	6803      	ldr	r3, [r0, #0]
 800d97c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d97e:	4798      	blx	r3
 800d980:	f7f4 fc36 	bl	80021f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800d984:	6828      	ldr	r0, [r5, #0]
 800d986:	2101      	movs	r1, #1
 800d988:	f7ff ff48 	bl	800d81c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d98c:	6860      	ldr	r0, [r4, #4]
 800d98e:	4631      	mov	r1, r6
 800d990:	6803      	ldr	r3, [r0, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	4798      	blx	r3
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	4620      	mov	r0, r4
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99c:	4798      	blx	r3
 800d99e:	6828      	ldr	r0, [r5, #0]
 800d9a0:	6803      	ldr	r3, [r0, #0]
 800d9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9a8:	4718      	bx	r3
 800d9aa:	bf00      	nop
 800d9ac:	24006c64 	.word	0x24006c64

0800d9b0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800d9b0:	b508      	push	{r3, lr}
 800d9b2:	f7f4 fc0f 	bl	80021d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d9b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d9ba:	f7f4 bc13 	b.w	80021e4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d9be <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800d9be:	b510      	push	{r4, lr}
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	2114      	movs	r1, #20
 800d9c4:	f00e fb5c 	bl	801c080 <_ZdlPvj>
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	bd10      	pop	{r4, pc}

0800d9cc <_ZN8touchgfx13DMA_Interface5startEv>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	6840      	ldr	r0, [r0, #4]
 800d9d2:	6803      	ldr	r3, [r0, #0]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4798      	blx	r3
 800d9d8:	b948      	cbnz	r0, 800d9ee <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d9da:	7a63      	ldrb	r3, [r4, #9]
 800d9dc:	b13b      	cbz	r3, 800d9ee <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d9de:	7a23      	ldrb	r3, [r4, #8]
 800d9e0:	b92b      	cbnz	r3, 800d9ee <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9ec:	4718      	bx	r3
 800d9ee:	bd10      	pop	{r4, pc}

0800d9f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	1a9b      	subs	r3, r3, r2
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	bfdc      	itt	le
 800d9fe:	6880      	ldrle	r0, [r0, #8]
 800da00:	181b      	addle	r3, r3, r0
 800da02:	2b01      	cmp	r3, #1
 800da04:	dd13      	ble.n	800da2e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800da06:	6874      	ldr	r4, [r6, #4]
 800da08:	460d      	mov	r5, r1
 800da0a:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800da0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800da16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da1a:	68f3      	ldr	r3, [r6, #12]
 800da1c:	68b2      	ldr	r2, [r6, #8]
 800da1e:	f3bf 8f5b 	dmb	ish
 800da22:	3301      	adds	r3, #1
 800da24:	429a      	cmp	r2, r3
 800da26:	bfd8      	it	le
 800da28:	1a9b      	suble	r3, r3, r2
 800da2a:	60f3      	str	r3, [r6, #12]
 800da2c:	bd70      	pop	{r4, r5, r6, pc}
 800da2e:	4b03      	ldr	r3, [pc, #12]	; (800da3c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800da30:	2139      	movs	r1, #57	; 0x39
 800da32:	4a03      	ldr	r2, [pc, #12]	; (800da40 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800da34:	4803      	ldr	r0, [pc, #12]	; (800da44 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800da36:	f00e fc39 	bl	801c2ac <__assert_func>
 800da3a:	bf00      	nop
 800da3c:	0801f044 	.word	0x0801f044
 800da40:	0801f0e8 	.word	0x0801f0e8
 800da44:	0801f01e 	.word	0x0801f01e

0800da48 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	6803      	ldr	r3, [r0, #0]
 800da4c:	4604      	mov	r4, r0
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4798      	blx	r3
 800da52:	b128      	cbz	r0, 800da60 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800da54:	4b07      	ldr	r3, [pc, #28]	; (800da74 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800da56:	213f      	movs	r1, #63	; 0x3f
 800da58:	4a07      	ldr	r2, [pc, #28]	; (800da78 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800da5a:	4808      	ldr	r0, [pc, #32]	; (800da7c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800da5c:	f00e fc26 	bl	801c2ac <__assert_func>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	68a2      	ldr	r2, [r4, #8]
 800da64:	f3bf 8f5b 	dmb	ish
 800da68:	3301      	adds	r3, #1
 800da6a:	429a      	cmp	r2, r3
 800da6c:	bfd8      	it	le
 800da6e:	1a9b      	suble	r3, r3, r2
 800da70:	6123      	str	r3, [r4, #16]
 800da72:	bd10      	pop	{r4, pc}
 800da74:	0801f067 	.word	0x0801f067
 800da78:	0801f136 	.word	0x0801f136
 800da7c:	0801f01e 	.word	0x0801f01e

0800da80 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	4604      	mov	r4, r0
 800da84:	6840      	ldr	r0, [r0, #4]
 800da86:	6803      	ldr	r3, [r0, #0]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4798      	blx	r3
 800da8c:	4605      	mov	r5, r0
 800da8e:	b930      	cbnz	r0, 800da9e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800da90:	7a23      	ldrb	r3, [r4, #8]
 800da92:	b123      	cbz	r3, 800da9e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800da94:	6860      	ldr	r0, [r4, #4]
 800da96:	6803      	ldr	r3, [r0, #0]
 800da98:	695b      	ldr	r3, [r3, #20]
 800da9a:	4798      	blx	r3
 800da9c:	7225      	strb	r5, [r4, #8]
 800da9e:	6860      	ldr	r0, [r4, #4]
 800daa0:	6803      	ldr	r3, [r0, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4798      	blx	r3
 800daa6:	b928      	cbnz	r0, 800dab4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	4620      	mov	r0, r4
 800daac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dab2:	4718      	bx	r3
 800dab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dab8:	f7f4 bba2 	b.w	8002200 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800dabc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800dabc:	b510      	push	{r4, lr}
 800dabe:	6082      	str	r2, [r0, #8]
 800dac0:	2200      	movs	r2, #0
 800dac2:	4c03      	ldr	r4, [pc, #12]	; (800dad0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800dac4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800dac8:	e9c0 4100 	strd	r4, r1, [r0]
 800dacc:	bd10      	pop	{r4, pc}
 800dace:	bf00      	nop
 800dad0:	0801f09c 	.word	0x0801f09c

0800dad4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800dad4:	6840      	ldr	r0, [r0, #4]
 800dad6:	6803      	ldr	r3, [r0, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4718      	bx	r3

0800dadc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800dadc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800dae0:	4770      	bx	lr

0800dae2 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800dae2:	4770      	bx	lr

0800dae4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800dae4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800dae8:	b133      	cbz	r3, 800daf8 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800daea:	790b      	ldrb	r3, [r1, #4]
 800daec:	2b01      	cmp	r3, #1
 800daee:	bf01      	itttt	eq
 800daf0:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800daf2:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800daf4:	8603      	strheq	r3, [r0, #48]	; 0x30
 800daf6:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800daf8:	f00e ba9e 	b.w	801c038 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800dafc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800dafc:	8813      	ldrh	r3, [r2, #0]
 800dafe:	8683      	strh	r3, [r0, #52]	; 0x34
 800db00:	f000 bcb2 	b.w	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800db04 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800db04:	b510      	push	{r4, lr}
 800db06:	4604      	mov	r4, r0
 800db08:	2138      	movs	r1, #56	; 0x38
 800db0a:	f00e fab9 	bl	801c080 <_ZdlPvj>
 800db0e:	4620      	mov	r0, r4
 800db10:	bd10      	pop	{r4, pc}

0800db12 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800db12:	b510      	push	{r4, lr}
 800db14:	4604      	mov	r4, r0
 800db16:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800db18:	b150      	cbz	r0, 800db30 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800db1a:	6803      	ldr	r3, [r0, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	4798      	blx	r3
 800db20:	b130      	cbz	r0, 800db30 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800db22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800db24:	4621      	mov	r1, r4
 800db26:	6803      	ldr	r3, [r0, #0]
 800db28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	4718      	bx	r3
 800db30:	bd10      	pop	{r4, pc}
	...

0800db34 <_ZNK8touchgfx6Bitmap5getIdEv>:
 800db34:	b508      	push	{r3, lr}
 800db36:	4b05      	ldr	r3, [pc, #20]	; (800db4c <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	b92b      	cbnz	r3, 800db48 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 800db3c:	4b04      	ldr	r3, [pc, #16]	; (800db50 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 800db3e:	2187      	movs	r1, #135	; 0x87
 800db40:	4a04      	ldr	r2, [pc, #16]	; (800db54 <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 800db42:	4805      	ldr	r0, [pc, #20]	; (800db58 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 800db44:	f00e fbb2 	bl	801c2ac <__assert_func>
 800db48:	8800      	ldrh	r0, [r0, #0]
 800db4a:	bd08      	pop	{r3, pc}
 800db4c:	24006cec 	.word	0x24006cec
 800db50:	0801f166 	.word	0x0801f166
 800db54:	0801f238 	.word	0x0801f238
 800db58:	0801f1a2 	.word	0x0801f1a2

0800db5c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	4604      	mov	r4, r0
 800db60:	f100 0534 	add.w	r5, r0, #52	; 0x34
 800db64:	b169      	cbz	r1, 800db82 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 800db66:	302e      	adds	r0, #46	; 0x2e
 800db68:	f7ff ffe4 	bl	800db34 <_ZNK8touchgfx6Bitmap5getIdEv>
 800db6c:	4606      	mov	r6, r0
 800db6e:	4628      	mov	r0, r5
 800db70:	f7ff ffe0 	bl	800db34 <_ZNK8touchgfx6Bitmap5getIdEv>
 800db74:	4286      	cmp	r6, r0
 800db76:	d003      	beq.n	800db80 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 800db78:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800db7a:	8623      	strh	r3, [r4, #48]	; 0x30
 800db7c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800db7e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800db80:	bd70      	pop	{r4, r5, r6, pc}
 800db82:	3030      	adds	r0, #48	; 0x30
 800db84:	f7ff ffd6 	bl	800db34 <_ZNK8touchgfx6Bitmap5getIdEv>
 800db88:	4606      	mov	r6, r0
 800db8a:	4628      	mov	r0, r5
 800db8c:	f7ff ffd2 	bl	800db34 <_ZNK8touchgfx6Bitmap5getIdEv>
 800db90:	4286      	cmp	r6, r0
 800db92:	bf1f      	itttt	ne
 800db94:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 800db96:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 800db98:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 800db9a:	8623      	strhne	r3, [r4, #48]	; 0x30
 800db9c:	e7f0      	b.n	800db80 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0800db9e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 800db9e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800dba2:	4770      	bx	lr

0800dba4 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 800dba4:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800dba8:	4770      	bx	lr

0800dbaa <_ZN8touchgfx13ScalableImageD1Ev>:
 800dbaa:	4770      	bx	lr

0800dbac <_ZN8touchgfx13ScalableImageD0Ev>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	4604      	mov	r4, r0
 800dbb0:	212c      	movs	r1, #44	; 0x2c
 800dbb2:	f00e fa65 	bl	801c080 <_ZdlPvj>
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	bd10      	pop	{r4, pc}

0800dbba <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 800dbba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dbbc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	2bff      	cmp	r3, #255	; 0xff
 800dbc4:	d007      	beq.n	800dbd6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	802b      	strh	r3, [r5, #0]
 800dbca:	806b      	strh	r3, [r5, #2]
 800dbcc:	80ab      	strh	r3, [r5, #4]
 800dbce:	80eb      	strh	r3, [r5, #6]
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	b004      	add	sp, #16
 800dbd4:	bd70      	pop	{r4, r5, r6, pc}
 800dbd6:	f101 0426 	add.w	r4, r1, #38	; 0x26
 800dbda:	4668      	mov	r0, sp
 800dbdc:	4621      	mov	r1, r4
 800dbde:	f005 ffc7 	bl	8013b70 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dbe2:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f005 ff4e 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800dbec:	4286      	cmp	r6, r0
 800dbee:	d1ea      	bne.n	800dbc6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	a802      	add	r0, sp, #8
 800dbf4:	f005 ffbc 	bl	8013b70 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dbf8:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f005 ff7d 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800dc02:	4286      	cmp	r6, r0
 800dc04:	d1df      	bne.n	800dbc6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800dc06:	4621      	mov	r1, r4
 800dc08:	4628      	mov	r0, r5
 800dc0a:	f005 ffb1 	bl	8013b70 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dc0e:	e7df      	b.n	800dbd0 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>

0800dc10 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	2300      	movs	r3, #0
 800dc14:	2501      	movs	r5, #1
 800dc16:	4604      	mov	r4, r0
 800dc18:	8083      	strh	r3, [r0, #4]
 800dc1a:	80c3      	strh	r3, [r0, #6]
 800dc1c:	8103      	strh	r3, [r0, #8]
 800dc1e:	8143      	strh	r3, [r0, #10]
 800dc20:	8183      	strh	r3, [r0, #12]
 800dc22:	81c3      	strh	r3, [r0, #14]
 800dc24:	8203      	strh	r3, [r0, #16]
 800dc26:	8243      	strh	r3, [r0, #18]
 800dc28:	61c3      	str	r3, [r0, #28]
 800dc2a:	8403      	strh	r3, [r0, #32]
 800dc2c:	8443      	strh	r3, [r0, #34]	; 0x22
 800dc2e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800dc32:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 800dc36:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800dc3a:	4b07      	ldr	r3, [pc, #28]	; (800dc58 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 800dc3c:	6003      	str	r3, [r0, #0]
 800dc3e:	880b      	ldrh	r3, [r1, #0]
 800dc40:	84c3      	strh	r3, [r0, #38]	; 0x26
 800dc42:	23ff      	movs	r3, #255	; 0xff
 800dc44:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800dc48:	f000 ff35 	bl	800eab6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800dc4c:	4b03      	ldr	r3, [pc, #12]	; (800dc5c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 800dc4e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800dc52:	4620      	mov	r0, r4
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	0801f5d8 	.word	0x0801f5d8
 800dc5c:	0801f274 	.word	0x0801f274

0800dc60 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 800dc60:	4603      	mov	r3, r0
 800dc62:	3026      	adds	r0, #38	; 0x26
 800dc64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dc68:	b90b      	cbnz	r3, 800dc6e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 800dc6a:	f003 be15 	b.w	8011898 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800dc6e:	f003 be23 	b.w	80118b8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0800dc74 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 800dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc78:	4604      	mov	r4, r0
 800dc7a:	469b      	mov	fp, r3
 800dc7c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800dc80:	b0b3      	sub	sp, #204	; 0xcc
 800dc82:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800dc86:	f9b1 6000 	ldrsh.w	r6, [r1]
 800dc8a:	8888      	ldrh	r0, [r1, #4]
 800dc8c:	9206      	str	r2, [sp, #24]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4430      	add	r0, r6
 800dc92:	9211      	str	r2, [sp, #68]	; 0x44
 800dc94:	b280      	uxth	r0, r0
 800dc96:	fa0f fe80 	sxth.w	lr, r0
 800dc9a:	4596      	cmp	lr, r2
 800dc9c:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 800dca0:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 800dca4:	f340 811a 	ble.w	800dedc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dca8:	45b4      	cmp	ip, r6
 800dcaa:	f340 8117 	ble.w	800dedc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dcae:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dcb2:	88ca      	ldrh	r2, [r1, #6]
 800dcb4:	442a      	add	r2, r5
 800dcb6:	b292      	uxth	r2, r2
 800dcb8:	b211      	sxth	r1, r2
 800dcba:	2900      	cmp	r1, #0
 800dcbc:	f340 810e 	ble.w	800dedc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dcc0:	42ab      	cmp	r3, r5
 800dcc2:	f340 810b 	ble.w	800dedc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dcc6:	45f4      	cmp	ip, lr
 800dcc8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800dccc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800dcd0:	bfb8      	it	lt
 800dcd2:	fa1f f08c 	uxthlt.w	r0, ip
 800dcd6:	428b      	cmp	r3, r1
 800dcd8:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 800dcdc:	bfb8      	it	lt
 800dcde:	b29a      	uxthlt	r2, r3
 800dce0:	1b80      	subs	r0, r0, r6
 800dce2:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 800dce6:	1b52      	subs	r2, r2, r5
 800dce8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800dcec:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800dcf0:	ab11      	add	r3, sp, #68	; 0x44
 800dcf2:	ad13      	add	r5, sp, #76	; 0x4c
 800dcf4:	6822      	ldr	r2, [r4, #0]
 800dcf6:	1d26      	adds	r6, r4, #4
 800dcf8:	9307      	str	r3, [sp, #28]
 800dcfa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dcfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd00:	e885 0003 	stmia.w	r5, {r0, r1}
 800dd04:	4629      	mov	r1, r5
 800dd06:	4620      	mov	r0, r4
 800dd08:	4790      	blx	r2
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	a815      	add	r0, sp, #84	; 0x54
 800dd0e:	f003 fd25 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dd12:	a815      	add	r0, sp, #84	; 0x54
 800dd14:	f002 fb22 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dd18:	9b07      	ldr	r3, [sp, #28]
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f002 fb61 	bl	80103e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800dd22:	4628      	mov	r0, r5
 800dd24:	f104 0526 	add.w	r5, r4, #38	; 0x26
 800dd28:	f002 fb18 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	f005 ffb3 	bl	8013c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 800dd32:	9007      	str	r0, [sp, #28]
 800dd34:	2800      	cmp	r0, #0
 800dd36:	f000 80ce 	beq.w	800ded6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 800dd3a:	f8db 2000 	ldr.w	r2, [fp]
 800dd3e:	a90d      	add	r1, sp, #52	; 0x34
 800dd40:	a809      	add	r0, sp, #36	; 0x24
 800dd42:	9209      	str	r2, [sp, #36]	; 0x24
 800dd44:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dd48:	920a      	str	r2, [sp, #40]	; 0x28
 800dd4a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800dd4e:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd50:	f8db 200c 	ldr.w	r2, [fp, #12]
 800dd54:	920c      	str	r2, [sp, #48]	; 0x30
 800dd56:	f8da 2000 	ldr.w	r2, [sl]
 800dd5a:	920d      	str	r2, [sp, #52]	; 0x34
 800dd5c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800dd60:	920e      	str	r2, [sp, #56]	; 0x38
 800dd62:	f8da 2008 	ldr.w	r2, [sl, #8]
 800dd66:	920f      	str	r2, [sp, #60]	; 0x3c
 800dd68:	f8da 200c 	ldr.w	r2, [sl, #12]
 800dd6c:	9210      	str	r2, [sp, #64]	; 0x40
 800dd6e:	4632      	mov	r2, r6
 800dd70:	f002 fb1c 	bl	80103ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800dd74:	4632      	mov	r2, r6
 800dd76:	a90e      	add	r1, sp, #56	; 0x38
 800dd78:	a80a      	add	r0, sp, #40	; 0x28
 800dd7a:	f002 fb17 	bl	80103ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800dd7e:	4632      	mov	r2, r6
 800dd80:	a90f      	add	r1, sp, #60	; 0x3c
 800dd82:	a80b      	add	r0, sp, #44	; 0x2c
 800dd84:	f002 fb12 	bl	80103ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800dd88:	4632      	mov	r2, r6
 800dd8a:	a910      	add	r1, sp, #64	; 0x40
 800dd8c:	a80c      	add	r0, sp, #48	; 0x30
 800dd8e:	f002 fb0d 	bl	80103ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800dd92:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800dd96:	edd7 3a00 	vldr	s7, [r7]
 800dd9a:	eef0 6a67 	vmov.f32	s13, s15
 800dd9e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800dda2:	ed97 5a01 	vldr	s10, [r7, #4]
 800dda6:	eeb0 7a67 	vmov.f32	s14, s15
 800ddaa:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ddae:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 800ddb2:	edd9 2a00 	vldr	s5, [r9]
 800ddb6:	eeb0 6a67 	vmov.f32	s12, s15
 800ddba:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800ddbe:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800ddc2:	ed98 3a00 	vldr	s6, [r8]
 800ddc6:	ed99 4a01 	vldr	s8, [r9, #4]
 800ddca:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800ddce:	edd8 4a01 	vldr	s9, [r8, #4]
 800ddd2:	edd9 5a02 	vldr	s11, [r9, #8]
 800ddd6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800ddda:	ee16 6a10 	vmov	r6, s12
 800ddde:	eeb0 6a67 	vmov.f32	s12, s15
 800dde2:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800dde6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 800ddea:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800ddee:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 800ddf2:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 800ddf6:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 800ddfa:	ee16 0a10 	vmov	r0, s12
 800ddfe:	eeb0 6a67 	vmov.f32	s12, s15
 800de02:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800de06:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 800de0a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de0e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800de12:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 800de16:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800de1a:	ee16 1a10 	vmov	r1, s12
 800de1e:	eeb0 6a67 	vmov.f32	s12, s15
 800de22:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800de26:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 800de2a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de2e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800de32:	f8d8 b008 	ldr.w	fp, [r8, #8]
 800de36:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800de3a:	68ff      	ldr	r7, [r7, #12]
 800de3c:	ee16 2a10 	vmov	r2, s12
 800de40:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 800de44:	9624      	str	r6, [sp, #144]	; 0x90
 800de46:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de4a:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800de4e:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 800de52:	4628      	mov	r0, r5
 800de54:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 800de58:	9b06      	ldr	r3, [sp, #24]
 800de5a:	922d      	str	r2, [sp, #180]	; 0xb4
 800de5c:	4a21      	ldr	r2, [pc, #132]	; (800dee4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 800de5e:	9317      	str	r3, [sp, #92]	; 0x5c
 800de60:	8812      	ldrh	r2, [r2, #0]
 800de62:	9b07      	ldr	r3, [sp, #28]
 800de64:	9218      	str	r2, [sp, #96]	; 0x60
 800de66:	9319      	str	r3, [sp, #100]	; 0x64
 800de68:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 800de6c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 800de70:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800de74:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 800de78:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 800de7c:	9731      	str	r7, [sp, #196]	; 0xc4
 800de7e:	f005 ff3d 	bl	8013cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800de82:	901a      	str	r0, [sp, #104]	; 0x68
 800de84:	4628      	mov	r0, r5
 800de86:	f005 fdff 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800de8a:	901b      	str	r0, [sp, #108]	; 0x6c
 800de8c:	4628      	mov	r0, r5
 800de8e:	f005 fe35 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800de92:	901c      	str	r0, [sp, #112]	; 0x70
 800de94:	4628      	mov	r0, r5
 800de96:	f005 fdf7 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800de9a:	4b13      	ldr	r3, [pc, #76]	; (800dee8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 800de9c:	901d      	str	r0, [sp, #116]	; 0x74
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800dea4:	b10a      	cbz	r2, 800deaa <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 800dea6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800dea8:	b905      	cbnz	r5, 800deac <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 800deaa:	689d      	ldr	r5, [r3, #8]
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	4620      	mov	r0, r4
 800deb0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800deb2:	f7ff fed5 	bl	800dc60 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 800deb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800deba:	aa1e      	add	r2, sp, #120	; 0x78
 800debc:	a917      	add	r1, sp, #92	; 0x5c
 800debe:	9304      	str	r3, [sp, #16]
 800dec0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dec4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dec8:	ab13      	add	r3, sp, #76	; 0x4c
 800deca:	4628      	mov	r0, r5
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	ab15      	add	r3, sp, #84	; 0x54
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	ab19      	add	r3, sp, #100	; 0x64
 800ded4:	47b0      	blx	r6
 800ded6:	b033      	add	sp, #204	; 0xcc
 800ded8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dedc:	2300      	movs	r3, #0
 800dede:	9312      	str	r3, [sp, #72]	; 0x48
 800dee0:	e706      	b.n	800dcf0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 800dee2:	bf00      	nop
 800dee4:	24006c5e 	.word	0x24006c5e
 800dee8:	24006c64 	.word	0x24006c64

0800deec <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	ed2d 8b04 	vpush	{d8-d9}
 800def2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800def6:	b098      	sub	sp, #96	; 0x60
 800def8:	4604      	mov	r4, r0
 800defa:	460e      	mov	r6, r1
 800defc:	2b00      	cmp	r3, #0
 800defe:	d065      	beq.n	800dfcc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 800df00:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800df04:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800df08:	ed9f 8a37 	vldr	s16, [pc, #220]	; 800dfe8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 800df0c:	ee09 3a10 	vmov	s18, r3
 800df10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800df14:	4628      	mov	r0, r5
 800df16:	ee08 3a90 	vmov	s17, r3
 800df1a:	4b34      	ldr	r3, [pc, #208]	; (800dfec <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 800df1c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800df20:	930c      	str	r3, [sp, #48]	; 0x30
 800df22:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800df26:	930d      	str	r3, [sp, #52]	; 0x34
 800df28:	930e      	str	r3, [sp, #56]	; 0x38
 800df2a:	ee39 9a08 	vadd.f32	s18, s18, s16
 800df2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df30:	f005 fdaa 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800df34:	ee07 0a90 	vmov	s15, r0
 800df38:	4628      	mov	r0, r5
 800df3a:	ee78 8a88 	vadd.f32	s17, s17, s16
 800df3e:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800df42:	f005 fddb 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800df46:	4b2a      	ldr	r3, [pc, #168]	; (800dff0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 800df48:	ee07 0a90 	vmov	s15, r0
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800df52:	eef0 7a48 	vmov.f32	s15, s16
 800df56:	2b01      	cmp	r3, #1
 800df58:	d13c      	bne.n	800dfd4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 800df5a:	eef0 6a69 	vmov.f32	s13, s19
 800df5e:	ee19 3a90 	vmov	r3, s19
 800df62:	eeb0 6a47 	vmov.f32	s12, s14
 800df66:	eef0 5a47 	vmov.f32	s11, s14
 800df6a:	eef0 9a48 	vmov.f32	s19, s16
 800df6e:	eeb0 7a48 	vmov.f32	s14, s16
 800df72:	9314      	str	r3, [sp, #80]	; 0x50
 800df74:	ab14      	add	r3, sp, #80	; 0x50
 800df76:	2200      	movs	r2, #0
 800df78:	4631      	mov	r1, r6
 800df7a:	9303      	str	r3, [sp, #12]
 800df7c:	ab10      	add	r3, sp, #64	; 0x40
 800df7e:	4620      	mov	r0, r4
 800df80:	edcd 7a04 	vstr	s15, [sp, #16]
 800df84:	9302      	str	r3, [sp, #8]
 800df86:	ab0c      	add	r3, sp, #48	; 0x30
 800df88:	ed8d 9a05 	vstr	s18, [sp, #20]
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	ab08      	add	r3, sp, #32
 800df90:	ed8d 9a06 	vstr	s18, [sp, #24]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	ab04      	add	r3, sp, #16
 800df98:	edcd 7a07 	vstr	s15, [sp, #28]
 800df9c:	edcd 7a08 	vstr	s15, [sp, #32]
 800dfa0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 800dfa4:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800dfa8:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 800dfac:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800dfb0:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 800dfb4:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800dfb8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800dfbc:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 800dfc0:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 800dfc4:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 800dfc8:	f7ff fe54 	bl	800dc74 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800dfcc:	b018      	add	sp, #96	; 0x60
 800dfce:	ecbd 8b04 	vpop	{d8-d9}
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}
 800dfd4:	eef0 6a47 	vmov.f32	s13, s14
 800dfd8:	ee18 3a10 	vmov	r3, s16
 800dfdc:	eef0 5a69 	vmov.f32	s11, s19
 800dfe0:	eeb0 6a48 	vmov.f32	s12, s16
 800dfe4:	e7c5      	b.n	800df72 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 800dfe6:	bf00      	nop
 800dfe8:	00000000 	.word	0x00000000
 800dfec:	42c80000 	.word	0x42c80000
 800dff0:	24006c5c 	.word	0x24006c5c

0800dff4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800dff4:	2200      	movs	r2, #0
 800dff6:	8002      	strh	r2, [r0, #0]
 800dff8:	8042      	strh	r2, [r0, #2]
 800dffa:	8082      	strh	r2, [r0, #4]
 800dffc:	80c2      	strh	r2, [r0, #6]
 800dffe:	4770      	bx	lr

0800e000 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	6803      	ldr	r3, [r0, #0]
 800e004:	4604      	mov	r4, r0
 800e006:	4615      	mov	r5, r2
 800e008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00a:	4798      	blx	r3
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	4629      	mov	r1, r5
 800e010:	4620      	mov	r0, r4
 800e012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e018:	4718      	bx	r3

0800e01a <_ZN8touchgfx8TextAreaD1Ev>:
 800e01a:	4770      	bx	lr

0800e01c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800e01c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e01e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e022:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e024:	4299      	cmp	r1, r3
 800e026:	d029      	beq.n	800e07c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800e028:	4b15      	ldr	r3, [pc, #84]	; (800e080 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	b92b      	cbnz	r3, 800e03a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800e02e:	4b15      	ldr	r3, [pc, #84]	; (800e084 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800e030:	21ae      	movs	r1, #174	; 0xae
 800e032:	4a15      	ldr	r2, [pc, #84]	; (800e088 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800e034:	4815      	ldr	r0, [pc, #84]	; (800e08c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800e036:	f00e f939 	bl	801c2ac <__assert_func>
 800e03a:	4a15      	ldr	r2, [pc, #84]	; (800e090 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800e03c:	8812      	ldrh	r2, [r2, #0]
 800e03e:	428a      	cmp	r2, r1
 800e040:	d803      	bhi.n	800e04a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800e042:	4b14      	ldr	r3, [pc, #80]	; (800e094 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800e044:	21af      	movs	r1, #175	; 0xaf
 800e046:	4a10      	ldr	r2, [pc, #64]	; (800e088 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800e048:	e7f4      	b.n	800e034 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800e04a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e04e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e052:	4b11      	ldr	r3, [pc, #68]	; (800e098 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800e054:	7854      	ldrb	r4, [r2, #1]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e05c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e060:	682b      	ldr	r3, [r5, #0]
 800e062:	69de      	ldr	r6, [r3, #28]
 800e064:	4b0d      	ldr	r3, [pc, #52]	; (800e09c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800e066:	6818      	ldr	r0, [r3, #0]
 800e068:	f7f6 fbf8 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 800e06c:	2300      	movs	r3, #0
 800e06e:	4602      	mov	r2, r0
 800e070:	4621      	mov	r1, r4
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	4628      	mov	r0, r5
 800e076:	47b0      	blx	r6
 800e078:	b002      	add	sp, #8
 800e07a:	bd70      	pop	{r4, r5, r6, pc}
 800e07c:	2000      	movs	r0, #0
 800e07e:	e7fb      	b.n	800e078 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800e080:	24006cb4 	.word	0x24006cb4
 800e084:	0801e078 	.word	0x0801e078
 800e088:	0801f354 	.word	0x0801f354
 800e08c:	0801e106 	.word	0x0801e106
 800e090:	24006cb8 	.word	0x24006cb8
 800e094:	0801e12f 	.word	0x0801e12f
 800e098:	24006cbc 	.word	0x24006cbc
 800e09c:	24006cc0 	.word	0x24006cc0

0800e0a0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	6803      	ldr	r3, [r0, #0]
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	b28d      	uxth	r5, r1
 800e0a8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e0aa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800e0ac:	4b10      	ldr	r3, [pc, #64]	; (800e0f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	b92b      	cbnz	r3, 800e0be <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800e0b2:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800e0b4:	21ae      	movs	r1, #174	; 0xae
 800e0b6:	4a10      	ldr	r2, [pc, #64]	; (800e0f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800e0b8:	4810      	ldr	r0, [pc, #64]	; (800e0fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800e0ba:	f00e f8f7 	bl	801c2ac <__assert_func>
 800e0be:	4910      	ldr	r1, [pc, #64]	; (800e100 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800e0c0:	8809      	ldrh	r1, [r1, #0]
 800e0c2:	4291      	cmp	r1, r2
 800e0c4:	d803      	bhi.n	800e0ce <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800e0c6:	4b0f      	ldr	r3, [pc, #60]	; (800e104 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800e0c8:	21af      	movs	r1, #175	; 0xaf
 800e0ca:	4a0b      	ldr	r2, [pc, #44]	; (800e0f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800e0cc:	e7f4      	b.n	800e0b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800e0ce:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800e0d2:	4b0d      	ldr	r3, [pc, #52]	; (800e108 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e0da:	6803      	ldr	r3, [r0, #0]
 800e0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0de:	4798      	blx	r3
 800e0e0:	1a29      	subs	r1, r5, r0
 800e0e2:	4633      	mov	r3, r6
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	b209      	sxth	r1, r1
 800e0e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0ec:	4718      	bx	r3
 800e0ee:	bf00      	nop
 800e0f0:	24006cb4 	.word	0x24006cb4
 800e0f4:	0801e078 	.word	0x0801e078
 800e0f8:	0801f354 	.word	0x0801f354
 800e0fc:	0801e106 	.word	0x0801e106
 800e100:	24006cb8 	.word	0x24006cb8
 800e104:	0801e12f 	.word	0x0801e12f
 800e108:	24006cbc 	.word	0x24006cbc

0800e10c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800e10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e114:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e116:	b08c      	sub	sp, #48	; 0x30
 800e118:	4604      	mov	r4, r0
 800e11a:	4293      	cmp	r3, r2
 800e11c:	4688      	mov	r8, r1
 800e11e:	d05f      	beq.n	800e1e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800e120:	4e31      	ldr	r6, [pc, #196]	; (800e1e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800e122:	6832      	ldr	r2, [r6, #0]
 800e124:	b92a      	cbnz	r2, 800e132 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800e126:	4b31      	ldr	r3, [pc, #196]	; (800e1ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800e128:	21ae      	movs	r1, #174	; 0xae
 800e12a:	4a31      	ldr	r2, [pc, #196]	; (800e1f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800e12c:	4831      	ldr	r0, [pc, #196]	; (800e1f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800e12e:	f00e f8bd 	bl	801c2ac <__assert_func>
 800e132:	4d31      	ldr	r5, [pc, #196]	; (800e1f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800e134:	8829      	ldrh	r1, [r5, #0]
 800e136:	4299      	cmp	r1, r3
 800e138:	d803      	bhi.n	800e142 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800e13a:	4b30      	ldr	r3, [pc, #192]	; (800e1fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800e13c:	21af      	movs	r1, #175	; 0xaf
 800e13e:	4a2c      	ldr	r2, [pc, #176]	; (800e1f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800e140:	e7f4      	b.n	800e12c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800e142:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e146:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e14a:	4b2d      	ldr	r3, [pc, #180]	; (800e200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e152:	2a00      	cmp	r2, #0
 800e154:	d044      	beq.n	800e1e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800e156:	784b      	ldrb	r3, [r1, #1]
 800e158:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800e15c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800e160:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e164:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800e168:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e16c:	4b25      	ldr	r3, [pc, #148]	; (800e204 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800e16e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800e178:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800e17c:	9207      	str	r2, [sp, #28]
 800e17e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e180:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e184:	f88d a020 	strb.w	sl, [sp, #32]
 800e188:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800e18c:	9009      	str	r0, [sp, #36]	; 0x24
 800e18e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800e192:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800e196:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800e19a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e19e:	b10a      	cbz	r2, 800e1a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800e1a0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800e1a2:	b907      	cbnz	r7, 800e1a6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800e1a4:	689f      	ldr	r7, [r3, #8]
 800e1a6:	f10d 0914 	add.w	r9, sp, #20
 800e1aa:	4621      	mov	r1, r4
 800e1ac:	4648      	mov	r0, r9
 800e1ae:	f003 fad5 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e1b2:	6833      	ldr	r3, [r6, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d0b6      	beq.n	800e126 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800e1b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e1ba:	882b      	ldrh	r3, [r5, #0]
 800e1bc:	428b      	cmp	r3, r1
 800e1be:	d9bc      	bls.n	800e13a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800e1c0:	4b11      	ldr	r3, [pc, #68]	; (800e208 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800e1c2:	6818      	ldr	r0, [r3, #0]
 800e1c4:	f7f6 fb4a 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	9001      	str	r0, [sp, #4]
 800e1cc:	4638      	mov	r0, r7
 800e1ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1d2:	ab07      	add	r3, sp, #28
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	4643      	mov	r3, r8
 800e1d8:	e899 0006 	ldmia.w	r9, {r1, r2}
 800e1dc:	f7f6 faf0 	bl	80047c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e1e0:	b00c      	add	sp, #48	; 0x30
 800e1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e6:	bf00      	nop
 800e1e8:	24006cb4 	.word	0x24006cb4
 800e1ec:	0801e078 	.word	0x0801e078
 800e1f0:	0801f354 	.word	0x0801f354
 800e1f4:	0801e106 	.word	0x0801e106
 800e1f8:	24006cb8 	.word	0x24006cb8
 800e1fc:	0801e12f 	.word	0x0801e12f
 800e200:	24006cbc 	.word	0x24006cbc
 800e204:	24006c64 	.word	0x24006c64
 800e208:	24006cc0 	.word	0x24006cc0

0800e20c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800e20c:	b40e      	push	{r1, r2, r3}
 800e20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e216:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e218:	b09c      	sub	sp, #112	; 0x70
 800e21a:	4604      	mov	r4, r0
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d06b      	beq.n	800e2f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800e220:	aa26      	add	r2, sp, #152	; 0x98
 800e222:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800e30c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800e226:	9202      	str	r2, [sp, #8]
 800e228:	f8da 2000 	ldr.w	r2, [sl]
 800e22c:	b92a      	cbnz	r2, 800e23a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800e22e:	4b33      	ldr	r3, [pc, #204]	; (800e2fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800e230:	21ae      	movs	r1, #174	; 0xae
 800e232:	4a33      	ldr	r2, [pc, #204]	; (800e300 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e234:	4833      	ldr	r0, [pc, #204]	; (800e304 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800e236:	f00e f839 	bl	801c2ac <__assert_func>
 800e23a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800e310 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800e23e:	f8b8 1000 	ldrh.w	r1, [r8]
 800e242:	4299      	cmp	r1, r3
 800e244:	d803      	bhi.n	800e24e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800e246:	4b30      	ldr	r3, [pc, #192]	; (800e308 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800e248:	21af      	movs	r1, #175	; 0xaf
 800e24a:	4a2d      	ldr	r2, [pc, #180]	; (800e300 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e24c:	e7f2      	b.n	800e234 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800e24e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800e314 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800e252:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e256:	f8d9 3000 	ldr.w	r3, [r9]
 800e25a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	4628      	mov	r0, r5
 800e262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e264:	4798      	blx	r3
 800e266:	4606      	mov	r6, r0
 800e268:	b207      	sxth	r7, r0
 800e26a:	a803      	add	r0, sp, #12
 800e26c:	f003 fe50 	bl	8011f10 <_ZN8touchgfx12TextProviderC1Ev>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	4628      	mov	r0, r5
 800e274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e276:	4798      	blx	r3
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	4683      	mov	fp, r0
 800e27c:	4628      	mov	r0, r5
 800e27e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e280:	4798      	blx	r3
 800e282:	465b      	mov	r3, fp
 800e284:	9000      	str	r0, [sp, #0]
 800e286:	a803      	add	r0, sp, #12
 800e288:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e28a:	9a02      	ldr	r2, [sp, #8]
 800e28c:	f003 fe93 	bl	8011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e290:	f8da 3000 	ldr.w	r3, [sl]
 800e294:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0c8      	beq.n	800e22e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800e29c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e29e:	f8b8 0000 	ldrh.w	r0, [r8]
 800e2a2:	4290      	cmp	r0, r2
 800e2a4:	d9cf      	bls.n	800e246 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800e2a6:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800e2aa:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800e2ae:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800e2b2:	786a      	ldrb	r2, [r5, #1]
 800e2b4:	8925      	ldrh	r5, [r4, #8]
 800e2b6:	f8d9 3000 	ldr.w	r3, [r9]
 800e2ba:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800e2be:	eba5 050c 	sub.w	r5, r5, ip
 800e2c2:	b22d      	sxth	r5, r5
 800e2c4:	9500      	str	r5, [sp, #0]
 800e2c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e2ca:	a803      	add	r0, sp, #12
 800e2cc:	f001 fd61 	bl	800fd92 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800e2d0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800e2d4:	b203      	sxth	r3, r0
 800e2d6:	18b9      	adds	r1, r7, r2
 800e2d8:	2900      	cmp	r1, #0
 800e2da:	dd0b      	ble.n	800e2f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	fb13 f302 	smulbb	r3, r3, r2
 800e2e2:	fb16 3300 	smlabb	r3, r6, r0, r3
 800e2e6:	b21f      	sxth	r7, r3
 800e2e8:	4638      	mov	r0, r7
 800e2ea:	b01c      	add	sp, #112	; 0x70
 800e2ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f0:	b003      	add	sp, #12
 800e2f2:	4770      	bx	lr
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	dcf7      	bgt.n	800e2e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e2f8:	2700      	movs	r7, #0
 800e2fa:	e7f5      	b.n	800e2e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e2fc:	0801e078 	.word	0x0801e078
 800e300:	0801f354 	.word	0x0801f354
 800e304:	0801e106 	.word	0x0801e106
 800e308:	0801e12f 	.word	0x0801e12f
 800e30c:	24006cb4 	.word	0x24006cb4
 800e310:	24006cb8 	.word	0x24006cb8
 800e314:	24006cbc 	.word	0x24006cbc

0800e318 <_ZN8touchgfx8TextAreaD0Ev>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	4604      	mov	r4, r0
 800e31c:	213c      	movs	r1, #60	; 0x3c
 800e31e:	f00d feaf 	bl	801c080 <_ZdlPvj>
 800e322:	4620      	mov	r0, r4
 800e324:	bd10      	pop	{r4, pc}
	...

0800e328 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e32e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e330:	4604      	mov	r4, r0
 800e332:	4299      	cmp	r1, r3
 800e334:	d01e      	beq.n	800e374 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800e336:	6803      	ldr	r3, [r0, #0]
 800e338:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e33a:	4b0f      	ldr	r3, [pc, #60]	; (800e378 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	b92b      	cbnz	r3, 800e34c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800e340:	4b0e      	ldr	r3, [pc, #56]	; (800e37c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800e342:	21ae      	movs	r1, #174	; 0xae
 800e344:	4a0e      	ldr	r2, [pc, #56]	; (800e380 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e346:	480f      	ldr	r0, [pc, #60]	; (800e384 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800e348:	f00d ffb0 	bl	801c2ac <__assert_func>
 800e34c:	4b0e      	ldr	r3, [pc, #56]	; (800e388 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	428b      	cmp	r3, r1
 800e352:	d803      	bhi.n	800e35c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800e354:	4b0d      	ldr	r3, [pc, #52]	; (800e38c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800e356:	21af      	movs	r1, #175	; 0xaf
 800e358:	4a09      	ldr	r2, [pc, #36]	; (800e380 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e35a:	e7f4      	b.n	800e346 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800e35c:	4b0c      	ldr	r3, [pc, #48]	; (800e390 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800e35e:	6818      	ldr	r0, [r3, #0]
 800e360:	f7f6 fa7c 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 800e364:	2300      	movs	r3, #0
 800e366:	4601      	mov	r1, r0
 800e368:	46ac      	mov	ip, r5
 800e36a:	4620      	mov	r0, r4
 800e36c:	461a      	mov	r2, r3
 800e36e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e372:	4760      	bx	ip
 800e374:	2000      	movs	r0, #0
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	24006cb4 	.word	0x24006cb4
 800e37c:	0801e078 	.word	0x0801e078
 800e380:	0801f354 	.word	0x0801f354
 800e384:	0801e106 	.word	0x0801e106
 800e388:	24006cb8 	.word	0x24006cb8
 800e38c:	0801e12f 	.word	0x0801e12f
 800e390:	24006cc0 	.word	0x24006cc0

0800e394 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800e394:	b570      	push	{r4, r5, r6, lr}
 800e396:	6803      	ldr	r3, [r0, #0]
 800e398:	4604      	mov	r4, r0
 800e39a:	4615      	mov	r5, r2
 800e39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e39e:	4798      	blx	r3
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3ac:	4718      	bx	r3

0800e3ae <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800e3ae:	b538      	push	{r3, r4, r5, lr}
 800e3b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3b4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d014      	beq.n	800e3e6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800e3bc:	6803      	ldr	r3, [r0, #0]
 800e3be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3c0:	4798      	blx	r3
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ca:	4798      	blx	r3
 800e3cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e3d0:	b22d      	sxth	r5, r5
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800e3d8:	bf06      	itte	eq
 800e3da:	4602      	moveq	r2, r0
 800e3dc:	4629      	moveq	r1, r5
 800e3de:	462a      	movne	r2, r5
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f7ff ffd7 	bl	800e394 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}

0800e3e8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800e3e8:	888a      	ldrh	r2, [r1, #4]
 800e3ea:	8582      	strh	r2, [r0, #44]	; 0x2c
 800e3ec:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800e3f0:	b922      	cbnz	r2, 800e3fc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e3f2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800e3f6:	b90b      	cbnz	r3, 800e3fc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e3f8:	f7ff bfd9 	b.w	800e3ae <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800e3fc:	4770      	bx	lr

0800e3fe <_ZNK8touchgfx3Box12getSolidRectEv>:
 800e3fe:	2300      	movs	r3, #0
 800e400:	8083      	strh	r3, [r0, #4]
 800e402:	80c3      	strh	r3, [r0, #6]
 800e404:	8003      	strh	r3, [r0, #0]
 800e406:	8043      	strh	r3, [r0, #2]
 800e408:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800e40c:	2bff      	cmp	r3, #255	; 0xff
 800e40e:	bf01      	itttt	eq
 800e410:	890b      	ldrheq	r3, [r1, #8]
 800e412:	8083      	strheq	r3, [r0, #4]
 800e414:	894b      	ldrheq	r3, [r1, #10]
 800e416:	80c3      	strheq	r3, [r0, #6]
 800e418:	4770      	bx	lr
	...

0800e41c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800e41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e41e:	4604      	mov	r4, r0
 800e420:	466b      	mov	r3, sp
 800e422:	6808      	ldr	r0, [r1, #0]
 800e424:	6849      	ldr	r1, [r1, #4]
 800e426:	c303      	stmia	r3!, {r0, r1}
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	4669      	mov	r1, sp
 800e42c:	4620      	mov	r0, r4
 800e42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e430:	4798      	blx	r3
 800e432:	4b08      	ldr	r3, [pc, #32]	; (800e454 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e43a:	b10a      	cbz	r2, 800e440 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800e43c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e43e:	b900      	cbnz	r0, 800e442 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800e440:	6898      	ldr	r0, [r3, #8]
 800e442:	6803      	ldr	r3, [r0, #0]
 800e444:	4669      	mov	r1, sp
 800e446:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e448:	699d      	ldr	r5, [r3, #24]
 800e44a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e44e:	47a8      	blx	r5
 800e450:	b003      	add	sp, #12
 800e452:	bd30      	pop	{r4, r5, pc}
 800e454:	24006c64 	.word	0x24006c64

0800e458 <_ZN8touchgfx3BoxD1Ev>:
 800e458:	4770      	bx	lr

0800e45a <_ZN8touchgfx3BoxD0Ev>:
 800e45a:	b510      	push	{r4, lr}
 800e45c:	4604      	mov	r4, r0
 800e45e:	212c      	movs	r1, #44	; 0x2c
 800e460:	f00d fe0e 	bl	801c080 <_ZdlPvj>
 800e464:	4620      	mov	r0, r4
 800e466:	bd10      	pop	{r4, pc}

0800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	880b      	ldrh	r3, [r1, #0]
 800e46c:	4605      	mov	r5, r0
 800e46e:	4604      	mov	r4, r0
 800e470:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800e472:	8813      	ldrh	r3, [r2, #0]
 800e474:	f825 3f30 	strh.w	r3, [r5, #48]!
 800e478:	4628      	mov	r0, r5
 800e47a:	f005 fb05 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e47e:	4606      	mov	r6, r0
 800e480:	4628      	mov	r0, r5
 800e482:	f005 fb3b 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e486:	6823      	ldr	r3, [r4, #0]
 800e488:	4605      	mov	r5, r0
 800e48a:	b231      	sxth	r1, r6
 800e48c:	4620      	mov	r0, r4
 800e48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e490:	4798      	blx	r3
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	b229      	sxth	r1, r5
 800e496:	4620      	mov	r0, r4
 800e498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e49e:	4718      	bx	r3

0800e4a0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	2bff      	cmp	r3, #255	; 0xff
 800e4aa:	d006      	beq.n	800e4ba <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	8003      	strh	r3, [r0, #0]
 800e4b0:	8043      	strh	r3, [r0, #2]
 800e4b2:	8083      	strh	r3, [r0, #4]
 800e4b4:	80c3      	strh	r3, [r0, #6]
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	bd10      	pop	{r4, pc}
 800e4ba:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800e4be:	b11b      	cbz	r3, 800e4c8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800e4c0:	3130      	adds	r1, #48	; 0x30
 800e4c2:	f005 fb55 	bl	8013b70 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e4c6:	e7f6      	b.n	800e4b6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800e4c8:	312e      	adds	r1, #46	; 0x2e
 800e4ca:	e7fa      	b.n	800e4c2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800e4cc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e4d4:	b08a      	sub	sp, #40	; 0x28
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4688      	mov	r8, r1
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d044      	beq.n	800e568 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800e4de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e4e0:	a805      	add	r0, sp, #20
 800e4e2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e4e6:	f005 facf 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e4ea:	4605      	mov	r5, r0
 800e4ec:	b206      	sxth	r6, r0
 800e4ee:	a805      	add	r0, sp, #20
 800e4f0:	f005 fb04 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e4f4:	f9b8 2000 	ldrsh.w	r2, [r8]
 800e4f8:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	fa0f fc80 	sxth.w	ip, r0
 800e502:	4417      	add	r7, r2
 800e504:	9306      	str	r3, [sp, #24]
 800e506:	b2bf      	uxth	r7, r7
 800e508:	fa0f fe87 	sxth.w	lr, r7
 800e50c:	459e      	cmp	lr, r3
 800e50e:	dd2d      	ble.n	800e56c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e510:	4296      	cmp	r6, r2
 800e512:	dd2b      	ble.n	800e56c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e514:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800e518:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800e51c:	4419      	add	r1, r3
 800e51e:	b289      	uxth	r1, r1
 800e520:	fa0f f881 	sxth.w	r8, r1
 800e524:	f1b8 0f00 	cmp.w	r8, #0
 800e528:	dd20      	ble.n	800e56c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e52a:	459c      	cmp	ip, r3
 800e52c:	dd1e      	ble.n	800e56c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e52e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800e532:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e536:	4576      	cmp	r6, lr
 800e538:	bfa8      	it	ge
 800e53a:	463d      	movge	r5, r7
 800e53c:	45c4      	cmp	ip, r8
 800e53e:	bfa8      	it	ge
 800e540:	4608      	movge	r0, r1
 800e542:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e546:	1aad      	subs	r5, r5, r2
 800e548:	1ac0      	subs	r0, r0, r3
 800e54a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e54e:	f8ad 501c 	strh.w	r5, [sp, #28]
 800e552:	f8ad 001e 	strh.w	r0, [sp, #30]
 800e556:	4b1f      	ldr	r3, [pc, #124]	; (800e5d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	b953      	cbnz	r3, 800e572 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800e55c:	4b1e      	ldr	r3, [pc, #120]	; (800e5d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800e55e:	2187      	movs	r1, #135	; 0x87
 800e560:	4a1e      	ldr	r2, [pc, #120]	; (800e5dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800e562:	481f      	ldr	r0, [pc, #124]	; (800e5e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800e564:	f00d fea2 	bl	801c2ac <__assert_func>
 800e568:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800e56a:	e7b9      	b.n	800e4e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800e56c:	2300      	movs	r3, #0
 800e56e:	9307      	str	r3, [sp, #28]
 800e570:	e7f1      	b.n	800e556 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800e572:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d026      	beq.n	800e5cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e57e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e582:	2b00      	cmp	r3, #0
 800e584:	dd22      	ble.n	800e5cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e586:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	dd1e      	ble.n	800e5cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e58e:	2300      	movs	r3, #0
 800e590:	a908      	add	r1, sp, #32
 800e592:	4620      	mov	r0, r4
 800e594:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e598:	6823      	ldr	r3, [r4, #0]
 800e59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e59c:	4798      	blx	r3
 800e59e:	4b11      	ldr	r3, [pc, #68]	; (800e5e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e5a6:	b10a      	cbz	r2, 800e5ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800e5a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e5aa:	b900      	cbnz	r0, 800e5ae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800e5ac:	6898      	ldr	r0, [r3, #8]
 800e5ae:	2501      	movs	r5, #1
 800e5b0:	6801      	ldr	r1, [r0, #0]
 800e5b2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800e5b6:	9502      	str	r5, [sp, #8]
 800e5b8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800e5bc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800e5c0:	9401      	str	r4, [sp, #4]
 800e5c2:	ac06      	add	r4, sp, #24
 800e5c4:	9400      	str	r4, [sp, #0]
 800e5c6:	688c      	ldr	r4, [r1, #8]
 800e5c8:	a905      	add	r1, sp, #20
 800e5ca:	47a0      	blx	r4
 800e5cc:	b00a      	add	sp, #40	; 0x28
 800e5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d2:	bf00      	nop
 800e5d4:	24006cec 	.word	0x24006cec
 800e5d8:	0801f166 	.word	0x0801f166
 800e5dc:	0801f3e8 	.word	0x0801f3e8
 800e5e0:	0801f1a2 	.word	0x0801f1a2
 800e5e4:	24006c64 	.word	0x24006c64

0800e5e8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 800e5e8:	4770      	bx	lr
	...

0800e5ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800e5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e5f4:	4606      	mov	r6, r0
 800e5f6:	4299      	cmp	r1, r3
 800e5f8:	d02a      	beq.n	800e650 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800e5fa:	4b16      	ldr	r3, [pc, #88]	; (800e654 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	b92b      	cbnz	r3, 800e60c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800e600:	4b15      	ldr	r3, [pc, #84]	; (800e658 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800e602:	21ae      	movs	r1, #174	; 0xae
 800e604:	4a15      	ldr	r2, [pc, #84]	; (800e65c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e606:	4816      	ldr	r0, [pc, #88]	; (800e660 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800e608:	f00d fe50 	bl	801c2ac <__assert_func>
 800e60c:	4a15      	ldr	r2, [pc, #84]	; (800e664 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800e60e:	8812      	ldrh	r2, [r2, #0]
 800e610:	428a      	cmp	r2, r1
 800e612:	d803      	bhi.n	800e61c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800e614:	4b14      	ldr	r3, [pc, #80]	; (800e668 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800e616:	21af      	movs	r1, #175	; 0xaf
 800e618:	4a10      	ldr	r2, [pc, #64]	; (800e65c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e61a:	e7f4      	b.n	800e606 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800e61c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e620:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e624:	4b11      	ldr	r3, [pc, #68]	; (800e66c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800e626:	7854      	ldrb	r4, [r2, #1]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e62e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e632:	682b      	ldr	r3, [r5, #0]
 800e634:	69df      	ldr	r7, [r3, #28]
 800e636:	4b0e      	ldr	r3, [pc, #56]	; (800e670 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800e638:	6818      	ldr	r0, [r3, #0]
 800e63a:	f7f6 f90f 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 800e63e:	2300      	movs	r3, #0
 800e640:	4602      	mov	r2, r0
 800e642:	4621      	mov	r1, r4
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	4628      	mov	r0, r5
 800e648:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800e64a:	47b8      	blx	r7
 800e64c:	b003      	add	sp, #12
 800e64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e650:	2000      	movs	r0, #0
 800e652:	e7fb      	b.n	800e64c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800e654:	24006cb4 	.word	0x24006cb4
 800e658:	0801e078 	.word	0x0801e078
 800e65c:	0801f494 	.word	0x0801f494
 800e660:	0801e106 	.word	0x0801e106
 800e664:	24006cb8 	.word	0x24006cb8
 800e668:	0801e12f 	.word	0x0801e12f
 800e66c:	24006cbc 	.word	0x24006cbc
 800e670:	24006cc0 	.word	0x24006cc0

0800e674 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e67a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e67c:	4604      	mov	r4, r0
 800e67e:	4299      	cmp	r1, r3
 800e680:	d01e      	beq.n	800e6c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800e682:	6803      	ldr	r3, [r0, #0]
 800e684:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e686:	4b0f      	ldr	r3, [pc, #60]	; (800e6c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	b92b      	cbnz	r3, 800e698 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 800e68c:	4b0e      	ldr	r3, [pc, #56]	; (800e6c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800e68e:	21ae      	movs	r1, #174	; 0xae
 800e690:	4a0e      	ldr	r2, [pc, #56]	; (800e6cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e692:	480f      	ldr	r0, [pc, #60]	; (800e6d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800e694:	f00d fe0a 	bl	801c2ac <__assert_func>
 800e698:	4b0e      	ldr	r3, [pc, #56]	; (800e6d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	428b      	cmp	r3, r1
 800e69e:	d803      	bhi.n	800e6a8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 800e6a0:	4b0d      	ldr	r3, [pc, #52]	; (800e6d8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 800e6a2:	21af      	movs	r1, #175	; 0xaf
 800e6a4:	4a09      	ldr	r2, [pc, #36]	; (800e6cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e6a6:	e7f4      	b.n	800e692 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 800e6a8:	4b0c      	ldr	r3, [pc, #48]	; (800e6dc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 800e6aa:	6818      	ldr	r0, [r3, #0]
 800e6ac:	f7f6 f8d6 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 800e6b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e6b2:	4601      	mov	r1, r0
 800e6b4:	46ac      	mov	ip, r5
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6be:	4760      	bx	ip
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	24006cb4 	.word	0x24006cb4
 800e6c8:	0801e078 	.word	0x0801e078
 800e6cc:	0801f494 	.word	0x0801f494
 800e6d0:	0801e106 	.word	0x0801e106
 800e6d4:	24006cb8 	.word	0x24006cb8
 800e6d8:	0801e12f 	.word	0x0801e12f
 800e6dc:	24006cc0 	.word	0x24006cc0

0800e6e0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800e6e0:	b510      	push	{r4, lr}
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	2140      	movs	r1, #64	; 0x40
 800e6e6:	f00d fccb 	bl	801c080 <_ZdlPvj>
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	bd10      	pop	{r4, pc}
	...

0800e6f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800e6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6f8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e6fa:	b08c      	sub	sp, #48	; 0x30
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	4293      	cmp	r3, r2
 800e700:	460e      	mov	r6, r1
 800e702:	d05d      	beq.n	800e7c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e704:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800e7e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 800e708:	f8d8 2000 	ldr.w	r2, [r8]
 800e70c:	b92a      	cbnz	r2, 800e71a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 800e70e:	4b2e      	ldr	r3, [pc, #184]	; (800e7c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 800e710:	21ae      	movs	r1, #174	; 0xae
 800e712:	4a2e      	ldr	r2, [pc, #184]	; (800e7cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e714:	482e      	ldr	r0, [pc, #184]	; (800e7d0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 800e716:	f00d fdc9 	bl	801c2ac <__assert_func>
 800e71a:	4f2e      	ldr	r7, [pc, #184]	; (800e7d4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 800e71c:	8839      	ldrh	r1, [r7, #0]
 800e71e:	4299      	cmp	r1, r3
 800e720:	d803      	bhi.n	800e72a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 800e722:	4b2d      	ldr	r3, [pc, #180]	; (800e7d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 800e724:	21af      	movs	r1, #175	; 0xaf
 800e726:	4a29      	ldr	r2, [pc, #164]	; (800e7cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e728:	e7f4      	b.n	800e714 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 800e72a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e72e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e732:	4b2a      	ldr	r3, [pc, #168]	; (800e7dc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e73a:	2a00      	cmp	r2, #0
 800e73c:	d040      	beq.n	800e7c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e73e:	784b      	ldrb	r3, [r1, #1]
 800e740:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 800e744:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800e748:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800e74c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800e750:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e754:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800e758:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800e75c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e760:	ad05      	add	r5, sp, #20
 800e762:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e764:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e768:	9207      	str	r2, [sp, #28]
 800e76a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800e76e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800e772:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800e776:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e77a:	f88d a020 	strb.w	sl, [sp, #32]
 800e77e:	9009      	str	r0, [sp, #36]	; 0x24
 800e780:	f7fe fb92 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800e784:	4621      	mov	r1, r4
 800e786:	4681      	mov	r9, r0
 800e788:	4628      	mov	r0, r5
 800e78a:	f002 ffe7 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e78e:	f8d8 3000 	ldr.w	r3, [r8]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d0bb      	beq.n	800e70e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 800e796:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e798:	883b      	ldrh	r3, [r7, #0]
 800e79a:	428b      	cmp	r3, r1
 800e79c:	d9c1      	bls.n	800e722 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 800e79e:	4b10      	ldr	r3, [pc, #64]	; (800e7e0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 800e7a0:	6818      	ldr	r0, [r3, #0]
 800e7a2:	f7f6 f85b 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9303      	str	r3, [sp, #12]
 800e7aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e7ac:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800e7b0:	ab07      	add	r3, sp, #28
 800e7b2:	4648      	mov	r0, r9
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	4633      	mov	r3, r6
 800e7b8:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e7bc:	f7f6 f800 	bl	80047c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e7c0:	b00c      	add	sp, #48	; 0x30
 800e7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c6:	bf00      	nop
 800e7c8:	0801e078 	.word	0x0801e078
 800e7cc:	0801f494 	.word	0x0801f494
 800e7d0:	0801e106 	.word	0x0801e106
 800e7d4:	24006cb8 	.word	0x24006cb8
 800e7d8:	0801e12f 	.word	0x0801e12f
 800e7dc:	24006cbc 	.word	0x24006cbc
 800e7e0:	24006cc0 	.word	0x24006cc0
 800e7e4:	24006cb4 	.word	0x24006cb4

0800e7e8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800e7e8:	4770      	bx	lr

0800e7ea <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800e7ea:	b510      	push	{r4, lr}
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	2134      	movs	r1, #52	; 0x34
 800e7f0:	f00d fc46 	bl	801c080 <_ZdlPvj>
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	bd10      	pop	{r4, pc}

0800e7f8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800e7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e7fe:	4604      	mov	r4, r0
 800e800:	460e      	mov	r6, r1
 800e802:	b08e      	sub	sp, #56	; 0x38
 800e804:	b218      	sxth	r0, r3
 800e806:	8921      	ldrh	r1, [r4, #8]
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	8962      	ldrh	r2, [r4, #10]
 800e80c:	f8ad 0000 	strh.w	r0, [sp]
 800e810:	b29b      	uxth	r3, r3
 800e812:	f8ad 0002 	strh.w	r0, [sp, #2]
 800e816:	1ac9      	subs	r1, r1, r3
 800e818:	1ad3      	subs	r3, r2, r3
 800e81a:	b209      	sxth	r1, r1
 800e81c:	b21b      	sxth	r3, r3
 800e81e:	2900      	cmp	r1, #0
 800e820:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e824:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e828:	dd5e      	ble.n	800e8e8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	dd5c      	ble.n	800e8e8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800e82e:	6830      	ldr	r0, [r6, #0]
 800e830:	ab02      	add	r3, sp, #8
 800e832:	6871      	ldr	r1, [r6, #4]
 800e834:	c303      	stmia	r3!, {r0, r1}
 800e836:	4669      	mov	r1, sp
 800e838:	a802      	add	r0, sp, #8
 800e83a:	f7fe f865 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800e83e:	4620      	mov	r0, r4
 800e840:	a902      	add	r1, sp, #8
 800e842:	f7ff fdeb 	bl	800e41c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800e846:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800e848:	2800      	cmp	r0, #0
 800e84a:	d05f      	beq.n	800e90c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800e84c:	8963      	ldrh	r3, [r4, #10]
 800e84e:	b202      	sxth	r2, r0
 800e850:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e854:	2500      	movs	r5, #0
 800e856:	1a1f      	subs	r7, r3, r0
 800e858:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800e85c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e860:	b21b      	sxth	r3, r3
 800e862:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800e866:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800e86a:	af04      	add	r7, sp, #16
 800e86c:	1a09      	subs	r1, r1, r0
 800e86e:	9506      	str	r5, [sp, #24]
 800e870:	f8ad 201e 	strh.w	r2, [sp, #30]
 800e874:	f8ad 5020 	strh.w	r5, [sp, #32]
 800e878:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e87c:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800e880:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e884:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800e888:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800e88c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800e890:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800e894:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e898:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e89c:	ab06      	add	r3, sp, #24
 800e89e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e8a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8a6:	e887 0003 	stmia.w	r7, {r0, r1}
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	f7fe f82b 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800e8b2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	dd12      	ble.n	800e8e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800e8ba:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	dd0e      	ble.n	800e8e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ca:	4798      	blx	r3
 800e8cc:	f7fe faec 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800e8d0:	6803      	ldr	r3, [r0, #0]
 800e8d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e8d4:	4639      	mov	r1, r7
 800e8d6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800e8da:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e8de:	47c0      	blx	r8
 800e8e0:	3501      	adds	r5, #1
 800e8e2:	2d04      	cmp	r5, #4
 800e8e4:	d1da      	bne.n	800e89c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800e8e6:	e011      	b.n	800e90c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800e8e8:	6830      	ldr	r0, [r6, #0]
 800e8ea:	ab06      	add	r3, sp, #24
 800e8ec:	6871      	ldr	r1, [r6, #4]
 800e8ee:	c303      	stmia	r3!, {r0, r1}
 800e8f0:	6823      	ldr	r3, [r4, #0]
 800e8f2:	a906      	add	r1, sp, #24
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f8:	4798      	blx	r3
 800e8fa:	f7fe fad5 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 800e8fe:	6803      	ldr	r3, [r0, #0]
 800e900:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e902:	a906      	add	r1, sp, #24
 800e904:	699d      	ldr	r5, [r3, #24]
 800e906:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e90a:	47a8      	blx	r5
 800e90c:	b00e      	add	sp, #56	; 0x38
 800e90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e912 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 800e912:	4770      	bx	lr

0800e914 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800e914:	b510      	push	{r4, lr}
 800e916:	4604      	mov	r4, r0
 800e918:	213c      	movs	r1, #60	; 0x3c
 800e91a:	f00d fbb1 	bl	801c080 <_ZdlPvj>
 800e91e:	4620      	mov	r0, r4
 800e920:	bd10      	pop	{r4, pc}

0800e922 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 800e922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e926:	461c      	mov	r4, r3
 800e928:	4606      	mov	r6, r0
 800e92a:	9f06      	ldr	r7, [sp, #24]
 800e92c:	f7ff fd9c 	bl	800e468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800e930:	8823      	ldrh	r3, [r4, #0]
 800e932:	f04f 0802 	mov.w	r8, #2
 800e936:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 800e93a:	4638      	mov	r0, r7
 800e93c:	86b3      	strh	r3, [r6, #52]	; 0x34
 800e93e:	883b      	ldrh	r3, [r7, #0]
 800e940:	fb95 f5f8 	sdiv	r5, r5, r8
 800e944:	86f3      	strh	r3, [r6, #54]	; 0x36
 800e946:	b2ad      	uxth	r5, r5
 800e948:	f005 f89e 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e94c:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 800e950:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 800e954:	fb94 f4f8 	sdiv	r4, r4, r8
 800e958:	b2a4      	uxth	r4, r4
 800e95a:	8730      	strh	r0, [r6, #56]	; 0x38
 800e95c:	4638      	mov	r0, r7
 800e95e:	f005 f8cd 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e962:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 800e966:	8770      	strh	r0, [r6, #58]	; 0x3a
 800e968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e96c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 800e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e970:	4604      	mov	r4, r0
 800e972:	b08c      	sub	sp, #48	; 0x30
 800e974:	460d      	mov	r5, r1
 800e976:	f7ff fda9 	bl	800e4cc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800e97a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e97e:	b33b      	cbz	r3, 800e9d0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 800e980:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800e982:	a805      	add	r0, sp, #20
 800e984:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e988:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 800e98c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 800e990:	f005 f87a 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e994:	4606      	mov	r6, r0
 800e996:	a805      	add	r0, sp, #20
 800e998:	f005 f8b0 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e99c:	6869      	ldr	r1, [r5, #4]
 800e99e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800e9a2:	ab08      	add	r3, sp, #32
 800e9a4:	6828      	ldr	r0, [r5, #0]
 800e9a6:	ad08      	add	r5, sp, #32
 800e9a8:	f8ad 8018 	strh.w	r8, [sp, #24]
 800e9ac:	f8ad 701a 	strh.w	r7, [sp, #26]
 800e9b0:	f8ad 601c 	strh.w	r6, [sp, #28]
 800e9b4:	c303      	stmia	r3!, {r0, r1}
 800e9b6:	a906      	add	r1, sp, #24
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	f7fd ffa5 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800e9be:	4b25      	ldr	r3, [pc, #148]	; (800ea54 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	b93b      	cbnz	r3, 800e9d4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 800e9c4:	4b24      	ldr	r3, [pc, #144]	; (800ea58 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 800e9c6:	2187      	movs	r1, #135	; 0x87
 800e9c8:	4a24      	ldr	r2, [pc, #144]	; (800ea5c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 800e9ca:	4825      	ldr	r0, [pc, #148]	; (800ea60 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 800e9cc:	f00d fc6e 	bl	801c2ac <__assert_func>
 800e9d0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e9d2:	e7d6      	b.n	800e982 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 800e9d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e9d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d035      	beq.n	800ea4c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800e9e0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dd31      	ble.n	800ea4c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800e9e8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	dd2d      	ble.n	800ea4c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	a90a      	add	r1, sp, #40	; 0x28
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fe:	4798      	blx	r3
 800ea00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ea04:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800ea06:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ea0a:	1a9b      	subs	r3, r3, r2
 800ea0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ea10:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800ea12:	1ac9      	subs	r1, r1, r3
 800ea14:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800ea18:	4912      	ldr	r1, [pc, #72]	; (800ea64 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 800ea1a:	6809      	ldr	r1, [r1, #0]
 800ea1c:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 800ea20:	b108      	cbz	r0, 800ea26 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 800ea22:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800ea24:	b900      	cbnz	r0, 800ea28 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 800ea26:	6888      	ldr	r0, [r1, #8]
 800ea28:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800ea2c:	2601      	movs	r6, #1
 800ea2e:	440b      	add	r3, r1
 800ea30:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800ea34:	440a      	add	r2, r1
 800ea36:	6801      	ldr	r1, [r0, #0]
 800ea38:	9602      	str	r6, [sp, #8]
 800ea3a:	b21b      	sxth	r3, r3
 800ea3c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800ea40:	b212      	sxth	r2, r2
 800ea42:	e9cd 5400 	strd	r5, r4, [sp]
 800ea46:	688c      	ldr	r4, [r1, #8]
 800ea48:	a905      	add	r1, sp, #20
 800ea4a:	47a0      	blx	r4
 800ea4c:	b00c      	add	sp, #48	; 0x30
 800ea4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea52:	bf00      	nop
 800ea54:	24006cec 	.word	0x24006cec
 800ea58:	0801f166 	.word	0x0801f166
 800ea5c:	0801f59c 	.word	0x0801f59c
 800ea60:	0801f1a2 	.word	0x0801f1a2
 800ea64:	24006c64 	.word	0x24006c64

0800ea68 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 800ea68:	2101      	movs	r1, #1
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	b510      	push	{r4, lr}
 800ea6e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800ea72:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800ea76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea7a:	4c0d      	ldr	r4, [pc, #52]	; (800eab0 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 800ea7c:	8082      	strh	r2, [r0, #4]
 800ea7e:	80c2      	strh	r2, [r0, #6]
 800ea80:	8102      	strh	r2, [r0, #8]
 800ea82:	8142      	strh	r2, [r0, #10]
 800ea84:	8182      	strh	r2, [r0, #12]
 800ea86:	81c2      	strh	r2, [r0, #14]
 800ea88:	8202      	strh	r2, [r0, #16]
 800ea8a:	8242      	strh	r2, [r0, #18]
 800ea8c:	61c2      	str	r2, [r0, #28]
 800ea8e:	8402      	strh	r2, [r0, #32]
 800ea90:	8442      	strh	r2, [r0, #34]	; 0x22
 800ea92:	6282      	str	r2, [r0, #40]	; 0x28
 800ea94:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800ea98:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800ea9a:	8601      	strh	r1, [r0, #48]	; 0x30
 800ea9c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800eaa0:	6004      	str	r4, [r0, #0]
 800eaa2:	8681      	strh	r1, [r0, #52]	; 0x34
 800eaa4:	86c1      	strh	r1, [r0, #54]	; 0x36
 800eaa6:	8702      	strh	r2, [r0, #56]	; 0x38
 800eaa8:	8742      	strh	r2, [r0, #58]	; 0x3a
 800eaaa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800eaae:	bd10      	pop	{r4, pc}
 800eab0:	0801f530 	.word	0x0801f530

0800eab4 <_ZN8touchgfx5ImageD1Ev>:
 800eab4:	4770      	bx	lr

0800eab6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800eab6:	b570      	push	{r4, r5, r6, lr}
 800eab8:	880b      	ldrh	r3, [r1, #0]
 800eaba:	460d      	mov	r5, r1
 800eabc:	4604      	mov	r4, r0
 800eabe:	84c3      	strh	r3, [r0, #38]	; 0x26
 800eac0:	4608      	mov	r0, r1
 800eac2:	f004 ffe1 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eac6:	4606      	mov	r6, r0
 800eac8:	4628      	mov	r0, r5
 800eaca:	f005 f817 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	4605      	mov	r5, r0
 800ead2:	b231      	sxth	r1, r6
 800ead4:	4620      	mov	r0, r4
 800ead6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead8:	4798      	blx	r3
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	b229      	sxth	r1, r5
 800eade:	4620      	mov	r0, r4
 800eae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eae6:	4718      	bx	r3

0800eae8 <_ZN8touchgfx5ImageD0Ev>:
 800eae8:	b510      	push	{r4, lr}
 800eaea:	4604      	mov	r4, r0
 800eaec:	212c      	movs	r1, #44	; 0x2c
 800eaee:	f00d fac7 	bl	801c080 <_ZdlPvj>
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	bd10      	pop	{r4, pc}

0800eaf6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800eaf6:	b510      	push	{r4, lr}
 800eaf8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800eafc:	4604      	mov	r4, r0
 800eafe:	2bff      	cmp	r3, #255	; 0xff
 800eb00:	d006      	beq.n	800eb10 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800eb02:	2300      	movs	r3, #0
 800eb04:	8003      	strh	r3, [r0, #0]
 800eb06:	8043      	strh	r3, [r0, #2]
 800eb08:	8083      	strh	r3, [r0, #4]
 800eb0a:	80c3      	strh	r3, [r0, #6]
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	bd10      	pop	{r4, pc}
 800eb10:	3126      	adds	r1, #38	; 0x26
 800eb12:	f005 f82d 	bl	8013b70 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800eb16:	e7f9      	b.n	800eb0c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800eb18 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800eb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	b088      	sub	sp, #32
 800eb20:	2500      	movs	r5, #0
 800eb22:	460f      	mov	r7, r1
 800eb24:	f854 3b26 	ldr.w	r3, [r4], #38
 800eb28:	a904      	add	r1, sp, #16
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eb32:	4798      	blx	r3
 800eb34:	4620      	mov	r0, r4
 800eb36:	f004 ffa7 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eb3a:	4680      	mov	r8, r0
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f004 ffdd 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eb42:	9506      	str	r5, [sp, #24]
 800eb44:	ad06      	add	r5, sp, #24
 800eb46:	f8ad 001e 	strh.w	r0, [sp, #30]
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800eb50:	4628      	mov	r0, r5
 800eb52:	f7fd fed9 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800eb56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	dd19      	ble.n	800eb92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800eb5e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	dd15      	ble.n	800eb92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800eb66:	4b0c      	ldr	r3, [pc, #48]	; (800eb98 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800eb6e:	b10a      	cbz	r2, 800eb74 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800eb70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800eb72:	b900      	cbnz	r0, 800eb76 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800eb74:	6898      	ldr	r0, [r3, #8]
 800eb76:	2701      	movs	r7, #1
 800eb78:	6801      	ldr	r1, [r0, #0]
 800eb7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800eb7e:	9702      	str	r7, [sp, #8]
 800eb80:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800eb84:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800eb88:	e9cd 5600 	strd	r5, r6, [sp]
 800eb8c:	688d      	ldr	r5, [r1, #8]
 800eb8e:	4621      	mov	r1, r4
 800eb90:	47a8      	blx	r5
 800eb92:	b008      	add	sp, #32
 800eb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb98:	24006c64 	.word	0x24006c64

0800eb9c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 800eb9c:	4770      	bx	lr

0800eb9e <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	4604      	mov	r4, r0
 800eba2:	2148      	movs	r1, #72	; 0x48
 800eba4:	f00d fa6c 	bl	801c080 <_ZdlPvj>
 800eba8:	4620      	mov	r0, r4
 800ebaa:	bd10      	pop	{r4, pc}

0800ebac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 800ebac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	b08c      	sub	sp, #48	; 0x30
 800ebb4:	4688      	mov	r8, r1
 800ebb6:	f7ff fc89 	bl	800e4cc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800ebba:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800ebbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	f000 809a 	beq.w	800ecfa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ebc6:	4e55      	ldr	r6, [pc, #340]	; (800ed1c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 800ebc8:	6832      	ldr	r2, [r6, #0]
 800ebca:	b92a      	cbnz	r2, 800ebd8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 800ebcc:	4b54      	ldr	r3, [pc, #336]	; (800ed20 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 800ebce:	21ae      	movs	r1, #174	; 0xae
 800ebd0:	4a54      	ldr	r2, [pc, #336]	; (800ed24 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ebd2:	4855      	ldr	r0, [pc, #340]	; (800ed28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 800ebd4:	f00d fb6a 	bl	801c2ac <__assert_func>
 800ebd8:	4d54      	ldr	r5, [pc, #336]	; (800ed2c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 800ebda:	8829      	ldrh	r1, [r5, #0]
 800ebdc:	4299      	cmp	r1, r3
 800ebde:	d803      	bhi.n	800ebe8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 800ebe0:	4b53      	ldr	r3, [pc, #332]	; (800ed30 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 800ebe2:	21af      	movs	r1, #175	; 0xaf
 800ebe4:	4a4f      	ldr	r2, [pc, #316]	; (800ed24 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ebe6:	e7f4      	b.n	800ebd2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 800ebe8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ebec:	f04f 0c02 	mov.w	ip, #2
 800ebf0:	4b50      	ldr	r3, [pc, #320]	; (800ed34 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 800ebf2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebfc:	f1be 0f01 	cmp.w	lr, #1
 800ec00:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ec04:	f04f 0300 	mov.w	r3, #0
 800ec08:	b208      	sxth	r0, r1
 800ec0a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800ec0e:	9303      	str	r3, [sp, #12]
 800ec10:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ec14:	d074      	beq.n	800ed00 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800ec16:	f1be 0f03 	cmp.w	lr, #3
 800ec1a:	d071      	beq.n	800ed00 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800ec1c:	1a52      	subs	r2, r2, r1
 800ec1e:	f8ad 3010 	strh.w	r3, [sp, #16]
 800ec22:	f8ad 0012 	strh.w	r0, [sp, #18]
 800ec26:	fb92 f2fc 	sdiv	r2, r2, ip
 800ec2a:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ec2e:	f10d 090c 	add.w	r9, sp, #12
 800ec32:	f10d 0a14 	add.w	sl, sp, #20
 800ec36:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ec3a:	e88a 0003 	stmia.w	sl, {r0, r1}
 800ec3e:	4641      	mov	r1, r8
 800ec40:	4650      	mov	r0, sl
 800ec42:	f7fd fe61 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 800ec46:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dd55      	ble.n	800ecfa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ec4e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	dd51      	ble.n	800ecfa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ec56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ec60:	4620      	mov	r0, r4
 800ec62:	1a9b      	subs	r3, r3, r2
 800ec64:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800ec68:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ec6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ec70:	1a9b      	subs	r3, r3, r2
 800ec72:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7a:	4798      	blx	r3
 800ec7c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d047      	beq.n	800ed14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 800ec84:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800ec88:	6833      	ldr	r3, [r6, #0]
 800ec8a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d09c      	beq.n	800ebcc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 800ec92:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800ec94:	882d      	ldrh	r5, [r5, #0]
 800ec96:	428d      	cmp	r5, r1
 800ec98:	d9a2      	bls.n	800ebe0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 800ec9a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ec9e:	6812      	ldr	r2, [r2, #0]
 800eca0:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 800eca4:	785b      	ldrb	r3, [r3, #1]
 800eca6:	9209      	str	r2, [sp, #36]	; 0x24
 800eca8:	f3c3 0501 	ubfx	r5, r3, #0, #2
 800ecac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ecb0:	9707      	str	r7, [sp, #28]
 800ecb2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	f88d 5020 	strb.w	r5, [sp, #32]
 800ecbc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800ecc0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ecc4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ecc8:	4b1b      	ldr	r3, [pc, #108]	; (800ed38 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 800ecca:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800ecd4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ecd8:	b10a      	cbz	r2, 800ecde <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 800ecda:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ecdc:	b904      	cbnz	r4, 800ece0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 800ecde:	689c      	ldr	r4, [r3, #8]
 800ece0:	4b16      	ldr	r3, [pc, #88]	; (800ed3c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 800ece2:	6818      	ldr	r0, [r3, #0]
 800ece4:	f7f5 fdba 	bl	800485c <_ZNK8touchgfx5Texts7getTextEt>
 800ece8:	ab07      	add	r3, sp, #28
 800ecea:	9001      	str	r0, [sp, #4]
 800ecec:	4620      	mov	r0, r4
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	4653      	mov	r3, sl
 800ecf2:	e899 0006 	ldmia.w	r9, {r1, r2}
 800ecf6:	f7f5 fd63 	bl	80047c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800ecfa:	b00c      	add	sp, #48	; 0x30
 800ecfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed00:	1a5b      	subs	r3, r3, r1
 800ed02:	f8ad 0010 	strh.w	r0, [sp, #16]
 800ed06:	f8ad 2012 	strh.w	r2, [sp, #18]
 800ed0a:	fb93 f3fc 	sdiv	r3, r3, ip
 800ed0e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ed12:	e78c      	b.n	800ec2e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 800ed14:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800ed18:	e7b6      	b.n	800ec88 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 800ed1a:	bf00      	nop
 800ed1c:	24006cb4 	.word	0x24006cb4
 800ed20:	0801e078 	.word	0x0801e078
 800ed24:	0801f6a8 	.word	0x0801f6a8
 800ed28:	0801e106 	.word	0x0801e106
 800ed2c:	24006cb8 	.word	0x24006cb8
 800ed30:	0801e12f 	.word	0x0801e12f
 800ed34:	24006cbc 	.word	0x24006cbc
 800ed38:	24006c64 	.word	0x24006c64
 800ed3c:	24006cc0 	.word	0x24006cc0

0800ed40 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 800ed40:	2101      	movs	r1, #1
 800ed42:	2200      	movs	r2, #0
 800ed44:	b510      	push	{r4, lr}
 800ed46:	4c13      	ldr	r4, [pc, #76]	; (800ed94 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 800ed48:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800ed4c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800ed50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ed54:	6004      	str	r4, [r0, #0]
 800ed56:	4c10      	ldr	r4, [pc, #64]	; (800ed98 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800ed58:	8082      	strh	r2, [r0, #4]
 800ed5a:	80c2      	strh	r2, [r0, #6]
 800ed5c:	8102      	strh	r2, [r0, #8]
 800ed5e:	8142      	strh	r2, [r0, #10]
 800ed60:	8182      	strh	r2, [r0, #12]
 800ed62:	81c2      	strh	r2, [r0, #14]
 800ed64:	8202      	strh	r2, [r0, #16]
 800ed66:	8242      	strh	r2, [r0, #18]
 800ed68:	61c2      	str	r2, [r0, #28]
 800ed6a:	8402      	strh	r2, [r0, #32]
 800ed6c:	8442      	strh	r2, [r0, #34]	; 0x22
 800ed6e:	6282      	str	r2, [r0, #40]	; 0x28
 800ed70:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800ed74:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800ed76:	8601      	strh	r1, [r0, #48]	; 0x30
 800ed78:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800ed7c:	6344      	str	r4, [r0, #52]	; 0x34
 800ed7e:	8701      	strh	r1, [r0, #56]	; 0x38
 800ed80:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800ed84:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800ed88:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800ed8c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800ed90:	bd10      	pop	{r4, pc}
 800ed92:	bf00      	nop
 800ed94:	0801f640 	.word	0x0801f640
 800ed98:	0801db74 	.word	0x0801db74

0800ed9c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	6803      	ldr	r3, [r0, #0]
 800eda0:	460c      	mov	r4, r1
 800eda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda4:	4798      	blx	r3
 800eda6:	1b03      	subs	r3, r0, r4
 800eda8:	4258      	negs	r0, r3
 800edaa:	4158      	adcs	r0, r3
 800edac:	bd10      	pop	{r4, pc}
	...

0800edb0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800edb0:	4b01      	ldr	r3, [pc, #4]	; (800edb8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800edb2:	6019      	str	r1, [r3, #0]
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	24006c6c 	.word	0x24006c6c

0800edbc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800edbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc0:	4696      	mov	lr, r2
 800edc2:	b097      	sub	sp, #92	; 0x5c
 800edc4:	4605      	mov	r5, r0
 800edc6:	4614      	mov	r4, r2
 800edc8:	460e      	mov	r6, r1
 800edca:	461f      	mov	r7, r3
 800edcc:	f10d 0c1c 	add.w	ip, sp, #28
 800edd0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800edd4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800edd8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800eddc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ede0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ede4:	f8de 3000 	ldr.w	r3, [lr]
 800ede8:	f104 0e14 	add.w	lr, r4, #20
 800edec:	f8cc 3000 	str.w	r3, [ip]
 800edf0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800edf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edfc:	f8de 3000 	ldr.w	r3, [lr]
 800ee00:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ee04:	f8cc 3000 	str.w	r3, [ip]
 800ee08:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ee0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee14:	f8de 3000 	ldr.w	r3, [lr]
 800ee18:	4631      	mov	r1, r6
 800ee1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	f8cc 3000 	str.w	r3, [ip]
 800ee22:	682b      	ldr	r3, [r5, #0]
 800ee24:	9201      	str	r2, [sp, #4]
 800ee26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee28:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee2c:	9200      	str	r2, [sp, #0]
 800ee2e:	aa07      	add	r2, sp, #28
 800ee30:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ee34:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800ee38:	463b      	mov	r3, r7
 800ee3a:	47d8      	blx	fp
 800ee3c:	46a6      	mov	lr, r4
 800ee3e:	f10d 0c1c 	add.w	ip, sp, #28
 800ee42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee4a:	f8de 3000 	ldr.w	r3, [lr]
 800ee4e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ee52:	343c      	adds	r4, #60	; 0x3c
 800ee54:	f8cc 3000 	str.w	r3, [ip]
 800ee58:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ee5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee64:	f8de 3000 	ldr.w	r3, [lr]
 800ee68:	f8cc 3000 	str.w	r3, [ip]
 800ee6c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ee70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	4631      	mov	r1, r6
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f8cc 3000 	str.w	r3, [ip]
 800ee80:	682b      	ldr	r3, [r5, #0]
 800ee82:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ee86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee88:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee8c:	9201      	str	r2, [sp, #4]
 800ee8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee90:	9200      	str	r2, [sp, #0]
 800ee92:	aa07      	add	r2, sp, #28
 800ee94:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ee96:	463b      	mov	r3, r7
 800ee98:	47a0      	blx	r4
 800ee9a:	b017      	add	sp, #92	; 0x5c
 800ee9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eea0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800eea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea4:	b08d      	sub	sp, #52	; 0x34
 800eea6:	4688      	mov	r8, r1
 800eea8:	f8d3 c000 	ldr.w	ip, [r3]
 800eeac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eeae:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800eeb2:	680f      	ldr	r7, [r1, #0]
 800eeb4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800eeb8:	eba7 070c 	sub.w	r7, r7, ip
 800eebc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800eec0:	edd3 6a07 	vldr	s13, [r3, #28]
 800eec4:	42bc      	cmp	r4, r7
 800eec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eec8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800eecc:	bfa8      	it	ge
 800eece:	463c      	movge	r4, r7
 800eed0:	f9b1 9000 	ldrsh.w	r9, [r1]
 800eed4:	f9ba 1000 	ldrsh.w	r1, [sl]
 800eed8:	ee07 4a90 	vmov	s15, r4
 800eedc:	eb09 0e0c 	add.w	lr, r9, ip
 800eee0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800eee4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800eee8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800eeec:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800eef0:	4571      	cmp	r1, lr
 800eef2:	ee25 4a04 	vmul.f32	s8, s10, s8
 800eef6:	ee65 4a24 	vmul.f32	s9, s10, s9
 800eefa:	ee25 5a27 	vmul.f32	s10, s10, s15
 800eefe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef02:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800ef06:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ef0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ef0e:	ee36 0a84 	vadd.f32	s0, s13, s8
 800ef12:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ef16:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ef1a:	f340 808c 	ble.w	800f036 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800ef1e:	eba1 060e 	sub.w	r6, r1, lr
 800ef22:	fb96 f5f4 	sdiv	r5, r6, r4
 800ef26:	ee07 5a10 	vmov	s14, r5
 800ef2a:	2d00      	cmp	r5, #0
 800ef2c:	fb04 6615 	mls	r6, r4, r5, r6
 800ef30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef34:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ef38:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ef3c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800ef40:	dd12      	ble.n	800ef68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800ef42:	ee70 6a44 	vsub.f32	s13, s0, s8
 800ef46:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800ef4a:	ee31 2a45 	vsub.f32	s4, s2, s10
 800ef4e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	bf14      	ite	ne
 800ef58:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800ef5c:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ef60:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ef64:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ef68:	fb05 f204 	mul.w	r2, r5, r4
 800ef6c:	1abf      	subs	r7, r7, r2
 800ef6e:	4494      	add	ip, r2
 800ef70:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ef74:	4411      	add	r1, r2
 800ef76:	eb09 020c 	add.w	r2, r9, ip
 800ef7a:	b209      	sxth	r1, r1
 800ef7c:	443a      	add	r2, r7
 800ef7e:	428a      	cmp	r2, r1
 800ef80:	bfc4      	itt	gt
 800ef82:	eba1 0209 	subgt.w	r2, r1, r9
 800ef86:	eba2 070c 	subgt.w	r7, r2, ip
 800ef8a:	2f00      	cmp	r7, #0
 800ef8c:	dd50      	ble.n	800f030 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800ef8e:	fb97 f1f4 	sdiv	r1, r7, r4
 800ef92:	fb04 7211 	mls	r2, r4, r1, r7
 800ef96:	b90a      	cbnz	r2, 800ef9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800ef98:	3901      	subs	r1, #1
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800efa0:	6840      	ldr	r0, [r0, #4]
 800efa2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800efa6:	44b6      	add	lr, r6
 800efa8:	f8d0 a000 	ldr.w	sl, [r0]
 800efac:	2900      	cmp	r1, #0
 800efae:	bfcc      	ite	gt
 800efb0:	46a1      	movgt	r9, r4
 800efb2:	4691      	movle	r9, r2
 800efb4:	900b      	str	r0, [sp, #44]	; 0x2c
 800efb6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800efb8:	fb04 e505 	mla	r5, r4, r5, lr
 800efbc:	eef0 6a42 	vmov.f32	s13, s4
 800efc0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800efc4:	9008      	str	r0, [sp, #32]
 800efc6:	eeb0 7a61 	vmov.f32	s14, s3
 800efca:	9818      	ldr	r0, [sp, #96]	; 0x60
 800efcc:	695b      	ldr	r3, [r3, #20]
 800efce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800efd2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800efd6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800efda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800efdc:	445b      	add	r3, fp
 800efde:	9307      	str	r3, [sp, #28]
 800efe0:	ee16 3a90 	vmov	r3, s13
 800efe4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800efe8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800efec:	ee21 3a23 	vmul.f32	s6, s2, s7
 800eff0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800eff4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800eff8:	ee17 7a90 	vmov	r7, s15
 800effc:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f000:	fb97 f7f4 	sdiv	r7, r7, r4
 800f004:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f008:	ee17 ca90 	vmov	ip, s15
 800f00c:	fb9c fcf4 	sdiv	ip, ip, r4
 800f010:	fb0c 3306 	mla	r3, ip, r6, r3
 800f014:	9302      	str	r3, [sp, #8]
 800f016:	ee17 3a10 	vmov	r3, s14
 800f01a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800f01e:	fb07 3706 	mla	r7, r7, r6, r3
 800f022:	eba9 0306 	sub.w	r3, r9, r6
 800f026:	e9cd 4700 	strd	r4, r7, [sp]
 800f02a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800f02e:	47a0      	blx	r4
 800f030:	b00d      	add	sp, #52	; 0x34
 800f032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f036:	2500      	movs	r5, #0
 800f038:	462e      	mov	r6, r5
 800f03a:	e799      	b.n	800ef70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800f03c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f040:	b0db      	sub	sp, #364	; 0x16c
 800f042:	461d      	mov	r5, r3
 800f044:	4614      	mov	r4, r2
 800f046:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800f04a:	910f      	str	r1, [sp, #60]	; 0x3c
 800f04c:	4629      	mov	r1, r5
 800f04e:	930a      	str	r3, [sp, #40]	; 0x28
 800f050:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800f054:	9009      	str	r0, [sp, #36]	; 0x24
 800f056:	930b      	str	r3, [sp, #44]	; 0x2c
 800f058:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800f05c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800f060:	9310      	str	r3, [sp, #64]	; 0x40
 800f062:	6803      	ldr	r3, [r0, #0]
 800f064:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800f066:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f06a:	47b8      	blx	r7
 800f06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06e:	6058      	str	r0, [r3, #4]
 800f070:	2800      	cmp	r0, #0
 800f072:	f000 83a1 	beq.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f076:	682b      	ldr	r3, [r5, #0]
 800f078:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f07c:	ed94 7a02 	vldr	s14, [r4, #8]
 800f080:	9314      	str	r3, [sp, #80]	; 0x50
 800f082:	686b      	ldr	r3, [r5, #4]
 800f084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f088:	9315      	str	r3, [sp, #84]	; 0x54
 800f08a:	4bc1      	ldr	r3, [pc, #772]	; (800f390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800f08c:	7819      	ldrb	r1, [r3, #0]
 800f08e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f092:	2900      	cmp	r1, #0
 800f094:	bf16      	itet	ne
 800f096:	4619      	movne	r1, r3
 800f098:	4611      	moveq	r1, r2
 800f09a:	4613      	movne	r3, r2
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	9116      	str	r1, [sp, #88]	; 0x58
 800f0a2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800f0a6:	f240 8387 	bls.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0aa:	ed94 7a07 	vldr	s14, [r4, #28]
 800f0ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b6:	f240 837f 	bls.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0ba:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f0be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c6:	f240 8377 	bls.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0ca:	6822      	ldr	r2, [r4, #0]
 800f0cc:	4bb1      	ldr	r3, [pc, #708]	; (800f394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	f2c0 8372 	blt.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0d4:	49b0      	ldr	r1, [pc, #704]	; (800f398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800f0d6:	6963      	ldr	r3, [r4, #20]
 800f0d8:	428a      	cmp	r2, r1
 800f0da:	f300 836d 	bgt.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0de:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f0e2:	48ae      	ldr	r0, [pc, #696]	; (800f39c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800f0e4:	33ff      	adds	r3, #255	; 0xff
 800f0e6:	4283      	cmp	r3, r0
 800f0e8:	f200 8366 	bhi.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f0ee:	4dac      	ldr	r5, [pc, #688]	; (800f3a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800f0f0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f0f4:	33ff      	adds	r3, #255	; 0xff
 800f0f6:	42ab      	cmp	r3, r5
 800f0f8:	f200 835e 	bhi.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0fc:	6862      	ldr	r2, [r4, #4]
 800f0fe:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800f102:	33ff      	adds	r3, #255	; 0xff
 800f104:	4283      	cmp	r3, r0
 800f106:	f200 8357 	bhi.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f10a:	69a1      	ldr	r1, [r4, #24]
 800f10c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800f110:	33ff      	adds	r3, #255	; 0xff
 800f112:	4283      	cmp	r3, r0
 800f114:	f200 8350 	bhi.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f11a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800f11e:	30ff      	adds	r0, #255	; 0xff
 800f120:	42a8      	cmp	r0, r5
 800f122:	f200 8349 	bhi.w	800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f126:	428a      	cmp	r2, r1
 800f128:	f280 8110 	bge.w	800f34c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800f12c:	429a      	cmp	r2, r3
 800f12e:	f300 8119 	bgt.w	800f364 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800f132:	4299      	cmp	r1, r3
 800f134:	f280 811d 	bge.w	800f372 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800f138:	2502      	movs	r5, #2
 800f13a:	2701      	movs	r7, #1
 800f13c:	46a9      	mov	r9, r5
 800f13e:	46b8      	mov	r8, r7
 800f140:	f04f 0a00 	mov.w	sl, #0
 800f144:	4621      	mov	r1, r4
 800f146:	a849      	add	r0, sp, #292	; 0x124
 800f148:	f003 fcb2 	bl	8012ab0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800f14c:	4622      	mov	r2, r4
 800f14e:	4653      	mov	r3, sl
 800f150:	a949      	add	r1, sp, #292	; 0x124
 800f152:	f8cd 9000 	str.w	r9, [sp]
 800f156:	a819      	add	r0, sp, #100	; 0x64
 800f158:	f003 fdda 	bl	8012d10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f15c:	4622      	mov	r2, r4
 800f15e:	4653      	mov	r3, sl
 800f160:	a949      	add	r1, sp, #292	; 0x124
 800f162:	f8cd 8000 	str.w	r8, [sp]
 800f166:	a829      	add	r0, sp, #164	; 0xa4
 800f168:	f003 fdd2 	bl	8012d10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f16c:	4643      	mov	r3, r8
 800f16e:	4622      	mov	r2, r4
 800f170:	a949      	add	r1, sp, #292	; 0x124
 800f172:	f8cd 9000 	str.w	r9, [sp]
 800f176:	a839      	add	r0, sp, #228	; 0xe4
 800f178:	f003 fdca 	bl	8012d10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f17c:	42af      	cmp	r7, r5
 800f17e:	af12      	add	r7, sp, #72	; 0x48
 800f180:	bfb7      	itett	lt
 800f182:	2300      	movlt	r3, #0
 800f184:	2301      	movge	r3, #1
 800f186:	ad29      	addlt	r5, sp, #164	; 0xa4
 800f188:	ac19      	addlt	r4, sp, #100	; 0x64
 800f18a:	bfb1      	iteee	lt
 800f18c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f18e:	ad19      	addge	r5, sp, #100	; 0x64
 800f190:	930e      	strge	r3, [sp, #56]	; 0x38
 800f192:	ac29      	addge	r4, sp, #164	; 0xa4
 800f194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f196:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f19a:	e887 0003 	stmia.w	r7, {r0, r1}
 800f19e:	b928      	cbnz	r0, 800f1ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800f1a0:	4b80      	ldr	r3, [pc, #512]	; (800f3a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	6803      	ldr	r3, [r0, #0]
 800f1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1a8:	4798      	blx	r3
 800f1aa:	6038      	str	r0, [r7, #0]
 800f1ac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f1ae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f1b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f1b6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f1b8:	930c      	str	r3, [sp, #48]	; 0x30
 800f1ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f1bc:	6963      	ldr	r3, [r4, #20]
 800f1be:	440b      	add	r3, r1
 800f1c0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f1c4:	4408      	add	r0, r1
 800f1c6:	b200      	sxth	r0, r0
 800f1c8:	4283      	cmp	r3, r0
 800f1ca:	900d      	str	r0, [sp, #52]	; 0x34
 800f1cc:	f280 80dd 	bge.w	800f38a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	da08      	bge.n	800f1e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f1d4:	2a00      	cmp	r2, #0
 800f1d6:	dd06      	ble.n	800f1e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f1d8:	1acb      	subs	r3, r1, r3
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	f2c0 80e4 	blt.w	800f3a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f300 80e2 	bgt.w	800f3aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800f1e6:	6967      	ldr	r7, [r4, #20]
 800f1e8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f1ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1ee:	443b      	add	r3, r7
 800f1f0:	461f      	mov	r7, r3
 800f1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1f4:	1bdf      	subs	r7, r3, r7
 800f1f6:	4297      	cmp	r7, r2
 800f1f8:	bfa8      	it	ge
 800f1fa:	4617      	movge	r7, r2
 800f1fc:	2f00      	cmp	r7, #0
 800f1fe:	f340 8166 	ble.w	800f4ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800f202:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f204:	6829      	ldr	r1, [r5, #0]
 800f206:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f20a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f20e:	4411      	add	r1, r2
 800f210:	6820      	ldr	r0, [r4, #0]
 800f212:	4299      	cmp	r1, r3
 800f214:	dd1a      	ble.n	800f24c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f216:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f21a:	4402      	add	r2, r0
 800f21c:	440b      	add	r3, r1
 800f21e:	b21b      	sxth	r3, r3
 800f220:	429a      	cmp	r2, r3
 800f222:	dc13      	bgt.n	800f24c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f226:	a912      	add	r1, sp, #72	; 0x48
 800f228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f22a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	9206      	str	r2, [sp, #24]
 800f230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f232:	9500      	str	r5, [sp, #0]
 800f234:	9205      	str	r2, [sp, #20]
 800f236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f238:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f23c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f23e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f242:	aa49      	add	r2, sp, #292	; 0x124
 800f244:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800f248:	4623      	mov	r3, r4
 800f24a:	47c8      	blx	r9
 800f24c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f250:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f254:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f25c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f260:	68a1      	ldr	r1, [r4, #8]
 800f262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f266:	ed94 6a08 	vldr	s12, [r4, #32]
 800f26a:	edd4 6a07 	vldr	s13, [r4, #28]
 800f26e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f272:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f276:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f27a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f27e:	edc4 6a07 	vstr	s13, [r4, #28]
 800f282:	441a      	add	r2, r3
 800f284:	6963      	ldr	r3, [r4, #20]
 800f286:	3301      	adds	r3, #1
 800f288:	6022      	str	r2, [r4, #0]
 800f28a:	6163      	str	r3, [r4, #20]
 800f28c:	69a3      	ldr	r3, [r4, #24]
 800f28e:	3b01      	subs	r3, #1
 800f290:	61a3      	str	r3, [r4, #24]
 800f292:	6923      	ldr	r3, [r4, #16]
 800f294:	440b      	add	r3, r1
 800f296:	68e1      	ldr	r1, [r4, #12]
 800f298:	428b      	cmp	r3, r1
 800f29a:	6123      	str	r3, [r4, #16]
 800f29c:	db15      	blt.n	800f2ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800f29e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f2a2:	3201      	adds	r2, #1
 800f2a4:	1a5b      	subs	r3, r3, r1
 800f2a6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f2aa:	6022      	str	r2, [r4, #0]
 800f2ac:	6123      	str	r3, [r4, #16]
 800f2ae:	edc4 6a07 	vstr	s13, [r4, #28]
 800f2b2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f2b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f2ba:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f2be:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f2c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2c6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f2ca:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f2ce:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f2d2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f2d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2da:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f2de:	68a9      	ldr	r1, [r5, #8]
 800f2e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2e4:	ed95 6a08 	vldr	s12, [r5, #32]
 800f2e8:	edd5 6a07 	vldr	s13, [r5, #28]
 800f2ec:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f2f0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f2f4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f2f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f2fc:	edc5 6a07 	vstr	s13, [r5, #28]
 800f300:	441a      	add	r2, r3
 800f302:	696b      	ldr	r3, [r5, #20]
 800f304:	3301      	adds	r3, #1
 800f306:	602a      	str	r2, [r5, #0]
 800f308:	616b      	str	r3, [r5, #20]
 800f30a:	69ab      	ldr	r3, [r5, #24]
 800f30c:	3b01      	subs	r3, #1
 800f30e:	61ab      	str	r3, [r5, #24]
 800f310:	692b      	ldr	r3, [r5, #16]
 800f312:	440b      	add	r3, r1
 800f314:	68e9      	ldr	r1, [r5, #12]
 800f316:	428b      	cmp	r3, r1
 800f318:	612b      	str	r3, [r5, #16]
 800f31a:	db15      	blt.n	800f348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800f31c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f320:	3201      	adds	r2, #1
 800f322:	1a5b      	subs	r3, r3, r1
 800f324:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f328:	602a      	str	r2, [r5, #0]
 800f32a:	612b      	str	r3, [r5, #16]
 800f32c:	edc5 6a07 	vstr	s13, [r5, #28]
 800f330:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f334:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f338:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f33c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f340:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f344:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f348:	3f01      	subs	r7, #1
 800f34a:	e757      	b.n	800f1fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800f34c:	4299      	cmp	r1, r3
 800f34e:	dc13      	bgt.n	800f378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800f350:	429a      	cmp	r2, r3
 800f352:	da14      	bge.n	800f37e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800f354:	2502      	movs	r5, #2
 800f356:	2703      	movs	r7, #3
 800f358:	f04f 0800 	mov.w	r8, #0
 800f35c:	46a9      	mov	r9, r5
 800f35e:	f04f 0a01 	mov.w	sl, #1
 800f362:	e6ef      	b.n	800f144 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f364:	2501      	movs	r5, #1
 800f366:	2700      	movs	r7, #0
 800f368:	46a9      	mov	r9, r5
 800f36a:	46b8      	mov	r8, r7
 800f36c:	f04f 0a02 	mov.w	sl, #2
 800f370:	e6e8      	b.n	800f144 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f372:	2501      	movs	r5, #1
 800f374:	2702      	movs	r7, #2
 800f376:	e6e1      	b.n	800f13c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800f378:	2500      	movs	r5, #0
 800f37a:	2701      	movs	r7, #1
 800f37c:	e7f4      	b.n	800f368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800f37e:	2702      	movs	r7, #2
 800f380:	2503      	movs	r5, #3
 800f382:	f04f 0900 	mov.w	r9, #0
 800f386:	46b8      	mov	r8, r7
 800f388:	e7e9      	b.n	800f35e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800f38a:	4613      	mov	r3, r2
 800f38c:	e728      	b.n	800f1e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800f38e:	bf00      	nop
 800f390:	24006c5c 	.word	0x24006c5c
 800f394:	fffd8f01 	.word	0xfffd8f01
 800f398:	00027100 	.word	0x00027100
 800f39c:	0004e1ff 	.word	0x0004e1ff
 800f3a0:	0004e1fe 	.word	0x0004e1fe
 800f3a4:	24006c64 	.word	0x24006c64
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f3ac:	469e      	mov	lr, r3
 800f3ae:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f3b0:	469c      	mov	ip, r3
 800f3b2:	9111      	str	r1, [sp, #68]	; 0x44
 800f3b4:	f04f 0900 	mov.w	r9, #0
 800f3b8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800f3bc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800f3c0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800f3c4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800f3c8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800f3cc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f3d0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800f3d4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800f3d8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800f3dc:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800f3e0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800f3e4:	f1bc 0f00 	cmp.w	ip, #0
 800f3e8:	d147      	bne.n	800f47a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800f3ea:	eb03 0c07 	add.w	ip, r3, r7
 800f3ee:	1ad7      	subs	r7, r2, r3
 800f3f0:	f1b9 0f00 	cmp.w	r9, #0
 800f3f4:	d009      	beq.n	800f40a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800f3f6:	9029      	str	r0, [sp, #164]	; 0xa4
 800f3f8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800f3fc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800f400:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800f404:	912d      	str	r1, [sp, #180]	; 0xb4
 800f406:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800f40a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f40c:	f04f 0800 	mov.w	r8, #0
 800f410:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f414:	9111      	str	r1, [sp, #68]	; 0x44
 800f416:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f41a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f41e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f422:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f426:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f42a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f42e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f432:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f436:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f43a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f43e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f442:	f1be 0f00 	cmp.w	lr, #0
 800f446:	d031      	beq.n	800f4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800f448:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f44a:	4450      	add	r0, sl
 800f44c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f450:	4431      	add	r1, r6
 800f452:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f456:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f45a:	4549      	cmp	r1, r9
 800f45c:	db08      	blt.n	800f470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800f45e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f462:	3001      	adds	r0, #1
 800f464:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f468:	eba1 0109 	sub.w	r1, r1, r9
 800f46c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f470:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f474:	f04f 0801 	mov.w	r8, #1
 800f478:	e7e3      	b.n	800f442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800f47a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f47c:	4450      	add	r0, sl
 800f47e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f482:	4431      	add	r1, r6
 800f484:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f488:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f48c:	4541      	cmp	r1, r8
 800f48e:	db08      	blt.n	800f4a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800f490:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f494:	3001      	adds	r0, #1
 800f496:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f49a:	eba1 0108 	sub.w	r1, r1, r8
 800f49e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f4a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f4a6:	f04f 0901 	mov.w	r9, #1
 800f4aa:	e79b      	b.n	800f3e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800f4ac:	449c      	add	ip, r3
 800f4ae:	1aff      	subs	r7, r7, r3
 800f4b0:	f1b8 0f00 	cmp.w	r8, #0
 800f4b4:	d009      	beq.n	800f4ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800f4b6:	9019      	str	r0, [sp, #100]	; 0x64
 800f4b8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f4bc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f4c0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f4c4:	911d      	str	r1, [sp, #116]	; 0x74
 800f4c6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f4ca:	1ad2      	subs	r2, r2, r3
 800f4cc:	e68b      	b.n	800f1e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4d0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f000 80d1 	beq.w	800f67a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800f4d8:	ad19      	add	r5, sp, #100	; 0x64
 800f4da:	ac39      	add	r4, sp, #228	; 0xe4
 800f4dc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f4de:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f4e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f4e6:	930c      	str	r3, [sp, #48]	; 0x30
 800f4e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f4ea:	6963      	ldr	r3, [r4, #20]
 800f4ec:	440b      	add	r3, r1
 800f4ee:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f4f2:	4408      	add	r0, r1
 800f4f4:	b200      	sxth	r0, r0
 800f4f6:	4283      	cmp	r3, r0
 800f4f8:	900d      	str	r0, [sp, #52]	; 0x34
 800f4fa:	f280 80c1 	bge.w	800f680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800f4fe:	428b      	cmp	r3, r1
 800f500:	da08      	bge.n	800f514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f502:	2a00      	cmp	r2, #0
 800f504:	dd06      	ble.n	800f514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f506:	1acb      	subs	r3, r1, r3
 800f508:	429a      	cmp	r2, r3
 800f50a:	f2c0 80bb 	blt.w	800f684 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f300 80b9 	bgt.w	800f686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800f514:	6967      	ldr	r7, [r4, #20]
 800f516:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f51a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f51c:	443b      	add	r3, r7
 800f51e:	461f      	mov	r7, r3
 800f520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f522:	1bdf      	subs	r7, r3, r7
 800f524:	4297      	cmp	r7, r2
 800f526:	bfa8      	it	ge
 800f528:	4617      	movge	r7, r2
 800f52a:	2f00      	cmp	r7, #0
 800f52c:	f340 813c 	ble.w	800f7a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800f530:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f532:	6829      	ldr	r1, [r5, #0]
 800f534:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f538:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f53c:	4411      	add	r1, r2
 800f53e:	6820      	ldr	r0, [r4, #0]
 800f540:	4299      	cmp	r1, r3
 800f542:	dd1a      	ble.n	800f57a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f544:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f548:	4402      	add	r2, r0
 800f54a:	440b      	add	r3, r1
 800f54c:	b21b      	sxth	r3, r3
 800f54e:	429a      	cmp	r2, r3
 800f550:	dc13      	bgt.n	800f57a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f554:	a912      	add	r1, sp, #72	; 0x48
 800f556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	9206      	str	r2, [sp, #24]
 800f55e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f560:	9500      	str	r5, [sp, #0]
 800f562:	9205      	str	r2, [sp, #20]
 800f564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f566:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f56a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f56c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f570:	aa49      	add	r2, sp, #292	; 0x124
 800f572:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800f576:	4623      	mov	r3, r4
 800f578:	47c8      	blx	r9
 800f57a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f57e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f582:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f58a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f58e:	68a1      	ldr	r1, [r4, #8]
 800f590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f594:	ed94 6a08 	vldr	s12, [r4, #32]
 800f598:	edd4 6a07 	vldr	s13, [r4, #28]
 800f59c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f5a0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f5a4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f5a8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f5ac:	edc4 6a07 	vstr	s13, [r4, #28]
 800f5b0:	441a      	add	r2, r3
 800f5b2:	6963      	ldr	r3, [r4, #20]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	6022      	str	r2, [r4, #0]
 800f5b8:	6163      	str	r3, [r4, #20]
 800f5ba:	69a3      	ldr	r3, [r4, #24]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	61a3      	str	r3, [r4, #24]
 800f5c0:	6923      	ldr	r3, [r4, #16]
 800f5c2:	440b      	add	r3, r1
 800f5c4:	68e1      	ldr	r1, [r4, #12]
 800f5c6:	428b      	cmp	r3, r1
 800f5c8:	6123      	str	r3, [r4, #16]
 800f5ca:	db15      	blt.n	800f5f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800f5cc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f5d0:	3201      	adds	r2, #1
 800f5d2:	1a5b      	subs	r3, r3, r1
 800f5d4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f5d8:	6022      	str	r2, [r4, #0]
 800f5da:	6123      	str	r3, [r4, #16]
 800f5dc:	edc4 6a07 	vstr	s13, [r4, #28]
 800f5e0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f5e4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f5e8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f5ec:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5f4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f5f8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f5fc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f600:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f604:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f608:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f60c:	68a9      	ldr	r1, [r5, #8]
 800f60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f612:	ed95 6a08 	vldr	s12, [r5, #32]
 800f616:	edd5 6a07 	vldr	s13, [r5, #28]
 800f61a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f61e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f622:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f626:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f62a:	edc5 6a07 	vstr	s13, [r5, #28]
 800f62e:	441a      	add	r2, r3
 800f630:	696b      	ldr	r3, [r5, #20]
 800f632:	3301      	adds	r3, #1
 800f634:	602a      	str	r2, [r5, #0]
 800f636:	616b      	str	r3, [r5, #20]
 800f638:	69ab      	ldr	r3, [r5, #24]
 800f63a:	3b01      	subs	r3, #1
 800f63c:	61ab      	str	r3, [r5, #24]
 800f63e:	692b      	ldr	r3, [r5, #16]
 800f640:	440b      	add	r3, r1
 800f642:	68e9      	ldr	r1, [r5, #12]
 800f644:	428b      	cmp	r3, r1
 800f646:	612b      	str	r3, [r5, #16]
 800f648:	db15      	blt.n	800f676 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800f64a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f64e:	3201      	adds	r2, #1
 800f650:	1a5b      	subs	r3, r3, r1
 800f652:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f656:	602a      	str	r2, [r5, #0]
 800f658:	612b      	str	r3, [r5, #16]
 800f65a:	edc5 6a07 	vstr	s13, [r5, #28]
 800f65e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f662:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f666:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f66a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f66e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f672:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f676:	3f01      	subs	r7, #1
 800f678:	e757      	b.n	800f52a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800f67a:	ad39      	add	r5, sp, #228	; 0xe4
 800f67c:	ac19      	add	r4, sp, #100	; 0x64
 800f67e:	e72d      	b.n	800f4dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800f680:	4613      	mov	r3, r2
 800f682:	e744      	b.n	800f50e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800f684:	4613      	mov	r3, r2
 800f686:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800f688:	469e      	mov	lr, r3
 800f68a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800f68e:	461f      	mov	r7, r3
 800f690:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f694:	f04f 0900 	mov.w	r9, #0
 800f698:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800f69c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800f6a0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800f6a4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800f6a8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800f6ac:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800f6ae:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800f6b2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800f6b6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800f6ba:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800f6be:	960e      	str	r6, [sp, #56]	; 0x38
 800f6c0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800f6c4:	2f00      	cmp	r7, #0
 800f6c6:	d146      	bne.n	800f756 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800f6c8:	449c      	add	ip, r3
 800f6ca:	1ad7      	subs	r7, r2, r3
 800f6cc:	f1b9 0f00 	cmp.w	r9, #0
 800f6d0:	d009      	beq.n	800f6e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800f6d2:	9039      	str	r0, [sp, #228]	; 0xe4
 800f6d4:	913d      	str	r1, [sp, #244]	; 0xf4
 800f6d6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f6da:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f6de:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800f6e2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800f6e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f6e8:	f04f 0800 	mov.w	r8, #0
 800f6ec:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f6f0:	910e      	str	r1, [sp, #56]	; 0x38
 800f6f2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f6f6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f6fa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f6fe:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f702:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f706:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f70a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f70e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f712:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f716:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f71a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f71e:	f1be 0f00 	cmp.w	lr, #0
 800f722:	d030      	beq.n	800f786 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800f724:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f726:	4450      	add	r0, sl
 800f728:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f72c:	4431      	add	r1, r6
 800f72e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f732:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f736:	4549      	cmp	r1, r9
 800f738:	db08      	blt.n	800f74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800f73a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f73e:	3001      	adds	r0, #1
 800f740:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f744:	eba1 0109 	sub.w	r1, r1, r9
 800f748:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f74c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f750:	f04f 0801 	mov.w	r8, #1
 800f754:	e7e3      	b.n	800f71e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800f756:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f758:	4450      	add	r0, sl
 800f75a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f75e:	4431      	add	r1, r6
 800f760:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f764:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f768:	4541      	cmp	r1, r8
 800f76a:	db08      	blt.n	800f77e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800f76c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f770:	3001      	adds	r0, #1
 800f772:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f776:	eba1 0108 	sub.w	r1, r1, r8
 800f77a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f77e:	3f01      	subs	r7, #1
 800f780:	f04f 0901 	mov.w	r9, #1
 800f784:	e79e      	b.n	800f6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800f786:	449c      	add	ip, r3
 800f788:	1aff      	subs	r7, r7, r3
 800f78a:	f1b8 0f00 	cmp.w	r8, #0
 800f78e:	d009      	beq.n	800f7a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800f790:	9019      	str	r0, [sp, #100]	; 0x64
 800f792:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f796:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f79a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f79e:	911d      	str	r1, [sp, #116]	; 0x74
 800f7a0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f7a4:	1ad2      	subs	r2, r2, r3
 800f7a6:	e6b5      	b.n	800f514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f7a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	b923      	cbnz	r3, 800f7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f7ae:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800f7b0:	6818      	ldr	r0, [r3, #0]
 800f7b2:	6803      	ldr	r3, [r0, #0]
 800f7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b6:	4798      	blx	r3
 800f7b8:	b05b      	add	sp, #364	; 0x16c
 800f7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7be:	bf00      	nop
 800f7c0:	24006c64 	.word	0x24006c64

0800f7c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	2500      	movs	r5, #0
 800f7ca:	9804      	ldr	r0, [sp, #16]
 800f7cc:	7223      	strb	r3, [r4, #8]
 800f7ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f7d2:	8025      	strh	r5, [r4, #0]
 800f7d4:	6061      	str	r1, [r4, #4]
 800f7d6:	7263      	strb	r3, [r4, #9]
 800f7d8:	60e0      	str	r0, [r4, #12]
 800f7da:	8222      	strh	r2, [r4, #16]
 800f7dc:	8265      	strh	r5, [r4, #18]
 800f7de:	82a5      	strh	r5, [r4, #20]
 800f7e0:	82e5      	strh	r5, [r4, #22]
 800f7e2:	8325      	strh	r5, [r4, #24]
 800f7e4:	8365      	strh	r5, [r4, #26]
 800f7e6:	83a5      	strh	r5, [r4, #28]
 800f7e8:	77a5      	strb	r5, [r4, #30]
 800f7ea:	6803      	ldr	r3, [r0, #0]
 800f7ec:	695b      	ldr	r3, [r3, #20]
 800f7ee:	4798      	blx	r3
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	b1f8      	cbz	r0, 800f834 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f7f4:	68e0      	ldr	r0, [r4, #12]
 800f7f6:	4631      	mov	r1, r6
 800f7f8:	6803      	ldr	r3, [r0, #0]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	4798      	blx	r3
 800f7fe:	7b43      	ldrb	r3, [r0, #13]
 800f800:	7a82      	ldrb	r2, [r0, #10]
 800f802:	4605      	mov	r5, r0
 800f804:	005b      	lsls	r3, r3, #1
 800f806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f80a:	4313      	orrs	r3, r2
 800f80c:	83a3      	strh	r3, [r4, #28]
 800f80e:	7a63      	ldrb	r3, [r4, #9]
 800f810:	2b04      	cmp	r3, #4
 800f812:	d10f      	bne.n	800f834 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f814:	68e0      	ldr	r0, [r4, #12]
 800f816:	462a      	mov	r2, r5
 800f818:	4631      	mov	r1, r6
 800f81a:	6803      	ldr	r3, [r0, #0]
 800f81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f81e:	4798      	blx	r3
 800f820:	7b6b      	ldrb	r3, [r5, #13]
 800f822:	005b      	lsls	r3, r3, #1
 800f824:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f828:	7aab      	ldrb	r3, [r5, #10]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	4418      	add	r0, r3
 800f82e:	8ba3      	ldrh	r3, [r4, #28]
 800f830:	4418      	add	r0, r3
 800f832:	83a0      	strh	r0, [r4, #28]
 800f834:	4620      	mov	r0, r4
 800f836:	bd70      	pop	{r4, r5, r6, pc}

0800f838 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	2400      	movs	r4, #0
 800f83e:	b085      	sub	sp, #20
 800f840:	4681      	mov	r9, r0
 800f842:	4688      	mov	r8, r1
 800f844:	4692      	mov	sl, r2
 800f846:	469b      	mov	fp, r3
 800f848:	4627      	mov	r7, r4
 800f84a:	4625      	mov	r5, r4
 800f84c:	4626      	mov	r6, r4
 800f84e:	4554      	cmp	r4, sl
 800f850:	da2a      	bge.n	800f8a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f852:	2300      	movs	r3, #0
 800f854:	9303      	str	r3, [sp, #12]
 800f856:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f85a:	429d      	cmp	r5, r3
 800f85c:	d004      	beq.n	800f868 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800f85e:	f242 030b 	movw	r3, #8203	; 0x200b
 800f862:	429d      	cmp	r5, r3
 800f864:	bf18      	it	ne
 800f866:	462f      	movne	r7, r5
 800f868:	ab03      	add	r3, sp, #12
 800f86a:	4642      	mov	r2, r8
 800f86c:	4659      	mov	r1, fp
 800f86e:	4648      	mov	r0, r9
 800f870:	f002 fea2 	bl	80125b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f874:	4605      	mov	r5, r0
 800f876:	b1b8      	cbz	r0, 800f8a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f878:	280a      	cmp	r0, #10
 800f87a:	d015      	beq.n	800f8a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f87c:	9a03      	ldr	r2, [sp, #12]
 800f87e:	b18a      	cbz	r2, 800f8a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800f880:	7b50      	ldrb	r0, [r2, #13]
 800f882:	4639      	mov	r1, r7
 800f884:	7a93      	ldrb	r3, [r2, #10]
 800f886:	0040      	lsls	r0, r0, #1
 800f888:	8895      	ldrh	r5, [r2, #4]
 800f88a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f88e:	4303      	orrs	r3, r0
 800f890:	4640      	mov	r0, r8
 800f892:	9301      	str	r3, [sp, #4]
 800f894:	f8d8 3000 	ldr.w	r3, [r8]
 800f898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f89a:	4798      	blx	r3
 800f89c:	9b01      	ldr	r3, [sp, #4]
 800f89e:	4418      	add	r0, r3
 800f8a0:	4406      	add	r6, r0
 800f8a2:	b2b6      	uxth	r6, r6
 800f8a4:	3401      	adds	r4, #1
 800f8a6:	e7d2      	b.n	800f84e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	b005      	add	sp, #20
 800f8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800f8b0:	2a02      	cmp	r2, #2
 800f8b2:	b530      	push	{r4, r5, lr}
 800f8b4:	d011      	beq.n	800f8da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800f8b6:	2a03      	cmp	r2, #3
 800f8b8:	d01c      	beq.n	800f8f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800f8ba:	2a01      	cmp	r2, #1
 800f8bc:	d10c      	bne.n	800f8d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f8be:	888b      	ldrh	r3, [r1, #4]
 800f8c0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f8c4:	8801      	ldrh	r1, [r0, #0]
 800f8c6:	1a9b      	subs	r3, r3, r2
 800f8c8:	8844      	ldrh	r4, [r0, #2]
 800f8ca:	1a5b      	subs	r3, r3, r1
 800f8cc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f8d0:	8004      	strh	r4, [r0, #0]
 800f8d2:	8043      	strh	r3, [r0, #2]
 800f8d4:	8081      	strh	r1, [r0, #4]
 800f8d6:	80c2      	strh	r2, [r0, #6]
 800f8d8:	bd30      	pop	{r4, r5, pc}
 800f8da:	88cb      	ldrh	r3, [r1, #6]
 800f8dc:	88c2      	ldrh	r2, [r0, #6]
 800f8de:	1a9b      	subs	r3, r3, r2
 800f8e0:	8842      	ldrh	r2, [r0, #2]
 800f8e2:	1a9b      	subs	r3, r3, r2
 800f8e4:	888a      	ldrh	r2, [r1, #4]
 800f8e6:	8881      	ldrh	r1, [r0, #4]
 800f8e8:	8043      	strh	r3, [r0, #2]
 800f8ea:	1a52      	subs	r2, r2, r1
 800f8ec:	8801      	ldrh	r1, [r0, #0]
 800f8ee:	1a52      	subs	r2, r2, r1
 800f8f0:	8002      	strh	r2, [r0, #0]
 800f8f2:	e7f1      	b.n	800f8d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f8f4:	88cb      	ldrh	r3, [r1, #6]
 800f8f6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f8fa:	8841      	ldrh	r1, [r0, #2]
 800f8fc:	1a9b      	subs	r3, r3, r2
 800f8fe:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f902:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f906:	1a5b      	subs	r3, r3, r1
 800f908:	8045      	strh	r5, [r0, #2]
 800f90a:	8082      	strh	r2, [r0, #4]
 800f90c:	8003      	strh	r3, [r0, #0]
 800f90e:	80c4      	strh	r4, [r0, #6]
 800f910:	e7e2      	b.n	800f8d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800f912 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800f912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f916:	b09f      	sub	sp, #124	; 0x7c
 800f918:	9116      	str	r1, [sp, #88]	; 0x58
 800f91a:	9317      	str	r3, [sp, #92]	; 0x5c
 800f91c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f91e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f920:	8809      	ldrh	r1, [r1, #0]
 800f922:	889b      	ldrh	r3, [r3, #4]
 800f924:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800f928:	440b      	add	r3, r1
 800f92a:	9212      	str	r2, [sp, #72]	; 0x48
 800f92c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800f930:	b21b      	sxth	r3, r3
 800f932:	9011      	str	r0, [sp, #68]	; 0x44
 800f934:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800f938:	9310      	str	r3, [sp, #64]	; 0x40
 800f93a:	f8d8 3000 	ldr.w	r3, [r8]
 800f93e:	7a59      	ldrb	r1, [r3, #9]
 800f940:	7a1b      	ldrb	r3, [r3, #8]
 800f942:	9114      	str	r1, [sp, #80]	; 0x50
 800f944:	9315      	str	r3, [sp, #84]	; 0x54
 800f946:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f948:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f94c:	2a00      	cmp	r2, #0
 800f94e:	d067      	beq.n	800fa20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800f950:	f898 3010 	ldrb.w	r3, [r8, #16]
 800f954:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f956:	2b04      	cmp	r3, #4
 800f958:	bf14      	ite	ne
 800f95a:	2301      	movne	r3, #1
 800f95c:	2302      	moveq	r3, #2
 800f95e:	4413      	add	r3, r2
 800f960:	f04f 0900 	mov.w	r9, #0
 800f964:	930f      	str	r3, [sp, #60]	; 0x3c
 800f966:	464c      	mov	r4, r9
 800f968:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f96c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800f970:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800f974:	4293      	cmp	r3, r2
 800f976:	f280 808c 	bge.w	800fa92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800f97a:	2300      	movs	r3, #0
 800f97c:	931c      	str	r3, [sp, #112]	; 0x70
 800f97e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f982:	429c      	cmp	r4, r3
 800f984:	d006      	beq.n	800f994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800f986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f988:	f242 020b 	movw	r2, #8203	; 0x200b
 800f98c:	4294      	cmp	r4, r2
 800f98e:	bf18      	it	ne
 800f990:	4623      	movne	r3, r4
 800f992:	930d      	str	r3, [sp, #52]	; 0x34
 800f994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f996:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f998:	f8d8 2000 	ldr.w	r2, [r8]
 800f99c:	428b      	cmp	r3, r1
 800f99e:	db41      	blt.n	800fa24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800f9a0:	6813      	ldr	r3, [r2, #0]
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	695b      	ldr	r3, [r3, #20]
 800f9a6:	4798      	blx	r3
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	f8d8 0000 	ldr.w	r0, [r8]
 800f9ae:	aa1d      	add	r2, sp, #116	; 0x74
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	6803      	ldr	r3, [r0, #0]
 800f9b4:	689e      	ldr	r6, [r3, #8]
 800f9b6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800f9ba:	47b0      	blx	r6
 800f9bc:	901c      	str	r0, [sp, #112]	; 0x70
 800f9be:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f9c2:	429c      	cmp	r4, r3
 800f9c4:	f000 80ea 	beq.w	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f9c8:	f242 030b 	movw	r3, #8203	; 0x200b
 800f9cc:	429c      	cmp	r4, r3
 800f9ce:	f000 80e5 	beq.w	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f9d2:	2c00      	cmp	r4, #0
 800f9d4:	f000 80f7 	beq.w	800fbc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800f9d8:	2c0a      	cmp	r4, #10
 800f9da:	d060      	beq.n	800fa9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800f9dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f9de:	b36a      	cbz	r2, 800fa3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800f9e0:	8894      	ldrh	r4, [r2, #4]
 800f9e2:	f1bb 0f00 	cmp.w	fp, #0
 800f9e6:	d03b      	beq.n	800fa60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800f9e8:	f892 900d 	ldrb.w	r9, [r2, #13]
 800f9ec:	f1bb 0f01 	cmp.w	fp, #1
 800f9f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800f9f4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800f9f8:	f892 900a 	ldrb.w	r9, [r2, #10]
 800f9fc:	ea49 0903 	orr.w	r9, r9, r3
 800fa00:	d134      	bne.n	800fa6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800fa02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa04:	eba5 0509 	sub.w	r5, r5, r9
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d14f      	bne.n	800faac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800fa0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa0e:	eb09 0305 	add.w	r3, r9, r5
 800fa12:	4413      	add	r3, r2
 800fa14:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fa16:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	da51      	bge.n	800fac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800fa1e:	e038      	b.n	800fa92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800fa20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa22:	e79d      	b.n	800f960 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800fa24:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fa28:	4659      	mov	r1, fp
 800fa2a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fa2c:	9301      	str	r3, [sp, #4]
 800fa2e:	ab1d      	add	r3, sp, #116	; 0x74
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	ab1c      	add	r3, sp, #112	; 0x70
 800fa34:	f002 fe18 	bl	8012668 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800fa38:	4604      	mov	r4, r0
 800fa3a:	e7c0      	b.n	800f9be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800fa3c:	f8d8 0000 	ldr.w	r0, [r8]
 800fa40:	6803      	ldr	r3, [r0, #0]
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	4798      	blx	r3
 800fa46:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fa4a:	4298      	cmp	r0, r3
 800fa4c:	f000 80a6 	beq.w	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa50:	f242 030b 	movw	r3, #8203	; 0x200b
 800fa54:	4298      	cmp	r0, r3
 800fa56:	f000 80a1 	beq.w	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa5a:	f1bb 0f00 	cmp.w	fp, #0
 800fa5e:	d100      	bne.n	800fa62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800fa60:	444d      	add	r5, r9
 800fa62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fa64:	2a00      	cmp	r2, #0
 800fa66:	d1bf      	bne.n	800f9e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800fa68:	4691      	mov	r9, r2
 800fa6a:	e097      	b.n	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 80ab 	beq.w	800fbca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800fa74:	f1bb 0f00 	cmp.w	fp, #0
 800fa78:	d118      	bne.n	800faac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800fa7a:	f8d8 0000 	ldr.w	r0, [r8]
 800fa7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fa80:	6803      	ldr	r3, [r0, #0]
 800fa82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa84:	4798      	blx	r3
 800fa86:	4405      	add	r5, r0
 800fa88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fa8c:	1aeb      	subs	r3, r5, r3
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	dd17      	ble.n	800fac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800fa92:	2c00      	cmp	r4, #0
 800fa94:	f000 8097 	beq.w	800fbc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fa98:	2c0a      	cmp	r4, #10
 800fa9a:	f040 8085 	bne.w	800fba8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800fa9e:	240a      	movs	r4, #10
 800faa0:	fab4 f084 	clz	r0, r4
 800faa4:	0940      	lsrs	r0, r0, #5
 800faa6:	b01f      	add	sp, #124	; 0x7c
 800faa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faac:	f8d8 0000 	ldr.w	r0, [r8]
 800fab0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fab2:	6803      	ldr	r3, [r0, #0]
 800fab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fab6:	4798      	blx	r3
 800fab8:	f1bb 0f01 	cmp.w	fp, #1
 800fabc:	eba5 0500 	sub.w	r5, r5, r0
 800fac0:	d0a4      	beq.n	800fa0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800fac2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800fac4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fac6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800faca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800face:	7b43      	ldrb	r3, [r0, #13]
 800fad0:	4429      	add	r1, r5
 800fad2:	015b      	lsls	r3, r3, #5
 800fad4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fad8:	7983      	ldrb	r3, [r0, #6]
 800fada:	4313      	orrs	r3, r2
 800fadc:	440b      	add	r3, r1
 800fade:	42b3      	cmp	r3, r6
 800fae0:	db5c      	blt.n	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fae4:	4299      	cmp	r1, r3
 800fae6:	da59      	bge.n	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fae8:	f8d8 0000 	ldr.w	r0, [r8]
 800faec:	42ae      	cmp	r6, r5
 800faee:	6803      	ldr	r3, [r0, #0]
 800faf0:	bfcc      	ite	gt
 800faf2:	1b76      	subgt	r6, r6, r5
 800faf4:	2600      	movle	r6, #0
 800faf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf8:	bfc8      	it	gt
 800fafa:	b2b6      	uxthgt	r6, r6
 800fafc:	4798      	blx	r3
 800fafe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fb00:	7b5a      	ldrb	r2, [r3, #13]
 800fb02:	00d1      	lsls	r1, r2, #3
 800fb04:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800fb08:	7a19      	ldrb	r1, [r3, #8]
 800fb0a:	4339      	orrs	r1, r7
 800fb0c:	0657      	lsls	r7, r2, #25
 800fb0e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fb10:	bf48      	it	mi
 800fb12:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800fb16:	4407      	add	r7, r0
 800fb18:	bf48      	it	mi
 800fb1a:	b209      	sxthmi	r1, r1
 800fb1c:	1a7f      	subs	r7, r7, r1
 800fb1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fb20:	b2bf      	uxth	r7, r7
 800fb22:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800fb26:	fa0f fa87 	sxth.w	sl, r7
 800fb2a:	4551      	cmp	r1, sl
 800fb2c:	dd3a      	ble.n	800fba4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800fb2e:	0112      	lsls	r2, r2, #4
 800fb30:	79d8      	ldrb	r0, [r3, #7]
 800fb32:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fb36:	4302      	orrs	r2, r0
 800fb38:	4492      	add	sl, r2
 800fb3a:	4551      	cmp	r1, sl
 800fb3c:	dc2e      	bgt.n	800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fb3e:	1bcf      	subs	r7, r1, r7
 800fb40:	468a      	mov	sl, r1
 800fb42:	b2bf      	uxth	r7, r7
 800fb44:	9319      	str	r3, [sp, #100]	; 0x64
 800fb46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb48:	f8d8 0000 	ldr.w	r0, [r8]
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	6801      	ldr	r1, [r0, #0]
 800fb50:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fb52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fb54:	9313      	str	r3, [sp, #76]	; 0x4c
 800fb56:	9218      	str	r2, [sp, #96]	; 0x60
 800fb58:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800fb5a:	4788      	blx	r1
 800fb5c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fb60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb62:	910b      	str	r1, [sp, #44]	; 0x2c
 800fb64:	f898 100e 	ldrb.w	r1, [r8, #14]
 800fb68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb6a:	910a      	str	r1, [sp, #40]	; 0x28
 800fb6c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800fb70:	9109      	str	r1, [sp, #36]	; 0x24
 800fb72:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fb76:	9305      	str	r3, [sp, #20]
 800fb78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fb7a:	9206      	str	r2, [sp, #24]
 800fb7c:	e9cd a601 	strd	sl, r6, [sp, #4]
 800fb80:	442e      	add	r6, r5
 800fb82:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800fb86:	b236      	sxth	r6, r6
 800fb88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb8a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800fb8e:	9600      	str	r6, [sp, #0]
 800fb90:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fb9a:	47b0      	blx	r6
 800fb9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb9e:	3301      	adds	r3, #1
 800fba0:	930e      	str	r3, [sp, #56]	; 0x38
 800fba2:	e6e5      	b.n	800f970 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800fba4:	2700      	movs	r7, #0
 800fba6:	e7cd      	b.n	800fb44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800fba8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fbaa:	3501      	adds	r5, #1
 800fbac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fbae:	429d      	cmp	r5, r3
 800fbb0:	f6bf af76 	bge.w	800faa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fbb4:	4659      	mov	r1, fp
 800fbb6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fbb8:	f7f4 fdbe 	bl	8004738 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	b110      	cbz	r0, 800fbc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fbc0:	280a      	cmp	r0, #10
 800fbc2:	d1f2      	bne.n	800fbaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800fbc4:	e76b      	b.n	800fa9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800fbc6:	2400      	movs	r4, #0
 800fbc8:	e76a      	b.n	800faa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fbca:	f1bb 0f00 	cmp.w	fp, #0
 800fbce:	f43f af5b 	beq.w	800fa88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800fbd2:	e776      	b.n	800fac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800fbd4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800fbd4:	b530      	push	{r4, r5, lr}
 800fbd6:	8a44      	ldrh	r4, [r0, #18]
 800fbd8:	8ac5      	ldrh	r5, [r0, #22]
 800fbda:	82c3      	strh	r3, [r0, #22]
 800fbdc:	442c      	add	r4, r5
 800fbde:	1ae4      	subs	r4, r4, r3
 800fbe0:	8b03      	ldrh	r3, [r0, #24]
 800fbe2:	8244      	strh	r4, [r0, #18]
 800fbe4:	8a84      	ldrh	r4, [r0, #20]
 800fbe6:	4422      	add	r2, r4
 800fbe8:	440c      	add	r4, r1
 800fbea:	1a59      	subs	r1, r3, r1
 800fbec:	8342      	strh	r2, [r0, #26]
 800fbee:	8284      	strh	r4, [r0, #20]
 800fbf0:	8301      	strh	r1, [r0, #24]
 800fbf2:	bd30      	pop	{r4, r5, pc}

0800fbf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800fbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf8:	7a43      	ldrb	r3, [r0, #9]
 800fbfa:	b087      	sub	sp, #28
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	460f      	mov	r7, r1
 800fc00:	1eda      	subs	r2, r3, #3
 800fc02:	b2d2      	uxtb	r2, r2
 800fc04:	2900      	cmp	r1, #0
 800fc06:	d036      	beq.n	800fc76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800fc08:	2a01      	cmp	r2, #1
 800fc0a:	d932      	bls.n	800fc72 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800fc0c:	1e58      	subs	r0, r3, #1
 800fc0e:	f1d0 0b00 	rsbs	fp, r0, #0
 800fc12:	eb4b 0b00 	adc.w	fp, fp, r0
 800fc16:	1e99      	subs	r1, r3, #2
 800fc18:	424b      	negs	r3, r1
 800fc1a:	414b      	adcs	r3, r1
 800fc1c:	9303      	str	r3, [sp, #12]
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800fc24:	2500      	movs	r5, #0
 800fc26:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800fc2a:	46a9      	mov	r9, r5
 800fc2c:	8265      	strh	r5, [r4, #18]
 800fc2e:	82a5      	strh	r5, [r4, #20]
 800fc30:	2300      	movs	r3, #0
 800fc32:	9305      	str	r3, [sp, #20]
 800fc34:	8823      	ldrh	r3, [r4, #0]
 800fc36:	2b20      	cmp	r3, #32
 800fc38:	d02b      	beq.n	800fc92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800fc3a:	eba3 020a 	sub.w	r2, r3, sl
 800fc3e:	4256      	negs	r6, r2
 800fc40:	4156      	adcs	r6, r2
 800fc42:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d004      	beq.n	800fc54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fc4a:	4553      	cmp	r3, sl
 800fc4c:	bf16      	itet	ne
 800fc4e:	4699      	movne	r9, r3
 800fc50:	2601      	moveq	r6, #1
 800fc52:	2600      	movne	r6, #0
 800fc54:	ab05      	add	r3, sp, #20
 800fc56:	68e2      	ldr	r2, [r4, #12]
 800fc58:	7a21      	ldrb	r1, [r4, #8]
 800fc5a:	6860      	ldr	r0, [r4, #4]
 800fc5c:	f002 fcac 	bl	80125b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fc60:	8020      	strh	r0, [r4, #0]
 800fc62:	b9c8      	cbnz	r0, 800fc98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800fc64:	8b22      	ldrh	r2, [r4, #24]
 800fc66:	2300      	movs	r3, #0
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f7ff ffb2 	bl	800fbd4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fc70:	e066      	b.n	800fd40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fc72:	468b      	mov	fp, r1
 800fc74:	e7cf      	b.n	800fc16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800fc76:	3b01      	subs	r3, #1
 800fc78:	2a01      	cmp	r2, #1
 800fc7a:	9103      	str	r1, [sp, #12]
 800fc7c:	468b      	mov	fp, r1
 800fc7e:	bf8c      	ite	hi
 800fc80:	2200      	movhi	r2, #0
 800fc82:	2201      	movls	r2, #1
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	9202      	str	r2, [sp, #8]
 800fc88:	bf8c      	ite	hi
 800fc8a:	2300      	movhi	r3, #0
 800fc8c:	2301      	movls	r3, #1
 800fc8e:	9301      	str	r3, [sp, #4]
 800fc90:	e7c8      	b.n	800fc24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800fc92:	4699      	mov	r9, r3
 800fc94:	2601      	movs	r6, #1
 800fc96:	e7dd      	b.n	800fc54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fc98:	8ae3      	ldrh	r3, [r4, #22]
 800fc9a:	280a      	cmp	r0, #10
 800fc9c:	f103 0301 	add.w	r3, r3, #1
 800fca0:	82e3      	strh	r3, [r4, #22]
 800fca2:	d0df      	beq.n	800fc64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800fca4:	9a05      	ldr	r2, [sp, #20]
 800fca6:	bb42      	cbnz	r2, 800fcfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800fca8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fcac:	4298      	cmp	r0, r3
 800fcae:	d001      	beq.n	800fcb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fcb0:	4550      	cmp	r0, sl
 800fcb2:	d1bd      	bne.n	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fcb4:	8823      	ldrh	r3, [r4, #0]
 800fcb6:	8b21      	ldrh	r1, [r4, #24]
 800fcb8:	2b20      	cmp	r3, #32
 800fcba:	d001      	beq.n	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800fcbc:	4553      	cmp	r3, sl
 800fcbe:	d131      	bne.n	800fd24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800fcc0:	2e00      	cmp	r6, #0
 800fcc2:	bf0a      	itet	eq
 800fcc4:	460d      	moveq	r5, r1
 800fcc6:	4630      	movne	r0, r6
 800fcc8:	2001      	moveq	r0, #1
 800fcca:	440a      	add	r2, r1
 800fccc:	8aa3      	ldrh	r3, [r4, #20]
 800fcce:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800fcd2:	b292      	uxth	r2, r2
 800fcd4:	8322      	strh	r2, [r4, #24]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	2f00      	cmp	r7, #0
 800fcda:	d03a      	beq.n	800fd52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800fcdc:	f1bb 0f00 	cmp.w	fp, #0
 800fce0:	d102      	bne.n	800fce8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800fce2:	9903      	ldr	r1, [sp, #12]
 800fce4:	b301      	cbz	r1, 800fd28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fce6:	b1f8      	cbz	r0, 800fd28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fce8:	8ba1      	ldrh	r1, [r4, #28]
 800fcea:	4419      	add	r1, r3
 800fcec:	458c      	cmp	ip, r1
 800fcee:	da2a      	bge.n	800fd46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fcf0:	8a61      	ldrh	r1, [r4, #18]
 800fcf2:	b341      	cbz	r1, 800fd46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fcf4:	4563      	cmp	r3, ip
 800fcf6:	dd9b      	ble.n	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fcf8:	e01c      	b.n	800fd34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800fcfa:	8893      	ldrh	r3, [r2, #4]
 800fcfc:	4649      	mov	r1, r9
 800fcfe:	8023      	strh	r3, [r4, #0]
 800fd00:	f892 800d 	ldrb.w	r8, [r2, #13]
 800fd04:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800fd08:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800fd0c:	f892 800a 	ldrb.w	r8, [r2, #10]
 800fd10:	ea48 0800 	orr.w	r8, r8, r0
 800fd14:	68e0      	ldr	r0, [r4, #12]
 800fd16:	6803      	ldr	r3, [r0, #0]
 800fd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd1a:	4798      	blx	r3
 800fd1c:	eb08 0200 	add.w	r2, r8, r0
 800fd20:	b292      	uxth	r2, r2
 800fd22:	e7c7      	b.n	800fcb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fd24:	2000      	movs	r0, #0
 800fd26:	e7d0      	b.n	800fcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800fd28:	4563      	cmp	r3, ip
 800fd2a:	dd81      	ble.n	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd2c:	8a63      	ldrh	r3, [r4, #18]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f43f af7e 	beq.w	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd34:	2301      	movs	r3, #1
 800fd36:	8ba2      	ldrh	r2, [r4, #28]
 800fd38:	77a3      	strb	r3, [r4, #30]
 800fd3a:	8b63      	ldrh	r3, [r4, #26]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	8363      	strh	r3, [r4, #26]
 800fd40:	b007      	add	sp, #28
 800fd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd46:	2300      	movs	r3, #0
 800fd48:	4611      	mov	r1, r2
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f7ff ff42 	bl	800fbd4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fd50:	e76e      	b.n	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd52:	4563      	cmp	r3, ip
 800fd54:	dd14      	ble.n	800fd80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800fd56:	9b02      	ldr	r3, [sp, #8]
 800fd58:	b113      	cbz	r3, 800fd60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	460a      	mov	r2, r1
 800fd5e:	e783      	b.n	800fc68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800fd60:	9b01      	ldr	r3, [sp, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f43f af64 	beq.w	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	f47f af61 	bne.w	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd6e:	b116      	cbz	r6, 800fd76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800fd70:	2301      	movs	r3, #1
 800fd72:	462a      	mov	r2, r5
 800fd74:	e779      	b.n	800fc6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800fd76:	8a63      	ldrh	r3, [r4, #18]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f43f af59 	beq.w	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd7e:	e7df      	b.n	800fd40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	f47f af55 	bne.w	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd86:	2e00      	cmp	r6, #0
 800fd88:	f43f af52 	beq.w	800fc30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	462a      	mov	r2, r5
 800fd90:	e7db      	b.n	800fd4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800fd92 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800fd92:	b530      	push	{r4, r5, lr}
 800fd94:	4605      	mov	r5, r0
 800fd96:	b08b      	sub	sp, #44	; 0x2c
 800fd98:	b191      	cbz	r1, 800fdc0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800fd9a:	2401      	movs	r4, #1
 800fd9c:	e9cd 3100 	strd	r3, r1, [sp]
 800fda0:	4613      	mov	r3, r2
 800fda2:	4601      	mov	r1, r0
 800fda4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800fda8:	a802      	add	r0, sp, #8
 800fdaa:	f7ff fd0b 	bl	800f7c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800fdae:	2100      	movs	r1, #0
 800fdb0:	a802      	add	r0, sp, #8
 800fdb2:	f7ff ff1f 	bl	800fbf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800fdb6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fdba:	b163      	cbz	r3, 800fdd6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800fdbc:	3401      	adds	r4, #1
 800fdbe:	e7f6      	b.n	800fdae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800fdc0:	2401      	movs	r4, #1
 800fdc2:	f002 fcf3 	bl	80127ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fdc6:	280a      	cmp	r0, #10
 800fdc8:	4628      	mov	r0, r5
 800fdca:	bf08      	it	eq
 800fdcc:	3401      	addeq	r4, #1
 800fdce:	f002 fced 	bl	80127ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	d1f7      	bne.n	800fdc6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800fdd6:	b2a0      	uxth	r0, r4
 800fdd8:	b00b      	add	sp, #44	; 0x2c
 800fdda:	bd30      	pop	{r4, r5, pc}

0800fddc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800fddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde0:	b0e5      	sub	sp, #404	; 0x194
 800fde2:	4689      	mov	r9, r1
 800fde4:	461c      	mov	r4, r3
 800fde6:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800fdea:	900a      	str	r0, [sp, #40]	; 0x28
 800fdec:	f1ba 0f00 	cmp.w	sl, #0
 800fdf0:	f000 80b4 	beq.w	800ff5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 80b0 	beq.w	800ff5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fdfc:	7ba3      	ldrb	r3, [r4, #14]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f000 80ac 	beq.w	800ff5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fe04:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800fe08:	6810      	ldr	r0, [r2, #0]
 800fe0a:	6851      	ldr	r1, [r2, #4]
 800fe0c:	2500      	movs	r5, #0
 800fe0e:	4643      	mov	r3, r8
 800fe10:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800fe14:	950f      	str	r5, [sp, #60]	; 0x3c
 800fe16:	af19      	add	r7, sp, #100	; 0x64
 800fe18:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe1c:	79a2      	ldrb	r2, [r4, #6]
 800fe1e:	c303      	stmia	r3!, {r0, r1}
 800fe20:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800fe24:	a90f      	add	r1, sp, #60	; 0x3c
 800fe26:	4640      	mov	r0, r8
 800fe28:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800fe2c:	f7ff fd40 	bl	800f8b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800fe30:	a90f      	add	r1, sp, #60	; 0x3c
 800fe32:	79a2      	ldrb	r2, [r4, #6]
 800fe34:	4608      	mov	r0, r1
 800fe36:	f7ff fd3b 	bl	800f8b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	f002 f868 	bl	8011f10 <_ZN8touchgfx12TextProviderC1Ev>
 800fe40:	6820      	ldr	r0, [r4, #0]
 800fe42:	6803      	ldr	r3, [r0, #0]
 800fe44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe46:	4798      	blx	r3
 800fe48:	4606      	mov	r6, r0
 800fe4a:	6820      	ldr	r0, [r4, #0]
 800fe4c:	6803      	ldr	r3, [r0, #0]
 800fe4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe50:	4798      	blx	r3
 800fe52:	4633      	mov	r3, r6
 800fe54:	9000      	str	r0, [sp, #0]
 800fe56:	4651      	mov	r1, sl
 800fe58:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800fe5a:	4638      	mov	r0, r7
 800fe5c:	f002 f8ab 	bl	8011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fe60:	7923      	ldrb	r3, [r4, #4]
 800fe62:	6820      	ldr	r0, [r4, #0]
 800fe64:	9308      	str	r3, [sp, #32]
 800fe66:	6803      	ldr	r3, [r0, #0]
 800fe68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe6a:	4798      	blx	r3
 800fe6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe70:	181e      	adds	r6, r3, r0
 800fe72:	42ae      	cmp	r6, r5
 800fe74:	dd06      	ble.n	800fe84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800fe76:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800fe7a:	4282      	cmp	r2, r0
 800fe7c:	bfa4      	itt	ge
 800fe7e:	189d      	addge	r5, r3, r2
 800fe80:	fb95 f5f6 	sdivge	r5, r5, r6
 800fe84:	a832      	add	r0, sp, #200	; 0xc8
 800fe86:	f002 f843 	bl	8011f10 <_ZN8touchgfx12TextProviderC1Ev>
 800fe8a:	7c23      	ldrb	r3, [r4, #16]
 800fe8c:	b17b      	cbz	r3, 800feae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800fe8e:	6820      	ldr	r0, [r4, #0]
 800fe90:	6803      	ldr	r3, [r0, #0]
 800fe92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe94:	4798      	blx	r3
 800fe96:	4683      	mov	fp, r0
 800fe98:	6820      	ldr	r0, [r4, #0]
 800fe9a:	6803      	ldr	r3, [r0, #0]
 800fe9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe9e:	4798      	blx	r3
 800fea0:	465b      	mov	r3, fp
 800fea2:	9000      	str	r0, [sp, #0]
 800fea4:	4651      	mov	r1, sl
 800fea6:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800fea8:	a832      	add	r0, sp, #200	; 0xc8
 800feaa:	f002 f884 	bl	8011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800feae:	7be1      	ldrb	r1, [r4, #15]
 800feb0:	a811      	add	r0, sp, #68	; 0x44
 800feb2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800feb6:	7963      	ldrb	r3, [r4, #5]
 800feb8:	1a52      	subs	r2, r2, r1
 800feba:	7c21      	ldrb	r1, [r4, #16]
 800febc:	9101      	str	r1, [sp, #4]
 800febe:	b292      	uxth	r2, r2
 800fec0:	6821      	ldr	r1, [r4, #0]
 800fec2:	9100      	str	r1, [sp, #0]
 800fec4:	a932      	add	r1, sp, #200	; 0xc8
 800fec6:	f7ff fc7d 	bl	800f7c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800feca:	7c23      	ldrb	r3, [r4, #16]
 800fecc:	b9bb      	cbnz	r3, 800fefe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800fece:	fa1f fa86 	uxth.w	sl, r6
 800fed2:	2d00      	cmp	r5, #0
 800fed4:	dd45      	ble.n	800ff62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800fed6:	4638      	mov	r0, r7
 800fed8:	f002 fc68 	bl	80127ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d03d      	beq.n	800ff5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fee0:	280a      	cmp	r0, #10
 800fee2:	d1f6      	bne.n	800fed2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800fee4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800fee8:	3d01      	subs	r5, #1
 800feea:	4453      	add	r3, sl
 800feec:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800fef0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800fef4:	eba3 030a 	sub.w	r3, r3, sl
 800fef8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800fefc:	e7e9      	b.n	800fed2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800fefe:	0073      	lsls	r3, r6, #1
 800ff00:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800ff04:	fa1f fa86 	uxth.w	sl, r6
 800ff08:	9309      	str	r3, [sp, #36]	; 0x24
 800ff0a:	2d00      	cmp	r5, #0
 800ff0c:	dd29      	ble.n	800ff62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ff0e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ff12:	a811      	add	r0, sp, #68	; 0x44
 800ff14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff16:	428b      	cmp	r3, r1
 800ff18:	bfd4      	ite	le
 800ff1a:	2100      	movle	r1, #0
 800ff1c:	2101      	movgt	r1, #1
 800ff1e:	f7ff fe69 	bl	800fbf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ff22:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800ff26:	3b01      	subs	r3, #1
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	455b      	cmp	r3, fp
 800ff2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff2e:	d005      	beq.n	800ff3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800ff30:	7961      	ldrb	r1, [r4, #5]
 800ff32:	4638      	mov	r0, r7
 800ff34:	f7f4 fc00 	bl	8004738 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ff38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff3a:	e7f4      	b.n	800ff26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800ff3c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ff40:	3d01      	subs	r5, #1
 800ff42:	4453      	add	r3, sl
 800ff44:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ff48:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ff4c:	eba3 030a 	sub.w	r3, r3, sl
 800ff50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ff54:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1d6      	bne.n	800ff0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800ff5c:	b065      	add	sp, #404	; 0x194
 800ff5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff62:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800ff66:	ad4b      	add	r5, sp, #300	; 0x12c
 800ff68:	f04f 0b00 	mov.w	fp, #0
 800ff6c:	7c23      	ldrb	r3, [r4, #16]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d067      	beq.n	8010042 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800ff72:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ff76:	a811      	add	r0, sp, #68	; 0x44
 800ff78:	458a      	cmp	sl, r1
 800ff7a:	bfd4      	ite	le
 800ff7c:	2100      	movle	r1, #0
 800ff7e:	2101      	movgt	r1, #1
 800ff80:	f7ff fe38 	bl	800fbf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ff84:	9b08      	ldr	r3, [sp, #32]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d056      	beq.n	8010038 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800ff8a:	7c23      	ldrb	r3, [r4, #16]
 800ff8c:	2264      	movs	r2, #100	; 0x64
 800ff8e:	4639      	mov	r1, r7
 800ff90:	4628      	mov	r0, r5
 800ff92:	9309      	str	r3, [sp, #36]	; 0x24
 800ff94:	f00c fa08 	bl	801c3a8 <memcpy>
 800ff98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d059      	beq.n	8010052 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 800ff9e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800ffa2:	7922      	ldrb	r2, [r4, #4]
 800ffa4:	2a01      	cmp	r2, #1
 800ffa6:	d13d      	bne.n	8010024 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800ffa8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800ffac:	1ac0      	subs	r0, r0, r3
 800ffae:	2302      	movs	r3, #2
 800ffb0:	fb90 f0f3 	sdiv	r0, r0, r3
 800ffb4:	b200      	sxth	r0, r0
 800ffb6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ffba:	4418      	add	r0, r3
 800ffbc:	7c23      	ldrb	r3, [r4, #16]
 800ffbe:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d03a      	beq.n	801003c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800ffc6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800ffca:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800ffce:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800ffd2:	9500      	str	r5, [sp, #0]
 800ffd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ffd6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800ffda:	e9cd b703 	strd	fp, r7, [sp, #12]
 800ffde:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800ffe2:	464a      	mov	r2, r9
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	f7ff fc94 	bl	800f912 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d1b6      	bne.n	800ff5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ffee:	b2b2      	uxth	r2, r6
 800fff0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800fff4:	4611      	mov	r1, r2
 800fff6:	4413      	add	r3, r2
 800fff8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800fffc:	b21b      	sxth	r3, r3
 800fffe:	1a52      	subs	r2, r2, r1
 8010000:	7c21      	ldrb	r1, [r4, #16]
 8010002:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010006:	b212      	sxth	r2, r2
 8010008:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801000c:	b109      	cbz	r1, 8010012 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801000e:	42b2      	cmp	r2, r6
 8010010:	dba4      	blt.n	800ff5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8010012:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8010016:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801001a:	440a      	add	r2, r1
 801001c:	b212      	sxth	r2, r2
 801001e:	4293      	cmp	r3, r2
 8010020:	dda4      	ble.n	800ff6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 8010022:	e79b      	b.n	800ff5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8010024:	2a02      	cmp	r2, #2
 8010026:	d105      	bne.n	8010034 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8010028:	7be2      	ldrb	r2, [r4, #15]
 801002a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801002e:	1a80      	subs	r0, r0, r2
 8010030:	1ac0      	subs	r0, r0, r3
 8010032:	e7bf      	b.n	800ffb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 8010034:	2000      	movs	r0, #0
 8010036:	e7be      	b.n	800ffb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8010038:	7be0      	ldrb	r0, [r4, #15]
 801003a:	e7bc      	b.n	800ffb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801003c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010040:	e7c3      	b.n	800ffca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8010042:	9b08      	ldr	r3, [sp, #32]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d0f7      	beq.n	8010038 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8010048:	2264      	movs	r2, #100	; 0x64
 801004a:	4639      	mov	r1, r7
 801004c:	4628      	mov	r0, r5
 801004e:	f00c f9ab 	bl	801c3a8 <memcpy>
 8010052:	2300      	movs	r3, #0
 8010054:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010058:	6821      	ldr	r1, [r4, #0]
 801005a:	4628      	mov	r0, r5
 801005c:	f7ff fbec 	bl	800f838 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8010060:	b203      	sxth	r3, r0
 8010062:	e79e      	b.n	800ffa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

08010064 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8010064:	2b02      	cmp	r3, #2
 8010066:	b510      	push	{r4, lr}
 8010068:	f9b0 4000 	ldrsh.w	r4, [r0]
 801006c:	d00b      	beq.n	8010086 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801006e:	2b03      	cmp	r3, #3
 8010070:	d00e      	beq.n	8010090 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8010072:	2b01      	cmp	r3, #1
 8010074:	d001      	beq.n	801007a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8010076:	1860      	adds	r0, r4, r1
 8010078:	bd10      	pop	{r4, pc}
 801007a:	8880      	ldrh	r0, [r0, #4]
 801007c:	4420      	add	r0, r4
 801007e:	b200      	sxth	r0, r0
 8010080:	1a80      	subs	r0, r0, r2
 8010082:	3801      	subs	r0, #1
 8010084:	e7f8      	b.n	8010078 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8010086:	8880      	ldrh	r0, [r0, #4]
 8010088:	4420      	add	r0, r4
 801008a:	b200      	sxth	r0, r0
 801008c:	1a40      	subs	r0, r0, r1
 801008e:	e7f8      	b.n	8010082 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8010090:	18a0      	adds	r0, r4, r2
 8010092:	e7f1      	b.n	8010078 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08010094 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8010094:	2b02      	cmp	r3, #2
 8010096:	b510      	push	{r4, lr}
 8010098:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801009c:	d006      	beq.n	80100ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801009e:	2b03      	cmp	r3, #3
 80100a0:	d00a      	beq.n	80100b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	bf14      	ite	ne
 80100a6:	18a0      	addne	r0, r4, r2
 80100a8:	1860      	addeq	r0, r4, r1
 80100aa:	bd10      	pop	{r4, pc}
 80100ac:	88c0      	ldrh	r0, [r0, #6]
 80100ae:	4420      	add	r0, r4
 80100b0:	b200      	sxth	r0, r0
 80100b2:	1a80      	subs	r0, r0, r2
 80100b4:	3801      	subs	r0, #1
 80100b6:	e7f8      	b.n	80100aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80100b8:	88c0      	ldrh	r0, [r0, #6]
 80100ba:	4420      	add	r0, r4
 80100bc:	b200      	sxth	r0, r0
 80100be:	1a40      	subs	r0, r0, r1
 80100c0:	e7f8      	b.n	80100b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080100c4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80100c4:	4b01      	ldr	r3, [pc, #4]	; (80100cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80100c6:	2200      	movs	r2, #0
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	4770      	bx	lr
 80100cc:	24006c6c 	.word	0x24006c6c

080100d0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80100d0:	4603      	mov	r3, r0
 80100d2:	b1c8      	cbz	r0, 8010108 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80100d4:	0c02      	lsrs	r2, r0, #16
 80100d6:	0412      	lsls	r2, r2, #16
 80100d8:	b9a2      	cbnz	r2, 8010104 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80100da:	0403      	lsls	r3, r0, #16
 80100dc:	2010      	movs	r0, #16
 80100de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80100e2:	bf04      	itt	eq
 80100e4:	021b      	lsleq	r3, r3, #8
 80100e6:	3008      	addeq	r0, #8
 80100e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80100ec:	bf04      	itt	eq
 80100ee:	011b      	lsleq	r3, r3, #4
 80100f0:	3004      	addeq	r0, #4
 80100f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80100f6:	bf04      	itt	eq
 80100f8:	009b      	lsleq	r3, r3, #2
 80100fa:	3002      	addeq	r0, #2
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	db04      	blt.n	801010a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8010100:	3001      	adds	r0, #1
 8010102:	4770      	bx	lr
 8010104:	2000      	movs	r0, #0
 8010106:	e7ea      	b.n	80100de <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8010108:	2020      	movs	r0, #32
 801010a:	4770      	bx	lr

0801010c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	b087      	sub	sp, #28
 8010112:	4681      	mov	r9, r0
 8010114:	4698      	mov	r8, r3
 8010116:	4610      	mov	r0, r2
 8010118:	460d      	mov	r5, r1
 801011a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801011e:	b981      	cbnz	r1, 8010142 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8010120:	b14b      	cbz	r3, 8010136 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8010122:	460b      	mov	r3, r1
 8010124:	464a      	mov	r2, r9
 8010126:	4641      	mov	r1, r8
 8010128:	e9cd 4700 	strd	r4, r7, [sp]
 801012c:	f7ff ffee 	bl	801010c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010130:	b007      	add	sp, #28
 8010132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010136:	f04f 33ff 	mov.w	r3, #4294967295
 801013a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801013e:	603b      	str	r3, [r7, #0]
 8010140:	e7f6      	b.n	8010130 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8010142:	fa32 fa01 	lsrs.w	sl, r2, r1
 8010146:	d107      	bne.n	8010158 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8010148:	fb09 f602 	mul.w	r6, r9, r2
 801014c:	fbb6 f0f4 	udiv	r0, r6, r4
 8010150:	fb04 6610 	mls	r6, r4, r0, r6
 8010154:	603e      	str	r6, [r7, #0]
 8010156:	e7eb      	b.n	8010130 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8010158:	2601      	movs	r6, #1
 801015a:	fa09 fb01 	lsl.w	fp, r9, r1
 801015e:	408e      	lsls	r6, r1
 8010160:	fbbb f3f4 	udiv	r3, fp, r4
 8010164:	3e01      	subs	r6, #1
 8010166:	9302      	str	r3, [sp, #8]
 8010168:	fb0a f303 	mul.w	r3, sl, r3
 801016c:	4016      	ands	r6, r2
 801016e:	9303      	str	r3, [sp, #12]
 8010170:	4630      	mov	r0, r6
 8010172:	f7ff ffad 	bl	80100d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010176:	464a      	mov	r2, r9
 8010178:	460b      	mov	r3, r1
 801017a:	4601      	mov	r1, r0
 801017c:	4630      	mov	r0, r6
 801017e:	e9cd 4700 	strd	r4, r7, [sp]
 8010182:	f7ff ffc3 	bl	801010c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010186:	9b02      	ldr	r3, [sp, #8]
 8010188:	4606      	mov	r6, r0
 801018a:	eb05 0108 	add.w	r1, r5, r8
 801018e:	fb04 bb13 	mls	fp, r4, r3, fp
 8010192:	4658      	mov	r0, fp
 8010194:	f7ff ff9c 	bl	80100d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010198:	ab05      	add	r3, sp, #20
 801019a:	465a      	mov	r2, fp
 801019c:	e9cd 4300 	strd	r4, r3, [sp]
 80101a0:	4603      	mov	r3, r0
 80101a2:	4650      	mov	r0, sl
 80101a4:	f7ff ffb2 	bl	801010c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	9a05      	ldr	r2, [sp, #20]
 80101ac:	9b03      	ldr	r3, [sp, #12]
 80101ae:	4411      	add	r1, r2
 80101b0:	fbb1 f2f4 	udiv	r2, r1, r4
 80101b4:	18d3      	adds	r3, r2, r3
 80101b6:	fb04 1412 	mls	r4, r4, r2, r1
 80101ba:	441e      	add	r6, r3
 80101bc:	603c      	str	r4, [r7, #0]
 80101be:	4430      	add	r0, r6
 80101c0:	e7b6      	b.n	8010130 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080101c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80101c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101c6:	b085      	sub	sp, #20
 80101c8:	f1b0 0900 	subs.w	r9, r0, #0
 80101cc:	461d      	mov	r5, r3
 80101ce:	4617      	mov	r7, r2
 80101d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80101d2:	bfbb      	ittet	lt
 80101d4:	f1c9 0900 	rsblt	r9, r9, #0
 80101d8:	f04f 36ff 	movlt.w	r6, #4294967295
 80101dc:	2601      	movge	r6, #1
 80101de:	6823      	ldrlt	r3, [r4, #0]
 80101e0:	bfbc      	itt	lt
 80101e2:	425b      	neglt	r3, r3
 80101e4:	6023      	strlt	r3, [r4, #0]
 80101e6:	2a00      	cmp	r2, #0
 80101e8:	da04      	bge.n	80101f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	4257      	negs	r7, r2
 80101ee:	4276      	negs	r6, r6
 80101f0:	425b      	negs	r3, r3
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	2d00      	cmp	r5, #0
 80101f6:	4638      	mov	r0, r7
 80101f8:	bfba      	itte	lt
 80101fa:	426d      	neglt	r5, r5
 80101fc:	f04f 38ff 	movlt.w	r8, #4294967295
 8010200:	f04f 0801 	movge.w	r8, #1
 8010204:	f7ff ff64 	bl	80100d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010208:	ab03      	add	r3, sp, #12
 801020a:	463a      	mov	r2, r7
 801020c:	e9cd 5300 	strd	r5, r3, [sp]
 8010210:	4603      	mov	r3, r0
 8010212:	4648      	mov	r0, r9
 8010214:	f7ff ff7a 	bl	801010c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	9a03      	ldr	r2, [sp, #12]
 801021c:	4546      	cmp	r6, r8
 801021e:	441a      	add	r2, r3
 8010220:	fb92 f3f5 	sdiv	r3, r2, r5
 8010224:	4418      	add	r0, r3
 8010226:	fb05 2313 	mls	r3, r5, r3, r2
 801022a:	bf18      	it	ne
 801022c:	4240      	negne	r0, r0
 801022e:	1c72      	adds	r2, r6, #1
 8010230:	6023      	str	r3, [r4, #0]
 8010232:	d105      	bne.n	8010240 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8010234:	2b00      	cmp	r3, #0
 8010236:	f1c3 0200 	rsb	r2, r3, #0
 801023a:	db0b      	blt.n	8010254 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801023c:	6022      	str	r2, [r4, #0]
 801023e:	e006      	b.n	801024e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010240:	2e01      	cmp	r6, #1
 8010242:	d104      	bne.n	801024e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010244:	2b00      	cmp	r3, #0
 8010246:	da02      	bge.n	801024e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010248:	442b      	add	r3, r5
 801024a:	3801      	subs	r0, #1
 801024c:	6023      	str	r3, [r4, #0]
 801024e:	b005      	add	sp, #20
 8010250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010254:	3801      	subs	r0, #1
 8010256:	1b52      	subs	r2, r2, r5
 8010258:	e7f0      	b.n	801023c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801025c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801025c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010260:	4c1c      	ldr	r4, [pc, #112]	; (80102d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8010262:	4605      	mov	r5, r0
 8010264:	6807      	ldr	r7, [r0, #0]
 8010266:	69a3      	ldr	r3, [r4, #24]
 8010268:	b92b      	cbnz	r3, 8010276 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801026a:	6840      	ldr	r0, [r0, #4]
 801026c:	e9c5 7000 	strd	r7, r0, [r5]
 8010270:	b004      	add	sp, #16
 8010272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010276:	f04f 0802 	mov.w	r8, #2
 801027a:	68a2      	ldr	r2, [r4, #8]
 801027c:	ae04      	add	r6, sp, #16
 801027e:	6820      	ldr	r0, [r4, #0]
 8010280:	fb93 f1f8 	sdiv	r1, r3, r8
 8010284:	440a      	add	r2, r1
 8010286:	69e1      	ldr	r1, [r4, #28]
 8010288:	f846 2d04 	str.w	r2, [r6, #-4]!
 801028c:	463a      	mov	r2, r7
 801028e:	9600      	str	r6, [sp, #0]
 8010290:	f7ff ff97 	bl	80101c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8010294:	69a3      	ldr	r3, [r4, #24]
 8010296:	4607      	mov	r7, r0
 8010298:	686a      	ldr	r2, [r5, #4]
 801029a:	6a21      	ldr	r1, [r4, #32]
 801029c:	9600      	str	r6, [sp, #0]
 801029e:	6860      	ldr	r0, [r4, #4]
 80102a0:	f7ff ff8f 	bl	80101c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80102a4:	69a3      	ldr	r3, [r4, #24]
 80102a6:	6962      	ldr	r2, [r4, #20]
 80102a8:	4407      	add	r7, r0
 80102aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80102ac:	9600      	str	r6, [sp, #0]
 80102ae:	68e0      	ldr	r0, [r4, #12]
 80102b0:	fb93 f8f8 	sdiv	r8, r3, r8
 80102b4:	4442      	add	r2, r8
 80102b6:	9203      	str	r2, [sp, #12]
 80102b8:	682a      	ldr	r2, [r5, #0]
 80102ba:	f7ff ff82 	bl	80101c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80102be:	4680      	mov	r8, r0
 80102c0:	9600      	str	r6, [sp, #0]
 80102c2:	69a3      	ldr	r3, [r4, #24]
 80102c4:	686a      	ldr	r2, [r5, #4]
 80102c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80102c8:	6920      	ldr	r0, [r4, #16]
 80102ca:	f7ff ff7a 	bl	80101c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80102ce:	4440      	add	r0, r8
 80102d0:	e7cc      	b.n	801026c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80102d2:	bf00      	nop
 80102d4:	24006c70 	.word	0x24006c70

080102d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80102d8:	4b07      	ldr	r3, [pc, #28]	; (80102f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d109      	bne.n	80102f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80102e0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80102e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80102e8:	8003      	strh	r3, [r0, #0]
 80102ea:	4b04      	ldr	r3, [pc, #16]	; (80102fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	3b01      	subs	r3, #1
 80102f0:	1a9b      	subs	r3, r3, r2
 80102f2:	800b      	strh	r3, [r1, #0]
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	24006c5c 	.word	0x24006c5c
 80102fc:	24006c60 	.word	0x24006c60

08010300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8010300:	4b07      	ldr	r3, [pc, #28]	; (8010320 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8010302:	b510      	push	{r4, lr}
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	2b01      	cmp	r3, #1
 8010308:	d108      	bne.n	801031c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801030a:	4b06      	ldr	r3, [pc, #24]	; (8010324 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801030c:	880c      	ldrh	r4, [r1, #0]
 801030e:	881b      	ldrh	r3, [r3, #0]
 8010310:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010314:	3b01      	subs	r3, #1
 8010316:	1b1b      	subs	r3, r3, r4
 8010318:	8003      	strh	r3, [r0, #0]
 801031a:	800a      	strh	r2, [r1, #0]
 801031c:	bd10      	pop	{r4, pc}
 801031e:	bf00      	nop
 8010320:	24006c5c 	.word	0x24006c5c
 8010324:	24006c60 	.word	0x24006c60

08010328 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8010328:	4b0a      	ldr	r3, [pc, #40]	; (8010354 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801032a:	b510      	push	{r4, lr}
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d10e      	bne.n	8010350 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8010332:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010336:	8843      	ldrh	r3, [r0, #2]
 8010338:	f9b0 4000 	ldrsh.w	r4, [r0]
 801033c:	18ca      	adds	r2, r1, r3
 801033e:	4b06      	ldr	r3, [pc, #24]	; (8010358 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8010340:	8044      	strh	r4, [r0, #2]
 8010342:	881b      	ldrh	r3, [r3, #0]
 8010344:	1a9b      	subs	r3, r3, r2
 8010346:	8003      	strh	r3, [r0, #0]
 8010348:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801034c:	8081      	strh	r1, [r0, #4]
 801034e:	80c3      	strh	r3, [r0, #6]
 8010350:	bd10      	pop	{r4, pc}
 8010352:	bf00      	nop
 8010354:	24006c5c 	.word	0x24006c5c
 8010358:	24006c60 	.word	0x24006c60

0801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801035c:	4b08      	ldr	r3, [pc, #32]	; (8010380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d10c      	bne.n	801037e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8010364:	8803      	ldrh	r3, [r0, #0]
 8010366:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801036a:	8842      	ldrh	r2, [r0, #2]
 801036c:	8002      	strh	r2, [r0, #0]
 801036e:	185a      	adds	r2, r3, r1
 8010370:	4b04      	ldr	r3, [pc, #16]	; (8010384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8010372:	881b      	ldrh	r3, [r3, #0]
 8010374:	1a9b      	subs	r3, r3, r2
 8010376:	8043      	strh	r3, [r0, #2]
 8010378:	88c3      	ldrh	r3, [r0, #6]
 801037a:	80c1      	strh	r1, [r0, #6]
 801037c:	8083      	strh	r3, [r0, #4]
 801037e:	4770      	bx	lr
 8010380:	24006c5c 	.word	0x24006c5c
 8010384:	24006c60 	.word	0x24006c60

08010388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8010388:	4b07      	ldr	r3, [pc, #28]	; (80103a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801038a:	b510      	push	{r4, lr}
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	2b01      	cmp	r3, #1
 8010390:	d108      	bne.n	80103a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8010392:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010396:	f9b0 4000 	ldrsh.w	r4, [r0]
 801039a:	8003      	strh	r3, [r0, #0]
 801039c:	8893      	ldrh	r3, [r2, #4]
 801039e:	3b01      	subs	r3, #1
 80103a0:	1b1b      	subs	r3, r3, r4
 80103a2:	800b      	strh	r3, [r1, #0]
 80103a4:	bd10      	pop	{r4, pc}
 80103a6:	bf00      	nop
 80103a8:	24006c5c 	.word	0x24006c5c

080103ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80103ac:	4b0b      	ldr	r3, [pc, #44]	; (80103dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d111      	bne.n	80103d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80103b4:	680b      	ldr	r3, [r1, #0]
 80103b6:	ed90 7a00 	vldr	s14, [r0]
 80103ba:	6003      	str	r3, [r0, #0]
 80103bc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80103c0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80103e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80103c4:	ee07 3a90 	vmov	s15, r3
 80103c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80103d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103d4:	edc1 7a00 	vstr	s15, [r1]
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	24006c5c 	.word	0x24006c5c
 80103e0:	38d1b717 	.word	0x38d1b717

080103e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80103e4:	4b0a      	ldr	r3, [pc, #40]	; (8010410 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80103e6:	460a      	mov	r2, r1
 80103e8:	b510      	push	{r4, lr}
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	d10d      	bne.n	801040c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80103f0:	8881      	ldrh	r1, [r0, #4]
 80103f2:	8803      	ldrh	r3, [r0, #0]
 80103f4:	440b      	add	r3, r1
 80103f6:	4601      	mov	r1, r0
 80103f8:	3b01      	subs	r3, #1
 80103fa:	f821 3b02 	strh.w	r3, [r1], #2
 80103fe:	f7ff ffc3 	bl	8010388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010402:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010406:	88c2      	ldrh	r2, [r0, #6]
 8010408:	80c3      	strh	r3, [r0, #6]
 801040a:	8082      	strh	r2, [r0, #4]
 801040c:	bd10      	pop	{r4, pc}
 801040e:	bf00      	nop
 8010410:	24006c5c 	.word	0x24006c5c

08010414 <_ZN8touchgfx11Application13requestRedrawEv>:
 8010414:	4b06      	ldr	r3, [pc, #24]	; (8010430 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8010416:	2100      	movs	r1, #0
 8010418:	f9b3 2000 	ldrsh.w	r2, [r3]
 801041c:	4b05      	ldr	r3, [pc, #20]	; (8010434 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801041e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8010422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010426:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801042a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801042e:	4770      	bx	lr
 8010430:	24006c58 	.word	0x24006c58
 8010434:	24006c5a 	.word	0x24006c5a

08010438 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8010438:	4b03      	ldr	r3, [pc, #12]	; (8010448 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801043a:	6818      	ldr	r0, [r3, #0]
 801043c:	b110      	cbz	r0, 8010444 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801043e:	6803      	ldr	r3, [r0, #0]
 8010440:	699b      	ldr	r3, [r3, #24]
 8010442:	4718      	bx	r3
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	24006ca0 	.word	0x24006ca0

0801044c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801044c:	4770      	bx	lr
	...

08010450 <_ZN8touchgfx11Application4drawEv>:
 8010450:	4b09      	ldr	r3, [pc, #36]	; (8010478 <_ZN8touchgfx11Application4drawEv+0x28>)
 8010452:	b507      	push	{r0, r1, r2, lr}
 8010454:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010458:	2100      	movs	r1, #0
 801045a:	4b08      	ldr	r3, [pc, #32]	; (801047c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801045c:	9100      	str	r1, [sp, #0]
 801045e:	4669      	mov	r1, sp
 8010460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010464:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010468:	f8ad 3006 	strh.w	r3, [sp, #6]
 801046c:	6803      	ldr	r3, [r0, #0]
 801046e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010470:	4798      	blx	r3
 8010472:	b003      	add	sp, #12
 8010474:	f85d fb04 	ldr.w	pc, [sp], #4
 8010478:	24006c58 	.word	0x24006c58
 801047c:	24006c5a 	.word	0x24006c5a

08010480 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8010480:	4b03      	ldr	r3, [pc, #12]	; (8010490 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8010482:	6818      	ldr	r0, [r3, #0]
 8010484:	b110      	cbz	r0, 801048c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8010486:	6803      	ldr	r3, [r0, #0]
 8010488:	69db      	ldr	r3, [r3, #28]
 801048a:	4718      	bx	r3
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	24006ca0 	.word	0x24006ca0

08010494 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8010494:	4b03      	ldr	r3, [pc, #12]	; (80104a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8010496:	6818      	ldr	r0, [r3, #0]
 8010498:	b110      	cbz	r0, 80104a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801049a:	6803      	ldr	r3, [r0, #0]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	4718      	bx	r3
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	24006ca0 	.word	0x24006ca0

080104a8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80104a8:	4b03      	ldr	r3, [pc, #12]	; (80104b8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80104aa:	6818      	ldr	r0, [r3, #0]
 80104ac:	b110      	cbz	r0, 80104b4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80104ae:	6803      	ldr	r3, [r0, #0]
 80104b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b2:	4718      	bx	r3
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop
 80104b8:	24006ca0 	.word	0x24006ca0

080104bc <_ZN8touchgfx11ApplicationD1Ev>:
 80104bc:	4770      	bx	lr

080104be <_ZN8touchgfx11ApplicationD0Ev>:
 80104be:	b510      	push	{r4, lr}
 80104c0:	4604      	mov	r4, r0
 80104c2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80104c6:	f00b fddb 	bl	801c080 <_ZdlPvj>
 80104ca:	4620      	mov	r0, r4
 80104cc:	bd10      	pop	{r4, pc}
	...

080104d0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	4d38      	ldr	r5, [pc, #224]	; (80105b4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 80104d4:	4604      	mov	r4, r0
 80104d6:	6828      	ldr	r0, [r5, #0]
 80104d8:	b140      	cbz	r0, 80104ec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80104da:	7a03      	ldrb	r3, [r0, #8]
 80104dc:	b933      	cbnz	r3, 80104ec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80104de:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80104e2:	6803      	ldr	r3, [r0, #0]
 80104e4:	689b      	ldr	r3, [r3, #8]
 80104e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ea:	4718      	bx	r3
 80104ec:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80104f0:	b97b      	cbnz	r3, 8010512 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80104f2:	b170      	cbz	r0, 8010512 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80104f4:	7a03      	ldrb	r3, [r0, #8]
 80104f6:	b163      	cbz	r3, 8010512 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80104f8:	4b2f      	ldr	r3, [pc, #188]	; (80105b8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80104fa:	6818      	ldr	r0, [r3, #0]
 80104fc:	b110      	cbz	r0, 8010504 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80104fe:	6803      	ldr	r3, [r0, #0]
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	4798      	blx	r3
 8010504:	6828      	ldr	r0, [r5, #0]
 8010506:	6803      	ldr	r3, [r0, #0]
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	4798      	blx	r3
 801050c:	2301      	movs	r3, #1
 801050e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8010512:	2500      	movs	r5, #0
 8010514:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8010518:	42a8      	cmp	r0, r5
 801051a:	dd0c      	ble.n	8010536 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801051c:	1963      	adds	r3, r4, r5
 801051e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010522:	b132      	cbz	r2, 8010532 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8010524:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8010528:	4413      	add	r3, r2
 801052a:	6858      	ldr	r0, [r3, #4]
 801052c:	6803      	ldr	r3, [r0, #0]
 801052e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010530:	4798      	blx	r3
 8010532:	3501      	adds	r5, #1
 8010534:	e7ee      	b.n	8010514 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010536:	2300      	movs	r3, #0
 8010538:	461a      	mov	r2, r3
 801053a:	4298      	cmp	r0, r3
 801053c:	d10f      	bne.n	801055e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801053e:	1d25      	adds	r5, r4, #4
 8010540:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8010544:	4291      	cmp	r1, r2
 8010546:	dd2d      	ble.n	80105a4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8010548:	1e48      	subs	r0, r1, #1
 801054a:	b280      	uxth	r0, r0
 801054c:	4288      	cmp	r0, r1
 801054e:	d31a      	bcc.n	8010586 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8010550:	4b1a      	ldr	r3, [pc, #104]	; (80105bc <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8010552:	f240 11a9 	movw	r1, #425	; 0x1a9
 8010556:	4a1a      	ldr	r2, [pc, #104]	; (80105c0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8010558:	481a      	ldr	r0, [pc, #104]	; (80105c4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801055a:	f00b fea7 	bl	801c2ac <__assert_func>
 801055e:	18e1      	adds	r1, r4, r3
 8010560:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8010564:	b16d      	cbz	r5, 8010582 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8010566:	429a      	cmp	r2, r3
 8010568:	d00a      	beq.n	8010580 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801056a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801056e:	4431      	add	r1, r6
 8010570:	684e      	ldr	r6, [r1, #4]
 8010572:	b291      	uxth	r1, r2
 8010574:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010578:	604e      	str	r6, [r1, #4]
 801057a:	18a1      	adds	r1, r4, r2
 801057c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8010580:	3201      	adds	r2, #1
 8010582:	3301      	adds	r3, #1
 8010584:	e7d9      	b.n	801053a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8010586:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801058a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801058e:	3304      	adds	r3, #4
 8010590:	428b      	cmp	r3, r1
 8010592:	d004      	beq.n	801059e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8010594:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8010598:	f843 6c04 	str.w	r6, [r3, #-4]
 801059c:	e7f8      	b.n	8010590 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801059e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 80105a2:	e7cd      	b.n	8010540 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 80105a4:	4b04      	ldr	r3, [pc, #16]	; (80105b8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80105a6:	6818      	ldr	r0, [r3, #0]
 80105a8:	b110      	cbz	r0, 80105b0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80105aa:	6803      	ldr	r3, [r0, #0]
 80105ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ae:	e79a      	b.n	80104e6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80105b0:	bd70      	pop	{r4, r5, r6, pc}
 80105b2:	bf00      	nop
 80105b4:	24006ca4 	.word	0x24006ca4
 80105b8:	24006ca0 	.word	0x24006ca0
 80105bc:	0801f70a 	.word	0x0801f70a
 80105c0:	0801f8f4 	.word	0x0801f8f4
 80105c4:	0801f718 	.word	0x0801f718

080105c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80105c8:	b570      	push	{r4, r5, r6, lr}
 80105ca:	4606      	mov	r6, r0
 80105cc:	460c      	mov	r4, r1
 80105ce:	b929      	cbnz	r1, 80105dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80105d0:	4b0c      	ldr	r3, [pc, #48]	; (8010604 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80105d2:	2167      	movs	r1, #103	; 0x67
 80105d4:	4a0c      	ldr	r2, [pc, #48]	; (8010608 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80105d6:	480d      	ldr	r0, [pc, #52]	; (801060c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80105d8:	f00b fe68 	bl	801c2ac <__assert_func>
 80105dc:	2300      	movs	r3, #0
 80105de:	4d0c      	ldr	r5, [pc, #48]	; (8010610 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80105e0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80105e4:	6828      	ldr	r0, [r5, #0]
 80105e6:	b110      	cbz	r0, 80105ee <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80105e8:	6803      	ldr	r3, [r0, #0]
 80105ea:	695b      	ldr	r3, [r3, #20]
 80105ec:	4798      	blx	r3
 80105ee:	602c      	str	r4, [r5, #0]
 80105f0:	4620      	mov	r0, r4
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	4798      	blx	r3
 80105f8:	6833      	ldr	r3, [r6, #0]
 80105fa:	4630      	mov	r0, r6
 80105fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010602:	4718      	bx	r3
 8010604:	0801f6d6 	.word	0x0801f6d6
 8010608:	0801f7b4 	.word	0x0801f7b4
 801060c:	0801f6e0 	.word	0x0801f6e0
 8010610:	24006ca0 	.word	0x24006ca0

08010614 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8010614:	b510      	push	{r4, lr}
 8010616:	f9b1 4000 	ldrsh.w	r4, [r1]
 801061a:	888a      	ldrh	r2, [r1, #4]
 801061c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010620:	4422      	add	r2, r4
 8010622:	b212      	sxth	r2, r2
 8010624:	4293      	cmp	r3, r2
 8010626:	da15      	bge.n	8010654 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010628:	8882      	ldrh	r2, [r0, #4]
 801062a:	4413      	add	r3, r2
 801062c:	b21b      	sxth	r3, r3
 801062e:	429c      	cmp	r4, r3
 8010630:	da10      	bge.n	8010654 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010632:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010636:	88c9      	ldrh	r1, [r1, #6]
 8010638:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801063c:	4419      	add	r1, r3
 801063e:	b209      	sxth	r1, r1
 8010640:	428a      	cmp	r2, r1
 8010642:	da07      	bge.n	8010654 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010644:	88c0      	ldrh	r0, [r0, #6]
 8010646:	4410      	add	r0, r2
 8010648:	b200      	sxth	r0, r0
 801064a:	4283      	cmp	r3, r0
 801064c:	bfac      	ite	ge
 801064e:	2000      	movge	r0, #0
 8010650:	2001      	movlt	r0, #1
 8010652:	bd10      	pop	{r4, pc}
 8010654:	2000      	movs	r0, #0
 8010656:	e7fc      	b.n	8010652 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08010658 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801065e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010662:	42ac      	cmp	r4, r5
 8010664:	db18      	blt.n	8010698 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010666:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801066a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801066e:	429a      	cmp	r2, r3
 8010670:	db12      	blt.n	8010698 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010672:	8886      	ldrh	r6, [r0, #4]
 8010674:	4435      	add	r5, r6
 8010676:	888e      	ldrh	r6, [r1, #4]
 8010678:	4434      	add	r4, r6
 801067a:	b22d      	sxth	r5, r5
 801067c:	b224      	sxth	r4, r4
 801067e:	42a5      	cmp	r5, r4
 8010680:	db0a      	blt.n	8010698 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010682:	88c0      	ldrh	r0, [r0, #6]
 8010684:	4418      	add	r0, r3
 8010686:	88cb      	ldrh	r3, [r1, #6]
 8010688:	441a      	add	r2, r3
 801068a:	b200      	sxth	r0, r0
 801068c:	b212      	sxth	r2, r2
 801068e:	4290      	cmp	r0, r2
 8010690:	bfb4      	ite	lt
 8010692:	2000      	movlt	r0, #0
 8010694:	2001      	movge	r0, #1
 8010696:	bd70      	pop	{r4, r5, r6, pc}
 8010698:	2000      	movs	r0, #0
 801069a:	e7fc      	b.n	8010696 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801069c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801069e:	4604      	mov	r4, r0
 80106a0:	4608      	mov	r0, r1
 80106a2:	460d      	mov	r5, r1
 80106a4:	f7fc f973 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 80106a8:	b978      	cbnz	r0, 80106ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80106aa:	4620      	mov	r0, r4
 80106ac:	f7fc f96f 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 80106b0:	f9b5 6000 	ldrsh.w	r6, [r5]
 80106b4:	b150      	cbz	r0, 80106cc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80106b6:	8026      	strh	r6, [r4, #0]
 80106b8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80106bc:	8063      	strh	r3, [r4, #2]
 80106be:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80106c2:	80a3      	strh	r3, [r4, #4]
 80106c4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80106c8:	80e3      	strh	r3, [r4, #6]
 80106ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80106d0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80106d4:	42b1      	cmp	r1, r6
 80106d6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80106da:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80106de:	460f      	mov	r7, r1
 80106e0:	88ed      	ldrh	r5, [r5, #6]
 80106e2:	bfa8      	it	ge
 80106e4:	4637      	movge	r7, r6
 80106e6:	4293      	cmp	r3, r2
 80106e8:	4618      	mov	r0, r3
 80106ea:	4466      	add	r6, ip
 80106ec:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80106f0:	bfa8      	it	ge
 80106f2:	4610      	movge	r0, r2
 80106f4:	442a      	add	r2, r5
 80106f6:	88e5      	ldrh	r5, [r4, #6]
 80106f8:	4461      	add	r1, ip
 80106fa:	b236      	sxth	r6, r6
 80106fc:	8027      	strh	r7, [r4, #0]
 80106fe:	442b      	add	r3, r5
 8010700:	b209      	sxth	r1, r1
 8010702:	b212      	sxth	r2, r2
 8010704:	8060      	strh	r0, [r4, #2]
 8010706:	b21b      	sxth	r3, r3
 8010708:	428e      	cmp	r6, r1
 801070a:	bfac      	ite	ge
 801070c:	ebc7 0106 	rsbge	r1, r7, r6
 8010710:	ebc7 0101 	rsblt	r1, r7, r1
 8010714:	429a      	cmp	r2, r3
 8010716:	bfac      	ite	ge
 8010718:	ebc0 0202 	rsbge	r2, r0, r2
 801071c:	ebc0 0203 	rsblt	r2, r0, r3
 8010720:	80a1      	strh	r1, [r4, #4]
 8010722:	80e2      	strh	r2, [r4, #6]
 8010724:	e7d1      	b.n	80106ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08010728 <_ZN8touchgfx11Application11getInstanceEv>:
 8010728:	4b01      	ldr	r3, [pc, #4]	; (8010730 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801072a:	6818      	ldr	r0, [r3, #0]
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	24006cb0 	.word	0x24006cb0

08010734 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8010734:	2300      	movs	r3, #0
 8010736:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801073a:	30a8      	adds	r0, #168	; 0xa8
 801073c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8010740:	f802 3b01 	strb.w	r3, [r2], #1
 8010744:	4282      	cmp	r2, r0
 8010746:	d1fb      	bne.n	8010740 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8010748:	4770      	bx	lr

0801074a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801074a:	4603      	mov	r3, r0
 801074c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8010750:	2200      	movs	r2, #0
 8010752:	801a      	strh	r2, [r3, #0]
 8010754:	3308      	adds	r3, #8
 8010756:	f823 2c06 	strh.w	r2, [r3, #-6]
 801075a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801075e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8010762:	428b      	cmp	r3, r1
 8010764:	d1f5      	bne.n	8010752 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8010766:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801076a:	4770      	bx	lr

0801076c <_ZN8touchgfx11ApplicationC1Ev>:
 801076c:	b570      	push	{r4, r5, r6, lr}
 801076e:	4b1a      	ldr	r3, [pc, #104]	; (80107d8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8010770:	2500      	movs	r5, #0
 8010772:	4604      	mov	r4, r0
 8010774:	30a8      	adds	r0, #168	; 0xa8
 8010776:	f840 3ca8 	str.w	r3, [r0, #-168]
 801077a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801077e:	f7ff ffe4 	bl	801074a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010782:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8010786:	f7ff ffe0 	bl	801074a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801078a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801078e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8010792:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8010796:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801079a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801079e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80107a2:	490e      	ldr	r1, [pc, #56]	; (80107dc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80107a4:	480e      	ldr	r0, [pc, #56]	; (80107e0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80107a6:	f00b fb3f 	bl	801be28 <CRC_Lock>
 80107aa:	4e0e      	ldr	r6, [pc, #56]	; (80107e4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80107ac:	4b0e      	ldr	r3, [pc, #56]	; (80107e8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80107ae:	b158      	cbz	r0, 80107c8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 80107b0:	801d      	strh	r5, [r3, #0]
 80107b2:	2300      	movs	r3, #0
 80107b4:	4a0d      	ldr	r2, [pc, #52]	; (80107ec <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80107b6:	4620      	mov	r0, r4
 80107b8:	6013      	str	r3, [r2, #0]
 80107ba:	4a0d      	ldr	r2, [pc, #52]	; (80107f0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80107bc:	6033      	str	r3, [r6, #0]
 80107be:	6013      	str	r3, [r2, #0]
 80107c0:	f7ff ffb8 	bl	8010734 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80107c4:	4620      	mov	r0, r4
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
 80107c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80107cc:	2002      	movs	r0, #2
 80107ce:	801a      	strh	r2, [r3, #0]
 80107d0:	6030      	str	r0, [r6, #0]
 80107d2:	f001 fa23 	bl	8011c1c <_ZN8touchgfx6Screen4drawEv>
 80107d6:	e7ec      	b.n	80107b2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 80107d8:	0801f778 	.word	0x0801f778
 80107dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80107e0:	f407a5c2 	.word	0xf407a5c2
 80107e4:	24006ca0 	.word	0x24006ca0
 80107e8:	24000080 	.word	0x24000080
 80107ec:	24006cb0 	.word	0x24006cb0
 80107f0:	24006ca4 	.word	0x24006ca4

080107f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80107fa:	428b      	cmp	r3, r1
 80107fc:	d806      	bhi.n	801080c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 80107fe:	4b0b      	ldr	r3, [pc, #44]	; (801082c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8010800:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8010804:	4a0a      	ldr	r2, [pc, #40]	; (8010830 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8010806:	480b      	ldr	r0, [pc, #44]	; (8010834 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8010808:	f00b fd50 	bl	801c2ac <__assert_func>
 801080c:	3b01      	subs	r3, #1
 801080e:	b29b      	uxth	r3, r3
 8010810:	428b      	cmp	r3, r1
 8010812:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8010816:	d908      	bls.n	801082a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8010818:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801081c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8010826:	685a      	ldr	r2, [r3, #4]
 8010828:	6062      	str	r2, [r4, #4]
 801082a:	bd10      	pop	{r4, pc}
 801082c:	0801f70a 	.word	0x0801f70a
 8010830:	0801f7f8 	.word	0x0801f7f8
 8010834:	0801f718 	.word	0x0801f718

08010838 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8010838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801083a:	466b      	mov	r3, sp
 801083c:	4604      	mov	r4, r0
 801083e:	e883 0006 	stmia.w	r3, {r1, r2}
 8010842:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8010846:	2a07      	cmp	r2, #7
 8010848:	d906      	bls.n	8010858 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801084a:	4b09      	ldr	r3, [pc, #36]	; (8010870 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801084c:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8010850:	4a08      	ldr	r2, [pc, #32]	; (8010874 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8010852:	4809      	ldr	r0, [pc, #36]	; (8010878 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8010854:	f00b fd2a 	bl	801c2ac <__assert_func>
 8010858:	1c51      	adds	r1, r2, #1
 801085a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801085e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8010862:	cb03      	ldmia	r3!, {r0, r1}
 8010864:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8010868:	6069      	str	r1, [r5, #4]
 801086a:	b003      	add	sp, #12
 801086c:	bd30      	pop	{r4, r5, pc}
 801086e:	bf00      	nop
 8010870:	0801f741 	.word	0x0801f741
 8010874:	0801f88e 	.word	0x0801f88e
 8010878:	0801f718 	.word	0x0801f718

0801087c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010880:	b08d      	sub	sp, #52	; 0x34
 8010882:	4683      	mov	fp, r0
 8010884:	ac08      	add	r4, sp, #32
 8010886:	4620      	mov	r0, r4
 8010888:	e884 0006 	stmia.w	r4, {r1, r2}
 801088c:	f7fc f87f 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010890:	2800      	cmp	r0, #0
 8010892:	d16a      	bne.n	801096a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010894:	9402      	str	r4, [sp, #8]
 8010896:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801089a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801089e:	2400      	movs	r4, #0
 80108a0:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	36a0      	adds	r6, #160	; 0xa0
 80108a8:	42a5      	cmp	r5, r4
 80108aa:	d00d      	beq.n	80108c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 80108ac:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80108b0:	9802      	ldr	r0, [sp, #8]
 80108b2:	f7ff fed1 	bl	8010658 <_ZNK8touchgfx4Rect8includesERKS0_>
 80108b6:	b128      	cbz	r0, 80108c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80108b8:	1e69      	subs	r1, r5, #1
 80108ba:	9801      	ldr	r0, [sp, #4]
 80108bc:	1b09      	subs	r1, r1, r4
 80108be:	b289      	uxth	r1, r1
 80108c0:	f7ff ff98 	bl	80107f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80108c4:	3401      	adds	r4, #1
 80108c6:	e7ef      	b.n	80108a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80108c8:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80108cc:	1e7b      	subs	r3, r7, #1
 80108ce:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80108d2:	9703      	str	r7, [sp, #12]
 80108d4:	9300      	str	r3, [sp, #0]
 80108d6:	2400      	movs	r4, #0
 80108d8:	4655      	mov	r5, sl
 80108da:	9704      	str	r7, [sp, #16]
 80108dc:	4626      	mov	r6, r4
 80108de:	9b04      	ldr	r3, [sp, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d078      	beq.n	80109d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 80108e4:	9902      	ldr	r1, [sp, #8]
 80108e6:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80108ea:	f7ff fe93 	bl	8010614 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80108ee:	b360      	cbz	r0, 801094a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80108f0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80108f4:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80108f8:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 80108fc:	45e6      	cmp	lr, ip
 80108fe:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8010902:	db35      	blt.n	8010970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8010904:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010908:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801090c:	4472      	add	r2, lr
 801090e:	4463      	add	r3, ip
 8010910:	b212      	sxth	r2, r2
 8010912:	b21b      	sxth	r3, r3
 8010914:	429a      	cmp	r2, r3
 8010916:	dc2b      	bgt.n	8010970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8010918:	fa1f f288 	uxth.w	r2, r8
 801091c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010920:	45c1      	cmp	r9, r8
 8010922:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010926:	4413      	add	r3, r2
 8010928:	fa1f fc89 	uxth.w	ip, r9
 801092c:	b29b      	uxth	r3, r3
 801092e:	fa0f fe83 	sxth.w	lr, r3
 8010932:	db0f      	blt.n	8010954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8010934:	eba3 030c 	sub.w	r3, r3, ip
 8010938:	1ac9      	subs	r1, r1, r3
 801093a:	b209      	sxth	r1, r1
 801093c:	2900      	cmp	r1, #0
 801093e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010942:	dd12      	ble.n	801096a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010944:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8010948:	4604      	mov	r4, r0
 801094a:	9b04      	ldr	r3, [sp, #16]
 801094c:	3d08      	subs	r5, #8
 801094e:	3b01      	subs	r3, #1
 8010950:	9304      	str	r3, [sp, #16]
 8010952:	e7c4      	b.n	80108de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8010954:	4461      	add	r1, ip
 8010956:	b209      	sxth	r1, r1
 8010958:	4571      	cmp	r1, lr
 801095a:	dc3a      	bgt.n	80109d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801095c:	eba2 020c 	sub.w	r2, r2, ip
 8010960:	b212      	sxth	r2, r2
 8010962:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010966:	2a00      	cmp	r2, #0
 8010968:	dcee      	bgt.n	8010948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801096a:	b00d      	add	sp, #52	; 0x34
 801096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010970:	45c1      	cmp	r9, r8
 8010972:	db2e      	blt.n	80109d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010974:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8010978:	4499      	add	r9, r3
 801097a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801097e:	4498      	add	r8, r3
 8010980:	fa0f f989 	sxth.w	r9, r9
 8010984:	fa0f f888 	sxth.w	r8, r8
 8010988:	45c1      	cmp	r9, r8
 801098a:	dc22      	bgt.n	80109d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801098c:	fa1f f28c 	uxth.w	r2, ip
 8010990:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010994:	45e6      	cmp	lr, ip
 8010996:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801099a:	4413      	add	r3, r2
 801099c:	fa1f f88e 	uxth.w	r8, lr
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	fa0f f983 	sxth.w	r9, r3
 80109a6:	db0a      	blt.n	80109be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 80109a8:	eba3 0308 	sub.w	r3, r3, r8
 80109ac:	1ac9      	subs	r1, r1, r3
 80109ae:	b209      	sxth	r1, r1
 80109b0:	2900      	cmp	r1, #0
 80109b2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80109b6:	ddd8      	ble.n	801096a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80109b8:	f8ad 9020 	strh.w	r9, [sp, #32]
 80109bc:	e7c4      	b.n	8010948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80109be:	4441      	add	r1, r8
 80109c0:	b209      	sxth	r1, r1
 80109c2:	4549      	cmp	r1, r9
 80109c4:	dc05      	bgt.n	80109d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80109c6:	eba2 0208 	sub.w	r2, r2, r8
 80109ca:	b212      	sxth	r2, r2
 80109cc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80109d0:	e7c9      	b.n	8010966 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80109d2:	4606      	mov	r6, r0
 80109d4:	e7b9      	b.n	801094a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80109d6:	2c00      	cmp	r4, #0
 80109d8:	f47f af7d 	bne.w	80108d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80109dc:	2e00      	cmp	r6, #0
 80109de:	f000 81dc 	beq.w	8010d9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80109e2:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 80109e6:	4655      	mov	r5, sl
 80109e8:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80109ec:	b2b9      	uxth	r1, r7
 80109ee:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80109f2:	b2b3      	uxth	r3, r6
 80109f4:	9104      	str	r1, [sp, #16]
 80109f6:	9804      	ldr	r0, [sp, #16]
 80109f8:	441a      	add	r2, r3
 80109fa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80109fe:	b292      	uxth	r2, r2
 8010a00:	4401      	add	r1, r0
 8010a02:	fa0f f882 	sxth.w	r8, r2
 8010a06:	b289      	uxth	r1, r1
 8010a08:	9105      	str	r1, [sp, #20]
 8010a0a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8010a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010a12:	9b03      	ldr	r3, [sp, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d054      	beq.n	8010ac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8010a18:	9902      	ldr	r1, [sp, #8]
 8010a1a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010a1e:	f7ff fdf9 	bl	8010614 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010a22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a26:	b1d8      	cbz	r0, 8010a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010a28:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8010a2c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8010a30:	4576      	cmp	r6, lr
 8010a32:	dc26      	bgt.n	8010a82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010a34:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8010a38:	44f4      	add	ip, lr
 8010a3a:	fa0f fc8c 	sxth.w	ip, ip
 8010a3e:	45e0      	cmp	r8, ip
 8010a40:	db1f      	blt.n	8010a82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010a42:	428f      	cmp	r7, r1
 8010a44:	fa1f fc81 	uxth.w	ip, r1
 8010a48:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8010a4c:	dc0f      	bgt.n	8010a6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8010a4e:	9805      	ldr	r0, [sp, #20]
 8010a50:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8010a54:	eba0 0c0c 	sub.w	ip, r0, ip
 8010a58:	eba1 010c 	sub.w	r1, r1, ip
 8010a5c:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8010a60:	4620      	mov	r0, r4
 8010a62:	9903      	ldr	r1, [sp, #12]
 8010a64:	3d08      	subs	r5, #8
 8010a66:	4604      	mov	r4, r0
 8010a68:	3901      	subs	r1, #1
 8010a6a:	9103      	str	r1, [sp, #12]
 8010a6c:	e7cf      	b.n	8010a0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8010a6e:	4461      	add	r1, ip
 8010a70:	b209      	sxth	r1, r1
 8010a72:	4549      	cmp	r1, r9
 8010a74:	dcf5      	bgt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010a76:	9904      	ldr	r1, [sp, #16]
 8010a78:	eba1 0c0c 	sub.w	ip, r1, ip
 8010a7c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8010a80:	e7ee      	b.n	8010a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010a82:	428f      	cmp	r7, r1
 8010a84:	dced      	bgt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010a86:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8010a8a:	4461      	add	r1, ip
 8010a8c:	b209      	sxth	r1, r1
 8010a8e:	4589      	cmp	r9, r1
 8010a90:	dbe7      	blt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010a92:	4576      	cmp	r6, lr
 8010a94:	fa1f fc8e 	uxth.w	ip, lr
 8010a98:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8010a9c:	dc08      	bgt.n	8010ab0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8010a9e:	eba2 0c0c 	sub.w	ip, r2, ip
 8010aa2:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8010aa6:	eba1 010c 	sub.w	r1, r1, ip
 8010aaa:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8010aae:	e7d7      	b.n	8010a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010ab0:	4461      	add	r1, ip
 8010ab2:	b209      	sxth	r1, r1
 8010ab4:	4588      	cmp	r8, r1
 8010ab6:	dbd4      	blt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010ab8:	eba3 0c0c 	sub.w	ip, r3, ip
 8010abc:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8010ac0:	e7ce      	b.n	8010a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010ac2:	2c00      	cmp	r4, #0
 8010ac4:	f000 8169 	beq.w	8010d9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010ac8:	9b00      	ldr	r3, [sp, #0]
 8010aca:	3301      	adds	r3, #1
 8010acc:	f000 8165 	beq.w	8010d9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010ad0:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8010ad4:	9802      	ldr	r0, [sp, #8]
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	f7ff fdbe 	bl	8010658 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010adc:	b120      	cbz	r0, 8010ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8010ade:	f8bd 1000 	ldrh.w	r1, [sp]
 8010ae2:	9801      	ldr	r0, [sp, #4]
 8010ae4:	f7ff fe86 	bl	80107f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010ae8:	9902      	ldr	r1, [sp, #8]
 8010aea:	4620      	mov	r0, r4
 8010aec:	f7ff fd92 	bl	8010614 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	f000 809b 	beq.w	8010c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8010af6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8010afa:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8010afe:	fa1f f288 	uxth.w	r2, r8
 8010b02:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8010b06:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8010b0a:	19d5      	adds	r5, r2, r7
 8010b0c:	b2a1      	uxth	r1, r4
 8010b0e:	45a0      	cmp	r8, r4
 8010b10:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010b14:	fa1f f985 	uxth.w	r9, r5
 8010b18:	440b      	add	r3, r1
 8010b1a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8010b1e:	fa0f f589 	sxth.w	r5, r9
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	9503      	str	r5, [sp, #12]
 8010b26:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8010b2a:	9507      	str	r5, [sp, #28]
 8010b2c:	f340 809d 	ble.w	8010c6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8010b30:	1a52      	subs	r2, r2, r1
 8010b32:	4584      	cmp	ip, r0
 8010b34:	fa0f fe83 	sxth.w	lr, r3
 8010b38:	b292      	uxth	r2, r2
 8010b3a:	b215      	sxth	r5, r2
 8010b3c:	dd2f      	ble.n	8010b9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8010b3e:	9e00      	ldr	r6, [sp, #0]
 8010b40:	fa1f fc8c 	uxth.w	ip, ip
 8010b44:	b280      	uxth	r0, r0
 8010b46:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010b4a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8010b4e:	9e03      	ldr	r6, [sp, #12]
 8010b50:	ebac 0300 	sub.w	r3, ip, r0
 8010b54:	448c      	add	ip, r1
 8010b56:	eba6 060e 	sub.w	r6, r6, lr
 8010b5a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	4470      	add	r0, lr
 8010b62:	fa0f fc8c 	sxth.w	ip, ip
 8010b66:	b21c      	sxth	r4, r3
 8010b68:	b200      	sxth	r0, r0
 8010b6a:	4366      	muls	r6, r4
 8010b6c:	ebac 0000 	sub.w	r0, ip, r0
 8010b70:	4368      	muls	r0, r5
 8010b72:	4286      	cmp	r6, r0
 8010b74:	db09      	blt.n	8010b8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8010b76:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8010b7a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8010b7e:	4417      	add	r7, r2
 8010b80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010b84:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010b88:	e685      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010b8a:	440b      	add	r3, r1
 8010b8c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8010b90:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010b94:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8010b98:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010b9c:	e67b      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010b9e:	9e03      	ldr	r6, [sp, #12]
 8010ba0:	45b6      	cmp	lr, r6
 8010ba2:	da28      	bge.n	8010bf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8010ba4:	9b00      	ldr	r3, [sp, #0]
 8010ba6:	eba6 060e 	sub.w	r6, r6, lr
 8010baa:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8010bae:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8010bb2:	eb04 030c 	add.w	r3, r4, ip
 8010bb6:	fa1f f883 	uxth.w	r8, r3
 8010bba:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8010bbe:	4403      	add	r3, r0
 8010bc0:	fa0f f988 	sxth.w	r9, r8
 8010bc4:	eba0 000c 	sub.w	r0, r0, ip
 8010bc8:	eba3 0308 	sub.w	r3, r3, r8
 8010bcc:	4368      	muls	r0, r5
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	fa0f f883 	sxth.w	r8, r3
 8010bd4:	fb08 f606 	mul.w	r6, r8, r6
 8010bd8:	42b0      	cmp	r0, r6
 8010bda:	dc06      	bgt.n	8010bea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8010bdc:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8010be0:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8010be4:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8010be8:	e7c9      	b.n	8010b7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8010bea:	4423      	add	r3, r4
 8010bec:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8010bf0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010bf4:	e64f      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010bf6:	eba3 0309 	sub.w	r3, r3, r9
 8010bfa:	9807      	ldr	r0, [sp, #28]
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	2806      	cmp	r0, #6
 8010c00:	fa0f fc83 	sxth.w	ip, r3
 8010c04:	d818      	bhi.n	8010c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8010c06:	4652      	mov	r2, sl
 8010c08:	ab0a      	add	r3, sp, #40	; 0x28
 8010c0a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8010c0e:	6851      	ldr	r1, [r2, #4]
 8010c10:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8010c14:	c303      	stmia	r3!, {r0, r1}
 8010c16:	9b03      	ldr	r3, [sp, #12]
 8010c18:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8010c1c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8010c20:	ab0a      	add	r3, sp, #40	; 0x28
 8010c22:	9801      	ldr	r0, [sp, #4]
 8010c24:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010c28:	f7ff fe06 	bl	8010838 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010c2c:	9b00      	ldr	r3, [sp, #0]
 8010c2e:	f1aa 0a08 	sub.w	sl, sl, #8
 8010c32:	3b01      	subs	r3, #1
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	e747      	b.n	8010ac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8010c38:	9800      	ldr	r0, [sp, #0]
 8010c3a:	45ac      	cmp	ip, r5
 8010c3c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010c40:	db0c      	blt.n	8010c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8010c42:	4417      	add	r7, r2
 8010c44:	4458      	add	r0, fp
 8010c46:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010c4a:	b2bf      	uxth	r7, r7
 8010c4c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8010c50:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010c54:	440f      	add	r7, r1
 8010c56:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8010c5a:	e61c      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c5c:	4458      	add	r0, fp
 8010c5e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8010c62:	443b      	add	r3, r7
 8010c64:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010c68:	e615      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c6a:	fa1f f18c 	uxth.w	r1, ip
 8010c6e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8010c72:	b282      	uxth	r2, r0
 8010c74:	4584      	cmp	ip, r0
 8010c76:	eb01 0e05 	add.w	lr, r1, r5
 8010c7a:	9204      	str	r2, [sp, #16]
 8010c7c:	fa1f fe8e 	uxth.w	lr, lr
 8010c80:	9e04      	ldr	r6, [sp, #16]
 8010c82:	fa0f f28e 	sxth.w	r2, lr
 8010c86:	9205      	str	r2, [sp, #20]
 8010c88:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8010c8c:	4432      	add	r2, r6
 8010c8e:	b292      	uxth	r2, r2
 8010c90:	9206      	str	r2, [sp, #24]
 8010c92:	da26      	bge.n	8010ce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8010c94:	eba3 0309 	sub.w	r3, r3, r9
 8010c98:	eba2 020e 	sub.w	r2, r2, lr
 8010c9c:	eba0 000c 	sub.w	r0, r0, ip
 8010ca0:	eba4 0408 	sub.w	r4, r4, r8
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	b292      	uxth	r2, r2
 8010ca8:	fa0f fa83 	sxth.w	sl, r3
 8010cac:	b211      	sxth	r1, r2
 8010cae:	fb0a f000 	mul.w	r0, sl, r0
 8010cb2:	434c      	muls	r4, r1
 8010cb4:	42a0      	cmp	r0, r4
 8010cb6:	9800      	ldr	r0, [sp, #0]
 8010cb8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010cbc:	dc06      	bgt.n	8010ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8010cbe:	4458      	add	r0, fp
 8010cc0:	9a05      	ldr	r2, [sp, #20]
 8010cc2:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8010cc6:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8010cca:	e7ca      	b.n	8010c62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010ccc:	eb0b 0300 	add.w	r3, fp, r0
 8010cd0:	9903      	ldr	r1, [sp, #12]
 8010cd2:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8010cd6:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8010cda:	442a      	add	r2, r5
 8010cdc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010ce0:	e5d9      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010ce2:	9e04      	ldr	r6, [sp, #16]
 8010ce4:	9a03      	ldr	r2, [sp, #12]
 8010ce6:	1b89      	subs	r1, r1, r6
 8010ce8:	b21e      	sxth	r6, r3
 8010cea:	b289      	uxth	r1, r1
 8010cec:	4296      	cmp	r6, r2
 8010cee:	fa0f fc81 	sxth.w	ip, r1
 8010cf2:	dd25      	ble.n	8010d40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8010cf4:	eba3 0309 	sub.w	r3, r3, r9
 8010cf8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8010cfc:	9e05      	ldr	r6, [sp, #20]
 8010cfe:	eba4 0408 	sub.w	r4, r4, r8
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	eba6 0902 	sub.w	r9, r6, r2
 8010d08:	fb0c f404 	mul.w	r4, ip, r4
 8010d0c:	b218      	sxth	r0, r3
 8010d0e:	9a00      	ldr	r2, [sp, #0]
 8010d10:	fb00 f909 	mul.w	r9, r0, r9
 8010d14:	00d2      	lsls	r2, r2, #3
 8010d16:	454c      	cmp	r4, r9
 8010d18:	db03      	blt.n	8010d22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8010d1a:	445a      	add	r2, fp
 8010d1c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8010d20:	e79f      	b.n	8010c62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010d22:	eb0b 0302 	add.w	r3, fp, r2
 8010d26:	9a03      	ldr	r2, [sp, #12]
 8010d28:	4429      	add	r1, r5
 8010d2a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8010d2e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8010d32:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8010d36:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010d3a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010d3e:	e5aa      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010d40:	9b06      	ldr	r3, [sp, #24]
 8010d42:	9c07      	ldr	r4, [sp, #28]
 8010d44:	eba3 020e 	sub.w	r2, r3, lr
 8010d48:	2c06      	cmp	r4, #6
 8010d4a:	b292      	uxth	r2, r2
 8010d4c:	b213      	sxth	r3, r2
 8010d4e:	d80d      	bhi.n	8010d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8010d50:	4651      	mov	r1, sl
 8010d52:	aa0a      	add	r2, sp, #40	; 0x28
 8010d54:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8010d58:	6849      	ldr	r1, [r1, #4]
 8010d5a:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8010d5e:	9b05      	ldr	r3, [sp, #20]
 8010d60:	c203      	stmia	r2!, {r0, r1}
 8010d62:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8010d66:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8010d6a:	e759      	b.n	8010c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8010d6c:	9c00      	ldr	r4, [sp, #0]
 8010d6e:	4563      	cmp	r3, ip
 8010d70:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8010d74:	db0d      	blt.n	8010d92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8010d76:	4429      	add	r1, r5
 8010d78:	9a04      	ldr	r2, [sp, #16]
 8010d7a:	445c      	add	r4, fp
 8010d7c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010d80:	b289      	uxth	r1, r1
 8010d82:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8010d86:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010d8a:	4411      	add	r1, r2
 8010d8c:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8010d90:	e581      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010d92:	445c      	add	r4, fp
 8010d94:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8010d98:	e79f      	b.n	8010cda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8010d9a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010d9e:	2f07      	cmp	r7, #7
 8010da0:	d806      	bhi.n	8010db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8010da2:	ab08      	add	r3, sp, #32
 8010da4:	9801      	ldr	r0, [sp, #4]
 8010da6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010daa:	f7ff fd45 	bl	8010838 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010dae:	e5dc      	b.n	801096a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010db0:	f107 39ff 	add.w	r9, r7, #4294967295
 8010db4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010db8:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8010dbc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8010dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8010dc4:	2400      	movs	r4, #0
 8010dc6:	9304      	str	r3, [sp, #16]
 8010dc8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8010dcc:	f109 32ff 	add.w	r2, r9, #4294967295
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	4690      	mov	r8, r2
 8010dd4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8010dd8:	9303      	str	r3, [sp, #12]
 8010dda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010dde:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010de2:	6818      	ldr	r0, [r3, #0]
 8010de4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8010de8:	9206      	str	r2, [sp, #24]
 8010dea:	bf16      	itet	ne
 8010dec:	9904      	ldrne	r1, [sp, #16]
 8010dee:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8010df2:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8010df6:	9305      	str	r3, [sp, #20]
 8010df8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8010dfc:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8010e00:	fb16 f601 	smulbb	r6, r6, r1
 8010e04:	6859      	ldr	r1, [r3, #4]
 8010e06:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010e0a:	4671      	mov	r1, lr
 8010e0c:	a80a      	add	r0, sp, #40	; 0x28
 8010e0e:	f7ff fc45 	bl	801069c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010e12:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8010e16:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8010e1a:	9b03      	ldr	r3, [sp, #12]
 8010e1c:	9a00      	ldr	r2, [sp, #0]
 8010e1e:	fb11 f100 	smulbb	r1, r1, r0
 8010e22:	2008      	movs	r0, #8
 8010e24:	fb02 6603 	mla	r6, r2, r3, r6
 8010e28:	1b8e      	subs	r6, r1, r6
 8010e2a:	fb91 f1f0 	sdiv	r1, r1, r0
 8010e2e:	42b1      	cmp	r1, r6
 8010e30:	dc21      	bgt.n	8010e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010e32:	4556      	cmp	r6, sl
 8010e34:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8010e38:	da03      	bge.n	8010e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8010e3a:	b1e6      	cbz	r6, 8010e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010e3c:	46b2      	mov	sl, r6
 8010e3e:	4645      	mov	r5, r8
 8010e40:	464c      	mov	r4, r9
 8010e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e46:	f118 0f02 	cmn.w	r8, #2
 8010e4a:	d1c8      	bne.n	8010dde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8010e4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e50:	f1a7 0708 	sub.w	r7, r7, #8
 8010e54:	4691      	mov	r9, r2
 8010e56:	d1b7      	bne.n	8010dc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8010e58:	9b01      	ldr	r3, [sp, #4]
 8010e5a:	b2a6      	uxth	r6, r4
 8010e5c:	00e4      	lsls	r4, r4, #3
 8010e5e:	1918      	adds	r0, r3, r4
 8010e60:	1c6b      	adds	r3, r5, #1
 8010e62:	d10b      	bne.n	8010e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8010e64:	4601      	mov	r1, r0
 8010e66:	9802      	ldr	r0, [sp, #8]
 8010e68:	f7ff fc18 	bl	801069c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	9801      	ldr	r0, [sp, #4]
 8010e70:	f7ff fcc0 	bl	80107f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010e74:	e50f      	b.n	8010896 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010e76:	4645      	mov	r5, r8
 8010e78:	464c      	mov	r4, r9
 8010e7a:	e7ed      	b.n	8010e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8010e7c:	9b01      	ldr	r3, [sp, #4]
 8010e7e:	00ed      	lsls	r5, r5, #3
 8010e80:	445c      	add	r4, fp
 8010e82:	1959      	adds	r1, r3, r5
 8010e84:	445d      	add	r5, fp
 8010e86:	f7ff fc09 	bl	801069c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010e8a:	9b02      	ldr	r3, [sp, #8]
 8010e8c:	cb03      	ldmia	r3!, {r0, r1}
 8010e8e:	9b02      	ldr	r3, [sp, #8]
 8010e90:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8010e94:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8010e98:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8010e9c:	6861      	ldr	r1, [r4, #4]
 8010e9e:	c303      	stmia	r3!, {r0, r1}
 8010ea0:	e7e4      	b.n	8010e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08010ea4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8010ea4:	4b1d      	ldr	r3, [pc, #116]	; (8010f1c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8010ea6:	b530      	push	{r4, r5, lr}
 8010ea8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010eac:	b085      	sub	sp, #20
 8010eae:	4b1c      	ldr	r3, [pc, #112]	; (8010f20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	4605      	mov	r5, r0
 8010eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010eba:	6820      	ldr	r0, [r4, #0]
 8010ebc:	9100      	str	r1, [sp, #0]
 8010ebe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010ec2:	ab02      	add	r3, sp, #8
 8010ec4:	6861      	ldr	r1, [r4, #4]
 8010ec6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010eca:	c303      	stmia	r3!, {r0, r1}
 8010ecc:	4669      	mov	r1, sp
 8010ece:	a802      	add	r0, sp, #8
 8010ed0:	f7fb fd1a 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 8010ed4:	ab02      	add	r3, sp, #8
 8010ed6:	cb03      	ldmia	r3!, {r0, r1}
 8010ed8:	4b12      	ldr	r3, [pc, #72]	; (8010f24 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8010eda:	6020      	str	r0, [r4, #0]
 8010edc:	6818      	ldr	r0, [r3, #0]
 8010ede:	6061      	str	r1, [r4, #4]
 8010ee0:	b138      	cbz	r0, 8010ef2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8010ee2:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8010ee6:	b133      	cbz	r3, 8010ef6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8010ee8:	6821      	ldr	r1, [r4, #0]
 8010eea:	4628      	mov	r0, r5
 8010eec:	6862      	ldr	r2, [r4, #4]
 8010eee:	f7ff fcc5 	bl	801087c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010ef2:	b005      	add	sp, #20
 8010ef4:	bd30      	pop	{r4, r5, pc}
 8010ef6:	6803      	ldr	r3, [r0, #0]
 8010ef8:	4621      	mov	r1, r4
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	4798      	blx	r3
 8010efe:	4b0a      	ldr	r3, [pc, #40]	; (8010f28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8010f00:	6818      	ldr	r0, [r3, #0]
 8010f02:	b118      	cbz	r0, 8010f0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8010f04:	6803      	ldr	r3, [r0, #0]
 8010f06:	4621      	mov	r1, r4
 8010f08:	689b      	ldr	r3, [r3, #8]
 8010f0a:	4798      	blx	r3
 8010f0c:	4b07      	ldr	r3, [pc, #28]	; (8010f2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8010f0e:	4621      	mov	r1, r4
 8010f10:	6818      	ldr	r0, [r3, #0]
 8010f12:	6803      	ldr	r3, [r0, #0]
 8010f14:	69db      	ldr	r3, [r3, #28]
 8010f16:	4798      	blx	r3
 8010f18:	e7eb      	b.n	8010ef2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8010f1a:	bf00      	nop
 8010f1c:	24006c58 	.word	0x24006c58
 8010f20:	24006c5a 	.word	0x24006c5a
 8010f24:	24006ca0 	.word	0x24006ca0
 8010f28:	24006c9c 	.word	0x24006c9c
 8010f2c:	24006c64 	.word	0x24006c64

08010f30 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8010f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f34:	4604      	mov	r4, r0
 8010f36:	b09b      	sub	sp, #108	; 0x6c
 8010f38:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8010f3c:	b129      	cbz	r1, 8010f4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8010f44:	b01b      	add	sp, #108	; 0x6c
 8010f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8010f4e:	4630      	mov	r0, r6
 8010f50:	f7fb fd1d 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f54:	4605      	mov	r5, r0
 8010f56:	b940      	cbnz	r0, 8010f6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8010f58:	4620      	mov	r0, r4
 8010f5a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8010f5e:	f7ff fc8d 	bl	801087c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010f62:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8010f66:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8010f6a:	4ba6      	ldr	r3, [pc, #664]	; (8011204 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	b33b      	cbz	r3, 8010fc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8010f70:	4da5      	ldr	r5, [pc, #660]	; (8011208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8010f72:	4628      	mov	r0, r5
 8010f74:	f7fb fd0b 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f78:	4606      	mov	r6, r0
 8010f7a:	bb08      	cbnz	r0, 8010fc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	f7ff f9d3 	bl	8010328 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010f82:	6829      	ldr	r1, [r5, #0]
 8010f84:	686a      	ldr	r2, [r5, #4]
 8010f86:	4620      	mov	r0, r4
 8010f88:	f7ff fc78 	bl	801087c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010f8c:	802e      	strh	r6, [r5, #0]
 8010f8e:	806e      	strh	r6, [r5, #2]
 8010f90:	80ae      	strh	r6, [r5, #4]
 8010f92:	80ee      	strh	r6, [r5, #6]
 8010f94:	4f9d      	ldr	r7, [pc, #628]	; (801120c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8010f96:	a809      	add	r0, sp, #36	; 0x24
 8010f98:	f7ff fbd7 	bl	801074a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010f9c:	883d      	ldrh	r5, [r7, #0]
 8010f9e:	462e      	mov	r6, r5
 8010fa0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010fa4:	42b3      	cmp	r3, r6
 8010fa6:	d910      	bls.n	8010fca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8010fa8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010fac:	3601      	adds	r6, #1
 8010fae:	a809      	add	r0, sp, #36	; 0x24
 8010fb0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8010fb4:	b2b6      	uxth	r6, r6
 8010fb6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8010fba:	f7ff fc3d 	bl	8010838 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010fbe:	e7ef      	b.n	8010fa0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8010fc0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d1e5      	bne.n	8010f94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8010fc8:	e7bc      	b.n	8010f44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8010fca:	462e      	mov	r6, r5
 8010fcc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8010fd0:	42b3      	cmp	r3, r6
 8010fd2:	d90b      	bls.n	8010fec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8010fd4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010fd8:	3601      	adds	r6, #1
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8010fe0:	b2b6      	uxth	r6, r6
 8010fe2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8010fe6:	f7ff fc49 	bl	801087c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010fea:	e7ef      	b.n	8010fcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8010fec:	4a88      	ldr	r2, [pc, #544]	; (8011210 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8010fee:	6813      	ldr	r3, [r2, #0]
 8010ff0:	4690      	mov	r8, r2
 8010ff2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	f040 8094 	bne.w	8011124 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8010ffc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8011000:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8011004:	f04f 0900 	mov.w	r9, #0
 8011008:	33aa      	adds	r3, #170	; 0xaa
 801100a:	42a8      	cmp	r0, r5
 801100c:	f103 0308 	add.w	r3, r3, #8
 8011010:	dd0a      	ble.n	8011028 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8011012:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8011016:	3501      	adds	r5, #1
 8011018:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801101c:	440a      	add	r2, r1
 801101e:	b212      	sxth	r2, r2
 8011020:	4591      	cmp	r9, r2
 8011022:	bfb8      	it	lt
 8011024:	4691      	movlt	r9, r2
 8011026:	e7f0      	b.n	801100a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8011028:	4b7a      	ldr	r3, [pc, #488]	; (8011214 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801102a:	4e7b      	ldr	r6, [pc, #492]	; (8011218 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801102c:	881d      	ldrh	r5, [r3, #0]
 801102e:	2300      	movs	r3, #0
 8011030:	2d0f      	cmp	r5, #15
 8011032:	bf8c      	ite	hi
 8011034:	08ed      	lsrhi	r5, r5, #3
 8011036:	2501      	movls	r5, #1
 8011038:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801103c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011040:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8011044:	f8d8 0000 	ldr.w	r0, [r8]
 8011048:	440b      	add	r3, r1
 801104a:	6802      	ldr	r2, [r0, #0]
 801104c:	b21b      	sxth	r3, r3
 801104e:	4599      	cmp	r9, r3
 8011050:	dd4b      	ble.n	80110ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8011052:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8011056:	4798      	blx	r3
 8011058:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801105c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011060:	4413      	add	r3, r2
 8011062:	b21b      	sxth	r3, r3
 8011064:	195a      	adds	r2, r3, r5
 8011066:	4290      	cmp	r0, r2
 8011068:	da07      	bge.n	801107a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801106a:	4581      	cmp	r9, r0
 801106c:	dd05      	ble.n	801107a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801106e:	4298      	cmp	r0, r3
 8011070:	da33      	bge.n	80110da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8011072:	2b00      	cmp	r3, #0
 8011074:	dd31      	ble.n	80110da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8011076:	4648      	mov	r0, r9
 8011078:	e004      	b.n	8011084 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801107a:	4298      	cmp	r0, r3
 801107c:	dbfb      	blt.n	8011076 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801107e:	4548      	cmp	r0, r9
 8011080:	bfa8      	it	ge
 8011082:	4648      	movge	r0, r9
 8011084:	f9b6 2000 	ldrsh.w	r2, [r6]
 8011088:	2100      	movs	r1, #0
 801108a:	1ac0      	subs	r0, r0, r3
 801108c:	f8b7 a000 	ldrh.w	sl, [r7]
 8011090:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011094:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011098:	f8ad 2018 	strh.w	r2, [sp, #24]
 801109c:	f8ad 001a 	strh.w	r0, [sp, #26]
 80110a0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80110a4:	4553      	cmp	r3, sl
 80110a6:	d9c9      	bls.n	801103c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80110a8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80110ac:	ab07      	add	r3, sp, #28
 80110ae:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80110b2:	6851      	ldr	r1, [r2, #4]
 80110b4:	c303      	stmia	r3!, {r0, r1}
 80110b6:	a807      	add	r0, sp, #28
 80110b8:	a905      	add	r1, sp, #20
 80110ba:	f7fb fc25 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 80110be:	a807      	add	r0, sp, #28
 80110c0:	f7fb fc65 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 80110c4:	b920      	cbnz	r0, 80110d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80110c6:	6823      	ldr	r3, [r4, #0]
 80110c8:	a907      	add	r1, sp, #28
 80110ca:	4620      	mov	r0, r4
 80110cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ce:	4798      	blx	r3
 80110d0:	f10a 0a01 	add.w	sl, sl, #1
 80110d4:	fa1f fa8a 	uxth.w	sl, sl
 80110d8:	e7e2      	b.n	80110a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 80110da:	f8d8 0000 	ldr.w	r0, [r8]
 80110de:	2101      	movs	r1, #1
 80110e0:	6803      	ldr	r3, [r0, #0]
 80110e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110e6:	4798      	blx	r3
 80110e8:	e7a8      	b.n	801103c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80110ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80110ec:	4798      	blx	r3
 80110ee:	4b4b      	ldr	r3, [pc, #300]	; (801121c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	f43f af26 	beq.w	8010f44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80110f8:	2300      	movs	r3, #0
 80110fa:	883d      	ldrh	r5, [r7, #0]
 80110fc:	34ea      	adds	r4, #234	; 0xea
 80110fe:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8011102:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8011106:	42ab      	cmp	r3, r5
 8011108:	f67f af1c 	bls.w	8010f44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801110c:	ab1a      	add	r3, sp, #104	; 0x68
 801110e:	4620      	mov	r0, r4
 8011110:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011114:	3501      	adds	r5, #1
 8011116:	3b44      	subs	r3, #68	; 0x44
 8011118:	b2ad      	uxth	r5, r5
 801111a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801111e:	f7ff fb8b 	bl	8010838 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011122:	e7ee      	b.n	8011102 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8011124:	2b02      	cmp	r3, #2
 8011126:	f040 813d 	bne.w	80113a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801112a:	4b3d      	ldr	r3, [pc, #244]	; (8011220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	2b01      	cmp	r3, #1
 8011130:	d02c      	beq.n	801118c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8011132:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8011136:	883a      	ldrh	r2, [r7, #0]
 8011138:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801113c:	3201      	adds	r2, #1
 801113e:	b292      	uxth	r2, r2
 8011140:	2900      	cmp	r1, #0
 8011142:	d0d4      	beq.n	80110ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8011144:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8011148:	4610      	mov	r0, r2
 801114a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801114e:	f04f 0a00 	mov.w	sl, #0
 8011152:	441d      	add	r5, r3
 8011154:	b22d      	sxth	r5, r5
 8011156:	b283      	uxth	r3, r0
 8011158:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801115c:	4299      	cmp	r1, r3
 801115e:	f240 80c3 	bls.w	80112e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8011162:	4426      	add	r6, r4
 8011164:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8011168:	4684      	mov	ip, r0
 801116a:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801116e:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8011172:	4573      	cmp	r3, lr
 8011174:	f340 80a5 	ble.w	80112c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8011178:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801117c:	4475      	add	r5, lr
 801117e:	b22d      	sxth	r5, r5
 8011180:	429d      	cmp	r5, r3
 8011182:	bfa8      	it	ge
 8011184:	461d      	movge	r5, r3
 8011186:	3001      	adds	r0, #1
 8011188:	46e2      	mov	sl, ip
 801118a:	e7e4      	b.n	8011156 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801118c:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8011190:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8011194:	f1bb 0f00 	cmp.w	fp, #0
 8011198:	d0a9      	beq.n	80110ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801119a:	883b      	ldrh	r3, [r7, #0]
 801119c:	2600      	movs	r6, #0
 801119e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80111a2:	3301      	adds	r3, #1
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	b299      	uxth	r1, r3
 80111a8:	00f5      	lsls	r5, r6, #3
 80111aa:	458b      	cmp	fp, r1
 80111ac:	d93a      	bls.n	8011224 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80111ae:	4425      	add	r5, r4
 80111b0:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80111b4:	469c      	mov	ip, r3
 80111b6:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80111ba:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80111be:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80111c2:	4408      	add	r0, r1
 80111c4:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80111c8:	4471      	add	r1, lr
 80111ca:	b200      	sxth	r0, r0
 80111cc:	b209      	sxth	r1, r1
 80111ce:	4288      	cmp	r0, r1
 80111d0:	da06      	bge.n	80111e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 80111d2:	4586      	cmp	lr, r0
 80111d4:	4672      	mov	r2, lr
 80111d6:	bfb8      	it	lt
 80111d8:	4602      	movlt	r2, r0
 80111da:	3301      	adds	r3, #1
 80111dc:	4666      	mov	r6, ip
 80111de:	e7e2      	b.n	80111a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80111e0:	d10b      	bne.n	80111fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 80111e2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80111e6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80111ea:	458c      	cmp	ip, r1
 80111ec:	bfb4      	ite	lt
 80111ee:	469c      	movlt	ip, r3
 80111f0:	46b4      	movge	ip, r6
 80111f2:	4572      	cmp	r2, lr
 80111f4:	bfb8      	it	lt
 80111f6:	4672      	movlt	r2, lr
 80111f8:	e7ef      	b.n	80111da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80111fa:	428a      	cmp	r2, r1
 80111fc:	46b4      	mov	ip, r6
 80111fe:	bfb8      	it	lt
 8011200:	460a      	movlt	r2, r1
 8011202:	e7ea      	b.n	80111da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8011204:	24006c9c 	.word	0x24006c9c
 8011208:	24006ca8 	.word	0x24006ca8
 801120c:	24000080 	.word	0x24000080
 8011210:	24006c64 	.word	0x24006c64
 8011214:	24006c5a 	.word	0x24006c5a
 8011218:	24006c58 	.word	0x24006c58
 801121c:	24006c62 	.word	0x24006c62
 8011220:	24006c5c 	.word	0x24006c5c
 8011224:	1961      	adds	r1, r4, r5
 8011226:	ab07      	add	r3, sp, #28
 8011228:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801122c:	6849      	ldr	r1, [r1, #4]
 801122e:	c303      	stmia	r3!, {r0, r1}
 8011230:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011234:	a807      	add	r0, sp, #28
 8011236:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801123a:	2b13      	cmp	r3, #19
 801123c:	440b      	add	r3, r1
 801123e:	bfd8      	it	le
 8011240:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8011244:	1a9b      	subs	r3, r3, r2
 8011246:	f8ad 201c 	strh.w	r2, [sp, #28]
 801124a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801124e:	f7ff f885 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011252:	a807      	add	r0, sp, #28
 8011254:	f7fb fb9b 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011258:	2800      	cmp	r0, #0
 801125a:	d199      	bne.n	8011190 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801125c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8011260:	4425      	add	r5, r4
 8011262:	f8d8 0000 	ldr.w	r0, [r8]
 8011266:	f1bc 0f14 	cmp.w	ip, #20
 801126a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801126e:	f8d0 e000 	ldr.w	lr, [r0]
 8011272:	bfa8      	it	ge
 8011274:	f04f 0c14 	movge.w	ip, #20
 8011278:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801127c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011280:	fa1f fc8c 	uxth.w	ip, ip
 8011284:	f8cd c000 	str.w	ip, [sp]
 8011288:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801128c:	47d0      	blx	sl
 801128e:	4682      	mov	sl, r0
 8011290:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011294:	a807      	add	r0, sp, #28
 8011296:	f7ff f847 	bl	8010328 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	4620      	mov	r0, r4
 801129e:	a907      	add	r1, sp, #28
 80112a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a2:	4798      	blx	r3
 80112a4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80112a8:	eba0 000a 	sub.w	r0, r0, sl
 80112ac:	b200      	sxth	r0, r0
 80112ae:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80112b2:	2800      	cmp	r0, #0
 80112b4:	f47f af6c 	bne.w	8011190 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80112b8:	b2b1      	uxth	r1, r6
 80112ba:	4648      	mov	r0, r9
 80112bc:	f7ff fa9a 	bl	80107f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80112c0:	e766      	b.n	8011190 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80112c2:	d10c      	bne.n	80112de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 80112c4:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 80112c8:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 80112cc:	45b4      	cmp	ip, r6
 80112ce:	bfb4      	ite	lt
 80112d0:	4684      	movlt	ip, r0
 80112d2:	46d4      	movge	ip, sl
 80112d4:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 80112d8:	4433      	add	r3, r6
 80112da:	b21b      	sxth	r3, r3
 80112dc:	e750      	b.n	8011180 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 80112de:	4575      	cmp	r5, lr
 80112e0:	46d4      	mov	ip, sl
 80112e2:	bfa8      	it	ge
 80112e4:	4675      	movge	r5, lr
 80112e6:	e74e      	b.n	8011186 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 80112e8:	eb0b 0006 	add.w	r0, fp, r6
 80112ec:	4426      	add	r6, r4
 80112ee:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 80112f2:	f1b9 0f13 	cmp.w	r9, #19
 80112f6:	bfdc      	itt	le
 80112f8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 80112fc:	444d      	addle	r5, r9
 80112fe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011302:	bfd8      	it	le
 8011304:	b22d      	sxthle	r5, r5
 8011306:	f7fb fb42 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 801130a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801130e:	2800      	cmp	r0, #0
 8011310:	f47f af16 	bne.w	8011140 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8011314:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8011318:	fa1f f989 	uxth.w	r9, r9
 801131c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011320:	eba5 050c 	sub.w	r5, r5, ip
 8011324:	fa1f f28c 	uxth.w	r2, ip
 8011328:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801132c:	eb02 0009 	add.w	r0, r2, r9
 8011330:	2d14      	cmp	r5, #20
 8011332:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8011336:	bfa8      	it	ge
 8011338:	2514      	movge	r5, #20
 801133a:	b200      	sxth	r0, r0
 801133c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011340:	b289      	uxth	r1, r1
 8011342:	fa1f fe85 	uxth.w	lr, r5
 8011346:	eba0 000c 	sub.w	r0, r0, ip
 801134a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801134e:	4586      	cmp	lr, r0
 8011350:	f8d8 0000 	ldr.w	r0, [r8]
 8011354:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011358:	b29b      	uxth	r3, r3
 801135a:	bfb8      	it	lt
 801135c:	46f1      	movlt	r9, lr
 801135e:	6805      	ldr	r5, [r0, #0]
 8011360:	f8cd 9000 	str.w	r9, [sp]
 8011364:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8011368:	47a8      	blx	r5
 801136a:	6823      	ldr	r3, [r4, #0]
 801136c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011370:	a907      	add	r1, sp, #28
 8011372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011374:	4620      	mov	r0, r4
 8011376:	4798      	blx	r3
 8011378:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801137c:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8011380:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8011384:	1a5b      	subs	r3, r3, r1
 8011386:	440a      	add	r2, r1
 8011388:	b21b      	sxth	r3, r3
 801138a:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801138e:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8011392:	2b00      	cmp	r3, #0
 8011394:	f47f aecf 	bne.w	8011136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8011398:	fa1f f18a 	uxth.w	r1, sl
 801139c:	4658      	mov	r0, fp
 801139e:	f7ff fa29 	bl	80107f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80113a2:	e6c8      	b.n	8011136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80113a4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80113a8:	42ab      	cmp	r3, r5
 80113aa:	f67f aea0 	bls.w	80110ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80113ae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80113b2:	ab07      	add	r3, sp, #28
 80113b4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80113b8:	6851      	ldr	r1, [r2, #4]
 80113ba:	c303      	stmia	r3!, {r0, r1}
 80113bc:	a807      	add	r0, sp, #28
 80113be:	f7fb fae6 	bl	800c98e <_ZNK8touchgfx4Rect7isEmptyEv>
 80113c2:	b920      	cbnz	r0, 80113ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 80113c4:	6823      	ldr	r3, [r4, #0]
 80113c6:	a907      	add	r1, sp, #28
 80113c8:	4620      	mov	r0, r4
 80113ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113cc:	4798      	blx	r3
 80113ce:	3501      	adds	r5, #1
 80113d0:	b2ad      	uxth	r5, r5
 80113d2:	e7e7      	b.n	80113a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

080113d4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80113d4:	4b03      	ldr	r3, [pc, #12]	; (80113e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80113d6:	2200      	movs	r2, #0
 80113d8:	801a      	strh	r2, [r3, #0]
 80113da:	805a      	strh	r2, [r3, #2]
 80113dc:	809a      	strh	r2, [r3, #4]
 80113de:	80da      	strh	r2, [r3, #6]
 80113e0:	4770      	bx	lr
 80113e2:	bf00      	nop
 80113e4:	24006ca8 	.word	0x24006ca8

080113e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80113e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ec:	b09d      	sub	sp, #116	; 0x74
 80113ee:	4606      	mov	r6, r0
 80113f0:	4614      	mov	r4, r2
 80113f2:	468a      	mov	sl, r1
 80113f4:	a803      	add	r0, sp, #12
 80113f6:	461d      	mov	r5, r3
 80113f8:	f000 fd8a 	bl	8011f10 <_ZN8touchgfx12TextProviderC1Ev>
 80113fc:	6833      	ldr	r3, [r6, #0]
 80113fe:	4630      	mov	r0, r6
 8011400:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8011404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011406:	4798      	blx	r3
 8011408:	6833      	ldr	r3, [r6, #0]
 801140a:	4607      	mov	r7, r0
 801140c:	4630      	mov	r0, r6
 801140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011410:	4798      	blx	r3
 8011412:	462a      	mov	r2, r5
 8011414:	2500      	movs	r5, #0
 8011416:	4621      	mov	r1, r4
 8011418:	9000      	str	r0, [sp, #0]
 801141a:	463b      	mov	r3, r7
 801141c:	462c      	mov	r4, r5
 801141e:	46a9      	mov	r9, r5
 8011420:	46a8      	mov	r8, r5
 8011422:	a803      	add	r0, sp, #12
 8011424:	f000 fdc7 	bl	8011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011428:	2300      	movs	r3, #0
 801142a:	9302      	str	r3, [sp, #8]
 801142c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011430:	429c      	cmp	r4, r3
 8011432:	d002      	beq.n	801143a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8011434:	455c      	cmp	r4, fp
 8011436:	bf18      	it	ne
 8011438:	4625      	movne	r5, r4
 801143a:	ab02      	add	r3, sp, #8
 801143c:	4632      	mov	r2, r6
 801143e:	4651      	mov	r1, sl
 8011440:	a803      	add	r0, sp, #12
 8011442:	f001 f8b9 	bl	80125b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011446:	4604      	mov	r4, r0
 8011448:	b108      	cbz	r0, 801144e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801144a:	280a      	cmp	r0, #10
 801144c:	d10a      	bne.n	8011464 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801144e:	45c1      	cmp	r9, r8
 8011450:	bf38      	it	cc
 8011452:	46c1      	movcc	r9, r8
 8011454:	f04f 0800 	mov.w	r8, #0
 8011458:	2c00      	cmp	r4, #0
 801145a:	d1e5      	bne.n	8011428 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801145c:	4648      	mov	r0, r9
 801145e:	b01d      	add	sp, #116	; 0x74
 8011460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011464:	9a02      	ldr	r2, [sp, #8]
 8011466:	2a00      	cmp	r2, #0
 8011468:	d0de      	beq.n	8011428 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801146a:	7b57      	ldrb	r7, [r2, #13]
 801146c:	4629      	mov	r1, r5
 801146e:	6833      	ldr	r3, [r6, #0]
 8011470:	007f      	lsls	r7, r7, #1
 8011472:	8894      	ldrh	r4, [r2, #4]
 8011474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011476:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801147a:	7a97      	ldrb	r7, [r2, #10]
 801147c:	4307      	orrs	r7, r0
 801147e:	4630      	mov	r0, r6
 8011480:	4798      	blx	r3
 8011482:	4438      	add	r0, r7
 8011484:	4480      	add	r8, r0
 8011486:	fa1f f888 	uxth.w	r8, r8
 801148a:	e7e5      	b.n	8011458 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801148c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801148c:	b508      	push	{r3, lr}
 801148e:	6803      	ldr	r3, [r0, #0]
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	4798      	blx	r3
 8011494:	b128      	cbz	r0, 80114a2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8011496:	7b43      	ldrb	r3, [r0, #13]
 8011498:	7a80      	ldrb	r0, [r0, #10]
 801149a:	005b      	lsls	r3, r3, #1
 801149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114a0:	4318      	orrs	r0, r3
 80114a2:	bd08      	pop	{r3, pc}

080114a4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80114a4:	b40e      	push	{r1, r2, r3}
 80114a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114a8:	b09e      	sub	sp, #120	; 0x78
 80114aa:	4605      	mov	r5, r0
 80114ac:	ab23      	add	r3, sp, #140	; 0x8c
 80114ae:	a805      	add	r0, sp, #20
 80114b0:	f853 4b04 	ldr.w	r4, [r3], #4
 80114b4:	9303      	str	r3, [sp, #12]
 80114b6:	f000 fd2b 	bl	8011f10 <_ZN8touchgfx12TextProviderC1Ev>
 80114ba:	682b      	ldr	r3, [r5, #0]
 80114bc:	4628      	mov	r0, r5
 80114be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114c0:	4798      	blx	r3
 80114c2:	682b      	ldr	r3, [r5, #0]
 80114c4:	4606      	mov	r6, r0
 80114c6:	4628      	mov	r0, r5
 80114c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114ca:	4798      	blx	r3
 80114cc:	4633      	mov	r3, r6
 80114ce:	4621      	mov	r1, r4
 80114d0:	ae1e      	add	r6, sp, #120	; 0x78
 80114d2:	2400      	movs	r4, #0
 80114d4:	9000      	str	r0, [sp, #0]
 80114d6:	9a03      	ldr	r2, [sp, #12]
 80114d8:	a805      	add	r0, sp, #20
 80114da:	f000 fd6c 	bl	8011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80114de:	f846 4d68 	str.w	r4, [r6, #-104]!
 80114e2:	462a      	mov	r2, r5
 80114e4:	4633      	mov	r3, r6
 80114e6:	4621      	mov	r1, r4
 80114e8:	a805      	add	r0, sp, #20
 80114ea:	f001 f865 	bl	80125b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80114ee:	b300      	cbz	r0, 8011532 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80114f0:	280a      	cmp	r0, #10
 80114f2:	d01a      	beq.n	801152a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80114f4:	9f04      	ldr	r7, [sp, #16]
 80114f6:	b1c7      	cbz	r7, 801152a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80114f8:	7b78      	ldrb	r0, [r7, #13]
 80114fa:	7a3b      	ldrb	r3, [r7, #8]
 80114fc:	00c1      	lsls	r1, r0, #3
 80114fe:	88aa      	ldrh	r2, [r5, #4]
 8011500:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011504:	4319      	orrs	r1, r3
 8011506:	0643      	lsls	r3, r0, #25
 8011508:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801150c:	bf48      	it	mi
 801150e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8011512:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011516:	bf48      	it	mi
 8011518:	b219      	sxthmi	r1, r3
 801151a:	79fb      	ldrb	r3, [r7, #7]
 801151c:	4303      	orrs	r3, r0
 801151e:	4413      	add	r3, r2
 8011520:	1a5b      	subs	r3, r3, r1
 8011522:	b29b      	uxth	r3, r3
 8011524:	42a3      	cmp	r3, r4
 8011526:	bfc8      	it	gt
 8011528:	b21c      	sxthgt	r4, r3
 801152a:	4633      	mov	r3, r6
 801152c:	462a      	mov	r2, r5
 801152e:	2100      	movs	r1, #0
 8011530:	e7da      	b.n	80114e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8011532:	b2a0      	uxth	r0, r4
 8011534:	b01e      	add	sp, #120	; 0x78
 8011536:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801153a:	b003      	add	sp, #12
 801153c:	4770      	bx	lr

0801153e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801153e:	b40e      	push	{r1, r2, r3}
 8011540:	b570      	push	{r4, r5, r6, lr}
 8011542:	b09d      	sub	sp, #116	; 0x74
 8011544:	4604      	mov	r4, r0
 8011546:	ab21      	add	r3, sp, #132	; 0x84
 8011548:	a803      	add	r0, sp, #12
 801154a:	f853 5b04 	ldr.w	r5, [r3], #4
 801154e:	9302      	str	r3, [sp, #8]
 8011550:	f000 fcde 	bl	8011f10 <_ZN8touchgfx12TextProviderC1Ev>
 8011554:	6823      	ldr	r3, [r4, #0]
 8011556:	4620      	mov	r0, r4
 8011558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801155a:	4798      	blx	r3
 801155c:	6823      	ldr	r3, [r4, #0]
 801155e:	4606      	mov	r6, r0
 8011560:	4620      	mov	r0, r4
 8011562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011564:	2401      	movs	r4, #1
 8011566:	4798      	blx	r3
 8011568:	4633      	mov	r3, r6
 801156a:	9000      	str	r0, [sp, #0]
 801156c:	4629      	mov	r1, r5
 801156e:	9a02      	ldr	r2, [sp, #8]
 8011570:	a803      	add	r0, sp, #12
 8011572:	f000 fd20 	bl	8011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011576:	a803      	add	r0, sp, #12
 8011578:	f001 f918 	bl	80127ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801157c:	b2a3      	uxth	r3, r4
 801157e:	b138      	cbz	r0, 8011590 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8011580:	280a      	cmp	r0, #10
 8011582:	a803      	add	r0, sp, #12
 8011584:	bf04      	itt	eq
 8011586:	3301      	addeq	r3, #1
 8011588:	b21c      	sxtheq	r4, r3
 801158a:	f001 f90f 	bl	80127ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801158e:	e7f5      	b.n	801157c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8011590:	4618      	mov	r0, r3
 8011592:	b01d      	add	sp, #116	; 0x74
 8011594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011598:	b003      	add	sp, #12
 801159a:	4770      	bx	lr

0801159c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801159c:	b40e      	push	{r1, r2, r3}
 801159e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a0:	b09e      	sub	sp, #120	; 0x78
 80115a2:	4604      	mov	r4, r0
 80115a4:	ab23      	add	r3, sp, #140	; 0x8c
 80115a6:	a805      	add	r0, sp, #20
 80115a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80115ac:	9303      	str	r3, [sp, #12]
 80115ae:	f000 fcaf 	bl	8011f10 <_ZN8touchgfx12TextProviderC1Ev>
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	4620      	mov	r0, r4
 80115b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115b8:	4798      	blx	r3
 80115ba:	6823      	ldr	r3, [r4, #0]
 80115bc:	4606      	mov	r6, r0
 80115be:	4620      	mov	r0, r4
 80115c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115c2:	4798      	blx	r3
 80115c4:	4633      	mov	r3, r6
 80115c6:	4629      	mov	r1, r5
 80115c8:	9000      	str	r0, [sp, #0]
 80115ca:	9a03      	ldr	r2, [sp, #12]
 80115cc:	a805      	add	r0, sp, #20
 80115ce:	f000 fcf2 	bl	8011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80115d2:	ad1e      	add	r5, sp, #120	; 0x78
 80115d4:	2100      	movs	r1, #0
 80115d6:	26ff      	movs	r6, #255	; 0xff
 80115d8:	4622      	mov	r2, r4
 80115da:	a805      	add	r0, sp, #20
 80115dc:	f845 1d68 	str.w	r1, [r5, #-104]!
 80115e0:	462b      	mov	r3, r5
 80115e2:	f000 ffe9 	bl	80125b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80115e6:	b1d8      	cbz	r0, 8011620 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80115e8:	280a      	cmp	r0, #10
 80115ea:	d012      	beq.n	8011612 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80115ec:	9804      	ldr	r0, [sp, #16]
 80115ee:	b180      	cbz	r0, 8011612 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80115f0:	7b47      	ldrb	r7, [r0, #13]
 80115f2:	7922      	ldrb	r2, [r4, #4]
 80115f4:	00fb      	lsls	r3, r7, #3
 80115f6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80115fa:	7a03      	ldrb	r3, [r0, #8]
 80115fc:	430b      	orrs	r3, r1
 80115fe:	0679      	lsls	r1, r7, #25
 8011600:	bf44      	itt	mi
 8011602:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011606:	b21b      	sxthmi	r3, r3
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	b2db      	uxtb	r3, r3
 801160c:	429e      	cmp	r6, r3
 801160e:	bf28      	it	cs
 8011610:	461e      	movcs	r6, r3
 8011612:	462b      	mov	r3, r5
 8011614:	4622      	mov	r2, r4
 8011616:	2100      	movs	r1, #0
 8011618:	a805      	add	r0, sp, #20
 801161a:	f000 ffcd 	bl	80125b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801161e:	e7e2      	b.n	80115e6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8011620:	4630      	mov	r0, r6
 8011622:	b01e      	add	sp, #120	; 0x78
 8011624:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011628:	b003      	add	sp, #12
 801162a:	4770      	bx	lr

0801162c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801162c:	b513      	push	{r0, r1, r4, lr}
 801162e:	6803      	ldr	r3, [r0, #0]
 8011630:	2400      	movs	r4, #0
 8011632:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011636:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801163a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801163e:	4669      	mov	r1, sp
 8011640:	691b      	ldr	r3, [r3, #16]
 8011642:	9400      	str	r4, [sp, #0]
 8011644:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011648:	4798      	blx	r3
 801164a:	b002      	add	sp, #8
 801164c:	bd10      	pop	{r4, pc}

0801164e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801164e:	b538      	push	{r3, r4, r5, lr}
 8011650:	680b      	ldr	r3, [r1, #0]
 8011652:	460c      	mov	r4, r1
 8011654:	4605      	mov	r5, r0
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	4798      	blx	r3
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	4620      	mov	r0, r4
 801165e:	4629      	mov	r1, r5
 8011660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011662:	4798      	blx	r3
 8011664:	4628      	mov	r0, r5
 8011666:	bd38      	pop	{r3, r4, r5, pc}

08011668 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8011668:	b410      	push	{r4}
 801166a:	880a      	ldrh	r2, [r1, #0]
 801166c:	8884      	ldrh	r4, [r0, #4]
 801166e:	4422      	add	r2, r4
 8011670:	800a      	strh	r2, [r1, #0]
 8011672:	884a      	ldrh	r2, [r1, #2]
 8011674:	88c4      	ldrh	r4, [r0, #6]
 8011676:	4422      	add	r2, r4
 8011678:	804a      	strh	r2, [r1, #2]
 801167a:	6940      	ldr	r0, [r0, #20]
 801167c:	b120      	cbz	r0, 8011688 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801167e:	6803      	ldr	r3, [r0, #0]
 8011680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011686:	4718      	bx	r3
 8011688:	f85d 4b04 	ldr.w	r4, [sp], #4
 801168c:	4770      	bx	lr

0801168e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801168e:	b570      	push	{r4, r5, r6, lr}
 8011690:	8882      	ldrh	r2, [r0, #4]
 8011692:	460c      	mov	r4, r1
 8011694:	880b      	ldrh	r3, [r1, #0]
 8011696:	4605      	mov	r5, r0
 8011698:	4413      	add	r3, r2
 801169a:	800b      	strh	r3, [r1, #0]
 801169c:	884b      	ldrh	r3, [r1, #2]
 801169e:	88c2      	ldrh	r2, [r0, #6]
 80116a0:	4413      	add	r3, r2
 80116a2:	804b      	strh	r3, [r1, #2]
 80116a4:	1d01      	adds	r1, r0, #4
 80116a6:	4620      	mov	r0, r4
 80116a8:	f7fb f92e 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 80116ac:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	dd0b      	ble.n	80116cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80116b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	dd07      	ble.n	80116cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80116bc:	6968      	ldr	r0, [r5, #20]
 80116be:	b128      	cbz	r0, 80116cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80116c0:	6803      	ldr	r3, [r0, #0]
 80116c2:	4621      	mov	r1, r4
 80116c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116ca:	4718      	bx	r3
 80116cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080116d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80116d0:	b570      	push	{r4, r5, r6, lr}
 80116d2:	8882      	ldrh	r2, [r0, #4]
 80116d4:	460c      	mov	r4, r1
 80116d6:	880b      	ldrh	r3, [r1, #0]
 80116d8:	4605      	mov	r5, r0
 80116da:	4413      	add	r3, r2
 80116dc:	800b      	strh	r3, [r1, #0]
 80116de:	884b      	ldrh	r3, [r1, #2]
 80116e0:	88c2      	ldrh	r2, [r0, #6]
 80116e2:	4413      	add	r3, r2
 80116e4:	804b      	strh	r3, [r1, #2]
 80116e6:	1d01      	adds	r1, r0, #4
 80116e8:	4620      	mov	r0, r4
 80116ea:	f7fb f90d 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 80116ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	dd15      	ble.n	8011722 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80116f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	dd11      	ble.n	8011722 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80116fe:	6968      	ldr	r0, [r5, #20]
 8011700:	b128      	cbz	r0, 801170e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8011702:	6803      	ldr	r3, [r0, #0]
 8011704:	691b      	ldr	r3, [r3, #16]
 8011706:	4621      	mov	r1, r4
 8011708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801170c:	4718      	bx	r3
 801170e:	4b05      	ldr	r3, [pc, #20]	; (8011724 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	3304      	adds	r3, #4
 8011714:	429d      	cmp	r5, r3
 8011716:	d104      	bne.n	8011722 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8011718:	f7ff f806 	bl	8010728 <_ZN8touchgfx11Application11getInstanceEv>
 801171c:	6803      	ldr	r3, [r0, #0]
 801171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011720:	e7f1      	b.n	8011706 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 8011722:	bd70      	pop	{r4, r5, r6, pc}
 8011724:	24006ca0 	.word	0x24006ca0

08011728 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8011728:	b570      	push	{r4, r5, r6, lr}
 801172a:	4604      	mov	r4, r0
 801172c:	4616      	mov	r6, r2
 801172e:	460d      	mov	r5, r1
 8011730:	b901      	cbnz	r1, 8011734 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8011732:	b192      	cbz	r2, 801175a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8011734:	6823      	ldr	r3, [r4, #0]
 8011736:	4620      	mov	r0, r4
 8011738:	695b      	ldr	r3, [r3, #20]
 801173a:	4798      	blx	r3
 801173c:	88e2      	ldrh	r2, [r4, #6]
 801173e:	88a1      	ldrh	r1, [r4, #4]
 8011740:	4620      	mov	r0, r4
 8011742:	4432      	add	r2, r6
 8011744:	4429      	add	r1, r5
 8011746:	b212      	sxth	r2, r2
 8011748:	b209      	sxth	r1, r1
 801174a:	f7f1 fd47 	bl	80031dc <_ZN8touchgfx8Drawable5setXYEss>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	4620      	mov	r0, r4
 8011752:	695b      	ldr	r3, [r3, #20]
 8011754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011758:	4718      	bx	r3
 801175a:	bd70      	pop	{r4, r5, r6, pc}

0801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801175c:	b510      	push	{r4, lr}
 801175e:	2300      	movs	r3, #0
 8011760:	4604      	mov	r4, r0
 8011762:	4608      	mov	r0, r1
 8011764:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8011768:	8023      	strh	r3, [r4, #0]
 801176a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801176e:	8063      	strh	r3, [r4, #2]
 8011770:	6803      	ldr	r3, [r0, #0]
 8011772:	80a1      	strh	r1, [r4, #4]
 8011774:	4621      	mov	r1, r4
 8011776:	80e2      	strh	r2, [r4, #6]
 8011778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801177a:	4798      	blx	r3
 801177c:	4620      	mov	r0, r4
 801177e:	bd10      	pop	{r4, pc}

08011780 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8011780:	b530      	push	{r4, r5, lr}
 8011782:	8083      	strh	r3, [r0, #4]
 8011784:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011788:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801178c:	7183      	strb	r3, [r0, #6]
 801178e:	79c3      	ldrb	r3, [r0, #7]
 8011790:	6101      	str	r1, [r0, #16]
 8011792:	f365 0306 	bfi	r3, r5, #0, #7
 8011796:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801179a:	8282      	strh	r2, [r0, #20]
 801179c:	f365 13c7 	bfi	r3, r5, #7, #1
 80117a0:	71c3      	strb	r3, [r0, #7]
 80117a2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80117a6:	7203      	strb	r3, [r0, #8]
 80117a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80117ac:	7243      	strb	r3, [r0, #9]
 80117ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80117b2:	8143      	strh	r3, [r0, #10]
 80117b4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80117b8:	8183      	strh	r3, [r0, #12]
 80117ba:	4b01      	ldr	r3, [pc, #4]	; (80117c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80117bc:	6003      	str	r3, [r0, #0]
 80117be:	bd30      	pop	{r4, r5, pc}
 80117c0:	0801f9f4 	.word	0x0801f9f4

080117c4 <_ZNK8touchgfx9ConstFont4findEt>:
 80117c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117c6:	6904      	ldr	r4, [r0, #16]
 80117c8:	b3bc      	cbz	r4, 801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80117ca:	88a3      	ldrh	r3, [r4, #4]
 80117cc:	8a82      	ldrh	r2, [r0, #20]
 80117ce:	1acb      	subs	r3, r1, r3
 80117d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80117d4:	d431      	bmi.n	801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80117d6:	4293      	cmp	r3, r2
 80117d8:	dd0c      	ble.n	80117f4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80117da:	230e      	movs	r3, #14
 80117dc:	fb03 4302 	mla	r3, r3, r2, r4
 80117e0:	889b      	ldrh	r3, [r3, #4]
 80117e2:	1a5b      	subs	r3, r3, r1
 80117e4:	1ad3      	subs	r3, r2, r3
 80117e6:	429a      	cmp	r2, r3
 80117e8:	db27      	blt.n	801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	bfbc      	itt	lt
 80117ee:	2302      	movlt	r3, #2
 80117f0:	fb92 f3f3 	sdivlt	r3, r2, r3
 80117f4:	2500      	movs	r5, #0
 80117f6:	260e      	movs	r6, #14
 80117f8:	4295      	cmp	r5, r2
 80117fa:	dc1e      	bgt.n	801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80117fc:	fb06 4003 	mla	r0, r6, r3, r4
 8011800:	8887      	ldrh	r7, [r0, #4]
 8011802:	42b9      	cmp	r1, r7
 8011804:	d01a      	beq.n	801183c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8011806:	d20d      	bcs.n	8011824 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011808:	1e5a      	subs	r2, r3, #1
 801180a:	4295      	cmp	r5, r2
 801180c:	dc15      	bgt.n	801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801180e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8011812:	1a5b      	subs	r3, r3, r1
 8011814:	1ad3      	subs	r3, r2, r3
 8011816:	429a      	cmp	r2, r3
 8011818:	db0f      	blt.n	801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801181a:	429d      	cmp	r5, r3
 801181c:	ddec      	ble.n	80117f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801181e:	1953      	adds	r3, r2, r5
 8011820:	105b      	asrs	r3, r3, #1
 8011822:	e7e9      	b.n	80117f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011824:	1c5d      	adds	r5, r3, #1
 8011826:	42aa      	cmp	r2, r5
 8011828:	db07      	blt.n	801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801182a:	8a43      	ldrh	r3, [r0, #18]
 801182c:	1acb      	subs	r3, r1, r3
 801182e:	442b      	add	r3, r5
 8011830:	429d      	cmp	r5, r3
 8011832:	dc02      	bgt.n	801183a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011834:	429a      	cmp	r2, r3
 8011836:	dadf      	bge.n	80117f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011838:	e7f1      	b.n	801181e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801183a:	2000      	movs	r0, #0
 801183c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801183e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801183e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011840:	4604      	mov	r4, r0
 8011842:	4617      	mov	r7, r2
 8011844:	461e      	mov	r6, r3
 8011846:	b911      	cbnz	r1, 801184e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8011848:	2500      	movs	r5, #0
 801184a:	4628      	mov	r0, r5
 801184c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801184e:	290a      	cmp	r1, #10
 8011850:	d0fa      	beq.n	8011848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011852:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011856:	4291      	cmp	r1, r2
 8011858:	d0f6      	beq.n	8011848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801185a:	f242 020b 	movw	r2, #8203	; 0x200b
 801185e:	4291      	cmp	r1, r2
 8011860:	d0f2      	beq.n	8011848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011862:	f7ff ffaf 	bl	80117c4 <_ZNK8touchgfx9ConstFont4findEt>
 8011866:	4605      	mov	r5, r0
 8011868:	b950      	cbnz	r0, 8011880 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801186a:	6823      	ldr	r3, [r4, #0]
 801186c:	4620      	mov	r0, r4
 801186e:	691b      	ldr	r3, [r3, #16]
 8011870:	4798      	blx	r3
 8011872:	4601      	mov	r1, r0
 8011874:	4620      	mov	r0, r4
 8011876:	f7ff ffa5 	bl	80117c4 <_ZNK8touchgfx9ConstFont4findEt>
 801187a:	4605      	mov	r5, r0
 801187c:	2800      	cmp	r0, #0
 801187e:	d0e3      	beq.n	8011848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	4629      	mov	r1, r5
 8011884:	4620      	mov	r0, r4
 8011886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011888:	4798      	blx	r3
 801188a:	6038      	str	r0, [r7, #0]
 801188c:	6823      	ldr	r3, [r4, #0]
 801188e:	4620      	mov	r0, r4
 8011890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011892:	4798      	blx	r3
 8011894:	7030      	strb	r0, [r6, #0]
 8011896:	e7d8      	b.n	801184a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08011898 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4605      	mov	r5, r0
 801189c:	f002 fa86 	bl	8013dac <_ZNK8touchgfx6Bitmap9getFormatEv>
 80118a0:	4604      	mov	r4, r0
 80118a2:	4628      	mov	r0, r5
 80118a4:	f002 f9be 	bl	8013c24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	bf14      	ite	ne
 80118ac:	2002      	movne	r0, #2
 80118ae:	2000      	moveq	r0, #0
 80118b0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80118b4:	b280      	uxth	r0, r0
 80118b6:	bd38      	pop	{r3, r4, r5, pc}

080118b8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4605      	mov	r5, r0
 80118bc:	f002 fa76 	bl	8013dac <_ZNK8touchgfx6Bitmap9getFormatEv>
 80118c0:	4604      	mov	r4, r0
 80118c2:	4628      	mov	r0, r5
 80118c4:	f002 f9ae 	bl	8013c24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	bf14      	ite	ne
 80118cc:	2002      	movne	r0, #2
 80118ce:	2000      	moveq	r0, #0
 80118d0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80118d4:	f040 0001 	orr.w	r0, r0, #1
 80118d8:	b280      	uxth	r0, r0
 80118da:	bd38      	pop	{r3, r4, r5, pc}

080118dc <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80118dc:	2000      	movs	r0, #0
 80118de:	4770      	bx	lr

080118e0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80118e0:	2001      	movs	r0, #1
 80118e2:	4770      	bx	lr

080118e4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80118e4:	2002      	movs	r0, #2
 80118e6:	4770      	bx	lr

080118e8 <_ZN8touchgfx6ScreenD1Ev>:
 80118e8:	4770      	bx	lr

080118ea <_ZN8touchgfx12GestureEventD1Ev>:
 80118ea:	4770      	bx	lr

080118ec <_ZN8touchgfx9DragEventD1Ev>:
 80118ec:	4770      	bx	lr

080118ee <_ZN8touchgfx10ClickEventD1Ev>:
 80118ee:	4770      	bx	lr

080118f0 <_ZN8touchgfx10ClickEventD0Ev>:
 80118f0:	b510      	push	{r4, lr}
 80118f2:	4604      	mov	r4, r0
 80118f4:	210c      	movs	r1, #12
 80118f6:	f00a fbc3 	bl	801c080 <_ZdlPvj>
 80118fa:	4620      	mov	r0, r4
 80118fc:	bd10      	pop	{r4, pc}

080118fe <_ZN8touchgfx9DragEventD0Ev>:
 80118fe:	b510      	push	{r4, lr}
 8011900:	4604      	mov	r4, r0
 8011902:	2110      	movs	r1, #16
 8011904:	f00a fbbc 	bl	801c080 <_ZdlPvj>
 8011908:	4620      	mov	r0, r4
 801190a:	bd10      	pop	{r4, pc}

0801190c <_ZN8touchgfx12GestureEventD0Ev>:
 801190c:	b510      	push	{r4, lr}
 801190e:	4604      	mov	r4, r0
 8011910:	210c      	movs	r1, #12
 8011912:	f00a fbb5 	bl	801c080 <_ZdlPvj>
 8011916:	4620      	mov	r0, r4
 8011918:	bd10      	pop	{r4, pc}

0801191a <_ZN8touchgfx6ScreenD0Ev>:
 801191a:	b510      	push	{r4, lr}
 801191c:	4604      	mov	r4, r0
 801191e:	213c      	movs	r1, #60	; 0x3c
 8011920:	f00a fbae 	bl	801c080 <_ZdlPvj>
 8011924:	4620      	mov	r0, r4
 8011926:	bd10      	pop	{r4, pc}

08011928 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8011928:	b530      	push	{r4, r5, lr}
 801192a:	460d      	mov	r5, r1
 801192c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801192e:	b087      	sub	sp, #28
 8011930:	4604      	mov	r4, r0
 8011932:	b301      	cbz	r1, 8011976 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011934:	a801      	add	r0, sp, #4
 8011936:	f7ff ff11 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801193a:	892a      	ldrh	r2, [r5, #8]
 801193c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011940:	7928      	ldrb	r0, [r5, #4]
 8011942:	1ad2      	subs	r2, r2, r3
 8011944:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011946:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801194a:	441a      	add	r2, r3
 801194c:	896b      	ldrh	r3, [r5, #10]
 801194e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8011952:	f88d 0010 	strb.w	r0, [sp, #16]
 8011956:	1b5b      	subs	r3, r3, r5
 8011958:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801195a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801195c:	442b      	add	r3, r5
 801195e:	4d07      	ldr	r5, [pc, #28]	; (801197c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8011960:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011964:	a903      	add	r1, sp, #12
 8011966:	9503      	str	r5, [sp, #12]
 8011968:	f8ad 2014 	strh.w	r2, [sp, #20]
 801196c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011970:	6803      	ldr	r3, [r0, #0]
 8011972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011974:	4798      	blx	r3
 8011976:	b007      	add	sp, #28
 8011978:	bd30      	pop	{r4, r5, pc}
 801197a:	bf00      	nop
 801197c:	0801fa74 	.word	0x0801fa74

08011980 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8011980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011984:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011986:	b08a      	sub	sp, #40	; 0x28
 8011988:	4604      	mov	r4, r0
 801198a:	460d      	mov	r5, r1
 801198c:	b113      	cbz	r3, 8011994 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801198e:	790b      	ldrb	r3, [r1, #4]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d044      	beq.n	8011a1e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011994:	f104 0804 	add.w	r8, r4, #4
 8011998:	a803      	add	r0, sp, #12
 801199a:	4641      	mov	r1, r8
 801199c:	f7ff fede 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80119a0:	792b      	ldrb	r3, [r5, #4]
 80119a2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80119a6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80119aa:	b983      	cbnz	r3, 80119ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80119ac:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80119b0:	892a      	ldrh	r2, [r5, #8]
 80119b2:	88e9      	ldrh	r1, [r5, #6]
 80119b4:	4640      	mov	r0, r8
 80119b6:	1b92      	subs	r2, r2, r6
 80119b8:	9301      	str	r3, [sp, #4]
 80119ba:	1bc9      	subs	r1, r1, r7
 80119bc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80119c0:	b212      	sxth	r2, r2
 80119c2:	9300      	str	r3, [sp, #0]
 80119c4:	b209      	sxth	r1, r1
 80119c6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80119ca:	f7fa febb 	bl	800c744 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80119ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80119d0:	b329      	cbz	r1, 8011a1e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80119d2:	a805      	add	r0, sp, #20
 80119d4:	f7ff fec2 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80119d8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80119dc:	792b      	ldrb	r3, [r5, #4]
 80119de:	a907      	add	r1, sp, #28
 80119e0:	1abf      	subs	r7, r7, r2
 80119e2:	88ea      	ldrh	r2, [r5, #6]
 80119e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119e6:	4417      	add	r7, r2
 80119e8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80119ea:	f88d 3020 	strb.w	r3, [sp, #32]
 80119ee:	4417      	add	r7, r2
 80119f0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80119f4:	1ab6      	subs	r6, r6, r2
 80119f6:	892a      	ldrh	r2, [r5, #8]
 80119f8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80119fc:	4416      	add	r6, r2
 80119fe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011a00:	4416      	add	r6, r2
 8011a02:	4a08      	ldr	r2, [pc, #32]	; (8011a24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8011a04:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8011a08:	2600      	movs	r6, #0
 8011a0a:	9207      	str	r2, [sp, #28]
 8011a0c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8011a10:	6803      	ldr	r3, [r0, #0]
 8011a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a14:	4798      	blx	r3
 8011a16:	792b      	ldrb	r3, [r5, #4]
 8011a18:	b10b      	cbz	r3, 8011a1e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011a1a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011a1e:	b00a      	add	sp, #40	; 0x28
 8011a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a24:	0801fa4c 	.word	0x0801fa4c

08011a28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8011a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011a30:	b088      	sub	sp, #32
 8011a32:	4605      	mov	r5, r0
 8011a34:	2900      	cmp	r1, #0
 8011a36:	d06d      	beq.n	8011b14 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8011a38:	4668      	mov	r0, sp
 8011a3a:	f7ff fe8f 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a3e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8011a40:	88e3      	ldrh	r3, [r4, #6]
 8011a42:	f9bd 8000 	ldrsh.w	r8, [sp]
 8011a46:	440b      	add	r3, r1
 8011a48:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8011a4c:	b21b      	sxth	r3, r3
 8011a4e:	4543      	cmp	r3, r8
 8011a50:	db31      	blt.n	8011ab6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a52:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8011a56:	44c4      	add	ip, r8
 8011a58:	fa0f fc8c 	sxth.w	ip, ip
 8011a5c:	4563      	cmp	r3, ip
 8011a5e:	da2a      	bge.n	8011ab6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a60:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8011a62:	8926      	ldrh	r6, [r4, #8]
 8011a64:	4416      	add	r6, r2
 8011a66:	b236      	sxth	r6, r6
 8011a68:	42be      	cmp	r6, r7
 8011a6a:	db24      	blt.n	8011ab6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a6c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011a70:	4438      	add	r0, r7
 8011a72:	b200      	sxth	r0, r0
 8011a74:	4286      	cmp	r6, r0
 8011a76:	da1e      	bge.n	8011ab6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a78:	8963      	ldrh	r3, [r4, #10]
 8011a7a:	4419      	add	r1, r3
 8011a7c:	b209      	sxth	r1, r1
 8011a7e:	4541      	cmp	r1, r8
 8011a80:	db08      	blt.n	8011a94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011a82:	4561      	cmp	r1, ip
 8011a84:	da06      	bge.n	8011a94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011a86:	89a3      	ldrh	r3, [r4, #12]
 8011a88:	441a      	add	r2, r3
 8011a8a:	b212      	sxth	r2, r2
 8011a8c:	42ba      	cmp	r2, r7
 8011a8e:	db01      	blt.n	8011a94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011a90:	4282      	cmp	r2, r0
 8011a92:	db10      	blt.n	8011ab6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a94:	4b21      	ldr	r3, [pc, #132]	; (8011b1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8011a96:	a904      	add	r1, sp, #16
 8011a98:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011a9a:	9304      	str	r3, [sp, #16]
 8011a9c:	2302      	movs	r3, #2
 8011a9e:	f88d 3014 	strb.w	r3, [sp, #20]
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011aa8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011aac:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011ab0:	6803      	ldr	r3, [r0, #0]
 8011ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab4:	4798      	blx	r3
 8011ab6:	1d29      	adds	r1, r5, #4
 8011ab8:	a802      	add	r0, sp, #8
 8011aba:	f7ff fe4f 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011abe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011ac2:	88e0      	ldrh	r0, [r4, #6]
 8011ac4:	eba3 0808 	sub.w	r8, r3, r8
 8011ac8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011acc:	7921      	ldrb	r1, [r4, #4]
 8011ace:	fa1f f888 	uxth.w	r8, r8
 8011ad2:	1bdf      	subs	r7, r3, r7
 8011ad4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8011ad8:	b2bb      	uxth	r3, r7
 8011ada:	4440      	add	r0, r8
 8011adc:	8922      	ldrh	r2, [r4, #8]
 8011ade:	8967      	ldrh	r7, [r4, #10]
 8011ae0:	4460      	add	r0, ip
 8011ae2:	89a4      	ldrh	r4, [r4, #12]
 8011ae4:	441a      	add	r2, r3
 8011ae6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011ae8:	44b8      	add	r8, r7
 8011aea:	4423      	add	r3, r4
 8011aec:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011af0:	4432      	add	r2, r6
 8011af2:	44e0      	add	r8, ip
 8011af4:	4433      	add	r3, r6
 8011af6:	4c0a      	ldr	r4, [pc, #40]	; (8011b20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8011af8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011afa:	f88d 1014 	strb.w	r1, [sp, #20]
 8011afe:	a904      	add	r1, sp, #16
 8011b00:	9404      	str	r4, [sp, #16]
 8011b02:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011b06:	f8ad 801a 	strh.w	r8, [sp, #26]
 8011b0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011b0e:	6803      	ldr	r3, [r0, #0]
 8011b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b12:	4798      	blx	r3
 8011b14:	b008      	add	sp, #32
 8011b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b1a:	bf00      	nop
 8011b1c:	0801fa4c 	.word	0x0801fa4c
 8011b20:	0801fa60 	.word	0x0801fa60

08011b24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b26:	4604      	mov	r4, r0
 8011b28:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011b2c:	3201      	adds	r2, #1
 8011b2e:	d112      	bne.n	8011b56 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011b30:	2500      	movs	r5, #0
 8011b32:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011b36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011b3a:	6803      	ldr	r3, [r0, #0]
 8011b3c:	9500      	str	r5, [sp, #0]
 8011b3e:	466d      	mov	r5, sp
 8011b40:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011b44:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011b48:	4629      	mov	r1, r5
 8011b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4c:	4798      	blx	r3
 8011b4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011b52:	e884 0003 	stmia.w	r4, {r0, r1}
 8011b56:	4620      	mov	r0, r4
 8011b58:	b003      	add	sp, #12
 8011b5a:	bd30      	pop	{r4, r5, pc}

08011b5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011b5c:	b513      	push	{r0, r1, r4, lr}
 8011b5e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011b62:	4604      	mov	r4, r0
 8011b64:	3301      	adds	r3, #1
 8011b66:	d109      	bne.n	8011b7c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011b68:	4601      	mov	r1, r0
 8011b6a:	4668      	mov	r0, sp
 8011b6c:	f7ff fdf6 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b70:	f8bd 3000 	ldrh.w	r3, [sp]
 8011b74:	8423      	strh	r3, [r4, #32]
 8011b76:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011b7a:	8463      	strh	r3, [r4, #34]	; 0x22
 8011b7c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011b80:	b002      	add	sp, #8
 8011b82:	bd10      	pop	{r4, pc}

08011b84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011b84:	b513      	push	{r0, r1, r4, lr}
 8011b86:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	d109      	bne.n	8011ba4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011b90:	4601      	mov	r1, r0
 8011b92:	4668      	mov	r0, sp
 8011b94:	f7ff fde2 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b98:	f8bd 3000 	ldrh.w	r3, [sp]
 8011b9c:	8423      	strh	r3, [r4, #32]
 8011b9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011ba2:	8463      	strh	r3, [r4, #34]	; 0x22
 8011ba4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011ba8:	b002      	add	sp, #8
 8011baa:	bd10      	pop	{r4, pc}

08011bac <_ZN8touchgfx6ScreenC1Ev>:
 8011bac:	b570      	push	{r4, r5, r6, lr}
 8011bae:	4b17      	ldr	r3, [pc, #92]	; (8011c0c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	4a17      	ldr	r2, [pc, #92]	; (8011c10 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8011bb4:	2101      	movs	r1, #1
 8011bb6:	f845 3b04 	str.w	r3, [r5], #4
 8011bba:	2300      	movs	r3, #0
 8011bbc:	6042      	str	r2, [r0, #4]
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	8103      	strh	r3, [r0, #8]
 8011bc2:	8143      	strh	r3, [r0, #10]
 8011bc4:	8183      	strh	r3, [r0, #12]
 8011bc6:	81c3      	strh	r3, [r0, #14]
 8011bc8:	8203      	strh	r3, [r0, #16]
 8011bca:	8243      	strh	r3, [r0, #18]
 8011bcc:	8283      	strh	r3, [r0, #20]
 8011bce:	82c3      	strh	r3, [r0, #22]
 8011bd0:	6203      	str	r3, [r0, #32]
 8011bd2:	8483      	strh	r3, [r0, #36]	; 0x24
 8011bd4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011bd6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8011bda:	6343      	str	r3, [r0, #52]	; 0x34
 8011bdc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011be0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011be4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011be8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8011bec:	4b09      	ldr	r3, [pc, #36]	; (8011c14 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8011bee:	4628      	mov	r0, r5
 8011bf0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011bf4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011bf6:	4a08      	ldr	r2, [pc, #32]	; (8011c18 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011bf8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011bfc:	4798      	blx	r3
 8011bfe:	6863      	ldr	r3, [r4, #4]
 8011c00:	4628      	mov	r0, r5
 8011c02:	4631      	mov	r1, r6
 8011c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c06:	4798      	blx	r3
 8011c08:	4620      	mov	r0, r4
 8011c0a:	bd70      	pop	{r4, r5, r6, pc}
 8011c0c:	0801fa88 	.word	0x0801fa88
 8011c10:	0801e8f0 	.word	0x0801e8f0
 8011c14:	24006c5a 	.word	0x24006c5a
 8011c18:	24006c58 	.word	0x24006c58

08011c1c <_ZN8touchgfx6Screen4drawEv>:
 8011c1c:	4b09      	ldr	r3, [pc, #36]	; (8011c44 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011c1e:	b507      	push	{r0, r1, r2, lr}
 8011c20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c24:	2100      	movs	r1, #0
 8011c26:	4b08      	ldr	r3, [pc, #32]	; (8011c48 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011c28:	9100      	str	r1, [sp, #0]
 8011c2a:	4669      	mov	r1, sp
 8011c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c30:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011c34:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c38:	6803      	ldr	r3, [r0, #0]
 8011c3a:	689b      	ldr	r3, [r3, #8]
 8011c3c:	4798      	blx	r3
 8011c3e:	b003      	add	sp, #12
 8011c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c44:	24006c58 	.word	0x24006c58
 8011c48:	24006c5a 	.word	0x24006c5a

08011c4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c50:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011c54:	b089      	sub	sp, #36	; 0x24
 8011c56:	4680      	mov	r8, r0
 8011c58:	460c      	mov	r4, r1
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	4615      	mov	r5, r2
 8011c5e:	dd0e      	ble.n	8011c7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011c60:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	dd0a      	ble.n	8011c7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f7ff ff5b 	bl	8011b24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011c6e:	4621      	mov	r1, r4
 8011c70:	f7fe fcd0 	bl	8010614 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011c74:	69eb      	ldr	r3, [r5, #28]
 8011c76:	b928      	cbnz	r0, 8011c84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011c78:	461d      	mov	r5, r3
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1f4      	bne.n	8011c68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8011c7e:	b009      	add	sp, #36	; 0x24
 8011c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c84:	ae04      	add	r6, sp, #16
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	f000 80b5 	beq.w	8011df6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011c8c:	682b      	ldr	r3, [r5, #0]
 8011c8e:	4629      	mov	r1, r5
 8011c90:	a802      	add	r0, sp, #8
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	4798      	blx	r3
 8011c96:	4628      	mov	r0, r5
 8011c98:	f7ff ff60 	bl	8011b5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011c9c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011ca0:	4407      	add	r7, r0
 8011ca2:	4628      	mov	r0, r5
 8011ca4:	f7ff ff6e 	bl	8011b84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011ca8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011cac:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011cb0:	b23f      	sxth	r7, r7
 8011cb2:	4418      	add	r0, r3
 8011cb4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011cb8:	4621      	mov	r1, r4
 8011cba:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011cbe:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cc8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8011ccc:	f7fa fe1c 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	f7ff ff27 	bl	8011b24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011cd6:	ab06      	add	r3, sp, #24
 8011cd8:	4602      	mov	r2, r0
 8011cda:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011cde:	e883 0003 	stmia.w	r3, {r0, r1}
 8011ce2:	4611      	mov	r1, r2
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fa fe0f 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 8011cea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011cee:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011cf2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011cf6:	4299      	cmp	r1, r3
 8011cf8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011cfc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8011d00:	d10b      	bne.n	8011d1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d02:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011d06:	4552      	cmp	r2, sl
 8011d08:	d107      	bne.n	8011d1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d0a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011d0e:	455a      	cmp	r2, fp
 8011d10:	d103      	bne.n	8011d1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d12:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011d16:	454a      	cmp	r2, r9
 8011d18:	d06d      	beq.n	8011df6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011d1a:	f1bb 0f00 	cmp.w	fp, #0
 8011d1e:	dd65      	ble.n	8011dec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011d20:	f1b9 0f00 	cmp.w	r9, #0
 8011d24:	dd62      	ble.n	8011dec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011d26:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011d2a:	fa1f f08a 	uxth.w	r0, sl
 8011d2e:	4552      	cmp	r2, sl
 8011d30:	9000      	str	r0, [sp, #0]
 8011d32:	da12      	bge.n	8011d5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8011d34:	9301      	str	r3, [sp, #4]
 8011d36:	9b00      	ldr	r3, [sp, #0]
 8011d38:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011d3c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011d40:	1a9a      	subs	r2, r3, r2
 8011d42:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011d46:	4631      	mov	r1, r6
 8011d48:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011d4c:	4640      	mov	r0, r8
 8011d4e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011d52:	69ea      	ldr	r2, [r5, #28]
 8011d54:	f7ff ff7a 	bl	8011c4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011d58:	9b01      	ldr	r3, [sp, #4]
 8011d5a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011d5e:	b29f      	uxth	r7, r3
 8011d60:	429a      	cmp	r2, r3
 8011d62:	da0d      	bge.n	8011d80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011d64:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011d68:	1aba      	subs	r2, r7, r2
 8011d6a:	f8ad a012 	strh.w	sl, [sp, #18]
 8011d6e:	4631      	mov	r1, r6
 8011d70:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011d74:	4640      	mov	r0, r8
 8011d76:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011d7a:	69ea      	ldr	r2, [r5, #28]
 8011d7c:	f7ff ff66 	bl	8011c4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011d80:	8822      	ldrh	r2, [r4, #0]
 8011d82:	445f      	add	r7, fp
 8011d84:	88a3      	ldrh	r3, [r4, #4]
 8011d86:	b2bf      	uxth	r7, r7
 8011d88:	4413      	add	r3, r2
 8011d8a:	b23a      	sxth	r2, r7
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	b219      	sxth	r1, r3
 8011d90:	4291      	cmp	r1, r2
 8011d92:	dd0d      	ble.n	8011db0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8011d94:	1bdb      	subs	r3, r3, r7
 8011d96:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011d9a:	f8ad a012 	strh.w	sl, [sp, #18]
 8011d9e:	4631      	mov	r1, r6
 8011da0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011da4:	4640      	mov	r0, r8
 8011da6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011daa:	69ea      	ldr	r2, [r5, #28]
 8011dac:	f7ff ff4e 	bl	8011c4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011db0:	88e2      	ldrh	r2, [r4, #6]
 8011db2:	8863      	ldrh	r3, [r4, #2]
 8011db4:	4413      	add	r3, r2
 8011db6:	9a00      	ldr	r2, [sp, #0]
 8011db8:	444a      	add	r2, r9
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	fa1f f982 	uxth.w	r9, r2
 8011dc0:	b219      	sxth	r1, r3
 8011dc2:	fa0f f289 	sxth.w	r2, r9
 8011dc6:	428a      	cmp	r2, r1
 8011dc8:	da15      	bge.n	8011df6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011dca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011dce:	eba3 0309 	sub.w	r3, r3, r9
 8011dd2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011dd6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011dda:	4631      	mov	r1, r6
 8011ddc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011de0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011de4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011de8:	69ea      	ldr	r2, [r5, #28]
 8011dea:	e001      	b.n	8011df0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8011dec:	69ea      	ldr	r2, [r5, #28]
 8011dee:	4621      	mov	r1, r4
 8011df0:	4640      	mov	r0, r8
 8011df2:	f7ff ff2b 	bl	8011c4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011df6:	4628      	mov	r0, r5
 8011df8:	f7ff fe94 	bl	8011b24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011dfc:	6861      	ldr	r1, [r4, #4]
 8011dfe:	4602      	mov	r2, r0
 8011e00:	4633      	mov	r3, r6
 8011e02:	6820      	ldr	r0, [r4, #0]
 8011e04:	c303      	stmia	r3!, {r0, r1}
 8011e06:	4611      	mov	r1, r2
 8011e08:	4630      	mov	r0, r6
 8011e0a:	f7fa fd7d 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 8011e0e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f77f af33 	ble.w	8011c7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011e18:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	f77f af2e 	ble.w	8011c7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011e22:	4628      	mov	r0, r5
 8011e24:	f7ff fe9a 	bl	8011b5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011e28:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011e2c:	1a18      	subs	r0, r3, r0
 8011e2e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011e32:	4628      	mov	r0, r5
 8011e34:	f7ff fea6 	bl	8011b84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011e38:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011e3c:	4631      	mov	r1, r6
 8011e3e:	1a18      	subs	r0, r3, r0
 8011e40:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011e44:	4628      	mov	r0, r5
 8011e46:	682b      	ldr	r3, [r5, #0]
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	4798      	blx	r3
 8011e4c:	e717      	b.n	8011c7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08011e4e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8011e4e:	b570      	push	{r4, r5, r6, lr}
 8011e50:	1d06      	adds	r6, r0, #4
 8011e52:	b086      	sub	sp, #24
 8011e54:	460c      	mov	r4, r1
 8011e56:	2300      	movs	r3, #0
 8011e58:	4631      	mov	r1, r6
 8011e5a:	4605      	mov	r5, r0
 8011e5c:	a802      	add	r0, sp, #8
 8011e5e:	9301      	str	r3, [sp, #4]
 8011e60:	f7ff fc7c 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011e64:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011e68:	8822      	ldrh	r2, [r4, #0]
 8011e6a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8011e6e:	1ad2      	subs	r2, r2, r3
 8011e70:	8863      	ldrh	r3, [r4, #2]
 8011e72:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011e76:	1a5b      	subs	r3, r3, r1
 8011e78:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011e7c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011e80:	aa01      	add	r2, sp, #4
 8011e82:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011e86:	4630      	mov	r0, r6
 8011e88:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011e8c:	a904      	add	r1, sp, #16
 8011e8e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011e92:	f7fa fe11 	bl	800cab8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011e96:	9a01      	ldr	r2, [sp, #4]
 8011e98:	b11a      	cbz	r2, 8011ea2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8011e9a:	4621      	mov	r1, r4
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	f7ff fed5 	bl	8011c4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011ea2:	b006      	add	sp, #24
 8011ea4:	bd70      	pop	{r4, r5, r6, pc}

08011ea6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	b530      	push	{r4, r5, lr}
 8011eaa:	4604      	mov	r4, r0
 8011eac:	b085      	sub	sp, #20
 8011eae:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8011eb2:	460d      	mov	r5, r1
 8011eb4:	466b      	mov	r3, sp
 8011eb6:	6851      	ldr	r1, [r2, #4]
 8011eb8:	c303      	stmia	r3!, {r0, r1}
 8011eba:	4629      	mov	r1, r5
 8011ebc:	4668      	mov	r0, sp
 8011ebe:	f7fa fd23 	bl	800c908 <_ZN8touchgfx4RectaNERKS0_>
 8011ec2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011ec6:	b12b      	cbz	r3, 8011ed4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8011ec8:	4669      	mov	r1, sp
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f7ff ffbf 	bl	8011e4e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8011ed0:	b005      	add	sp, #20
 8011ed2:	bd30      	pop	{r4, r5, pc}
 8011ed4:	3404      	adds	r4, #4
 8011ed6:	a802      	add	r0, sp, #8
 8011ed8:	4621      	mov	r1, r4
 8011eda:	f7ff fc3f 	bl	801175c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ede:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ee2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011ee6:	4669      	mov	r1, sp
 8011ee8:	4620      	mov	r0, r4
 8011eea:	1a9b      	subs	r3, r3, r2
 8011eec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011ef0:	f8ad 3000 	strh.w	r3, [sp]
 8011ef4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011ef8:	1a9b      	subs	r3, r3, r2
 8011efa:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011efe:	f7fa fda2 	bl	800ca46 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8011f02:	e7e5      	b.n	8011ed0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08011f04 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8011f04:	460b      	mov	r3, r1
 8011f06:	680a      	ldr	r2, [r1, #0]
 8011f08:	1d01      	adds	r1, r0, #4
 8011f0a:	6992      	ldr	r2, [r2, #24]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	4710      	bx	r2

08011f10 <_ZN8touchgfx12TextProviderC1Ev>:
 8011f10:	b538      	push	{r3, r4, r5, lr}
 8011f12:	2500      	movs	r5, #0
 8011f14:	2302      	movs	r3, #2
 8011f16:	4604      	mov	r4, r0
 8011f18:	220e      	movs	r2, #14
 8011f1a:	7403      	strb	r3, [r0, #16]
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	6145      	str	r5, [r0, #20]
 8011f20:	7605      	strb	r5, [r0, #24]
 8011f22:	83c5      	strh	r5, [r0, #30]
 8011f24:	8405      	strh	r5, [r0, #32]
 8011f26:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011f28:	8705      	strh	r5, [r0, #56]	; 0x38
 8011f2a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8011f2c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8011f30:	e9c0 5500 	strd	r5, r5, [r0]
 8011f34:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8011f38:	304c      	adds	r0, #76	; 0x4c
 8011f3a:	f00a fa43 	bl	801c3c4 <memset>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	4620      	mov	r0, r4
 8011f42:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8011f46:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011f4a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8011f4e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8011f52:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8011f56:	f7f2 fc31 	bl	80047bc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	bd38      	pop	{r3, r4, r5, pc}

08011f5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8011f5e:	b530      	push	{r4, r5, lr}
 8011f60:	2500      	movs	r5, #0
 8011f62:	2401      	movs	r4, #1
 8011f64:	6843      	ldr	r3, [r0, #4]
 8011f66:	b913      	cbnz	r3, 8011f6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011f68:	6803      	ldr	r3, [r0, #0]
 8011f6a:	b313      	cbz	r3, 8011fb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011f6c:	6043      	str	r3, [r0, #4]
 8011f6e:	7e03      	ldrb	r3, [r0, #24]
 8011f70:	b143      	cbz	r3, 8011f84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8011f72:	6943      	ldr	r3, [r0, #20]
 8011f74:	b12b      	cbz	r3, 8011f82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011f76:	881a      	ldrh	r2, [r3, #0]
 8011f78:	b11a      	cbz	r2, 8011f82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011f7a:	1c9a      	adds	r2, r3, #2
 8011f7c:	6142      	str	r2, [r0, #20]
 8011f7e:	8818      	ldrh	r0, [r3, #0]
 8011f80:	bd30      	pop	{r4, r5, pc}
 8011f82:	7605      	strb	r5, [r0, #24]
 8011f84:	6843      	ldr	r3, [r0, #4]
 8011f86:	8819      	ldrh	r1, [r3, #0]
 8011f88:	b199      	cbz	r1, 8011fb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011f8a:	1c9a      	adds	r2, r3, #2
 8011f8c:	2902      	cmp	r1, #2
 8011f8e:	6042      	str	r2, [r0, #4]
 8011f90:	d1f5      	bne.n	8011f7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8011f92:	7c03      	ldrb	r3, [r0, #16]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d8e5      	bhi.n	8011f64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011f98:	1c5a      	adds	r2, r3, #1
 8011f9a:	3302      	adds	r3, #2
 8011f9c:	7402      	strb	r2, [r0, #16]
 8011f9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011fa2:	6143      	str	r3, [r0, #20]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d0dd      	beq.n	8011f64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011fa8:	881b      	ldrh	r3, [r3, #0]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d0da      	beq.n	8011f64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011fae:	7604      	strb	r4, [r0, #24]
 8011fb0:	e7d8      	b.n	8011f64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	e7e4      	b.n	8011f80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08011fb6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8011fb6:	b430      	push	{r4, r5}
 8011fb8:	6815      	ldr	r5, [r2, #0]
 8011fba:	6085      	str	r5, [r0, #8]
 8011fbc:	6852      	ldr	r2, [r2, #4]
 8011fbe:	6443      	str	r3, [r0, #68]	; 0x44
 8011fc0:	60c2      	str	r2, [r0, #12]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	9b02      	ldr	r3, [sp, #8]
 8011fc6:	7402      	strb	r2, [r0, #16]
 8011fc8:	6001      	str	r1, [r0, #0]
 8011fca:	6483      	str	r3, [r0, #72]	; 0x48
 8011fcc:	6042      	str	r2, [r0, #4]
 8011fce:	6142      	str	r2, [r0, #20]
 8011fd0:	7602      	strb	r2, [r0, #24]
 8011fd2:	8702      	strh	r2, [r0, #56]	; 0x38
 8011fd4:	8402      	strh	r2, [r0, #32]
 8011fd6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8011fda:	bc30      	pop	{r4, r5}
 8011fdc:	f7f2 bbee 	b.w	80047bc <_ZN8touchgfx12TextProvider18initializeInternalEv>

08011fe0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8011fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	4608      	mov	r0, r1
 8011fe6:	b1f1      	cbz	r1, 8012026 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8011fe8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8011fec:	460b      	mov	r3, r1
 8011fee:	f101 0708 	add.w	r7, r1, #8
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	6818      	ldr	r0, [r3, #0]
 8011ff6:	3308      	adds	r3, #8
 8011ff8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011ffc:	4626      	mov	r6, r4
 8011ffe:	42bb      	cmp	r3, r7
 8012000:	c603      	stmia	r6!, {r0, r1}
 8012002:	4634      	mov	r4, r6
 8012004:	d1f6      	bne.n	8011ff4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8012006:	6818      	ldr	r0, [r3, #0]
 8012008:	6030      	str	r0, [r6, #0]
 801200a:	4610      	mov	r0, r2
 801200c:	889b      	ldrh	r3, [r3, #4]
 801200e:	80b3      	strh	r3, [r6, #4]
 8012010:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8012014:	015b      	lsls	r3, r3, #5
 8012016:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801201a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801201e:	430b      	orrs	r3, r1
 8012020:	425b      	negs	r3, r3
 8012022:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8012026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012028 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8012028:	b538      	push	{r3, r4, r5, lr}
 801202a:	460c      	mov	r4, r1
 801202c:	6811      	ldr	r1, [r2, #0]
 801202e:	4610      	mov	r0, r2
 8012030:	68cd      	ldr	r5, [r1, #12]
 8012032:	4619      	mov	r1, r3
 8012034:	47a8      	blx	r5
 8012036:	2800      	cmp	r0, #0
 8012038:	bf08      	it	eq
 801203a:	4620      	moveq	r0, r4
 801203c:	bd38      	pop	{r3, r4, r5, pc}
	...

08012040 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8012040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012042:	4604      	mov	r4, r0
 8012044:	4615      	mov	r5, r2
 8012046:	4608      	mov	r0, r1
 8012048:	b93a      	cbnz	r2, 801205a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801204a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801204e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8012052:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8012056:	4628      	mov	r0, r5
 8012058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801205a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801205e:	8893      	ldrh	r3, [r2, #4]
 8012060:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8012064:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8012068:	79ee      	ldrb	r6, [r5, #7]
 801206a:	4316      	orrs	r6, r2
 801206c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8012070:	189a      	adds	r2, r3, r2
 8012072:	b2b7      	uxth	r7, r6
 8012074:	b291      	uxth	r1, r2
 8012076:	291d      	cmp	r1, #29
 8012078:	f200 8084 	bhi.w	8012184 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801207c:	2201      	movs	r2, #1
 801207e:	10f6      	asrs	r6, r6, #3
 8012080:	408a      	lsls	r2, r1
 8012082:	4978      	ldr	r1, [pc, #480]	; (8012264 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8012084:	420a      	tst	r2, r1
 8012086:	d12e      	bne.n	80120e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8012088:	f412 7f60 	tst.w	r2, #896	; 0x380
 801208c:	d07a      	beq.n	8012184 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801208e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8012092:	462b      	mov	r3, r5
 8012094:	f105 0e08 	add.w	lr, r5, #8
 8012098:	4615      	mov	r5, r2
 801209a:	6818      	ldr	r0, [r3, #0]
 801209c:	3308      	adds	r3, #8
 801209e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80120a2:	4694      	mov	ip, r2
 80120a4:	4573      	cmp	r3, lr
 80120a6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80120aa:	4662      	mov	r2, ip
 80120ac:	d1f5      	bne.n	801209a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80120ae:	6818      	ldr	r0, [r3, #0]
 80120b0:	f8cc 0000 	str.w	r0, [ip]
 80120b4:	889b      	ldrh	r3, [r3, #4]
 80120b6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80120ba:	b2b3      	uxth	r3, r6
 80120bc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80120c0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80120c4:	1aca      	subs	r2, r1, r3
 80120c6:	1bcf      	subs	r7, r1, r7
 80120c8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80120cc:	b292      	uxth	r2, r2
 80120ce:	1afb      	subs	r3, r7, r3
 80120d0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80120d4:	10d2      	asrs	r2, r2, #3
 80120d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80120da:	4302      	orrs	r2, r0
 80120dc:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80120e0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80120e4:	e7b7      	b.n	8012056 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80120e6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80120e8:	b92b      	cbnz	r3, 80120f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80120ea:	4b5f      	ldr	r3, [pc, #380]	; (8012268 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80120ec:	21c0      	movs	r1, #192	; 0xc0
 80120ee:	4a5f      	ldr	r2, [pc, #380]	; (801226c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80120f0:	485f      	ldr	r0, [pc, #380]	; (8012270 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80120f2:	f00a f8db 	bl	801c2ac <__assert_func>
 80120f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80120f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80120fc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80120fe:	f640 6333 	movw	r3, #3635	; 0xe33
 8012102:	4299      	cmp	r1, r3
 8012104:	d110      	bne.n	8012128 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8012106:	6803      	ldr	r3, [r0, #0]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	4798      	blx	r3
 801210c:	7b41      	ldrb	r1, [r0, #13]
 801210e:	00cb      	lsls	r3, r1, #3
 8012110:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012114:	7a03      	ldrb	r3, [r0, #8]
 8012116:	0648      	lsls	r0, r1, #25
 8012118:	ea43 0302 	orr.w	r3, r3, r2
 801211c:	bf44      	itt	mi
 801211e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012122:	b21b      	sxthmi	r3, r3
 8012124:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012128:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801212c:	462a      	mov	r2, r5
 801212e:	f105 0c08 	add.w	ip, r5, #8
 8012132:	443b      	add	r3, r7
 8012134:	4433      	add	r3, r6
 8012136:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801213a:	b29b      	uxth	r3, r3
 801213c:	4635      	mov	r5, r6
 801213e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012142:	6810      	ldr	r0, [r2, #0]
 8012144:	3208      	adds	r2, #8
 8012146:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801214a:	4637      	mov	r7, r6
 801214c:	4562      	cmp	r2, ip
 801214e:	c703      	stmia	r7!, {r0, r1}
 8012150:	463e      	mov	r6, r7
 8012152:	d1f6      	bne.n	8012142 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8012154:	6810      	ldr	r0, [r2, #0]
 8012156:	6038      	str	r0, [r7, #0]
 8012158:	8892      	ldrh	r2, [r2, #4]
 801215a:	80ba      	strh	r2, [r7, #4]
 801215c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012160:	10db      	asrs	r3, r3, #3
 8012162:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8012166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801216a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801216e:	4313      	orrs	r3, r2
 8012170:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8012174:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8012178:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801217c:	1a9b      	subs	r3, r3, r2
 801217e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8012182:	e768      	b.n	8012056 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012184:	f023 0204 	bic.w	r2, r3, #4
 8012188:	f640 611b 	movw	r1, #3611	; 0xe1b
 801218c:	428a      	cmp	r2, r1
 801218e:	d003      	beq.n	8012198 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8012190:	f640 621d 	movw	r2, #3613	; 0xe1d
 8012194:	4293      	cmp	r3, r2
 8012196:	d120      	bne.n	80121da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8012198:	3b01      	subs	r3, #1
 801219a:	4602      	mov	r2, r0
 801219c:	4629      	mov	r1, r5
 801219e:	4620      	mov	r0, r4
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	f7ff ff41 	bl	8012028 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80121a6:	7b41      	ldrb	r1, [r0, #13]
 80121a8:	00cb      	lsls	r3, r1, #3
 80121aa:	0649      	lsls	r1, r1, #25
 80121ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80121b0:	7a03      	ldrb	r3, [r0, #8]
 80121b2:	ea43 0302 	orr.w	r3, r3, r2
 80121b6:	bf44      	itt	mi
 80121b8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80121bc:	b21b      	sxthmi	r3, r3
 80121be:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80121c2:	7b6b      	ldrb	r3, [r5, #13]
 80121c4:	7aaa      	ldrb	r2, [r5, #10]
 80121c6:	005b      	lsls	r3, r3, #1
 80121c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121cc:	4313      	orrs	r3, r2
 80121ce:	115a      	asrs	r2, r3, #5
 80121d0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80121d4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80121d8:	e035      	b.n	8012246 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80121da:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80121de:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80121e2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80121e6:	7a2a      	ldrb	r2, [r5, #8]
 80121e8:	ea42 0201 	orr.w	r2, r2, r1
 80121ec:	f640 6109 	movw	r1, #3593	; 0xe09
 80121f0:	bf1c      	itt	ne
 80121f2:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80121f6:	b212      	sxthne	r2, r2
 80121f8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80121fc:	f023 0210 	bic.w	r2, r3, #16
 8012200:	428a      	cmp	r2, r1
 8012202:	d003      	beq.n	801220c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8012204:	f640 6213 	movw	r2, #3603	; 0xe13
 8012208:	4293      	cmp	r3, r2
 801220a:	d129      	bne.n	8012260 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801220c:	7b6e      	ldrb	r6, [r5, #13]
 801220e:	4629      	mov	r1, r5
 8012210:	0076      	lsls	r6, r6, #1
 8012212:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8012216:	7aae      	ldrb	r6, [r5, #10]
 8012218:	4316      	orrs	r6, r2
 801221a:	f640 6213 	movw	r2, #3603	; 0xe13
 801221e:	4293      	cmp	r3, r2
 8012220:	4602      	mov	r2, r0
 8012222:	4620      	mov	r0, r4
 8012224:	bf16      	itet	ne
 8012226:	f103 33ff 	addne.w	r3, r3, #4294967295
 801222a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801222e:	b29b      	uxthne	r3, r3
 8012230:	f7ff fefa 	bl	8012028 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012234:	7b43      	ldrb	r3, [r0, #13]
 8012236:	7a82      	ldrb	r2, [r0, #10]
 8012238:	005b      	lsls	r3, r3, #1
 801223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801223e:	4313      	orrs	r3, r2
 8012240:	1af6      	subs	r6, r6, r3
 8012242:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8012246:	7b69      	ldrb	r1, [r5, #13]
 8012248:	00cb      	lsls	r3, r1, #3
 801224a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801224e:	7a2b      	ldrb	r3, [r5, #8]
 8012250:	4313      	orrs	r3, r2
 8012252:	064a      	lsls	r2, r1, #25
 8012254:	bf44      	itt	mi
 8012256:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801225a:	b21b      	sxthmi	r3, r3
 801225c:	1bdb      	subs	r3, r3, r7
 801225e:	e73f      	b.n	80120e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8012260:	2300      	movs	r3, #0
 8012262:	e7b7      	b.n	80121d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8012264:	3fc00079 	.word	0x3fc00079
 8012268:	0801e29c 	.word	0x0801e29c
 801226c:	0801fce3 	.word	0x0801fce3
 8012270:	0801e36e 	.word	0x0801e36e

08012274 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8012274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012278:	4604      	mov	r4, r0
 801227a:	b942      	cbnz	r2, 801228e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801227c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012280:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8012284:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012288:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801228c:	e046      	b.n	801231c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801228e:	7b51      	ldrb	r1, [r2, #13]
 8012290:	8893      	ldrh	r3, [r2, #4]
 8012292:	010f      	lsls	r7, r1, #4
 8012294:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8012298:	79d7      	ldrb	r7, [r2, #7]
 801229a:	4307      	orrs	r7, r0
 801229c:	2f04      	cmp	r7, #4
 801229e:	b2bd      	uxth	r5, r7
 80122a0:	bfcc      	ite	gt
 80122a2:	08bf      	lsrgt	r7, r7, #2
 80122a4:	2701      	movle	r7, #1
 80122a6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80122aa:	f200 80ab 	bhi.w	8012404 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80122ae:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80122b2:	4283      	cmp	r3, r0
 80122b4:	d216      	bcs.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80122b6:	f240 605b 	movw	r0, #1627	; 0x65b
 80122ba:	4283      	cmp	r3, r0
 80122bc:	d859      	bhi.n	8012372 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80122be:	f240 6057 	movw	r0, #1623	; 0x657
 80122c2:	4283      	cmp	r3, r0
 80122c4:	d20e      	bcs.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80122c6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80122ca:	d24a      	bcs.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80122cc:	f240 604e 	movw	r0, #1614	; 0x64e
 80122d0:	4283      	cmp	r3, r0
 80122d2:	d207      	bcs.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80122d4:	f240 601a 	movw	r0, #1562	; 0x61a
 80122d8:	4283      	cmp	r3, r0
 80122da:	d02a      	beq.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80122dc:	d821      	bhi.n	8012322 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80122de:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80122e2:	d35b      	bcc.n	801239c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80122e4:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80122e8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80122ec:	f040 80d0 	bne.w	8012490 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80122f0:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80122f4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80122f8:	f040 80ca 	bne.w	8012490 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80122fc:	00cb      	lsls	r3, r1, #3
 80122fe:	0649      	lsls	r1, r1, #25
 8012300:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012304:	7a13      	ldrb	r3, [r2, #8]
 8012306:	ea43 0300 	orr.w	r3, r3, r0
 801230a:	bf44      	itt	mi
 801230c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012310:	b21b      	sxthmi	r3, r3
 8012312:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012316:	1b5d      	subs	r5, r3, r5
 8012318:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801231c:	4610      	mov	r0, r2
 801231e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012322:	f240 604b 	movw	r0, #1611	; 0x64b
 8012326:	4283      	cmp	r3, r0
 8012328:	d338      	bcc.n	801239c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801232a:	f240 604c 	movw	r0, #1612	; 0x64c
 801232e:	4283      	cmp	r3, r0
 8012330:	d9d8      	bls.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012332:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8012336:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801233a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801233e:	f040 80f2 	bne.w	8012526 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8012342:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012346:	f040 80ee 	bne.w	8012526 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801234a:	00cb      	lsls	r3, r1, #3
 801234c:	064e      	lsls	r6, r1, #25
 801234e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012352:	7a13      	ldrb	r3, [r2, #8]
 8012354:	ea43 0300 	orr.w	r3, r3, r0
 8012358:	bf44      	itt	mi
 801235a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801235e:	b21b      	sxthmi	r3, r3
 8012360:	e7d9      	b.n	8012316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8012362:	f240 6054 	movw	r0, #1620	; 0x654
 8012366:	4283      	cmp	r3, r0
 8012368:	d8e3      	bhi.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801236a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801236e:	d9e0      	bls.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012370:	e7b8      	b.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012372:	f240 6074 	movw	r0, #1652	; 0x674
 8012376:	4283      	cmp	r3, r0
 8012378:	d0b4      	beq.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801237a:	d82d      	bhi.n	80123d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801237c:	f240 605e 	movw	r0, #1630	; 0x65e
 8012380:	4283      	cmp	r3, r0
 8012382:	d804      	bhi.n	801238e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8012384:	f240 605d 	movw	r0, #1629	; 0x65d
 8012388:	4283      	cmp	r3, r0
 801238a:	d3d2      	bcc.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801238c:	e7aa      	b.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801238e:	f240 605f 	movw	r0, #1631	; 0x65f
 8012392:	4283      	cmp	r3, r0
 8012394:	d0cd      	beq.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012396:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801239a:	d0a3      	beq.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801239c:	00cb      	lsls	r3, r1, #3
 801239e:	0649      	lsls	r1, r1, #25
 80123a0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80123a4:	7a13      	ldrb	r3, [r2, #8]
 80123a6:	ea43 0300 	orr.w	r3, r3, r0
 80123aa:	bf44      	itt	mi
 80123ac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80123b0:	b21b      	sxthmi	r3, r3
 80123b2:	1b5d      	subs	r5, r3, r5
 80123b4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80123b8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80123bc:	7b53      	ldrb	r3, [r2, #13]
 80123be:	015b      	lsls	r3, r3, #5
 80123c0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80123c4:	7993      	ldrb	r3, [r2, #6]
 80123c6:	430b      	orrs	r3, r1
 80123c8:	2105      	movs	r1, #5
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80123d0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80123d4:	440b      	add	r3, r1
 80123d6:	e757      	b.n	8012288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80123d8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80123dc:	4283      	cmp	r3, r0
 80123de:	d809      	bhi.n	80123f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80123e0:	f240 60df 	movw	r0, #1759	; 0x6df
 80123e4:	4283      	cmp	r3, r0
 80123e6:	f4bf af7d 	bcs.w	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80123ea:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80123ee:	2b05      	cmp	r3, #5
 80123f0:	d8d4      	bhi.n	801239c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80123f2:	e777      	b.n	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80123f4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80123f8:	4283      	cmp	r3, r0
 80123fa:	d09a      	beq.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80123fc:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8012400:	4283      	cmp	r3, r0
 8012402:	e7ca      	b.n	801239a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8012404:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8012408:	d22b      	bcs.n	8012462 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801240a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801240e:	4283      	cmp	r3, r0
 8012410:	d28f      	bcs.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012412:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012416:	4283      	cmp	r3, r0
 8012418:	d816      	bhi.n	8012448 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801241a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801241e:	4283      	cmp	r3, r0
 8012420:	f4bf af60 	bcs.w	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012424:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8012428:	4283      	cmp	r3, r0
 801242a:	d80a      	bhi.n	8012442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801242c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8012430:	4283      	cmp	r3, r0
 8012432:	f4bf af57 	bcs.w	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012436:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801243a:	4283      	cmp	r3, r0
 801243c:	f43f af79 	beq.w	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012440:	e7ac      	b.n	801239c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012442:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8012446:	e7f8      	b.n	801243a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8012448:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801244c:	4283      	cmp	r3, r0
 801244e:	d802      	bhi.n	8012456 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8012450:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012454:	e798      	b.n	8012388 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8012456:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801245a:	4283      	cmp	r3, r0
 801245c:	f47f af42 	bne.w	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012460:	e767      	b.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012462:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8012466:	4283      	cmp	r3, r0
 8012468:	f43f af63 	beq.w	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801246c:	d802      	bhi.n	8012474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801246e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8012472:	e7f2      	b.n	801245a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8012474:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8012478:	4283      	cmp	r3, r0
 801247a:	d805      	bhi.n	8012488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801247c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8012480:	4283      	cmp	r3, r0
 8012482:	f4ff af2f 	bcc.w	80122e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012486:	e754      	b.n	8012332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012488:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801248c:	4283      	cmp	r3, r0
 801248e:	e7af      	b.n	80123f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8012490:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8012494:	4617      	mov	r7, r2
 8012496:	f102 0808 	add.w	r8, r2, #8
 801249a:	4666      	mov	r6, ip
 801249c:	6838      	ldr	r0, [r7, #0]
 801249e:	3708      	adds	r7, #8
 80124a0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80124a4:	46e6      	mov	lr, ip
 80124a6:	4547      	cmp	r7, r8
 80124a8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80124ac:	46f4      	mov	ip, lr
 80124ae:	d1f5      	bne.n	801249c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80124b0:	6838      	ldr	r0, [r7, #0]
 80124b2:	f8ce 0000 	str.w	r0, [lr]
 80124b6:	88b9      	ldrh	r1, [r7, #4]
 80124b8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80124bc:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80124c0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80124c4:	d009      	beq.n	80124da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80124c6:	7b51      	ldrb	r1, [r2, #13]
 80124c8:	7992      	ldrb	r2, [r2, #6]
 80124ca:	0149      	lsls	r1, r1, #5
 80124cc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80124d0:	4311      	orrs	r1, r2
 80124d2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80124d6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80124da:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80124de:	d00d      	beq.n	80124fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80124e0:	442b      	add	r3, r5
 80124e2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80124ec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80124f0:	10db      	asrs	r3, r3, #3
 80124f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80124f6:	4313      	orrs	r3, r2
 80124f8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80124fc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012500:	00cb      	lsls	r3, r1, #3
 8012502:	064f      	lsls	r7, r1, #25
 8012504:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012508:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801250c:	ea43 0302 	orr.w	r3, r3, r2
 8012510:	bf44      	itt	mi
 8012512:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012516:	b21b      	sxthmi	r3, r3
 8012518:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801251c:	1b5d      	subs	r5, r3, r5
 801251e:	4632      	mov	r2, r6
 8012520:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8012524:	e6fa      	b.n	801231c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8012526:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801252a:	4694      	mov	ip, r2
 801252c:	f102 0908 	add.w	r9, r2, #8
 8012530:	4676      	mov	r6, lr
 8012532:	f8dc 0000 	ldr.w	r0, [ip]
 8012536:	f10c 0c08 	add.w	ip, ip, #8
 801253a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801253e:	46f0      	mov	r8, lr
 8012540:	45cc      	cmp	ip, r9
 8012542:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8012546:	46c6      	mov	lr, r8
 8012548:	d1f3      	bne.n	8012532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801254a:	f8dc 0000 	ldr.w	r0, [ip]
 801254e:	f8c8 0000 	str.w	r0, [r8]
 8012552:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8012556:	f8a8 1004 	strh.w	r1, [r8, #4]
 801255a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801255e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012562:	d009      	beq.n	8012578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8012564:	7b51      	ldrb	r1, [r2, #13]
 8012566:	7992      	ldrb	r2, [r2, #6]
 8012568:	0149      	lsls	r1, r1, #5
 801256a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801256e:	4311      	orrs	r1, r2
 8012570:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012574:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8012578:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801257c:	d00d      	beq.n	801259a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801257e:	1bdb      	subs	r3, r3, r7
 8012580:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8012584:	b29b      	uxth	r3, r3
 8012586:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801258a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801258e:	10db      	asrs	r3, r3, #3
 8012590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012594:	4313      	orrs	r3, r2
 8012596:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801259a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801259e:	00cb      	lsls	r3, r1, #3
 80125a0:	0648      	lsls	r0, r1, #25
 80125a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80125a6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80125aa:	ea43 0302 	orr.w	r3, r3, r2
 80125ae:	bf44      	itt	mi
 80125b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80125b4:	b21b      	sxthmi	r3, r3
 80125b6:	e7b1      	b.n	801251c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080125b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80125b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125bc:	461e      	mov	r6, r3
 80125be:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80125c0:	4604      	mov	r4, r0
 80125c2:	4617      	mov	r7, r2
 80125c4:	b92b      	cbnz	r3, 80125d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80125c6:	4b25      	ldr	r3, [pc, #148]	; (801265c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80125c8:	21c0      	movs	r1, #192	; 0xc0
 80125ca:	4a25      	ldr	r2, [pc, #148]	; (8012660 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80125cc:	4825      	ldr	r0, [pc, #148]	; (8012664 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80125ce:	f009 fe6d 	bl	801c2ac <__assert_func>
 80125d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80125d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80125d8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80125dc:	f7f2 f8ac 	bl	8004738 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80125e0:	4605      	mov	r5, r0
 80125e2:	b918      	cbnz	r0, 80125ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80125e4:	6030      	str	r0, [r6, #0]
 80125e6:	4628      	mov	r0, r5
 80125e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	4601      	mov	r1, r0
 80125f0:	4638      	mov	r0, r7
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	4798      	blx	r3
 80125f6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80125fa:	4602      	mov	r2, r0
 80125fc:	6030      	str	r0, [r6, #0]
 80125fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012602:	d213      	bcs.n	801262c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8012604:	4643      	mov	r3, r8
 8012606:	4639      	mov	r1, r7
 8012608:	4620      	mov	r0, r4
 801260a:	f7ff fe33 	bl	8012274 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801260e:	6030      	str	r0, [r6, #0]
 8012610:	6833      	ldr	r3, [r6, #0]
 8012612:	b143      	cbz	r3, 8012626 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8012614:	7b5a      	ldrb	r2, [r3, #13]
 8012616:	7a9b      	ldrb	r3, [r3, #10]
 8012618:	0052      	lsls	r2, r2, #1
 801261a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801261e:	4313      	orrs	r3, r2
 8012620:	bf0c      	ite	eq
 8012622:	2301      	moveq	r3, #1
 8012624:	2300      	movne	r3, #0
 8012626:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801262a:	e7dc      	b.n	80125e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801262c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8012630:	b29b      	uxth	r3, r3
 8012632:	2b7f      	cmp	r3, #127	; 0x7f
 8012634:	d804      	bhi.n	8012640 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8012636:	4639      	mov	r1, r7
 8012638:	4620      	mov	r0, r4
 801263a:	f7ff fd01 	bl	8012040 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801263e:	e7e6      	b.n	801260e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8012640:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8012644:	2b00      	cmp	r3, #0
 8012646:	d0e3      	beq.n	8012610 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8012648:	f640 1302 	movw	r3, #2306	; 0x902
 801264c:	429d      	cmp	r5, r3
 801264e:	d1df      	bne.n	8012610 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8012650:	4601      	mov	r1, r0
 8012652:	4620      	mov	r0, r4
 8012654:	f7ff fcc4 	bl	8011fe0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8012658:	e7d9      	b.n	801260e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801265a:	bf00      	nop
 801265c:	0801e29c 	.word	0x0801e29c
 8012660:	0801fce3 	.word	0x0801fce3
 8012664:	0801e36e 	.word	0x0801e36e

08012668 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8012668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801266c:	461e      	mov	r6, r3
 801266e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8012670:	4604      	mov	r4, r0
 8012672:	4617      	mov	r7, r2
 8012674:	b92b      	cbnz	r3, 8012682 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8012676:	4b26      	ldr	r3, [pc, #152]	; (8012710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8012678:	21c0      	movs	r1, #192	; 0xc0
 801267a:	4a26      	ldr	r2, [pc, #152]	; (8012714 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801267c:	4826      	ldr	r0, [pc, #152]	; (8012718 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801267e:	f009 fe15 	bl	801c2ac <__assert_func>
 8012682:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012684:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012688:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801268c:	f7f2 f854 	bl	8004738 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012690:	4605      	mov	r5, r0
 8012692:	b918      	cbnz	r0, 801269c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8012694:	6030      	str	r0, [r6, #0]
 8012696:	4628      	mov	r0, r5
 8012698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	4601      	mov	r1, r0
 80126a0:	4638      	mov	r0, r7
 80126a2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80126a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80126aa:	47c8      	blx	r9
 80126ac:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80126b0:	4602      	mov	r2, r0
 80126b2:	6030      	str	r0, [r6, #0]
 80126b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126b8:	d213      	bcs.n	80126e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80126ba:	4643      	mov	r3, r8
 80126bc:	4639      	mov	r1, r7
 80126be:	4620      	mov	r0, r4
 80126c0:	f7ff fdd8 	bl	8012274 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80126c4:	6030      	str	r0, [r6, #0]
 80126c6:	6833      	ldr	r3, [r6, #0]
 80126c8:	b143      	cbz	r3, 80126dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80126ca:	7b5a      	ldrb	r2, [r3, #13]
 80126cc:	7a9b      	ldrb	r3, [r3, #10]
 80126ce:	0052      	lsls	r2, r2, #1
 80126d0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80126d4:	4313      	orrs	r3, r2
 80126d6:	bf0c      	ite	eq
 80126d8:	2301      	moveq	r3, #1
 80126da:	2300      	movne	r3, #0
 80126dc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80126e0:	e7d9      	b.n	8012696 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80126e2:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	2b7f      	cmp	r3, #127	; 0x7f
 80126ea:	d804      	bhi.n	80126f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80126ec:	4639      	mov	r1, r7
 80126ee:	4620      	mov	r0, r4
 80126f0:	f7ff fca6 	bl	8012040 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80126f4:	e7e6      	b.n	80126c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80126f6:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d0e3      	beq.n	80126c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80126fe:	f640 1302 	movw	r3, #2306	; 0x902
 8012702:	429d      	cmp	r5, r3
 8012704:	d1df      	bne.n	80126c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8012706:	4601      	mov	r1, r0
 8012708:	4620      	mov	r0, r4
 801270a:	f7ff fc69 	bl	8011fe0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801270e:	e7d9      	b.n	80126c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8012710:	0801e29c 	.word	0x0801e29c
 8012714:	0801fce3 	.word	0x0801fce3
 8012718:	0801e36e 	.word	0x0801e36e

0801271c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801271c:	b510      	push	{r4, lr}
 801271e:	4604      	mov	r4, r0
 8012720:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8012724:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012726:	b9d9      	cbnz	r1, 8012760 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8012728:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801272a:	2b0a      	cmp	r3, #10
 801272c:	d037      	beq.n	801279e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801272e:	4620      	mov	r0, r4
 8012730:	f7ff fc15 	bl	8011f5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8012734:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012736:	2b09      	cmp	r3, #9
 8012738:	d906      	bls.n	8012748 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801273a:	4b19      	ldr	r3, [pc, #100]	; (80127a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801273c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012740:	4a18      	ldr	r2, [pc, #96]	; (80127a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8012742:	4819      	ldr	r0, [pc, #100]	; (80127a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8012744:	f009 fdb2 	bl	801c2ac <__assert_func>
 8012748:	1c5a      	adds	r2, r3, #1
 801274a:	8722      	strh	r2, [r4, #56]	; 0x38
 801274c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801274e:	4413      	add	r3, r2
 8012750:	b29b      	uxth	r3, r3
 8012752:	2b09      	cmp	r3, #9
 8012754:	bf88      	it	hi
 8012756:	3b0a      	subhi	r3, #10
 8012758:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801275c:	8458      	strh	r0, [r3, #34]	; 0x22
 801275e:	e7e3      	b.n	8012728 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8012760:	2b0a      	cmp	r3, #10
 8012762:	d01c      	beq.n	801279e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8012764:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8012766:	3901      	subs	r1, #1
 8012768:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801276c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801276e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8012772:	1c51      	adds	r1, r2, #1
 8012774:	b289      	uxth	r1, r1
 8012776:	2901      	cmp	r1, #1
 8012778:	bf8a      	itet	hi
 801277a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801277e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8012780:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8012782:	2b09      	cmp	r3, #9
 8012784:	d8d9      	bhi.n	801273a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8012786:	1c5a      	adds	r2, r3, #1
 8012788:	8722      	strh	r2, [r4, #56]	; 0x38
 801278a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801278c:	4413      	add	r3, r2
 801278e:	b29b      	uxth	r3, r3
 8012790:	2b09      	cmp	r3, #9
 8012792:	bf88      	it	hi
 8012794:	3b0a      	subhi	r3, #10
 8012796:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801279a:	8458      	strh	r0, [r3, #34]	; 0x22
 801279c:	e7c0      	b.n	8012720 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801279e:	bd10      	pop	{r4, pc}
 80127a0:	0801fab4 	.word	0x0801fab4
 80127a4:	0801fe39 	.word	0x0801fe39
 80127a8:	0801e36e 	.word	0x0801e36e

080127ac <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80127ac:	b538      	push	{r3, r4, r5, lr}
 80127ae:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80127b0:	4604      	mov	r4, r0
 80127b2:	b92a      	cbnz	r2, 80127c0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80127b4:	4b13      	ldr	r3, [pc, #76]	; (8012804 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80127b6:	21d5      	movs	r1, #213	; 0xd5
 80127b8:	4a13      	ldr	r2, [pc, #76]	; (8012808 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80127ba:	4814      	ldr	r0, [pc, #80]	; (801280c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80127bc:	f009 fd76 	bl	801c2ac <__assert_func>
 80127c0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80127c2:	3a01      	subs	r2, #1
 80127c4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80127c8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 80127ca:	8702      	strh	r2, [r0, #56]	; 0x38
 80127cc:	1c5a      	adds	r2, r3, #1
 80127ce:	b292      	uxth	r2, r2
 80127d0:	2a09      	cmp	r2, #9
 80127d2:	bf8a      	itet	hi
 80127d4:	3b09      	subhi	r3, #9
 80127d6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80127d8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80127da:	f7ff ff9f 	bl	801271c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80127de:	8c23      	ldrh	r3, [r4, #32]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	bf9c      	itt	ls
 80127e4:	3301      	addls	r3, #1
 80127e6:	8423      	strhls	r3, [r4, #32]
 80127e8:	8be3      	ldrh	r3, [r4, #30]
 80127ea:	b90b      	cbnz	r3, 80127f0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80127ec:	2302      	movs	r3, #2
 80127ee:	83e3      	strh	r3, [r4, #30]
 80127f0:	8be3      	ldrh	r3, [r4, #30]
 80127f2:	4628      	mov	r0, r5
 80127f4:	3b01      	subs	r3, #1
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	83e3      	strh	r3, [r4, #30]
 80127fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80127fe:	8365      	strh	r5, [r4, #26]
 8012800:	bd38      	pop	{r3, r4, r5, pc}
 8012802:	bf00      	nop
 8012804:	0801e29c 	.word	0x0801e29c
 8012808:	0801fd8e 	.word	0x0801fd8e
 801280c:	0801e36e 	.word	0x0801e36e

08012810 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8012810:	428a      	cmp	r2, r1
 8012812:	b538      	push	{r3, r4, r5, lr}
 8012814:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8012816:	d90c      	bls.n	8012832 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8012818:	b92c      	cbnz	r4, 8012826 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801281a:	4b1c      	ldr	r3, [pc, #112]	; (801288c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801281c:	21e1      	movs	r1, #225	; 0xe1
 801281e:	4a1c      	ldr	r2, [pc, #112]	; (8012890 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8012820:	481c      	ldr	r0, [pc, #112]	; (8012894 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8012822:	f009 fd43 	bl	801c2ac <__assert_func>
 8012826:	3c01      	subs	r4, #1
 8012828:	4b1b      	ldr	r3, [pc, #108]	; (8012898 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801282a:	4a1c      	ldr	r2, [pc, #112]	; (801289c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801282c:	21c5      	movs	r1, #197	; 0xc5
 801282e:	8704      	strh	r4, [r0, #56]	; 0x38
 8012830:	e7f6      	b.n	8012820 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8012832:	428c      	cmp	r4, r1
 8012834:	d203      	bcs.n	801283e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8012836:	4b1a      	ldr	r3, [pc, #104]	; (80128a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8012838:	21cb      	movs	r1, #203	; 0xcb
 801283a:	4a1a      	ldr	r2, [pc, #104]	; (80128a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801283c:	e7f0      	b.n	8012820 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801283e:	1a64      	subs	r4, r4, r1
 8012840:	250a      	movs	r5, #10
 8012842:	8704      	strh	r4, [r0, #56]	; 0x38
 8012844:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8012846:	4421      	add	r1, r4
 8012848:	b289      	uxth	r1, r1
 801284a:	2909      	cmp	r1, #9
 801284c:	bf88      	it	hi
 801284e:	390a      	subhi	r1, #10
 8012850:	86c1      	strh	r1, [r0, #54]	; 0x36
 8012852:	b1ba      	cbz	r2, 8012884 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8012854:	3a01      	subs	r2, #1
 8012856:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8012858:	b292      	uxth	r2, r2
 801285a:	2909      	cmp	r1, #9
 801285c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8012860:	d903      	bls.n	801286a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8012862:	4b11      	ldr	r3, [pc, #68]	; (80128a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8012864:	21e6      	movs	r1, #230	; 0xe6
 8012866:	4a11      	ldr	r2, [pc, #68]	; (80128ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8012868:	e7da      	b.n	8012820 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801286a:	3101      	adds	r1, #1
 801286c:	8701      	strh	r1, [r0, #56]	; 0x38
 801286e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012870:	b901      	cbnz	r1, 8012874 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8012872:	86c5      	strh	r5, [r0, #54]	; 0x36
 8012874:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012876:	3901      	subs	r1, #1
 8012878:	b289      	uxth	r1, r1
 801287a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801287c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012880:	844c      	strh	r4, [r1, #34]	; 0x22
 8012882:	e7e6      	b.n	8012852 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8012884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012888:	f7ff bf48 	b.w	801271c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801288c:	0801e29c 	.word	0x0801e29c
 8012890:	0801fb67 	.word	0x0801fb67
 8012894:	0801e36e 	.word	0x0801e36e
 8012898:	0801e39a 	.word	0x0801e39a
 801289c:	0801fc11 	.word	0x0801fc11
 80128a0:	0801fac0 	.word	0x0801fac0
 80128a4:	0801fee8 	.word	0x0801fee8
 80128a8:	0801facc 	.word	0x0801facc
 80128ac:	0801fadf 	.word	0x0801fadf

080128b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80128b0:	3a01      	subs	r2, #1
 80128b2:	b570      	push	{r4, r5, r6, lr}
 80128b4:	b292      	uxth	r2, r2
 80128b6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80128ba:	42b2      	cmp	r2, r6
 80128bc:	d019      	beq.n	80128f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80128be:	8c04      	ldrh	r4, [r0, #32]
 80128c0:	f831 5b02 	ldrh.w	r5, [r1], #2
 80128c4:	4294      	cmp	r4, r2
 80128c6:	d805      	bhi.n	80128d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80128c8:	4b19      	ldr	r3, [pc, #100]	; (8012930 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80128ca:	4a1a      	ldr	r2, [pc, #104]	; (8012934 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80128cc:	21c5      	movs	r1, #197	; 0xc5
 80128ce:	481a      	ldr	r0, [pc, #104]	; (8012938 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80128d0:	f009 fcec 	bl	801c2ac <__assert_func>
 80128d4:	8bc4      	ldrh	r4, [r0, #30]
 80128d6:	4414      	add	r4, r2
 80128d8:	3a01      	subs	r2, #1
 80128da:	b2a4      	uxth	r4, r4
 80128dc:	b292      	uxth	r2, r2
 80128de:	2c01      	cmp	r4, #1
 80128e0:	bf88      	it	hi
 80128e2:	3c02      	subhi	r4, #2
 80128e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80128e8:	8b64      	ldrh	r4, [r4, #26]
 80128ea:	42ac      	cmp	r4, r5
 80128ec:	d0e5      	beq.n	80128ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80128ee:	2000      	movs	r0, #0
 80128f0:	bd70      	pop	{r4, r5, r6, pc}
 80128f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80128f6:	2400      	movs	r4, #0
 80128f8:	4413      	add	r3, r2
 80128fa:	b2a2      	uxth	r2, r4
 80128fc:	429a      	cmp	r2, r3
 80128fe:	da14      	bge.n	801292a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8012900:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8012902:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8012906:	4296      	cmp	r6, r2
 8012908:	d802      	bhi.n	8012910 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801290a:	4b09      	ldr	r3, [pc, #36]	; (8012930 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801290c:	4a0b      	ldr	r2, [pc, #44]	; (801293c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801290e:	e7dd      	b.n	80128cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8012910:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8012912:	3401      	adds	r4, #1
 8012914:	4432      	add	r2, r6
 8012916:	b292      	uxth	r2, r2
 8012918:	2a09      	cmp	r2, #9
 801291a:	bf88      	it	hi
 801291c:	3a0a      	subhi	r2, #10
 801291e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8012922:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8012924:	42aa      	cmp	r2, r5
 8012926:	d0e8      	beq.n	80128fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8012928:	e7e1      	b.n	80128ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801292a:	2001      	movs	r0, #1
 801292c:	e7e0      	b.n	80128f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801292e:	bf00      	nop
 8012930:	0801e39a 	.word	0x0801e39a
 8012934:	0801ff6c 	.word	0x0801ff6c
 8012938:	0801e36e 	.word	0x0801e36e
 801293c:	0801fc11 	.word	0x0801fc11

08012940 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8012940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	4605      	mov	r5, r0
 8012946:	4616      	mov	r6, r2
 8012948:	1c8c      	adds	r4, r1, #2
 801294a:	8809      	ldrh	r1, [r1, #0]
 801294c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8012950:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8012954:	42b3      	cmp	r3, r6
 8012956:	d124      	bne.n	80129a2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8012958:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801295c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8012960:	f001 070f 	and.w	r7, r1, #15
 8012964:	4652      	mov	r2, sl
 8012966:	f8cd 8000 	str.w	r8, [sp]
 801296a:	464b      	mov	r3, r9
 801296c:	4621      	mov	r1, r4
 801296e:	4628      	mov	r0, r5
 8012970:	f7ff ff9e 	bl	80128b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8012974:	4683      	mov	fp, r0
 8012976:	b168      	cbz	r0, 8012994 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8012978:	eb0a 0109 	add.w	r1, sl, r9
 801297c:	463a      	mov	r2, r7
 801297e:	4628      	mov	r0, r5
 8012980:	4441      	add	r1, r8
 8012982:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8012986:	4649      	mov	r1, r9
 8012988:	f7ff ff42 	bl	8012810 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801298c:	4658      	mov	r0, fp
 801298e:	b003      	add	sp, #12
 8012990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012994:	eb07 010a 	add.w	r1, r7, sl
 8012998:	4449      	add	r1, r9
 801299a:	4441      	add	r1, r8
 801299c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80129a0:	e7d2      	b.n	8012948 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80129a2:	f04f 0b00 	mov.w	fp, #0
 80129a6:	e7f1      	b.n	801298c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080129a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	8810      	ldrh	r0, [r2, #0]
 80129ac:	4298      	cmp	r0, r3
 80129ae:	d817      	bhi.n	80129e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80129b0:	1e48      	subs	r0, r1, #1
 80129b2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80129b6:	4298      	cmp	r0, r3
 80129b8:	d312      	bcc.n	80129e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80129ba:	2400      	movs	r4, #0
 80129bc:	428c      	cmp	r4, r1
 80129be:	d20f      	bcs.n	80129e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80129c0:	1860      	adds	r0, r4, r1
 80129c2:	1040      	asrs	r0, r0, #1
 80129c4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80129c8:	0085      	lsls	r5, r0, #2
 80129ca:	42b3      	cmp	r3, r6
 80129cc:	d902      	bls.n	80129d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80129ce:	3001      	adds	r0, #1
 80129d0:	b284      	uxth	r4, r0
 80129d2:	e7f3      	b.n	80129bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80129d4:	d201      	bcs.n	80129da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80129d6:	b281      	uxth	r1, r0
 80129d8:	e7f0      	b.n	80129bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80129da:	442a      	add	r2, r5
 80129dc:	8850      	ldrh	r0, [r2, #2]
 80129de:	bd70      	pop	{r4, r5, r6, pc}
 80129e0:	2000      	movs	r0, #0
 80129e2:	e7fc      	b.n	80129de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080129e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80129e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80129ea:	4604      	mov	r4, r0
 80129ec:	260b      	movs	r6, #11
 80129ee:	886f      	ldrh	r7, [r5, #2]
 80129f0:	087f      	lsrs	r7, r7, #1
 80129f2:	3e01      	subs	r6, #1
 80129f4:	d01b      	beq.n	8012a2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80129f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80129f8:	b92b      	cbnz	r3, 8012a06 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80129fa:	4b0e      	ldr	r3, [pc, #56]	; (8012a34 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80129fc:	21c0      	movs	r1, #192	; 0xc0
 80129fe:	4a0e      	ldr	r2, [pc, #56]	; (8012a38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8012a00:	480e      	ldr	r0, [pc, #56]	; (8012a3c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8012a02:	f009 fc53 	bl	801c2ac <__assert_func>
 8012a06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012a08:	462a      	mov	r2, r5
 8012a0a:	4639      	mov	r1, r7
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012a12:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8012a16:	4643      	mov	r3, r8
 8012a18:	f7ff ffc6 	bl	80129a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8012a1c:	b138      	cbz	r0, 8012a2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012a1e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8012a22:	4642      	mov	r2, r8
 8012a24:	4620      	mov	r0, r4
 8012a26:	f7ff ff8b 	bl	8012940 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	d1e1      	bne.n	80129f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8012a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a32:	bf00      	nop
 8012a34:	0801e29c 	.word	0x0801e29c
 8012a38:	0801fce3 	.word	0x0801fce3
 8012a3c:	0801e36e 	.word	0x0801e36e

08012a40 <_ZN8touchgfx8ceil28_4El>:
 8012a40:	f110 030f 	adds.w	r3, r0, #15
 8012a44:	d401      	bmi.n	8012a4a <_ZN8touchgfx8ceil28_4El+0xa>
 8012a46:	1118      	asrs	r0, r3, #4
 8012a48:	4770      	bx	lr
 8012a4a:	2210      	movs	r2, #16
 8012a4c:	f1c0 0001 	rsb	r0, r0, #1
 8012a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a54:	f010 000f 	ands.w	r0, r0, #15
 8012a58:	bf18      	it	ne
 8012a5a:	2001      	movne	r0, #1
 8012a5c:	1a18      	subs	r0, r3, r0
 8012a5e:	4770      	bx	lr

08012a60 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8012a60:	2900      	cmp	r1, #0
 8012a62:	b538      	push	{r3, r4, r5, lr}
 8012a64:	dc05      	bgt.n	8012a72 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8012a66:	4b0f      	ldr	r3, [pc, #60]	; (8012aa4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8012a68:	21f7      	movs	r1, #247	; 0xf7
 8012a6a:	4a0f      	ldr	r2, [pc, #60]	; (8012aa8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8012a6c:	480f      	ldr	r0, [pc, #60]	; (8012aac <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8012a6e:	f009 fc1d 	bl	801c2ac <__assert_func>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	db06      	blt.n	8012a84 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8012a76:	fb90 f4f1 	sdiv	r4, r0, r1
 8012a7a:	fb01 0114 	mls	r1, r1, r4, r0
 8012a7e:	6014      	str	r4, [r2, #0]
 8012a80:	6019      	str	r1, [r3, #0]
 8012a82:	bd38      	pop	{r3, r4, r5, pc}
 8012a84:	4240      	negs	r0, r0
 8012a86:	fb90 f4f1 	sdiv	r4, r0, r1
 8012a8a:	4265      	negs	r5, r4
 8012a8c:	fb01 0014 	mls	r0, r1, r4, r0
 8012a90:	6015      	str	r5, [r2, #0]
 8012a92:	6018      	str	r0, [r3, #0]
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d0f4      	beq.n	8012a82 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8012a98:	6810      	ldr	r0, [r2, #0]
 8012a9a:	3801      	subs	r0, #1
 8012a9c:	6010      	str	r0, [r2, #0]
 8012a9e:	6818      	ldr	r0, [r3, #0]
 8012aa0:	1a09      	subs	r1, r1, r0
 8012aa2:	e7ed      	b.n	8012a80 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8012aa4:	0802003d 	.word	0x0802003d
 8012aa8:	0802007c 	.word	0x0802007c
 8012aac:	0802004d 	.word	0x0802004d

08012ab0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	694a      	ldr	r2, [r1, #20]
 8012ab4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012ab6:	684b      	ldr	r3, [r1, #4]
 8012ab8:	1b54      	subs	r4, r2, r5
 8012aba:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8012abc:	f000 8106 	beq.w	8012ccc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8012ac0:	1b9b      	subs	r3, r3, r6
 8012ac2:	d003      	beq.n	8012acc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012ac4:	4363      	muls	r3, r4
 8012ac6:	2210      	movs	r2, #16
 8012ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012acc:	680c      	ldr	r4, [r1, #0]
 8012ace:	698a      	ldr	r2, [r1, #24]
 8012ad0:	1b65      	subs	r5, r4, r5
 8012ad2:	f000 80fd 	beq.w	8012cd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8012ad6:	1b92      	subs	r2, r2, r6
 8012ad8:	d003      	beq.n	8012ae2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012ada:	436a      	muls	r2, r5
 8012adc:	2410      	movs	r4, #16
 8012ade:	fb92 f2f4 	sdiv	r2, r2, r4
 8012ae2:	1a9b      	subs	r3, r3, r2
 8012ae4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8012d0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8012ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012aec:	460a      	mov	r2, r1
 8012aee:	ee07 3a90 	vmov	s15, r3
 8012af2:	f100 040c 	add.w	r4, r0, #12
 8012af6:	4603      	mov	r3, r0
 8012af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012afc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b00:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8012b04:	eeb1 6a43 	vneg.f32	s12, s6
 8012b08:	edd2 7a02 	vldr	s15, [r2, #8]
 8012b0c:	3214      	adds	r2, #20
 8012b0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012b12:	ece3 6a01 	vstmia	r3!, {s13}
 8012b16:	429c      	cmp	r4, r3
 8012b18:	ed52 7a02 	vldr	s15, [r2, #-8]
 8012b1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b20:	edc3 7a02 	vstr	s15, [r3, #8]
 8012b24:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b2c:	edc3 7a05 	vstr	s15, [r3, #20]
 8012b30:	d1ea      	bne.n	8012b08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8012b32:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012b34:	698b      	ldr	r3, [r1, #24]
 8012b36:	edd0 4a02 	vldr	s9, [r0, #8]
 8012b3a:	1a9b      	subs	r3, r3, r2
 8012b3c:	edd0 3a00 	vldr	s7, [r0]
 8012b40:	edd0 6a01 	vldr	s13, [r0, #4]
 8012b44:	ee07 3a90 	vmov	s15, r3
 8012b48:	684b      	ldr	r3, [r1, #4]
 8012b4a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012b4e:	ed90 5a05 	vldr	s10, [r0, #20]
 8012b52:	1a9b      	subs	r3, r3, r2
 8012b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b58:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8012b5c:	ed90 2a03 	vldr	s4, [r0, #12]
 8012b60:	ee07 3a10 	vmov	s14, r3
 8012b64:	edd0 5a04 	vldr	s11, [r0, #16]
 8012b68:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b6c:	ed90 1a07 	vldr	s2, [r0, #28]
 8012b70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b74:	edd0 2a06 	vldr	s5, [r0, #24]
 8012b78:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012b7c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012b80:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012b84:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012b88:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012b8c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012b90:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8012b94:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012b96:	694a      	ldr	r2, [r1, #20]
 8012b98:	1b13      	subs	r3, r2, r4
 8012b9a:	ee07 3a10 	vmov	s14, r3
 8012b9e:	680b      	ldr	r3, [r1, #0]
 8012ba0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ba4:	1b1b      	subs	r3, r3, r4
 8012ba6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012baa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8012bae:	ee07 3a10 	vmov	s14, r3
 8012bb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bb6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012bba:	eee6 4a87 	vfma.f32	s9, s13, s14
 8012bbe:	ee64 4a86 	vmul.f32	s9, s9, s12
 8012bc2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8012bc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012bc8:	698b      	ldr	r3, [r1, #24]
 8012bca:	1a9b      	subs	r3, r3, r2
 8012bcc:	ee06 3a90 	vmov	s13, r3
 8012bd0:	684b      	ldr	r3, [r1, #4]
 8012bd2:	1a9b      	subs	r3, r3, r2
 8012bd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012bd8:	ee07 3a10 	vmov	s14, r3
 8012bdc:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012be4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8012be8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012bec:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012bf0:	ee66 6a83 	vmul.f32	s13, s13, s6
 8012bf4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8012bf8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012bfa:	694a      	ldr	r2, [r1, #20]
 8012bfc:	1b13      	subs	r3, r2, r4
 8012bfe:	ee07 3a10 	vmov	s14, r3
 8012c02:	680b      	ldr	r3, [r1, #0]
 8012c04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c08:	1b1b      	subs	r3, r3, r4
 8012c0a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c0e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012c12:	ee07 3a10 	vmov	s14, r3
 8012c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c1a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c1e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012c22:	edd0 5a08 	vldr	s11, [r0, #32]
 8012c26:	ee31 1a65 	vsub.f32	s2, s2, s11
 8012c2a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8012c2e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012c32:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8012c36:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012c38:	698b      	ldr	r3, [r1, #24]
 8012c3a:	1a9b      	subs	r3, r3, r2
 8012c3c:	ee07 3a10 	vmov	s14, r3
 8012c40:	684b      	ldr	r3, [r1, #4]
 8012c42:	1a9b      	subs	r3, r3, r2
 8012c44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c48:	ee01 3a90 	vmov	s3, r3
 8012c4c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c50:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012c54:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8012c58:	ee61 1a84 	vmul.f32	s3, s3, s8
 8012c5c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012c60:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012c64:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012c68:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012c6a:	694a      	ldr	r2, [r1, #20]
 8012c6c:	1b13      	subs	r3, r2, r4
 8012c6e:	ee03 3a10 	vmov	s6, r3
 8012c72:	680b      	ldr	r3, [r1, #0]
 8012c74:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012c78:	1b1b      	subs	r3, r3, r4
 8012c7a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8012c7e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012c82:	ee03 3a10 	vmov	s6, r3
 8012c86:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012c8a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8012c8e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012c92:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012c96:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8012c9a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8012c9e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8012ca2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8012ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012caa:	dd13      	ble.n	8012cd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8012cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cb0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8012cb4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012cb6:	eee3 7a87 	vfma.f32	s15, s7, s14
 8012cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc2:	dd15      	ble.n	8012cf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8012cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cc8:	6403      	str	r3, [r0, #64]	; 0x40
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	4623      	mov	r3, r4
 8012cce:	e6fd      	b.n	8012acc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012cd0:	462a      	mov	r2, r5
 8012cd2:	e706      	b.n	8012ae2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012cd4:	d502      	bpl.n	8012cdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8012cd6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012cda:	e7e9      	b.n	8012cb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8012cdc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8012ce0:	eea3 2a85 	vfma.f32	s4, s7, s10
 8012ce4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8012ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cec:	dade      	bge.n	8012cac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8012cee:	e7f2      	b.n	8012cd6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8012cf0:	d502      	bpl.n	8012cf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8012cf2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012cf6:	e7e7      	b.n	8012cc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8012cf8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8012cfc:	eee3 4a86 	vfma.f32	s9, s7, s12
 8012d00:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8012d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d08:	dadc      	bge.n	8012cc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8012d0a:	e7f2      	b.n	8012cf2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8012d0c:	3d800000 	.word	0x3d800000

08012d10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8012d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d14:	f04f 0814 	mov.w	r8, #20
 8012d18:	4604      	mov	r4, r0
 8012d1a:	4617      	mov	r7, r2
 8012d1c:	460d      	mov	r5, r1
 8012d1e:	fb08 f903 	mul.w	r9, r8, r3
 8012d22:	461e      	mov	r6, r3
 8012d24:	eb02 0a09 	add.w	sl, r2, r9
 8012d28:	f8da 0004 	ldr.w	r0, [sl, #4]
 8012d2c:	f7ff fe88 	bl	8012a40 <_ZN8touchgfx8ceil28_4El>
 8012d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d32:	6160      	str	r0, [r4, #20]
 8012d34:	fb08 f803 	mul.w	r8, r8, r3
 8012d38:	9001      	str	r0, [sp, #4]
 8012d3a:	eb07 0b08 	add.w	fp, r7, r8
 8012d3e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012d42:	f7ff fe7d 	bl	8012a40 <_ZN8touchgfx8ceil28_4El>
 8012d46:	9a01      	ldr	r2, [sp, #4]
 8012d48:	1a80      	subs	r0, r0, r2
 8012d4a:	61a0      	str	r0, [r4, #24]
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	f000 8088 	beq.w	8012e62 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8012d52:	f857 3009 	ldr.w	r3, [r7, r9]
 8012d56:	f857 c008 	ldr.w	ip, [r7, r8]
 8012d5a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012d5e:	ebac 0c03 	sub.w	ip, ip, r3
 8012d62:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012d66:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8012d6a:	1a40      	subs	r0, r0, r1
 8012d6c:	fb0b f202 	mul.w	r2, fp, r2
 8012d70:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8012d74:	fb0c 2211 	mls	r2, ip, r1, r2
 8012d78:	4641      	mov	r1, r8
 8012d7a:	fb00 2003 	mla	r0, r0, r3, r2
 8012d7e:	f104 0310 	add.w	r3, r4, #16
 8012d82:	4622      	mov	r2, r4
 8012d84:	3801      	subs	r0, #1
 8012d86:	4440      	add	r0, r8
 8012d88:	f7ff fe6a 	bl	8012a60 <_ZN8touchgfx11floorDivModEllRlS0_>
 8012d8c:	f104 0308 	add.w	r3, r4, #8
 8012d90:	1d22      	adds	r2, r4, #4
 8012d92:	4641      	mov	r1, r8
 8012d94:	4658      	mov	r0, fp
 8012d96:	f7ff fe63 	bl	8012a60 <_ZN8touchgfx11floorDivModEllRlS0_>
 8012d9a:	f8c4 800c 	str.w	r8, [r4, #12]
 8012d9e:	6962      	ldr	r2, [r4, #20]
 8012da0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012da4:	eddf 6a31 	vldr	s13, [pc, #196]	; 8012e6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8012da8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8012dac:	6822      	ldr	r2, [r4, #0]
 8012dae:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8012db2:	ee07 3a10 	vmov	s14, r3
 8012db6:	f857 3009 	ldr.w	r3, [r7, r9]
 8012dba:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8012dbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012dc2:	ee07 3a90 	vmov	s15, r3
 8012dc6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8012dca:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012dd6:	edd3 6a00 	vldr	s13, [r3]
 8012dda:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012dde:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012de2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012de6:	edc4 6a07 	vstr	s13, [r4, #28]
 8012dea:	edd4 6a01 	vldr	s13, [r4, #4]
 8012dee:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8012df2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012df6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8012dfa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012dfe:	ed84 6a08 	vstr	s12, [r4, #32]
 8012e02:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8012e04:	6262      	str	r2, [r4, #36]	; 0x24
 8012e06:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8012e0a:	ed93 6a03 	vldr	s12, [r3, #12]
 8012e0e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012e12:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8012e16:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012e1a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8012e1e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8012e22:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8012e26:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012e2a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8012e2e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8012e30:	6322      	str	r2, [r4, #48]	; 0x30
 8012e32:	ed93 6a06 	vldr	s12, [r3, #24]
 8012e36:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8012e3a:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012e3e:	eeb0 7a46 	vmov.f32	s14, s12
 8012e42:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8012e46:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012e4a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8012e4e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8012e52:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8012e56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012e5a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8012e5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012e60:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012e62:	4620      	mov	r0, r4
 8012e64:	b003      	add	sp, #12
 8012e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6a:	bf00      	nop
 8012e6c:	3d800000 	.word	0x3d800000

08012e70 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8012e70:	4602      	mov	r2, r0
 8012e72:	b148      	cbz	r0, 8012e88 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8012e74:	2300      	movs	r3, #0
 8012e76:	b298      	uxth	r0, r3
 8012e78:	3301      	adds	r3, #1
 8012e7a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8012e7e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8012e82:	2900      	cmp	r1, #0
 8012e84:	d1f7      	bne.n	8012e76 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8012e86:	4770      	bx	lr
 8012e88:	4770      	bx	lr

08012e8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8012e8a:	b530      	push	{r4, r5, lr}
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	b159      	cbz	r1, 8012ea8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8012e90:	b148      	cbz	r0, 8012ea6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8012e92:	2300      	movs	r3, #0
 8012e94:	b298      	uxth	r0, r3
 8012e96:	4282      	cmp	r2, r0
 8012e98:	d905      	bls.n	8012ea6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8012e9a:	5ccd      	ldrb	r5, [r1, r3]
 8012e9c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	2d00      	cmp	r5, #0
 8012ea4:	d1f6      	bne.n	8012e94 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8012ea6:	bd30      	pop	{r4, r5, pc}
 8012ea8:	4608      	mov	r0, r1
 8012eaa:	e7fc      	b.n	8012ea6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08012eac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8012eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eae:	468c      	mov	ip, r1
 8012eb0:	b08b      	sub	sp, #44	; 0x2c
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	ae01      	add	r6, sp, #4
 8012eb6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012eba:	211f      	movs	r1, #31
 8012ebc:	fbb0 f7f3 	udiv	r7, r0, r3
 8012ec0:	fb03 0517 	mls	r5, r3, r7, r0
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	b2ec      	uxtb	r4, r5
 8012ec8:	2d09      	cmp	r5, #9
 8012eca:	bfd4      	ite	le
 8012ecc:	3430      	addle	r4, #48	; 0x30
 8012ece:	3457      	addgt	r4, #87	; 0x57
 8012ed0:	b2e4      	uxtb	r4, r4
 8012ed2:	558c      	strb	r4, [r1, r6]
 8012ed4:	1e4c      	subs	r4, r1, #1
 8012ed6:	b92f      	cbnz	r7, 8012ee4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8012ed8:	4431      	add	r1, r6
 8012eda:	4660      	mov	r0, ip
 8012edc:	f7ff ffd5 	bl	8012e8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8012ee0:	b00b      	add	sp, #44	; 0x2c
 8012ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	e7e9      	b.n	8012ebc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08012ee8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8012ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eea:	4607      	mov	r7, r0
 8012eec:	b08b      	sub	sp, #44	; 0x2c
 8012eee:	4608      	mov	r0, r1
 8012ef0:	b341      	cbz	r1, 8012f44 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012ef2:	1e99      	subs	r1, r3, #2
 8012ef4:	2922      	cmp	r1, #34	; 0x22
 8012ef6:	d825      	bhi.n	8012f44 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012ef8:	2100      	movs	r1, #0
 8012efa:	463c      	mov	r4, r7
 8012efc:	261f      	movs	r6, #31
 8012efe:	f10d 0c04 	add.w	ip, sp, #4
 8012f02:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012f06:	1e71      	subs	r1, r6, #1
 8012f08:	fb94 fef3 	sdiv	lr, r4, r3
 8012f0c:	fb03 441e 	mls	r4, r3, lr, r4
 8012f10:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8012f14:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8012f18:	b2ec      	uxtb	r4, r5
 8012f1a:	2d09      	cmp	r5, #9
 8012f1c:	bfd4      	ite	le
 8012f1e:	3430      	addle	r4, #48	; 0x30
 8012f20:	3457      	addgt	r4, #87	; 0x57
 8012f22:	b2e4      	uxtb	r4, r4
 8012f24:	f80c 4006 	strb.w	r4, [ip, r6]
 8012f28:	4674      	mov	r4, lr
 8012f2a:	b96c      	cbnz	r4, 8012f48 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8012f2c:	2f00      	cmp	r7, #0
 8012f2e:	da05      	bge.n	8012f3c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8012f30:	ab0a      	add	r3, sp, #40	; 0x28
 8012f32:	4419      	add	r1, r3
 8012f34:	232d      	movs	r3, #45	; 0x2d
 8012f36:	f801 3c24 	strb.w	r3, [r1, #-36]
 8012f3a:	1eb1      	subs	r1, r6, #2
 8012f3c:	3101      	adds	r1, #1
 8012f3e:	4461      	add	r1, ip
 8012f40:	f7ff ffa3 	bl	8012e8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8012f44:	b00b      	add	sp, #44	; 0x2c
 8012f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f48:	460e      	mov	r6, r1
 8012f4a:	e7dc      	b.n	8012f06 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08012f4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8012f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f50:	b085      	sub	sp, #20
 8012f52:	4691      	mov	r9, r2
 8012f54:	6802      	ldr	r2, [r0, #0]
 8012f56:	4688      	mov	r8, r1
 8012f58:	461c      	mov	r4, r3
 8012f5a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8012f5e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8012f62:	4683      	mov	fp, r0
 8012f64:	4610      	mov	r0, r2
 8012f66:	9103      	str	r1, [sp, #12]
 8012f68:	9302      	str	r3, [sp, #8]
 8012f6a:	9201      	str	r2, [sp, #4]
 8012f6c:	f7ff ff80 	bl	8012e70 <_ZN8touchgfx7Unicode6strlenEPKt>
 8012f70:	f1b8 0f00 	cmp.w	r8, #0
 8012f74:	bf0c      	ite	eq
 8012f76:	4684      	moveq	ip, r0
 8012f78:	f100 0c01 	addne.w	ip, r0, #1
 8012f7c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8012f80:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8012f84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012f86:	fa1f fc8c 	uxth.w	ip, ip
 8012f8a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012f8c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8012f90:	9903      	ldr	r1, [sp, #12]
 8012f92:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012f96:	d041      	beq.n	801301c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8012f98:	d834      	bhi.n	8013004 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8012f9a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8012f9e:	d059      	beq.n	8013054 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8012fa0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8012fa4:	d03a      	beq.n	801301c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8012fa6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8012faa:	d034      	beq.n	8013016 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8012fac:	2400      	movs	r4, #0
 8012fae:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8012fb2:	3a01      	subs	r2, #1
 8012fb4:	b169      	cbz	r1, 8012fd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012fb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012fb8:	458c      	cmp	ip, r1
 8012fba:	da09      	bge.n	8012fd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8012fbc:	eba1 010c 	sub.w	r1, r1, ip
 8012fc0:	b289      	uxth	r1, r1
 8012fc2:	b933      	cbnz	r3, 8012fd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012fc4:	2e00      	cmp	r6, #0
 8012fc6:	d051      	beq.n	801306c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d04f      	beq.n	801306c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8012fcc:	440c      	add	r4, r1
 8012fce:	b2a4      	uxth	r4, r4
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	682b      	ldr	r3, [r5, #0]
 8012fd4:	4293      	cmp	r3, r2
 8012fd6:	da07      	bge.n	8012fe8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8012fd8:	f1b8 0f00 	cmp.w	r8, #0
 8012fdc:	d004      	beq.n	8012fe8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8012fde:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8012fe2:	682b      	ldr	r3, [r5, #0]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	602b      	str	r3, [r5, #0]
 8012fe8:	2730      	movs	r7, #48	; 0x30
 8012fea:	2c00      	cmp	r4, #0
 8012fec:	d04e      	beq.n	801308c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8012fee:	682e      	ldr	r6, [r5, #0]
 8012ff0:	3c01      	subs	r4, #1
 8012ff2:	42b2      	cmp	r2, r6
 8012ff4:	b2a4      	uxth	r4, r4
 8012ff6:	dd49      	ble.n	801308c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8012ff8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	3301      	adds	r3, #1
 8013000:	602b      	str	r3, [r5, #0]
 8013002:	e7f2      	b.n	8012fea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8013004:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8013008:	d01d      	beq.n	8013046 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801300a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801300e:	d002      	beq.n	8013016 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8013010:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8013014:	e7c9      	b.n	8012faa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8013016:	4684      	mov	ip, r0
 8013018:	f04f 0800 	mov.w	r8, #0
 801301c:	2c00      	cmp	r4, #0
 801301e:	d0c6      	beq.n	8012fae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8013020:	b947      	cbnz	r7, 8013034 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8013022:	2801      	cmp	r0, #1
 8013024:	d106      	bne.n	8013034 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8013026:	8814      	ldrh	r4, [r2, #0]
 8013028:	2c30      	cmp	r4, #48	; 0x30
 801302a:	bf02      	ittt	eq
 801302c:	3202      	addeq	r2, #2
 801302e:	4638      	moveq	r0, r7
 8013030:	f8cb 2000 	streq.w	r2, [fp]
 8013034:	45bc      	cmp	ip, r7
 8013036:	da14      	bge.n	8013062 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8013038:	b2bf      	uxth	r7, r7
 801303a:	eba7 040c 	sub.w	r4, r7, ip
 801303e:	46bc      	mov	ip, r7
 8013040:	b2a4      	uxth	r4, r4
 8013042:	2600      	movs	r6, #0
 8013044:	e7b3      	b.n	8012fae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8013046:	4684      	mov	ip, r0
 8013048:	b16c      	cbz	r4, 8013066 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801304a:	42b8      	cmp	r0, r7
 801304c:	dd00      	ble.n	8013050 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801304e:	b2b8      	uxth	r0, r7
 8013050:	2400      	movs	r4, #0
 8013052:	e003      	b.n	801305c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8013054:	f04f 0c01 	mov.w	ip, #1
 8013058:	2400      	movs	r4, #0
 801305a:	4660      	mov	r0, ip
 801305c:	4626      	mov	r6, r4
 801305e:	46a0      	mov	r8, r4
 8013060:	e7a5      	b.n	8012fae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8013062:	2400      	movs	r4, #0
 8013064:	e7ed      	b.n	8013042 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8013066:	4626      	mov	r6, r4
 8013068:	46a0      	mov	r8, r4
 801306a:	e7a0      	b.n	8012fae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801306c:	2900      	cmp	r1, #0
 801306e:	d0b0      	beq.n	8012fd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013070:	2720      	movs	r7, #32
 8013072:	682e      	ldr	r6, [r5, #0]
 8013074:	2900      	cmp	r1, #0
 8013076:	d0ac      	beq.n	8012fd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013078:	3901      	subs	r1, #1
 801307a:	4296      	cmp	r6, r2
 801307c:	b289      	uxth	r1, r1
 801307e:	daa7      	bge.n	8012fd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8013080:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8013084:	682b      	ldr	r3, [r5, #0]
 8013086:	3301      	adds	r3, #1
 8013088:	602b      	str	r3, [r5, #0]
 801308a:	e7f2      	b.n	8013072 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801308c:	b188      	cbz	r0, 80130b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801308e:	682b      	ldr	r3, [r5, #0]
 8013090:	3801      	subs	r0, #1
 8013092:	429a      	cmp	r2, r3
 8013094:	b280      	uxth	r0, r0
 8013096:	dd0c      	ble.n	80130b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8013098:	f8db 3000 	ldr.w	r3, [fp]
 801309c:	1c9c      	adds	r4, r3, #2
 801309e:	f8cb 4000 	str.w	r4, [fp]
 80130a2:	881c      	ldrh	r4, [r3, #0]
 80130a4:	682b      	ldr	r3, [r5, #0]
 80130a6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80130aa:	682b      	ldr	r3, [r5, #0]
 80130ac:	3301      	adds	r3, #1
 80130ae:	602b      	str	r3, [r5, #0]
 80130b0:	e7ec      	b.n	801308c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80130b2:	2620      	movs	r6, #32
 80130b4:	b151      	cbz	r1, 80130cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80130b6:	6828      	ldr	r0, [r5, #0]
 80130b8:	3901      	subs	r1, #1
 80130ba:	4282      	cmp	r2, r0
 80130bc:	b289      	uxth	r1, r1
 80130be:	dd05      	ble.n	80130cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80130c0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80130c4:	682b      	ldr	r3, [r5, #0]
 80130c6:	3301      	adds	r3, #1
 80130c8:	602b      	str	r3, [r5, #0]
 80130ca:	e7f3      	b.n	80130b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80130cc:	b005      	add	sp, #20
 80130ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080130d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80130d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130d6:	2400      	movs	r4, #0
 80130d8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80130dc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80130e0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 80130e4:	8014      	strh	r4, [r2, #0]
 80130e6:	701c      	strb	r4, [r3, #0]
 80130e8:	f888 4000 	strb.w	r4, [r8]
 80130ec:	f88c 4000 	strb.w	r4, [ip]
 80130f0:	f88e 4000 	strb.w	r4, [lr]
 80130f4:	703c      	strb	r4, [r7, #0]
 80130f6:	6804      	ldr	r4, [r0, #0]
 80130f8:	b1a4      	cbz	r4, 8013124 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80130fa:	8824      	ldrh	r4, [r4, #0]
 80130fc:	f04f 0901 	mov.w	r9, #1
 8013100:	b314      	cbz	r4, 8013148 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8013102:	2c2b      	cmp	r4, #43	; 0x2b
 8013104:	d001      	beq.n	801310a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8013106:	2c20      	cmp	r4, #32
 8013108:	d110      	bne.n	801312c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801310a:	8014      	strh	r4, [r2, #0]
 801310c:	6804      	ldr	r4, [r0, #0]
 801310e:	b10c      	cbz	r4, 8013114 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8013110:	3402      	adds	r4, #2
 8013112:	6004      	str	r4, [r0, #0]
 8013114:	680c      	ldr	r4, [r1, #0]
 8013116:	b10c      	cbz	r4, 801311c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8013118:	3401      	adds	r4, #1
 801311a:	600c      	str	r4, [r1, #0]
 801311c:	6804      	ldr	r4, [r0, #0]
 801311e:	b17c      	cbz	r4, 8013140 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8013120:	8824      	ldrh	r4, [r4, #0]
 8013122:	e7ed      	b.n	8013100 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8013124:	680c      	ldr	r4, [r1, #0]
 8013126:	b17c      	cbz	r4, 8013148 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8013128:	7824      	ldrb	r4, [r4, #0]
 801312a:	e7e7      	b.n	80130fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801312c:	2c2d      	cmp	r4, #45	; 0x2d
 801312e:	d102      	bne.n	8013136 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8013130:	f883 9000 	strb.w	r9, [r3]
 8013134:	e7ea      	b.n	801310c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8013136:	2c23      	cmp	r4, #35	; 0x23
 8013138:	d107      	bne.n	801314a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801313a:	f888 9000 	strb.w	r9, [r8]
 801313e:	e7e5      	b.n	801310c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8013140:	680c      	ldr	r4, [r1, #0]
 8013142:	b10c      	cbz	r4, 8013148 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8013144:	7824      	ldrb	r4, [r4, #0]
 8013146:	e7db      	b.n	8013100 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8013148:	2400      	movs	r4, #0
 801314a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801314e:	2b09      	cmp	r3, #9
 8013150:	d901      	bls.n	8013156 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8013152:	2c2a      	cmp	r4, #42	; 0x2a
 8013154:	d122      	bne.n	801319c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8013156:	2301      	movs	r3, #1
 8013158:	2c30      	cmp	r4, #48	; 0x30
 801315a:	f88e 3000 	strb.w	r3, [lr]
 801315e:	d10d      	bne.n	801317c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8013160:	f88c 3000 	strb.w	r3, [ip]
 8013164:	6803      	ldr	r3, [r0, #0]
 8013166:	b10b      	cbz	r3, 801316c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8013168:	3302      	adds	r3, #2
 801316a:	6003      	str	r3, [r0, #0]
 801316c:	680b      	ldr	r3, [r1, #0]
 801316e:	b10b      	cbz	r3, 8013174 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8013170:	3301      	adds	r3, #1
 8013172:	600b      	str	r3, [r1, #0]
 8013174:	6803      	ldr	r3, [r0, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d02f      	beq.n	80131da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801317a:	881c      	ldrh	r4, [r3, #0]
 801317c:	2c2a      	cmp	r4, #42	; 0x2a
 801317e:	d135      	bne.n	80131ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8013180:	f04f 33ff 	mov.w	r3, #4294967295
 8013184:	6033      	str	r3, [r6, #0]
 8013186:	6803      	ldr	r3, [r0, #0]
 8013188:	b10b      	cbz	r3, 801318e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801318a:	3302      	adds	r3, #2
 801318c:	6003      	str	r3, [r0, #0]
 801318e:	680b      	ldr	r3, [r1, #0]
 8013190:	b10b      	cbz	r3, 8013196 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8013192:	3301      	adds	r3, #1
 8013194:	600b      	str	r3, [r1, #0]
 8013196:	6803      	ldr	r3, [r0, #0]
 8013198:	b31b      	cbz	r3, 80131e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801319a:	881c      	ldrh	r4, [r3, #0]
 801319c:	2c2e      	cmp	r4, #46	; 0x2e
 801319e:	d11a      	bne.n	80131d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80131a0:	2301      	movs	r3, #1
 80131a2:	703b      	strb	r3, [r7, #0]
 80131a4:	6803      	ldr	r3, [r0, #0]
 80131a6:	b10b      	cbz	r3, 80131ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80131a8:	3302      	adds	r3, #2
 80131aa:	6003      	str	r3, [r0, #0]
 80131ac:	680b      	ldr	r3, [r1, #0]
 80131ae:	b10b      	cbz	r3, 80131b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80131b0:	3301      	adds	r3, #1
 80131b2:	600b      	str	r3, [r1, #0]
 80131b4:	6803      	ldr	r3, [r0, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d036      	beq.n	8013228 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80131ba:	881b      	ldrh	r3, [r3, #0]
 80131bc:	2b2a      	cmp	r3, #42	; 0x2a
 80131be:	d137      	bne.n	8013230 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80131c0:	f04f 33ff 	mov.w	r3, #4294967295
 80131c4:	602b      	str	r3, [r5, #0]
 80131c6:	6803      	ldr	r3, [r0, #0]
 80131c8:	b10b      	cbz	r3, 80131ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80131ca:	3302      	adds	r3, #2
 80131cc:	6003      	str	r3, [r0, #0]
 80131ce:	680b      	ldr	r3, [r1, #0]
 80131d0:	b10b      	cbz	r3, 80131d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80131d2:	3301      	adds	r3, #1
 80131d4:	600b      	str	r3, [r1, #0]
 80131d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131da:	680c      	ldr	r4, [r1, #0]
 80131dc:	b134      	cbz	r4, 80131ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80131de:	7824      	ldrb	r4, [r4, #0]
 80131e0:	e7cc      	b.n	801317c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80131e2:	680b      	ldr	r3, [r1, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d0f6      	beq.n	80131d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80131e8:	781c      	ldrb	r4, [r3, #0]
 80131ea:	e7d7      	b.n	801319c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80131ec:	2300      	movs	r3, #0
 80131ee:	220a      	movs	r2, #10
 80131f0:	6033      	str	r3, [r6, #0]
 80131f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80131f6:	fa1f f38c 	uxth.w	r3, ip
 80131fa:	2b09      	cmp	r3, #9
 80131fc:	d8ce      	bhi.n	801319c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80131fe:	6833      	ldr	r3, [r6, #0]
 8013200:	fb02 c303 	mla	r3, r2, r3, ip
 8013204:	6033      	str	r3, [r6, #0]
 8013206:	6803      	ldr	r3, [r0, #0]
 8013208:	b10b      	cbz	r3, 801320e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801320a:	3302      	adds	r3, #2
 801320c:	6003      	str	r3, [r0, #0]
 801320e:	680b      	ldr	r3, [r1, #0]
 8013210:	b10b      	cbz	r3, 8013216 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8013212:	3301      	adds	r3, #1
 8013214:	600b      	str	r3, [r1, #0]
 8013216:	6803      	ldr	r3, [r0, #0]
 8013218:	b10b      	cbz	r3, 801321e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801321a:	881c      	ldrh	r4, [r3, #0]
 801321c:	e7e9      	b.n	80131f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801321e:	680c      	ldr	r4, [r1, #0]
 8013220:	2c00      	cmp	r4, #0
 8013222:	d0e6      	beq.n	80131f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8013224:	7824      	ldrb	r4, [r4, #0]
 8013226:	e7e4      	b.n	80131f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8013228:	680b      	ldr	r3, [r1, #0]
 801322a:	b10b      	cbz	r3, 8013230 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	e7c5      	b.n	80131bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8013230:	2200      	movs	r2, #0
 8013232:	240a      	movs	r4, #10
 8013234:	602a      	str	r2, [r5, #0]
 8013236:	3b30      	subs	r3, #48	; 0x30
 8013238:	682a      	ldr	r2, [r5, #0]
 801323a:	b29e      	uxth	r6, r3
 801323c:	2e09      	cmp	r6, #9
 801323e:	d813      	bhi.n	8013268 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8013240:	fb04 3302 	mla	r3, r4, r2, r3
 8013244:	602b      	str	r3, [r5, #0]
 8013246:	6803      	ldr	r3, [r0, #0]
 8013248:	b10b      	cbz	r3, 801324e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801324a:	3302      	adds	r3, #2
 801324c:	6003      	str	r3, [r0, #0]
 801324e:	680b      	ldr	r3, [r1, #0]
 8013250:	b10b      	cbz	r3, 8013256 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8013252:	3301      	adds	r3, #1
 8013254:	600b      	str	r3, [r1, #0]
 8013256:	6803      	ldr	r3, [r0, #0]
 8013258:	b10b      	cbz	r3, 801325e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	e7eb      	b.n	8013236 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801325e:	680b      	ldr	r3, [r1, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d0e8      	beq.n	8013236 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	e7e6      	b.n	8013236 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8013268:	2a06      	cmp	r2, #6
 801326a:	bfa8      	it	ge
 801326c:	2206      	movge	r2, #6
 801326e:	602a      	str	r2, [r5, #0]
 8013270:	e7b1      	b.n	80131d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08013272 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8013272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013276:	b0a3      	sub	sp, #140	; 0x8c
 8013278:	2600      	movs	r6, #0
 801327a:	4607      	mov	r7, r0
 801327c:	4688      	mov	r8, r1
 801327e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8013282:	4631      	mov	r1, r6
 8013284:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8013286:	4648      	mov	r0, r9
 8013288:	960d      	str	r6, [sp, #52]	; 0x34
 801328a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801328e:	2242      	movs	r2, #66	; 0x42
 8013290:	f009 f898 	bl	801c3c4 <memset>
 8013294:	b15f      	cbz	r7, 80132ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8013296:	f108 3aff 	add.w	sl, r8, #4294967295
 801329a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801329c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801329e:	b152      	cbz	r2, 80132b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80132a0:	8812      	ldrh	r2, [r2, #0]
 80132a2:	b10a      	cbz	r2, 80132a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80132a4:	459a      	cmp	sl, r3
 80132a6:	dc2e      	bgt.n	8013306 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80132a8:	2200      	movs	r2, #0
 80132aa:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80132ae:	4638      	mov	r0, r7
 80132b0:	b023      	add	sp, #140	; 0x8c
 80132b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b6:	9a08      	ldr	r2, [sp, #32]
 80132b8:	2a00      	cmp	r2, #0
 80132ba:	d0f5      	beq.n	80132a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80132bc:	7812      	ldrb	r2, [r2, #0]
 80132be:	e7f0      	b.n	80132a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80132c0:	2d00      	cmp	r5, #0
 80132c2:	d0ea      	beq.n	801329a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80132c4:	782a      	ldrb	r2, [r5, #0]
 80132c6:	b142      	cbz	r2, 80132da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80132c8:	2a25      	cmp	r2, #37	; 0x25
 80132ca:	d001      	beq.n	80132d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80132cc:	459a      	cmp	sl, r3
 80132ce:	dc08      	bgt.n	80132e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80132d0:	f1bb 0f00 	cmp.w	fp, #0
 80132d4:	d121      	bne.n	801331a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80132d6:	2d00      	cmp	r5, #0
 80132d8:	d0df      	beq.n	801329a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80132da:	782a      	ldrb	r2, [r5, #0]
 80132dc:	f04f 0b00 	mov.w	fp, #0
 80132e0:	e01d      	b.n	801331e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80132e2:	f1bb 0f00 	cmp.w	fp, #0
 80132e6:	d077      	beq.n	80133d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 80132e8:	f8bb 2000 	ldrh.w	r2, [fp]
 80132ec:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80132f0:	f1bb 0f00 	cmp.w	fp, #0
 80132f4:	d002      	beq.n	80132fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80132f6:	f10b 0202 	add.w	r2, fp, #2
 80132fa:	9209      	str	r2, [sp, #36]	; 0x24
 80132fc:	b10d      	cbz	r5, 8013302 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80132fe:	3501      	adds	r5, #1
 8013300:	9508      	str	r5, [sp, #32]
 8013302:	3301      	adds	r3, #1
 8013304:	930d      	str	r3, [sp, #52]	; 0x34
 8013306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013308:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801330c:	f1bb 0f00 	cmp.w	fp, #0
 8013310:	d0d6      	beq.n	80132c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8013312:	f8bb 2000 	ldrh.w	r2, [fp]
 8013316:	2a00      	cmp	r2, #0
 8013318:	d1d6      	bne.n	80132c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801331a:	f8bb 2000 	ldrh.w	r2, [fp]
 801331e:	2a00      	cmp	r2, #0
 8013320:	d0bb      	beq.n	801329a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013322:	459a      	cmp	sl, r3
 8013324:	ddb9      	ble.n	801329a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013326:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801332a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801332e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8013332:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8013336:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801333a:	960e      	str	r6, [sp, #56]	; 0x38
 801333c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8013340:	960f      	str	r6, [sp, #60]	; 0x3c
 8013342:	f1bb 0f00 	cmp.w	fp, #0
 8013346:	d002      	beq.n	801334e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8013348:	f10b 0302 	add.w	r3, fp, #2
 801334c:	9309      	str	r3, [sp, #36]	; 0x24
 801334e:	b10d      	cbz	r5, 8013354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8013350:	1c6b      	adds	r3, r5, #1
 8013352:	9308      	str	r3, [sp, #32]
 8013354:	ab0f      	add	r3, sp, #60	; 0x3c
 8013356:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801335a:	a908      	add	r1, sp, #32
 801335c:	a809      	add	r0, sp, #36	; 0x24
 801335e:	9305      	str	r3, [sp, #20]
 8013360:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8013364:	9304      	str	r3, [sp, #16]
 8013366:	ab0e      	add	r3, sp, #56	; 0x38
 8013368:	9303      	str	r3, [sp, #12]
 801336a:	ab0c      	add	r3, sp, #48	; 0x30
 801336c:	9302      	str	r3, [sp, #8]
 801336e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8013372:	9301      	str	r3, [sp, #4]
 8013374:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013378:	9300      	str	r3, [sp, #0]
 801337a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801337e:	f7ff fea8 	bl	80130d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8013382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013384:	2b00      	cmp	r3, #0
 8013386:	bfbf      	itttt	lt
 8013388:	6823      	ldrlt	r3, [r4, #0]
 801338a:	3404      	addlt	r4, #4
 801338c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8013390:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013394:	2b00      	cmp	r3, #0
 8013396:	bfbe      	ittt	lt
 8013398:	6823      	ldrlt	r3, [r4, #0]
 801339a:	3404      	addlt	r4, #4
 801339c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80133a0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80133a4:	bfb8      	it	lt
 80133a6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80133a8:	b1d9      	cbz	r1, 80133e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80133aa:	880b      	ldrh	r3, [r1, #0]
 80133ac:	2b69      	cmp	r3, #105	; 0x69
 80133ae:	d01f      	beq.n	80133f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80133b0:	d82f      	bhi.n	8013412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80133b2:	2b58      	cmp	r3, #88	; 0x58
 80133b4:	d01c      	beq.n	80133f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80133b6:	d818      	bhi.n	80133ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80133b8:	2b25      	cmp	r3, #37	; 0x25
 80133ba:	d034      	beq.n	8013426 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80133bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133be:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80133c2:	f1bb 0f00 	cmp.w	fp, #0
 80133c6:	f000 80b7 	beq.w	8013538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80133ca:	f8bb 5000 	ldrh.w	r5, [fp]
 80133ce:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80133d2:	3301      	adds	r3, #1
 80133d4:	930d      	str	r3, [sp, #52]	; 0x34
 80133d6:	e029      	b.n	801342c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80133d8:	b10d      	cbz	r5, 80133de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80133da:	782a      	ldrb	r2, [r5, #0]
 80133dc:	e786      	b.n	80132ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80133de:	462a      	mov	r2, r5
 80133e0:	e784      	b.n	80132ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80133e2:	2a00      	cmp	r2, #0
 80133e4:	d0ea      	beq.n	80133bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80133e6:	7813      	ldrb	r3, [r2, #0]
 80133e8:	e7e0      	b.n	80133ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 80133ea:	3b63      	subs	r3, #99	; 0x63
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d8e5      	bhi.n	80133bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80133f0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80133f4:	b329      	cbz	r1, 8013442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 80133f6:	880b      	ldrh	r3, [r1, #0]
 80133f8:	2b69      	cmp	r3, #105	; 0x69
 80133fa:	d063      	beq.n	80134c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80133fc:	d825      	bhi.n	801344a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 80133fe:	2b63      	cmp	r3, #99	; 0x63
 8013400:	d038      	beq.n	8013474 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8013402:	2b64      	cmp	r3, #100	; 0x64
 8013404:	d05e      	beq.n	80134c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8013406:	2b58      	cmp	r3, #88	; 0x58
 8013408:	d07a      	beq.n	8013500 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801340a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801340e:	4625      	mov	r5, r4
 8013410:	e036      	b.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013412:	2b73      	cmp	r3, #115	; 0x73
 8013414:	d0ec      	beq.n	80133f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8013416:	d802      	bhi.n	801341e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8013418:	2b6f      	cmp	r3, #111	; 0x6f
 801341a:	d1cf      	bne.n	80133bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801341c:	e7e8      	b.n	80133f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801341e:	2b75      	cmp	r3, #117	; 0x75
 8013420:	d0e6      	beq.n	80133f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8013422:	2b78      	cmp	r3, #120	; 0x78
 8013424:	e7f9      	b.n	801341a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8013426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013428:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801342c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801342e:	b10b      	cbz	r3, 8013434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8013430:	3302      	adds	r3, #2
 8013432:	9309      	str	r3, [sp, #36]	; 0x24
 8013434:	9b08      	ldr	r3, [sp, #32]
 8013436:	2b00      	cmp	r3, #0
 8013438:	f43f af2f 	beq.w	801329a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801343c:	3301      	adds	r3, #1
 801343e:	9308      	str	r3, [sp, #32]
 8013440:	e72b      	b.n	801329a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013442:	2a00      	cmp	r2, #0
 8013444:	d0e1      	beq.n	801340a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8013446:	7813      	ldrb	r3, [r2, #0]
 8013448:	e7d6      	b.n	80133f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801344a:	2b73      	cmp	r3, #115	; 0x73
 801344c:	d036      	beq.n	80134bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801344e:	d807      	bhi.n	8013460 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8013450:	2b6f      	cmp	r3, #111	; 0x6f
 8013452:	d1da      	bne.n	801340a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8013454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013456:	1d25      	adds	r5, r4, #4
 8013458:	2308      	movs	r3, #8
 801345a:	eba8 0202 	sub.w	r2, r8, r2
 801345e:	e049      	b.n	80134f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8013460:	2b75      	cmp	r3, #117	; 0x75
 8013462:	d042      	beq.n	80134ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8013464:	2b78      	cmp	r3, #120	; 0x78
 8013466:	d1d0      	bne.n	801340a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8013468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801346a:	1d25      	adds	r5, r4, #4
 801346c:	2310      	movs	r3, #16
 801346e:	eba8 0202 	sub.w	r2, r8, r2
 8013472:	e03f      	b.n	80134f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8013474:	7823      	ldrb	r3, [r4, #0]
 8013476:	1d25      	adds	r5, r4, #4
 8013478:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801347c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8013480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013482:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8013486:	2b00      	cmp	r3, #0
 8013488:	d051      	beq.n	801352e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801348a:	881a      	ldrh	r2, [r3, #0]
 801348c:	a80d      	add	r0, sp, #52	; 0x34
 801348e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8013492:	462c      	mov	r4, r5
 8013494:	9005      	str	r0, [sp, #20]
 8013496:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801349a:	9004      	str	r0, [sp, #16]
 801349c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801349e:	9003      	str	r0, [sp, #12]
 80134a0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80134a4:	9002      	str	r0, [sp, #8]
 80134a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80134a8:	9001      	str	r0, [sp, #4]
 80134aa:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80134ae:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80134b2:	9000      	str	r0, [sp, #0]
 80134b4:	a810      	add	r0, sp, #64	; 0x40
 80134b6:	f7ff fd49 	bl	8012f4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80134ba:	e7b7      	b.n	801342c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80134bc:	1d25      	adds	r5, r4, #4
 80134be:	6823      	ldr	r3, [r4, #0]
 80134c0:	9310      	str	r3, [sp, #64]	; 0x40
 80134c2:	e7dd      	b.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80134c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134c6:	230a      	movs	r3, #10
 80134c8:	4649      	mov	r1, r9
 80134ca:	6820      	ldr	r0, [r4, #0]
 80134cc:	eba8 0202 	sub.w	r2, r8, r2
 80134d0:	1d25      	adds	r5, r4, #4
 80134d2:	b292      	uxth	r2, r2
 80134d4:	f7ff fd08 	bl	8012ee8 <_ZN8touchgfx7Unicode4itoaElPtti>
 80134d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80134dc:	2b2d      	cmp	r3, #45	; 0x2d
 80134de:	d1cf      	bne.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80134e0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80134e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134e6:	3302      	adds	r3, #2
 80134e8:	e7ea      	b.n	80134c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80134ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134ec:	1d25      	adds	r5, r4, #4
 80134ee:	230a      	movs	r3, #10
 80134f0:	eba8 0202 	sub.w	r2, r8, r2
 80134f4:	b292      	uxth	r2, r2
 80134f6:	4649      	mov	r1, r9
 80134f8:	6820      	ldr	r0, [r4, #0]
 80134fa:	f7ff fcd7 	bl	8012eac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80134fe:	e7bf      	b.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013502:	2310      	movs	r3, #16
 8013504:	4649      	mov	r1, r9
 8013506:	6820      	ldr	r0, [r4, #0]
 8013508:	eba8 0202 	sub.w	r2, r8, r2
 801350c:	1d25      	adds	r5, r4, #4
 801350e:	b292      	uxth	r2, r2
 8013510:	f7ff fccc 	bl	8012eac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8013514:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8013518:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801351c:	2b00      	cmp	r3, #0
 801351e:	d0af      	beq.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013520:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8013524:	2919      	cmp	r1, #25
 8013526:	d8f7      	bhi.n	8013518 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8013528:	3b20      	subs	r3, #32
 801352a:	8013      	strh	r3, [r2, #0]
 801352c:	e7f4      	b.n	8013518 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801352e:	9a08      	ldr	r2, [sp, #32]
 8013530:	2a00      	cmp	r2, #0
 8013532:	d0ab      	beq.n	801348c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8013534:	7812      	ldrb	r2, [r2, #0]
 8013536:	e7a9      	b.n	801348c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8013538:	2d00      	cmp	r5, #0
 801353a:	f43f af48 	beq.w	80133ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801353e:	782d      	ldrb	r5, [r5, #0]
 8013540:	e745      	b.n	80133ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08013542 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8013542:	b507      	push	{r0, r1, r2, lr}
 8013544:	9300      	str	r3, [sp, #0]
 8013546:	4613      	mov	r3, r2
 8013548:	2200      	movs	r2, #0
 801354a:	f7ff fe92 	bl	8013272 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801354e:	b003      	add	sp, #12
 8013550:	f85d fb04 	ldr.w	pc, [sp], #4

08013554 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8013554:	b40c      	push	{r2, r3}
 8013556:	b507      	push	{r0, r1, r2, lr}
 8013558:	ab04      	add	r3, sp, #16
 801355a:	f853 2b04 	ldr.w	r2, [r3], #4
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	f7ff ffef 	bl	8013542 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8013564:	b003      	add	sp, #12
 8013566:	f85d eb04 	ldr.w	lr, [sp], #4
 801356a:	b002      	add	sp, #8
 801356c:	4770      	bx	lr
	...

08013570 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 8013570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013574:	b0c3      	sub	sp, #268	; 0x10c
 8013576:	2600      	movs	r6, #0
 8013578:	4607      	mov	r7, r0
 801357a:	4689      	mov	r9, r1
 801357c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8013580:	4631      	mov	r1, r6
 8013582:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 8013586:	4640      	mov	r0, r8
 8013588:	960c      	str	r6, [sp, #48]	; 0x30
 801358a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801358e:	22c8      	movs	r2, #200	; 0xc8
 8013590:	f008 ff18 	bl	801c3c4 <memset>
 8013594:	b16f      	cbz	r7, 80135b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 8013596:	f04f 0b0a 	mov.w	fp, #10
 801359a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801359c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801359e:	b162      	cbz	r2, 80135ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 80135a0:	8812      	ldrh	r2, [r2, #0]
 80135a2:	b11a      	cbz	r2, 80135ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 80135a4:	f109 31ff 	add.w	r1, r9, #4294967295
 80135a8:	4299      	cmp	r1, r3
 80135aa:	dc26      	bgt.n	80135fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 80135ac:	2200      	movs	r2, #0
 80135ae:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80135b2:	4638      	mov	r0, r7
 80135b4:	b043      	add	sp, #268	; 0x10c
 80135b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ba:	9a08      	ldr	r2, [sp, #32]
 80135bc:	2a00      	cmp	r2, #0
 80135be:	d0f5      	beq.n	80135ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 80135c0:	7812      	ldrb	r2, [r2, #0]
 80135c2:	e7ee      	b.n	80135a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 80135c4:	2c00      	cmp	r4, #0
 80135c6:	d0e8      	beq.n	801359a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80135c8:	7822      	ldrb	r2, [r4, #0]
 80135ca:	b132      	cbz	r2, 80135da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 80135cc:	2a25      	cmp	r2, #37	; 0x25
 80135ce:	d001      	beq.n	80135d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 80135d0:	4299      	cmp	r1, r3
 80135d2:	dc05      	bgt.n	80135e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 80135d4:	b9cd      	cbnz	r5, 801360a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 80135d6:	2c00      	cmp	r4, #0
 80135d8:	d0df      	beq.n	801359a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80135da:	7822      	ldrb	r2, [r4, #0]
 80135dc:	2500      	movs	r5, #0
 80135de:	e015      	b.n	801360c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 80135e0:	2d00      	cmp	r5, #0
 80135e2:	d073      	beq.n	80136cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 80135e4:	882a      	ldrh	r2, [r5, #0]
 80135e6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80135ea:	b10d      	cbz	r5, 80135f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 80135ec:	3502      	adds	r5, #2
 80135ee:	9509      	str	r5, [sp, #36]	; 0x24
 80135f0:	b10c      	cbz	r4, 80135f6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 80135f2:	3401      	adds	r4, #1
 80135f4:	9408      	str	r4, [sp, #32]
 80135f6:	3301      	adds	r3, #1
 80135f8:	930c      	str	r3, [sp, #48]	; 0x30
 80135fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135fc:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8013600:	2d00      	cmp	r5, #0
 8013602:	d0df      	beq.n	80135c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 8013604:	882a      	ldrh	r2, [r5, #0]
 8013606:	2a00      	cmp	r2, #0
 8013608:	d1e0      	bne.n	80135cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801360a:	882a      	ldrh	r2, [r5, #0]
 801360c:	2a00      	cmp	r2, #0
 801360e:	d0c4      	beq.n	801359a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013610:	4299      	cmp	r1, r3
 8013612:	ddc2      	ble.n	801359a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013614:	2300      	movs	r3, #0
 8013616:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801361a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801361e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013622:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8013626:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801362a:	930d      	str	r3, [sp, #52]	; 0x34
 801362c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8013630:	930e      	str	r3, [sp, #56]	; 0x38
 8013632:	b10d      	cbz	r5, 8013638 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 8013634:	1cab      	adds	r3, r5, #2
 8013636:	9309      	str	r3, [sp, #36]	; 0x24
 8013638:	b10c      	cbz	r4, 801363e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801363a:	1c63      	adds	r3, r4, #1
 801363c:	9308      	str	r3, [sp, #32]
 801363e:	ab0e      	add	r3, sp, #56	; 0x38
 8013640:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8013644:	a908      	add	r1, sp, #32
 8013646:	a809      	add	r0, sp, #36	; 0x24
 8013648:	9305      	str	r3, [sp, #20]
 801364a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801364e:	9304      	str	r3, [sp, #16]
 8013650:	ab0d      	add	r3, sp, #52	; 0x34
 8013652:	9303      	str	r3, [sp, #12]
 8013654:	ab0b      	add	r3, sp, #44	; 0x2c
 8013656:	9302      	str	r3, [sp, #8]
 8013658:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801365c:	9301      	str	r3, [sp, #4]
 801365e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8013668:	f7ff fd33 	bl	80130d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801366c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801366e:	2b00      	cmp	r3, #0
 8013670:	da0b      	bge.n	801368a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 8013672:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8013676:	3601      	adds	r6, #1
 8013678:	edd3 7a00 	vldr	s15, [r3]
 801367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013680:	ee17 3a90 	vmov	r3, s15
 8013684:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013688:	930d      	str	r3, [sp, #52]	; 0x34
 801368a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801368c:	2b00      	cmp	r3, #0
 801368e:	da0b      	bge.n	80136a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 8013690:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8013694:	3601      	adds	r6, #1
 8013696:	edd3 7a00 	vldr	s15, [r3]
 801369a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801369e:	ee17 3a90 	vmov	r3, s15
 80136a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136a6:	930e      	str	r3, [sp, #56]	; 0x38
 80136a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136aa:	b1a3      	cbz	r3, 80136d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 80136ac:	881a      	ldrh	r2, [r3, #0]
 80136ae:	2a25      	cmp	r2, #37	; 0x25
 80136b0:	d016      	beq.n	80136e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 80136b2:	2a66      	cmp	r2, #102	; 0x66
 80136b4:	d01a      	beq.n	80136ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 80136b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136b8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80136bc:	2d00      	cmp	r5, #0
 80136be:	f000 80fc 	beq.w	80138ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34a>
 80136c2:	882c      	ldrh	r4, [r5, #0]
 80136c4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80136c8:	3301      	adds	r3, #1
 80136ca:	e00d      	b.n	80136e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 80136cc:	b10c      	cbz	r4, 80136d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 80136ce:	7822      	ldrb	r2, [r4, #0]
 80136d0:	e789      	b.n	80135e6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 80136d2:	4622      	mov	r2, r4
 80136d4:	e787      	b.n	80135e6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 80136d6:	9b08      	ldr	r3, [sp, #32]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d0ec      	beq.n	80136b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 80136dc:	781a      	ldrb	r2, [r3, #0]
 80136de:	e7e6      	b.n	80136ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 80136e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136e2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80136e6:	3302      	adds	r3, #2
 80136e8:	930c      	str	r3, [sp, #48]	; 0x30
 80136ea:	e049      	b.n	8013780 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x210>
 80136ec:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80136f0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80136f4:	3601      	adds	r6, #1
 80136f6:	ed93 7a00 	vldr	s14, [r3]
 80136fa:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80136fe:	b923      	cbnz	r3, 801370a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 8013700:	2301      	movs	r3, #1
 8013702:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8013706:	2306      	movs	r3, #6
 8013708:	930e      	str	r3, [sp, #56]	; 0x38
 801370a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801370e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013716:	bf42      	ittt	mi
 8013718:	eeb1 7a47 	vnegmi.f32	s14, s14
 801371c:	232d      	movmi	r3, #45	; 0x2d
 801371e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 8013722:	ee77 6a67 	vsub.f32	s13, s14, s15
 8013726:	eef4 6a47 	vcmp.f32	s13, s14
 801372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801372e:	d132      	bne.n	8013796 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 8013730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013734:	eef4 7a47 	vcmp.f32	s15, s14
 8013738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801373c:	d12b      	bne.n	8013796 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 801373e:	4b61      	ldr	r3, [pc, #388]	; (80138c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x354>)
 8013740:	9310      	str	r3, [sp, #64]	; 0x40
 8013742:	2366      	movs	r3, #102	; 0x66
 8013744:	9311      	str	r3, [sp, #68]	; 0x44
 8013746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013748:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 80ae 	beq.w	80138ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33e>
 8013752:	881a      	ldrh	r2, [r3, #0]
 8013754:	a80c      	add	r0, sp, #48	; 0x30
 8013756:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801375a:	9005      	str	r0, [sp, #20]
 801375c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 8013760:	9004      	str	r0, [sp, #16]
 8013762:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013764:	9003      	str	r0, [sp, #12]
 8013766:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801376a:	9002      	str	r0, [sp, #8]
 801376c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801376e:	9001      	str	r0, [sp, #4]
 8013770:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8013774:	e9cd 9706 	strd	r9, r7, [sp, #24]
 8013778:	9000      	str	r0, [sp, #0]
 801377a:	a80f      	add	r0, sp, #60	; 0x3c
 801377c:	f7ff fbe6 	bl	8012f4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8013780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013782:	b10b      	cbz	r3, 8013788 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 8013784:	3302      	adds	r3, #2
 8013786:	9309      	str	r3, [sp, #36]	; 0x24
 8013788:	9b08      	ldr	r3, [sp, #32]
 801378a:	2b00      	cmp	r3, #0
 801378c:	f43f af05 	beq.w	801359a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013790:	3301      	adds	r3, #1
 8013792:	9308      	str	r3, [sp, #32]
 8013794:	e701      	b.n	801359a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013796:	eeb4 7a47 	vcmp.f32	s14, s14
 801379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379e:	d10b      	bne.n	80137b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x248>
 80137a0:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80137a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80137a6:	2300      	movs	r3, #0
 80137a8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80138c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>
 80137ac:	4283      	cmp	r3, r0
 80137ae:	da07      	bge.n	80137c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x250>
 80137b0:	eec7 7a86 	vdiv.f32	s15, s15, s12
 80137b4:	3301      	adds	r3, #1
 80137b6:	e7f9      	b.n	80137ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23c>
 80137b8:	4b44      	ldr	r3, [pc, #272]	; (80138cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>)
 80137ba:	9310      	str	r3, [sp, #64]	; 0x40
 80137bc:	236e      	movs	r3, #110	; 0x6e
 80137be:	e7c1      	b.n	8013744 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d4>
 80137c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137c8:	eeb0 7a67 	vmov.f32	s14, s15
 80137cc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80137d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d4:	da27      	bge.n	8013826 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b6>
 80137d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137d8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80137dc:	2100      	movs	r1, #0
 80137de:	eba9 0202 	sub.w	r2, r9, r2
 80137e2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80137e6:	b28c      	uxth	r4, r1
 80137e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ec:	db21      	blt.n	8013832 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 80137ee:	1a53      	subs	r3, r2, r1
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	dd1e      	ble.n	8013832 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 80137f4:	2963      	cmp	r1, #99	; 0x63
 80137f6:	d01b      	beq.n	8013830 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 80137f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80137fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013800:	ee17 3a10 	vmov	r3, s14
 8013804:	2b09      	cmp	r3, #9
 8013806:	bfa8      	it	ge
 8013808:	2309      	movge	r3, #9
 801380a:	ee07 3a10 	vmov	s14, r3
 801380e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013812:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013816:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801381a:	3101      	adds	r1, #1
 801381c:	eee7 7a66 	vfms.f32	s15, s14, s13
 8013820:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8013824:	e7dd      	b.n	80137e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x272>
 8013826:	ee66 6a86 	vmul.f32	s13, s13, s12
 801382a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801382e:	e7cd      	b.n	80137cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x25c>
 8013830:	460c      	mov	r4, r1
 8013832:	2a63      	cmp	r2, #99	; 0x63
 8013834:	bfd4      	ite	le
 8013836:	ebc4 0202 	rsble	r2, r4, r2
 801383a:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801383e:	2a00      	cmp	r2, #0
 8013840:	dd30      	ble.n	80138a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x334>
 8013842:	4603      	mov	r3, r0
 8013844:	2501      	movs	r5, #1
 8013846:	2b00      	cmp	r3, #0
 8013848:	dd0d      	ble.n	8013866 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2f6>
 801384a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801384e:	3b01      	subs	r3, #1
 8013850:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013854:	ee17 1a10 	vmov	r1, s14
 8013858:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801385c:	fb0b 1505 	mla	r5, fp, r5, r1
 8013860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013864:	e7ef      	b.n	8013846 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d6>
 8013866:	2800      	cmp	r0, #0
 8013868:	f100 33ff 	add.w	r3, r0, #4294967295
 801386c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013870:	bfac      	ite	ge
 8013872:	1a18      	subge	r0, r3, r0
 8013874:	4618      	movlt	r0, r3
 8013876:	b292      	uxth	r2, r2
 8013878:	230a      	movs	r3, #10
 801387a:	900e      	str	r0, [sp, #56]	; 0x38
 801387c:	eb08 0104 	add.w	r1, r8, r4
 8013880:	4628      	mov	r0, r5
 8013882:	f7ff fb31 	bl	8012ee8 <_ZN8touchgfx7Unicode4itoaElPtti>
 8013886:	2d01      	cmp	r5, #1
 8013888:	dc0a      	bgt.n	80138a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 801388a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801388e:	2b00      	cmp	r3, #0
 8013890:	bf0c      	ite	eq
 8013892:	2300      	moveq	r3, #0
 8013894:	232e      	movne	r3, #46	; 0x2e
 8013896:	aa42      	add	r2, sp, #264	; 0x108
 8013898:	4414      	add	r4, r2
 801389a:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801389e:	e752      	b.n	8013746 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 80138a0:	232e      	movs	r3, #46	; 0x2e
 80138a2:	e7f8      	b.n	8013896 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x326>
 80138a4:	ab42      	add	r3, sp, #264	; 0x108
 80138a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80138aa:	2300      	movs	r3, #0
 80138ac:	e7f5      	b.n	801389a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32a>
 80138ae:	9a08      	ldr	r2, [sp, #32]
 80138b0:	2a00      	cmp	r2, #0
 80138b2:	f43f af4f 	beq.w	8013754 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 80138b6:	7812      	ldrb	r2, [r2, #0]
 80138b8:	e74c      	b.n	8013754 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 80138ba:	2c00      	cmp	r4, #0
 80138bc:	f43f af02 	beq.w	80136c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 80138c0:	7824      	ldrb	r4, [r4, #0]
 80138c2:	e6ff      	b.n	80136c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 80138c4:	006e0069 	.word	0x006e0069
 80138c8:	3f000002 	.word	0x3f000002
 80138cc:	0061006e 	.word	0x0061006e

080138d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 80138d0:	b507      	push	{r0, r1, r2, lr}
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	4613      	mov	r3, r2
 80138d6:	2200      	movs	r2, #0
 80138d8:	f7ff fe4a 	bl	8013570 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 80138dc:	b003      	add	sp, #12
 80138de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080138e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80138e4:	4b01      	ldr	r3, [pc, #4]	; (80138ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80138e6:	6018      	str	r0, [r3, #0]
 80138e8:	4770      	bx	lr
 80138ea:	bf00      	nop
 80138ec:	24006cc4 	.word	0x24006cc4

080138f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80138f0:	4b06      	ldr	r3, [pc, #24]	; (801390c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80138f2:	881a      	ldrh	r2, [r3, #0]
 80138f4:	4282      	cmp	r2, r0
 80138f6:	d807      	bhi.n	8013908 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80138f8:	4b05      	ldr	r3, [pc, #20]	; (8013910 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80138fa:	881b      	ldrh	r3, [r3, #0]
 80138fc:	4413      	add	r3, r2
 80138fe:	4298      	cmp	r0, r3
 8013900:	bfac      	ite	ge
 8013902:	2000      	movge	r0, #0
 8013904:	2001      	movlt	r0, #1
 8013906:	4770      	bx	lr
 8013908:	2000      	movs	r0, #0
 801390a:	4770      	bx	lr
 801390c:	24006ce4 	.word	0x24006ce4
 8013910:	24006ce8 	.word	0x24006ce8

08013914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013914:	b508      	push	{r3, lr}
 8013916:	4601      	mov	r1, r0
 8013918:	f7ff ffea 	bl	80138f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801391c:	b118      	cbz	r0, 8013926 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801391e:	4b02      	ldr	r3, [pc, #8]	; (8013928 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8013926:	bd08      	pop	{r3, pc}
 8013928:	24006cc8 	.word	0x24006cc8

0801392c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013930:	4d28      	ldr	r5, [pc, #160]	; (80139d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8013932:	682b      	ldr	r3, [r5, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d04a      	beq.n	80139ce <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8013938:	4a27      	ldr	r2, [pc, #156]	; (80139d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801393a:	4e28      	ldr	r6, [pc, #160]	; (80139dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801393c:	8810      	ldrh	r0, [r2, #0]
 801393e:	f8b6 8000 	ldrh.w	r8, [r6]
 8013942:	4c27      	ldr	r4, [pc, #156]	; (80139e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8013944:	4440      	add	r0, r8
 8013946:	4f27      	ldr	r7, [pc, #156]	; (80139e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8013948:	1c41      	adds	r1, r0, #1
 801394a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801394e:	f021 0101 	bic.w	r1, r1, #1
 8013952:	eb03 020e 	add.w	r2, r3, lr
 8013956:	0409      	lsls	r1, r1, #16
 8013958:	6022      	str	r2, [r4, #0]
 801395a:	0c09      	lsrs	r1, r1, #16
 801395c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8013960:	eb0e 010c 	add.w	r1, lr, ip
 8013964:	185a      	adds	r2, r3, r1
 8013966:	603a      	str	r2, [r7, #0]
 8013968:	220e      	movs	r2, #14
 801396a:	fb02 f208 	mul.w	r2, r2, r8
 801396e:	3203      	adds	r2, #3
 8013970:	f022 0203 	bic.w	r2, r2, #3
 8013974:	4411      	add	r1, r2
 8013976:	440b      	add	r3, r1
 8013978:	491b      	ldr	r1, [pc, #108]	; (80139e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801397a:	600b      	str	r3, [r1, #0]
 801397c:	2300      	movs	r3, #0
 801397e:	491b      	ldr	r1, [pc, #108]	; (80139ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8013980:	800b      	strh	r3, [r1, #0]
 8013982:	491b      	ldr	r1, [pc, #108]	; (80139f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8013984:	6809      	ldr	r1, [r1, #0]
 8013986:	eba1 010e 	sub.w	r1, r1, lr
 801398a:	eba1 010c 	sub.w	r1, r1, ip
 801398e:	469c      	mov	ip, r3
 8013990:	1a8a      	subs	r2, r1, r2
 8013992:	4918      	ldr	r1, [pc, #96]	; (80139f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8013994:	600a      	str	r2, [r1, #0]
 8013996:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801399a:	4a17      	ldr	r2, [pc, #92]	; (80139f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801399c:	8013      	strh	r3, [r2, #0]
 801399e:	4283      	cmp	r3, r0
 80139a0:	d10d      	bne.n	80139be <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80139a2:	8835      	ldrh	r5, [r6, #0]
 80139a4:	2300      	movs	r3, #0
 80139a6:	6838      	ldr	r0, [r7, #0]
 80139a8:	240e      	movs	r4, #14
 80139aa:	429d      	cmp	r5, r3
 80139ac:	d90f      	bls.n	80139ce <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80139ae:	fb04 0203 	mla	r2, r4, r3, r0
 80139b2:	3301      	adds	r3, #1
 80139b4:	7b11      	ldrb	r1, [r2, #12]
 80139b6:	f36f 1145 	bfc	r1, #5, #1
 80139ba:	7311      	strb	r1, [r2, #12]
 80139bc:	e7f5      	b.n	80139aa <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80139be:	682a      	ldr	r2, [r5, #0]
 80139c0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80139c4:	6822      	ldr	r2, [r4, #0]
 80139c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80139ca:	3301      	adds	r3, #1
 80139cc:	e7e7      	b.n	801399e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80139ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d2:	bf00      	nop
 80139d4:	24006cc8 	.word	0x24006cc8
 80139d8:	24006ce4 	.word	0x24006ce4
 80139dc:	24006ce8 	.word	0x24006ce8
 80139e0:	24006cdc 	.word	0x24006cdc
 80139e4:	24006ccc 	.word	0x24006ccc
 80139e8:	24006cd4 	.word	0x24006cd4
 80139ec:	24006ce6 	.word	0x24006ce6
 80139f0:	24006cd0 	.word	0x24006cd0
 80139f4:	24006ce0 	.word	0x24006ce0
 80139f8:	24006cd8 	.word	0x24006cd8

080139fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80139fc:	4b10      	ldr	r3, [pc, #64]	; (8013a40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80139fe:	b510      	push	{r4, lr}
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	b9db      	cbnz	r3, 8013a3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013a04:	b1d1      	cbz	r1, 8013a3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013a06:	4b0f      	ldr	r3, [pc, #60]	; (8013a44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8013a08:	240e      	movs	r4, #14
 8013a0a:	801a      	strh	r2, [r3, #0]
 8013a0c:	b292      	uxth	r2, r2
 8013a0e:	4b0e      	ldr	r3, [pc, #56]	; (8013a48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8013a10:	881b      	ldrh	r3, [r3, #0]
 8013a12:	4413      	add	r3, r2
 8013a14:	4362      	muls	r2, r4
 8013a16:	2406      	movs	r4, #6
 8013a18:	fb04 2203 	mla	r2, r4, r3, r2
 8013a1c:	428a      	cmp	r2, r1
 8013a1e:	d305      	bcc.n	8013a2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8013a20:	4b0a      	ldr	r3, [pc, #40]	; (8013a4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8013a22:	2135      	movs	r1, #53	; 0x35
 8013a24:	4a0a      	ldr	r2, [pc, #40]	; (8013a50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8013a26:	480b      	ldr	r0, [pc, #44]	; (8013a54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8013a28:	f008 fc40 	bl	801c2ac <__assert_func>
 8013a2c:	4b0a      	ldr	r3, [pc, #40]	; (8013a58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8013a2e:	6019      	str	r1, [r3, #0]
 8013a30:	4b0a      	ldr	r3, [pc, #40]	; (8013a5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8013a32:	6018      	str	r0, [r3, #0]
 8013a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a38:	f7ff bf78 	b.w	801392c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8013a3c:	bd10      	pop	{r4, pc}
 8013a3e:	bf00      	nop
 8013a40:	24006cd4 	.word	0x24006cd4
 8013a44:	24006ce8 	.word	0x24006ce8
 8013a48:	24006ce4 	.word	0x24006ce4
 8013a4c:	0802011a 	.word	0x0802011a
 8013a50:	08020173 	.word	0x08020173
 8013a54:	080200f5 	.word	0x080200f5
 8013a58:	24006cd0 	.word	0x24006cd0
 8013a5c:	24006cc8 	.word	0x24006cc8

08013a60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8013a60:	b470      	push	{r4, r5, r6}
 8013a62:	4c07      	ldr	r4, [pc, #28]	; (8013a80 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8013a64:	4605      	mov	r5, r0
 8013a66:	4610      	mov	r0, r2
 8013a68:	9a03      	ldr	r2, [sp, #12]
 8013a6a:	6826      	ldr	r6, [r4, #0]
 8013a6c:	b936      	cbnz	r6, 8013a7c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8013a6e:	6025      	str	r5, [r4, #0]
 8013a70:	4c04      	ldr	r4, [pc, #16]	; (8013a84 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8013a72:	8021      	strh	r1, [r4, #0]
 8013a74:	4619      	mov	r1, r3
 8013a76:	bc70      	pop	{r4, r5, r6}
 8013a78:	f7ff bfc0 	b.w	80139fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8013a7c:	bc70      	pop	{r4, r5, r6}
 8013a7e:	4770      	bx	lr
 8013a80:	24006cec 	.word	0x24006cec
 8013a84:	24006ce4 	.word	0x24006ce4

08013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8013a88:	b508      	push	{r3, lr}
 8013a8a:	4b14      	ldr	r3, [pc, #80]	; (8013adc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8013a8c:	6819      	ldr	r1, [r3, #0]
 8013a8e:	b931      	cbnz	r1, 8013a9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8013a90:	4b13      	ldr	r3, [pc, #76]	; (8013ae0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8013a92:	f240 4185 	movw	r1, #1157	; 0x485
 8013a96:	4a13      	ldr	r2, [pc, #76]	; (8013ae4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8013a98:	4813      	ldr	r0, [pc, #76]	; (8013ae8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8013a9a:	f008 fc07 	bl	801c2ac <__assert_func>
 8013a9e:	4a13      	ldr	r2, [pc, #76]	; (8013aec <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8013aa0:	8803      	ldrh	r3, [r0, #0]
 8013aa2:	8812      	ldrh	r2, [r2, #0]
 8013aa4:	4293      	cmp	r3, r2
 8013aa6:	d204      	bcs.n	8013ab2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8013aa8:	2214      	movs	r2, #20
 8013aaa:	fb02 1303 	mla	r3, r2, r3, r1
 8013aae:	8918      	ldrh	r0, [r3, #8]
 8013ab0:	bd08      	pop	{r3, pc}
 8013ab2:	490f      	ldr	r1, [pc, #60]	; (8013af0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8013ab4:	8809      	ldrh	r1, [r1, #0]
 8013ab6:	4411      	add	r1, r2
 8013ab8:	428b      	cmp	r3, r1
 8013aba:	da06      	bge.n	8013aca <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8013abc:	1a9b      	subs	r3, r3, r2
 8013abe:	4a0d      	ldr	r2, [pc, #52]	; (8013af4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8013ac0:	210e      	movs	r1, #14
 8013ac2:	6812      	ldr	r2, [r2, #0]
 8013ac4:	fb01 2303 	mla	r3, r1, r3, r2
 8013ac8:	e7f1      	b.n	8013aae <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8013aca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013ace:	4293      	cmp	r3, r2
 8013ad0:	bf0a      	itet	eq
 8013ad2:	4b09      	ldreq	r3, [pc, #36]	; (8013af8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8013ad4:	2000      	movne	r0, #0
 8013ad6:	8818      	ldrheq	r0, [r3, #0]
 8013ad8:	e7ea      	b.n	8013ab0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8013ada:	bf00      	nop
 8013adc:	24006cec 	.word	0x24006cec
 8013ae0:	0801f166 	.word	0x0801f166
 8013ae4:	08020220 	.word	0x08020220
 8013ae8:	080200f5 	.word	0x080200f5
 8013aec:	24006ce4 	.word	0x24006ce4
 8013af0:	24006ce8 	.word	0x24006ce8
 8013af4:	24006ccc 	.word	0x24006ccc
 8013af8:	24006c58 	.word	0x24006c58

08013afc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8013afc:	b508      	push	{r3, lr}
 8013afe:	4b14      	ldr	r3, [pc, #80]	; (8013b50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8013b00:	6819      	ldr	r1, [r3, #0]
 8013b02:	b931      	cbnz	r1, 8013b12 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8013b04:	4b13      	ldr	r3, [pc, #76]	; (8013b54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8013b06:	f240 4199 	movw	r1, #1177	; 0x499
 8013b0a:	4a13      	ldr	r2, [pc, #76]	; (8013b58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8013b0c:	4813      	ldr	r0, [pc, #76]	; (8013b5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8013b0e:	f008 fbcd 	bl	801c2ac <__assert_func>
 8013b12:	4a13      	ldr	r2, [pc, #76]	; (8013b60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8013b14:	8803      	ldrh	r3, [r0, #0]
 8013b16:	8812      	ldrh	r2, [r2, #0]
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	d204      	bcs.n	8013b26 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8013b1c:	2214      	movs	r2, #20
 8013b1e:	fb02 1303 	mla	r3, r2, r3, r1
 8013b22:	8958      	ldrh	r0, [r3, #10]
 8013b24:	bd08      	pop	{r3, pc}
 8013b26:	490f      	ldr	r1, [pc, #60]	; (8013b64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8013b28:	8809      	ldrh	r1, [r1, #0]
 8013b2a:	4411      	add	r1, r2
 8013b2c:	428b      	cmp	r3, r1
 8013b2e:	da06      	bge.n	8013b3e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8013b30:	1a9b      	subs	r3, r3, r2
 8013b32:	4a0d      	ldr	r2, [pc, #52]	; (8013b68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8013b34:	210e      	movs	r1, #14
 8013b36:	6812      	ldr	r2, [r2, #0]
 8013b38:	fb01 2303 	mla	r3, r1, r3, r2
 8013b3c:	e7f1      	b.n	8013b22 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8013b3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b42:	4293      	cmp	r3, r2
 8013b44:	bf0a      	itet	eq
 8013b46:	4b09      	ldreq	r3, [pc, #36]	; (8013b6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8013b48:	2000      	movne	r0, #0
 8013b4a:	8818      	ldrheq	r0, [r3, #0]
 8013b4c:	e7ea      	b.n	8013b24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8013b4e:	bf00      	nop
 8013b50:	24006cec 	.word	0x24006cec
 8013b54:	0801f166 	.word	0x0801f166
 8013b58:	0802024c 	.word	0x0802024c
 8013b5c:	080200f5 	.word	0x080200f5
 8013b60:	24006ce4 	.word	0x24006ce4
 8013b64:	24006ce8 	.word	0x24006ce8
 8013b68:	24006ccc 	.word	0x24006ccc
 8013b6c:	24006c5a 	.word	0x24006c5a

08013b70 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8013b70:	4b23      	ldr	r3, [pc, #140]	; (8013c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8013b72:	b510      	push	{r4, lr}
 8013b74:	681c      	ldr	r4, [r3, #0]
 8013b76:	b934      	cbnz	r4, 8013b86 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8013b78:	4b22      	ldr	r3, [pc, #136]	; (8013c04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8013b7a:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8013b7e:	4a22      	ldr	r2, [pc, #136]	; (8013c08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8013b80:	4822      	ldr	r0, [pc, #136]	; (8013c0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8013b82:	f008 fb93 	bl	801c2ac <__assert_func>
 8013b86:	4a22      	ldr	r2, [pc, #136]	; (8013c10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8013b88:	880b      	ldrh	r3, [r1, #0]
 8013b8a:	8812      	ldrh	r2, [r2, #0]
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d211      	bcs.n	8013bb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8013b90:	2214      	movs	r2, #20
 8013b92:	fb02 4303 	mla	r3, r2, r3, r4
 8013b96:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8013b9a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013b9e:	8a1a      	ldrh	r2, [r3, #16]
 8013ba0:	8a5b      	ldrh	r3, [r3, #18]
 8013ba2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013ba6:	8004      	strh	r4, [r0, #0]
 8013ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013bac:	8041      	strh	r1, [r0, #2]
 8013bae:	8082      	strh	r2, [r0, #4]
 8013bb0:	80c3      	strh	r3, [r0, #6]
 8013bb2:	e00e      	b.n	8013bd2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013bb4:	4917      	ldr	r1, [pc, #92]	; (8013c14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8013bb6:	8809      	ldrh	r1, [r1, #0]
 8013bb8:	4411      	add	r1, r2
 8013bba:	428b      	cmp	r3, r1
 8013bbc:	da0a      	bge.n	8013bd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8013bbe:	1a9b      	subs	r3, r3, r2
 8013bc0:	4a15      	ldr	r2, [pc, #84]	; (8013c18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8013bc2:	210e      	movs	r1, #14
 8013bc4:	6812      	ldr	r2, [r2, #0]
 8013bc6:	fb01 2303 	mla	r3, r1, r3, r2
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	6002      	str	r2, [r0, #0]
 8013bce:	685a      	ldr	r2, [r3, #4]
 8013bd0:	6042      	str	r2, [r0, #4]
 8013bd2:	bd10      	pop	{r4, pc}
 8013bd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d10b      	bne.n	8013bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8013bdc:	4b0f      	ldr	r3, [pc, #60]	; (8013c1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8013bde:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013be2:	4b0f      	ldr	r3, [pc, #60]	; (8013c20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8013be4:	8081      	strh	r1, [r0, #4]
 8013be6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013bea:	2300      	movs	r3, #0
 8013bec:	80c2      	strh	r2, [r0, #6]
 8013bee:	8003      	strh	r3, [r0, #0]
 8013bf0:	8043      	strh	r3, [r0, #2]
 8013bf2:	e7ee      	b.n	8013bd2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	8003      	strh	r3, [r0, #0]
 8013bf8:	8043      	strh	r3, [r0, #2]
 8013bfa:	8083      	strh	r3, [r0, #4]
 8013bfc:	e7d8      	b.n	8013bb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8013bfe:	bf00      	nop
 8013c00:	24006cec 	.word	0x24006cec
 8013c04:	0801f166 	.word	0x0801f166
 8013c08:	080201b9 	.word	0x080201b9
 8013c0c:	080200f5 	.word	0x080200f5
 8013c10:	24006ce4 	.word	0x24006ce4
 8013c14:	24006ce8 	.word	0x24006ce8
 8013c18:	24006ccc 	.word	0x24006ccc
 8013c1c:	24006c58 	.word	0x24006c58
 8013c20:	24006c5a 	.word	0x24006c5a

08013c24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8013c24:	4b18      	ldr	r3, [pc, #96]	; (8013c88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	b34b      	cbz	r3, 8013c7e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8013c2a:	4a18      	ldr	r2, [pc, #96]	; (8013c8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8013c2c:	8800      	ldrh	r0, [r0, #0]
 8013c2e:	8812      	ldrh	r2, [r2, #0]
 8013c30:	4290      	cmp	r0, r2
 8013c32:	d211      	bcs.n	8013c58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8013c34:	2214      	movs	r2, #20
 8013c36:	fb02 3300 	mla	r3, r2, r0, r3
 8013c3a:	8a1a      	ldrh	r2, [r3, #16]
 8013c3c:	8919      	ldrh	r1, [r3, #8]
 8013c3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013c42:	428a      	cmp	r2, r1
 8013c44:	db1d      	blt.n	8013c82 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8013c46:	8a58      	ldrh	r0, [r3, #18]
 8013c48:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013c4c:	895b      	ldrh	r3, [r3, #10]
 8013c4e:	4298      	cmp	r0, r3
 8013c50:	bfac      	ite	ge
 8013c52:	2000      	movge	r0, #0
 8013c54:	2001      	movlt	r0, #1
 8013c56:	4770      	bx	lr
 8013c58:	4b0d      	ldr	r3, [pc, #52]	; (8013c90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8013c5a:	881b      	ldrh	r3, [r3, #0]
 8013c5c:	4413      	add	r3, r2
 8013c5e:	4298      	cmp	r0, r3
 8013c60:	da0d      	bge.n	8013c7e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8013c62:	4b0c      	ldr	r3, [pc, #48]	; (8013c94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8013c64:	1a80      	subs	r0, r0, r2
 8013c66:	220e      	movs	r2, #14
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	fb02 3300 	mla	r3, r2, r0, r3
 8013c6e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8013c72:	891a      	ldrh	r2, [r3, #8]
 8013c74:	4291      	cmp	r1, r2
 8013c76:	db04      	blt.n	8013c82 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8013c78:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8013c7c:	e7e6      	b.n	8013c4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8013c7e:	2000      	movs	r0, #0
 8013c80:	4770      	bx	lr
 8013c82:	2001      	movs	r0, #1
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop
 8013c88:	24006cec 	.word	0x24006cec
 8013c8c:	24006ce4 	.word	0x24006ce4
 8013c90:	24006ce8 	.word	0x24006ce8
 8013c94:	24006ccc 	.word	0x24006ccc

08013c98 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8013c98:	b508      	push	{r3, lr}
 8013c9a:	4b12      	ldr	r3, [pc, #72]	; (8013ce4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8013c9c:	6819      	ldr	r1, [r3, #0]
 8013c9e:	b931      	cbnz	r1, 8013cae <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8013ca0:	4b11      	ldr	r3, [pc, #68]	; (8013ce8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8013ca2:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8013ca6:	4a11      	ldr	r2, [pc, #68]	; (8013cec <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8013ca8:	4811      	ldr	r0, [pc, #68]	; (8013cf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8013caa:	f008 faff 	bl	801c2ac <__assert_func>
 8013cae:	8803      	ldrh	r3, [r0, #0]
 8013cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	d012      	beq.n	8013cde <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8013cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013cbc:	4293      	cmp	r3, r2
 8013cbe:	d103      	bne.n	8013cc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8013cc0:	4b0c      	ldr	r3, [pc, #48]	; (8013cf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8013cc6:	bd08      	pop	{r3, pc}
 8013cc8:	4a0b      	ldr	r2, [pc, #44]	; (8013cf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8013cca:	6812      	ldr	r2, [r2, #0]
 8013ccc:	b11a      	cbz	r2, 8013cd6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8013cce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	d1f7      	bne.n	8013cc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013cd6:	2214      	movs	r2, #20
 8013cd8:	4353      	muls	r3, r2
 8013cda:	58c8      	ldr	r0, [r1, r3]
 8013cdc:	e7f3      	b.n	8013cc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013cde:	2000      	movs	r0, #0
 8013ce0:	e7f1      	b.n	8013cc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013ce2:	bf00      	nop
 8013ce4:	24006cec 	.word	0x24006cec
 8013ce8:	0801f166 	.word	0x0801f166
 8013cec:	080201ef 	.word	0x080201ef
 8013cf0:	080200f5 	.word	0x080200f5
 8013cf4:	24006c64 	.word	0x24006c64
 8013cf8:	24006cc8 	.word	0x24006cc8

08013cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8013cfc:	8802      	ldrh	r2, [r0, #0]
 8013cfe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d845      	bhi.n	8013d92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013d06:	4b24      	ldr	r3, [pc, #144]	; (8013d98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013d08:	8818      	ldrh	r0, [r3, #0]
 8013d0a:	4282      	cmp	r2, r0
 8013d0c:	d221      	bcs.n	8013d52 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8013d0e:	4b23      	ldr	r3, [pc, #140]	; (8013d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8013d10:	6819      	ldr	r1, [r3, #0]
 8013d12:	2314      	movs	r3, #20
 8013d14:	fb03 1302 	mla	r3, r3, r2, r1
 8013d18:	6858      	ldr	r0, [r3, #4]
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	d03a      	beq.n	8013d94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013d1e:	4920      	ldr	r1, [pc, #128]	; (8013da0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013d20:	6809      	ldr	r1, [r1, #0]
 8013d22:	2900      	cmp	r1, #0
 8013d24:	d036      	beq.n	8013d94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013d26:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d2a:	2900      	cmp	r1, #0
 8013d2c:	d032      	beq.n	8013d94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013d2e:	891a      	ldrh	r2, [r3, #8]
 8013d30:	8958      	ldrh	r0, [r3, #10]
 8013d32:	4350      	muls	r0, r2
 8013d34:	7c5a      	ldrb	r2, [r3, #17]
 8013d36:	7cdb      	ldrb	r3, [r3, #19]
 8013d38:	0952      	lsrs	r2, r2, #5
 8013d3a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013d3e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8013d42:	2b0b      	cmp	r3, #11
 8013d44:	bf18      	it	ne
 8013d46:	0040      	lslne	r0, r0, #1
 8013d48:	3003      	adds	r0, #3
 8013d4a:	f020 0003 	bic.w	r0, r0, #3
 8013d4e:	4408      	add	r0, r1
 8013d50:	4770      	bx	lr
 8013d52:	4b14      	ldr	r3, [pc, #80]	; (8013da4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8013d54:	881b      	ldrh	r3, [r3, #0]
 8013d56:	4403      	add	r3, r0
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	da1a      	bge.n	8013d92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013d5c:	4b12      	ldr	r3, [pc, #72]	; (8013da8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8013d5e:	1a10      	subs	r0, r2, r0
 8013d60:	210e      	movs	r1, #14
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	fb01 3000 	mla	r0, r1, r0, r3
 8013d68:	7b03      	ldrb	r3, [r0, #12]
 8013d6a:	f003 031f 	and.w	r3, r3, #31
 8013d6e:	2b0b      	cmp	r3, #11
 8013d70:	d10b      	bne.n	8013d8a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8013d72:	8903      	ldrh	r3, [r0, #8]
 8013d74:	8940      	ldrh	r0, [r0, #10]
 8013d76:	4358      	muls	r0, r3
 8013d78:	4b09      	ldr	r3, [pc, #36]	; (8013da0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013d7a:	3003      	adds	r0, #3
 8013d7c:	6819      	ldr	r1, [r3, #0]
 8013d7e:	f020 0303 	bic.w	r3, r0, #3
 8013d82:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8013d86:	4418      	add	r0, r3
 8013d88:	4770      	bx	lr
 8013d8a:	2b0d      	cmp	r3, #13
 8013d8c:	d101      	bne.n	8013d92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013d8e:	300d      	adds	r0, #13
 8013d90:	4770      	bx	lr
 8013d92:	2000      	movs	r0, #0
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	24006ce4 	.word	0x24006ce4
 8013d9c:	24006cec 	.word	0x24006cec
 8013da0:	24006cc8 	.word	0x24006cc8
 8013da4:	24006ce8 	.word	0x24006ce8
 8013da8:	24006ccc 	.word	0x24006ccc

08013dac <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8013dac:	4b17      	ldr	r3, [pc, #92]	; (8013e0c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8013dae:	b510      	push	{r4, lr}
 8013db0:	6819      	ldr	r1, [r3, #0]
 8013db2:	8803      	ldrh	r3, [r0, #0]
 8013db4:	b1e9      	cbz	r1, 8013df2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8013db6:	4a16      	ldr	r2, [pc, #88]	; (8013e10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8013db8:	8812      	ldrh	r2, [r2, #0]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d90a      	bls.n	8013dd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8013dbe:	2214      	movs	r2, #20
 8013dc0:	fb02 1303 	mla	r3, r2, r3, r1
 8013dc4:	7c58      	ldrb	r0, [r3, #17]
 8013dc6:	0942      	lsrs	r2, r0, #5
 8013dc8:	7cd8      	ldrb	r0, [r3, #19]
 8013dca:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8013dce:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8013dd2:	bd10      	pop	{r4, pc}
 8013dd4:	490f      	ldr	r1, [pc, #60]	; (8013e14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8013dd6:	8809      	ldrh	r1, [r1, #0]
 8013dd8:	4411      	add	r1, r2
 8013dda:	428b      	cmp	r3, r1
 8013ddc:	da09      	bge.n	8013df2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8013dde:	1a9b      	subs	r3, r3, r2
 8013de0:	4a0d      	ldr	r2, [pc, #52]	; (8013e18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8013de2:	210e      	movs	r1, #14
 8013de4:	6812      	ldr	r2, [r2, #0]
 8013de6:	fb01 2303 	mla	r3, r1, r3, r2
 8013dea:	7b18      	ldrb	r0, [r3, #12]
 8013dec:	f000 001f 	and.w	r0, r0, #31
 8013df0:	e7ef      	b.n	8013dd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013df2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013df6:	4293      	cmp	r3, r2
 8013df8:	d106      	bne.n	8013e08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8013dfa:	f7f9 f855 	bl	800cea8 <_ZN8touchgfx3HAL3lcdEv>
 8013dfe:	6803      	ldr	r3, [r0, #0]
 8013e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e06:	4718      	bx	r3
 8013e08:	2000      	movs	r0, #0
 8013e0a:	e7e2      	b.n	8013dd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013e0c:	24006cec 	.word	0x24006cec
 8013e10:	24006ce4 	.word	0x24006ce4
 8013e14:	24006ce8 	.word	0x24006ce8
 8013e18:	24006ccc 	.word	0x24006ccc

08013e1c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8013e1c:	2018      	movs	r0, #24
 8013e1e:	4770      	bx	lr

08013e20 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8013e20:	2001      	movs	r0, #1
 8013e22:	4770      	bx	lr

08013e24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e28:	b085      	sub	sp, #20
 8013e2a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013e2c:	9203      	str	r2, [sp, #12]
 8013e2e:	6870      	ldr	r0, [r6, #4]
 8013e30:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013e34:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013e38:	9101      	str	r1, [sp, #4]
 8013e3a:	fa1f f885 	uxth.w	r8, r5
 8013e3e:	43ed      	mvns	r5, r5
 8013e40:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013e44:	b2ed      	uxtb	r5, r5
 8013e46:	fb00 2404 	mla	r4, r0, r4, r2
 8013e4a:	6832      	ldr	r2, [r6, #0]
 8013e4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013e50:	4414      	add	r4, r2
 8013e52:	f8dc 2000 	ldr.w	r2, [ip]
 8013e56:	9202      	str	r2, [sp, #8]
 8013e58:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013e5c:	f102 0e04 	add.w	lr, r2, #4
 8013e60:	9a01      	ldr	r2, [sp, #4]
 8013e62:	2a00      	cmp	r2, #0
 8013e64:	dc03      	bgt.n	8013e6e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8013e66:	9a03      	ldr	r2, [sp, #12]
 8013e68:	2a00      	cmp	r2, #0
 8013e6a:	f340 8116 	ble.w	801409a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013e6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e70:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8013e74:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013e78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e7a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8013e7e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	dd0e      	ble.n	8013ea4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8013e86:	1406      	asrs	r6, r0, #16
 8013e88:	d405      	bmi.n	8013e96 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013e8a:	4556      	cmp	r6, sl
 8013e8c:	da03      	bge.n	8013e96 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013e8e:	1416      	asrs	r6, r2, #16
 8013e90:	d401      	bmi.n	8013e96 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013e92:	454e      	cmp	r6, r9
 8013e94:	db07      	blt.n	8013ea6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8013e96:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013e98:	3b01      	subs	r3, #1
 8013e9a:	3403      	adds	r4, #3
 8013e9c:	4430      	add	r0, r6
 8013e9e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013ea0:	4432      	add	r2, r6
 8013ea2:	e7ee      	b.n	8013e82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8013ea4:	d063      	beq.n	8013f6e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013ea6:	1e5e      	subs	r6, r3, #1
 8013ea8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013eaa:	fb07 0706 	mla	r7, r7, r6, r0
 8013eae:	143f      	asrs	r7, r7, #16
 8013eb0:	d454      	bmi.n	8013f5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013eb2:	4557      	cmp	r7, sl
 8013eb4:	da52      	bge.n	8013f5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013eb6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013eb8:	fb07 2606 	mla	r6, r7, r6, r2
 8013ebc:	1436      	asrs	r6, r6, #16
 8013ebe:	d44d      	bmi.n	8013f5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013ec0:	454e      	cmp	r6, r9
 8013ec2:	da4b      	bge.n	8013f5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013ec4:	1ce6      	adds	r6, r4, #3
 8013ec6:	4699      	mov	r9, r3
 8013ec8:	f1b9 0f00 	cmp.w	r9, #0
 8013ecc:	f106 0603 	add.w	r6, r6, #3
 8013ed0:	dd48      	ble.n	8013f64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8013ed2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8013ed6:	1417      	asrs	r7, r2, #16
 8013ed8:	9902      	ldr	r1, [sp, #8]
 8013eda:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013ede:	f109 39ff 	add.w	r9, r9, #4294967295
 8013ee2:	fb0b 1707 	mla	r7, fp, r7, r1
 8013ee6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013eea:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013eec:	f817 700a 	ldrb.w	r7, [r7, sl]
 8013ef0:	fb1b fb05 	smulbb	fp, fp, r5
 8013ef4:	4408      	add	r0, r1
 8013ef6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013ef8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013efc:	440a      	add	r2, r1
 8013efe:	eb0e 0a07 	add.w	sl, lr, r7
 8013f02:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8013f06:	fb07 b708 	mla	r7, r7, r8, fp
 8013f0a:	b2bf      	uxth	r7, r7
 8013f0c:	f107 0b01 	add.w	fp, r7, #1
 8013f10:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013f14:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013f18:	fb1b fb05 	smulbb	fp, fp, r5
 8013f1c:	123f      	asrs	r7, r7, #8
 8013f1e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8013f22:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8013f26:	fb07 b708 	mla	r7, r7, r8, fp
 8013f2a:	b2bf      	uxth	r7, r7
 8013f2c:	f107 0b01 	add.w	fp, r7, #1
 8013f30:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013f34:	123f      	asrs	r7, r7, #8
 8013f36:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013f3a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013f3e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8013f42:	fb1a fa05 	smulbb	sl, sl, r5
 8013f46:	fb07 a708 	mla	r7, r7, r8, sl
 8013f4a:	b2bf      	uxth	r7, r7
 8013f4c:	f107 0a01 	add.w	sl, r7, #1
 8013f50:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8013f54:	123f      	asrs	r7, r7, #8
 8013f56:	f806 7c04 	strb.w	r7, [r6, #-4]
 8013f5a:	e7b5      	b.n	8013ec8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8013f5c:	2700      	movs	r7, #0
 8013f5e:	1bde      	subs	r6, r3, r7
 8013f60:	2e00      	cmp	r6, #0
 8013f62:	dc42      	bgt.n	8013fea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8013f64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013f68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f6c:	441c      	add	r4, r3
 8013f6e:	9b01      	ldr	r3, [sp, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	f340 8092 	ble.w	801409a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013f80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013f84:	eef0 6a62 	vmov.f32	s13, s5
 8013f88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013f90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013f94:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8013f98:	eef0 6a43 	vmov.f32	s13, s6
 8013f9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013fa0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8013fa4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013fa8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013fac:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013fb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013fb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013fb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013fbc:	ee12 2a90 	vmov	r2, s5
 8013fc0:	eef0 2a47 	vmov.f32	s5, s14
 8013fc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8013fc8:	ee13 2a10 	vmov	r2, s6
 8013fcc:	9311      	str	r3, [sp, #68]	; 0x44
 8013fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fd0:	eeb0 3a67 	vmov.f32	s6, s15
 8013fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8013fd8:	9312      	str	r3, [sp, #72]	; 0x48
 8013fda:	9b01      	ldr	r3, [sp, #4]
 8013fdc:	9a03      	ldr	r2, [sp, #12]
 8013fde:	3b01      	subs	r3, #1
 8013fe0:	9301      	str	r3, [sp, #4]
 8013fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fe4:	bf08      	it	eq
 8013fe6:	4613      	moveq	r3, r2
 8013fe8:	e73a      	b.n	8013e60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013fea:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8013fee:	d44e      	bmi.n	801408e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8013ff0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013ff4:	4556      	cmp	r6, sl
 8013ff6:	dd4a      	ble.n	801408e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8013ff8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8013ffc:	d447      	bmi.n	801408e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8013ffe:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014002:	4559      	cmp	r1, fp
 8014004:	dd43      	ble.n	801408e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014006:	fa0f f986 	sxth.w	r9, r6
 801400a:	9902      	ldr	r1, [sp, #8]
 801400c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014010:	fb0b 1909 	mla	r9, fp, r9, r1
 8014014:	f814 b006 	ldrb.w	fp, [r4, r6]
 8014018:	f819 900a 	ldrb.w	r9, [r9, sl]
 801401c:	fb1b fb05 	smulbb	fp, fp, r5
 8014020:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014024:	eb0e 0a09 	add.w	sl, lr, r9
 8014028:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801402c:	fb09 b908 	mla	r9, r9, r8, fp
 8014030:	fa1f f989 	uxth.w	r9, r9
 8014034:	f109 0b01 	add.w	fp, r9, #1
 8014038:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801403c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014040:	f804 9006 	strb.w	r9, [r4, r6]
 8014044:	4426      	add	r6, r4
 8014046:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801404a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801404e:	fb1b fb05 	smulbb	fp, fp, r5
 8014052:	fb09 b908 	mla	r9, r9, r8, fp
 8014056:	fa1f f989 	uxth.w	r9, r9
 801405a:	f109 0b01 	add.w	fp, r9, #1
 801405e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014062:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014066:	f886 9001 	strb.w	r9, [r6, #1]
 801406a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801406e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014072:	fb1a fa05 	smulbb	sl, sl, r5
 8014076:	fb09 a908 	mla	r9, r9, r8, sl
 801407a:	fa1f f989 	uxth.w	r9, r9
 801407e:	f109 0a01 	add.w	sl, r9, #1
 8014082:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8014086:	ea4f 2929 	mov.w	r9, r9, asr #8
 801408a:	f886 9002 	strb.w	r9, [r6, #2]
 801408e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014090:	3701      	adds	r7, #1
 8014092:	4408      	add	r0, r1
 8014094:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014096:	440a      	add	r2, r1
 8014098:	e761      	b.n	8013f5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801409a:	b005      	add	sp, #20
 801409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80140a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80140a6:	4693      	mov	fp, r2
 80140a8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80140aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140ae:	6868      	ldr	r0, [r5, #4]
 80140b0:	6877      	ldr	r7, [r6, #4]
 80140b2:	9100      	str	r1, [sp, #0]
 80140b4:	3704      	adds	r7, #4
 80140b6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80140ba:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80140be:	fb00 2404 	mla	r4, r0, r4, r2
 80140c2:	682a      	ldr	r2, [r5, #0]
 80140c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80140c8:	4414      	add	r4, r2
 80140ca:	6832      	ldr	r2, [r6, #0]
 80140cc:	9201      	str	r2, [sp, #4]
 80140ce:	9a00      	ldr	r2, [sp, #0]
 80140d0:	2a00      	cmp	r2, #0
 80140d2:	dc03      	bgt.n	80140dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80140d4:	f1bb 0f00 	cmp.w	fp, #0
 80140d8:	f340 80bc 	ble.w	8014254 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80140dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80140de:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80140e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80140e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140e8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80140ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	dd0c      	ble.n	801410e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80140f4:	1405      	asrs	r5, r0, #16
 80140f6:	d405      	bmi.n	8014104 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80140f8:	4555      	cmp	r5, sl
 80140fa:	da03      	bge.n	8014104 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80140fc:	1415      	asrs	r5, r2, #16
 80140fe:	d401      	bmi.n	8014104 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014100:	454d      	cmp	r5, r9
 8014102:	db05      	blt.n	8014110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014104:	4440      	add	r0, r8
 8014106:	4472      	add	r2, lr
 8014108:	3b01      	subs	r3, #1
 801410a:	3403      	adds	r4, #3
 801410c:	e7f0      	b.n	80140f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801410e:	d03f      	beq.n	8014190 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8014110:	1e5d      	subs	r5, r3, #1
 8014112:	fb08 0c05 	mla	ip, r8, r5, r0
 8014116:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801411a:	d42e      	bmi.n	801417a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801411c:	45d4      	cmp	ip, sl
 801411e:	da2c      	bge.n	801417a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014120:	fb0e 2505 	mla	r5, lr, r5, r2
 8014124:	142d      	asrs	r5, r5, #16
 8014126:	d428      	bmi.n	801417a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014128:	454d      	cmp	r5, r9
 801412a:	da26      	bge.n	801417a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801412c:	1ce5      	adds	r5, r4, #3
 801412e:	469c      	mov	ip, r3
 8014130:	f1bc 0f00 	cmp.w	ip, #0
 8014134:	f105 0503 	add.w	r5, r5, #3
 8014138:	dd25      	ble.n	8014186 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801413a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801413e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8014142:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014146:	4472      	add	r2, lr
 8014148:	468a      	mov	sl, r1
 801414a:	9901      	ldr	r1, [sp, #4]
 801414c:	fb0a 1909 	mla	r9, sl, r9, r1
 8014150:	1401      	asrs	r1, r0, #16
 8014152:	4440      	add	r0, r8
 8014154:	f819 9001 	ldrb.w	r9, [r9, r1]
 8014158:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801415c:	eb07 0a09 	add.w	sl, r7, r9
 8014160:	f817 9009 	ldrb.w	r9, [r7, r9]
 8014164:	f805 9c06 	strb.w	r9, [r5, #-6]
 8014168:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801416c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8014170:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014174:	f805 9c04 	strb.w	r9, [r5, #-4]
 8014178:	e7da      	b.n	8014130 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801417a:	2500      	movs	r5, #0
 801417c:	eba3 0c05 	sub.w	ip, r3, r5
 8014180:	f1bc 0f00 	cmp.w	ip, #0
 8014184:	dc3b      	bgt.n	80141fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8014186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801418a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801418e:	441c      	add	r4, r3
 8014190:	9b00      	ldr	r3, [sp, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	dd5e      	ble.n	8014254 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8014196:	ee30 0a04 	vadd.f32	s0, s0, s8
 801419a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801419c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80141a0:	eeb0 6a62 	vmov.f32	s12, s5
 80141a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80141a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80141ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80141b0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80141b4:	eeb0 6a43 	vmov.f32	s12, s6
 80141b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80141bc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80141c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80141c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80141c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80141cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80141d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80141d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80141d8:	ee12 2a90 	vmov	r2, s5
 80141dc:	eef0 2a47 	vmov.f32	s5, s14
 80141e0:	fb92 f8f3 	sdiv	r8, r2, r3
 80141e4:	ee13 2a10 	vmov	r2, s6
 80141e8:	eeb0 3a67 	vmov.f32	s6, s15
 80141ec:	fb92 fef3 	sdiv	lr, r2, r3
 80141f0:	9b00      	ldr	r3, [sp, #0]
 80141f2:	3b01      	subs	r3, #1
 80141f4:	9300      	str	r3, [sp, #0]
 80141f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141f8:	bf08      	it	eq
 80141fa:	465b      	moveq	r3, fp
 80141fc:	e767      	b.n	80140ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80141fe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014202:	d423      	bmi.n	801424c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014204:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8014208:	45cc      	cmp	ip, r9
 801420a:	dd1f      	ble.n	801424c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801420c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014210:	d41c      	bmi.n	801424c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014212:	68f1      	ldr	r1, [r6, #12]
 8014214:	4551      	cmp	r1, sl
 8014216:	dd19      	ble.n	801424c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014218:	fa0f fc8c 	sxth.w	ip, ip
 801421c:	9901      	ldr	r1, [sp, #4]
 801421e:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8014222:	f81c c009 	ldrb.w	ip, [ip, r9]
 8014226:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801422a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801422e:	eb07 090c 	add.w	r9, r7, ip
 8014232:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8014236:	f804 a00c 	strb.w	sl, [r4, ip]
 801423a:	44a4      	add	ip, r4
 801423c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8014240:	f88c a001 	strb.w	sl, [ip, #1]
 8014244:	f899 9002 	ldrb.w	r9, [r9, #2]
 8014248:	f88c 9002 	strb.w	r9, [ip, #2]
 801424c:	4440      	add	r0, r8
 801424e:	4472      	add	r2, lr
 8014250:	3501      	adds	r5, #1
 8014252:	e793      	b.n	801417c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8014254:	b003      	add	sp, #12
 8014256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801425a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801425a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425e:	b085      	sub	sp, #20
 8014260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014264:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014266:	9202      	str	r2, [sp, #8]
 8014268:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801426c:	6860      	ldr	r0, [r4, #4]
 801426e:	9203      	str	r2, [sp, #12]
 8014270:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014274:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014278:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801427c:	fb00 2505 	mla	r5, r0, r5, r2
 8014280:	6822      	ldr	r2, [r4, #0]
 8014282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014286:	4415      	add	r5, r2
 8014288:	f8dc 2000 	ldr.w	r2, [ip]
 801428c:	9200      	str	r2, [sp, #0]
 801428e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014292:	3204      	adds	r2, #4
 8014294:	9201      	str	r2, [sp, #4]
 8014296:	2900      	cmp	r1, #0
 8014298:	dc03      	bgt.n	80142a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801429a:	9a02      	ldr	r2, [sp, #8]
 801429c:	2a00      	cmp	r2, #0
 801429e:	f340 8127 	ble.w	80144f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80142a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142a4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80142a8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80142ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142ae:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80142b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	dd0d      	ble.n	80142d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80142ba:	1422      	asrs	r2, r4, #16
 80142bc:	d405      	bmi.n	80142ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80142be:	4542      	cmp	r2, r8
 80142c0:	da03      	bge.n	80142ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80142c2:	1402      	asrs	r2, r0, #16
 80142c4:	d401      	bmi.n	80142ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80142c6:	42ba      	cmp	r2, r7
 80142c8:	db06      	blt.n	80142d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80142ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142cc:	4474      	add	r4, lr
 80142ce:	3b01      	subs	r3, #1
 80142d0:	3503      	adds	r5, #3
 80142d2:	4410      	add	r0, r2
 80142d4:	e7ef      	b.n	80142b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80142d6:	d075      	beq.n	80143c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80142d8:	1e5a      	subs	r2, r3, #1
 80142da:	fb0e 4602 	mla	r6, lr, r2, r4
 80142de:	1436      	asrs	r6, r6, #16
 80142e0:	d465      	bmi.n	80143ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80142e2:	4546      	cmp	r6, r8
 80142e4:	da63      	bge.n	80143ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80142e6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80142e8:	fb06 0202 	mla	r2, r6, r2, r0
 80142ec:	1412      	asrs	r2, r2, #16
 80142ee:	d45e      	bmi.n	80143ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80142f0:	42ba      	cmp	r2, r7
 80142f2:	da5c      	bge.n	80143ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80142f4:	1cef      	adds	r7, r5, #3
 80142f6:	4699      	mov	r9, r3
 80142f8:	f1b9 0f00 	cmp.w	r9, #0
 80142fc:	dd5d      	ble.n	80143ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80142fe:	1402      	asrs	r2, r0, #16
 8014300:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014304:	1426      	asrs	r6, r4, #16
 8014306:	4692      	mov	sl, r2
 8014308:	9a00      	ldr	r2, [sp, #0]
 801430a:	fb08 220a 	mla	r2, r8, sl, r2
 801430e:	5d92      	ldrb	r2, [r2, r6]
 8014310:	9e01      	ldr	r6, [sp, #4]
 8014312:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014316:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801431a:	d041      	beq.n	80143a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801431c:	9a03      	ldr	r2, [sp, #12]
 801431e:	fa5f fb86 	uxtb.w	fp, r6
 8014322:	fb02 f808 	mul.w	r8, r2, r8
 8014326:	f108 0201 	add.w	r2, r8, #1
 801432a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801432e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014332:	1212      	asrs	r2, r2, #8
 8014334:	fa1f fa82 	uxth.w	sl, r2
 8014338:	43d2      	mvns	r2, r2
 801433a:	fb1b fb0a 	smulbb	fp, fp, sl
 801433e:	b2d2      	uxtb	r2, r2
 8014340:	fb08 b802 	mla	r8, r8, r2, fp
 8014344:	fa1f f888 	uxth.w	r8, r8
 8014348:	f108 0b01 	add.w	fp, r8, #1
 801434c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014350:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014354:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014358:	fb1b fb0a 	smulbb	fp, fp, sl
 801435c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014360:	fb16 fa0a 	smulbb	sl, r6, sl
 8014364:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014368:	f807 8c03 	strb.w	r8, [r7, #-3]
 801436c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014370:	fb06 aa02 	mla	sl, r6, r2, sl
 8014374:	fb08 b802 	mla	r8, r8, r2, fp
 8014378:	fa1f fa8a 	uxth.w	sl, sl
 801437c:	fa1f f888 	uxth.w	r8, r8
 8014380:	f10a 0601 	add.w	r6, sl, #1
 8014384:	f108 0b01 	add.w	fp, r8, #1
 8014388:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801438c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014390:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014394:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014398:	f807 ac01 	strb.w	sl, [r7, #-1]
 801439c:	f807 8c02 	strb.w	r8, [r7, #-2]
 80143a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143a2:	4474      	add	r4, lr
 80143a4:	3703      	adds	r7, #3
 80143a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80143aa:	4410      	add	r0, r2
 80143ac:	e7a4      	b.n	80142f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80143ae:	f04f 0800 	mov.w	r8, #0
 80143b2:	eba3 0208 	sub.w	r2, r3, r8
 80143b6:	2a00      	cmp	r2, #0
 80143b8:	dc3b      	bgt.n	8014432 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80143ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80143be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80143c2:	441d      	add	r5, r3
 80143c4:	2900      	cmp	r1, #0
 80143c6:	f340 8093 	ble.w	80144f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80143ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80143ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80143d4:	3901      	subs	r1, #1
 80143d6:	eeb0 6a62 	vmov.f32	s12, s5
 80143da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80143de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80143e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80143e6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80143ea:	eeb0 6a43 	vmov.f32	s12, s6
 80143ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80143f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80143f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80143fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80143fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014402:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014406:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801440a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801440e:	ee12 2a90 	vmov	r2, s5
 8014412:	eef0 2a47 	vmov.f32	s5, s14
 8014416:	fb92 fef3 	sdiv	lr, r2, r3
 801441a:	ee13 2a10 	vmov	r2, s6
 801441e:	eeb0 3a67 	vmov.f32	s6, s15
 8014422:	fb92 f3f3 	sdiv	r3, r2, r3
 8014426:	9a02      	ldr	r2, [sp, #8]
 8014428:	9312      	str	r3, [sp, #72]	; 0x48
 801442a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801442c:	bf08      	it	eq
 801442e:	4613      	moveq	r3, r2
 8014430:	e731      	b.n	8014296 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014432:	1427      	asrs	r7, r4, #16
 8014434:	d456      	bmi.n	80144e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014436:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801443a:	42be      	cmp	r6, r7
 801443c:	dd52      	ble.n	80144e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801443e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014442:	d44f      	bmi.n	80144e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014444:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014448:	454a      	cmp	r2, r9
 801444a:	dd4b      	ble.n	80144e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801444c:	9a00      	ldr	r2, [sp, #0]
 801444e:	b236      	sxth	r6, r6
 8014450:	fb09 2606 	mla	r6, r9, r6, r2
 8014454:	5df2      	ldrb	r2, [r6, r7]
 8014456:	9e01      	ldr	r6, [sp, #4]
 8014458:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801445c:	0e3a      	lsrs	r2, r7, #24
 801445e:	d041      	beq.n	80144e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014460:	9e03      	ldr	r6, [sp, #12]
 8014462:	fa5f fb87 	uxtb.w	fp, r7
 8014466:	4372      	muls	r2, r6
 8014468:	1c56      	adds	r6, r2, #1
 801446a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801446e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014472:	1212      	asrs	r2, r2, #8
 8014474:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014478:	fa1f fa82 	uxth.w	sl, r2
 801447c:	43d2      	mvns	r2, r2
 801447e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014482:	b2d2      	uxtb	r2, r2
 8014484:	fb09 b902 	mla	r9, r9, r2, fp
 8014488:	fa1f f989 	uxth.w	r9, r9
 801448c:	f109 0b01 	add.w	fp, r9, #1
 8014490:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014494:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014498:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801449c:	fb1b fb0a 	smulbb	fp, fp, sl
 80144a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80144a4:	fb17 fa0a 	smulbb	sl, r7, sl
 80144a8:	f805 9006 	strb.w	r9, [r5, r6]
 80144ac:	442e      	add	r6, r5
 80144ae:	78b7      	ldrb	r7, [r6, #2]
 80144b0:	f896 9001 	ldrb.w	r9, [r6, #1]
 80144b4:	fb07 aa02 	mla	sl, r7, r2, sl
 80144b8:	fb09 b902 	mla	r9, r9, r2, fp
 80144bc:	fa1f fa8a 	uxth.w	sl, sl
 80144c0:	fa1f f989 	uxth.w	r9, r9
 80144c4:	f10a 0701 	add.w	r7, sl, #1
 80144c8:	f109 0b01 	add.w	fp, r9, #1
 80144cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80144d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80144d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80144d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80144dc:	f886 a002 	strb.w	sl, [r6, #2]
 80144e0:	f886 9001 	strb.w	r9, [r6, #1]
 80144e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144e6:	4474      	add	r4, lr
 80144e8:	f108 0801 	add.w	r8, r8, #1
 80144ec:	4410      	add	r0, r2
 80144ee:	e760      	b.n	80143b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80144f0:	b005      	add	sp, #20
 80144f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080144f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80144f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144fa:	b085      	sub	sp, #20
 80144fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014500:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014502:	9203      	str	r2, [sp, #12]
 8014504:	6868      	ldr	r0, [r5, #4]
 8014506:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801450a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801450e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014512:	fb00 2404 	mla	r4, r0, r4, r2
 8014516:	682a      	ldr	r2, [r5, #0]
 8014518:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801451c:	4414      	add	r4, r2
 801451e:	f8dc 2000 	ldr.w	r2, [ip]
 8014522:	9201      	str	r2, [sp, #4]
 8014524:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014528:	3204      	adds	r2, #4
 801452a:	9202      	str	r2, [sp, #8]
 801452c:	2900      	cmp	r1, #0
 801452e:	dc03      	bgt.n	8014538 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014530:	9a03      	ldr	r2, [sp, #12]
 8014532:	2a00      	cmp	r2, #0
 8014534:	f340 8137 	ble.w	80147a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801453a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801453e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014542:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014544:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014548:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801454c:	2b00      	cmp	r3, #0
 801454e:	dd0d      	ble.n	801456c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014550:	1405      	asrs	r5, r0, #16
 8014552:	d405      	bmi.n	8014560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014554:	4545      	cmp	r5, r8
 8014556:	da03      	bge.n	8014560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014558:	1415      	asrs	r5, r2, #16
 801455a:	d401      	bmi.n	8014560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801455c:	42bd      	cmp	r5, r7
 801455e:	db06      	blt.n	801456e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014560:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014562:	4470      	add	r0, lr
 8014564:	3b01      	subs	r3, #1
 8014566:	3403      	adds	r4, #3
 8014568:	442a      	add	r2, r5
 801456a:	e7ef      	b.n	801454c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801456c:	d070      	beq.n	8014650 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801456e:	1e5d      	subs	r5, r3, #1
 8014570:	fb0e 0605 	mla	r6, lr, r5, r0
 8014574:	1436      	asrs	r6, r6, #16
 8014576:	d462      	bmi.n	801463e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014578:	4546      	cmp	r6, r8
 801457a:	da60      	bge.n	801463e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801457c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801457e:	fb06 2505 	mla	r5, r6, r5, r2
 8014582:	142d      	asrs	r5, r5, #16
 8014584:	d45b      	bmi.n	801463e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014586:	42bd      	cmp	r5, r7
 8014588:	da59      	bge.n	801463e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801458a:	1ce5      	adds	r5, r4, #3
 801458c:	469a      	mov	sl, r3
 801458e:	f1ba 0f00 	cmp.w	sl, #0
 8014592:	dd58      	ble.n	8014646 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8014594:	1416      	asrs	r6, r2, #16
 8014596:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801459a:	1407      	asrs	r7, r0, #16
 801459c:	46b1      	mov	r9, r6
 801459e:	9e01      	ldr	r6, [sp, #4]
 80145a0:	fb08 6609 	mla	r6, r8, r9, r6
 80145a4:	5df6      	ldrb	r6, [r6, r7]
 80145a6:	9f02      	ldr	r7, [sp, #8]
 80145a8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80145ac:	0e37      	lsrs	r7, r6, #24
 80145ae:	2fff      	cmp	r7, #255	; 0xff
 80145b0:	f000 80f0 	beq.w	8014794 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80145b4:	fa5f f887 	uxtb.w	r8, r7
 80145b8:	b3d7      	cbz	r7, 8014630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80145ba:	fa1f f788 	uxth.w	r7, r8
 80145be:	ea6f 0808 	mvn.w	r8, r8
 80145c2:	fa5f fb86 	uxtb.w	fp, r6
 80145c6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80145ca:	fa5f f888 	uxtb.w	r8, r8
 80145ce:	fb1b fb07 	smulbb	fp, fp, r7
 80145d2:	fb09 b908 	mla	r9, r9, r8, fp
 80145d6:	fa1f f989 	uxth.w	r9, r9
 80145da:	f109 0b01 	add.w	fp, r9, #1
 80145de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80145e2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80145e6:	fb1b fb08 	smulbb	fp, fp, r8
 80145ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80145ee:	f805 9c03 	strb.w	r9, [r5, #-3]
 80145f2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80145f6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80145fa:	fb09 b907 	mla	r9, r9, r7, fp
 80145fe:	fa1f f989 	uxth.w	r9, r9
 8014602:	f109 0b01 	add.w	fp, r9, #1
 8014606:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801460a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801460e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014612:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8014616:	fb19 f808 	smulbb	r8, r9, r8
 801461a:	fb06 8607 	mla	r6, r6, r7, r8
 801461e:	b2b6      	uxth	r6, r6
 8014620:	f106 0801 	add.w	r8, r6, #1
 8014624:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8014628:	ea4f 2828 	mov.w	r8, r8, asr #8
 801462c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014630:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014632:	4470      	add	r0, lr
 8014634:	3503      	adds	r5, #3
 8014636:	f10a 3aff 	add.w	sl, sl, #4294967295
 801463a:	4432      	add	r2, r6
 801463c:	e7a7      	b.n	801458e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801463e:	2600      	movs	r6, #0
 8014640:	1b9d      	subs	r5, r3, r6
 8014642:	2d00      	cmp	r5, #0
 8014644:	dc3b      	bgt.n	80146be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801464a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801464e:	441c      	add	r4, r3
 8014650:	2900      	cmp	r1, #0
 8014652:	f340 80a8 	ble.w	80147a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014656:	ee30 0a04 	vadd.f32	s0, s0, s8
 801465a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801465c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014660:	3901      	subs	r1, #1
 8014662:	eeb0 6a62 	vmov.f32	s12, s5
 8014666:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801466a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801466e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014672:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014676:	eeb0 6a43 	vmov.f32	s12, s6
 801467a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801467e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014682:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014686:	ee61 7a27 	vmul.f32	s15, s2, s15
 801468a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801468e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014692:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014696:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801469a:	ee12 2a90 	vmov	r2, s5
 801469e:	eef0 2a47 	vmov.f32	s5, s14
 80146a2:	fb92 fef3 	sdiv	lr, r2, r3
 80146a6:	ee13 2a10 	vmov	r2, s6
 80146aa:	eeb0 3a67 	vmov.f32	s6, s15
 80146ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80146b2:	9a03      	ldr	r2, [sp, #12]
 80146b4:	9312      	str	r3, [sp, #72]	; 0x48
 80146b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146b8:	bf08      	it	eq
 80146ba:	4613      	moveq	r3, r2
 80146bc:	e736      	b.n	801452c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80146be:	ea5f 4820 	movs.w	r8, r0, asr #16
 80146c2:	d457      	bmi.n	8014774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80146c4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80146c8:	4547      	cmp	r7, r8
 80146ca:	dd53      	ble.n	8014774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80146cc:	ea5f 4922 	movs.w	r9, r2, asr #16
 80146d0:	d450      	bmi.n	8014774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80146d2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80146d6:	454d      	cmp	r5, r9
 80146d8:	dd4c      	ble.n	8014774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80146da:	9d01      	ldr	r5, [sp, #4]
 80146dc:	b23f      	sxth	r7, r7
 80146de:	fb09 5707 	mla	r7, r9, r7, r5
 80146e2:	f817 5008 	ldrb.w	r5, [r7, r8]
 80146e6:	9f02      	ldr	r7, [sp, #8]
 80146e8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80146ec:	0e2f      	lsrs	r7, r5, #24
 80146ee:	2fff      	cmp	r7, #255	; 0xff
 80146f0:	d045      	beq.n	801477e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80146f2:	fa5f f987 	uxtb.w	r9, r7
 80146f6:	b3ef      	cbz	r7, 8014774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80146f8:	fa1f f889 	uxth.w	r8, r9
 80146fc:	ea6f 0909 	mvn.w	r9, r9
 8014700:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014704:	fa5f fb85 	uxtb.w	fp, r5
 8014708:	f814 a007 	ldrb.w	sl, [r4, r7]
 801470c:	fa5f f989 	uxtb.w	r9, r9
 8014710:	fb1b fb08 	smulbb	fp, fp, r8
 8014714:	fb0a ba09 	mla	sl, sl, r9, fp
 8014718:	fa1f fa8a 	uxth.w	sl, sl
 801471c:	f10a 0b01 	add.w	fp, sl, #1
 8014720:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014724:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014728:	f804 a007 	strb.w	sl, [r4, r7]
 801472c:	4427      	add	r7, r4
 801472e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014732:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8014736:	f897 b001 	ldrb.w	fp, [r7, #1]
 801473a:	fb1b fb09 	smulbb	fp, fp, r9
 801473e:	fb0a ba08 	mla	sl, sl, r8, fp
 8014742:	fa1f fa8a 	uxth.w	sl, sl
 8014746:	f10a 0b01 	add.w	fp, sl, #1
 801474a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801474e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014752:	f887 a001 	strb.w	sl, [r7, #1]
 8014756:	f897 a002 	ldrb.w	sl, [r7, #2]
 801475a:	fb1a f909 	smulbb	r9, sl, r9
 801475e:	fb05 9508 	mla	r5, r5, r8, r9
 8014762:	b2ad      	uxth	r5, r5
 8014764:	f105 0901 	add.w	r9, r5, #1
 8014768:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801476c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014770:	f887 9002 	strb.w	r9, [r7, #2]
 8014774:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014776:	4470      	add	r0, lr
 8014778:	3601      	adds	r6, #1
 801477a:	442a      	add	r2, r5
 801477c:	e760      	b.n	8014640 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801477e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014782:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8014786:	55e5      	strb	r5, [r4, r7]
 8014788:	4427      	add	r7, r4
 801478a:	0c2d      	lsrs	r5, r5, #16
 801478c:	f887 8001 	strb.w	r8, [r7, #1]
 8014790:	70bd      	strb	r5, [r7, #2]
 8014792:	e7ef      	b.n	8014774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014794:	0a37      	lsrs	r7, r6, #8
 8014796:	f805 6c03 	strb.w	r6, [r5, #-3]
 801479a:	0c36      	lsrs	r6, r6, #16
 801479c:	f805 7c02 	strb.w	r7, [r5, #-2]
 80147a0:	f805 6c01 	strb.w	r6, [r5, #-1]
 80147a4:	e744      	b.n	8014630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80147a6:	b005      	add	sp, #20
 80147a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080147ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80147ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80147b2:	9201      	str	r2, [sp, #4]
 80147b4:	6870      	ldr	r0, [r6, #4]
 80147b6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80147ba:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80147be:	fa1f fe85 	uxth.w	lr, r5
 80147c2:	43ed      	mvns	r5, r5
 80147c4:	f8dc 8000 	ldr.w	r8, [ip]
 80147c8:	b2ed      	uxtb	r5, r5
 80147ca:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80147ce:	fb00 2404 	mla	r4, r0, r4, r2
 80147d2:	6832      	ldr	r2, [r6, #0]
 80147d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80147d8:	4414      	add	r4, r2
 80147da:	2900      	cmp	r1, #0
 80147dc:	dc03      	bgt.n	80147e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80147de:	9a01      	ldr	r2, [sp, #4]
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	f340 810d 	ble.w	8014a00 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80147e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147e8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80147ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80147f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80147f2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80147f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	dd0e      	ble.n	801481c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80147fe:	1406      	asrs	r6, r0, #16
 8014800:	d405      	bmi.n	801480e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014802:	4556      	cmp	r6, sl
 8014804:	da03      	bge.n	801480e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014806:	1416      	asrs	r6, r2, #16
 8014808:	d401      	bmi.n	801480e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801480a:	454e      	cmp	r6, r9
 801480c:	db07      	blt.n	801481e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801480e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014810:	3b01      	subs	r3, #1
 8014812:	3403      	adds	r4, #3
 8014814:	4430      	add	r0, r6
 8014816:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014818:	4432      	add	r2, r6
 801481a:	e7ee      	b.n	80147fa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801481c:	d060      	beq.n	80148e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801481e:	1e5e      	subs	r6, r3, #1
 8014820:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014822:	fb07 0706 	mla	r7, r7, r6, r0
 8014826:	143f      	asrs	r7, r7, #16
 8014828:	d451      	bmi.n	80148ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801482a:	4557      	cmp	r7, sl
 801482c:	da4f      	bge.n	80148ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801482e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014830:	fb07 2606 	mla	r6, r7, r6, r2
 8014834:	1436      	asrs	r6, r6, #16
 8014836:	d44a      	bmi.n	80148ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014838:	454e      	cmp	r6, r9
 801483a:	da48      	bge.n	80148ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801483c:	1ce6      	adds	r6, r4, #3
 801483e:	4699      	mov	r9, r3
 8014840:	f1b9 0f00 	cmp.w	r9, #0
 8014844:	f106 0603 	add.w	r6, r6, #3
 8014848:	dd45      	ble.n	80148d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801484a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801484e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014852:	1417      	asrs	r7, r2, #16
 8014854:	f109 39ff 	add.w	r9, r9, #4294967295
 8014858:	fb0b a707 	mla	r7, fp, r7, sl
 801485c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014860:	fb1b fb05 	smulbb	fp, fp, r5
 8014864:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014868:	eb08 0a07 	add.w	sl, r8, r7
 801486c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8014870:	fb07 b70e 	mla	r7, r7, lr, fp
 8014874:	b2bf      	uxth	r7, r7
 8014876:	f107 0b01 	add.w	fp, r7, #1
 801487a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801487e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8014882:	fb1b fb05 	smulbb	fp, fp, r5
 8014886:	123f      	asrs	r7, r7, #8
 8014888:	f806 7c06 	strb.w	r7, [r6, #-6]
 801488c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014890:	fb07 b70e 	mla	r7, r7, lr, fp
 8014894:	b2bf      	uxth	r7, r7
 8014896:	f107 0b01 	add.w	fp, r7, #1
 801489a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801489e:	123f      	asrs	r7, r7, #8
 80148a0:	f806 7c05 	strb.w	r7, [r6, #-5]
 80148a4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80148a8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80148ac:	fb1a fa05 	smulbb	sl, sl, r5
 80148b0:	fb07 a70e 	mla	r7, r7, lr, sl
 80148b4:	b2bf      	uxth	r7, r7
 80148b6:	f107 0a01 	add.w	sl, r7, #1
 80148ba:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80148be:	123f      	asrs	r7, r7, #8
 80148c0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80148c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80148c6:	4438      	add	r0, r7
 80148c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80148ca:	443a      	add	r2, r7
 80148cc:	e7b8      	b.n	8014840 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80148ce:	2700      	movs	r7, #0
 80148d0:	1bde      	subs	r6, r3, r7
 80148d2:	2e00      	cmp	r6, #0
 80148d4:	dc3f      	bgt.n	8014956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80148d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80148da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80148de:	441c      	add	r4, r3
 80148e0:	2900      	cmp	r1, #0
 80148e2:	f340 808d 	ble.w	8014a00 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80148e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80148ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80148f0:	3901      	subs	r1, #1
 80148f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80148f6:	eef0 6a62 	vmov.f32	s13, s5
 80148fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80148fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014902:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014906:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801490a:	eef0 6a43 	vmov.f32	s13, s6
 801490e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014912:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8014916:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801491a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801491e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014922:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014926:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801492a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801492e:	ee12 2a90 	vmov	r2, s5
 8014932:	eef0 2a47 	vmov.f32	s5, s14
 8014936:	fb92 f3f3 	sdiv	r3, r2, r3
 801493a:	ee13 2a10 	vmov	r2, s6
 801493e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014942:	eeb0 3a67 	vmov.f32	s6, s15
 8014946:	fb92 f3f3 	sdiv	r3, r2, r3
 801494a:	9a01      	ldr	r2, [sp, #4]
 801494c:	9310      	str	r3, [sp, #64]	; 0x40
 801494e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014950:	bf08      	it	eq
 8014952:	4613      	moveq	r3, r2
 8014954:	e741      	b.n	80147da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8014956:	ea5f 4920 	movs.w	r9, r0, asr #16
 801495a:	d44b      	bmi.n	80149f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801495c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8014960:	45cb      	cmp	fp, r9
 8014962:	dd47      	ble.n	80149f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014964:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014968:	d444      	bmi.n	80149f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801496a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801496e:	4556      	cmp	r6, sl
 8014970:	dd40      	ble.n	80149f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014972:	fa0f f68b 	sxth.w	r6, fp
 8014976:	fb0a 9906 	mla	r9, sl, r6, r9
 801497a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801497e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014982:	f814 b006 	ldrb.w	fp, [r4, r6]
 8014986:	fb1b fb05 	smulbb	fp, fp, r5
 801498a:	eb08 0a09 	add.w	sl, r8, r9
 801498e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8014992:	fb09 b90e 	mla	r9, r9, lr, fp
 8014996:	fa1f f989 	uxth.w	r9, r9
 801499a:	f109 0b01 	add.w	fp, r9, #1
 801499e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80149a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80149a6:	f804 9006 	strb.w	r9, [r4, r6]
 80149aa:	4426      	add	r6, r4
 80149ac:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80149b0:	f896 b001 	ldrb.w	fp, [r6, #1]
 80149b4:	fb1b fb05 	smulbb	fp, fp, r5
 80149b8:	fb09 b90e 	mla	r9, r9, lr, fp
 80149bc:	fa1f f989 	uxth.w	r9, r9
 80149c0:	f109 0b01 	add.w	fp, r9, #1
 80149c4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80149c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80149cc:	f886 9001 	strb.w	r9, [r6, #1]
 80149d0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80149d4:	f896 a002 	ldrb.w	sl, [r6, #2]
 80149d8:	fb1a fa05 	smulbb	sl, sl, r5
 80149dc:	fb09 a90e 	mla	r9, r9, lr, sl
 80149e0:	fa1f f989 	uxth.w	r9, r9
 80149e4:	f109 0a01 	add.w	sl, r9, #1
 80149e8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80149ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 80149f0:	f886 9002 	strb.w	r9, [r6, #2]
 80149f4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80149f6:	3701      	adds	r7, #1
 80149f8:	4430      	add	r0, r6
 80149fa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80149fc:	4432      	add	r2, r6
 80149fe:	e767      	b.n	80148d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8014a00:	b003      	add	sp, #12
 8014a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014a06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a0a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a10:	9201      	str	r2, [sp, #4]
 8014a12:	6868      	ldr	r0, [r5, #4]
 8014a14:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014a16:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014a1a:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8014a1e:	fb00 2404 	mla	r4, r0, r4, r2
 8014a22:	682a      	ldr	r2, [r5, #0]
 8014a24:	f8d7 8000 	ldr.w	r8, [r7]
 8014a28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014a2c:	4414      	add	r4, r2
 8014a2e:	2900      	cmp	r1, #0
 8014a30:	dc03      	bgt.n	8014a3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014a32:	9a01      	ldr	r2, [sp, #4]
 8014a34:	2a00      	cmp	r2, #0
 8014a36:	f340 80af 	ble.w	8014b98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014a3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a3c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8014a40:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a46:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8014a4a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	dd0c      	ble.n	8014a6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014a52:	1405      	asrs	r5, r0, #16
 8014a54:	d405      	bmi.n	8014a62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014a56:	4555      	cmp	r5, sl
 8014a58:	da03      	bge.n	8014a62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014a5a:	1415      	asrs	r5, r2, #16
 8014a5c:	d401      	bmi.n	8014a62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014a5e:	454d      	cmp	r5, r9
 8014a60:	db05      	blt.n	8014a6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014a62:	4470      	add	r0, lr
 8014a64:	4462      	add	r2, ip
 8014a66:	3b01      	subs	r3, #1
 8014a68:	3403      	adds	r4, #3
 8014a6a:	e7f0      	b.n	8014a4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014a6c:	d038      	beq.n	8014ae0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014a6e:	1e5d      	subs	r5, r3, #1
 8014a70:	fb0e 0605 	mla	r6, lr, r5, r0
 8014a74:	1436      	asrs	r6, r6, #16
 8014a76:	d42a      	bmi.n	8014ace <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014a78:	4556      	cmp	r6, sl
 8014a7a:	da28      	bge.n	8014ace <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014a7c:	fb0c 2505 	mla	r5, ip, r5, r2
 8014a80:	142d      	asrs	r5, r5, #16
 8014a82:	d424      	bmi.n	8014ace <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014a84:	454d      	cmp	r5, r9
 8014a86:	da22      	bge.n	8014ace <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014a88:	1ce6      	adds	r6, r4, #3
 8014a8a:	4699      	mov	r9, r3
 8014a8c:	f1b9 0f00 	cmp.w	r9, #0
 8014a90:	f106 0603 	add.w	r6, r6, #3
 8014a94:	dd1f      	ble.n	8014ad6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8014a96:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8014a9a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014a9e:	1415      	asrs	r5, r2, #16
 8014aa0:	4470      	add	r0, lr
 8014aa2:	4462      	add	r2, ip
 8014aa4:	f109 39ff 	add.w	r9, r9, #4294967295
 8014aa8:	fb0b a505 	mla	r5, fp, r5, sl
 8014aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ab0:	eb08 0a05 	add.w	sl, r8, r5
 8014ab4:	f818 5005 	ldrb.w	r5, [r8, r5]
 8014ab8:	f806 5c06 	strb.w	r5, [r6, #-6]
 8014abc:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8014ac0:	f806 5c05 	strb.w	r5, [r6, #-5]
 8014ac4:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8014ac8:	f806 5c04 	strb.w	r5, [r6, #-4]
 8014acc:	e7de      	b.n	8014a8c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8014ace:	2600      	movs	r6, #0
 8014ad0:	1b9d      	subs	r5, r3, r6
 8014ad2:	2d00      	cmp	r5, #0
 8014ad4:	dc38      	bgt.n	8014b48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ade:	441c      	add	r4, r3
 8014ae0:	2900      	cmp	r1, #0
 8014ae2:	dd59      	ble.n	8014b98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014ae4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014aee:	3901      	subs	r1, #1
 8014af0:	eeb0 6a62 	vmov.f32	s12, s5
 8014af4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014af8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014afc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b00:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014b04:	eeb0 6a43 	vmov.f32	s12, s6
 8014b08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b0c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014b10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014b14:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014b18:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014b1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014b20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014b24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014b28:	ee12 2a90 	vmov	r2, s5
 8014b2c:	eef0 2a47 	vmov.f32	s5, s14
 8014b30:	fb92 fef3 	sdiv	lr, r2, r3
 8014b34:	ee13 2a10 	vmov	r2, s6
 8014b38:	eeb0 3a67 	vmov.f32	s6, s15
 8014b3c:	fb92 fcf3 	sdiv	ip, r2, r3
 8014b40:	9a01      	ldr	r2, [sp, #4]
 8014b42:	bf08      	it	eq
 8014b44:	4613      	moveq	r3, r2
 8014b46:	e772      	b.n	8014a2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8014b48:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014b4c:	d420      	bmi.n	8014b90 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b4e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8014b52:	45cb      	cmp	fp, r9
 8014b54:	dd1c      	ble.n	8014b90 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b56:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014b5a:	d419      	bmi.n	8014b90 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b5c:	68fd      	ldr	r5, [r7, #12]
 8014b5e:	4555      	cmp	r5, sl
 8014b60:	dd16      	ble.n	8014b90 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b62:	fa0f f58b 	sxth.w	r5, fp
 8014b66:	fb0a 9505 	mla	r5, sl, r5, r9
 8014b6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b6e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8014b72:	eb08 0b05 	add.w	fp, r8, r5
 8014b76:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8014b7a:	f804 9005 	strb.w	r9, [r4, r5]
 8014b7e:	4425      	add	r5, r4
 8014b80:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8014b84:	f885 9001 	strb.w	r9, [r5, #1]
 8014b88:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8014b8c:	f885 9002 	strb.w	r9, [r5, #2]
 8014b90:	4470      	add	r0, lr
 8014b92:	4462      	add	r2, ip
 8014b94:	3601      	adds	r6, #1
 8014b96:	e79b      	b.n	8014ad0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8014b98:	b003      	add	sp, #12
 8014b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba2:	b085      	sub	sp, #20
 8014ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ba8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014baa:	9202      	str	r2, [sp, #8]
 8014bac:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8014bb0:	6860      	ldr	r0, [r4, #4]
 8014bb2:	9203      	str	r2, [sp, #12]
 8014bb4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014bb8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014bbc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014bc0:	fb00 2505 	mla	r5, r0, r5, r2
 8014bc4:	6822      	ldr	r2, [r4, #0]
 8014bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bca:	4415      	add	r5, r2
 8014bcc:	f8dc 2000 	ldr.w	r2, [ip]
 8014bd0:	9201      	str	r2, [sp, #4]
 8014bd2:	2900      	cmp	r1, #0
 8014bd4:	dc03      	bgt.n	8014bde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8014bd6:	9a02      	ldr	r2, [sp, #8]
 8014bd8:	2a00      	cmp	r2, #0
 8014bda:	f340 8122 	ble.w	8014e22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8014bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014be0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014be4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014be8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014bea:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014bee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	dd0d      	ble.n	8014c12 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8014bf6:	1422      	asrs	r2, r4, #16
 8014bf8:	d405      	bmi.n	8014c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014bfa:	4542      	cmp	r2, r8
 8014bfc:	da03      	bge.n	8014c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014bfe:	1402      	asrs	r2, r0, #16
 8014c00:	d401      	bmi.n	8014c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014c02:	42ba      	cmp	r2, r7
 8014c04:	db06      	blt.n	8014c14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c08:	4474      	add	r4, lr
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	3503      	adds	r5, #3
 8014c0e:	4410      	add	r0, r2
 8014c10:	e7ef      	b.n	8014bf2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8014c12:	d072      	beq.n	8014cfa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8014c14:	1e5a      	subs	r2, r3, #1
 8014c16:	fb0e 4602 	mla	r6, lr, r2, r4
 8014c1a:	1436      	asrs	r6, r6, #16
 8014c1c:	d462      	bmi.n	8014ce4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c1e:	4546      	cmp	r6, r8
 8014c20:	da60      	bge.n	8014ce4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c22:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014c24:	fb06 0202 	mla	r2, r6, r2, r0
 8014c28:	1412      	asrs	r2, r2, #16
 8014c2a:	d45b      	bmi.n	8014ce4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c2c:	42ba      	cmp	r2, r7
 8014c2e:	da59      	bge.n	8014ce4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c30:	1cef      	adds	r7, r5, #3
 8014c32:	4699      	mov	r9, r3
 8014c34:	f1b9 0f00 	cmp.w	r9, #0
 8014c38:	dd5a      	ble.n	8014cf0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014c3a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014c3e:	1426      	asrs	r6, r4, #16
 8014c40:	1402      	asrs	r2, r0, #16
 8014c42:	fb08 6202 	mla	r2, r8, r2, r6
 8014c46:	9e01      	ldr	r6, [sp, #4]
 8014c48:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014c4c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8014c50:	d041      	beq.n	8014cd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014c52:	9a03      	ldr	r2, [sp, #12]
 8014c54:	fa5f fb86 	uxtb.w	fp, r6
 8014c58:	fb02 f808 	mul.w	r8, r2, r8
 8014c5c:	f108 0201 	add.w	r2, r8, #1
 8014c60:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8014c64:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014c68:	1212      	asrs	r2, r2, #8
 8014c6a:	fa1f fa82 	uxth.w	sl, r2
 8014c6e:	43d2      	mvns	r2, r2
 8014c70:	fb1b fb0a 	smulbb	fp, fp, sl
 8014c74:	b2d2      	uxtb	r2, r2
 8014c76:	fb08 b802 	mla	r8, r8, r2, fp
 8014c7a:	fa1f f888 	uxth.w	r8, r8
 8014c7e:	f108 0b01 	add.w	fp, r8, #1
 8014c82:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014c86:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014c8a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014c8e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014c92:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014c96:	fb16 fa0a 	smulbb	sl, r6, sl
 8014c9a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014c9e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8014ca2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014ca6:	fb06 aa02 	mla	sl, r6, r2, sl
 8014caa:	fb08 b802 	mla	r8, r8, r2, fp
 8014cae:	fa1f fa8a 	uxth.w	sl, sl
 8014cb2:	fa1f f888 	uxth.w	r8, r8
 8014cb6:	f10a 0601 	add.w	r6, sl, #1
 8014cba:	f108 0b01 	add.w	fp, r8, #1
 8014cbe:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8014cc2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014cc6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014cca:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014cce:	f807 ac01 	strb.w	sl, [r7, #-1]
 8014cd2:	f807 8c02 	strb.w	r8, [r7, #-2]
 8014cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cd8:	4474      	add	r4, lr
 8014cda:	3703      	adds	r7, #3
 8014cdc:	f109 39ff 	add.w	r9, r9, #4294967295
 8014ce0:	4410      	add	r0, r2
 8014ce2:	e7a7      	b.n	8014c34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014ce4:	f04f 0800 	mov.w	r8, #0
 8014ce8:	eba3 0208 	sub.w	r2, r3, r8
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	dc3b      	bgt.n	8014d68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014cf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014cf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014cf8:	441d      	add	r5, r3
 8014cfa:	2900      	cmp	r1, #0
 8014cfc:	f340 8091 	ble.w	8014e22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8014d00:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d06:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014d0a:	3901      	subs	r1, #1
 8014d0c:	eeb0 6a62 	vmov.f32	s12, s5
 8014d10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014d14:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014d18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d1c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014d20:	eeb0 6a43 	vmov.f32	s12, s6
 8014d24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d28:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014d2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014d30:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014d34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014d38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014d3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014d40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014d44:	ee12 2a90 	vmov	r2, s5
 8014d48:	eef0 2a47 	vmov.f32	s5, s14
 8014d4c:	fb92 fef3 	sdiv	lr, r2, r3
 8014d50:	ee13 2a10 	vmov	r2, s6
 8014d54:	eeb0 3a67 	vmov.f32	s6, s15
 8014d58:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d5c:	9a02      	ldr	r2, [sp, #8]
 8014d5e:	9312      	str	r3, [sp, #72]	; 0x48
 8014d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d62:	bf08      	it	eq
 8014d64:	4613      	moveq	r3, r2
 8014d66:	e734      	b.n	8014bd2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014d68:	1427      	asrs	r7, r4, #16
 8014d6a:	d454      	bmi.n	8014e16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014d6c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014d70:	42be      	cmp	r6, r7
 8014d72:	dd50      	ble.n	8014e16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014d74:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014d78:	d44d      	bmi.n	8014e16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014d7a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014d7e:	454a      	cmp	r2, r9
 8014d80:	dd49      	ble.n	8014e16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014d82:	b236      	sxth	r6, r6
 8014d84:	9a01      	ldr	r2, [sp, #4]
 8014d86:	fb09 7606 	mla	r6, r9, r6, r7
 8014d8a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8014d8e:	0e3a      	lsrs	r2, r7, #24
 8014d90:	d041      	beq.n	8014e16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014d92:	9e03      	ldr	r6, [sp, #12]
 8014d94:	fa5f fb87 	uxtb.w	fp, r7
 8014d98:	4372      	muls	r2, r6
 8014d9a:	1c56      	adds	r6, r2, #1
 8014d9c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014da0:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014da4:	1212      	asrs	r2, r2, #8
 8014da6:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014daa:	fa1f fa82 	uxth.w	sl, r2
 8014dae:	43d2      	mvns	r2, r2
 8014db0:	fb1b fb0a 	smulbb	fp, fp, sl
 8014db4:	b2d2      	uxtb	r2, r2
 8014db6:	fb09 b902 	mla	r9, r9, r2, fp
 8014dba:	fa1f f989 	uxth.w	r9, r9
 8014dbe:	f109 0b01 	add.w	fp, r9, #1
 8014dc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014dc6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014dca:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014dce:	fb1b fb0a 	smulbb	fp, fp, sl
 8014dd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014dd6:	fb17 fa0a 	smulbb	sl, r7, sl
 8014dda:	f805 9006 	strb.w	r9, [r5, r6]
 8014dde:	442e      	add	r6, r5
 8014de0:	78b7      	ldrb	r7, [r6, #2]
 8014de2:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014de6:	fb07 aa02 	mla	sl, r7, r2, sl
 8014dea:	fb09 b902 	mla	r9, r9, r2, fp
 8014dee:	fa1f fa8a 	uxth.w	sl, sl
 8014df2:	fa1f f989 	uxth.w	r9, r9
 8014df6:	f10a 0701 	add.w	r7, sl, #1
 8014dfa:	f109 0b01 	add.w	fp, r9, #1
 8014dfe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014e02:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014e06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014e0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e0e:	f886 a002 	strb.w	sl, [r6, #2]
 8014e12:	f886 9001 	strb.w	r9, [r6, #1]
 8014e16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e18:	4474      	add	r4, lr
 8014e1a:	f108 0801 	add.w	r8, r8, #1
 8014e1e:	4410      	add	r0, r2
 8014e20:	e762      	b.n	8014ce8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014e22:	b005      	add	sp, #20
 8014e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e32:	9201      	str	r2, [sp, #4]
 8014e34:	6860      	ldr	r0, [r4, #4]
 8014e36:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014e3a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8014e3e:	fb00 2505 	mla	r5, r0, r5, r2
 8014e42:	6822      	ldr	r2, [r4, #0]
 8014e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e48:	4415      	add	r5, r2
 8014e4a:	f8dc 2000 	ldr.w	r2, [ip]
 8014e4e:	9200      	str	r2, [sp, #0]
 8014e50:	2900      	cmp	r1, #0
 8014e52:	dc03      	bgt.n	8014e5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014e54:	9a01      	ldr	r2, [sp, #4]
 8014e56:	2a00      	cmp	r2, #0
 8014e58:	f340 812b 	ble.w	80150b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014e5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e5e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014e62:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e68:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014e6c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	dd0e      	ble.n	8014e92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014e74:	1422      	asrs	r2, r4, #16
 8014e76:	d405      	bmi.n	8014e84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014e78:	4572      	cmp	r2, lr
 8014e7a:	da03      	bge.n	8014e84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014e7c:	1402      	asrs	r2, r0, #16
 8014e7e:	d401      	bmi.n	8014e84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014e80:	42ba      	cmp	r2, r7
 8014e82:	db07      	blt.n	8014e94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014e84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e86:	3b01      	subs	r3, #1
 8014e88:	3503      	adds	r5, #3
 8014e8a:	4414      	add	r4, r2
 8014e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e8e:	4410      	add	r0, r2
 8014e90:	e7ee      	b.n	8014e70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014e92:	d06f      	beq.n	8014f74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8014e94:	1e5a      	subs	r2, r3, #1
 8014e96:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014e98:	fb06 4602 	mla	r6, r6, r2, r4
 8014e9c:	1436      	asrs	r6, r6, #16
 8014e9e:	d45e      	bmi.n	8014f5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014ea0:	4576      	cmp	r6, lr
 8014ea2:	da5c      	bge.n	8014f5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014ea4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014ea6:	fb06 0202 	mla	r2, r6, r2, r0
 8014eaa:	1412      	asrs	r2, r2, #16
 8014eac:	d457      	bmi.n	8014f5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014eae:	42ba      	cmp	r2, r7
 8014eb0:	da55      	bge.n	8014f5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014eb2:	1cee      	adds	r6, r5, #3
 8014eb4:	469a      	mov	sl, r3
 8014eb6:	f1ba 0f00 	cmp.w	sl, #0
 8014eba:	dd56      	ble.n	8014f6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014ebc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014ec0:	1427      	asrs	r7, r4, #16
 8014ec2:	1402      	asrs	r2, r0, #16
 8014ec4:	fb0e 7202 	mla	r2, lr, r2, r7
 8014ec8:	9f00      	ldr	r7, [sp, #0]
 8014eca:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8014ece:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8014ed2:	d03c      	beq.n	8014f4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014ed4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014ed8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014edc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014ee0:	fa5f f28e 	uxtb.w	r2, lr
 8014ee4:	b2ff      	uxtb	r7, r7
 8014ee6:	f000 80dd 	beq.w	80150a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8014eea:	fa1f f882 	uxth.w	r8, r2
 8014eee:	43d2      	mvns	r2, r2
 8014ef0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8014ef4:	fb17 f708 	smulbb	r7, r7, r8
 8014ef8:	b2d2      	uxtb	r2, r2
 8014efa:	fb19 f908 	smulbb	r9, r9, r8
 8014efe:	fb0e 7702 	mla	r7, lr, r2, r7
 8014f02:	fb1b f808 	smulbb	r8, fp, r8
 8014f06:	b2bf      	uxth	r7, r7
 8014f08:	f107 0e01 	add.w	lr, r7, #1
 8014f0c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014f10:	123f      	asrs	r7, r7, #8
 8014f12:	f806 7c03 	strb.w	r7, [r6, #-3]
 8014f16:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8014f1a:	fb07 9902 	mla	r9, r7, r2, r9
 8014f1e:	fa1f f989 	uxth.w	r9, r9
 8014f22:	f109 0701 	add.w	r7, r9, #1
 8014f26:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014f2a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8014f2e:	fb07 8802 	mla	r8, r7, r2, r8
 8014f32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014f36:	fa1f f888 	uxth.w	r8, r8
 8014f3a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8014f3e:	f108 0201 	add.w	r2, r8, #1
 8014f42:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014f46:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014f4a:	f806 8c01 	strb.w	r8, [r6, #-1]
 8014f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f50:	3603      	adds	r6, #3
 8014f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f56:	4414      	add	r4, r2
 8014f58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f5a:	4410      	add	r0, r2
 8014f5c:	e7ab      	b.n	8014eb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8014f5e:	f04f 0e00 	mov.w	lr, #0
 8014f62:	eba3 020e 	sub.w	r2, r3, lr
 8014f66:	2a00      	cmp	r2, #0
 8014f68:	dc3d      	bgt.n	8014fe6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8014f6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014f6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014f72:	441d      	add	r5, r3
 8014f74:	2900      	cmp	r1, #0
 8014f76:	f340 809c 	ble.w	80150b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014f7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014f84:	3901      	subs	r1, #1
 8014f86:	eeb0 6a62 	vmov.f32	s12, s5
 8014f8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014f8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014f92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014f96:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014f9a:	eeb0 6a43 	vmov.f32	s12, s6
 8014f9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014fa2:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014fa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014faa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014fae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014fb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014fb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014fba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014fbe:	ee12 2a90 	vmov	r2, s5
 8014fc2:	eef0 2a47 	vmov.f32	s5, s14
 8014fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fca:	ee13 2a10 	vmov	r2, s6
 8014fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd2:	eeb0 3a67 	vmov.f32	s6, s15
 8014fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fda:	9a01      	ldr	r2, [sp, #4]
 8014fdc:	9310      	str	r3, [sp, #64]	; 0x40
 8014fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fe0:	bf08      	it	eq
 8014fe2:	4613      	moveq	r3, r2
 8014fe4:	e734      	b.n	8014e50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8014fe6:	1427      	asrs	r7, r4, #16
 8014fe8:	d44d      	bmi.n	8015086 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014fea:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014fee:	42be      	cmp	r6, r7
 8014ff0:	dd49      	ble.n	8015086 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014ff2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014ff6:	d446      	bmi.n	8015086 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8014ff8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014ffc:	4542      	cmp	r2, r8
 8014ffe:	dd42      	ble.n	8015086 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015000:	b236      	sxth	r6, r6
 8015002:	9a00      	ldr	r2, [sp, #0]
 8015004:	fb08 7606 	mla	r6, r8, r6, r7
 8015008:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801500c:	0e3a      	lsrs	r2, r7, #24
 801500e:	d03a      	beq.n	8015086 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015010:	2aff      	cmp	r2, #255	; 0xff
 8015012:	b2d6      	uxtb	r6, r2
 8015014:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015018:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801501c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8015020:	b2ff      	uxtb	r7, r7
 8015022:	d037      	beq.n	8015094 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8015024:	fa1f f986 	uxth.w	r9, r6
 8015028:	4472      	add	r2, lr
 801502a:	43f6      	mvns	r6, r6
 801502c:	f815 8002 	ldrb.w	r8, [r5, r2]
 8015030:	fb17 f709 	smulbb	r7, r7, r9
 8015034:	fb1a fa09 	smulbb	sl, sl, r9
 8015038:	b2f6      	uxtb	r6, r6
 801503a:	fb1b f909 	smulbb	r9, fp, r9
 801503e:	fb08 7706 	mla	r7, r8, r6, r7
 8015042:	b2bf      	uxth	r7, r7
 8015044:	f107 0801 	add.w	r8, r7, #1
 8015048:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801504c:	123f      	asrs	r7, r7, #8
 801504e:	54af      	strb	r7, [r5, r2]
 8015050:	442a      	add	r2, r5
 8015052:	7857      	ldrb	r7, [r2, #1]
 8015054:	fb07 aa06 	mla	sl, r7, r6, sl
 8015058:	fa1f fa8a 	uxth.w	sl, sl
 801505c:	f10a 0701 	add.w	r7, sl, #1
 8015060:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015064:	7897      	ldrb	r7, [r2, #2]
 8015066:	fb07 9906 	mla	r9, r7, r6, r9
 801506a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801506e:	fa1f f989 	uxth.w	r9, r9
 8015072:	f882 a001 	strb.w	sl, [r2, #1]
 8015076:	f109 0601 	add.w	r6, r9, #1
 801507a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801507e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015082:	f882 9002 	strb.w	r9, [r2, #2]
 8015086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015088:	f10e 0e01 	add.w	lr, lr, #1
 801508c:	4414      	add	r4, r2
 801508e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015090:	4410      	add	r0, r2
 8015092:	e766      	b.n	8014f62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015094:	4472      	add	r2, lr
 8015096:	54af      	strb	r7, [r5, r2]
 8015098:	442a      	add	r2, r5
 801509a:	f882 a001 	strb.w	sl, [r2, #1]
 801509e:	f882 b002 	strb.w	fp, [r2, #2]
 80150a2:	e7f0      	b.n	8015086 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80150a4:	f806 7c03 	strb.w	r7, [r6, #-3]
 80150a8:	f806 9c02 	strb.w	r9, [r6, #-2]
 80150ac:	f806 bc01 	strb.w	fp, [r6, #-1]
 80150b0:	e74d      	b.n	8014f4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80150b2:	b003      	add	sp, #12
 80150b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80150b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150bc:	b087      	sub	sp, #28
 80150be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80150c4:	9204      	str	r2, [sp, #16]
 80150c6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80150ca:	6860      	ldr	r0, [r4, #4]
 80150cc:	9205      	str	r2, [sp, #20]
 80150ce:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80150d2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80150d6:	9101      	str	r1, [sp, #4]
 80150d8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80150dc:	fb00 2505 	mla	r5, r0, r5, r2
 80150e0:	6822      	ldr	r2, [r4, #0]
 80150e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150e6:	4415      	add	r5, r2
 80150e8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80150ec:	3201      	adds	r2, #1
 80150ee:	f022 0201 	bic.w	r2, r2, #1
 80150f2:	9202      	str	r2, [sp, #8]
 80150f4:	f8dc 2000 	ldr.w	r2, [ip]
 80150f8:	9203      	str	r2, [sp, #12]
 80150fa:	9a01      	ldr	r2, [sp, #4]
 80150fc:	2a00      	cmp	r2, #0
 80150fe:	dc03      	bgt.n	8015108 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015100:	9a04      	ldr	r2, [sp, #16]
 8015102:	2a00      	cmp	r2, #0
 8015104:	f340 8135 	ble.w	8015372 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015108:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801510a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801510e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015112:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015114:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015118:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801511c:	2b00      	cmp	r3, #0
 801511e:	dd0d      	ble.n	801513c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015120:	1422      	asrs	r2, r4, #16
 8015122:	d405      	bmi.n	8015130 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015124:	4542      	cmp	r2, r8
 8015126:	da03      	bge.n	8015130 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015128:	1402      	asrs	r2, r0, #16
 801512a:	d401      	bmi.n	8015130 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801512c:	42ba      	cmp	r2, r7
 801512e:	db06      	blt.n	801513e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8015130:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015132:	4474      	add	r4, lr
 8015134:	3b01      	subs	r3, #1
 8015136:	3503      	adds	r5, #3
 8015138:	4410      	add	r0, r2
 801513a:	e7ef      	b.n	801511c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801513c:	d077      	beq.n	801522e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801513e:	1e5a      	subs	r2, r3, #1
 8015140:	fb0e 4602 	mla	r6, lr, r2, r4
 8015144:	1436      	asrs	r6, r6, #16
 8015146:	d469      	bmi.n	801521c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015148:	4546      	cmp	r6, r8
 801514a:	da67      	bge.n	801521c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801514c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801514e:	fb06 0202 	mla	r2, r6, r2, r0
 8015152:	1412      	asrs	r2, r2, #16
 8015154:	d462      	bmi.n	801521c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015156:	42ba      	cmp	r2, r7
 8015158:	da60      	bge.n	801521c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801515a:	1cee      	adds	r6, r5, #3
 801515c:	4699      	mov	r9, r3
 801515e:	f1b9 0f00 	cmp.w	r9, #0
 8015162:	dd5f      	ble.n	8015224 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8015164:	1422      	asrs	r2, r4, #16
 8015166:	9902      	ldr	r1, [sp, #8]
 8015168:	1407      	asrs	r7, r0, #16
 801516a:	fb01 2707 	mla	r7, r1, r7, r2
 801516e:	9903      	ldr	r1, [sp, #12]
 8015170:	087a      	lsrs	r2, r7, #1
 8015172:	5c8a      	ldrb	r2, [r1, r2]
 8015174:	07f9      	lsls	r1, r7, #31
 8015176:	bf54      	ite	pl
 8015178:	f002 020f 	andpl.w	r2, r2, #15
 801517c:	1112      	asrmi	r2, r2, #4
 801517e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015182:	b2d2      	uxtb	r2, r2
 8015184:	2a00      	cmp	r2, #0
 8015186:	d042      	beq.n	801520e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8015188:	497b      	ldr	r1, [pc, #492]	; (8015378 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801518a:	680f      	ldr	r7, [r1, #0]
 801518c:	9905      	ldr	r1, [sp, #20]
 801518e:	fa5f fb87 	uxtb.w	fp, r7
 8015192:	434a      	muls	r2, r1
 8015194:	f102 0801 	add.w	r8, r2, #1
 8015198:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801519c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80151a0:	1212      	asrs	r2, r2, #8
 80151a2:	fa1f fa82 	uxth.w	sl, r2
 80151a6:	43d2      	mvns	r2, r2
 80151a8:	fb1b fb0a 	smulbb	fp, fp, sl
 80151ac:	b2d2      	uxtb	r2, r2
 80151ae:	fb08 b802 	mla	r8, r8, r2, fp
 80151b2:	fa1f f888 	uxth.w	r8, r8
 80151b6:	f108 0b01 	add.w	fp, r8, #1
 80151ba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80151be:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80151c2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80151c6:	fb1b fb0a 	smulbb	fp, fp, sl
 80151ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80151ce:	fb17 fa0a 	smulbb	sl, r7, sl
 80151d2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80151d6:	f806 8c03 	strb.w	r8, [r6, #-3]
 80151da:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80151de:	fb07 aa02 	mla	sl, r7, r2, sl
 80151e2:	fb08 b802 	mla	r8, r8, r2, fp
 80151e6:	fa1f fa8a 	uxth.w	sl, sl
 80151ea:	fa1f f888 	uxth.w	r8, r8
 80151ee:	f10a 0701 	add.w	r7, sl, #1
 80151f2:	f108 0b01 	add.w	fp, r8, #1
 80151f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80151fa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80151fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015202:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015206:	f806 ac01 	strb.w	sl, [r6, #-1]
 801520a:	f806 8c02 	strb.w	r8, [r6, #-2]
 801520e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015210:	4474      	add	r4, lr
 8015212:	3603      	adds	r6, #3
 8015214:	f109 39ff 	add.w	r9, r9, #4294967295
 8015218:	4410      	add	r0, r2
 801521a:	e7a0      	b.n	801515e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801521c:	2700      	movs	r7, #0
 801521e:	1bda      	subs	r2, r3, r7
 8015220:	2a00      	cmp	r2, #0
 8015222:	dc3e      	bgt.n	80152a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8015224:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801522c:	441d      	add	r5, r3
 801522e:	9b01      	ldr	r3, [sp, #4]
 8015230:	2b00      	cmp	r3, #0
 8015232:	f340 809e 	ble.w	8015372 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015236:	ee30 0a04 	vadd.f32	s0, s0, s8
 801523a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801523c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015240:	eeb0 6a62 	vmov.f32	s12, s5
 8015244:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015248:	ee31 1a05 	vadd.f32	s2, s2, s10
 801524c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015250:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015254:	eeb0 6a43 	vmov.f32	s12, s6
 8015258:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801525c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015260:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015264:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015268:	ee77 2a62 	vsub.f32	s5, s14, s5
 801526c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015270:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015274:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015278:	ee12 2a90 	vmov	r2, s5
 801527c:	eef0 2a47 	vmov.f32	s5, s14
 8015280:	fb92 fef3 	sdiv	lr, r2, r3
 8015284:	ee13 2a10 	vmov	r2, s6
 8015288:	eeb0 3a67 	vmov.f32	s6, s15
 801528c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015290:	9314      	str	r3, [sp, #80]	; 0x50
 8015292:	9b01      	ldr	r3, [sp, #4]
 8015294:	9a04      	ldr	r2, [sp, #16]
 8015296:	3b01      	subs	r3, #1
 8015298:	9301      	str	r3, [sp, #4]
 801529a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801529c:	bf08      	it	eq
 801529e:	4613      	moveq	r3, r2
 80152a0:	e72b      	b.n	80150fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80152a2:	1426      	asrs	r6, r4, #16
 80152a4:	d460      	bmi.n	8015368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152a6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80152aa:	42b2      	cmp	r2, r6
 80152ac:	dd5c      	ble.n	8015368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152ae:	ea5f 4820 	movs.w	r8, r0, asr #16
 80152b2:	d459      	bmi.n	8015368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152b4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80152b8:	4542      	cmp	r2, r8
 80152ba:	dd55      	ble.n	8015368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152bc:	9a02      	ldr	r2, [sp, #8]
 80152be:	9903      	ldr	r1, [sp, #12]
 80152c0:	fb08 6602 	mla	r6, r8, r2, r6
 80152c4:	0872      	lsrs	r2, r6, #1
 80152c6:	07f6      	lsls	r6, r6, #31
 80152c8:	5c8a      	ldrb	r2, [r1, r2]
 80152ca:	bf54      	ite	pl
 80152cc:	f002 020f 	andpl.w	r2, r2, #15
 80152d0:	1112      	asrmi	r2, r2, #4
 80152d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80152d6:	b2d2      	uxtb	r2, r2
 80152d8:	2a00      	cmp	r2, #0
 80152da:	d045      	beq.n	8015368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152dc:	4926      	ldr	r1, [pc, #152]	; (8015378 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80152de:	f8d1 8000 	ldr.w	r8, [r1]
 80152e2:	9905      	ldr	r1, [sp, #20]
 80152e4:	fa5f fb88 	uxtb.w	fp, r8
 80152e8:	434a      	muls	r2, r1
 80152ea:	1c56      	adds	r6, r2, #1
 80152ec:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80152f0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80152f4:	1212      	asrs	r2, r2, #8
 80152f6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80152fa:	fa1f fa82 	uxth.w	sl, r2
 80152fe:	43d2      	mvns	r2, r2
 8015300:	fb1b fb0a 	smulbb	fp, fp, sl
 8015304:	b2d2      	uxtb	r2, r2
 8015306:	fb09 b902 	mla	r9, r9, r2, fp
 801530a:	fa1f f989 	uxth.w	r9, r9
 801530e:	f109 0b01 	add.w	fp, r9, #1
 8015312:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015316:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801531a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801531e:	fb1b fb0a 	smulbb	fp, fp, sl
 8015322:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015326:	fb18 fa0a 	smulbb	sl, r8, sl
 801532a:	f805 9006 	strb.w	r9, [r5, r6]
 801532e:	442e      	add	r6, r5
 8015330:	f896 8002 	ldrb.w	r8, [r6, #2]
 8015334:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015338:	fb08 aa02 	mla	sl, r8, r2, sl
 801533c:	fb09 b902 	mla	r9, r9, r2, fp
 8015340:	fa1f fa8a 	uxth.w	sl, sl
 8015344:	fa1f f989 	uxth.w	r9, r9
 8015348:	f10a 0801 	add.w	r8, sl, #1
 801534c:	f109 0b01 	add.w	fp, r9, #1
 8015350:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8015354:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015358:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801535c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015360:	f886 a002 	strb.w	sl, [r6, #2]
 8015364:	f886 9001 	strb.w	r9, [r6, #1]
 8015368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801536a:	4474      	add	r4, lr
 801536c:	3701      	adds	r7, #1
 801536e:	4410      	add	r0, r2
 8015370:	e755      	b.n	801521e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8015372:	b007      	add	sp, #28
 8015374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015378:	24006c6c 	.word	0x24006c6c

0801537c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015380:	b085      	sub	sp, #20
 8015382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015386:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015388:	9203      	str	r2, [sp, #12]
 801538a:	6860      	ldr	r0, [r4, #4]
 801538c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015390:	9100      	str	r1, [sp, #0]
 8015392:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8015396:	fb00 2606 	mla	r6, r0, r6, r2
 801539a:	6822      	ldr	r2, [r4, #0]
 801539c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80153a0:	4416      	add	r6, r2
 80153a2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80153a6:	3201      	adds	r2, #1
 80153a8:	f022 0201 	bic.w	r2, r2, #1
 80153ac:	9201      	str	r2, [sp, #4]
 80153ae:	f8dc 2000 	ldr.w	r2, [ip]
 80153b2:	9202      	str	r2, [sp, #8]
 80153b4:	9a00      	ldr	r2, [sp, #0]
 80153b6:	2a00      	cmp	r2, #0
 80153b8:	dc03      	bgt.n	80153c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80153ba:	9a03      	ldr	r2, [sp, #12]
 80153bc:	2a00      	cmp	r2, #0
 80153be:	f340 8140 	ble.w	8015642 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80153c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153c4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80153c8:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 80153cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153ce:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80153d2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	dd0e      	ble.n	80153f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80153da:	142a      	asrs	r2, r5, #16
 80153dc:	d405      	bmi.n	80153ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80153de:	4572      	cmp	r2, lr
 80153e0:	da03      	bge.n	80153ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80153e2:	1422      	asrs	r2, r4, #16
 80153e4:	d401      	bmi.n	80153ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80153e6:	42ba      	cmp	r2, r7
 80153e8:	db07      	blt.n	80153fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80153ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80153ec:	3b01      	subs	r3, #1
 80153ee:	3603      	adds	r6, #3
 80153f0:	4415      	add	r5, r2
 80153f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153f4:	4414      	add	r4, r2
 80153f6:	e7ee      	b.n	80153d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80153f8:	d072      	beq.n	80154e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80153fa:	1e5a      	subs	r2, r3, #1
 80153fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80153fe:	fb00 5002 	mla	r0, r0, r2, r5
 8015402:	1400      	asrs	r0, r0, #16
 8015404:	d463      	bmi.n	80154ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015406:	4570      	cmp	r0, lr
 8015408:	da61      	bge.n	80154ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801540a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801540c:	fb00 4202 	mla	r2, r0, r2, r4
 8015410:	1412      	asrs	r2, r2, #16
 8015412:	d45c      	bmi.n	80154ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015414:	42ba      	cmp	r2, r7
 8015416:	da5a      	bge.n	80154ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015418:	1cf0      	adds	r0, r6, #3
 801541a:	469a      	mov	sl, r3
 801541c:	f1ba 0f00 	cmp.w	sl, #0
 8015420:	dd59      	ble.n	80154d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8015422:	142a      	asrs	r2, r5, #16
 8015424:	9901      	ldr	r1, [sp, #4]
 8015426:	1427      	asrs	r7, r4, #16
 8015428:	fb01 2707 	mla	r7, r1, r7, r2
 801542c:	9902      	ldr	r1, [sp, #8]
 801542e:	087a      	lsrs	r2, r7, #1
 8015430:	5c8a      	ldrb	r2, [r1, r2]
 8015432:	07f9      	lsls	r1, r7, #31
 8015434:	bf54      	ite	pl
 8015436:	f002 020f 	andpl.w	r2, r2, #15
 801543a:	1112      	asrmi	r2, r2, #4
 801543c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015440:	b2d2      	uxtb	r2, r2
 8015442:	2a00      	cmp	r2, #0
 8015444:	d03b      	beq.n	80154be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015446:	4980      	ldr	r1, [pc, #512]	; (8015648 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015448:	2aff      	cmp	r2, #255	; 0xff
 801544a:	680f      	ldr	r7, [r1, #0]
 801544c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015450:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8015454:	b2ff      	uxtb	r7, r7
 8015456:	f000 80ed 	beq.w	8015634 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801545a:	fa1f f882 	uxth.w	r8, r2
 801545e:	43d2      	mvns	r2, r2
 8015460:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8015464:	fb17 f708 	smulbb	r7, r7, r8
 8015468:	b2d2      	uxtb	r2, r2
 801546a:	fb19 f908 	smulbb	r9, r9, r8
 801546e:	fb0e 7702 	mla	r7, lr, r2, r7
 8015472:	fb1b f808 	smulbb	r8, fp, r8
 8015476:	b2bf      	uxth	r7, r7
 8015478:	f107 0e01 	add.w	lr, r7, #1
 801547c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8015480:	123f      	asrs	r7, r7, #8
 8015482:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015486:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801548a:	fb07 9902 	mla	r9, r7, r2, r9
 801548e:	fa1f f989 	uxth.w	r9, r9
 8015492:	f109 0701 	add.w	r7, r9, #1
 8015496:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801549a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801549e:	fb07 8802 	mla	r8, r7, r2, r8
 80154a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80154a6:	fa1f f888 	uxth.w	r8, r8
 80154aa:	f800 9c02 	strb.w	r9, [r0, #-2]
 80154ae:	f108 0201 	add.w	r2, r8, #1
 80154b2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80154b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80154ba:	f800 8c01 	strb.w	r8, [r0, #-1]
 80154be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80154c0:	3003      	adds	r0, #3
 80154c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80154c6:	4415      	add	r5, r2
 80154c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154ca:	4414      	add	r4, r2
 80154cc:	e7a6      	b.n	801541c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80154ce:	2700      	movs	r7, #0
 80154d0:	1bda      	subs	r2, r3, r7
 80154d2:	2a00      	cmp	r2, #0
 80154d4:	dc40      	bgt.n	8015558 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80154d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80154da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80154de:	441e      	add	r6, r3
 80154e0:	9b00      	ldr	r3, [sp, #0]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	f340 80ad 	ble.w	8015642 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80154e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80154ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80154f2:	eeb0 6a62 	vmov.f32	s12, s5
 80154f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80154fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80154fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015502:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015506:	eeb0 6a43 	vmov.f32	s12, s6
 801550a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801550e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015512:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015516:	ee61 7a27 	vmul.f32	s15, s2, s15
 801551a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801551e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015522:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015526:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801552a:	ee12 2a90 	vmov	r2, s5
 801552e:	eef0 2a47 	vmov.f32	s5, s14
 8015532:	fb92 f3f3 	sdiv	r3, r2, r3
 8015536:	ee13 2a10 	vmov	r2, s6
 801553a:	9311      	str	r3, [sp, #68]	; 0x44
 801553c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801553e:	eeb0 3a67 	vmov.f32	s6, s15
 8015542:	fb92 f3f3 	sdiv	r3, r2, r3
 8015546:	9312      	str	r3, [sp, #72]	; 0x48
 8015548:	9b00      	ldr	r3, [sp, #0]
 801554a:	9a03      	ldr	r2, [sp, #12]
 801554c:	3b01      	subs	r3, #1
 801554e:	9300      	str	r3, [sp, #0]
 8015550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015552:	bf08      	it	eq
 8015554:	4613      	moveq	r3, r2
 8015556:	e72d      	b.n	80153b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8015558:	1428      	asrs	r0, r5, #16
 801555a:	d45c      	bmi.n	8015616 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801555c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015560:	4282      	cmp	r2, r0
 8015562:	dd58      	ble.n	8015616 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015564:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8015568:	d455      	bmi.n	8015616 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801556a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801556e:	4572      	cmp	r2, lr
 8015570:	dd51      	ble.n	8015616 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015572:	9a01      	ldr	r2, [sp, #4]
 8015574:	9902      	ldr	r1, [sp, #8]
 8015576:	fb0e 0002 	mla	r0, lr, r2, r0
 801557a:	0842      	lsrs	r2, r0, #1
 801557c:	07c0      	lsls	r0, r0, #31
 801557e:	5c8a      	ldrb	r2, [r1, r2]
 8015580:	bf54      	ite	pl
 8015582:	f002 020f 	andpl.w	r2, r2, #15
 8015586:	1112      	asrmi	r2, r2, #4
 8015588:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801558c:	b2d2      	uxtb	r2, r2
 801558e:	2a00      	cmp	r2, #0
 8015590:	d041      	beq.n	8015616 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015592:	492d      	ldr	r1, [pc, #180]	; (8015648 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015594:	2aff      	cmp	r2, #255	; 0xff
 8015596:	6808      	ldr	r0, [r1, #0]
 8015598:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801559c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80155a0:	fa5f fe80 	uxtb.w	lr, r0
 80155a4:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80155a8:	d03b      	beq.n	8015622 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80155aa:	fa1f f982 	uxth.w	r9, r2
 80155ae:	4438      	add	r0, r7
 80155b0:	43d2      	mvns	r2, r2
 80155b2:	f816 8000 	ldrb.w	r8, [r6, r0]
 80155b6:	fb1e fe09 	smulbb	lr, lr, r9
 80155ba:	fb1a fa09 	smulbb	sl, sl, r9
 80155be:	b2d2      	uxtb	r2, r2
 80155c0:	fb1b f909 	smulbb	r9, fp, r9
 80155c4:	fb08 ee02 	mla	lr, r8, r2, lr
 80155c8:	fa1f fe8e 	uxth.w	lr, lr
 80155cc:	f10e 0801 	add.w	r8, lr, #1
 80155d0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80155d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80155d8:	f806 e000 	strb.w	lr, [r6, r0]
 80155dc:	4430      	add	r0, r6
 80155de:	f890 e001 	ldrb.w	lr, [r0, #1]
 80155e2:	fb0e aa02 	mla	sl, lr, r2, sl
 80155e6:	fa1f fa8a 	uxth.w	sl, sl
 80155ea:	f10a 0e01 	add.w	lr, sl, #1
 80155ee:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80155f2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80155f6:	fb0e 9902 	mla	r9, lr, r2, r9
 80155fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80155fe:	fa1f f989 	uxth.w	r9, r9
 8015602:	f880 a001 	strb.w	sl, [r0, #1]
 8015606:	f109 0201 	add.w	r2, r9, #1
 801560a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801560e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015612:	f880 9002 	strb.w	r9, [r0, #2]
 8015616:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015618:	3701      	adds	r7, #1
 801561a:	4415      	add	r5, r2
 801561c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801561e:	4414      	add	r4, r2
 8015620:	e756      	b.n	80154d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015622:	4438      	add	r0, r7
 8015624:	f806 e000 	strb.w	lr, [r6, r0]
 8015628:	4430      	add	r0, r6
 801562a:	f880 a001 	strb.w	sl, [r0, #1]
 801562e:	f880 b002 	strb.w	fp, [r0, #2]
 8015632:	e7f0      	b.n	8015616 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015634:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015638:	f800 9c02 	strb.w	r9, [r0, #-2]
 801563c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8015640:	e73d      	b.n	80154be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015642:	b005      	add	sp, #20
 8015644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015648:	24006c6c 	.word	0x24006c6c

0801564c <_ZN8touchgfx8LCD24bppD1Ev>:
 801564c:	4770      	bx	lr

0801564e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801564e:	4770      	bx	lr

08015650 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015650:	4770      	bx	lr

08015652 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015652:	4770      	bx	lr

08015654 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8015654:	4770      	bx	lr

08015656 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015656:	4770      	bx	lr

08015658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015658:	4770      	bx	lr

0801565a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801565a:	4770      	bx	lr

0801565c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801565c:	4770      	bx	lr

0801565e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801565e:	4770      	bx	lr

08015660 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015660:	4770      	bx	lr

08015662 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015662:	4770      	bx	lr

08015664 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015664:	4770      	bx	lr

08015666 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015666:	4770      	bx	lr

08015668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015668:	4770      	bx	lr

0801566a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801566a:	4770      	bx	lr

0801566c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801566c:	4770      	bx	lr

0801566e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801566e:	4770      	bx	lr

08015670 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015670:	4770      	bx	lr

08015672 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015672:	4770      	bx	lr

08015674 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015674:	4770      	bx	lr
	...

08015678 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015678:	2bff      	cmp	r3, #255	; 0xff
 801567a:	b508      	push	{r3, lr}
 801567c:	d04f      	beq.n	801571e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801567e:	2a2c      	cmp	r2, #44	; 0x2c
 8015680:	d032      	beq.n	80156e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8015682:	d80f      	bhi.n	80156a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8015684:	2a08      	cmp	r2, #8
 8015686:	d046      	beq.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015688:	d805      	bhi.n	8015696 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801568a:	2a04      	cmp	r2, #4
 801568c:	d041      	beq.n	8015712 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801568e:	2a05      	cmp	r2, #5
 8015690:	d03d      	beq.n	801570e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8015692:	2000      	movs	r0, #0
 8015694:	e027      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015696:	2a0a      	cmp	r2, #10
 8015698:	d03d      	beq.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801569a:	d301      	bcc.n	80156a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801569c:	2a0b      	cmp	r2, #11
 801569e:	d1f8      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156a0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80156a2:	e020      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80156a4:	2a30      	cmp	r2, #48	; 0x30
 80156a6:	d038      	beq.n	801571a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80156a8:	d808      	bhi.n	80156bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 80156aa:	2a2e      	cmp	r2, #46	; 0x2e
 80156ac:	684b      	ldr	r3, [r1, #4]
 80156ae:	d029      	beq.n	8015704 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 80156b0:	d90b      	bls.n	80156ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d1ec      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156b8:	6a00      	ldr	r0, [r0, #32]
 80156ba:	e014      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80156bc:	2a32      	cmp	r2, #50	; 0x32
 80156be:	d02c      	beq.n	801571a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80156c0:	d301      	bcc.n	80156c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 80156c2:	2a33      	cmp	r2, #51	; 0x33
 80156c4:	d1e5      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156c6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80156c8:	e00d      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d009      	beq.n	80156e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80156d0:	d3f2      	bcc.n	80156b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 80156d2:	2b02      	cmp	r3, #2
 80156d4:	d1dd      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156d6:	4b39      	ldr	r3, [pc, #228]	; (80157bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80156d8:	f240 4109 	movw	r1, #1033	; 0x409
 80156dc:	4a38      	ldr	r2, [pc, #224]	; (80157c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80156de:	4839      	ldr	r0, [pc, #228]	; (80157c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 80156e0:	f006 fde4 	bl	801c2ac <__assert_func>
 80156e4:	6900      	ldr	r0, [r0, #16]
 80156e6:	bd08      	pop	{r3, pc}
 80156e8:	684b      	ldr	r3, [r1, #4]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	d007      	beq.n	8015700 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80156f0:	d30b      	bcc.n	801570a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80156f2:	2b02      	cmp	r3, #2
 80156f4:	d1cd      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156f6:	4b31      	ldr	r3, [pc, #196]	; (80157bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80156f8:	f240 4115 	movw	r1, #1045	; 0x415
 80156fc:	4a30      	ldr	r2, [pc, #192]	; (80157c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80156fe:	e7ee      	b.n	80156de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015700:	6880      	ldr	r0, [r0, #8]
 8015702:	e7f0      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1c3      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801570a:	6980      	ldr	r0, [r0, #24]
 801570c:	e7eb      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801570e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015710:	e7e9      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015712:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015714:	e7e7      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015716:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015718:	e7e5      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801571a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801571c:	e7e3      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801571e:	2a2c      	cmp	r2, #44	; 0x2c
 8015720:	d030      	beq.n	8015784 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8015722:	d80f      	bhi.n	8015744 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8015724:	2a08      	cmp	r2, #8
 8015726:	d044      	beq.n	80157b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8015728:	d805      	bhi.n	8015736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801572a:	2a04      	cmp	r2, #4
 801572c:	d03f      	beq.n	80157ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801572e:	2a05      	cmp	r2, #5
 8015730:	d1af      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015732:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015734:	e7d7      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015736:	2a0a      	cmp	r2, #10
 8015738:	d03b      	beq.n	80157b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801573a:	d301      	bcc.n	8015740 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801573c:	2a0b      	cmp	r2, #11
 801573e:	d1a8      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015740:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8015742:	e7d0      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015744:	2a30      	cmp	r2, #48	; 0x30
 8015746:	d036      	beq.n	80157b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8015748:	d808      	bhi.n	801575c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801574a:	2a2e      	cmp	r2, #46	; 0x2e
 801574c:	684b      	ldr	r3, [r1, #4]
 801574e:	d028      	beq.n	80157a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8015750:	d90b      	bls.n	801576a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8015752:	781b      	ldrb	r3, [r3, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d19c      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015758:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801575a:	e7c4      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801575c:	2a32      	cmp	r2, #50	; 0x32
 801575e:	d02a      	beq.n	80157b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8015760:	d301      	bcc.n	8015766 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8015762:	2a33      	cmp	r2, #51	; 0x33
 8015764:	d195      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015766:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015768:	e7bd      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	2b01      	cmp	r3, #1
 801576e:	d007      	beq.n	8015780 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8015770:	d3f2      	bcc.n	8015758 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8015772:	2b02      	cmp	r3, #2
 8015774:	d18d      	bne.n	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015776:	4b11      	ldr	r3, [pc, #68]	; (80157bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015778:	f240 4146 	movw	r1, #1094	; 0x446
 801577c:	4a10      	ldr	r2, [pc, #64]	; (80157c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801577e:	e7ae      	b.n	80156de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015780:	6940      	ldr	r0, [r0, #20]
 8015782:	e7b0      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015784:	684b      	ldr	r3, [r1, #4]
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	2b01      	cmp	r3, #1
 801578a:	d008      	beq.n	801579e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801578c:	d30d      	bcc.n	80157aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801578e:	2b02      	cmp	r3, #2
 8015790:	f47f af7f 	bne.w	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015794:	4b09      	ldr	r3, [pc, #36]	; (80157bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015796:	f240 4152 	movw	r1, #1106	; 0x452
 801579a:	4a09      	ldr	r2, [pc, #36]	; (80157c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801579c:	e79f      	b.n	80156de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801579e:	68c0      	ldr	r0, [r0, #12]
 80157a0:	e7a1      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	f47f af74 	bne.w	8015692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157aa:	69c0      	ldr	r0, [r0, #28]
 80157ac:	e79b      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80157b0:	e799      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157b2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80157b4:	e797      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80157b8:	e795      	b.n	80156e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157ba:	bf00      	nop
 80157bc:	08020395 	.word	0x08020395
 80157c0:	08020b07 	.word	0x08020b07
 80157c4:	080203e1 	.word	0x080203e1

080157c8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80157c8:	b508      	push	{r3, lr}
 80157ca:	4b06      	ldr	r3, [pc, #24]	; (80157e4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 80157cc:	8818      	ldrh	r0, [r3, #0]
 80157ce:	b928      	cbnz	r0, 80157dc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 80157d0:	4b05      	ldr	r3, [pc, #20]	; (80157e8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 80157d2:	214d      	movs	r1, #77	; 0x4d
 80157d4:	4a05      	ldr	r2, [pc, #20]	; (80157ec <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 80157d6:	4806      	ldr	r0, [pc, #24]	; (80157f0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 80157d8:	f006 fd68 	bl	801c2ac <__assert_func>
 80157dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80157e0:	b280      	uxth	r0, r0
 80157e2:	bd08      	pop	{r3, pc}
 80157e4:	24006c5e 	.word	0x24006c5e
 80157e8:	080205ed 	.word	0x080205ed
 80157ec:	08020acc 	.word	0x08020acc
 80157f0:	0802062f 	.word	0x0802062f

080157f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80157f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157f8:	b08b      	sub	sp, #44	; 0x2c
 80157fa:	460d      	mov	r5, r1
 80157fc:	4616      	mov	r6, r2
 80157fe:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015802:	f1b8 0f00 	cmp.w	r8, #0
 8015806:	d047      	beq.n	8015898 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015808:	6810      	ldr	r0, [r2, #0]
 801580a:	ac06      	add	r4, sp, #24
 801580c:	6851      	ldr	r1, [r2, #4]
 801580e:	4f51      	ldr	r7, [pc, #324]	; (8015954 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8015810:	c403      	stmia	r4!, {r0, r1}
 8015812:	6818      	ldr	r0, [r3, #0]
 8015814:	ac08      	add	r4, sp, #32
 8015816:	6859      	ldr	r1, [r3, #4]
 8015818:	c403      	stmia	r4!, {r0, r1}
 801581a:	a806      	add	r0, sp, #24
 801581c:	f7fa fd9e 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015820:	4631      	mov	r1, r6
 8015822:	a808      	add	r0, sp, #32
 8015824:	f7fa fdde 	bl	80103e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015828:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801582c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015830:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015834:	6838      	ldr	r0, [r7, #0]
 8015836:	fb11 2103 	smlabb	r1, r1, r3, r2
 801583a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801583e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8015842:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015846:	440d      	add	r5, r1
 8015848:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801584c:	440a      	add	r2, r1
 801584e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015852:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015856:	4413      	add	r3, r2
 8015858:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801585c:	6803      	ldr	r3, [r0, #0]
 801585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015860:	4798      	blx	r3
 8015862:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015866:	d01a      	beq.n	801589e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8015868:	f010 0f04 	tst.w	r0, #4
 801586c:	6838      	ldr	r0, [r7, #0]
 801586e:	d019      	beq.n	80158a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8015870:	2100      	movs	r1, #0
 8015872:	6807      	ldr	r7, [r0, #0]
 8015874:	b2a4      	uxth	r4, r4
 8015876:	f8cd 800c 	str.w	r8, [sp, #12]
 801587a:	b2b6      	uxth	r6, r6
 801587c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015880:	9401      	str	r4, [sp, #4]
 8015882:	9600      	str	r6, [sp, #0]
 8015884:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015888:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801588c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015890:	9102      	str	r1, [sp, #8]
 8015892:	4629      	mov	r1, r5
 8015894:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8015896:	47a0      	blx	r4
 8015898:	b00b      	add	sp, #44	; 0x2c
 801589a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801589e:	f010 0f01 	tst.w	r0, #1
 80158a2:	e7e3      	b.n	801586c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80158a4:	6803      	ldr	r3, [r0, #0]
 80158a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158a8:	4798      	blx	r3
 80158aa:	4a2b      	ldr	r2, [pc, #172]	; (8015958 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80158ac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80158b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80158b4:	8813      	ldrh	r3, [r2, #0]
 80158b6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80158ba:	fb03 f404 	mul.w	r4, r3, r4
 80158be:	fb03 c101 	mla	r1, r3, r1, ip
 80158c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80158c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158ca:	4408      	add	r0, r1
 80158cc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80158d0:	4404      	add	r4, r0
 80158d2:	d02e      	beq.n	8015932 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80158d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80158d8:	1b9b      	subs	r3, r3, r6
 80158da:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80158de:	1b96      	subs	r6, r2, r6
 80158e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80158e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80158e8:	42a0      	cmp	r0, r4
 80158ea:	d22d      	bcs.n	8015948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80158ec:	eb00 0e01 	add.w	lr, r0, r1
 80158f0:	4570      	cmp	r0, lr
 80158f2:	d210      	bcs.n	8015916 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80158f4:	f890 9000 	ldrb.w	r9, [r0]
 80158f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80158fc:	fb19 f90c 	smulbb	r9, r9, ip
 8015900:	fb02 9208 	mla	r2, r2, r8, r9
 8015904:	b292      	uxth	r2, r2
 8015906:	f102 0901 	add.w	r9, r2, #1
 801590a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801590e:	1212      	asrs	r2, r2, #8
 8015910:	f800 2b01 	strb.w	r2, [r0], #1
 8015914:	e7ec      	b.n	80158f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8015916:	4418      	add	r0, r3
 8015918:	4435      	add	r5, r6
 801591a:	e7e5      	b.n	80158e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801591c:	8813      	ldrh	r3, [r2, #0]
 801591e:	1b9b      	subs	r3, r3, r6
 8015920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015924:	4418      	add	r0, r3
 8015926:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801592a:	1b9b      	subs	r3, r3, r6
 801592c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015930:	441d      	add	r5, r3
 8015932:	42a0      	cmp	r0, r4
 8015934:	d208      	bcs.n	8015948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015936:	eb00 0c01 	add.w	ip, r0, r1
 801593a:	4560      	cmp	r0, ip
 801593c:	d2ee      	bcs.n	801591c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801593e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015942:	f800 3b01 	strb.w	r3, [r0], #1
 8015946:	e7f8      	b.n	801593a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8015948:	6838      	ldr	r0, [r7, #0]
 801594a:	6803      	ldr	r3, [r0, #0]
 801594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801594e:	4798      	blx	r3
 8015950:	e7a2      	b.n	8015898 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015952:	bf00      	nop
 8015954:	24006c64 	.word	0x24006c64
 8015958:	24006c5e 	.word	0x24006c5e

0801595c <_ZN8touchgfx8LCD24bppD0Ev>:
 801595c:	b510      	push	{r4, lr}
 801595e:	4604      	mov	r4, r0
 8015960:	2158      	movs	r1, #88	; 0x58
 8015962:	f006 fb8d 	bl	801c080 <_ZdlPvj>
 8015966:	4620      	mov	r0, r4
 8015968:	bd10      	pop	{r4, pc}

0801596a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801596a:	b510      	push	{r4, lr}
 801596c:	4604      	mov	r4, r0
 801596e:	2104      	movs	r1, #4
 8015970:	f006 fb86 	bl	801c080 <_ZdlPvj>
 8015974:	4620      	mov	r0, r4
 8015976:	bd10      	pop	{r4, pc}

08015978 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8015978:	b510      	push	{r4, lr}
 801597a:	4604      	mov	r4, r0
 801597c:	2104      	movs	r1, #4
 801597e:	f006 fb7f 	bl	801c080 <_ZdlPvj>
 8015982:	4620      	mov	r0, r4
 8015984:	bd10      	pop	{r4, pc}

08015986 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015986:	b510      	push	{r4, lr}
 8015988:	4604      	mov	r4, r0
 801598a:	2104      	movs	r1, #4
 801598c:	f006 fb78 	bl	801c080 <_ZdlPvj>
 8015990:	4620      	mov	r0, r4
 8015992:	bd10      	pop	{r4, pc}

08015994 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8015994:	b510      	push	{r4, lr}
 8015996:	4604      	mov	r4, r0
 8015998:	2104      	movs	r1, #4
 801599a:	f006 fb71 	bl	801c080 <_ZdlPvj>
 801599e:	4620      	mov	r0, r4
 80159a0:	bd10      	pop	{r4, pc}

080159a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80159a2:	b510      	push	{r4, lr}
 80159a4:	4604      	mov	r4, r0
 80159a6:	2104      	movs	r1, #4
 80159a8:	f006 fb6a 	bl	801c080 <_ZdlPvj>
 80159ac:	4620      	mov	r0, r4
 80159ae:	bd10      	pop	{r4, pc}

080159b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80159b0:	b510      	push	{r4, lr}
 80159b2:	4604      	mov	r4, r0
 80159b4:	2104      	movs	r1, #4
 80159b6:	f006 fb63 	bl	801c080 <_ZdlPvj>
 80159ba:	4620      	mov	r0, r4
 80159bc:	bd10      	pop	{r4, pc}

080159be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80159be:	b510      	push	{r4, lr}
 80159c0:	4604      	mov	r4, r0
 80159c2:	2104      	movs	r1, #4
 80159c4:	f006 fb5c 	bl	801c080 <_ZdlPvj>
 80159c8:	4620      	mov	r0, r4
 80159ca:	bd10      	pop	{r4, pc}

080159cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80159cc:	b510      	push	{r4, lr}
 80159ce:	4604      	mov	r4, r0
 80159d0:	2104      	movs	r1, #4
 80159d2:	f006 fb55 	bl	801c080 <_ZdlPvj>
 80159d6:	4620      	mov	r0, r4
 80159d8:	bd10      	pop	{r4, pc}

080159da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80159da:	b510      	push	{r4, lr}
 80159dc:	4604      	mov	r4, r0
 80159de:	2104      	movs	r1, #4
 80159e0:	f006 fb4e 	bl	801c080 <_ZdlPvj>
 80159e4:	4620      	mov	r0, r4
 80159e6:	bd10      	pop	{r4, pc}

080159e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80159e8:	b510      	push	{r4, lr}
 80159ea:	4604      	mov	r4, r0
 80159ec:	2104      	movs	r1, #4
 80159ee:	f006 fb47 	bl	801c080 <_ZdlPvj>
 80159f2:	4620      	mov	r0, r4
 80159f4:	bd10      	pop	{r4, pc}

080159f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80159f6:	b510      	push	{r4, lr}
 80159f8:	4604      	mov	r4, r0
 80159fa:	2104      	movs	r1, #4
 80159fc:	f006 fb40 	bl	801c080 <_ZdlPvj>
 8015a00:	4620      	mov	r0, r4
 8015a02:	bd10      	pop	{r4, pc}

08015a04 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8015a04:	b510      	push	{r4, lr}
 8015a06:	4604      	mov	r4, r0
 8015a08:	2104      	movs	r1, #4
 8015a0a:	f006 fb39 	bl	801c080 <_ZdlPvj>
 8015a0e:	4620      	mov	r0, r4
 8015a10:	bd10      	pop	{r4, pc}

08015a12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015a12:	b510      	push	{r4, lr}
 8015a14:	4604      	mov	r4, r0
 8015a16:	2104      	movs	r1, #4
 8015a18:	f006 fb32 	bl	801c080 <_ZdlPvj>
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	bd10      	pop	{r4, pc}

08015a20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015a20:	b510      	push	{r4, lr}
 8015a22:	4604      	mov	r4, r0
 8015a24:	2104      	movs	r1, #4
 8015a26:	f006 fb2b 	bl	801c080 <_ZdlPvj>
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	bd10      	pop	{r4, pc}

08015a2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015a2e:	b510      	push	{r4, lr}
 8015a30:	4604      	mov	r4, r0
 8015a32:	2104      	movs	r1, #4
 8015a34:	f006 fb24 	bl	801c080 <_ZdlPvj>
 8015a38:	4620      	mov	r0, r4
 8015a3a:	bd10      	pop	{r4, pc}

08015a3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015a3c:	b510      	push	{r4, lr}
 8015a3e:	4604      	mov	r4, r0
 8015a40:	2104      	movs	r1, #4
 8015a42:	f006 fb1d 	bl	801c080 <_ZdlPvj>
 8015a46:	4620      	mov	r0, r4
 8015a48:	bd10      	pop	{r4, pc}

08015a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8015a4a:	b510      	push	{r4, lr}
 8015a4c:	4604      	mov	r4, r0
 8015a4e:	2104      	movs	r1, #4
 8015a50:	f006 fb16 	bl	801c080 <_ZdlPvj>
 8015a54:	4620      	mov	r0, r4
 8015a56:	bd10      	pop	{r4, pc}

08015a58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8015a58:	b510      	push	{r4, lr}
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	2104      	movs	r1, #4
 8015a5e:	f006 fb0f 	bl	801c080 <_ZdlPvj>
 8015a62:	4620      	mov	r0, r4
 8015a64:	bd10      	pop	{r4, pc}

08015a66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015a66:	b510      	push	{r4, lr}
 8015a68:	4604      	mov	r4, r0
 8015a6a:	2104      	movs	r1, #4
 8015a6c:	f006 fb08 	bl	801c080 <_ZdlPvj>
 8015a70:	4620      	mov	r0, r4
 8015a72:	bd10      	pop	{r4, pc}

08015a74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8015a74:	b510      	push	{r4, lr}
 8015a76:	4604      	mov	r4, r0
 8015a78:	2104      	movs	r1, #4
 8015a7a:	f006 fb01 	bl	801c080 <_ZdlPvj>
 8015a7e:	4620      	mov	r0, r4
 8015a80:	bd10      	pop	{r4, pc}
	...

08015a84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8015a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a88:	4db4      	ldr	r5, [pc, #720]	; (8015d5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 8015a8a:	4690      	mov	r8, r2
 8015a8c:	b08d      	sub	sp, #52	; 0x34
 8015a8e:	4604      	mov	r4, r0
 8015a90:	682a      	ldr	r2, [r5, #0]
 8015a92:	4689      	mov	r9, r1
 8015a94:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8015a98:	2a02      	cmp	r2, #2
 8015a9a:	d106      	bne.n	8015aaa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8015a9c:	4bb0      	ldr	r3, [pc, #704]	; (8015d60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 8015a9e:	f240 11ed 	movw	r1, #493	; 0x1ed
 8015aa2:	4ab0      	ldr	r2, [pc, #704]	; (8015d64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015aa4:	48b0      	ldr	r0, [pc, #704]	; (8015d68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 8015aa6:	f006 fc01 	bl	801c2ac <__assert_func>
 8015aaa:	ae0c      	add	r6, sp, #48	; 0x30
 8015aac:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f7fe f97b 	bl	8013dac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015ab6:	6823      	ldr	r3, [r4, #0]
 8015ab8:	4607      	mov	r7, r0
 8015aba:	4620      	mov	r0, r4
 8015abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015abe:	4798      	blx	r3
 8015ac0:	4287      	cmp	r7, r0
 8015ac2:	d004      	beq.n	8015ace <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8015ac4:	4ba9      	ldr	r3, [pc, #676]	; (8015d6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 8015ac6:	f240 11ef 	movw	r1, #495	; 0x1ef
 8015aca:	4aa6      	ldr	r2, [pc, #664]	; (8015d64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015acc:	e7ea      	b.n	8015aa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015ace:	4630      	mov	r0, r6
 8015ad0:	f7fe f8e2 	bl	8013c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015ad4:	4607      	mov	r7, r0
 8015ad6:	b920      	cbnz	r0, 8015ae2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8015ad8:	4ba5      	ldr	r3, [pc, #660]	; (8015d70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 8015ada:	f240 11f1 	movw	r1, #497	; 0x1f1
 8015ade:	4aa1      	ldr	r2, [pc, #644]	; (8015d64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015ae0:	e7e0      	b.n	8015aa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015ae2:	f8d8 0000 	ldr.w	r0, [r8]
 8015ae6:	ab06      	add	r3, sp, #24
 8015ae8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015aec:	f9b8 a000 	ldrsh.w	sl, [r8]
 8015af0:	c303      	stmia	r3!, {r0, r1}
 8015af2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015af6:	ab08      	add	r3, sp, #32
 8015af8:	f8d9 0000 	ldr.w	r0, [r9]
 8015afc:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8015b00:	c303      	stmia	r3!, {r0, r1}
 8015b02:	4630      	mov	r0, r6
 8015b04:	f7fd ffc0 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015b08:	4680      	mov	r8, r0
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	f7fd fff6 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015b10:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8015b14:	f10d 0920 	add.w	r9, sp, #32
 8015b18:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8015b1c:	a806      	add	r0, sp, #24
 8015b1e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015b22:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8015b26:	f7fa fc19 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b2a:	4648      	mov	r0, r9
 8015b2c:	f7fa fc16 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b30:	a80a      	add	r0, sp, #40	; 0x28
 8015b32:	f7fa fc13 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b36:	4b8f      	ldr	r3, [pc, #572]	; (8015d74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8015b38:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015b3c:	881e      	ldrh	r6, [r3, #0]
 8015b3e:	4b8e      	ldr	r3, [pc, #568]	; (8015d78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015b40:	fa0f fb86 	sxth.w	fp, r6
 8015b44:	8819      	ldrh	r1, [r3, #0]
 8015b46:	4593      	cmp	fp, r2
 8015b48:	dd75      	ble.n	8015c36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015b4a:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8015b4e:	4494      	add	ip, r2
 8015b50:	fa1f fc8c 	uxth.w	ip, ip
 8015b54:	fa0f fa8c 	sxth.w	sl, ip
 8015b58:	f1ba 0f00 	cmp.w	sl, #0
 8015b5c:	dd6b      	ble.n	8015c36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015b5e:	fa0f f881 	sxth.w	r8, r1
 8015b62:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015b66:	4598      	cmp	r8, r3
 8015b68:	dd65      	ble.n	8015c36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015b6a:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8015b6e:	4418      	add	r0, r3
 8015b70:	b280      	uxth	r0, r0
 8015b72:	fa0f fe80 	sxth.w	lr, r0
 8015b76:	f1be 0f00 	cmp.w	lr, #0
 8015b7a:	dd5c      	ble.n	8015c36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015b7c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8015b80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b84:	45d3      	cmp	fp, sl
 8015b86:	bfc8      	it	gt
 8015b88:	4666      	movgt	r6, ip
 8015b8a:	45f0      	cmp	r8, lr
 8015b8c:	bfc8      	it	gt
 8015b8e:	4601      	movgt	r1, r0
 8015b90:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015b94:	1ab6      	subs	r6, r6, r2
 8015b96:	1ac9      	subs	r1, r1, r3
 8015b98:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015b9c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8015ba0:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8015ba4:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8015ba8:	f1bc 0f00 	cmp.w	ip, #0
 8015bac:	f340 80aa 	ble.w	8015d04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015bb0:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8015bb4:	2e00      	cmp	r6, #0
 8015bb6:	f340 80a5 	ble.w	8015d04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015bba:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8015bbe:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8015bc2:	4288      	cmp	r0, r1
 8015bc4:	db3b      	blt.n	8015c3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015bc6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8015bca:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	db35      	blt.n	8015c3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015bd2:	4460      	add	r0, ip
 8015bd4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8015bd8:	4461      	add	r1, ip
 8015bda:	b200      	sxth	r0, r0
 8015bdc:	b209      	sxth	r1, r1
 8015bde:	4288      	cmp	r0, r1
 8015be0:	dc2d      	bgt.n	8015c3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015be2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015be6:	4432      	add	r2, r6
 8015be8:	440b      	add	r3, r1
 8015bea:	b212      	sxth	r2, r2
 8015bec:	b21b      	sxth	r3, r3
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	dc25      	bgt.n	8015c3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015bf2:	6823      	ldr	r3, [r4, #0]
 8015bf4:	4620      	mov	r0, r4
 8015bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf8:	4798      	blx	r3
 8015bfa:	4682      	mov	sl, r0
 8015bfc:	6828      	ldr	r0, [r5, #0]
 8015bfe:	6803      	ldr	r3, [r0, #0]
 8015c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c02:	4798      	blx	r3
 8015c04:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8015c08:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015c0c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8015c10:	9303      	str	r3, [sp, #12]
 8015c12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015c16:	1a9b      	subs	r3, r3, r2
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	b21c      	sxth	r4, r3
 8015c1c:	2c00      	cmp	r4, #0
 8015c1e:	dc13      	bgt.n	8015c48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 8015c20:	bf18      	it	ne
 8015c22:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8015c26:	463c      	mov	r4, r7
 8015c28:	bf1e      	ittt	ne
 8015c2a:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8015c2e:	189b      	addne	r3, r3, r2
 8015c30:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8015c34:	e00f      	b.n	8015c56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8015c36:	2300      	movs	r3, #0
 8015c38:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015c3c:	e7b2      	b.n	8015ba4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8015c3e:	4b4f      	ldr	r3, [pc, #316]	; (8015d7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8015c40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8015c44:	4a47      	ldr	r2, [pc, #284]	; (8015d64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015c46:	e72d      	b.n	8015aa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015c48:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015c4c:	ebab 0303 	sub.w	r3, fp, r3
 8015c50:	443c      	add	r4, r7
 8015c52:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8015c56:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8015c5a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015c5e:	1a9b      	subs	r3, r3, r2
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	b219      	sxth	r1, r3
 8015c64:	2900      	cmp	r1, #0
 8015c66:	dd51      	ble.n	8015d0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8015c68:	9a03      	ldr	r2, [sp, #12]
 8015c6a:	fb02 4401 	mla	r4, r2, r1, r4
 8015c6e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8015c72:	1ad3      	subs	r3, r2, r3
 8015c74:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015c78:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	dd41      	ble.n	8015d04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015c80:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8015c84:	2e00      	cmp	r6, #0
 8015c86:	dd3d      	ble.n	8015d04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015c88:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015c8c:	f04f 0803 	mov.w	r8, #3
 8015c90:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015c94:	fb0a f10c 	mul.w	r1, sl, ip
 8015c98:	fb12 1808 	smlabb	r8, r2, r8, r1
 8015c9c:	4935      	ldr	r1, [pc, #212]	; (8015d74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8015c9e:	4480      	add	r8, r0
 8015ca0:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8015ca4:	8809      	ldrh	r1, [r1, #0]
 8015ca6:	4283      	cmp	r3, r0
 8015ca8:	eba1 0202 	sub.w	r2, r1, r2
 8015cac:	bfa8      	it	ge
 8015cae:	4603      	movge	r3, r0
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	bfa8      	it	ge
 8015cb4:	4613      	movge	r3, r2
 8015cb6:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8015cba:	4296      	cmp	r6, r2
 8015cbc:	bfa8      	it	ge
 8015cbe:	4616      	movge	r6, r2
 8015cc0:	4a2d      	ldr	r2, [pc, #180]	; (8015d78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015cc2:	8812      	ldrh	r2, [r2, #0]
 8015cc4:	eba2 0c0c 	sub.w	ip, r2, ip
 8015cc8:	4632      	mov	r2, r6
 8015cca:	4566      	cmp	r6, ip
 8015ccc:	bfa8      	it	ge
 8015cce:	4662      	movge	r2, ip
 8015cd0:	4299      	cmp	r1, r3
 8015cd2:	9202      	str	r2, [sp, #8]
 8015cd4:	d12d      	bne.n	8015d32 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8015cd6:	4559      	cmp	r1, fp
 8015cd8:	d12b      	bne.n	8015d32 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8015cda:	6828      	ldr	r0, [r5, #0]
 8015cdc:	6803      	ldr	r3, [r0, #0]
 8015cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ce0:	4798      	blx	r3
 8015ce2:	07c3      	lsls	r3, r0, #31
 8015ce4:	d51b      	bpl.n	8015d1e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8015ce6:	6828      	ldr	r0, [r5, #0]
 8015ce8:	9b02      	ldr	r3, [sp, #8]
 8015cea:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8015cee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015cf2:	6803      	ldr	r3, [r0, #0]
 8015cf4:	f8cd b000 	str.w	fp, [sp]
 8015cf8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8015cfa:	4623      	mov	r3, r4
 8015cfc:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015d00:	47a8      	blx	r5
 8015d02:	4607      	mov	r7, r0
 8015d04:	4638      	mov	r0, r7
 8015d06:	b00d      	add	sp, #52	; 0x34
 8015d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d0c:	bf1f      	itttt	ne
 8015d0e:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8015d12:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8015d16:	189b      	addne	r3, r3, r2
 8015d18:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8015d1c:	e7ac      	b.n	8015c78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 8015d1e:	6828      	ldr	r0, [r5, #0]
 8015d20:	4642      	mov	r2, r8
 8015d22:	4621      	mov	r1, r4
 8015d24:	6803      	ldr	r3, [r0, #0]
 8015d26:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8015d28:	9b02      	ldr	r3, [sp, #8]
 8015d2a:	fb03 f30a 	mul.w	r3, r3, sl
 8015d2e:	47a8      	blx	r5
 8015d30:	e7e8      	b.n	8015d04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015d32:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8015d36:	f04f 0900 	mov.w	r9, #0
 8015d3a:	9b02      	ldr	r3, [sp, #8]
 8015d3c:	454b      	cmp	r3, r9
 8015d3e:	dde1      	ble.n	8015d04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015d40:	6828      	ldr	r0, [r5, #0]
 8015d42:	4642      	mov	r2, r8
 8015d44:	4621      	mov	r1, r4
 8015d46:	44d0      	add	r8, sl
 8015d48:	6803      	ldr	r3, [r0, #0]
 8015d4a:	f109 0901 	add.w	r9, r9, #1
 8015d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d50:	461e      	mov	r6, r3
 8015d52:	465b      	mov	r3, fp
 8015d54:	47b0      	blx	r6
 8015d56:	9b03      	ldr	r3, [sp, #12]
 8015d58:	441c      	add	r4, r3
 8015d5a:	e7ee      	b.n	8015d3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8015d5c:	24006c64 	.word	0x24006c64
 8015d60:	08020413 	.word	0x08020413
 8015d64:	08020bb1 	.word	0x08020bb1
 8015d68:	080203e1 	.word	0x080203e1
 8015d6c:	080204c5 	.word	0x080204c5
 8015d70:	0802051a 	.word	0x0802051a
 8015d74:	24006c5e 	.word	0x24006c5e
 8015d78:	24006c60 	.word	0x24006c60
 8015d7c:	08020558 	.word	0x08020558

08015d80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8015d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d84:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8015d88:	9c06      	ldr	r4, [sp, #24]
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d06e      	beq.n	8015e6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015d8e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8015d92:	2d00      	cmp	r5, #0
 8015d94:	dd6a      	ble.n	8015e6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015d96:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8015d9a:	f1bc 0f00 	cmp.w	ip, #0
 8015d9e:	dd65      	ble.n	8015e6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015da0:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8015da4:	28ff      	cmp	r0, #255	; 0xff
 8015da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015daa:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8015dae:	fb02 3306 	mla	r3, r2, r6, r3
 8015db2:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015db6:	b2e4      	uxtb	r4, r4
 8015db8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015dbc:	4419      	add	r1, r3
 8015dbe:	fb02 f30c 	mul.w	r3, r2, ip
 8015dc2:	eba2 0205 	sub.w	r2, r2, r5
 8015dc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015dca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015dce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015dd2:	440b      	add	r3, r1
 8015dd4:	d03e      	beq.n	8015e54 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8015dd6:	fa1f fc80 	uxth.w	ip, r0
 8015dda:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8015dde:	fb06 f60c 	mul.w	r6, r6, ip
 8015de2:	b280      	uxth	r0, r0
 8015de4:	fb07 f70c 	mul.w	r7, r7, ip
 8015de8:	fb04 f40c 	mul.w	r4, r4, ip
 8015dec:	4299      	cmp	r1, r3
 8015dee:	d23d      	bcs.n	8015e6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015df0:	eb01 0c05 	add.w	ip, r1, r5
 8015df4:	458c      	cmp	ip, r1
 8015df6:	f101 0e03 	add.w	lr, r1, #3
 8015dfa:	d928      	bls.n	8015e4e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8015dfc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8015e00:	fb11 f100 	smulbb	r1, r1, r0
 8015e04:	4421      	add	r1, r4
 8015e06:	b289      	uxth	r1, r1
 8015e08:	f101 0801 	add.w	r8, r1, #1
 8015e0c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015e10:	1209      	asrs	r1, r1, #8
 8015e12:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8015e16:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8015e1a:	fb11 f100 	smulbb	r1, r1, r0
 8015e1e:	4439      	add	r1, r7
 8015e20:	b289      	uxth	r1, r1
 8015e22:	f101 0801 	add.w	r8, r1, #1
 8015e26:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015e2a:	1209      	asrs	r1, r1, #8
 8015e2c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8015e30:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8015e34:	fb11 f100 	smulbb	r1, r1, r0
 8015e38:	4431      	add	r1, r6
 8015e3a:	b289      	uxth	r1, r1
 8015e3c:	f101 0801 	add.w	r8, r1, #1
 8015e40:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015e44:	1209      	asrs	r1, r1, #8
 8015e46:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8015e4a:	4671      	mov	r1, lr
 8015e4c:	e7d2      	b.n	8015df4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8015e4e:	4411      	add	r1, r2
 8015e50:	e7cc      	b.n	8015dec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8015e52:	4411      	add	r1, r2
 8015e54:	4299      	cmp	r1, r3
 8015e56:	d209      	bcs.n	8015e6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015e58:	1948      	adds	r0, r1, r5
 8015e5a:	4281      	cmp	r1, r0
 8015e5c:	d2f9      	bcs.n	8015e52 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8015e5e:	700c      	strb	r4, [r1, #0]
 8015e60:	3103      	adds	r1, #3
 8015e62:	f801 7c02 	strb.w	r7, [r1, #-2]
 8015e66:	f801 6c01 	strb.w	r6, [r1, #-1]
 8015e6a:	e7f6      	b.n	8015e5a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8015e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e72:	4606      	mov	r6, r0
 8015e74:	b087      	sub	sp, #28
 8015e76:	4615      	mov	r5, r2
 8015e78:	461f      	mov	r7, r3
 8015e7a:	b353      	cbz	r3, 8015ed2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015e7c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	dd26      	ble.n	8015ed2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015e84:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	dd22      	ble.n	8015ed2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015e8c:	6808      	ldr	r0, [r1, #0]
 8015e8e:	aa04      	add	r2, sp, #16
 8015e90:	6849      	ldr	r1, [r1, #4]
 8015e92:	4c1b      	ldr	r4, [pc, #108]	; (8015f00 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015e94:	c203      	stmia	r2!, {r0, r1}
 8015e96:	a804      	add	r0, sp, #16
 8015e98:	f7fa fa60 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015e9c:	6820      	ldr	r0, [r4, #0]
 8015e9e:	6803      	ldr	r3, [r0, #0]
 8015ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ea2:	4798      	blx	r3
 8015ea4:	2fff      	cmp	r7, #255	; 0xff
 8015ea6:	d016      	beq.n	8015ed6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015ea8:	f010 0f08 	tst.w	r0, #8
 8015eac:	6820      	ldr	r0, [r4, #0]
 8015eae:	d015      	beq.n	8015edc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8015eb0:	2400      	movs	r4, #0
 8015eb2:	6801      	ldr	r1, [r0, #0]
 8015eb4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015eb8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015ebc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8015ec0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015ec4:	9401      	str	r4, [sp, #4]
 8015ec6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015eca:	9400      	str	r4, [sp, #0]
 8015ecc:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8015ece:	4629      	mov	r1, r5
 8015ed0:	47a0      	blx	r4
 8015ed2:	b007      	add	sp, #28
 8015ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ed6:	f010 0f02 	tst.w	r0, #2
 8015eda:	e7e7      	b.n	8015eac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8015edc:	6803      	ldr	r3, [r0, #0]
 8015ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ee0:	4798      	blx	r3
 8015ee2:	4b08      	ldr	r3, [pc, #32]	; (8015f04 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8015ee4:	4601      	mov	r1, r0
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	881a      	ldrh	r2, [r3, #0]
 8015eea:	6833      	ldr	r3, [r6, #0]
 8015eec:	e9cd 5700 	strd	r5, r7, [sp]
 8015ef0:	69dd      	ldr	r5, [r3, #28]
 8015ef2:	ab04      	add	r3, sp, #16
 8015ef4:	47a8      	blx	r5
 8015ef6:	6820      	ldr	r0, [r4, #0]
 8015ef8:	6803      	ldr	r3, [r0, #0]
 8015efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015efc:	4798      	blx	r3
 8015efe:	e7e8      	b.n	8015ed2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f00:	24006c64 	.word	0x24006c64
 8015f04:	24006c5e 	.word	0x24006c5e

08015f08 <_ZN8touchgfx8LCD24bppC1Ev>:
 8015f08:	2200      	movs	r2, #0
 8015f0a:	490c      	ldr	r1, [pc, #48]	; (8015f3c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8015f0c:	6042      	str	r2, [r0, #4]
 8015f0e:	6001      	str	r1, [r0, #0]
 8015f10:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8015f14:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8015f18:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8015f1c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015f20:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8015f24:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8015f28:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8015f2c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8015f30:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8015f34:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8015f38:	4770      	bx	lr
 8015f3a:	bf00      	nop
 8015f3c:	080207fc 	.word	0x080207fc

08015f40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8015f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f44:	b091      	sub	sp, #68	; 0x44
 8015f46:	880d      	ldrh	r5, [r1, #0]
 8015f48:	4607      	mov	r7, r0
 8015f4a:	4688      	mov	r8, r1
 8015f4c:	4616      	mov	r6, r2
 8015f4e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8015f52:	b12d      	cbz	r5, 8015f60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8015f54:	4b69      	ldr	r3, [pc, #420]	; (80160fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8015f56:	2160      	movs	r1, #96	; 0x60
 8015f58:	4a69      	ldr	r2, [pc, #420]	; (8016100 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8015f5a:	486a      	ldr	r0, [pc, #424]	; (8016104 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8015f5c:	f006 f9a6 	bl	801c2ac <__assert_func>
 8015f60:	6810      	ldr	r0, [r2, #0]
 8015f62:	ac0c      	add	r4, sp, #48	; 0x30
 8015f64:	6851      	ldr	r1, [r2, #4]
 8015f66:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8016108 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8015f6a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 801610c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8015f6e:	c403      	stmia	r4!, {r0, r1}
 8015f70:	6818      	ldr	r0, [r3, #0]
 8015f72:	ac0e      	add	r4, sp, #56	; 0x38
 8015f74:	6859      	ldr	r1, [r3, #4]
 8015f76:	c403      	stmia	r4!, {r0, r1}
 8015f78:	a80c      	add	r0, sp, #48	; 0x30
 8015f7a:	f7fa f9ef 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f7e:	4631      	mov	r1, r6
 8015f80:	a80e      	add	r0, sp, #56	; 0x38
 8015f82:	f7fa fa2f 	bl	80103e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015f86:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015f8a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015f8e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015f92:	f8da 0000 	ldr.w	r0, [sl]
 8015f96:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015f9a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8015f9e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8015fa2:	440f      	add	r7, r1
 8015fa4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015fa8:	440a      	add	r2, r1
 8015faa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015fae:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015fb2:	4413      	add	r3, r2
 8015fb4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015fb8:	6803      	ldr	r3, [r0, #0]
 8015fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fbc:	4798      	blx	r3
 8015fbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015fc2:	f8da 0000 	ldr.w	r0, [sl]
 8015fc6:	d01e      	beq.n	8016006 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8015fc8:	6801      	ldr	r1, [r0, #0]
 8015fca:	2201      	movs	r2, #1
 8015fcc:	9509      	str	r5, [sp, #36]	; 0x24
 8015fce:	250b      	movs	r5, #11
 8015fd0:	b2a4      	uxth	r4, r4
 8015fd2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015fd6:	b2b6      	uxth	r6, r6
 8015fd8:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8015fdc:	f8bb 5000 	ldrh.w	r5, [fp]
 8015fe0:	f8cd 9010 	str.w	r9, [sp, #16]
 8015fe4:	9602      	str	r6, [sp, #8]
 8015fe6:	9401      	str	r4, [sp, #4]
 8015fe8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8015fec:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8015ff0:	9203      	str	r2, [sp, #12]
 8015ff2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015ff6:	9200      	str	r2, [sp, #0]
 8015ff8:	4642      	mov	r2, r8
 8015ffa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8015ffc:	4639      	mov	r1, r7
 8015ffe:	47a0      	blx	r4
 8016000:	b011      	add	sp, #68	; 0x44
 8016002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016006:	6803      	ldr	r3, [r0, #0]
 8016008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801600a:	4798      	blx	r3
 801600c:	f8bb 5000 	ldrh.w	r5, [fp]
 8016010:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8016014:	f04f 0e04 	mov.w	lr, #4
 8016018:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801601c:	436e      	muls	r6, r5
 801601e:	fb05 2303 	mla	r3, r5, r3, r2
 8016022:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016026:	1b2d      	subs	r5, r5, r4
 8016028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801602c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016030:	4418      	add	r0, r3
 8016032:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016036:	1982      	adds	r2, r0, r6
 8016038:	1b1b      	subs	r3, r3, r4
 801603a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801603e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016040:	4290      	cmp	r0, r2
 8016042:	d254      	bcs.n	80160ee <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8016044:	eb00 0a04 	add.w	sl, r0, r4
 8016048:	4550      	cmp	r0, sl
 801604a:	d24c      	bcs.n	80160e6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801604c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016050:	fb1e e101 	smlabb	r1, lr, r1, lr
 8016054:	eb08 0c01 	add.w	ip, r8, r1
 8016058:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801605c:	b173      	cbz	r3, 801607c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801605e:	2bff      	cmp	r3, #255	; 0xff
 8016060:	f818 b001 	ldrb.w	fp, [r8, r1]
 8016064:	d10c      	bne.n	8016080 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8016066:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801606a:	d109      	bne.n	8016080 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801606c:	f880 b000 	strb.w	fp, [r0]
 8016070:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8016074:	7043      	strb	r3, [r0, #1]
 8016076:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801607a:	7083      	strb	r3, [r0, #2]
 801607c:	3003      	adds	r0, #3
 801607e:	e7e3      	b.n	8016048 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8016080:	fb09 f103 	mul.w	r1, r9, r3
 8016084:	1c4b      	adds	r3, r1, #1
 8016086:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801608a:	7801      	ldrb	r1, [r0, #0]
 801608c:	121b      	asrs	r3, r3, #8
 801608e:	b29e      	uxth	r6, r3
 8016090:	43db      	mvns	r3, r3
 8016092:	fb1b fb06 	smulbb	fp, fp, r6
 8016096:	b2db      	uxtb	r3, r3
 8016098:	fb01 b103 	mla	r1, r1, r3, fp
 801609c:	b289      	uxth	r1, r1
 801609e:	f101 0b01 	add.w	fp, r1, #1
 80160a2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80160a6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80160aa:	fb1b fb03 	smulbb	fp, fp, r3
 80160ae:	1209      	asrs	r1, r1, #8
 80160b0:	7001      	strb	r1, [r0, #0]
 80160b2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80160b6:	fb01 b106 	mla	r1, r1, r6, fp
 80160ba:	b289      	uxth	r1, r1
 80160bc:	f101 0b01 	add.w	fp, r1, #1
 80160c0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80160c4:	1209      	asrs	r1, r1, #8
 80160c6:	7041      	strb	r1, [r0, #1]
 80160c8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80160cc:	f890 c002 	ldrb.w	ip, [r0, #2]
 80160d0:	fb1c f303 	smulbb	r3, ip, r3
 80160d4:	fb01 3606 	mla	r6, r1, r6, r3
 80160d8:	b2b6      	uxth	r6, r6
 80160da:	1c73      	adds	r3, r6, #1
 80160dc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80160e0:	1236      	asrs	r6, r6, #8
 80160e2:	7086      	strb	r6, [r0, #2]
 80160e4:	e7ca      	b.n	801607c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80160e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160e8:	4428      	add	r0, r5
 80160ea:	441f      	add	r7, r3
 80160ec:	e7a8      	b.n	8016040 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 80160ee:	4b06      	ldr	r3, [pc, #24]	; (8016108 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80160f0:	6818      	ldr	r0, [r3, #0]
 80160f2:	6803      	ldr	r3, [r0, #0]
 80160f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160f6:	4798      	blx	r3
 80160f8:	e782      	b.n	8016000 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 80160fa:	bf00      	nop
 80160fc:	08020345 	.word	0x08020345
 8016100:	080209d3 	.word	0x080209d3
 8016104:	080203e1 	.word	0x080203e1
 8016108:	24006c64 	.word	0x24006c64
 801610c:	24006c5e 	.word	0x24006c5e

08016110 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8016110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016114:	f8b1 9000 	ldrh.w	r9, [r1]
 8016118:	b091      	sub	sp, #68	; 0x44
 801611a:	4604      	mov	r4, r0
 801611c:	460e      	mov	r6, r1
 801611e:	f1b9 0f01 	cmp.w	r9, #1
 8016122:	4690      	mov	r8, r2
 8016124:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8016128:	d005      	beq.n	8016136 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801612a:	4b69      	ldr	r3, [pc, #420]	; (80162d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801612c:	21ae      	movs	r1, #174	; 0xae
 801612e:	4a69      	ldr	r2, [pc, #420]	; (80162d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8016130:	4869      	ldr	r0, [pc, #420]	; (80162d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8016132:	f006 f8bb 	bl	801c2ac <__assert_func>
 8016136:	6810      	ldr	r0, [r2, #0]
 8016138:	ad0c      	add	r5, sp, #48	; 0x30
 801613a:	6851      	ldr	r1, [r2, #4]
 801613c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80162dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8016140:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80162e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8016144:	c503      	stmia	r5!, {r0, r1}
 8016146:	6818      	ldr	r0, [r3, #0]
 8016148:	ad0e      	add	r5, sp, #56	; 0x38
 801614a:	6859      	ldr	r1, [r3, #4]
 801614c:	c503      	stmia	r5!, {r0, r1}
 801614e:	a80c      	add	r0, sp, #48	; 0x30
 8016150:	f7fa f904 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016154:	4641      	mov	r1, r8
 8016156:	a80e      	add	r0, sp, #56	; 0x38
 8016158:	f7fa f944 	bl	80103e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801615c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8016160:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016164:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016168:	f8da 0000 	ldr.w	r0, [sl]
 801616c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016170:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8016174:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8016178:	440c      	add	r4, r1
 801617a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801617e:	440a      	add	r2, r1
 8016180:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8016184:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016188:	4413      	add	r3, r2
 801618a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801618e:	6803      	ldr	r3, [r0, #0]
 8016190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016192:	4798      	blx	r3
 8016194:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016198:	f8da 0000 	ldr.w	r0, [sl]
 801619c:	d020      	beq.n	80161e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 801619e:	2200      	movs	r2, #0
 80161a0:	f04f 0c0b 	mov.w	ip, #11
 80161a4:	6801      	ldr	r1, [r0, #0]
 80161a6:	b2ad      	uxth	r5, r5
 80161a8:	f8cd c01c 	str.w	ip, [sp, #28]
 80161ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80161b0:	e9cd 9208 	strd	r9, r2, [sp, #32]
 80161b4:	f8bb c000 	ldrh.w	ip, [fp]
 80161b8:	9704      	str	r7, [sp, #16]
 80161ba:	9502      	str	r5, [sp, #8]
 80161bc:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 80161c0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80161c4:	9203      	str	r2, [sp, #12]
 80161c6:	fa1f f288 	uxth.w	r2, r8
 80161ca:	9201      	str	r2, [sp, #4]
 80161cc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80161d0:	9200      	str	r2, [sp, #0]
 80161d2:	4632      	mov	r2, r6
 80161d4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80161d6:	4621      	mov	r1, r4
 80161d8:	47a8      	blx	r5
 80161da:	b011      	add	sp, #68	; 0x44
 80161dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e0:	6803      	ldr	r3, [r0, #0]
 80161e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161e4:	4798      	blx	r3
 80161e6:	f8bb 2000 	ldrh.w	r2, [fp]
 80161ea:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80161ee:	f04f 0e03 	mov.w	lr, #3
 80161f2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80161f6:	4355      	muls	r5, r2
 80161f8:	fa1f fc87 	uxth.w	ip, r7
 80161fc:	fb02 1303 	mla	r3, r2, r3, r1
 8016200:	eba2 0208 	sub.w	r2, r2, r8
 8016204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801620c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016210:	4418      	add	r0, r3
 8016212:	920b      	str	r2, [sp, #44]	; 0x2c
 8016214:	1943      	adds	r3, r0, r5
 8016216:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801621a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801621e:	eba2 0208 	sub.w	r2, r2, r8
 8016222:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016226:	b2ad      	uxth	r5, r5
 8016228:	4298      	cmp	r0, r3
 801622a:	d24a      	bcs.n	80162c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801622c:	eb00 0908 	add.w	r9, r0, r8
 8016230:	4621      	mov	r1, r4
 8016232:	4548      	cmp	r0, r9
 8016234:	460c      	mov	r4, r1
 8016236:	d240      	bcs.n	80162ba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8016238:	f04f 0a04 	mov.w	sl, #4
 801623c:	7824      	ldrb	r4, [r4, #0]
 801623e:	2fff      	cmp	r7, #255	; 0xff
 8016240:	f101 0101 	add.w	r1, r1, #1
 8016244:	fb1e a404 	smlabb	r4, lr, r4, sl
 8016248:	eb06 0a04 	add.w	sl, r6, r4
 801624c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8016250:	d02b      	beq.n	80162aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8016252:	7804      	ldrb	r4, [r0, #0]
 8016254:	fb14 f405 	smulbb	r4, r4, r5
 8016258:	fb0b 440c 	mla	r4, fp, ip, r4
 801625c:	b2a4      	uxth	r4, r4
 801625e:	f104 0b01 	add.w	fp, r4, #1
 8016262:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016266:	f890 b001 	ldrb.w	fp, [r0, #1]
 801626a:	fb1b fb05 	smulbb	fp, fp, r5
 801626e:	1224      	asrs	r4, r4, #8
 8016270:	7004      	strb	r4, [r0, #0]
 8016272:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8016276:	fb04 b40c 	mla	r4, r4, ip, fp
 801627a:	b2a4      	uxth	r4, r4
 801627c:	f104 0b01 	add.w	fp, r4, #1
 8016280:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016284:	1224      	asrs	r4, r4, #8
 8016286:	7044      	strb	r4, [r0, #1]
 8016288:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801628c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8016290:	fb1a fa05 	smulbb	sl, sl, r5
 8016294:	fb04 a40c 	mla	r4, r4, ip, sl
 8016298:	b2a4      	uxth	r4, r4
 801629a:	f104 0a01 	add.w	sl, r4, #1
 801629e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80162a2:	1224      	asrs	r4, r4, #8
 80162a4:	7084      	strb	r4, [r0, #2]
 80162a6:	3003      	adds	r0, #3
 80162a8:	e7c3      	b.n	8016232 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 80162aa:	f880 b000 	strb.w	fp, [r0]
 80162ae:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80162b2:	7044      	strb	r4, [r0, #1]
 80162b4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80162b8:	e7f4      	b.n	80162a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 80162ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80162bc:	4420      	add	r0, r4
 80162be:	188c      	adds	r4, r1, r2
 80162c0:	e7b2      	b.n	8016228 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 80162c2:	4b06      	ldr	r3, [pc, #24]	; (80162dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 80162c4:	6818      	ldr	r0, [r3, #0]
 80162c6:	6803      	ldr	r3, [r0, #0]
 80162c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162ca:	4798      	blx	r3
 80162cc:	e785      	b.n	80161da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 80162ce:	bf00      	nop
 80162d0:	080202c4 	.word	0x080202c4
 80162d4:	080208c6 	.word	0x080208c6
 80162d8:	080203e1 	.word	0x080203e1
 80162dc:	24006c64 	.word	0x24006c64
 80162e0:	24006c5e 	.word	0x24006c5e

080162e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80162e4:	b570      	push	{r4, r5, r6, lr}
 80162e6:	780d      	ldrb	r5, [r1, #0]
 80162e8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80162ec:	2d01      	cmp	r5, #1
 80162ee:	d00d      	beq.n	801630c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 80162f0:	d307      	bcc.n	8016302 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 80162f2:	2d02      	cmp	r5, #2
 80162f4:	d10f      	bne.n	8016316 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 80162f6:	4b08      	ldr	r3, [pc, #32]	; (8016318 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 80162f8:	2153      	movs	r1, #83	; 0x53
 80162fa:	4a08      	ldr	r2, [pc, #32]	; (801631c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 80162fc:	4808      	ldr	r0, [pc, #32]	; (8016320 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 80162fe:	f005 ffd5 	bl	801c2ac <__assert_func>
 8016302:	9404      	str	r4, [sp, #16]
 8016304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016308:	f7ff be1a 	b.w	8015f40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801630c:	9404      	str	r4, [sp, #16]
 801630e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016312:	f7ff befd 	b.w	8016110 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8016316:	bd70      	pop	{r4, r5, r6, pc}
 8016318:	08020279 	.word	0x08020279
 801631c:	08020844 	.word	0x08020844
 8016320:	080203e1 	.word	0x080203e1

08016324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8016324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016328:	4605      	mov	r5, r0
 801632a:	b08f      	sub	sp, #60	; 0x3c
 801632c:	460c      	mov	r4, r1
 801632e:	461f      	mov	r7, r3
 8016330:	2b00      	cmp	r3, #0
 8016332:	d052      	beq.n	80163da <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016334:	6808      	ldr	r0, [r1, #0]
 8016336:	ab0a      	add	r3, sp, #40	; 0x28
 8016338:	6849      	ldr	r1, [r1, #4]
 801633a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8016504 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801633e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8016508 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8016342:	c303      	stmia	r3!, {r0, r1}
 8016344:	6810      	ldr	r0, [r2, #0]
 8016346:	ab0c      	add	r3, sp, #48	; 0x30
 8016348:	6851      	ldr	r1, [r2, #4]
 801634a:	c303      	stmia	r3!, {r0, r1}
 801634c:	a80a      	add	r0, sp, #40	; 0x28
 801634e:	f7fa f805 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016352:	4621      	mov	r1, r4
 8016354:	a80c      	add	r0, sp, #48	; 0x30
 8016356:	f7fa f845 	bl	80103e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801635a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801635e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016362:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016366:	f8d8 0000 	ldr.w	r0, [r8]
 801636a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801636e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8016372:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8016376:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801637a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801637e:	440a      	add	r2, r1
 8016380:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8016384:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016388:	4413      	add	r3, r2
 801638a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801638e:	6803      	ldr	r3, [r0, #0]
 8016390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016392:	4798      	blx	r3
 8016394:	2fff      	cmp	r7, #255	; 0xff
 8016396:	d023      	beq.n	80163e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8016398:	f010 0f04 	tst.w	r0, #4
 801639c:	f8d8 0000 	ldr.w	r0, [r8]
 80163a0:	d021      	beq.n	80163e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80163a2:	2100      	movs	r1, #0
 80163a4:	f04f 0e01 	mov.w	lr, #1
 80163a8:	f8d0 c000 	ldr.w	ip, [r0]
 80163ac:	b2a4      	uxth	r4, r4
 80163ae:	9106      	str	r1, [sp, #24]
 80163b0:	b2b6      	uxth	r6, r6
 80163b2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80163b6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80163ba:	e9cd e107 	strd	lr, r1, [sp, #28]
 80163be:	f8b9 e000 	ldrh.w	lr, [r9]
 80163c2:	9703      	str	r7, [sp, #12]
 80163c4:	9401      	str	r4, [sp, #4]
 80163c6:	9600      	str	r6, [sp, #0]
 80163c8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80163cc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80163d0:	9102      	str	r1, [sp, #8]
 80163d2:	4629      	mov	r1, r5
 80163d4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80163d8:	47a0      	blx	r4
 80163da:	b00f      	add	sp, #60	; 0x3c
 80163dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163e0:	f010 0f01 	tst.w	r0, #1
 80163e4:	e7da      	b.n	801639c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80163e6:	6803      	ldr	r3, [r0, #0]
 80163e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163ea:	4798      	blx	r3
 80163ec:	f8b9 1000 	ldrh.w	r1, [r9]
 80163f0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80163f4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80163f8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80163fc:	434c      	muls	r4, r1
 80163fe:	2fff      	cmp	r7, #255	; 0xff
 8016400:	fb01 2303 	mla	r3, r1, r3, r2
 8016404:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016408:	eba1 0106 	sub.w	r1, r1, r6
 801640c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016410:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016414:	4418      	add	r0, r3
 8016416:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801641a:	eba3 0606 	sub.w	r6, r3, r6
 801641e:	4404      	add	r4, r0
 8016420:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8016424:	d04a      	beq.n	80164bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8016426:	43fa      	mvns	r2, r7
 8016428:	b2bb      	uxth	r3, r7
 801642a:	b2d7      	uxtb	r7, r2
 801642c:	42a0      	cmp	r0, r4
 801642e:	d263      	bcs.n	80164f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016430:	eb00 0e0c 	add.w	lr, r0, ip
 8016434:	4586      	cmp	lr, r0
 8016436:	f100 0803 	add.w	r8, r0, #3
 801643a:	d93a      	bls.n	80164b2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801643c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8016440:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8016444:	00d0      	lsls	r0, r2, #3
 8016446:	fb19 f907 	smulbb	r9, r9, r7
 801644a:	b2c0      	uxtb	r0, r0
 801644c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8016450:	fb00 9003 	mla	r0, r0, r3, r9
 8016454:	b280      	uxth	r0, r0
 8016456:	f100 0901 	add.w	r9, r0, #1
 801645a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801645e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8016462:	fb19 f907 	smulbb	r9, r9, r7
 8016466:	1200      	asrs	r0, r0, #8
 8016468:	f808 0c03 	strb.w	r0, [r8, #-3]
 801646c:	10d0      	asrs	r0, r2, #3
 801646e:	1212      	asrs	r2, r2, #8
 8016470:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8016474:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8016478:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801647c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016480:	fb00 9003 	mla	r0, r0, r3, r9
 8016484:	b280      	uxth	r0, r0
 8016486:	f100 0901 	add.w	r9, r0, #1
 801648a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801648e:	1200      	asrs	r0, r0, #8
 8016490:	f808 0c02 	strb.w	r0, [r8, #-2]
 8016494:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8016498:	fb10 f007 	smulbb	r0, r0, r7
 801649c:	fb02 0203 	mla	r2, r2, r3, r0
 80164a0:	b292      	uxth	r2, r2
 80164a2:	1c50      	adds	r0, r2, #1
 80164a4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80164a8:	4640      	mov	r0, r8
 80164aa:	1212      	asrs	r2, r2, #8
 80164ac:	f808 2c01 	strb.w	r2, [r8, #-1]
 80164b0:	e7c0      	b.n	8016434 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80164b2:	4408      	add	r0, r1
 80164b4:	4435      	add	r5, r6
 80164b6:	e7b9      	b.n	801642c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80164b8:	4408      	add	r0, r1
 80164ba:	4435      	add	r5, r6
 80164bc:	42a0      	cmp	r0, r4
 80164be:	d21b      	bcs.n	80164f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80164c0:	eb00 070c 	add.w	r7, r0, ip
 80164c4:	42b8      	cmp	r0, r7
 80164c6:	d2f7      	bcs.n	80164b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80164c8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80164cc:	3003      	adds	r0, #3
 80164ce:	00da      	lsls	r2, r3, #3
 80164d0:	b2d2      	uxtb	r2, r2
 80164d2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80164d6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80164da:	10da      	asrs	r2, r3, #3
 80164dc:	121b      	asrs	r3, r3, #8
 80164de:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80164e2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80164e6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80164ea:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80164ee:	f800 2c02 	strb.w	r2, [r0, #-2]
 80164f2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80164f6:	e7e5      	b.n	80164c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80164f8:	4b02      	ldr	r3, [pc, #8]	; (8016504 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80164fa:	6818      	ldr	r0, [r3, #0]
 80164fc:	6803      	ldr	r3, [r0, #0]
 80164fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016500:	4798      	blx	r3
 8016502:	e76a      	b.n	80163da <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016504:	24006c64 	.word	0x24006c64
 8016508:	24006c5e 	.word	0x24006c5e

0801650c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801650c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016510:	b08a      	sub	sp, #40	; 0x28
 8016512:	460d      	mov	r5, r1
 8016514:	4604      	mov	r4, r0
 8016516:	461e      	mov	r6, r3
 8016518:	6808      	ldr	r0, [r1, #0]
 801651a:	ab06      	add	r3, sp, #24
 801651c:	6849      	ldr	r1, [r1, #4]
 801651e:	4f5d      	ldr	r7, [pc, #372]	; (8016694 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8016520:	c303      	stmia	r3!, {r0, r1}
 8016522:	6810      	ldr	r0, [r2, #0]
 8016524:	ab08      	add	r3, sp, #32
 8016526:	6851      	ldr	r1, [r2, #4]
 8016528:	c303      	stmia	r3!, {r0, r1}
 801652a:	a806      	add	r0, sp, #24
 801652c:	f7f9 ff16 	bl	801035c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016530:	4629      	mov	r1, r5
 8016532:	a808      	add	r0, sp, #32
 8016534:	f7f9 ff56 	bl	80103e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016538:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801653c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016540:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016544:	6838      	ldr	r0, [r7, #0]
 8016546:	fb11 2103 	smlabb	r1, r1, r3, r2
 801654a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801654e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8016552:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016556:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801655a:	440a      	add	r2, r1
 801655c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016560:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016564:	4413      	add	r3, r2
 8016566:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801656a:	6803      	ldr	r3, [r0, #0]
 801656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801656e:	4798      	blx	r3
 8016570:	2eff      	cmp	r6, #255	; 0xff
 8016572:	d119      	bne.n	80165a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8016574:	f010 0f20 	tst.w	r0, #32
 8016578:	6838      	ldr	r0, [r7, #0]
 801657a:	d018      	beq.n	80165ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801657c:	b2ad      	uxth	r5, r5
 801657e:	2700      	movs	r7, #0
 8016580:	6801      	ldr	r1, [r0, #0]
 8016582:	9501      	str	r5, [sp, #4]
 8016584:	fa1f f588 	uxth.w	r5, r8
 8016588:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801658c:	9500      	str	r5, [sp, #0]
 801658e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016592:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8016596:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801659a:	9602      	str	r6, [sp, #8]
 801659c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801659e:	4621      	mov	r1, r4
 80165a0:	47a8      	blx	r5
 80165a2:	b00a      	add	sp, #40	; 0x28
 80165a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80165ac:	e7e4      	b.n	8016578 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80165ae:	6803      	ldr	r3, [r0, #0]
 80165b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165b2:	4798      	blx	r3
 80165b4:	4b38      	ldr	r3, [pc, #224]	; (8016698 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80165b6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80165ba:	f8b3 c000 	ldrh.w	ip, [r3]
 80165be:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80165c2:	fb0c f505 	mul.w	r5, ip, r5
 80165c6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80165ca:	fb0c 2303 	mla	r3, ip, r3, r2
 80165ce:	ebac 0c08 	sub.w	ip, ip, r8
 80165d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165d6:	ebae 0e08 	sub.w	lr, lr, r8
 80165da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80165de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80165e2:	4418      	add	r0, r3
 80165e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80165e8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80165ec:	4405      	add	r5, r0
 80165ee:	42a8      	cmp	r0, r5
 80165f0:	d24a      	bcs.n	8016688 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80165f2:	eb00 0803 	add.w	r8, r0, r3
 80165f6:	4540      	cmp	r0, r8
 80165f8:	d243      	bcs.n	8016682 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80165fa:	78e2      	ldrb	r2, [r4, #3]
 80165fc:	b15a      	cbz	r2, 8016616 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80165fe:	2aff      	cmp	r2, #255	; 0xff
 8016600:	f894 9000 	ldrb.w	r9, [r4]
 8016604:	d10a      	bne.n	801661c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016606:	2eff      	cmp	r6, #255	; 0xff
 8016608:	d108      	bne.n	801661c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801660a:	f880 9000 	strb.w	r9, [r0]
 801660e:	7862      	ldrb	r2, [r4, #1]
 8016610:	7042      	strb	r2, [r0, #1]
 8016612:	78a2      	ldrb	r2, [r4, #2]
 8016614:	7082      	strb	r2, [r0, #2]
 8016616:	3003      	adds	r0, #3
 8016618:	3404      	adds	r4, #4
 801661a:	e7ec      	b.n	80165f6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801661c:	4372      	muls	r2, r6
 801661e:	1c51      	adds	r1, r2, #1
 8016620:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8016624:	1209      	asrs	r1, r1, #8
 8016626:	fa1f fa81 	uxth.w	sl, r1
 801662a:	43c9      	mvns	r1, r1
 801662c:	fb19 f90a 	smulbb	r9, r9, sl
 8016630:	b2ca      	uxtb	r2, r1
 8016632:	7801      	ldrb	r1, [r0, #0]
 8016634:	fb01 9902 	mla	r9, r1, r2, r9
 8016638:	fa1f f989 	uxth.w	r9, r9
 801663c:	f109 0101 	add.w	r1, r9, #1
 8016640:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8016644:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016648:	f880 9000 	strb.w	r9, [r0]
 801664c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8016650:	7861      	ldrb	r1, [r4, #1]
 8016652:	fb19 f902 	smulbb	r9, r9, r2
 8016656:	fb01 910a 	mla	r1, r1, sl, r9
 801665a:	b289      	uxth	r1, r1
 801665c:	f101 0901 	add.w	r9, r1, #1
 8016660:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8016664:	1209      	asrs	r1, r1, #8
 8016666:	7041      	strb	r1, [r0, #1]
 8016668:	7881      	ldrb	r1, [r0, #2]
 801666a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801666e:	fb11 f202 	smulbb	r2, r1, r2
 8016672:	fb09 220a 	mla	r2, r9, sl, r2
 8016676:	b292      	uxth	r2, r2
 8016678:	1c51      	adds	r1, r2, #1
 801667a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801667e:	1212      	asrs	r2, r2, #8
 8016680:	e7c8      	b.n	8016614 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8016682:	4460      	add	r0, ip
 8016684:	4474      	add	r4, lr
 8016686:	e7b2      	b.n	80165ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8016688:	6838      	ldr	r0, [r7, #0]
 801668a:	6803      	ldr	r3, [r0, #0]
 801668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801668e:	4798      	blx	r3
 8016690:	e787      	b.n	80165a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8016692:	bf00      	nop
 8016694:	24006c64 	.word	0x24006c64
 8016698:	24006c5e 	.word	0x24006c5e

0801669c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801669c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166a0:	b085      	sub	sp, #20
 80166a2:	4606      	mov	r6, r0
 80166a4:	460c      	mov	r4, r1
 80166a6:	4691      	mov	r9, r2
 80166a8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80166ac:	4698      	mov	r8, r3
 80166ae:	b31d      	cbz	r5, 80166f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80166b0:	4608      	mov	r0, r1
 80166b2:	f7fd f9e9 	bl	8013a88 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80166b6:	4607      	mov	r7, r0
 80166b8:	4620      	mov	r0, r4
 80166ba:	f7fd fa1f 	bl	8013afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80166be:	f8ad 000e 	strh.w	r0, [sp, #14]
 80166c2:	4620      	mov	r0, r4
 80166c4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80166c8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80166cc:	f8ad 700c 	strh.w	r7, [sp, #12]
 80166d0:	f7fd fb6c 	bl	8013dac <_ZNK8touchgfx6Bitmap9getFormatEv>
 80166d4:	280b      	cmp	r0, #11
 80166d6:	d838      	bhi.n	801674a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 80166d8:	e8df f000 	tbb	[pc, r0]
 80166dc:	37062920 	.word	0x37062920
 80166e0:	37373737 	.word	0x37373737
 80166e4:	11373737 	.word	0x11373737
 80166e8:	4620      	mov	r0, r4
 80166ea:	f7fd fad5 	bl	8013c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 80166ee:	462b      	mov	r3, r5
 80166f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166f2:	a902      	add	r1, sp, #8
 80166f4:	f7ff ff0a 	bl	801650c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80166f8:	b005      	add	sp, #20
 80166fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166fe:	4620      	mov	r0, r4
 8016700:	f7fd faca 	bl	8013c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016704:	4606      	mov	r6, r0
 8016706:	4620      	mov	r0, r4
 8016708:	f7fd faf8 	bl	8013cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801670c:	9500      	str	r5, [sp, #0]
 801670e:	4601      	mov	r1, r0
 8016710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016712:	aa02      	add	r2, sp, #8
 8016714:	4630      	mov	r0, r6
 8016716:	f7ff fde5 	bl	80162e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801671a:	e7ed      	b.n	80166f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801671c:	4620      	mov	r0, r4
 801671e:	f7fd fabb 	bl	8013c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016722:	462b      	mov	r3, r5
 8016724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016726:	a902      	add	r1, sp, #8
 8016728:	f7ff fdfc 	bl	8016324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801672c:	e7e4      	b.n	80166f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801672e:	6833      	ldr	r3, [r6, #0]
 8016730:	4620      	mov	r0, r4
 8016732:	68df      	ldr	r7, [r3, #12]
 8016734:	f7fd fab0 	bl	8013c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016738:	2300      	movs	r3, #0
 801673a:	4601      	mov	r1, r0
 801673c:	aa02      	add	r2, sp, #8
 801673e:	4630      	mov	r0, r6
 8016740:	e9cd 5300 	strd	r5, r3, [sp]
 8016744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016746:	47b8      	blx	r7
 8016748:	e7d6      	b.n	80166f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801674a:	4b03      	ldr	r3, [pc, #12]	; (8016758 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801674c:	2147      	movs	r1, #71	; 0x47
 801674e:	4a03      	ldr	r2, [pc, #12]	; (801675c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8016750:	4803      	ldr	r0, [pc, #12]	; (8016760 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8016752:	f005 fdab 	bl	801c2ac <__assert_func>
 8016756:	bf00      	nop
 8016758:	08020312 	.word	0x08020312
 801675c:	0802094f 	.word	0x0802094f
 8016760:	080203e1 	.word	0x080203e1

08016764 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8016764:	b570      	push	{r4, r5, r6, lr}
 8016766:	9c04      	ldr	r4, [sp, #16]
 8016768:	4605      	mov	r5, r0
 801676a:	4608      	mov	r0, r1
 801676c:	4619      	mov	r1, r3
 801676e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016772:	2a0d      	cmp	r2, #13
 8016774:	d826      	bhi.n	80167c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8016776:	e8df f002 	tbb	[pc, r2]
 801677a:	1107      	.short	0x1107
 801677c:	1e1e1e0c 	.word	0x1e1e1e0c
 8016780:	1e1e1e1e 	.word	0x1e1e1e1e
 8016784:	1e1e1e1e 	.word	0x1e1e1e1e
 8016788:	4622      	mov	r2, r4
 801678a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801678e:	f7ff bdc9 	b.w	8016324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016792:	4622      	mov	r2, r4
 8016794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016798:	f7ff beb8 	b.w	801650c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801679c:	682a      	ldr	r2, [r5, #0]
 801679e:	2600      	movs	r6, #0
 80167a0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80167a4:	68d6      	ldr	r6, [r2, #12]
 80167a6:	4623      	mov	r3, r4
 80167a8:	460a      	mov	r2, r1
 80167aa:	4601      	mov	r1, r0
 80167ac:	46b4      	mov	ip, r6
 80167ae:	4628      	mov	r0, r5
 80167b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167b4:	4760      	bx	ip
 80167b6:	4b04      	ldr	r3, [pc, #16]	; (80167c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80167b8:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80167bc:	4a03      	ldr	r2, [pc, #12]	; (80167cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80167be:	4804      	ldr	r0, [pc, #16]	; (80167d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80167c0:	f005 fd74 	bl	801c2ac <__assert_func>
 80167c4:	bd70      	pop	{r4, r5, r6, pc}
 80167c6:	bf00      	nop
 80167c8:	080205b8 	.word	0x080205b8
 80167cc:	08020c37 	.word	0x08020c37
 80167d0:	080203e1 	.word	0x080203e1

080167d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80167d4:	b158      	cbz	r0, 80167ee <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80167d6:	2902      	cmp	r1, #2
 80167d8:	d00f      	beq.n	80167fa <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80167da:	2903      	cmp	r1, #3
 80167dc:	d010      	beq.n	8016800 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80167de:	2901      	cmp	r1, #1
 80167e0:	d101      	bne.n	80167e6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80167e2:	2001      	movs	r0, #1
 80167e4:	4770      	bx	lr
 80167e6:	4b08      	ldr	r3, [pc, #32]	; (8016808 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80167e8:	8819      	ldrh	r1, [r3, #0]
 80167ea:	4248      	negs	r0, r1
 80167ec:	4770      	bx	lr
 80167ee:	2902      	cmp	r1, #2
 80167f0:	d006      	beq.n	8016800 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80167f2:	2903      	cmp	r1, #3
 80167f4:	d0f7      	beq.n	80167e6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80167f6:	2901      	cmp	r1, #1
 80167f8:	d1f3      	bne.n	80167e2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80167fa:	4b03      	ldr	r3, [pc, #12]	; (8016808 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80167fc:	8818      	ldrh	r0, [r3, #0]
 80167fe:	4770      	bx	lr
 8016800:	f04f 30ff 	mov.w	r0, #4294967295
 8016804:	4770      	bx	lr
 8016806:	bf00      	nop
 8016808:	24006c5e 	.word	0x24006c5e

0801680c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801680c:	b170      	cbz	r0, 801682c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801680e:	2902      	cmp	r1, #2
 8016810:	d012      	beq.n	8016838 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8016812:	2903      	cmp	r1, #3
 8016814:	d006      	beq.n	8016824 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8016816:	2901      	cmp	r1, #1
 8016818:	d001      	beq.n	801681e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801681a:	2001      	movs	r0, #1
 801681c:	4770      	bx	lr
 801681e:	4b08      	ldr	r3, [pc, #32]	; (8016840 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8016820:	8818      	ldrh	r0, [r3, #0]
 8016822:	4770      	bx	lr
 8016824:	4b06      	ldr	r3, [pc, #24]	; (8016840 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8016826:	8818      	ldrh	r0, [r3, #0]
 8016828:	4240      	negs	r0, r0
 801682a:	4770      	bx	lr
 801682c:	2902      	cmp	r1, #2
 801682e:	d0f9      	beq.n	8016824 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8016830:	2903      	cmp	r1, #3
 8016832:	d0f2      	beq.n	801681a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8016834:	2901      	cmp	r1, #1
 8016836:	d1f2      	bne.n	801681e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8016838:	f04f 30ff 	mov.w	r0, #4294967295
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	24006c5e 	.word	0x24006c5e

08016844 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8016844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016848:	b097      	sub	sp, #92	; 0x5c
 801684a:	910b      	str	r1, [sp, #44]	; 0x2c
 801684c:	a912      	add	r1, sp, #72	; 0x48
 801684e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8016852:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8016856:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801685a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801685e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8016862:	e881 000c 	stmia.w	r1, {r2, r3}
 8016866:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801686a:	930a      	str	r3, [sp, #40]	; 0x28
 801686c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8016870:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8016874:	9311      	str	r3, [sp, #68]	; 0x44
 8016876:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801687a:	798d      	ldrb	r5, [r1, #6]
 801687c:	930c      	str	r3, [sp, #48]	; 0x30
 801687e:	7b4b      	ldrb	r3, [r1, #13]
 8016880:	0158      	lsls	r0, r3, #5
 8016882:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016886:	4328      	orrs	r0, r5
 8016888:	9009      	str	r0, [sp, #36]	; 0x24
 801688a:	f000 817d 	beq.w	8016b88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801688e:	011b      	lsls	r3, r3, #4
 8016890:	79c8      	ldrb	r0, [r1, #7]
 8016892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016896:	4303      	orrs	r3, r0
 8016898:	930e      	str	r3, [sp, #56]	; 0x38
 801689a:	f000 8175 	beq.w	8016b88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801689e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80168a2:	b29b      	uxth	r3, r3
 80168a4:	2f00      	cmp	r7, #0
 80168a6:	f000 8117 	beq.w	8016ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 80168aa:	1aff      	subs	r7, r7, r3
 80168ac:	b2bf      	uxth	r7, r7
 80168ae:	043b      	lsls	r3, r7, #16
 80168b0:	d502      	bpl.n	80168b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80168b2:	1bf6      	subs	r6, r6, r7
 80168b4:	2700      	movs	r7, #0
 80168b6:	b236      	sxth	r6, r6
 80168b8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80168bc:	a812      	add	r0, sp, #72	; 0x48
 80168be:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80168c2:	428e      	cmp	r6, r1
 80168c4:	b28b      	uxth	r3, r1
 80168c6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80168ca:	bfbf      	itttt	lt
 80168cc:	18ff      	addlt	r7, r7, r3
 80168ce:	1bbe      	sublt	r6, r7, r6
 80168d0:	b2b7      	uxthlt	r7, r6
 80168d2:	460e      	movlt	r6, r1
 80168d4:	8891      	ldrh	r1, [r2, #4]
 80168d6:	440b      	add	r3, r1
 80168d8:	4631      	mov	r1, r6
 80168da:	b21b      	sxth	r3, r3
 80168dc:	9310      	str	r3, [sp, #64]	; 0x40
 80168de:	88d3      	ldrh	r3, [r2, #6]
 80168e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80168e2:	449a      	add	sl, r3
 80168e4:	fa0f f38a 	sxth.w	r3, sl
 80168e8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80168ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80168ee:	4bb6      	ldr	r3, [pc, #728]	; (8016bc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80168f0:	f893 b000 	ldrb.w	fp, [r3]
 80168f4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80168f8:	f1dc 0300 	rsbs	r3, ip, #0
 80168fc:	eb43 030c 	adc.w	r3, r3, ip
 8016900:	930d      	str	r3, [sp, #52]	; 0x34
 8016902:	464b      	mov	r3, r9
 8016904:	f7f9 fbae 	bl	8010064 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016908:	4631      	mov	r1, r6
 801690a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801690e:	464b      	mov	r3, r9
 8016910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016912:	a812      	add	r0, sp, #72	; 0x48
 8016914:	f7f9 fbbe 	bl	8010094 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016918:	a916      	add	r1, sp, #88	; 0x58
 801691a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801691e:	a815      	add	r0, sp, #84	; 0x54
 8016920:	f7f9 fcda 	bl	80102d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8016924:	f1b9 0f00 	cmp.w	r9, #0
 8016928:	f040 80d9 	bne.w	8016ade <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801692c:	f1bb 0f01 	cmp.w	fp, #1
 8016930:	f040 80dd 	bne.w	8016aee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8016934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016936:	b153      	cbz	r3, 801694e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8016938:	2508      	movs	r5, #8
 801693a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801693c:	fb95 f3f8 	sdiv	r3, r5, r8
 8016940:	1e5d      	subs	r5, r3, #1
 8016942:	4415      	add	r5, r2
 8016944:	fb95 f5f3 	sdiv	r5, r5, r3
 8016948:	fb15 f503 	smulbb	r5, r5, r3
 801694c:	b2ad      	uxth	r5, r5
 801694e:	b907      	cbnz	r7, 8016952 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8016950:	b16c      	cbz	r4, 801696e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8016952:	fb04 7305 	mla	r3, r4, r5, r7
 8016956:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016958:	ebaa 0a04 	sub.w	sl, sl, r4
 801695c:	fb08 f303 	mul.w	r3, r8, r3
 8016960:	fa1f fa8a 	uxth.w	sl, sl
 8016964:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016968:	f003 0407 	and.w	r4, r3, #7
 801696c:	9226      	str	r2, [sp, #152]	; 0x98
 801696e:	4649      	mov	r1, r9
 8016970:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016972:	f7ff ff2f 	bl	80167d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8016976:	4649      	mov	r1, r9
 8016978:	4683      	mov	fp, r0
 801697a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801697c:	f7ff ff46 	bl	801680c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8016980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016984:	4681      	mov	r9, r0
 8016986:	1a9b      	subs	r3, r3, r2
 8016988:	459a      	cmp	sl, r3
 801698a:	bfa8      	it	ge
 801698c:	469a      	movge	sl, r3
 801698e:	f1ba 0f00 	cmp.w	sl, #0
 8016992:	f340 80f9 	ble.w	8016b88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016996:	1bf6      	subs	r6, r6, r7
 8016998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801699a:	1b9e      	subs	r6, r3, r6
 801699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801699e:	429e      	cmp	r6, r3
 80169a0:	bfd4      	ite	le
 80169a2:	ebc7 0706 	rsble	r7, r7, r6
 80169a6:	ebc7 0703 	rsbgt	r7, r7, r3
 80169aa:	2f00      	cmp	r7, #0
 80169ac:	f340 80ec 	ble.w	8016b88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80169b0:	1bed      	subs	r5, r5, r7
 80169b2:	fb08 f305 	mul.w	r3, r8, r5
 80169b6:	930d      	str	r3, [sp, #52]	; 0x34
 80169b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169ba:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80169be:	930e      	str	r3, [sp, #56]	; 0x38
 80169c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80169c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80169c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	9310      	str	r3, [sp, #64]	; 0x40
 80169ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	f040 80de 	bne.w	8016b92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80169d6:	4b7d      	ldr	r3, [pc, #500]	; (8016bcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80169d8:	6818      	ldr	r0, [r3, #0]
 80169da:	6803      	ldr	r3, [r0, #0]
 80169dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169de:	4798      	blx	r3
 80169e0:	2301      	movs	r3, #1
 80169e2:	4a7b      	ldr	r2, [pc, #492]	; (8016bd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80169e4:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80169e8:	fb07 9b1b 	mls	fp, r7, fp, r9
 80169ec:	fa03 f308 	lsl.w	r3, r3, r8
 80169f0:	8811      	ldrh	r1, [r2, #0]
 80169f2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80169f6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80169fa:	3b01      	subs	r3, #1
 80169fc:	fb06 bb07 	mla	fp, r6, r7, fp
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	930a      	str	r3, [sp, #40]	; 0x28
 8016a04:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8016a08:	fb01 2303 	mla	r3, r1, r3, r2
 8016a0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a10:	18c3      	adds	r3, r0, r3
 8016a12:	9309      	str	r3, [sp, #36]	; 0x24
 8016a14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016a16:	781a      	ldrb	r2, [r3, #0]
 8016a18:	4122      	asrs	r2, r4
 8016a1a:	b2d2      	uxtb	r2, r2
 8016a1c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8016a20:	f0c0 80d8 	bcc.w	8016bd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8016a24:	46be      	mov	lr, r7
 8016a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a28:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016a2c:	f0c0 80ba 	bcc.w	8016ba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8016a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a32:	4013      	ands	r3, r2
 8016a34:	d041      	beq.n	8016aba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016a36:	20ff      	movs	r0, #255	; 0xff
 8016a38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016a3a:	fb90 f5f5 	sdiv	r5, r0, r5
 8016a3e:	436b      	muls	r3, r5
 8016a40:	2bfe      	cmp	r3, #254	; 0xfe
 8016a42:	dd03      	ble.n	8016a4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8016a44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a46:	4285      	cmp	r5, r0
 8016a48:	f000 80a5 	beq.w	8016b96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8016a4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a4e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016a50:	fb15 f303 	smulbb	r3, r5, r3
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	1c5d      	adds	r5, r3, #1
 8016a58:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8016a5c:	780d      	ldrb	r5, [r1, #0]
 8016a5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016a62:	fa1f fc83 	uxth.w	ip, r3
 8016a66:	43db      	mvns	r3, r3
 8016a68:	fb10 f90c 	smulbb	r9, r0, ip
 8016a6c:	b2db      	uxtb	r3, r3
 8016a6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016a70:	fb05 9503 	mla	r5, r5, r3, r9
 8016a74:	b2ad      	uxth	r5, r5
 8016a76:	f105 0901 	add.w	r9, r5, #1
 8016a7a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016a7e:	fb10 f90c 	smulbb	r9, r0, ip
 8016a82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016a84:	122d      	asrs	r5, r5, #8
 8016a86:	fb10 fc0c 	smulbb	ip, r0, ip
 8016a8a:	700d      	strb	r5, [r1, #0]
 8016a8c:	784d      	ldrb	r5, [r1, #1]
 8016a8e:	fb05 9503 	mla	r5, r5, r3, r9
 8016a92:	b2ad      	uxth	r5, r5
 8016a94:	f105 0901 	add.w	r9, r5, #1
 8016a98:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016a9c:	122d      	asrs	r5, r5, #8
 8016a9e:	704d      	strb	r5, [r1, #1]
 8016aa0:	788d      	ldrb	r5, [r1, #2]
 8016aa2:	fb05 cc03 	mla	ip, r5, r3, ip
 8016aa6:	fa1f fc8c 	uxth.w	ip, ip
 8016aaa:	f10c 0301 	add.w	r3, ip, #1
 8016aae:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8016ab2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016ab6:	f881 c002 	strb.w	ip, [r1, #2]
 8016aba:	4444      	add	r4, r8
 8016abc:	4431      	add	r1, r6
 8016abe:	b2a4      	uxth	r4, r4
 8016ac0:	2c07      	cmp	r4, #7
 8016ac2:	bf89      	itett	hi
 8016ac4:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8016ac6:	fa42 f208 	asrls.w	r2, r2, r8
 8016aca:	2400      	movhi	r4, #0
 8016acc:	785a      	ldrbhi	r2, [r3, #1]
 8016ace:	bf8a      	itet	hi
 8016ad0:	3301      	addhi	r3, #1
 8016ad2:	b2d2      	uxtbls	r2, r2
 8016ad4:	9326      	strhi	r3, [sp, #152]	; 0x98
 8016ad6:	e7a7      	b.n	8016a28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8016ad8:	441e      	add	r6, r3
 8016ada:	b236      	sxth	r6, r6
 8016adc:	e6ec      	b.n	80168b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016ade:	f1b9 0f01 	cmp.w	r9, #1
 8016ae2:	f47f af27 	bne.w	8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016ae6:	f1bb 0f01 	cmp.w	fp, #1
 8016aea:	f47f af23 	bne.w	8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016aee:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8016bcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8016af2:	f8db 0000 	ldr.w	r0, [fp]
 8016af6:	6803      	ldr	r3, [r0, #0]
 8016af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016afa:	4798      	blx	r3
 8016afc:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8016b00:	465a      	mov	r2, fp
 8016b02:	d006      	beq.n	8016b12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016b04:	f1b8 0f04 	cmp.w	r8, #4
 8016b08:	d141      	bne.n	8016b8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 8016b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b0c:	3300      	adds	r3, #0
 8016b0e:	bf18      	it	ne
 8016b10:	2301      	movne	r3, #1
 8016b12:	0580      	lsls	r0, r0, #22
 8016b14:	d567      	bpl.n	8016be6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8016b16:	f1b8 0f08 	cmp.w	r8, #8
 8016b1a:	d164      	bne.n	8016be6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	bf0c      	ite	eq
 8016b20:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8016b24:	f44f 7180 	movne.w	r1, #256	; 0x100
 8016b28:	2f00      	cmp	r7, #0
 8016b2a:	f47f af03 	bne.w	8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b2e:	2c00      	cmp	r4, #0
 8016b30:	f47f af00 	bne.w	8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b36:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016b38:	18f3      	adds	r3, r6, r3
 8016b3a:	4283      	cmp	r3, r0
 8016b3c:	f73f aefa 	bgt.w	8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b44:	4403      	add	r3, r0
 8016b46:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016b48:	4283      	cmp	r3, r0
 8016b4a:	f73f aef3 	bgt.w	8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b4e:	f1b8 0f08 	cmp.w	r8, #8
 8016b52:	6810      	ldr	r0, [r2, #0]
 8016b54:	f04f 0600 	mov.w	r6, #0
 8016b58:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016b5c:	bf18      	it	ne
 8016b5e:	3501      	addne	r5, #1
 8016b60:	6804      	ldr	r4, [r0, #0]
 8016b62:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016b66:	bf18      	it	ne
 8016b68:	f025 0501 	bicne.w	r5, r5, #1
 8016b6c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8016b70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b72:	bf18      	it	ne
 8016b74:	b2ad      	uxthne	r5, r5
 8016b76:	9104      	str	r1, [sp, #16]
 8016b78:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016b7a:	e9cd 5a00 	strd	r5, sl, [sp]
 8016b7e:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8016b82:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016b84:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8016b86:	47a0      	blx	r4
 8016b88:	b017      	add	sp, #92	; 0x5c
 8016b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8e:	2300      	movs	r3, #0
 8016b90:	e7bf      	b.n	8016b12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016b92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016b94:	e724      	b.n	80169e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8016b96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b98:	700b      	strb	r3, [r1, #0]
 8016b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b9c:	704b      	strb	r3, [r1, #1]
 8016b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ba0:	708b      	strb	r3, [r1, #2]
 8016ba2:	e78a      	b.n	8016aba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ba6:	b153      	cbz	r3, 8016bbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8016ba8:	441c      	add	r4, r3
 8016baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016bac:	b2a4      	uxth	r4, r4
 8016bae:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8016bb2:	f004 0407 	and.w	r4, r4, #7
 8016bb6:	781a      	ldrb	r2, [r3, #0]
 8016bb8:	9326      	str	r3, [sp, #152]	; 0x98
 8016bba:	4122      	asrs	r2, r4
 8016bbc:	b2d2      	uxtb	r2, r2
 8016bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bc0:	445b      	add	r3, fp
 8016bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8016bc4:	e72a      	b.n	8016a1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8016bc6:	bf00      	nop
 8016bc8:	24006c5c 	.word	0x24006c5c
 8016bcc:	24006c64 	.word	0x24006c64
 8016bd0:	24006c5e 	.word	0x24006c5e
 8016bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d1d6      	bne.n	8016b88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016bda:	4b06      	ldr	r3, [pc, #24]	; (8016bf4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8016bdc:	6818      	ldr	r0, [r3, #0]
 8016bde:	6803      	ldr	r3, [r0, #0]
 8016be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016be2:	4798      	blx	r3
 8016be4:	e7d0      	b.n	8016b88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	f43f aea4 	beq.w	8016934 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016bf0:	e79a      	b.n	8016b28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8016bf2:	bf00      	nop
 8016bf4:	24006c64 	.word	0x24006c64

08016bf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8016bf8:	b538      	push	{r3, r4, r5, lr}
 8016bfa:	4c15      	ldr	r4, [pc, #84]	; (8016c50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016bfc:	4605      	mov	r5, r0
 8016bfe:	7823      	ldrb	r3, [r4, #0]
 8016c00:	f3bf 8f5b 	dmb	ish
 8016c04:	07da      	lsls	r2, r3, #31
 8016c06:	d40b      	bmi.n	8016c20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016c08:	4620      	mov	r0, r4
 8016c0a:	f005 fa3b 	bl	801c084 <__cxa_guard_acquire>
 8016c0e:	b138      	cbz	r0, 8016c20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016c10:	4620      	mov	r0, r4
 8016c12:	f005 fa43 	bl	801c09c <__cxa_guard_release>
 8016c16:	4a0f      	ldr	r2, [pc, #60]	; (8016c54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016c18:	490f      	ldr	r1, [pc, #60]	; (8016c58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8016c1a:	4810      	ldr	r0, [pc, #64]	; (8016c5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016c1c:	f005 fa2b 	bl	801c076 <__aeabi_atexit>
 8016c20:	4c0f      	ldr	r4, [pc, #60]	; (8016c60 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8016c22:	7823      	ldrb	r3, [r4, #0]
 8016c24:	f3bf 8f5b 	dmb	ish
 8016c28:	07db      	lsls	r3, r3, #31
 8016c2a:	d40b      	bmi.n	8016c44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016c2c:	4620      	mov	r0, r4
 8016c2e:	f005 fa29 	bl	801c084 <__cxa_guard_acquire>
 8016c32:	b138      	cbz	r0, 8016c44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016c34:	4620      	mov	r0, r4
 8016c36:	f005 fa31 	bl	801c09c <__cxa_guard_release>
 8016c3a:	4a06      	ldr	r2, [pc, #24]	; (8016c54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016c3c:	4909      	ldr	r1, [pc, #36]	; (8016c64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8016c3e:	480a      	ldr	r0, [pc, #40]	; (8016c68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016c40:	f005 fa19 	bl	801c076 <__aeabi_atexit>
 8016c44:	4b05      	ldr	r3, [pc, #20]	; (8016c5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016c46:	612b      	str	r3, [r5, #16]
 8016c48:	4b07      	ldr	r3, [pc, #28]	; (8016c68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016c4a:	616b      	str	r3, [r5, #20]
 8016c4c:	bd38      	pop	{r3, r4, r5, pc}
 8016c4e:	bf00      	nop
 8016c50:	24006d30 	.word	0x24006d30
 8016c54:	24000000 	.word	0x24000000
 8016c58:	08015671 	.word	0x08015671
 8016c5c:	240000c4 	.word	0x240000c4
 8016c60:	24006d34 	.word	0x24006d34
 8016c64:	0801566f 	.word	0x0801566f
 8016c68:	240000c8 	.word	0x240000c8

08016c6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016c6c:	b538      	push	{r3, r4, r5, lr}
 8016c6e:	4c15      	ldr	r4, [pc, #84]	; (8016cc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016c70:	4605      	mov	r5, r0
 8016c72:	7823      	ldrb	r3, [r4, #0]
 8016c74:	f3bf 8f5b 	dmb	ish
 8016c78:	07da      	lsls	r2, r3, #31
 8016c7a:	d40b      	bmi.n	8016c94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	f005 fa01 	bl	801c084 <__cxa_guard_acquire>
 8016c82:	b138      	cbz	r0, 8016c94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016c84:	4620      	mov	r0, r4
 8016c86:	f005 fa09 	bl	801c09c <__cxa_guard_release>
 8016c8a:	4a0f      	ldr	r2, [pc, #60]	; (8016cc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016c8c:	490f      	ldr	r1, [pc, #60]	; (8016ccc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8016c8e:	4810      	ldr	r0, [pc, #64]	; (8016cd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016c90:	f005 f9f1 	bl	801c076 <__aeabi_atexit>
 8016c94:	4c0f      	ldr	r4, [pc, #60]	; (8016cd4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8016c96:	7823      	ldrb	r3, [r4, #0]
 8016c98:	f3bf 8f5b 	dmb	ish
 8016c9c:	07db      	lsls	r3, r3, #31
 8016c9e:	d40b      	bmi.n	8016cb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f005 f9ef 	bl	801c084 <__cxa_guard_acquire>
 8016ca6:	b138      	cbz	r0, 8016cb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016ca8:	4620      	mov	r0, r4
 8016caa:	f005 f9f7 	bl	801c09c <__cxa_guard_release>
 8016cae:	4a06      	ldr	r2, [pc, #24]	; (8016cc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016cb0:	4909      	ldr	r1, [pc, #36]	; (8016cd8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8016cb2:	480a      	ldr	r0, [pc, #40]	; (8016cdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016cb4:	f005 f9df 	bl	801c076 <__aeabi_atexit>
 8016cb8:	4b05      	ldr	r3, [pc, #20]	; (8016cd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016cba:	60ab      	str	r3, [r5, #8]
 8016cbc:	4b07      	ldr	r3, [pc, #28]	; (8016cdc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016cbe:	60eb      	str	r3, [r5, #12]
 8016cc0:	bd38      	pop	{r3, r4, r5, pc}
 8016cc2:	bf00      	nop
 8016cc4:	24006d10 	.word	0x24006d10
 8016cc8:	24000000 	.word	0x24000000
 8016ccc:	08015675 	.word	0x08015675
 8016cd0:	240000a4 	.word	0x240000a4
 8016cd4:	24006d14 	.word	0x24006d14
 8016cd8:	08015673 	.word	0x08015673
 8016cdc:	240000a8 	.word	0x240000a8

08016ce0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8016ce0:	b510      	push	{r4, lr}
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	f7ff ff88 	bl	8016bf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8016ce8:	4620      	mov	r0, r4
 8016cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cee:	f7ff bfbd 	b.w	8016c6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016cf4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016cf4:	b538      	push	{r3, r4, r5, lr}
 8016cf6:	4c15      	ldr	r4, [pc, #84]	; (8016d4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8016cf8:	4605      	mov	r5, r0
 8016cfa:	7823      	ldrb	r3, [r4, #0]
 8016cfc:	f3bf 8f5b 	dmb	ish
 8016d00:	07da      	lsls	r2, r3, #31
 8016d02:	d40b      	bmi.n	8016d1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016d04:	4620      	mov	r0, r4
 8016d06:	f005 f9bd 	bl	801c084 <__cxa_guard_acquire>
 8016d0a:	b138      	cbz	r0, 8016d1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f005 f9c5 	bl	801c09c <__cxa_guard_release>
 8016d12:	4a0f      	ldr	r2, [pc, #60]	; (8016d50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016d14:	490f      	ldr	r1, [pc, #60]	; (8016d54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8016d16:	4810      	ldr	r0, [pc, #64]	; (8016d58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016d18:	f005 f9ad 	bl	801c076 <__aeabi_atexit>
 8016d1c:	4c0f      	ldr	r4, [pc, #60]	; (8016d5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016d1e:	7823      	ldrb	r3, [r4, #0]
 8016d20:	f3bf 8f5b 	dmb	ish
 8016d24:	07db      	lsls	r3, r3, #31
 8016d26:	d40b      	bmi.n	8016d40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016d28:	4620      	mov	r0, r4
 8016d2a:	f005 f9ab 	bl	801c084 <__cxa_guard_acquire>
 8016d2e:	b138      	cbz	r0, 8016d40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016d30:	4620      	mov	r0, r4
 8016d32:	f005 f9b3 	bl	801c09c <__cxa_guard_release>
 8016d36:	4a06      	ldr	r2, [pc, #24]	; (8016d50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016d38:	4909      	ldr	r1, [pc, #36]	; (8016d60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8016d3a:	480a      	ldr	r0, [pc, #40]	; (8016d64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016d3c:	f005 f99b 	bl	801c076 <__aeabi_atexit>
 8016d40:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016d42:	622b      	str	r3, [r5, #32]
 8016d44:	4b07      	ldr	r3, [pc, #28]	; (8016d64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016d46:	626b      	str	r3, [r5, #36]	; 0x24
 8016d48:	bd38      	pop	{r3, r4, r5, pc}
 8016d4a:	bf00      	nop
 8016d4c:	24006d38 	.word	0x24006d38
 8016d50:	24000000 	.word	0x24000000
 8016d54:	08015669 	.word	0x08015669
 8016d58:	240000cc 	.word	0x240000cc
 8016d5c:	24006d3c 	.word	0x24006d3c
 8016d60:	08015667 	.word	0x08015667
 8016d64:	240000d0 	.word	0x240000d0

08016d68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4c15      	ldr	r4, [pc, #84]	; (8016dc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016d6c:	4605      	mov	r5, r0
 8016d6e:	7823      	ldrb	r3, [r4, #0]
 8016d70:	f3bf 8f5b 	dmb	ish
 8016d74:	07da      	lsls	r2, r3, #31
 8016d76:	d40b      	bmi.n	8016d90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f005 f983 	bl	801c084 <__cxa_guard_acquire>
 8016d7e:	b138      	cbz	r0, 8016d90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016d80:	4620      	mov	r0, r4
 8016d82:	f005 f98b 	bl	801c09c <__cxa_guard_release>
 8016d86:	4a0f      	ldr	r2, [pc, #60]	; (8016dc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016d88:	490f      	ldr	r1, [pc, #60]	; (8016dc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8016d8a:	4810      	ldr	r0, [pc, #64]	; (8016dcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016d8c:	f005 f973 	bl	801c076 <__aeabi_atexit>
 8016d90:	4c0f      	ldr	r4, [pc, #60]	; (8016dd0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8016d92:	7823      	ldrb	r3, [r4, #0]
 8016d94:	f3bf 8f5b 	dmb	ish
 8016d98:	07db      	lsls	r3, r3, #31
 8016d9a:	d40b      	bmi.n	8016db4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f005 f971 	bl	801c084 <__cxa_guard_acquire>
 8016da2:	b138      	cbz	r0, 8016db4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016da4:	4620      	mov	r0, r4
 8016da6:	f005 f979 	bl	801c09c <__cxa_guard_release>
 8016daa:	4a06      	ldr	r2, [pc, #24]	; (8016dc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016dac:	4909      	ldr	r1, [pc, #36]	; (8016dd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8016dae:	480a      	ldr	r0, [pc, #40]	; (8016dd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016db0:	f005 f961 	bl	801c076 <__aeabi_atexit>
 8016db4:	4b05      	ldr	r3, [pc, #20]	; (8016dcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016db6:	61ab      	str	r3, [r5, #24]
 8016db8:	4b07      	ldr	r3, [pc, #28]	; (8016dd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016dba:	61eb      	str	r3, [r5, #28]
 8016dbc:	bd38      	pop	{r3, r4, r5, pc}
 8016dbe:	bf00      	nop
 8016dc0:	24006d18 	.word	0x24006d18
 8016dc4:	24000000 	.word	0x24000000
 8016dc8:	0801566d 	.word	0x0801566d
 8016dcc:	240000ac 	.word	0x240000ac
 8016dd0:	24006d1c 	.word	0x24006d1c
 8016dd4:	0801566b 	.word	0x0801566b
 8016dd8:	240000b0 	.word	0x240000b0

08016ddc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016ddc:	b510      	push	{r4, lr}
 8016dde:	4604      	mov	r4, r0
 8016de0:	f7ff ff88 	bl	8016cf4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016de4:	4620      	mov	r0, r4
 8016de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dea:	f7ff bfbd 	b.w	8016d68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016df0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8016df0:	b538      	push	{r3, r4, r5, lr}
 8016df2:	4c15      	ldr	r4, [pc, #84]	; (8016e48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8016df4:	4605      	mov	r5, r0
 8016df6:	7823      	ldrb	r3, [r4, #0]
 8016df8:	f3bf 8f5b 	dmb	ish
 8016dfc:	07da      	lsls	r2, r3, #31
 8016dfe:	d40b      	bmi.n	8016e18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016e00:	4620      	mov	r0, r4
 8016e02:	f005 f93f 	bl	801c084 <__cxa_guard_acquire>
 8016e06:	b138      	cbz	r0, 8016e18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f005 f947 	bl	801c09c <__cxa_guard_release>
 8016e0e:	4a0f      	ldr	r2, [pc, #60]	; (8016e4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016e10:	490f      	ldr	r1, [pc, #60]	; (8016e50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8016e12:	4810      	ldr	r0, [pc, #64]	; (8016e54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016e14:	f005 f92f 	bl	801c076 <__aeabi_atexit>
 8016e18:	4c0f      	ldr	r4, [pc, #60]	; (8016e58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8016e1a:	7823      	ldrb	r3, [r4, #0]
 8016e1c:	f3bf 8f5b 	dmb	ish
 8016e20:	07db      	lsls	r3, r3, #31
 8016e22:	d40b      	bmi.n	8016e3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016e24:	4620      	mov	r0, r4
 8016e26:	f005 f92d 	bl	801c084 <__cxa_guard_acquire>
 8016e2a:	b138      	cbz	r0, 8016e3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	f005 f935 	bl	801c09c <__cxa_guard_release>
 8016e32:	4a06      	ldr	r2, [pc, #24]	; (8016e4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016e34:	4909      	ldr	r1, [pc, #36]	; (8016e5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8016e36:	480a      	ldr	r0, [pc, #40]	; (8016e60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016e38:	f005 f91d 	bl	801c076 <__aeabi_atexit>
 8016e3c:	4b05      	ldr	r3, [pc, #20]	; (8016e54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016e3e:	632b      	str	r3, [r5, #48]	; 0x30
 8016e40:	4b07      	ldr	r3, [pc, #28]	; (8016e60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016e42:	636b      	str	r3, [r5, #52]	; 0x34
 8016e44:	bd38      	pop	{r3, r4, r5, pc}
 8016e46:	bf00      	nop
 8016e48:	24006d20 	.word	0x24006d20
 8016e4c:	24000000 	.word	0x24000000
 8016e50:	08015661 	.word	0x08015661
 8016e54:	240000b4 	.word	0x240000b4
 8016e58:	24006d24 	.word	0x24006d24
 8016e5c:	0801565f 	.word	0x0801565f
 8016e60:	240000b8 	.word	0x240000b8

08016e64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8016e64:	b538      	push	{r3, r4, r5, lr}
 8016e66:	4c15      	ldr	r4, [pc, #84]	; (8016ebc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8016e68:	4605      	mov	r5, r0
 8016e6a:	7823      	ldrb	r3, [r4, #0]
 8016e6c:	f3bf 8f5b 	dmb	ish
 8016e70:	07da      	lsls	r2, r3, #31
 8016e72:	d40b      	bmi.n	8016e8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016e74:	4620      	mov	r0, r4
 8016e76:	f005 f905 	bl	801c084 <__cxa_guard_acquire>
 8016e7a:	b138      	cbz	r0, 8016e8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016e7c:	4620      	mov	r0, r4
 8016e7e:	f005 f90d 	bl	801c09c <__cxa_guard_release>
 8016e82:	4a0f      	ldr	r2, [pc, #60]	; (8016ec0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016e84:	490f      	ldr	r1, [pc, #60]	; (8016ec4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8016e86:	4810      	ldr	r0, [pc, #64]	; (8016ec8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016e88:	f005 f8f5 	bl	801c076 <__aeabi_atexit>
 8016e8c:	4c0f      	ldr	r4, [pc, #60]	; (8016ecc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8016e8e:	7823      	ldrb	r3, [r4, #0]
 8016e90:	f3bf 8f5b 	dmb	ish
 8016e94:	07db      	lsls	r3, r3, #31
 8016e96:	d40b      	bmi.n	8016eb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f005 f8f3 	bl	801c084 <__cxa_guard_acquire>
 8016e9e:	b138      	cbz	r0, 8016eb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	f005 f8fb 	bl	801c09c <__cxa_guard_release>
 8016ea6:	4a06      	ldr	r2, [pc, #24]	; (8016ec0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016ea8:	4909      	ldr	r1, [pc, #36]	; (8016ed0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8016eaa:	480a      	ldr	r0, [pc, #40]	; (8016ed4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016eac:	f005 f8e3 	bl	801c076 <__aeabi_atexit>
 8016eb0:	4b05      	ldr	r3, [pc, #20]	; (8016ec8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016eb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8016eb4:	4b07      	ldr	r3, [pc, #28]	; (8016ed4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016eb6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8016eb8:	bd38      	pop	{r3, r4, r5, pc}
 8016eba:	bf00      	nop
 8016ebc:	24006cf8 	.word	0x24006cf8
 8016ec0:	24000000 	.word	0x24000000
 8016ec4:	08015665 	.word	0x08015665
 8016ec8:	2400008c 	.word	0x2400008c
 8016ecc:	24006cfc 	.word	0x24006cfc
 8016ed0:	08015663 	.word	0x08015663
 8016ed4:	24000090 	.word	0x24000090

08016ed8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8016ed8:	b510      	push	{r4, lr}
 8016eda:	4604      	mov	r4, r0
 8016edc:	f7ff ff88 	bl	8016df0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ee6:	f7ff bfbd 	b.w	8016e64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08016eec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8016eec:	b538      	push	{r3, r4, r5, lr}
 8016eee:	4c15      	ldr	r4, [pc, #84]	; (8016f44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016ef0:	4605      	mov	r5, r0
 8016ef2:	7823      	ldrb	r3, [r4, #0]
 8016ef4:	f3bf 8f5b 	dmb	ish
 8016ef8:	07da      	lsls	r2, r3, #31
 8016efa:	d40b      	bmi.n	8016f14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016efc:	4620      	mov	r0, r4
 8016efe:	f005 f8c1 	bl	801c084 <__cxa_guard_acquire>
 8016f02:	b138      	cbz	r0, 8016f14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016f04:	4620      	mov	r0, r4
 8016f06:	f005 f8c9 	bl	801c09c <__cxa_guard_release>
 8016f0a:	4a0f      	ldr	r2, [pc, #60]	; (8016f48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016f0c:	490f      	ldr	r1, [pc, #60]	; (8016f4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8016f0e:	4810      	ldr	r0, [pc, #64]	; (8016f50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016f10:	f005 f8b1 	bl	801c076 <__aeabi_atexit>
 8016f14:	4c0f      	ldr	r4, [pc, #60]	; (8016f54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8016f16:	7823      	ldrb	r3, [r4, #0]
 8016f18:	f3bf 8f5b 	dmb	ish
 8016f1c:	07db      	lsls	r3, r3, #31
 8016f1e:	d40b      	bmi.n	8016f38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016f20:	4620      	mov	r0, r4
 8016f22:	f005 f8af 	bl	801c084 <__cxa_guard_acquire>
 8016f26:	b138      	cbz	r0, 8016f38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f005 f8b7 	bl	801c09c <__cxa_guard_release>
 8016f2e:	4a06      	ldr	r2, [pc, #24]	; (8016f48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016f30:	4909      	ldr	r1, [pc, #36]	; (8016f58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8016f32:	480a      	ldr	r0, [pc, #40]	; (8016f5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016f34:	f005 f89f 	bl	801c076 <__aeabi_atexit>
 8016f38:	4b05      	ldr	r3, [pc, #20]	; (8016f50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016f3a:	642b      	str	r3, [r5, #64]	; 0x40
 8016f3c:	4b07      	ldr	r3, [pc, #28]	; (8016f5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016f3e:	646b      	str	r3, [r5, #68]	; 0x44
 8016f40:	bd38      	pop	{r3, r4, r5, pc}
 8016f42:	bf00      	nop
 8016f44:	24006d28 	.word	0x24006d28
 8016f48:	24000000 	.word	0x24000000
 8016f4c:	08015659 	.word	0x08015659
 8016f50:	240000bc 	.word	0x240000bc
 8016f54:	24006d2c 	.word	0x24006d2c
 8016f58:	08015657 	.word	0x08015657
 8016f5c:	240000c0 	.word	0x240000c0

08016f60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8016f60:	b538      	push	{r3, r4, r5, lr}
 8016f62:	4c15      	ldr	r4, [pc, #84]	; (8016fb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8016f64:	4605      	mov	r5, r0
 8016f66:	7823      	ldrb	r3, [r4, #0]
 8016f68:	f3bf 8f5b 	dmb	ish
 8016f6c:	07da      	lsls	r2, r3, #31
 8016f6e:	d40b      	bmi.n	8016f88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016f70:	4620      	mov	r0, r4
 8016f72:	f005 f887 	bl	801c084 <__cxa_guard_acquire>
 8016f76:	b138      	cbz	r0, 8016f88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016f78:	4620      	mov	r0, r4
 8016f7a:	f005 f88f 	bl	801c09c <__cxa_guard_release>
 8016f7e:	4a0f      	ldr	r2, [pc, #60]	; (8016fbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016f80:	490f      	ldr	r1, [pc, #60]	; (8016fc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8016f82:	4810      	ldr	r0, [pc, #64]	; (8016fc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016f84:	f005 f877 	bl	801c076 <__aeabi_atexit>
 8016f88:	4c0f      	ldr	r4, [pc, #60]	; (8016fc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8016f8a:	7823      	ldrb	r3, [r4, #0]
 8016f8c:	f3bf 8f5b 	dmb	ish
 8016f90:	07db      	lsls	r3, r3, #31
 8016f92:	d40b      	bmi.n	8016fac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016f94:	4620      	mov	r0, r4
 8016f96:	f005 f875 	bl	801c084 <__cxa_guard_acquire>
 8016f9a:	b138      	cbz	r0, 8016fac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016f9c:	4620      	mov	r0, r4
 8016f9e:	f005 f87d 	bl	801c09c <__cxa_guard_release>
 8016fa2:	4a06      	ldr	r2, [pc, #24]	; (8016fbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016fa4:	4909      	ldr	r1, [pc, #36]	; (8016fcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8016fa6:	480a      	ldr	r0, [pc, #40]	; (8016fd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016fa8:	f005 f865 	bl	801c076 <__aeabi_atexit>
 8016fac:	4b05      	ldr	r3, [pc, #20]	; (8016fc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016fae:	63ab      	str	r3, [r5, #56]	; 0x38
 8016fb0:	4b07      	ldr	r3, [pc, #28]	; (8016fd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016fb2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016fb4:	bd38      	pop	{r3, r4, r5, pc}
 8016fb6:	bf00      	nop
 8016fb8:	24006d08 	.word	0x24006d08
 8016fbc:	24000000 	.word	0x24000000
 8016fc0:	0801565d 	.word	0x0801565d
 8016fc4:	2400009c 	.word	0x2400009c
 8016fc8:	24006d0c 	.word	0x24006d0c
 8016fcc:	0801565b 	.word	0x0801565b
 8016fd0:	240000a0 	.word	0x240000a0

08016fd4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8016fd4:	b510      	push	{r4, lr}
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	f7ff ff88 	bl	8016eec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8016fdc:	4620      	mov	r0, r4
 8016fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fe2:	f7ff bfbd 	b.w	8016f60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08016fe8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8016fe8:	b538      	push	{r3, r4, r5, lr}
 8016fea:	4c15      	ldr	r4, [pc, #84]	; (8017040 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8016fec:	4605      	mov	r5, r0
 8016fee:	7823      	ldrb	r3, [r4, #0]
 8016ff0:	f3bf 8f5b 	dmb	ish
 8016ff4:	07da      	lsls	r2, r3, #31
 8016ff6:	d40b      	bmi.n	8017010 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f005 f843 	bl	801c084 <__cxa_guard_acquire>
 8016ffe:	b138      	cbz	r0, 8017010 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017000:	4620      	mov	r0, r4
 8017002:	f005 f84b 	bl	801c09c <__cxa_guard_release>
 8017006:	4a0f      	ldr	r2, [pc, #60]	; (8017044 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8017008:	490f      	ldr	r1, [pc, #60]	; (8017048 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801700a:	4810      	ldr	r0, [pc, #64]	; (801704c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801700c:	f005 f833 	bl	801c076 <__aeabi_atexit>
 8017010:	4c0f      	ldr	r4, [pc, #60]	; (8017050 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8017012:	7823      	ldrb	r3, [r4, #0]
 8017014:	f3bf 8f5b 	dmb	ish
 8017018:	07db      	lsls	r3, r3, #31
 801701a:	d40b      	bmi.n	8017034 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801701c:	4620      	mov	r0, r4
 801701e:	f005 f831 	bl	801c084 <__cxa_guard_acquire>
 8017022:	b138      	cbz	r0, 8017034 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8017024:	4620      	mov	r0, r4
 8017026:	f005 f839 	bl	801c09c <__cxa_guard_release>
 801702a:	4a06      	ldr	r2, [pc, #24]	; (8017044 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801702c:	4909      	ldr	r1, [pc, #36]	; (8017054 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801702e:	480a      	ldr	r0, [pc, #40]	; (8017058 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8017030:	f005 f821 	bl	801c076 <__aeabi_atexit>
 8017034:	4b05      	ldr	r3, [pc, #20]	; (801704c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8017036:	652b      	str	r3, [r5, #80]	; 0x50
 8017038:	4b07      	ldr	r3, [pc, #28]	; (8017058 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801703a:	656b      	str	r3, [r5, #84]	; 0x54
 801703c:	bd38      	pop	{r3, r4, r5, pc}
 801703e:	bf00      	nop
 8017040:	24006d00 	.word	0x24006d00
 8017044:	24000000 	.word	0x24000000
 8017048:	08015651 	.word	0x08015651
 801704c:	24000094 	.word	0x24000094
 8017050:	24006d04 	.word	0x24006d04
 8017054:	0801564f 	.word	0x0801564f
 8017058:	24000098 	.word	0x24000098

0801705c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801705c:	b538      	push	{r3, r4, r5, lr}
 801705e:	4c15      	ldr	r4, [pc, #84]	; (80170b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8017060:	4605      	mov	r5, r0
 8017062:	7823      	ldrb	r3, [r4, #0]
 8017064:	f3bf 8f5b 	dmb	ish
 8017068:	07da      	lsls	r2, r3, #31
 801706a:	d40b      	bmi.n	8017084 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801706c:	4620      	mov	r0, r4
 801706e:	f005 f809 	bl	801c084 <__cxa_guard_acquire>
 8017072:	b138      	cbz	r0, 8017084 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8017074:	4620      	mov	r0, r4
 8017076:	f005 f811 	bl	801c09c <__cxa_guard_release>
 801707a:	4a0f      	ldr	r2, [pc, #60]	; (80170b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801707c:	490f      	ldr	r1, [pc, #60]	; (80170bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801707e:	4810      	ldr	r0, [pc, #64]	; (80170c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017080:	f004 fff9 	bl	801c076 <__aeabi_atexit>
 8017084:	4c0f      	ldr	r4, [pc, #60]	; (80170c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8017086:	7823      	ldrb	r3, [r4, #0]
 8017088:	f3bf 8f5b 	dmb	ish
 801708c:	07db      	lsls	r3, r3, #31
 801708e:	d40b      	bmi.n	80170a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017090:	4620      	mov	r0, r4
 8017092:	f004 fff7 	bl	801c084 <__cxa_guard_acquire>
 8017096:	b138      	cbz	r0, 80170a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017098:	4620      	mov	r0, r4
 801709a:	f004 ffff 	bl	801c09c <__cxa_guard_release>
 801709e:	4a06      	ldr	r2, [pc, #24]	; (80170b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80170a0:	4909      	ldr	r1, [pc, #36]	; (80170c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80170a2:	480a      	ldr	r0, [pc, #40]	; (80170cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80170a4:	f004 ffe7 	bl	801c076 <__aeabi_atexit>
 80170a8:	4b05      	ldr	r3, [pc, #20]	; (80170c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80170aa:	64ab      	str	r3, [r5, #72]	; 0x48
 80170ac:	4b07      	ldr	r3, [pc, #28]	; (80170cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80170ae:	64eb      	str	r3, [r5, #76]	; 0x4c
 80170b0:	bd38      	pop	{r3, r4, r5, pc}
 80170b2:	bf00      	nop
 80170b4:	24006cf0 	.word	0x24006cf0
 80170b8:	24000000 	.word	0x24000000
 80170bc:	08015655 	.word	0x08015655
 80170c0:	24000084 	.word	0x24000084
 80170c4:	24006cf4 	.word	0x24006cf4
 80170c8:	08015653 	.word	0x08015653
 80170cc:	24000088 	.word	0x24000088

080170d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80170d0:	b510      	push	{r4, lr}
 80170d2:	4604      	mov	r4, r0
 80170d4:	f7ff ff88 	bl	8016fe8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80170d8:	4620      	mov	r0, r4
 80170da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170de:	f7ff bfbd 	b.w	801705c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080170e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80170e2:	b510      	push	{r4, lr}
 80170e4:	4604      	mov	r4, r0
 80170e6:	f7ff fff3 	bl	80170d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80170ea:	4620      	mov	r0, r4
 80170ec:	f7ff ff72 	bl	8016fd4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80170f0:	4620      	mov	r0, r4
 80170f2:	f7ff fe73 	bl	8016ddc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80170f6:	4620      	mov	r0, r4
 80170f8:	f7ff fdf2 	bl	8016ce0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80170fc:	4620      	mov	r0, r4
 80170fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017102:	f7ff bee9 	b.w	8016ed8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08017108 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8017108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801710c:	b087      	sub	sp, #28
 801710e:	7888      	ldrb	r0, [r1, #2]
 8017110:	4616      	mov	r6, r2
 8017112:	9001      	str	r0, [sp, #4]
 8017114:	7848      	ldrb	r0, [r1, #1]
 8017116:	9100      	str	r1, [sp, #0]
 8017118:	9002      	str	r0, [sp, #8]
 801711a:	7808      	ldrb	r0, [r1, #0]
 801711c:	9901      	ldr	r1, [sp, #4]
 801711e:	9003      	str	r0, [sp, #12]
 8017120:	9802      	ldr	r0, [sp, #8]
 8017122:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8017126:	0200      	lsls	r0, r0, #8
 8017128:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801712c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8017130:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8017134:	9903      	ldr	r1, [sp, #12]
 8017136:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801713a:	4308      	orrs	r0, r1
 801713c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017140:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8017144:	9005      	str	r0, [sp, #20]
 8017146:	fb05 ca0e 	mla	sl, r5, lr, ip
 801714a:	2d00      	cmp	r5, #0
 801714c:	eb06 080a 	add.w	r8, r6, sl
 8017150:	db4a      	blt.n	80171e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8017152:	45a9      	cmp	r9, r5
 8017154:	dd48      	ble.n	80171e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8017156:	f1bc 0f00 	cmp.w	ip, #0
 801715a:	db43      	blt.n	80171e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801715c:	45e6      	cmp	lr, ip
 801715e:	dd41      	ble.n	80171e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8017160:	f816 600a 	ldrb.w	r6, [r6, sl]
 8017164:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017168:	441e      	add	r6, r3
 801716a:	f11c 0001 	adds.w	r0, ip, #1
 801716e:	d43e      	bmi.n	80171ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8017170:	4586      	cmp	lr, r0
 8017172:	dd3c      	ble.n	80171ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8017174:	2a00      	cmp	r2, #0
 8017176:	d03a      	beq.n	80171ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8017178:	f898 0001 	ldrb.w	r0, [r8, #1]
 801717c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017180:	4418      	add	r0, r3
 8017182:	3501      	adds	r5, #1
 8017184:	d437      	bmi.n	80171f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8017186:	45a9      	cmp	r9, r5
 8017188:	dd35      	ble.n	80171f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801718a:	b3a4      	cbz	r4, 80171f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801718c:	f1bc 0f00 	cmp.w	ip, #0
 8017190:	db2f      	blt.n	80171f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8017192:	45e6      	cmp	lr, ip
 8017194:	dd2d      	ble.n	80171f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8017196:	f818 500e 	ldrb.w	r5, [r8, lr]
 801719a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801719e:	441d      	add	r5, r3
 80171a0:	f11c 0c01 	adds.w	ip, ip, #1
 80171a4:	d42a      	bmi.n	80171fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80171a6:	45e6      	cmp	lr, ip
 80171a8:	dd28      	ble.n	80171fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80171aa:	b33a      	cbz	r2, 80171fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80171ac:	44c6      	add	lr, r8
 80171ae:	f89e c001 	ldrb.w	ip, [lr, #1]
 80171b2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80171b6:	4463      	add	r3, ip
 80171b8:	ea6f 0c07 	mvn.w	ip, r7
 80171bc:	2a0f      	cmp	r2, #15
 80171be:	f896 a000 	ldrb.w	sl, [r6]
 80171c2:	fa5f fc8c 	uxtb.w	ip, ip
 80171c6:	f890 b000 	ldrb.w	fp, [r0]
 80171ca:	f895 9000 	ldrb.w	r9, [r5]
 80171ce:	7819      	ldrb	r1, [r3, #0]
 80171d0:	d801      	bhi.n	80171d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 80171d2:	2c0f      	cmp	r4, #15
 80171d4:	d914      	bls.n	8017200 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 80171d6:	4b40      	ldr	r3, [pc, #256]	; (80172d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 80171d8:	f240 1157 	movw	r1, #343	; 0x157
 80171dc:	4a3f      	ldr	r2, [pc, #252]	; (80172dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80171de:	4840      	ldr	r0, [pc, #256]	; (80172e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80171e0:	f005 f864 	bl	801c2ac <__assert_func>
 80171e4:	ae05      	add	r6, sp, #20
 80171e6:	e7c0      	b.n	801716a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 80171e8:	a805      	add	r0, sp, #20
 80171ea:	4606      	mov	r6, r0
 80171ec:	e7c9      	b.n	8017182 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 80171ee:	a805      	add	r0, sp, #20
 80171f0:	e7c7      	b.n	8017182 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 80171f2:	ad05      	add	r5, sp, #20
 80171f4:	e7d4      	b.n	80171a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 80171f6:	ab05      	add	r3, sp, #20
 80171f8:	461d      	mov	r5, r3
 80171fa:	e7dd      	b.n	80171b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 80171fc:	ab05      	add	r3, sp, #20
 80171fe:	e7db      	b.n	80171b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8017200:	b292      	uxth	r2, r2
 8017202:	b2a4      	uxth	r4, r4
 8017204:	fa1f fc8c 	uxth.w	ip, ip
 8017208:	fb02 f804 	mul.w	r8, r2, r4
 801720c:	0112      	lsls	r2, r2, #4
 801720e:	b2bf      	uxth	r7, r7
 8017210:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8017214:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8017218:	eba2 0208 	sub.w	r2, r2, r8
 801721c:	b2a4      	uxth	r4, r4
 801721e:	b292      	uxth	r2, r2
 8017220:	ebae 0e04 	sub.w	lr, lr, r4
 8017224:	fb02 fb0b 	mul.w	fp, r2, fp
 8017228:	fa1f fe8e 	uxth.w	lr, lr
 801722c:	fb0e ba0a 	mla	sl, lr, sl, fp
 8017230:	fb04 aa09 	mla	sl, r4, r9, sl
 8017234:	fb08 aa01 	mla	sl, r8, r1, sl
 8017238:	9903      	ldr	r1, [sp, #12]
 801723a:	fb11 f90c 	smulbb	r9, r1, ip
 801723e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8017242:	9900      	ldr	r1, [sp, #0]
 8017244:	fb0a 9a07 	mla	sl, sl, r7, r9
 8017248:	fa1f fa8a 	uxth.w	sl, sl
 801724c:	f10a 0901 	add.w	r9, sl, #1
 8017250:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8017254:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017258:	f881 a000 	strb.w	sl, [r1]
 801725c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017260:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017264:	fb02 fa0a 	mul.w	sl, r2, sl
 8017268:	9902      	ldr	r1, [sp, #8]
 801726a:	fb0e aa09 	mla	sl, lr, r9, sl
 801726e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8017272:	fb04 aa09 	mla	sl, r4, r9, sl
 8017276:	f893 9001 	ldrb.w	r9, [r3, #1]
 801727a:	fb08 a909 	mla	r9, r8, r9, sl
 801727e:	fb11 fa0c 	smulbb	sl, r1, ip
 8017282:	9900      	ldr	r1, [sp, #0]
 8017284:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017288:	fb09 a907 	mla	r9, r9, r7, sl
 801728c:	fa1f f989 	uxth.w	r9, r9
 8017290:	f109 0a01 	add.w	sl, r9, #1
 8017294:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8017298:	ea4f 2929 	mov.w	r9, r9, asr #8
 801729c:	f881 9001 	strb.w	r9, [r1, #1]
 80172a0:	7880      	ldrb	r0, [r0, #2]
 80172a2:	78b6      	ldrb	r6, [r6, #2]
 80172a4:	4342      	muls	r2, r0
 80172a6:	78a8      	ldrb	r0, [r5, #2]
 80172a8:	789b      	ldrb	r3, [r3, #2]
 80172aa:	fb0e 2206 	mla	r2, lr, r6, r2
 80172ae:	fb04 2400 	mla	r4, r4, r0, r2
 80172b2:	fb08 4803 	mla	r8, r8, r3, r4
 80172b6:	9b01      	ldr	r3, [sp, #4]
 80172b8:	fb13 fc0c 	smulbb	ip, r3, ip
 80172bc:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80172c0:	fb08 c707 	mla	r7, r8, r7, ip
 80172c4:	b2bf      	uxth	r7, r7
 80172c6:	f107 0c01 	add.w	ip, r7, #1
 80172ca:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80172ce:	123f      	asrs	r7, r7, #8
 80172d0:	708f      	strb	r7, [r1, #2]
 80172d2:	b007      	add	sp, #28
 80172d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d8:	080205a7 	.word	0x080205a7
 80172dc:	08020a5e 	.word	0x08020a5e
 80172e0:	0802062f 	.word	0x0802062f

080172e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80172e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e8:	ed2d 8b08 	vpush	{d8-d11}
 80172ec:	b093      	sub	sp, #76	; 0x4c
 80172ee:	eeb0 aa40 	vmov.f32	s20, s0
 80172f2:	eef0 9a60 	vmov.f32	s19, s1
 80172f6:	9210      	str	r2, [sp, #64]	; 0x40
 80172f8:	eeb0 9a41 	vmov.f32	s18, s2
 80172fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80172fe:	eeb0 8a62 	vmov.f32	s16, s5
 8017302:	9309      	str	r3, [sp, #36]	; 0x24
 8017304:	eef0 8a43 	vmov.f32	s17, s6
 8017308:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801730c:	eef0 ba44 	vmov.f32	s23, s8
 8017310:	9011      	str	r0, [sp, #68]	; 0x44
 8017312:	eeb0 ba64 	vmov.f32	s22, s9
 8017316:	930e      	str	r3, [sp, #56]	; 0x38
 8017318:	eef0 aa45 	vmov.f32	s21, s10
 801731c:	6850      	ldr	r0, [r2, #4]
 801731e:	910d      	str	r1, [sp, #52]	; 0x34
 8017320:	6812      	ldr	r2, [r2, #0]
 8017322:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8017326:	fb00 1303 	mla	r3, r0, r3, r1
 801732a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801732e:	18d3      	adds	r3, r2, r3
 8017330:	930a      	str	r3, [sp, #40]	; 0x28
 8017332:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	930c      	str	r3, [sp, #48]	; 0x30
 8017338:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801733a:	685c      	ldr	r4, [r3, #4]
 801733c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801733e:	3404      	adds	r4, #4
 8017340:	43db      	mvns	r3, r3
 8017342:	b2db      	uxtb	r3, r3
 8017344:	930b      	str	r3, [sp, #44]	; 0x2c
 8017346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017348:	2b00      	cmp	r3, #0
 801734a:	dc03      	bgt.n	8017354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801734c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801734e:	2b00      	cmp	r3, #0
 8017350:	f340 8250 	ble.w	80177f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8017354:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017356:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801735a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801735e:	1e48      	subs	r0, r1, #1
 8017360:	1e55      	subs	r5, r2, #1
 8017362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017364:	2b00      	cmp	r3, #0
 8017366:	f340 80ee 	ble.w	8017546 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801736a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801736c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801736e:	1436      	asrs	r6, r6, #16
 8017370:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017374:	d406      	bmi.n	8017384 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017376:	4286      	cmp	r6, r0
 8017378:	da04      	bge.n	8017384 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801737a:	2b00      	cmp	r3, #0
 801737c:	db02      	blt.n	8017384 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801737e:	42ab      	cmp	r3, r5
 8017380:	f2c0 80e2 	blt.w	8017548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8017384:	3601      	adds	r6, #1
 8017386:	f100 80cf 	bmi.w	8017528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801738a:	42b1      	cmp	r1, r6
 801738c:	f2c0 80cc 	blt.w	8017528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8017390:	3301      	adds	r3, #1
 8017392:	f100 80c9 	bmi.w	8017528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8017396:	429a      	cmp	r2, r3
 8017398:	f2c0 80c6 	blt.w	8017528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801739c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80173a0:	f1bb 0f00 	cmp.w	fp, #0
 80173a4:	f340 80f1 	ble.w	801758a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80173a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80173aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80173ac:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80173ae:	141d      	asrs	r5, r3, #16
 80173b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80173b2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80173b6:	68c7      	ldr	r7, [r0, #12]
 80173b8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80173ba:	1418      	asrs	r0, r3, #16
 80173bc:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80173c0:	6892      	ldr	r2, [r2, #8]
 80173c2:	f100 8137 	bmi.w	8017634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80173c6:	f102 3cff 	add.w	ip, r2, #4294967295
 80173ca:	4560      	cmp	r0, ip
 80173cc:	f280 8132 	bge.w	8017634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80173d0:	2d00      	cmp	r5, #0
 80173d2:	f2c0 812f 	blt.w	8017634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80173d6:	f107 3cff 	add.w	ip, r7, #4294967295
 80173da:	4565      	cmp	r5, ip
 80173dc:	f280 812a 	bge.w	8017634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80173e0:	b212      	sxth	r2, r2
 80173e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80173e4:	fb05 0002 	mla	r0, r5, r2, r0
 80173e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80173ea:	f817 c000 	ldrb.w	ip, [r7, r0]
 80173ee:	4405      	add	r5, r0
 80173f0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80173f4:	eb04 0e0c 	add.w	lr, r4, ip
 80173f8:	f1b8 0f00 	cmp.w	r8, #0
 80173fc:	f000 810c 	beq.w	8017618 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8017400:	786f      	ldrb	r7, [r5, #1]
 8017402:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017406:	4427      	add	r7, r4
 8017408:	2900      	cmp	r1, #0
 801740a:	f000 810d 	beq.w	8017628 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801740e:	18a8      	adds	r0, r5, r2
 8017410:	5caa      	ldrb	r2, [r5, r2]
 8017412:	7840      	ldrb	r0, [r0, #1]
 8017414:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017418:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801741c:	4422      	add	r2, r4
 801741e:	4420      	add	r0, r4
 8017420:	fa1f f388 	uxth.w	r3, r8
 8017424:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8017428:	b289      	uxth	r1, r1
 801742a:	f897 c000 	ldrb.w	ip, [r7]
 801742e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017432:	fb03 f901 	mul.w	r9, r3, r1
 8017436:	011b      	lsls	r3, r3, #4
 8017438:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801743c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8017440:	eba3 0309 	sub.w	r3, r3, r9
 8017444:	b289      	uxth	r1, r1
 8017446:	b29b      	uxth	r3, r3
 8017448:	eba8 0801 	sub.w	r8, r8, r1
 801744c:	fb03 fc0c 	mul.w	ip, r3, ip
 8017450:	fa1f f888 	uxth.w	r8, r8
 8017454:	930f      	str	r3, [sp, #60]	; 0x3c
 8017456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017458:	fb08 cc0a 	mla	ip, r8, sl, ip
 801745c:	f892 a000 	ldrb.w	sl, [r2]
 8017460:	fb01 cc0a 	mla	ip, r1, sl, ip
 8017464:	f890 a000 	ldrb.w	sl, [r0]
 8017468:	fb09 cc0a 	mla	ip, r9, sl, ip
 801746c:	f896 a000 	ldrb.w	sl, [r6]
 8017470:	fb1a fa03 	smulbb	sl, sl, r3
 8017474:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801747a:	fb0c ac05 	mla	ip, ip, r5, sl
 801747e:	fa1f fc8c 	uxth.w	ip, ip
 8017482:	f10c 0a01 	add.w	sl, ip, #1
 8017486:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801748a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801748e:	f886 a000 	strb.w	sl, [r6]
 8017492:	f897 c001 	ldrb.w	ip, [r7, #1]
 8017496:	f89e a001 	ldrb.w	sl, [lr, #1]
 801749a:	fb03 fc0c 	mul.w	ip, r3, ip
 801749e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174a0:	fb08 cc0a 	mla	ip, r8, sl, ip
 80174a4:	f892 a001 	ldrb.w	sl, [r2, #1]
 80174a8:	fb01 cc0a 	mla	ip, r1, sl, ip
 80174ac:	f890 a001 	ldrb.w	sl, [r0, #1]
 80174b0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80174b4:	f896 a001 	ldrb.w	sl, [r6, #1]
 80174b8:	fb1a fa03 	smulbb	sl, sl, r3
 80174bc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80174c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174c2:	fb0c ac05 	mla	ip, ip, r5, sl
 80174c6:	fa1f fc8c 	uxth.w	ip, ip
 80174ca:	f10c 0a01 	add.w	sl, ip, #1
 80174ce:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80174d2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80174d6:	f886 c001 	strb.w	ip, [r6, #1]
 80174da:	78bf      	ldrb	r7, [r7, #2]
 80174dc:	f89e c002 	ldrb.w	ip, [lr, #2]
 80174e0:	437b      	muls	r3, r7
 80174e2:	fb08 330c 	mla	r3, r8, ip, r3
 80174e6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80174ea:	7882      	ldrb	r2, [r0, #2]
 80174ec:	fb01 310c 	mla	r1, r1, ip, r3
 80174f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174f2:	fb09 1902 	mla	r9, r9, r2, r1
 80174f6:	78b1      	ldrb	r1, [r6, #2]
 80174f8:	fb11 f103 	smulbb	r1, r1, r3
 80174fc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017500:	fb09 1505 	mla	r5, r9, r5, r1
 8017504:	b2ad      	uxth	r5, r5
 8017506:	1c6b      	adds	r3, r5, #1
 8017508:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801750c:	122d      	asrs	r5, r5, #8
 801750e:	70b5      	strb	r5, [r6, #2]
 8017510:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017512:	3603      	adds	r6, #3
 8017514:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017516:	f10b 3bff 	add.w	fp, fp, #4294967295
 801751a:	4413      	add	r3, r2
 801751c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801751e:	9325      	str	r3, [sp, #148]	; 0x94
 8017520:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017522:	4413      	add	r3, r2
 8017524:	9326      	str	r3, [sp, #152]	; 0x98
 8017526:	e73b      	b.n	80173a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8017528:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801752a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801752c:	4433      	add	r3, r6
 801752e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8017530:	9325      	str	r3, [sp, #148]	; 0x94
 8017532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017534:	4433      	add	r3, r6
 8017536:	9326      	str	r3, [sp, #152]	; 0x98
 8017538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801753a:	3b01      	subs	r3, #1
 801753c:	9309      	str	r3, [sp, #36]	; 0x24
 801753e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017540:	3303      	adds	r3, #3
 8017542:	930a      	str	r3, [sp, #40]	; 0x28
 8017544:	e70d      	b.n	8017362 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017546:	d028      	beq.n	801759a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8017548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801754a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801754c:	3b01      	subs	r3, #1
 801754e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8017550:	fb00 5003 	mla	r0, r0, r3, r5
 8017554:	1400      	asrs	r0, r0, #16
 8017556:	f53f af21 	bmi.w	801739c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801755a:	3901      	subs	r1, #1
 801755c:	4288      	cmp	r0, r1
 801755e:	f6bf af1d 	bge.w	801739c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017562:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8017564:	9826      	ldr	r0, [sp, #152]	; 0x98
 8017566:	fb01 0303 	mla	r3, r1, r3, r0
 801756a:	141b      	asrs	r3, r3, #16
 801756c:	f53f af16 	bmi.w	801739c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017570:	3a01      	subs	r2, #1
 8017572:	4293      	cmp	r3, r2
 8017574:	f6bf af12 	bge.w	801739c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801757a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801757e:	1cdf      	adds	r7, r3, #3
 8017580:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8017584:	f1b9 0f00 	cmp.w	r9, #0
 8017588:	dc73      	bgt.n	8017672 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801758c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801758e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017596:	441a      	add	r2, r3
 8017598:	920a      	str	r2, [sp, #40]	; 0x28
 801759a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801759c:	2b00      	cmp	r3, #0
 801759e:	f340 8129 	ble.w	80177f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80175a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80175a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80175a8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80175ac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80175b0:	eef0 6a48 	vmov.f32	s13, s16
 80175b4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80175b8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80175bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80175c0:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80175c4:	eef0 6a68 	vmov.f32	s13, s17
 80175c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80175cc:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80175d0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80175d4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80175d8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80175dc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80175e0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80175e4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80175e8:	ee18 2a10 	vmov	r2, s16
 80175ec:	eeb0 8a47 	vmov.f32	s16, s14
 80175f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80175f4:	ee18 2a90 	vmov	r2, s17
 80175f8:	9327      	str	r3, [sp, #156]	; 0x9c
 80175fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80175fc:	eef0 8a67 	vmov.f32	s17, s15
 8017600:	fb92 f3f3 	sdiv	r3, r2, r3
 8017604:	9328      	str	r3, [sp, #160]	; 0xa0
 8017606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017608:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801760a:	3b01      	subs	r3, #1
 801760c:	930d      	str	r3, [sp, #52]	; 0x34
 801760e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017610:	bf08      	it	eq
 8017612:	4613      	moveq	r3, r2
 8017614:	9309      	str	r3, [sp, #36]	; 0x24
 8017616:	e696      	b.n	8017346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017618:	b149      	cbz	r1, 801762e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801761a:	5caa      	ldrb	r2, [r5, r2]
 801761c:	4670      	mov	r0, lr
 801761e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017622:	4422      	add	r2, r4
 8017624:	4677      	mov	r7, lr
 8017626:	e6fb      	b.n	8017420 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8017628:	4670      	mov	r0, lr
 801762a:	4672      	mov	r2, lr
 801762c:	e6f8      	b.n	8017420 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801762e:	4670      	mov	r0, lr
 8017630:	4672      	mov	r2, lr
 8017632:	e7f7      	b.n	8017624 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8017634:	f110 0c01 	adds.w	ip, r0, #1
 8017638:	f53f af6a 	bmi.w	8017510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801763c:	4562      	cmp	r2, ip
 801763e:	f6ff af67 	blt.w	8017510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8017642:	f115 0c01 	adds.w	ip, r5, #1
 8017646:	f53f af63 	bmi.w	8017510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801764a:	4567      	cmp	r7, ip
 801764c:	f6ff af60 	blt.w	8017510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8017650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017652:	b23f      	sxth	r7, r7
 8017654:	b212      	sxth	r2, r2
 8017656:	9002      	str	r0, [sp, #8]
 8017658:	9701      	str	r7, [sp, #4]
 801765a:	9200      	str	r2, [sp, #0]
 801765c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801765e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017660:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8017664:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8017668:	4623      	mov	r3, r4
 801766a:	4631      	mov	r1, r6
 801766c:	f7ff fd4c 	bl	8017108 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8017670:	e74e      	b.n	8017510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8017672:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017674:	9826      	ldr	r0, [sp, #152]	; 0x98
 8017676:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801767a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801767c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801767e:	1400      	asrs	r0, r0, #16
 8017680:	142d      	asrs	r5, r5, #16
 8017682:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017684:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017688:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801768c:	fb02 5000 	mla	r0, r2, r0, r5
 8017690:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017692:	f815 e000 	ldrb.w	lr, [r5, r0]
 8017696:	eb05 0c00 	add.w	ip, r5, r0
 801769a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801769e:	eb04 060e 	add.w	r6, r4, lr
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	f000 8097 	beq.w	80177d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80176a8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80176ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176b0:	4425      	add	r5, r4
 80176b2:	2900      	cmp	r1, #0
 80176b4:	f000 8098 	beq.w	80177e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80176b8:	eb0c 0002 	add.w	r0, ip, r2
 80176bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80176c0:	7840      	ldrb	r0, [r0, #1]
 80176c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80176ca:	4422      	add	r2, r4
 80176cc:	4420      	add	r0, r4
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80176d4:	b289      	uxth	r1, r1
 80176d6:	f895 e000 	ldrb.w	lr, [r5]
 80176da:	3703      	adds	r7, #3
 80176dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80176e0:	fb03 f801 	mul.w	r8, r3, r1
 80176e4:	011b      	lsls	r3, r3, #4
 80176e6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80176ea:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80176ee:	eba3 0308 	sub.w	r3, r3, r8
 80176f2:	b289      	uxth	r1, r1
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	ebac 0c01 	sub.w	ip, ip, r1
 80176fa:	fb03 fe0e 	mul.w	lr, r3, lr
 80176fe:	fa1f fc8c 	uxth.w	ip, ip
 8017702:	930f      	str	r3, [sp, #60]	; 0x3c
 8017704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017706:	fb0c ee0b 	mla	lr, ip, fp, lr
 801770a:	f892 b000 	ldrb.w	fp, [r2]
 801770e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017712:	f890 b000 	ldrb.w	fp, [r0]
 8017716:	fb08 ee0b 	mla	lr, r8, fp, lr
 801771a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801771e:	fb1b fb03 	smulbb	fp, fp, r3
 8017722:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017728:	fb0e be0a 	mla	lr, lr, sl, fp
 801772c:	fa1f fe8e 	uxth.w	lr, lr
 8017730:	f10e 0b01 	add.w	fp, lr, #1
 8017734:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017738:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801773c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8017740:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017744:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017748:	fb03 fe0e 	mul.w	lr, r3, lr
 801774c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801774e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017752:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017756:	fb01 ee0b 	mla	lr, r1, fp, lr
 801775a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801775e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017762:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8017766:	fb1b fb03 	smulbb	fp, fp, r3
 801776a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801776e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017770:	fb0e be0a 	mla	lr, lr, sl, fp
 8017774:	fa1f fe8e 	uxth.w	lr, lr
 8017778:	f10e 0b01 	add.w	fp, lr, #1
 801777c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017780:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017784:	f807 ec05 	strb.w	lr, [r7, #-5]
 8017788:	78ad      	ldrb	r5, [r5, #2]
 801778a:	78b6      	ldrb	r6, [r6, #2]
 801778c:	436b      	muls	r3, r5
 801778e:	7895      	ldrb	r5, [r2, #2]
 8017790:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017792:	fb0c 3306 	mla	r3, ip, r6, r3
 8017796:	fb01 3305 	mla	r3, r1, r5, r3
 801779a:	7885      	ldrb	r5, [r0, #2]
 801779c:	fb08 3805 	mla	r8, r8, r5, r3
 80177a0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80177a4:	fb13 f302 	smulbb	r3, r3, r2
 80177a8:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80177ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80177ae:	fb08 380a 	mla	r8, r8, sl, r3
 80177b2:	fa1f f888 	uxth.w	r8, r8
 80177b6:	f108 0301 	add.w	r3, r8, #1
 80177ba:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80177be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80177c0:	4413      	add	r3, r2
 80177c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80177c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80177c8:	9325      	str	r3, [sp, #148]	; 0x94
 80177ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80177cc:	f807 8c04 	strb.w	r8, [r7, #-4]
 80177d0:	4413      	add	r3, r2
 80177d2:	9326      	str	r3, [sp, #152]	; 0x98
 80177d4:	e6d6      	b.n	8017584 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80177d6:	b151      	cbz	r1, 80177ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80177d8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80177dc:	4630      	mov	r0, r6
 80177de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80177e2:	4422      	add	r2, r4
 80177e4:	4635      	mov	r5, r6
 80177e6:	e772      	b.n	80176ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80177e8:	4630      	mov	r0, r6
 80177ea:	4632      	mov	r2, r6
 80177ec:	e76f      	b.n	80176ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80177ee:	4630      	mov	r0, r6
 80177f0:	4632      	mov	r2, r6
 80177f2:	e7f7      	b.n	80177e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80177f4:	b013      	add	sp, #76	; 0x4c
 80177f6:	ecbd 8b08 	vpop	{d8-d11}
 80177fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017800 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017804:	784d      	ldrb	r5, [r1, #1]
 8017806:	f891 9002 	ldrb.w	r9, [r1, #2]
 801780a:	022d      	lsls	r5, r5, #8
 801780c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8017810:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8017814:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8017818:	f891 9000 	ldrb.w	r9, [r1]
 801781c:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8017820:	ea45 0509 	orr.w	r5, r5, r9
 8017824:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017828:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801782c:	9501      	str	r5, [sp, #4]
 801782e:	fb06 470c 	mla	r7, r6, ip, r4
 8017832:	2e00      	cmp	r6, #0
 8017834:	eb02 0e07 	add.w	lr, r2, r7
 8017838:	db46      	blt.n	80178c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801783a:	45b0      	cmp	r8, r6
 801783c:	dd44      	ble.n	80178c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801783e:	2c00      	cmp	r4, #0
 8017840:	db40      	blt.n	80178c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8017842:	45a4      	cmp	ip, r4
 8017844:	dd3e      	ble.n	80178c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8017846:	5dd7      	ldrb	r7, [r2, r7]
 8017848:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801784c:	441f      	add	r7, r3
 801784e:	1c62      	adds	r2, r4, #1
 8017850:	d43d      	bmi.n	80178ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8017852:	4594      	cmp	ip, r2
 8017854:	dd3b      	ble.n	80178ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8017856:	f1ba 0f00 	cmp.w	sl, #0
 801785a:	d038      	beq.n	80178ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801785c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8017860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017864:	441d      	add	r5, r3
 8017866:	3601      	adds	r6, #1
 8017868:	d435      	bmi.n	80178d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801786a:	45b0      	cmp	r8, r6
 801786c:	dd33      	ble.n	80178d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801786e:	b390      	cbz	r0, 80178d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8017870:	2c00      	cmp	r4, #0
 8017872:	db2e      	blt.n	80178d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8017874:	45a4      	cmp	ip, r4
 8017876:	dd2c      	ble.n	80178d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8017878:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801787c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017880:	441e      	add	r6, r3
 8017882:	1c62      	adds	r2, r4, #1
 8017884:	d42a      	bmi.n	80178dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8017886:	4594      	cmp	ip, r2
 8017888:	dd28      	ble.n	80178dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801788a:	f1ba 0f00 	cmp.w	sl, #0
 801788e:	d025      	beq.n	80178dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8017890:	44f4      	add	ip, lr
 8017892:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8017896:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801789a:	4413      	add	r3, r2
 801789c:	f1ba 0f0f 	cmp.w	sl, #15
 80178a0:	f897 8000 	ldrb.w	r8, [r7]
 80178a4:	f895 9000 	ldrb.w	r9, [r5]
 80178a8:	f896 e000 	ldrb.w	lr, [r6]
 80178ac:	f893 c000 	ldrb.w	ip, [r3]
 80178b0:	d801      	bhi.n	80178b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80178b2:	280f      	cmp	r0, #15
 80178b4:	d914      	bls.n	80178e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 80178b6:	4b29      	ldr	r3, [pc, #164]	; (801795c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 80178b8:	f240 1157 	movw	r1, #343	; 0x157
 80178bc:	4a28      	ldr	r2, [pc, #160]	; (8017960 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80178be:	4829      	ldr	r0, [pc, #164]	; (8017964 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80178c0:	f004 fcf4 	bl	801c2ac <__assert_func>
 80178c4:	af01      	add	r7, sp, #4
 80178c6:	e7c2      	b.n	801784e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80178c8:	ad01      	add	r5, sp, #4
 80178ca:	462f      	mov	r7, r5
 80178cc:	e7cb      	b.n	8017866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80178ce:	ad01      	add	r5, sp, #4
 80178d0:	e7c9      	b.n	8017866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80178d2:	ae01      	add	r6, sp, #4
 80178d4:	e7d5      	b.n	8017882 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80178d6:	ab01      	add	r3, sp, #4
 80178d8:	461e      	mov	r6, r3
 80178da:	e7df      	b.n	801789c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80178dc:	ab01      	add	r3, sp, #4
 80178de:	e7dd      	b.n	801789c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80178e0:	fa1f f48a 	uxth.w	r4, sl
 80178e4:	b280      	uxth	r0, r0
 80178e6:	fb04 fa00 	mul.w	sl, r4, r0
 80178ea:	0124      	lsls	r4, r4, #4
 80178ec:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80178f0:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80178f4:	b282      	uxth	r2, r0
 80178f6:	eba4 000a 	sub.w	r0, r4, sl
 80178fa:	ebab 0b02 	sub.w	fp, fp, r2
 80178fe:	b280      	uxth	r0, r0
 8017900:	fa1f fb8b 	uxth.w	fp, fp
 8017904:	fb00 f909 	mul.w	r9, r0, r9
 8017908:	fb0b 9808 	mla	r8, fp, r8, r9
 801790c:	fb02 8e0e 	mla	lr, r2, lr, r8
 8017910:	fb0a ec0c 	mla	ip, sl, ip, lr
 8017914:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017918:	f881 c000 	strb.w	ip, [r1]
 801791c:	786c      	ldrb	r4, [r5, #1]
 801791e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8017922:	4344      	muls	r4, r0
 8017924:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8017928:	7874      	ldrb	r4, [r6, #1]
 801792a:	fb02 cc04 	mla	ip, r2, r4, ip
 801792e:	785c      	ldrb	r4, [r3, #1]
 8017930:	fb0a c404 	mla	r4, sl, r4, ip
 8017934:	1224      	asrs	r4, r4, #8
 8017936:	704c      	strb	r4, [r1, #1]
 8017938:	78ad      	ldrb	r5, [r5, #2]
 801793a:	78bc      	ldrb	r4, [r7, #2]
 801793c:	4368      	muls	r0, r5
 801793e:	fb0b 0b04 	mla	fp, fp, r4, r0
 8017942:	78b0      	ldrb	r0, [r6, #2]
 8017944:	fb02 b000 	mla	r0, r2, r0, fp
 8017948:	789a      	ldrb	r2, [r3, #2]
 801794a:	fb0a 0a02 	mla	sl, sl, r2, r0
 801794e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017952:	f881 a002 	strb.w	sl, [r1, #2]
 8017956:	b003      	add	sp, #12
 8017958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795c:	080205a7 	.word	0x080205a7
 8017960:	08020a5e 	.word	0x08020a5e
 8017964:	0802062f 	.word	0x0802062f

08017968 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796c:	ed2d 8b0a 	vpush	{d8-d12}
 8017970:	b08d      	sub	sp, #52	; 0x34
 8017972:	eeb0 aa40 	vmov.f32	s20, s0
 8017976:	eef0 9a60 	vmov.f32	s19, s1
 801797a:	900b      	str	r0, [sp, #44]	; 0x2c
 801797c:	eeb0 9a41 	vmov.f32	s18, s2
 8017980:	9306      	str	r3, [sp, #24]
 8017982:	eeb0 8a62 	vmov.f32	s16, s5
 8017986:	eef0 8a43 	vmov.f32	s17, s6
 801798a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801798c:	eeb0 ca44 	vmov.f32	s24, s8
 8017990:	eef0 ba64 	vmov.f32	s23, s9
 8017994:	eeb0 ba45 	vmov.f32	s22, s10
 8017998:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801799c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80179a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80179a2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80179a6:	6850      	ldr	r0, [r2, #4]
 80179a8:	6812      	ldr	r2, [r2, #0]
 80179aa:	fb00 1303 	mla	r3, r0, r3, r1
 80179ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80179b2:	18d3      	adds	r3, r2, r3
 80179b4:	9307      	str	r3, [sp, #28]
 80179b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	9308      	str	r3, [sp, #32]
 80179bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80179be:	685d      	ldr	r5, [r3, #4]
 80179c0:	3504      	adds	r5, #4
 80179c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	dc03      	bgt.n	80179d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80179c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	f340 81e6 	ble.w	8017d9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80179d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80179d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80179d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80179da:	1e48      	subs	r0, r1, #1
 80179dc:	1e56      	subs	r6, r2, #1
 80179de:	9b06      	ldr	r3, [sp, #24]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	f340 80bd 	ble.w	8017b60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80179e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80179e8:	1427      	asrs	r7, r4, #16
 80179ea:	ea4f 4323 	mov.w	r3, r3, asr #16
 80179ee:	d406      	bmi.n	80179fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80179f0:	4287      	cmp	r7, r0
 80179f2:	da04      	bge.n	80179fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	db02      	blt.n	80179fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80179f8:	42b3      	cmp	r3, r6
 80179fa:	f2c0 80b2 	blt.w	8017b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80179fe:	3701      	adds	r7, #1
 8017a00:	f100 80a1 	bmi.w	8017b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a04:	42b9      	cmp	r1, r7
 8017a06:	f2c0 809e 	blt.w	8017b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a0a:	3301      	adds	r3, #1
 8017a0c:	f100 809b 	bmi.w	8017b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a10:	429a      	cmp	r2, r3
 8017a12:	f2c0 8098 	blt.w	8017b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a16:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8017a1a:	f1bb 0f00 	cmp.w	fp, #0
 8017a1e:	f340 80bf 	ble.w	8017ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8017a22:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017a24:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8017a26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017a28:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017a2c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017a30:	1420      	asrs	r0, r4, #16
 8017a32:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017a34:	ea4f 4723 	mov.w	r7, r3, asr #16
 8017a38:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017a3c:	6892      	ldr	r2, [r2, #8]
 8017a3e:	f100 8103 	bmi.w	8017c48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a42:	f102 3eff 	add.w	lr, r2, #4294967295
 8017a46:	4570      	cmp	r0, lr
 8017a48:	f280 80fe 	bge.w	8017c48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a4c:	2f00      	cmp	r7, #0
 8017a4e:	f2c0 80fb 	blt.w	8017c48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a52:	f10c 3eff 	add.w	lr, ip, #4294967295
 8017a56:	4577      	cmp	r7, lr
 8017a58:	f280 80f6 	bge.w	8017c48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a5c:	b212      	sxth	r2, r2
 8017a5e:	fb07 0002 	mla	r0, r7, r2, r0
 8017a62:	9f08      	ldr	r7, [sp, #32]
 8017a64:	f817 8000 	ldrb.w	r8, [r7, r0]
 8017a68:	eb07 0e00 	add.w	lr, r7, r0
 8017a6c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017a70:	eb05 0c08 	add.w	ip, r5, r8
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	f000 80d8 	beq.w	8017c2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8017a7a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8017a7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017a82:	442f      	add	r7, r5
 8017a84:	2900      	cmp	r1, #0
 8017a86:	f000 80d9 	beq.w	8017c3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8017a8a:	eb0e 0002 	add.w	r0, lr, r2
 8017a8e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017a92:	7840      	ldrb	r0, [r0, #1]
 8017a94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017a98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017a9c:	442a      	add	r2, r5
 8017a9e:	4428      	add	r0, r5
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	f815 a008 	ldrb.w	sl, [r5, r8]
 8017aa6:	b289      	uxth	r1, r1
 8017aa8:	f897 8000 	ldrb.w	r8, [r7]
 8017aac:	fb03 f901 	mul.w	r9, r3, r1
 8017ab0:	011b      	lsls	r3, r3, #4
 8017ab2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017ab6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017aba:	eba3 0309 	sub.w	r3, r3, r9
 8017abe:	b289      	uxth	r1, r1
 8017ac0:	b29b      	uxth	r3, r3
 8017ac2:	ebae 0e01 	sub.w	lr, lr, r1
 8017ac6:	fb03 f808 	mul.w	r8, r3, r8
 8017aca:	fa1f fe8e 	uxth.w	lr, lr
 8017ace:	fb0e 880a 	mla	r8, lr, sl, r8
 8017ad2:	f892 a000 	ldrb.w	sl, [r2]
 8017ad6:	fb01 880a 	mla	r8, r1, sl, r8
 8017ada:	f890 a000 	ldrb.w	sl, [r0]
 8017ade:	fb09 880a 	mla	r8, r9, sl, r8
 8017ae2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017ae6:	f886 8000 	strb.w	r8, [r6]
 8017aea:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017aee:	f89c a001 	ldrb.w	sl, [ip, #1]
 8017af2:	fb03 f808 	mul.w	r8, r3, r8
 8017af6:	fb0e 880a 	mla	r8, lr, sl, r8
 8017afa:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017afe:	fb01 880a 	mla	r8, r1, sl, r8
 8017b02:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017b06:	fb09 880a 	mla	r8, r9, sl, r8
 8017b0a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017b0e:	f886 8001 	strb.w	r8, [r6, #1]
 8017b12:	78bf      	ldrb	r7, [r7, #2]
 8017b14:	f89c c002 	ldrb.w	ip, [ip, #2]
 8017b18:	437b      	muls	r3, r7
 8017b1a:	7892      	ldrb	r2, [r2, #2]
 8017b1c:	fb0e 330c 	mla	r3, lr, ip, r3
 8017b20:	fb01 3102 	mla	r1, r1, r2, r3
 8017b24:	7882      	ldrb	r2, [r0, #2]
 8017b26:	fb09 1902 	mla	r9, r9, r2, r1
 8017b2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b2e:	f886 9002 	strb.w	r9, [r6, #2]
 8017b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017b34:	3603      	adds	r6, #3
 8017b36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017b38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017b3c:	441c      	add	r4, r3
 8017b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b40:	4413      	add	r3, r2
 8017b42:	9322      	str	r3, [sp, #136]	; 0x88
 8017b44:	e769      	b.n	8017a1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017b46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017b48:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8017b4a:	441c      	add	r4, r3
 8017b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b4e:	443b      	add	r3, r7
 8017b50:	9322      	str	r3, [sp, #136]	; 0x88
 8017b52:	9b06      	ldr	r3, [sp, #24]
 8017b54:	3b01      	subs	r3, #1
 8017b56:	9306      	str	r3, [sp, #24]
 8017b58:	9b07      	ldr	r3, [sp, #28]
 8017b5a:	3303      	adds	r3, #3
 8017b5c:	9307      	str	r3, [sp, #28]
 8017b5e:	e73e      	b.n	80179de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b60:	d026      	beq.n	8017bb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017b62:	9b06      	ldr	r3, [sp, #24]
 8017b64:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017b66:	3b01      	subs	r3, #1
 8017b68:	fb00 4003 	mla	r0, r0, r3, r4
 8017b6c:	1400      	asrs	r0, r0, #16
 8017b6e:	f53f af52 	bmi.w	8017a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017b72:	3901      	subs	r1, #1
 8017b74:	4288      	cmp	r0, r1
 8017b76:	f6bf af4e 	bge.w	8017a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017b7a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017b7c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017b7e:	fb01 0303 	mla	r3, r1, r3, r0
 8017b82:	141b      	asrs	r3, r3, #16
 8017b84:	f53f af47 	bmi.w	8017a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017b88:	3a01      	subs	r2, #1
 8017b8a:	4293      	cmp	r3, r2
 8017b8c:	f6bf af43 	bge.w	8017a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017b90:	9b07      	ldr	r3, [sp, #28]
 8017b92:	f8dd a018 	ldr.w	sl, [sp, #24]
 8017b96:	f103 0803 	add.w	r8, r3, #3
 8017b9a:	f1ba 0f00 	cmp.w	sl, #0
 8017b9e:	dc71      	bgt.n	8017c84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8017ba0:	9b06      	ldr	r3, [sp, #24]
 8017ba2:	9a07      	ldr	r2, [sp, #28]
 8017ba4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ba8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017bac:	441a      	add	r2, r3
 8017bae:	9207      	str	r2, [sp, #28]
 8017bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f340 80f2 	ble.w	8017d9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8017bb8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017bbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017bbe:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017bc2:	eef0 6a48 	vmov.f32	s13, s16
 8017bc6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017bca:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017bce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017bd2:	ee16 4a90 	vmov	r4, s13
 8017bd6:	eef0 6a68 	vmov.f32	s13, s17
 8017bda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017bde:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8017be2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017be6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017bea:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017bee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017bf2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017bf6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017bfa:	ee18 2a10 	vmov	r2, s16
 8017bfe:	eeb0 8a47 	vmov.f32	s16, s14
 8017c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c06:	ee18 2a90 	vmov	r2, s17
 8017c0a:	9323      	str	r3, [sp, #140]	; 0x8c
 8017c0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c0e:	eef0 8a67 	vmov.f32	s17, s15
 8017c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c16:	9324      	str	r3, [sp, #144]	; 0x90
 8017c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c1c:	3b01      	subs	r3, #1
 8017c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8017c20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c22:	bf08      	it	eq
 8017c24:	4613      	moveq	r3, r2
 8017c26:	9306      	str	r3, [sp, #24]
 8017c28:	e6cb      	b.n	80179c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017c2a:	b151      	cbz	r1, 8017c42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8017c2c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017c30:	4660      	mov	r0, ip
 8017c32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c36:	442a      	add	r2, r5
 8017c38:	4667      	mov	r7, ip
 8017c3a:	e731      	b.n	8017aa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017c3c:	4660      	mov	r0, ip
 8017c3e:	4662      	mov	r2, ip
 8017c40:	e72e      	b.n	8017aa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017c42:	4660      	mov	r0, ip
 8017c44:	4662      	mov	r2, ip
 8017c46:	e7f7      	b.n	8017c38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8017c48:	f110 0e01 	adds.w	lr, r0, #1
 8017c4c:	f53f af71 	bmi.w	8017b32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c50:	4572      	cmp	r2, lr
 8017c52:	f6ff af6e 	blt.w	8017b32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c56:	f117 0e01 	adds.w	lr, r7, #1
 8017c5a:	f53f af6a 	bmi.w	8017b32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c5e:	45f4      	cmp	ip, lr
 8017c60:	f6ff af67 	blt.w	8017b32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c64:	b212      	sxth	r2, r2
 8017c66:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8017c6a:	fa0f f38c 	sxth.w	r3, ip
 8017c6e:	9200      	str	r2, [sp, #0]
 8017c70:	4631      	mov	r1, r6
 8017c72:	9a08      	ldr	r2, [sp, #32]
 8017c74:	9301      	str	r3, [sp, #4]
 8017c76:	462b      	mov	r3, r5
 8017c78:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8017c7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017c7e:	f7ff fdbf 	bl	8017800 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8017c82:	e756      	b.n	8017b32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017c86:	1426      	asrs	r6, r4, #16
 8017c88:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017c8a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017c8e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017c92:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017c94:	1400      	asrs	r0, r0, #16
 8017c96:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017c9a:	fb02 6000 	mla	r0, r2, r0, r6
 8017c9e:	9e08      	ldr	r6, [sp, #32]
 8017ca0:	f816 e000 	ldrb.w	lr, [r6, r0]
 8017ca4:	eb06 0c00 	add.w	ip, r6, r0
 8017ca8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017cac:	eb05 070e 	add.w	r7, r5, lr
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d064      	beq.n	8017d7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8017cb4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8017cb8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017cbc:	442e      	add	r6, r5
 8017cbe:	2900      	cmp	r1, #0
 8017cc0:	d066      	beq.n	8017d90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8017cc2:	eb0c 0002 	add.w	r0, ip, r2
 8017cc6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017cca:	7840      	ldrb	r0, [r0, #1]
 8017ccc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017cd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017cd4:	442a      	add	r2, r5
 8017cd6:	4428      	add	r0, r5
 8017cd8:	b29b      	uxth	r3, r3
 8017cda:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8017cde:	b289      	uxth	r1, r1
 8017ce0:	f896 e000 	ldrb.w	lr, [r6]
 8017ce4:	f108 0803 	add.w	r8, r8, #3
 8017ce8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cec:	fb03 f901 	mul.w	r9, r3, r1
 8017cf0:	011b      	lsls	r3, r3, #4
 8017cf2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017cf6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017cfa:	eba3 0309 	sub.w	r3, r3, r9
 8017cfe:	b289      	uxth	r1, r1
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	ebac 0c01 	sub.w	ip, ip, r1
 8017d06:	fb03 fe0e 	mul.w	lr, r3, lr
 8017d0a:	fa1f fc8c 	uxth.w	ip, ip
 8017d0e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017d12:	f892 b000 	ldrb.w	fp, [r2]
 8017d16:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017d1a:	f890 b000 	ldrb.w	fp, [r0]
 8017d1e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017d22:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017d26:	f808 ec06 	strb.w	lr, [r8, #-6]
 8017d2a:	f896 e001 	ldrb.w	lr, [r6, #1]
 8017d2e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017d32:	fb03 fe0e 	mul.w	lr, r3, lr
 8017d36:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017d3a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017d3e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017d42:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017d46:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017d4a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017d4e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8017d52:	78b6      	ldrb	r6, [r6, #2]
 8017d54:	78bf      	ldrb	r7, [r7, #2]
 8017d56:	4373      	muls	r3, r6
 8017d58:	7896      	ldrb	r6, [r2, #2]
 8017d5a:	7882      	ldrb	r2, [r0, #2]
 8017d5c:	fb0c 3307 	mla	r3, ip, r7, r3
 8017d60:	fb01 3306 	mla	r3, r1, r6, r3
 8017d64:	fb09 3902 	mla	r9, r9, r2, r3
 8017d68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017d6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017d6c:	441c      	add	r4, r3
 8017d6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017d70:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017d74:	4413      	add	r3, r2
 8017d76:	f808 9c04 	strb.w	r9, [r8, #-4]
 8017d7a:	9322      	str	r3, [sp, #136]	; 0x88
 8017d7c:	e70d      	b.n	8017b9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8017d7e:	b151      	cbz	r1, 8017d96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8017d80:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017d84:	4638      	mov	r0, r7
 8017d86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d8a:	442a      	add	r2, r5
 8017d8c:	463e      	mov	r6, r7
 8017d8e:	e7a3      	b.n	8017cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017d90:	4638      	mov	r0, r7
 8017d92:	463a      	mov	r2, r7
 8017d94:	e7a0      	b.n	8017cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017d96:	4638      	mov	r0, r7
 8017d98:	463a      	mov	r2, r7
 8017d9a:	e7f7      	b.n	8017d8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8017d9c:	b00d      	add	sp, #52	; 0x34
 8017d9e:	ecbd 8b0a 	vpop	{d8-d12}
 8017da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8017da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dac:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8017db0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8017db4:	2d00      	cmp	r5, #0
 8017db6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8017dba:	fb05 040e 	mla	r4, r5, lr, r0
 8017dbe:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8017dc2:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8017dc6:	eb02 0804 	add.w	r8, r2, r4
 8017dca:	db40      	blt.n	8017e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017dcc:	45a9      	cmp	r9, r5
 8017dce:	dd3e      	ble.n	8017e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	db3a      	blt.n	8017e4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8017dd4:	4586      	cmp	lr, r0
 8017dd6:	dd38      	ble.n	8017e4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8017dd8:	5d12      	ldrb	r2, [r2, r4]
 8017dda:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017dde:	1c42      	adds	r2, r0, #1
 8017de0:	d438      	bmi.n	8017e54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017de2:	4596      	cmp	lr, r2
 8017de4:	dd36      	ble.n	8017e54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017de6:	b3bf      	cbz	r7, 8017e58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8017de8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017dec:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8017df0:	3501      	adds	r5, #1
 8017df2:	d435      	bmi.n	8017e60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017df4:	45a9      	cmp	r9, r5
 8017df6:	dd33      	ble.n	8017e60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017df8:	f1bc 0f00 	cmp.w	ip, #0
 8017dfc:	d033      	beq.n	8017e66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8017dfe:	2800      	cmp	r0, #0
 8017e00:	db2c      	blt.n	8017e5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017e02:	4586      	cmp	lr, r0
 8017e04:	dd2a      	ble.n	8017e5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017e06:	f818 200e 	ldrb.w	r2, [r8, lr]
 8017e0a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017e0e:	3001      	adds	r0, #1
 8017e10:	d42c      	bmi.n	8017e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8017e12:	4586      	cmp	lr, r0
 8017e14:	dd2a      	ble.n	8017e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8017e16:	b35f      	cbz	r7, 8017e70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8017e18:	44c6      	add	lr, r8
 8017e1a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017e22:	2f0f      	cmp	r7, #15
 8017e24:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8017e28:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8017e2c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017e30:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8017e34:	d802      	bhi.n	8017e3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8017e36:	f1bc 0f0f 	cmp.w	ip, #15
 8017e3a:	d91b      	bls.n	8017e74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8017e3c:	4b77      	ldr	r3, [pc, #476]	; (801801c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8017e3e:	f240 1157 	movw	r1, #343	; 0x157
 8017e42:	4a77      	ldr	r2, [pc, #476]	; (8018020 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8017e44:	4877      	ldr	r0, [pc, #476]	; (8018024 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8017e46:	f004 fa31 	bl	801c2ac <__assert_func>
 8017e4a:	2600      	movs	r6, #0
 8017e4c:	e7c7      	b.n	8017dde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8017e4e:	2400      	movs	r4, #0
 8017e50:	4626      	mov	r6, r4
 8017e52:	e7cd      	b.n	8017df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017e54:	2400      	movs	r4, #0
 8017e56:	e7cb      	b.n	8017df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017e58:	463c      	mov	r4, r7
 8017e5a:	e7c9      	b.n	8017df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017e5c:	2500      	movs	r5, #0
 8017e5e:	e7d6      	b.n	8017e0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8017e60:	2200      	movs	r2, #0
 8017e62:	4615      	mov	r5, r2
 8017e64:	e7dd      	b.n	8017e22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017e66:	4662      	mov	r2, ip
 8017e68:	4665      	mov	r5, ip
 8017e6a:	e7da      	b.n	8017e22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	e7d8      	b.n	8017e22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017e70:	463a      	mov	r2, r7
 8017e72:	e7d6      	b.n	8017e22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017e74:	b2bf      	uxth	r7, r7
 8017e76:	fa1f f08c 	uxth.w	r0, ip
 8017e7a:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8017e7e:	fb00 fe07 	mul.w	lr, r0, r7
 8017e82:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8017e86:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8017e8a:	ebac 070e 	sub.w	r7, ip, lr
 8017e8e:	b280      	uxth	r0, r0
 8017e90:	b2bf      	uxth	r7, r7
 8017e92:	1a1b      	subs	r3, r3, r0
 8017e94:	fb07 fc0a 	mul.w	ip, r7, sl
 8017e98:	b29b      	uxth	r3, r3
 8017e9a:	fb03 cc0b 	mla	ip, r3, fp, ip
 8017e9e:	9300      	str	r3, [sp, #0]
 8017ea0:	fb00 cc09 	mla	ip, r0, r9, ip
 8017ea4:	fb0e cc08 	mla	ip, lr, r8, ip
 8017ea8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017eac:	9301      	str	r3, [sp, #4]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	f000 80b0 	beq.w	8018014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8017eb4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8017eb8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017ebc:	fb0b fc0c 	mul.w	ip, fp, ip
 8017ec0:	fb0b f606 	mul.w	r6, fp, r6
 8017ec4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8017ec8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017ecc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8017ed0:	44dc      	add	ip, fp
 8017ed2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017ed6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017eda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ede:	fb0a fb0b 	mul.w	fp, sl, fp
 8017ee2:	fb0a fa04 	mul.w	sl, sl, r4
 8017ee6:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8017eea:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8017eee:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8017ef2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8017ef6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017efa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017efe:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8017f02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f06:	0a36      	lsrs	r6, r6, #8
 8017f08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017f0c:	44dc      	add	ip, fp
 8017f0e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8017f12:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8017f16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017f1a:	fb09 fb0b 	mul.w	fp, r9, fp
 8017f1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017f22:	fb09 f905 	mul.w	r9, r9, r5
 8017f26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017f2a:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8017f2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f32:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8017f36:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017f3a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017f3e:	fb0c fc07 	mul.w	ip, ip, r7
 8017f42:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8017f46:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8017f4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017f4e:	445c      	add	r4, fp
 8017f50:	fb08 f505 	mul.w	r5, r8, r5
 8017f54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017f58:	fb08 f802 	mul.w	r8, r8, r2
 8017f5c:	0a24      	lsrs	r4, r4, #8
 8017f5e:	0a2a      	lsrs	r2, r5, #8
 8017f60:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8017f64:	fb07 f70a 	mul.w	r7, r7, sl
 8017f68:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017f6c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017f70:	4415      	add	r5, r2
 8017f72:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8017f76:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017f7a:	9a00      	ldr	r2, [sp, #0]
 8017f7c:	0a2d      	lsrs	r5, r5, #8
 8017f7e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017f82:	fb03 cc02 	mla	ip, r3, r2, ip
 8017f86:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017f8a:	fb02 7306 	mla	r3, r2, r6, r7
 8017f8e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8017f92:	9a01      	ldr	r2, [sp, #4]
 8017f94:	fb05 c50e 	mla	r5, r5, lr, ip
 8017f98:	fb0e 3e08 	mla	lr, lr, r8, r3
 8017f9c:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8017fa0:	fb04 5400 	mla	r4, r4, r0, r5
 8017fa4:	fb00 e303 	mla	r3, r0, r3, lr
 8017fa8:	0a24      	lsrs	r4, r4, #8
 8017faa:	0a1b      	lsrs	r3, r3, #8
 8017fac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017fb4:	431c      	orrs	r4, r3
 8017fb6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	b2e0      	uxtb	r0, r4
 8017fbe:	435a      	muls	r2, r3
 8017fc0:	fb10 f003 	smulbb	r0, r0, r3
 8017fc4:	1c55      	adds	r5, r2, #1
 8017fc6:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8017fca:	780a      	ldrb	r2, [r1, #0]
 8017fcc:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8017fd0:	b2ed      	uxtb	r5, r5
 8017fd2:	fb02 0205 	mla	r2, r2, r5, r0
 8017fd6:	b292      	uxth	r2, r2
 8017fd8:	1c50      	adds	r0, r2, #1
 8017fda:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017fde:	7848      	ldrb	r0, [r1, #1]
 8017fe0:	fb10 f005 	smulbb	r0, r0, r5
 8017fe4:	1212      	asrs	r2, r2, #8
 8017fe6:	700a      	strb	r2, [r1, #0]
 8017fe8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8017fec:	0c24      	lsrs	r4, r4, #16
 8017fee:	fb02 0203 	mla	r2, r2, r3, r0
 8017ff2:	b292      	uxth	r2, r2
 8017ff4:	1c50      	adds	r0, r2, #1
 8017ff6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017ffa:	1212      	asrs	r2, r2, #8
 8017ffc:	704a      	strb	r2, [r1, #1]
 8017ffe:	788a      	ldrb	r2, [r1, #2]
 8018000:	fb12 f505 	smulbb	r5, r2, r5
 8018004:	fb04 5303 	mla	r3, r4, r3, r5
 8018008:	b29b      	uxth	r3, r3
 801800a:	1c5a      	adds	r2, r3, #1
 801800c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018010:	121b      	asrs	r3, r3, #8
 8018012:	708b      	strb	r3, [r1, #2]
 8018014:	b003      	add	sp, #12
 8018016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801801a:	bf00      	nop
 801801c:	080205a7 	.word	0x080205a7
 8018020:	08020a5e 	.word	0x08020a5e
 8018024:	0802062f 	.word	0x0802062f

08018028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801802c:	ed2d 8b08 	vpush	{d8-d11}
 8018030:	b09f      	sub	sp, #124	; 0x7c
 8018032:	eeb0 aa40 	vmov.f32	s20, s0
 8018036:	eef0 9a60 	vmov.f32	s19, s1
 801803a:	921b      	str	r2, [sp, #108]	; 0x6c
 801803c:	eeb0 9a41 	vmov.f32	s18, s2
 8018040:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8018042:	eeb0 8a62 	vmov.f32	s16, s5
 8018046:	9309      	str	r3, [sp, #36]	; 0x24
 8018048:	eef0 8a43 	vmov.f32	s17, s6
 801804c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8018050:	eef0 ba44 	vmov.f32	s23, s8
 8018054:	901d      	str	r0, [sp, #116]	; 0x74
 8018056:	eeb0 ba64 	vmov.f32	s22, s9
 801805a:	931c      	str	r3, [sp, #112]	; 0x70
 801805c:	eef0 aa45 	vmov.f32	s21, s10
 8018060:	6850      	ldr	r0, [r2, #4]
 8018062:	9119      	str	r1, [sp, #100]	; 0x64
 8018064:	6812      	ldr	r2, [r2, #0]
 8018066:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8018068:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801806c:	fb00 1303 	mla	r3, r0, r3, r1
 8018070:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018074:	18d3      	adds	r3, r2, r3
 8018076:	930c      	str	r3, [sp, #48]	; 0x30
 8018078:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	9312      	str	r3, [sp, #72]	; 0x48
 801807e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018080:	685e      	ldr	r6, [r3, #4]
 8018082:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8018086:	3604      	adds	r6, #4
 8018088:	930d      	str	r3, [sp, #52]	; 0x34
 801808a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801808c:	2b00      	cmp	r3, #0
 801808e:	dc03      	bgt.n	8018098 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018090:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018092:	2b00      	cmp	r3, #0
 8018094:	f340 8378 	ble.w	8018788 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8018098:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801809a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801809e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80180a2:	1e48      	subs	r0, r1, #1
 80180a4:	1e57      	subs	r7, r2, #1
 80180a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	f340 818c 	ble.w	80183c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80180ae:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80180b0:	142b      	asrs	r3, r5, #16
 80180b2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80180b6:	d406      	bmi.n	80180c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180b8:	4584      	cmp	ip, r0
 80180ba:	da04      	bge.n	80180c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180bc:	2b00      	cmp	r3, #0
 80180be:	db02      	blt.n	80180c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180c0:	42bb      	cmp	r3, r7
 80180c2:	f2c0 8181 	blt.w	80183c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 80180c6:	f11c 0c01 	adds.w	ip, ip, #1
 80180ca:	f100 816f 	bmi.w	80183ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80180ce:	4561      	cmp	r1, ip
 80180d0:	f2c0 816c 	blt.w	80183ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80180d4:	3301      	adds	r3, #1
 80180d6:	f100 8169 	bmi.w	80183ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80180da:	429a      	cmp	r2, r3
 80180dc:	f2c0 8166 	blt.w	80183ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80180e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80180e4:	931a      	str	r3, [sp, #104]	; 0x68
 80180e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	f340 818c 	ble.w	8018406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80180ee:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80180f0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80180f4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80180f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80180fc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80180fe:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8018102:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018104:	141b      	asrs	r3, r3, #16
 8018106:	f100 81d0 	bmi.w	80184aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801810a:	f100 38ff 	add.w	r8, r0, #4294967295
 801810e:	4543      	cmp	r3, r8
 8018110:	f280 81cb 	bge.w	80184aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018114:	f1bc 0f00 	cmp.w	ip, #0
 8018118:	f2c0 81c7 	blt.w	80184aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801811c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018120:	45c4      	cmp	ip, r8
 8018122:	f280 81c2 	bge.w	80184aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018126:	b200      	sxth	r0, r0
 8018128:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801812a:	fb0c 3300 	mla	r3, ip, r0, r3
 801812e:	eb04 0803 	add.w	r8, r4, r3
 8018132:	5ce3      	ldrb	r3, [r4, r3]
 8018134:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018138:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801813c:	2a00      	cmp	r2, #0
 801813e:	f000 81a9 	beq.w	8018494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8018142:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018146:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801814a:	940e      	str	r4, [sp, #56]	; 0x38
 801814c:	0e24      	lsrs	r4, r4, #24
 801814e:	9415      	str	r4, [sp, #84]	; 0x54
 8018150:	b179      	cbz	r1, 8018172 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018152:	eb08 0c00 	add.w	ip, r8, r0
 8018156:	f818 0000 	ldrb.w	r0, [r8, r0]
 801815a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801815e:	900a      	str	r0, [sp, #40]	; 0x28
 8018160:	0e00      	lsrs	r0, r0, #24
 8018162:	9013      	str	r0, [sp, #76]	; 0x4c
 8018164:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8018168:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801816c:	900f      	str	r0, [sp, #60]	; 0x3c
 801816e:	0e00      	lsrs	r0, r0, #24
 8018170:	9016      	str	r0, [sp, #88]	; 0x58
 8018172:	b292      	uxth	r2, r2
 8018174:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018176:	b289      	uxth	r1, r1
 8018178:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801817a:	fb02 f901 	mul.w	r9, r2, r1
 801817e:	0112      	lsls	r2, r2, #4
 8018180:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018184:	eba2 0809 	sub.w	r8, r2, r9
 8018188:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801818c:	b289      	uxth	r1, r1
 801818e:	fa1f f888 	uxth.w	r8, r8
 8018192:	1a52      	subs	r2, r2, r1
 8018194:	fb08 f000 	mul.w	r0, r8, r0
 8018198:	b292      	uxth	r2, r2
 801819a:	fb02 000e 	mla	r0, r2, lr, r0
 801819e:	fb01 0004 	mla	r0, r1, r4, r0
 80181a2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80181a4:	fb09 0004 	mla	r0, r9, r4, r0
 80181a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80181ac:	2800      	cmp	r0, #0
 80181ae:	f000 80f2 	beq.w	8018396 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80181b2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80181b6:	d01b      	beq.n	80181f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80181b8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80181bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80181c0:	fb0e fa0a 	mul.w	sl, lr, sl
 80181c4:	fb0e fe03 	mul.w	lr, lr, r3
 80181c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80181cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80181d0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80181d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80181d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80181dc:	4453      	add	r3, sl
 80181de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80181e2:	0a1b      	lsrs	r3, r3, #8
 80181e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80181e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80181ec:	ea43 030c 	orr.w	r3, r3, ip
 80181f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80181f2:	2cff      	cmp	r4, #255	; 0xff
 80181f4:	d021      	beq.n	801823a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80181f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80181f8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80181fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80181fe:	fb04 fb0b 	mul.w	fp, r4, fp
 8018202:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018204:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018208:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801820a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801820e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018212:	fb04 fa0a 	mul.w	sl, r4, sl
 8018216:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801821a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801821e:	44de      	add	lr, fp
 8018220:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018224:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018228:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801822c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018230:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018234:	ea4e 040a 	orr.w	r4, lr, sl
 8018238:	940e      	str	r4, [sp, #56]	; 0x38
 801823a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801823c:	2cff      	cmp	r4, #255	; 0xff
 801823e:	d021      	beq.n	8018284 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8018240:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018242:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018246:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018248:	fb04 fb0b 	mul.w	fp, r4, fp
 801824c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801824e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018252:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018254:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018258:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801825c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018260:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018264:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018268:	44de      	add	lr, fp
 801826a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801826e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018272:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018276:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801827a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801827e:	ea4e 040a 	orr.w	r4, lr, sl
 8018282:	940a      	str	r4, [sp, #40]	; 0x28
 8018284:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018286:	2cff      	cmp	r4, #255	; 0xff
 8018288:	d021      	beq.n	80182ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801828a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801828c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018290:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018292:	fb04 fb0b 	mul.w	fp, r4, fp
 8018296:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018298:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801829c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801829e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80182a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80182aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80182b2:	44de      	add	lr, fp
 80182b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80182b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80182bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80182c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80182c8:	ea4e 040a 	orr.w	r4, lr, sl
 80182cc:	940f      	str	r4, [sp, #60]	; 0x3c
 80182ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80182d0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80182d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80182d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80182dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80182de:	fb08 fc0c 	mul.w	ip, r8, ip
 80182e2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80182e6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80182ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80182ec:	fb01 cc0e 	mla	ip, r1, lr, ip
 80182f0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80182f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80182f6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80182fa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80182fe:	fb08 f80e 	mul.w	r8, r8, lr
 8018302:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018306:	fb02 8303 	mla	r3, r2, r3, r8
 801830a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801830c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018310:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018314:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018316:	fb01 330a 	mla	r3, r1, sl, r3
 801831a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801831e:	fb09 3901 	mla	r9, r9, r1, r3
 8018322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018324:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018326:	4343      	muls	r3, r0
 8018328:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801832c:	1c58      	adds	r0, r3, #1
 801832e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018332:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018336:	ea4c 0c09 	orr.w	ip, ip, r9
 801833a:	783b      	ldrb	r3, [r7, #0]
 801833c:	fa5f f28c 	uxtb.w	r2, ip
 8018340:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8018344:	fb12 f201 	smulbb	r2, r2, r1
 8018348:	b2c0      	uxtb	r0, r0
 801834a:	fb03 2300 	mla	r3, r3, r0, r2
 801834e:	b29b      	uxth	r3, r3
 8018350:	1c5a      	adds	r2, r3, #1
 8018352:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018356:	787a      	ldrb	r2, [r7, #1]
 8018358:	fb12 f200 	smulbb	r2, r2, r0
 801835c:	121b      	asrs	r3, r3, #8
 801835e:	703b      	strb	r3, [r7, #0]
 8018360:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018364:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018368:	fb03 2301 	mla	r3, r3, r1, r2
 801836c:	b29b      	uxth	r3, r3
 801836e:	1c5a      	adds	r2, r3, #1
 8018370:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018374:	121b      	asrs	r3, r3, #8
 8018376:	707b      	strb	r3, [r7, #1]
 8018378:	78bb      	ldrb	r3, [r7, #2]
 801837a:	fb13 f000 	smulbb	r0, r3, r0
 801837e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8018382:	fa1f fc8c 	uxth.w	ip, ip
 8018386:	f10c 0301 	add.w	r3, ip, #1
 801838a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801838e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018392:	f887 c002 	strb.w	ip, [r7, #2]
 8018396:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018398:	3703      	adds	r7, #3
 801839a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801839c:	441a      	add	r2, r3
 801839e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80183a0:	441d      	add	r5, r3
 80183a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80183a4:	9231      	str	r2, [sp, #196]	; 0xc4
 80183a6:	3b01      	subs	r3, #1
 80183a8:	931a      	str	r3, [sp, #104]	; 0x68
 80183aa:	e69c      	b.n	80180e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80183ac:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80183ae:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80183b0:	441c      	add	r4, r3
 80183b2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80183b4:	441d      	add	r5, r3
 80183b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183b8:	9431      	str	r4, [sp, #196]	; 0xc4
 80183ba:	3b01      	subs	r3, #1
 80183bc:	9309      	str	r3, [sp, #36]	; 0x24
 80183be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183c0:	3303      	adds	r3, #3
 80183c2:	930c      	str	r3, [sp, #48]	; 0x30
 80183c4:	e66f      	b.n	80180a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80183c6:	d026      	beq.n	8018416 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80183c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183ca:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80183cc:	3b01      	subs	r3, #1
 80183ce:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80183d0:	fb00 4003 	mla	r0, r0, r3, r4
 80183d4:	1400      	asrs	r0, r0, #16
 80183d6:	f53f ae83 	bmi.w	80180e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80183da:	3901      	subs	r1, #1
 80183dc:	4288      	cmp	r0, r1
 80183de:	f6bf ae7f 	bge.w	80180e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80183e2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80183e4:	fb01 5303 	mla	r3, r1, r3, r5
 80183e8:	141b      	asrs	r3, r3, #16
 80183ea:	f53f ae79 	bmi.w	80180e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80183ee:	3a01      	subs	r2, #1
 80183f0:	4293      	cmp	r3, r2
 80183f2:	f6bf ae75 	bge.w	80180e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80183f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183f8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80183fc:	f103 0e03 	add.w	lr, r3, #3
 8018400:	f1bb 0f00 	cmp.w	fp, #0
 8018404:	dc71      	bgt.n	80184ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018408:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801840c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801840e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018412:	4423      	add	r3, r4
 8018414:	930c      	str	r3, [sp, #48]	; 0x30
 8018416:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018418:	2b00      	cmp	r3, #0
 801841a:	f340 81b5 	ble.w	8018788 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801841e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018422:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018424:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018428:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801842c:	eef0 6a48 	vmov.f32	s13, s16
 8018430:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018434:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018438:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801843c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8018440:	eef0 6a68 	vmov.f32	s13, s17
 8018444:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018448:	ee16 5a90 	vmov	r5, s13
 801844c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018450:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018454:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018458:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801845c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018460:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018464:	ee18 2a10 	vmov	r2, s16
 8018468:	eeb0 8a47 	vmov.f32	s16, s14
 801846c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018470:	ee18 2a90 	vmov	r2, s17
 8018474:	9333      	str	r3, [sp, #204]	; 0xcc
 8018476:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018478:	eef0 8a67 	vmov.f32	s17, s15
 801847c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018480:	9334      	str	r3, [sp, #208]	; 0xd0
 8018482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018484:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018486:	3b01      	subs	r3, #1
 8018488:	9319      	str	r3, [sp, #100]	; 0x64
 801848a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801848c:	bf08      	it	eq
 801848e:	4613      	moveq	r3, r2
 8018490:	9309      	str	r3, [sp, #36]	; 0x24
 8018492:	e5fa      	b.n	801808a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018494:	2900      	cmp	r1, #0
 8018496:	f43f ae6c 	beq.w	8018172 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801849a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801849e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80184a2:	900a      	str	r0, [sp, #40]	; 0x28
 80184a4:	0e00      	lsrs	r0, r0, #24
 80184a6:	9013      	str	r0, [sp, #76]	; 0x4c
 80184a8:	e663      	b.n	8018172 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80184aa:	f113 0801 	adds.w	r8, r3, #1
 80184ae:	f53f af72 	bmi.w	8018396 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184b2:	4540      	cmp	r0, r8
 80184b4:	f6ff af6f 	blt.w	8018396 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184b8:	f11c 0801 	adds.w	r8, ip, #1
 80184bc:	f53f af6b 	bmi.w	8018396 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184c0:	45c6      	cmp	lr, r8
 80184c2:	f6ff af68 	blt.w	8018396 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184c6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80184c8:	b200      	sxth	r0, r0
 80184ca:	9302      	str	r3, [sp, #8]
 80184cc:	fa0f f38e 	sxth.w	r3, lr
 80184d0:	9000      	str	r0, [sp, #0]
 80184d2:	9301      	str	r3, [sp, #4]
 80184d4:	4633      	mov	r3, r6
 80184d6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80184d8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80184dc:	e9cd c203 	strd	ip, r2, [sp, #12]
 80184e0:	4639      	mov	r1, r7
 80184e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80184e4:	f7ff fc60 	bl	8017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80184e8:	e755      	b.n	8018396 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184ea:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80184ec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80184f0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80184f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80184f6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80184f8:	1427      	asrs	r7, r4, #16
 80184fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80184fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018500:	142b      	asrs	r3, r5, #16
 8018502:	fb01 7303 	mla	r3, r1, r3, r7
 8018506:	18e7      	adds	r7, r4, r3
 8018508:	5ce3      	ldrb	r3, [r4, r3]
 801850a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801850e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018512:	2a00      	cmp	r2, #0
 8018514:	f000 812e 	beq.w	8018774 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8018518:	f897 8001 	ldrb.w	r8, [r7, #1]
 801851c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018520:	9410      	str	r4, [sp, #64]	; 0x40
 8018522:	0e24      	lsrs	r4, r4, #24
 8018524:	9417      	str	r4, [sp, #92]	; 0x5c
 8018526:	b170      	cbz	r0, 8018546 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8018528:	eb07 0801 	add.w	r8, r7, r1
 801852c:	5c79      	ldrb	r1, [r7, r1]
 801852e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018532:	910b      	str	r1, [sp, #44]	; 0x2c
 8018534:	0e09      	lsrs	r1, r1, #24
 8018536:	9114      	str	r1, [sp, #80]	; 0x50
 8018538:	f898 1001 	ldrb.w	r1, [r8, #1]
 801853c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018540:	9111      	str	r1, [sp, #68]	; 0x44
 8018542:	0e09      	lsrs	r1, r1, #24
 8018544:	9118      	str	r1, [sp, #96]	; 0x60
 8018546:	b292      	uxth	r2, r2
 8018548:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801854a:	b280      	uxth	r0, r0
 801854c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801854e:	fb02 f900 	mul.w	r9, r2, r0
 8018552:	0112      	lsls	r2, r2, #4
 8018554:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018558:	eba2 0809 	sub.w	r8, r2, r9
 801855c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018560:	b280      	uxth	r0, r0
 8018562:	fa1f f888 	uxth.w	r8, r8
 8018566:	1a12      	subs	r2, r2, r0
 8018568:	fb08 f101 	mul.w	r1, r8, r1
 801856c:	b292      	uxth	r2, r2
 801856e:	fb02 110c 	mla	r1, r2, ip, r1
 8018572:	fb00 1104 	mla	r1, r0, r4, r1
 8018576:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018578:	fb09 1104 	mla	r1, r9, r4, r1
 801857c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018580:	2900      	cmp	r1, #0
 8018582:	f000 80ec 	beq.w	801875e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8018586:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801858a:	d019      	beq.n	80185c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801858c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018590:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018594:	fb0c fa0a 	mul.w	sl, ip, sl
 8018598:	fb0c fc03 	mul.w	ip, ip, r3
 801859c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80185a0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80185a4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80185a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80185ac:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80185b0:	4453      	add	r3, sl
 80185b2:	0a3f      	lsrs	r7, r7, #8
 80185b4:	0a1b      	lsrs	r3, r3, #8
 80185b6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80185ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80185be:	433b      	orrs	r3, r7
 80185c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80185c2:	2cff      	cmp	r4, #255	; 0xff
 80185c4:	d020      	beq.n	8018608 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80185c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80185c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80185cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80185ce:	4367      	muls	r7, r4
 80185d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80185d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80185d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80185da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80185dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80185e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80185e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80185e8:	44bc      	add	ip, r7
 80185ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80185ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80185f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80185f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80185fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80185fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018602:	ea4c 040a 	orr.w	r4, ip, sl
 8018606:	9410      	str	r4, [sp, #64]	; 0x40
 8018608:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801860a:	2cff      	cmp	r4, #255	; 0xff
 801860c:	d020      	beq.n	8018650 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801860e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018610:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018614:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018616:	4367      	muls	r7, r4
 8018618:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801861a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801861e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018622:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018624:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018628:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801862c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018630:	44bc      	add	ip, r7
 8018632:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018636:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801863a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801863e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018642:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018646:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801864a:	ea4c 040a 	orr.w	r4, ip, sl
 801864e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018650:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018652:	2cff      	cmp	r4, #255	; 0xff
 8018654:	d020      	beq.n	8018698 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8018656:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018658:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801865c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801865e:	4367      	muls	r7, r4
 8018660:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018662:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018666:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801866a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801866c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018670:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018674:	fb04 fa0a 	mul.w	sl, r4, sl
 8018678:	44bc      	add	ip, r7
 801867a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801867e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018682:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018686:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801868a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801868e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018692:	ea4c 040a 	orr.w	r4, ip, sl
 8018696:	9411      	str	r4, [sp, #68]	; 0x44
 8018698:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801869a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801869e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80186a2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80186a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80186a8:	fb08 f707 	mul.w	r7, r8, r7
 80186ac:	fb02 770c 	mla	r7, r2, ip, r7
 80186b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80186b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80186b6:	fb00 770c 	mla	r7, r0, ip, r7
 80186ba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80186be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80186c0:	fb09 770c 	mla	r7, r9, ip, r7
 80186c4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80186c8:	fb08 f80c 	mul.w	r8, r8, ip
 80186cc:	0a3f      	lsrs	r7, r7, #8
 80186ce:	fb02 8303 	mla	r3, r2, r3, r8
 80186d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80186d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80186d8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80186dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80186de:	fb00 330a 	mla	r3, r0, sl, r3
 80186e2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80186e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80186e8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80186ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186f2:	434b      	muls	r3, r1
 80186f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80186f8:	1c59      	adds	r1, r3, #1
 80186fa:	ea47 070c 	orr.w	r7, r7, ip
 80186fe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018702:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018706:	b2fa      	uxtb	r2, r7
 8018708:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801870c:	fb12 f200 	smulbb	r2, r2, r0
 8018710:	b2c9      	uxtb	r1, r1
 8018712:	fb03 2301 	mla	r3, r3, r1, r2
 8018716:	b29b      	uxth	r3, r3
 8018718:	1c5a      	adds	r2, r3, #1
 801871a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801871e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018722:	fb12 f201 	smulbb	r2, r2, r1
 8018726:	121b      	asrs	r3, r3, #8
 8018728:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801872c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8018730:	0c3f      	lsrs	r7, r7, #16
 8018732:	fb03 2300 	mla	r3, r3, r0, r2
 8018736:	b29b      	uxth	r3, r3
 8018738:	1c5a      	adds	r2, r3, #1
 801873a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801873e:	121b      	asrs	r3, r3, #8
 8018740:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018744:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018748:	fb13 f101 	smulbb	r1, r3, r1
 801874c:	fb07 1700 	mla	r7, r7, r0, r1
 8018750:	b2bf      	uxth	r7, r7
 8018752:	1c7b      	adds	r3, r7, #1
 8018754:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018758:	123f      	asrs	r7, r7, #8
 801875a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801875e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018760:	f10e 0e03 	add.w	lr, lr, #3
 8018764:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8018766:	f10b 3bff 	add.w	fp, fp, #4294967295
 801876a:	441a      	add	r2, r3
 801876c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801876e:	9231      	str	r2, [sp, #196]	; 0xc4
 8018770:	441d      	add	r5, r3
 8018772:	e645      	b.n	8018400 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8018774:	2800      	cmp	r0, #0
 8018776:	f43f aee6 	beq.w	8018546 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801877a:	5c79      	ldrb	r1, [r7, r1]
 801877c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018780:	910b      	str	r1, [sp, #44]	; 0x2c
 8018782:	0e09      	lsrs	r1, r1, #24
 8018784:	9114      	str	r1, [sp, #80]	; 0x50
 8018786:	e6de      	b.n	8018546 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8018788:	b01f      	add	sp, #124	; 0x7c
 801878a:	ecbd 8b08 	vpop	{d8-d11}
 801878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018794 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8018794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018798:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801879c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80187a0:	2c00      	cmp	r4, #0
 80187a2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80187a6:	fb04 060c 	mla	r6, r4, ip, r0
 80187aa:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80187ae:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80187b2:	eb02 0e06 	add.w	lr, r2, r6
 80187b6:	db3d      	blt.n	8018834 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80187b8:	45a0      	cmp	r8, r4
 80187ba:	dd3b      	ble.n	8018834 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80187bc:	2800      	cmp	r0, #0
 80187be:	db37      	blt.n	8018830 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80187c0:	4584      	cmp	ip, r0
 80187c2:	dd35      	ble.n	8018830 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80187c4:	5d92      	ldrb	r2, [r2, r6]
 80187c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80187ca:	1c46      	adds	r6, r0, #1
 80187cc:	d435      	bmi.n	801883a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80187ce:	45b4      	cmp	ip, r6
 80187d0:	dd33      	ble.n	801883a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80187d2:	b3a5      	cbz	r5, 801883e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80187d4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80187d8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80187dc:	3401      	adds	r4, #1
 80187de:	d432      	bmi.n	8018846 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80187e0:	45a0      	cmp	r8, r4
 80187e2:	dd30      	ble.n	8018846 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80187e4:	b397      	cbz	r7, 801884c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80187e6:	2800      	cmp	r0, #0
 80187e8:	db2b      	blt.n	8018842 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80187ea:	4584      	cmp	ip, r0
 80187ec:	dd29      	ble.n	8018842 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80187ee:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80187f2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80187f6:	3001      	adds	r0, #1
 80187f8:	d42b      	bmi.n	8018852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80187fa:	4584      	cmp	ip, r0
 80187fc:	dd29      	ble.n	8018852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80187fe:	b355      	cbz	r5, 8018856 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8018800:	44f4      	add	ip, lr
 8018802:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8018806:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801880a:	2d0f      	cmp	r5, #15
 801880c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018810:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018814:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018818:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801881c:	d801      	bhi.n	8018822 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801881e:	2f0f      	cmp	r7, #15
 8018820:	d91b      	bls.n	801885a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8018822:	4b7f      	ldr	r3, [pc, #508]	; (8018a20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8018824:	f240 1157 	movw	r1, #343	; 0x157
 8018828:	4a7e      	ldr	r2, [pc, #504]	; (8018a24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801882a:	487f      	ldr	r0, [pc, #508]	; (8018a28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801882c:	f003 fd3e 	bl	801c2ac <__assert_func>
 8018830:	2200      	movs	r2, #0
 8018832:	e7ca      	b.n	80187ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8018834:	2600      	movs	r6, #0
 8018836:	4632      	mov	r2, r6
 8018838:	e7d0      	b.n	80187dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801883a:	2600      	movs	r6, #0
 801883c:	e7ce      	b.n	80187dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801883e:	462e      	mov	r6, r5
 8018840:	e7cc      	b.n	80187dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8018842:	2400      	movs	r4, #0
 8018844:	e7d7      	b.n	80187f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8018846:	2300      	movs	r3, #0
 8018848:	461c      	mov	r4, r3
 801884a:	e7de      	b.n	801880a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801884c:	463b      	mov	r3, r7
 801884e:	463c      	mov	r4, r7
 8018850:	e7db      	b.n	801880a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8018852:	2300      	movs	r3, #0
 8018854:	e7d9      	b.n	801880a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8018856:	462b      	mov	r3, r5
 8018858:	e7d7      	b.n	801880a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801885a:	b2a8      	uxth	r0, r5
 801885c:	b2bf      	uxth	r7, r7
 801885e:	fb07 fe00 	mul.w	lr, r7, r0
 8018862:	0100      	lsls	r0, r0, #4
 8018864:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018868:	eba0 0c0e 	sub.w	ip, r0, lr
 801886c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8018870:	b2bf      	uxth	r7, r7
 8018872:	fa1f fc8c 	uxth.w	ip, ip
 8018876:	1bc5      	subs	r5, r0, r7
 8018878:	fb0c f00a 	mul.w	r0, ip, sl
 801887c:	b2ad      	uxth	r5, r5
 801887e:	fb05 000b 	mla	r0, r5, fp, r0
 8018882:	fb07 0009 	mla	r0, r7, r9, r0
 8018886:	fb0e 0008 	mla	r0, lr, r8, r0
 801888a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801888e:	9001      	str	r0, [sp, #4]
 8018890:	2800      	cmp	r0, #0
 8018892:	f000 80c2 	beq.w	8018a1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8018896:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801889a:	d018      	beq.n	80188ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801889c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80188a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80188a4:	fb0b f000 	mul.w	r0, fp, r0
 80188a8:	fb0b fb02 	mul.w	fp, fp, r2
 80188ac:	0a02      	lsrs	r2, r0, #8
 80188ae:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80188b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80188b6:	4402      	add	r2, r0
 80188b8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80188bc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80188c0:	0a12      	lsrs	r2, r2, #8
 80188c2:	0a00      	lsrs	r0, r0, #8
 80188c4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80188c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80188cc:	4302      	orrs	r2, r0
 80188ce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80188d2:	d01a      	beq.n	801890a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80188d4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80188d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80188dc:	fb0a f000 	mul.w	r0, sl, r0
 80188e0:	fb0a fa06 	mul.w	sl, sl, r6
 80188e4:	0a06      	lsrs	r6, r0, #8
 80188e6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80188ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80188ee:	4406      	add	r6, r0
 80188f0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80188f4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80188f8:	0a36      	lsrs	r6, r6, #8
 80188fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80188fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018902:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018906:	ea46 060a 	orr.w	r6, r6, sl
 801890a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801890e:	d01b      	beq.n	8018948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8018910:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018914:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018918:	fb09 fa0a 	mul.w	sl, r9, sl
 801891c:	fb09 f004 	mul.w	r0, r9, r4
 8018920:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018924:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018928:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801892c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018930:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8018934:	4454      	add	r4, sl
 8018936:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801893a:	0a24      	lsrs	r4, r4, #8
 801893c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018940:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018944:	ea44 0409 	orr.w	r4, r4, r9
 8018948:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801894c:	d01b      	beq.n	8018986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801894e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8018952:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018956:	fb08 f909 	mul.w	r9, r8, r9
 801895a:	fb08 f003 	mul.w	r0, r8, r3
 801895e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018962:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018966:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801896a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801896e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8018972:	444b      	add	r3, r9
 8018974:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018978:	0a1b      	lsrs	r3, r3, #8
 801897a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801897e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018982:	ea43 0308 	orr.w	r3, r3, r8
 8018986:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801898a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801898e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8018992:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018996:	fb0c f000 	mul.w	r0, ip, r0
 801899a:	fb0c f606 	mul.w	r6, ip, r6
 801899e:	fb05 0808 	mla	r8, r5, r8, r0
 80189a2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80189a6:	fb05 6502 	mla	r5, r5, r2, r6
 80189aa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80189ae:	fb07 8800 	mla	r8, r7, r0, r8
 80189b2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80189b6:	fb07 5704 	mla	r7, r7, r4, r5
 80189ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80189be:	fb0e 8000 	mla	r0, lr, r0, r8
 80189c2:	780a      	ldrb	r2, [r1, #0]
 80189c4:	fb0e 7e03 	mla	lr, lr, r3, r7
 80189c8:	9b01      	ldr	r3, [sp, #4]
 80189ca:	0a00      	lsrs	r0, r0, #8
 80189cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80189d0:	43db      	mvns	r3, r3
 80189d2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80189dc:	ea40 0e0e 	orr.w	lr, r0, lr
 80189e0:	fb02 f003 	mul.w	r0, r2, r3
 80189e4:	1c42      	adds	r2, r0, #1
 80189e6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80189ea:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80189ee:	700a      	strb	r2, [r1, #0]
 80189f0:	784a      	ldrb	r2, [r1, #1]
 80189f2:	435a      	muls	r2, r3
 80189f4:	1c50      	adds	r0, r2, #1
 80189f6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80189fa:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80189fe:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8018a02:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8018a06:	704a      	strb	r2, [r1, #1]
 8018a08:	788a      	ldrb	r2, [r1, #2]
 8018a0a:	4353      	muls	r3, r2
 8018a0c:	1c5a      	adds	r2, r3, #1
 8018a0e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018a12:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8018a16:	f881 e002 	strb.w	lr, [r1, #2]
 8018a1a:	b003      	add	sp, #12
 8018a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a20:	080205a7 	.word	0x080205a7
 8018a24:	08020a5e 	.word	0x08020a5e
 8018a28:	0802062f 	.word	0x0802062f

08018a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a30:	ed2d 8b0a 	vpush	{d8-d12}
 8018a34:	b09b      	sub	sp, #108	; 0x6c
 8018a36:	eeb0 aa40 	vmov.f32	s20, s0
 8018a3a:	eef0 9a60 	vmov.f32	s19, s1
 8018a3e:	9218      	str	r2, [sp, #96]	; 0x60
 8018a40:	eeb0 9a41 	vmov.f32	s18, s2
 8018a44:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018a46:	eeb0 8a62 	vmov.f32	s16, s5
 8018a4a:	9019      	str	r0, [sp, #100]	; 0x64
 8018a4c:	eef0 8a43 	vmov.f32	s17, s6
 8018a50:	6850      	ldr	r0, [r2, #4]
 8018a52:	eeb0 ca44 	vmov.f32	s24, s8
 8018a56:	9116      	str	r1, [sp, #88]	; 0x58
 8018a58:	eef0 ba64 	vmov.f32	s23, s9
 8018a5c:	9307      	str	r3, [sp, #28]
 8018a5e:	eeb0 ba45 	vmov.f32	s22, s10
 8018a62:	6812      	ldr	r2, [r2, #0]
 8018a64:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8018a68:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8018a6a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8018a6e:	fb00 1303 	mla	r3, r0, r3, r1
 8018a72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a76:	18d3      	adds	r3, r2, r3
 8018a78:	930a      	str	r3, [sp, #40]	; 0x28
 8018a7a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018a80:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018a82:	685e      	ldr	r6, [r3, #4]
 8018a84:	3604      	adds	r6, #4
 8018a86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	dc03      	bgt.n	8018a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	f340 834f 	ble.w	8019132 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018a94:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018a96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018a9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018a9e:	1e48      	subs	r0, r1, #1
 8018aa0:	1e57      	subs	r7, r2, #1
 8018aa2:	9b07      	ldr	r3, [sp, #28]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	f340 8178 	ble.w	8018d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018aaa:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018aac:	142b      	asrs	r3, r5, #16
 8018aae:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018ab2:	d406      	bmi.n	8018ac2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ab4:	4584      	cmp	ip, r0
 8018ab6:	da04      	bge.n	8018ac2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	db02      	blt.n	8018ac2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018abc:	42bb      	cmp	r3, r7
 8018abe:	f2c0 816d 	blt.w	8018d9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018ac2:	f11c 0c01 	adds.w	ip, ip, #1
 8018ac6:	f100 815b 	bmi.w	8018d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018aca:	4561      	cmp	r1, ip
 8018acc:	f2c0 8158 	blt.w	8018d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	f100 8155 	bmi.w	8018d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	f2c0 8152 	blt.w	8018d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018adc:	9b07      	ldr	r3, [sp, #28]
 8018ade:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018ae0:	9317      	str	r3, [sp, #92]	; 0x5c
 8018ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	f340 8178 	ble.w	8018dda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8018aea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018aec:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018af0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018af4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018af8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018afa:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018afe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018b00:	141b      	asrs	r3, r3, #16
 8018b02:	f100 81ba 	bmi.w	8018e7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b06:	f101 38ff 	add.w	r8, r1, #4294967295
 8018b0a:	4543      	cmp	r3, r8
 8018b0c:	f280 81b5 	bge.w	8018e7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b10:	f1bc 0f00 	cmp.w	ip, #0
 8018b14:	f2c0 81b1 	blt.w	8018e7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b18:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018b1c:	45c4      	cmp	ip, r8
 8018b1e:	f280 81ac 	bge.w	8018e7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b22:	b209      	sxth	r1, r1
 8018b24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018b26:	fb0c 3301 	mla	r3, ip, r1, r3
 8018b2a:	eb04 0803 	add.w	r8, r4, r3
 8018b2e:	5ce3      	ldrb	r3, [r4, r3]
 8018b30:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018b34:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018b38:	2a00      	cmp	r2, #0
 8018b3a:	f000 8193 	beq.w	8018e64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8018b3e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018b42:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8018b46:	940b      	str	r4, [sp, #44]	; 0x2c
 8018b48:	0e24      	lsrs	r4, r4, #24
 8018b4a:	9412      	str	r4, [sp, #72]	; 0x48
 8018b4c:	b178      	cbz	r0, 8018b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018b4e:	eb08 0c01 	add.w	ip, r8, r1
 8018b52:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018b56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018b5a:	9108      	str	r1, [sp, #32]
 8018b5c:	0e09      	lsrs	r1, r1, #24
 8018b5e:	9110      	str	r1, [sp, #64]	; 0x40
 8018b60:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018b64:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018b68:	910c      	str	r1, [sp, #48]	; 0x30
 8018b6a:	0e09      	lsrs	r1, r1, #24
 8018b6c:	9113      	str	r1, [sp, #76]	; 0x4c
 8018b6e:	b292      	uxth	r2, r2
 8018b70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018b72:	b280      	uxth	r0, r0
 8018b74:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018b76:	fb02 f900 	mul.w	r9, r2, r0
 8018b7a:	0112      	lsls	r2, r2, #4
 8018b7c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018b80:	eba2 0809 	sub.w	r8, r2, r9
 8018b84:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018b88:	b280      	uxth	r0, r0
 8018b8a:	fa1f f888 	uxth.w	r8, r8
 8018b8e:	1a12      	subs	r2, r2, r0
 8018b90:	fb08 f101 	mul.w	r1, r8, r1
 8018b94:	b292      	uxth	r2, r2
 8018b96:	fb02 110e 	mla	r1, r2, lr, r1
 8018b9a:	fb00 1104 	mla	r1, r0, r4, r1
 8018b9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018ba0:	fb09 1104 	mla	r1, r9, r4, r1
 8018ba4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018ba8:	2900      	cmp	r1, #0
 8018baa:	f000 80de 	beq.w	8018d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018bae:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018bb2:	d01b      	beq.n	8018bec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8018bb4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018bb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018bbc:	fb0e fa0a 	mul.w	sl, lr, sl
 8018bc0:	fb0e fe03 	mul.w	lr, lr, r3
 8018bc4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018bc8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018bcc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018bd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018bd4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018bd8:	4453      	add	r3, sl
 8018bda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018bde:	0a1b      	lsrs	r3, r3, #8
 8018be0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018be4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018be8:	ea43 030c 	orr.w	r3, r3, ip
 8018bec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018bee:	2cff      	cmp	r4, #255	; 0xff
 8018bf0:	d021      	beq.n	8018c36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8018bf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018bf4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018bf8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018bfa:	fb04 fb0b 	mul.w	fp, r4, fp
 8018bfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018c00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018c04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018c06:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018c0a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018c0e:	fb04 fa0a 	mul.w	sl, r4, sl
 8018c12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018c16:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018c1a:	44de      	add	lr, fp
 8018c1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018c20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018c24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018c28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018c2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018c30:	ea4e 040a 	orr.w	r4, lr, sl
 8018c34:	940b      	str	r4, [sp, #44]	; 0x2c
 8018c36:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c38:	2cff      	cmp	r4, #255	; 0xff
 8018c3a:	d021      	beq.n	8018c80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018c3c:	9c08      	ldr	r4, [sp, #32]
 8018c3e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018c42:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c44:	fb04 fb0b 	mul.w	fp, r4, fp
 8018c48:	9c08      	ldr	r4, [sp, #32]
 8018c4a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018c4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c50:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018c54:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018c58:	fb04 fa0a 	mul.w	sl, r4, sl
 8018c5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018c60:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018c64:	44de      	add	lr, fp
 8018c66:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018c6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018c6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018c72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018c76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018c7a:	ea4e 040a 	orr.w	r4, lr, sl
 8018c7e:	9408      	str	r4, [sp, #32]
 8018c80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c82:	2cff      	cmp	r4, #255	; 0xff
 8018c84:	d021      	beq.n	8018cca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018c86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018c88:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018c8c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c8e:	fb04 fb0b 	mul.w	fp, r4, fp
 8018c92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018c94:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018c98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c9a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018c9e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018ca2:	fb04 fa0a 	mul.w	sl, r4, sl
 8018ca6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018caa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018cae:	44de      	add	lr, fp
 8018cb0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018cb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018cb8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018cbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018cc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018cc4:	ea4e 040a 	orr.w	r4, lr, sl
 8018cc8:	940c      	str	r4, [sp, #48]	; 0x30
 8018cca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018ccc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018cd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018cd4:	43c9      	mvns	r1, r1
 8018cd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018cda:	9c08      	ldr	r4, [sp, #32]
 8018cdc:	b2c9      	uxtb	r1, r1
 8018cde:	fb08 fc0c 	mul.w	ip, r8, ip
 8018ce2:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018ce6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018cea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018cec:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018cf0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018cf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018cf6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8018cfa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018cfe:	fb08 f80e 	mul.w	r8, r8, lr
 8018d02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d06:	fb02 8303 	mla	r3, r2, r3, r8
 8018d0a:	9a08      	ldr	r2, [sp, #32]
 8018d0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018d10:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018d16:	fb00 330a 	mla	r3, r0, sl, r3
 8018d1a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018d1e:	fb09 3900 	mla	r9, r9, r0, r3
 8018d22:	783b      	ldrb	r3, [r7, #0]
 8018d24:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018d28:	fb03 f201 	mul.w	r2, r3, r1
 8018d2c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018d30:	1c53      	adds	r3, r2, #1
 8018d32:	ea4c 0c09 	orr.w	ip, ip, r9
 8018d36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018d3a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8018d3e:	703b      	strb	r3, [r7, #0]
 8018d40:	787b      	ldrb	r3, [r7, #1]
 8018d42:	434b      	muls	r3, r1
 8018d44:	1c5a      	adds	r2, r3, #1
 8018d46:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018d4a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018d4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018d52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018d56:	707b      	strb	r3, [r7, #1]
 8018d58:	78bb      	ldrb	r3, [r7, #2]
 8018d5a:	4359      	muls	r1, r3
 8018d5c:	1c4b      	adds	r3, r1, #1
 8018d5e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018d62:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8018d66:	f887 c002 	strb.w	ip, [r7, #2]
 8018d6a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018d6c:	3703      	adds	r7, #3
 8018d6e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018d70:	441a      	add	r2, r3
 8018d72:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018d74:	441d      	add	r5, r3
 8018d76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018d78:	922f      	str	r2, [sp, #188]	; 0xbc
 8018d7a:	3b01      	subs	r3, #1
 8018d7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8018d7e:	e6b0      	b.n	8018ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018d80:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018d82:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018d84:	441c      	add	r4, r3
 8018d86:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018d88:	441d      	add	r5, r3
 8018d8a:	9b07      	ldr	r3, [sp, #28]
 8018d8c:	942f      	str	r4, [sp, #188]	; 0xbc
 8018d8e:	3b01      	subs	r3, #1
 8018d90:	9307      	str	r3, [sp, #28]
 8018d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d94:	3303      	adds	r3, #3
 8018d96:	930a      	str	r3, [sp, #40]	; 0x28
 8018d98:	e683      	b.n	8018aa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018d9a:	d026      	beq.n	8018dea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8018d9c:	9b07      	ldr	r3, [sp, #28]
 8018d9e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018da0:	3b01      	subs	r3, #1
 8018da2:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018da4:	fb00 4003 	mla	r0, r0, r3, r4
 8018da8:	1400      	asrs	r0, r0, #16
 8018daa:	f53f ae97 	bmi.w	8018adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018dae:	3901      	subs	r1, #1
 8018db0:	4288      	cmp	r0, r1
 8018db2:	f6bf ae93 	bge.w	8018adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018db6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8018db8:	fb01 5303 	mla	r3, r1, r3, r5
 8018dbc:	141b      	asrs	r3, r3, #16
 8018dbe:	f53f ae8d 	bmi.w	8018adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018dc2:	3a01      	subs	r2, #1
 8018dc4:	4293      	cmp	r3, r2
 8018dc6:	f6bf ae89 	bge.w	8018adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dcc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018dd0:	f103 0e03 	add.w	lr, r3, #3
 8018dd4:	f1bb 0f00 	cmp.w	fp, #0
 8018dd8:	dc6d      	bgt.n	8018eb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8018dda:	9b07      	ldr	r3, [sp, #28]
 8018ddc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018de2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018de6:	4423      	add	r3, r4
 8018de8:	930a      	str	r3, [sp, #40]	; 0x28
 8018dea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	f340 81a0 	ble.w	8019132 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018df2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8018df6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018df8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8018dfc:	eef0 6a48 	vmov.f32	s13, s16
 8018e00:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8018e04:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8018e08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018e0c:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8018e10:	eef0 6a68 	vmov.f32	s13, s17
 8018e14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018e18:	ee16 5a90 	vmov	r5, s13
 8018e1c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018e20:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018e24:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018e28:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018e2c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018e30:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018e34:	ee18 2a10 	vmov	r2, s16
 8018e38:	eeb0 8a47 	vmov.f32	s16, s14
 8018e3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e40:	ee18 2a90 	vmov	r2, s17
 8018e44:	9331      	str	r3, [sp, #196]	; 0xc4
 8018e46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e48:	eef0 8a67 	vmov.f32	s17, s15
 8018e4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e50:	9332      	str	r3, [sp, #200]	; 0xc8
 8018e52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018e54:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018e56:	3b01      	subs	r3, #1
 8018e58:	9316      	str	r3, [sp, #88]	; 0x58
 8018e5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e5c:	bf08      	it	eq
 8018e5e:	4613      	moveq	r3, r2
 8018e60:	9307      	str	r3, [sp, #28]
 8018e62:	e610      	b.n	8018a86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018e64:	2800      	cmp	r0, #0
 8018e66:	f43f ae82 	beq.w	8018b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018e6a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018e6e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018e72:	9108      	str	r1, [sp, #32]
 8018e74:	0e09      	lsrs	r1, r1, #24
 8018e76:	9110      	str	r1, [sp, #64]	; 0x40
 8018e78:	e679      	b.n	8018b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018e7a:	f113 0801 	adds.w	r8, r3, #1
 8018e7e:	f53f af74 	bmi.w	8018d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018e82:	4541      	cmp	r1, r8
 8018e84:	f6ff af71 	blt.w	8018d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018e88:	f11c 0801 	adds.w	r8, ip, #1
 8018e8c:	f53f af6d 	bmi.w	8018d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018e90:	45c6      	cmp	lr, r8
 8018e92:	f6ff af6a 	blt.w	8018d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018e96:	b209      	sxth	r1, r1
 8018e98:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018e9c:	fa0f f38e 	sxth.w	r3, lr
 8018ea0:	9100      	str	r1, [sp, #0]
 8018ea2:	4639      	mov	r1, r7
 8018ea4:	9301      	str	r3, [sp, #4]
 8018ea6:	4633      	mov	r3, r6
 8018ea8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8018eac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018eae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018eb0:	f7ff fc70 	bl	8018794 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8018eb4:	e759      	b.n	8018d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018eb6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018eb8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018ebc:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018ebe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018ec2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018ec4:	1427      	asrs	r7, r4, #16
 8018ec6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018ec8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018ecc:	142b      	asrs	r3, r5, #16
 8018ece:	fb01 7303 	mla	r3, r1, r3, r7
 8018ed2:	18e7      	adds	r7, r4, r3
 8018ed4:	5ce3      	ldrb	r3, [r4, r3]
 8018ed6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018eda:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018ede:	2a00      	cmp	r2, #0
 8018ee0:	f000 811d 	beq.w	801911e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8018ee4:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018ee8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018eec:	940d      	str	r4, [sp, #52]	; 0x34
 8018eee:	0e24      	lsrs	r4, r4, #24
 8018ef0:	9414      	str	r4, [sp, #80]	; 0x50
 8018ef2:	b170      	cbz	r0, 8018f12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018ef4:	eb07 0801 	add.w	r8, r7, r1
 8018ef8:	5c79      	ldrb	r1, [r7, r1]
 8018efa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018efe:	9109      	str	r1, [sp, #36]	; 0x24
 8018f00:	0e09      	lsrs	r1, r1, #24
 8018f02:	9111      	str	r1, [sp, #68]	; 0x44
 8018f04:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018f08:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f0c:	910e      	str	r1, [sp, #56]	; 0x38
 8018f0e:	0e09      	lsrs	r1, r1, #24
 8018f10:	9115      	str	r1, [sp, #84]	; 0x54
 8018f12:	b292      	uxth	r2, r2
 8018f14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018f16:	b280      	uxth	r0, r0
 8018f18:	fb02 f900 	mul.w	r9, r2, r0
 8018f1c:	0112      	lsls	r2, r2, #4
 8018f1e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018f22:	eba2 0809 	sub.w	r8, r2, r9
 8018f26:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8018f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f2c:	b280      	uxth	r0, r0
 8018f2e:	fa1f f888 	uxth.w	r8, r8
 8018f32:	1a09      	subs	r1, r1, r0
 8018f34:	fb08 f202 	mul.w	r2, r8, r2
 8018f38:	b289      	uxth	r1, r1
 8018f3a:	fb01 220c 	mla	r2, r1, ip, r2
 8018f3e:	fb00 2204 	mla	r2, r0, r4, r2
 8018f42:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018f44:	fb09 2204 	mla	r2, r9, r4, r2
 8018f48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018f4c:	2a00      	cmp	r2, #0
 8018f4e:	f000 80db 	beq.w	8019108 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8018f52:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018f56:	d019      	beq.n	8018f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8018f58:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018f5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018f60:	fb0c fa0a 	mul.w	sl, ip, sl
 8018f64:	fb0c fc03 	mul.w	ip, ip, r3
 8018f68:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018f6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018f70:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018f74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018f78:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018f7c:	4453      	add	r3, sl
 8018f7e:	0a3f      	lsrs	r7, r7, #8
 8018f80:	0a1b      	lsrs	r3, r3, #8
 8018f82:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018f86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018f8a:	433b      	orrs	r3, r7
 8018f8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018f8e:	2cff      	cmp	r4, #255	; 0xff
 8018f90:	d020      	beq.n	8018fd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8018f92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018f94:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018f98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018f9a:	4367      	muls	r7, r4
 8018f9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018f9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018fa2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018fa6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018fa8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018fac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018fb0:	fb04 fa0a 	mul.w	sl, r4, sl
 8018fb4:	44bc      	add	ip, r7
 8018fb6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018fba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018fbe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018fc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018fc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018fca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018fce:	ea4c 040a 	orr.w	r4, ip, sl
 8018fd2:	940d      	str	r4, [sp, #52]	; 0x34
 8018fd4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fd6:	2cff      	cmp	r4, #255	; 0xff
 8018fd8:	d020      	beq.n	801901c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8018fda:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018fdc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018fe0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fe2:	4367      	muls	r7, r4
 8018fe4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018fe6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018fea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018fee:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018ff0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018ff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018ff8:	fb04 fa0a 	mul.w	sl, r4, sl
 8018ffc:	44bc      	add	ip, r7
 8018ffe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019002:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019006:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801900a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801900e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019012:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019016:	ea4c 040a 	orr.w	r4, ip, sl
 801901a:	9409      	str	r4, [sp, #36]	; 0x24
 801901c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801901e:	2cff      	cmp	r4, #255	; 0xff
 8019020:	d020      	beq.n	8019064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8019022:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019024:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019028:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801902a:	4367      	muls	r7, r4
 801902c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801902e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019032:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019036:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019038:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801903c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019040:	fb04 fa0a 	mul.w	sl, r4, sl
 8019044:	44bc      	add	ip, r7
 8019046:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801904a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801904e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019052:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019056:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801905a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801905e:	ea4c 040a 	orr.w	r4, ip, sl
 8019062:	940e      	str	r4, [sp, #56]	; 0x38
 8019064:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019066:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801906a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801906e:	43d2      	mvns	r2, r2
 8019070:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019074:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019076:	b2d2      	uxtb	r2, r2
 8019078:	fb08 f707 	mul.w	r7, r8, r7
 801907c:	fb01 770c 	mla	r7, r1, ip, r7
 8019080:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019084:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019086:	fb00 770c 	mla	r7, r0, ip, r7
 801908a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801908e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019090:	fb09 770c 	mla	r7, r9, ip, r7
 8019094:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019098:	fb08 f80c 	mul.w	r8, r8, ip
 801909c:	0a3f      	lsrs	r7, r7, #8
 801909e:	fb01 8303 	mla	r3, r1, r3, r8
 80190a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80190a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80190a8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80190ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80190ae:	fb00 330a 	mla	r3, r0, sl, r3
 80190b2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80190b6:	fb09 3c0c 	mla	ip, r9, ip, r3
 80190ba:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80190be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80190c2:	fb03 f102 	mul.w	r1, r3, r2
 80190c6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80190ca:	1c4b      	adds	r3, r1, #1
 80190cc:	ea47 070c 	orr.w	r7, r7, ip
 80190d0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80190d4:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80190d8:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80190dc:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80190e0:	4353      	muls	r3, r2
 80190e2:	1c59      	adds	r1, r3, #1
 80190e4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80190e8:	0a3b      	lsrs	r3, r7, #8
 80190ea:	0c3f      	lsrs	r7, r7, #16
 80190ec:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80190f0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80190f4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80190f8:	435a      	muls	r2, r3
 80190fa:	1c53      	adds	r3, r2, #1
 80190fc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019100:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8019104:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019108:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801910a:	f10e 0e03 	add.w	lr, lr, #3
 801910e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019110:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019114:	441a      	add	r2, r3
 8019116:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019118:	922f      	str	r2, [sp, #188]	; 0xbc
 801911a:	441d      	add	r5, r3
 801911c:	e65a      	b.n	8018dd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801911e:	2800      	cmp	r0, #0
 8019120:	f43f aef7 	beq.w	8018f12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8019124:	5c79      	ldrb	r1, [r7, r1]
 8019126:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801912a:	9109      	str	r1, [sp, #36]	; 0x24
 801912c:	0e09      	lsrs	r1, r1, #24
 801912e:	9111      	str	r1, [sp, #68]	; 0x44
 8019130:	e6ef      	b.n	8018f12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8019132:	b01b      	add	sp, #108	; 0x6c
 8019134:	ecbd 8b0a 	vpop	{d8-d12}
 8019138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801913c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019140:	b08d      	sub	sp, #52	; 0x34
 8019142:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8019146:	9103      	str	r1, [sp, #12]
 8019148:	fb07 5803 	mla	r8, r7, r3, r5
 801914c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8019150:	9803      	ldr	r0, [sp, #12]
 8019152:	2f00      	cmp	r7, #0
 8019154:	910b      	str	r1, [sp, #44]	; 0x2c
 8019156:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801915a:	9903      	ldr	r1, [sp, #12]
 801915c:	9c03      	ldr	r4, [sp, #12]
 801915e:	eb02 0608 	add.w	r6, r2, r8
 8019162:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019166:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801916a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801916e:	7809      	ldrb	r1, [r1, #0]
 8019170:	7840      	ldrb	r0, [r0, #1]
 8019172:	78a4      	ldrb	r4, [r4, #2]
 8019174:	db51      	blt.n	801921a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8019176:	45be      	cmp	lr, r7
 8019178:	dd4f      	ble.n	801921a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801917a:	2d00      	cmp	r5, #0
 801917c:	db49      	blt.n	8019212 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801917e:	42ab      	cmp	r3, r5
 8019180:	dd47      	ble.n	8019212 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8019182:	f812 2008 	ldrb.w	r2, [r2, r8]
 8019186:	9204      	str	r2, [sp, #16]
 8019188:	7872      	ldrb	r2, [r6, #1]
 801918a:	9205      	str	r2, [sp, #20]
 801918c:	78b2      	ldrb	r2, [r6, #2]
 801918e:	9206      	str	r2, [sp, #24]
 8019190:	1c6a      	adds	r2, r5, #1
 8019192:	d449      	bmi.n	8019228 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8019194:	4293      	cmp	r3, r2
 8019196:	dd47      	ble.n	8019228 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8019198:	f1bc 0f00 	cmp.w	ip, #0
 801919c:	d044      	beq.n	8019228 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801919e:	7972      	ldrb	r2, [r6, #5]
 80191a0:	f896 b003 	ldrb.w	fp, [r6, #3]
 80191a4:	f896 a004 	ldrb.w	sl, [r6, #4]
 80191a8:	9201      	str	r2, [sp, #4]
 80191aa:	3701      	adds	r7, #1
 80191ac:	d444      	bmi.n	8019238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80191ae:	45be      	cmp	lr, r7
 80191b0:	dd42      	ble.n	8019238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80191b2:	f1b9 0f00 	cmp.w	r9, #0
 80191b6:	f000 80c1 	beq.w	801933c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80191ba:	2d00      	cmp	r5, #0
 80191bc:	db38      	blt.n	8019230 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80191be:	42ab      	cmp	r3, r5
 80191c0:	dd36      	ble.n	8019230 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80191c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80191c6:	f816 8002 	ldrb.w	r8, [r6, r2]
 80191ca:	2203      	movs	r2, #3
 80191cc:	fb03 6702 	mla	r7, r3, r2, r6
 80191d0:	fb03 6202 	mla	r2, r3, r2, r6
 80191d4:	787f      	ldrb	r7, [r7, #1]
 80191d6:	f892 e002 	ldrb.w	lr, [r2, #2]
 80191da:	9702      	str	r7, [sp, #8]
 80191dc:	3501      	adds	r5, #1
 80191de:	d432      	bmi.n	8019246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80191e0:	42ab      	cmp	r3, r5
 80191e2:	dd30      	ble.n	8019246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80191e4:	f1bc 0f00 	cmp.w	ip, #0
 80191e8:	d031      	beq.n	801924e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80191ea:	2703      	movs	r7, #3
 80191ec:	fb13 7207 	smlabb	r2, r3, r7, r7
 80191f0:	5cb5      	ldrb	r5, [r6, r2]
 80191f2:	fb03 6207 	mla	r2, r3, r7, r6
 80191f6:	fb03 6307 	mla	r3, r3, r7, r6
 80191fa:	7912      	ldrb	r2, [r2, #4]
 80191fc:	795e      	ldrb	r6, [r3, #5]
 80191fe:	f1bc 0f0f 	cmp.w	ip, #15
 8019202:	d927      	bls.n	8019254 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8019204:	4b53      	ldr	r3, [pc, #332]	; (8019354 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8019206:	f240 1157 	movw	r1, #343	; 0x157
 801920a:	4a53      	ldr	r2, [pc, #332]	; (8019358 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801920c:	4853      	ldr	r0, [pc, #332]	; (801935c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801920e:	f003 f84d 	bl	801c2ac <__assert_func>
 8019212:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8019216:	9104      	str	r1, [sp, #16]
 8019218:	e7ba      	b.n	8019190 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801921a:	9401      	str	r4, [sp, #4]
 801921c:	4682      	mov	sl, r0
 801921e:	468b      	mov	fp, r1
 8019220:	9104      	str	r1, [sp, #16]
 8019222:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8019226:	e7c0      	b.n	80191aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8019228:	9401      	str	r4, [sp, #4]
 801922a:	4682      	mov	sl, r0
 801922c:	468b      	mov	fp, r1
 801922e:	e7bc      	b.n	80191aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8019230:	46a6      	mov	lr, r4
 8019232:	9002      	str	r0, [sp, #8]
 8019234:	4688      	mov	r8, r1
 8019236:	e7d1      	b.n	80191dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8019238:	4626      	mov	r6, r4
 801923a:	4602      	mov	r2, r0
 801923c:	460d      	mov	r5, r1
 801923e:	46a6      	mov	lr, r4
 8019240:	9002      	str	r0, [sp, #8]
 8019242:	4688      	mov	r8, r1
 8019244:	e7db      	b.n	80191fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8019246:	4626      	mov	r6, r4
 8019248:	4602      	mov	r2, r0
 801924a:	460d      	mov	r5, r1
 801924c:	e7d7      	b.n	80191fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801924e:	4626      	mov	r6, r4
 8019250:	4602      	mov	r2, r0
 8019252:	460d      	mov	r5, r1
 8019254:	f1b9 0f0f 	cmp.w	r9, #15
 8019258:	d8d4      	bhi.n	8019204 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801925a:	fa1f f38c 	uxth.w	r3, ip
 801925e:	fa1f fc89 	uxth.w	ip, r9
 8019262:	fb03 f70c 	mul.w	r7, r3, ip
 8019266:	011b      	lsls	r3, r3, #4
 8019268:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801926c:	9707      	str	r7, [sp, #28]
 801926e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019272:	fa1f fc8c 	uxth.w	ip, ip
 8019276:	eba7 070c 	sub.w	r7, r7, ip
 801927a:	b2bf      	uxth	r7, r7
 801927c:	9709      	str	r7, [sp, #36]	; 0x24
 801927e:	9f07      	ldr	r7, [sp, #28]
 8019280:	1bdb      	subs	r3, r3, r7
 8019282:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8019286:	b29b      	uxth	r3, r3
 8019288:	9708      	str	r7, [sp, #32]
 801928a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801928c:	930a      	str	r3, [sp, #40]	; 0x28
 801928e:	ea6f 0907 	mvn.w	r9, r7
 8019292:	fb03 fb0b 	mul.w	fp, r3, fp
 8019296:	9f04      	ldr	r7, [sp, #16]
 8019298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801929a:	fa5f f989 	uxtb.w	r9, r9
 801929e:	fb03 bb07 	mla	fp, r3, r7, fp
 80192a2:	9f07      	ldr	r7, [sp, #28]
 80192a4:	fb11 f109 	smulbb	r1, r1, r9
 80192a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80192aa:	fb0c b808 	mla	r8, ip, r8, fp
 80192ae:	fb10 f009 	smulbb	r0, r0, r9
 80192b2:	fb14 f409 	smulbb	r4, r4, r9
 80192b6:	fb07 8805 	mla	r8, r7, r5, r8
 80192ba:	9d08      	ldr	r5, [sp, #32]
 80192bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80192be:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80192c2:	fb08 1805 	mla	r8, r8, r5, r1
 80192c6:	9d05      	ldr	r5, [sp, #20]
 80192c8:	fa1f f888 	uxth.w	r8, r8
 80192cc:	f108 0101 	add.w	r1, r8, #1
 80192d0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80192d4:	9903      	ldr	r1, [sp, #12]
 80192d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80192da:	f881 8000 	strb.w	r8, [r1]
 80192de:	fb03 f10a 	mul.w	r1, r3, sl
 80192e2:	fb07 1105 	mla	r1, r7, r5, r1
 80192e6:	9d02      	ldr	r5, [sp, #8]
 80192e8:	fb0c 1105 	mla	r1, ip, r5, r1
 80192ec:	9d07      	ldr	r5, [sp, #28]
 80192ee:	fb05 1102 	mla	r1, r5, r2, r1
 80192f2:	9a08      	ldr	r2, [sp, #32]
 80192f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80192f8:	fb01 0102 	mla	r1, r1, r2, r0
 80192fc:	9a03      	ldr	r2, [sp, #12]
 80192fe:	b289      	uxth	r1, r1
 8019300:	1c48      	adds	r0, r1, #1
 8019302:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8019306:	1209      	asrs	r1, r1, #8
 8019308:	7051      	strb	r1, [r2, #1]
 801930a:	9a01      	ldr	r2, [sp, #4]
 801930c:	4353      	muls	r3, r2
 801930e:	9a06      	ldr	r2, [sp, #24]
 8019310:	fb07 3702 	mla	r7, r7, r2, r3
 8019314:	9b08      	ldr	r3, [sp, #32]
 8019316:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801931a:	fb05 c606 	mla	r6, r5, r6, ip
 801931e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019322:	fb06 4603 	mla	r6, r6, r3, r4
 8019326:	9b03      	ldr	r3, [sp, #12]
 8019328:	b2b6      	uxth	r6, r6
 801932a:	f106 0e01 	add.w	lr, r6, #1
 801932e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8019332:	1236      	asrs	r6, r6, #8
 8019334:	709e      	strb	r6, [r3, #2]
 8019336:	b00d      	add	sp, #52	; 0x34
 8019338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933c:	f1bc 0f0f 	cmp.w	ip, #15
 8019340:	f63f af60 	bhi.w	8019204 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8019344:	4626      	mov	r6, r4
 8019346:	4602      	mov	r2, r0
 8019348:	460d      	mov	r5, r1
 801934a:	46a6      	mov	lr, r4
 801934c:	9002      	str	r0, [sp, #8]
 801934e:	4688      	mov	r8, r1
 8019350:	e783      	b.n	801925a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8019352:	bf00      	nop
 8019354:	080205a7 	.word	0x080205a7
 8019358:	08020a5e 	.word	0x08020a5e
 801935c:	0802062f 	.word	0x0802062f

08019360 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019364:	ed2d 8b08 	vpush	{d8-d11}
 8019368:	b09f      	sub	sp, #124	; 0x7c
 801936a:	eeb0 aa40 	vmov.f32	s20, s0
 801936e:	eef0 9a60 	vmov.f32	s19, s1
 8019372:	920e      	str	r2, [sp, #56]	; 0x38
 8019374:	eeb0 9a41 	vmov.f32	s18, s2
 8019378:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801937a:	eeb0 8a62 	vmov.f32	s16, s5
 801937e:	9307      	str	r3, [sp, #28]
 8019380:	eef0 8a43 	vmov.f32	s17, s6
 8019384:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8019388:	eef0 ba44 	vmov.f32	s23, s8
 801938c:	901d      	str	r0, [sp, #116]	; 0x74
 801938e:	eeb0 ba64 	vmov.f32	s22, s9
 8019392:	930c      	str	r3, [sp, #48]	; 0x30
 8019394:	eef0 aa45 	vmov.f32	s21, s10
 8019398:	6850      	ldr	r0, [r2, #4]
 801939a:	910b      	str	r1, [sp, #44]	; 0x2c
 801939c:	6812      	ldr	r2, [r2, #0]
 801939e:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80193a2:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 80193a6:	fb00 1303 	mla	r3, r0, r3, r1
 80193aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80193ae:	18d3      	adds	r3, r2, r3
 80193b0:	9308      	str	r3, [sp, #32]
 80193b2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	930a      	str	r3, [sp, #40]	; 0x28
 80193b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193ba:	43db      	mvns	r3, r3
 80193bc:	b2db      	uxtb	r3, r3
 80193be:	9309      	str	r3, [sp, #36]	; 0x24
 80193c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	dc03      	bgt.n	80193ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80193c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	f340 81f5 	ble.w	80197b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80193ce:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80193d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80193d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80193d8:	1e48      	subs	r0, r1, #1
 80193da:	1e54      	subs	r4, r2, #1
 80193dc:	9b07      	ldr	r3, [sp, #28]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	f340 80d5 	ble.w	801958e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80193e4:	ea5f 452a 	movs.w	r5, sl, asr #16
 80193e8:	ea4f 4328 	mov.w	r3, r8, asr #16
 80193ec:	d406      	bmi.n	80193fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80193ee:	4285      	cmp	r5, r0
 80193f0:	da04      	bge.n	80193fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	db02      	blt.n	80193fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80193f6:	42a3      	cmp	r3, r4
 80193f8:	f2c0 80ca 	blt.w	8019590 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80193fc:	3501      	adds	r5, #1
 80193fe:	f100 80bb 	bmi.w	8019578 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019402:	42a9      	cmp	r1, r5
 8019404:	f2c0 80b8 	blt.w	8019578 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019408:	3301      	adds	r3, #1
 801940a:	f100 80b5 	bmi.w	8019578 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801940e:	429a      	cmp	r2, r3
 8019410:	f2c0 80b2 	blt.w	8019578 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019414:	9b07      	ldr	r3, [sp, #28]
 8019416:	9d08      	ldr	r5, [sp, #32]
 8019418:	930d      	str	r3, [sp, #52]	; 0x34
 801941a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801941c:	2b00      	cmp	r3, #0
 801941e:	f340 80d6 	ble.w	80195ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8019422:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8019424:	ea4f 4428 	mov.w	r4, r8, asr #16
 8019428:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801942a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801942e:	68c6      	ldr	r6, [r0, #12]
 8019430:	ea5f 402a 	movs.w	r0, sl, asr #16
 8019434:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8019438:	689b      	ldr	r3, [r3, #8]
 801943a:	f100 810f 	bmi.w	801965c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801943e:	1e5f      	subs	r7, r3, #1
 8019440:	42b8      	cmp	r0, r7
 8019442:	f280 810b 	bge.w	801965c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8019446:	2c00      	cmp	r4, #0
 8019448:	f2c0 8108 	blt.w	801965c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801944c:	1e77      	subs	r7, r6, #1
 801944e:	42bc      	cmp	r4, r7
 8019450:	f280 8104 	bge.w	801965c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8019454:	b21b      	sxth	r3, r3
 8019456:	fb04 0003 	mla	r0, r4, r3, r0
 801945a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801945c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019460:	1826      	adds	r6, r4, r0
 8019462:	5c24      	ldrb	r4, [r4, r0]
 8019464:	78b7      	ldrb	r7, [r6, #2]
 8019466:	7870      	ldrb	r0, [r6, #1]
 8019468:	970f      	str	r7, [sp, #60]	; 0x3c
 801946a:	7977      	ldrb	r7, [r6, #5]
 801946c:	f896 e003 	ldrb.w	lr, [r6, #3]
 8019470:	f896 c004 	ldrb.w	ip, [r6, #4]
 8019474:	9710      	str	r7, [sp, #64]	; 0x40
 8019476:	b1c9      	cbz	r1, 80194ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019478:	f04f 0b03 	mov.w	fp, #3
 801947c:	f06f 0904 	mvn.w	r9, #4
 8019480:	3605      	adds	r6, #5
 8019482:	fb13 930b 	smlabb	r3, r3, fp, r9
 8019486:	eb06 0b03 	add.w	fp, r6, r3
 801948a:	5cf3      	ldrb	r3, [r6, r3]
 801948c:	9311      	str	r3, [sp, #68]	; 0x44
 801948e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8019492:	9313      	str	r3, [sp, #76]	; 0x4c
 8019494:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8019498:	9315      	str	r3, [sp, #84]	; 0x54
 801949a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801949e:	9312      	str	r3, [sp, #72]	; 0x48
 80194a0:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80194a4:	9314      	str	r3, [sp, #80]	; 0x50
 80194a6:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80194aa:	9316      	str	r3, [sp, #88]	; 0x58
 80194ac:	b292      	uxth	r2, r2
 80194ae:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80194b0:	b289      	uxth	r1, r1
 80194b2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80194b6:	fb02 f601 	mul.w	r6, r2, r1
 80194ba:	0112      	lsls	r2, r2, #4
 80194bc:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80194c0:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80194c4:	1b92      	subs	r2, r2, r6
 80194c6:	b289      	uxth	r1, r1
 80194c8:	b292      	uxth	r2, r2
 80194ca:	eba9 0901 	sub.w	r9, r9, r1
 80194ce:	fb02 fe0e 	mul.w	lr, r2, lr
 80194d2:	fa1f f989 	uxth.w	r9, r9
 80194d6:	fb02 fc0c 	mul.w	ip, r2, ip
 80194da:	fb09 e404 	mla	r4, r9, r4, lr
 80194de:	f895 e000 	ldrb.w	lr, [r5]
 80194e2:	fb09 c000 	mla	r0, r9, r0, ip
 80194e6:	fb01 4407 	mla	r4, r1, r7, r4
 80194ea:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80194ec:	fb06 4407 	mla	r4, r6, r7, r4
 80194f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80194f2:	fb1e fe07 	smulbb	lr, lr, r7
 80194f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80194fa:	fb04 e403 	mla	r4, r4, r3, lr
 80194fe:	b2a4      	uxth	r4, r4
 8019500:	f104 0e01 	add.w	lr, r4, #1
 8019504:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8019508:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801950a:	fb01 0004 	mla	r0, r1, r4, r0
 801950e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019510:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019514:	fb06 0004 	mla	r0, r6, r4, r0
 8019518:	786c      	ldrb	r4, [r5, #1]
 801951a:	f885 e000 	strb.w	lr, [r5]
 801951e:	fb14 f407 	smulbb	r4, r4, r7
 8019522:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019526:	fb00 4003 	mla	r0, r0, r3, r4
 801952a:	b280      	uxth	r0, r0
 801952c:	1c44      	adds	r4, r0, #1
 801952e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8019532:	1200      	asrs	r0, r0, #8
 8019534:	7068      	strb	r0, [r5, #1]
 8019536:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019538:	4342      	muls	r2, r0
 801953a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801953c:	fb09 2200 	mla	r2, r9, r0, r2
 8019540:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019542:	fb01 2100 	mla	r1, r1, r0, r2
 8019546:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019548:	fb06 1602 	mla	r6, r6, r2, r1
 801954c:	78a9      	ldrb	r1, [r5, #2]
 801954e:	fb11 f107 	smulbb	r1, r1, r7
 8019552:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019556:	fb06 1303 	mla	r3, r6, r3, r1
 801955a:	b29b      	uxth	r3, r3
 801955c:	1c5e      	adds	r6, r3, #1
 801955e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8019562:	121b      	asrs	r3, r3, #8
 8019564:	70ab      	strb	r3, [r5, #2]
 8019566:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019568:	3503      	adds	r5, #3
 801956a:	449a      	add	sl, r3
 801956c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801956e:	4498      	add	r8, r3
 8019570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019572:	3b01      	subs	r3, #1
 8019574:	930d      	str	r3, [sp, #52]	; 0x34
 8019576:	e750      	b.n	801941a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8019578:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801957a:	449a      	add	sl, r3
 801957c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801957e:	4498      	add	r8, r3
 8019580:	9b07      	ldr	r3, [sp, #28]
 8019582:	3b01      	subs	r3, #1
 8019584:	9307      	str	r3, [sp, #28]
 8019586:	9b08      	ldr	r3, [sp, #32]
 8019588:	3303      	adds	r3, #3
 801958a:	9308      	str	r3, [sp, #32]
 801958c:	e726      	b.n	80193dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801958e:	d026      	beq.n	80195de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019590:	9b07      	ldr	r3, [sp, #28]
 8019592:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8019594:	3b01      	subs	r3, #1
 8019596:	fb00 a003 	mla	r0, r0, r3, sl
 801959a:	1400      	asrs	r0, r0, #16
 801959c:	f53f af3a 	bmi.w	8019414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195a0:	3901      	subs	r1, #1
 80195a2:	4288      	cmp	r0, r1
 80195a4:	f6bf af36 	bge.w	8019414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195a8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80195aa:	fb01 8303 	mla	r3, r1, r3, r8
 80195ae:	141b      	asrs	r3, r3, #16
 80195b0:	f53f af30 	bmi.w	8019414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195b4:	3a01      	subs	r2, #1
 80195b6:	4293      	cmp	r3, r2
 80195b8:	f6bf af2c 	bge.w	8019414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195bc:	9b08      	ldr	r3, [sp, #32]
 80195be:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80195c2:	1cdd      	adds	r5, r3, #3
 80195c4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80195c8:	f1bc 0f00 	cmp.w	ip, #0
 80195cc:	dc5f      	bgt.n	801968e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80195ce:	9b07      	ldr	r3, [sp, #28]
 80195d0:	9a08      	ldr	r2, [sp, #32]
 80195d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80195da:	441a      	add	r2, r3
 80195dc:	9208      	str	r2, [sp, #32]
 80195de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	f340 80e9 	ble.w	80197b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80195e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80195ec:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80195f0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80195f4:	eef0 6a48 	vmov.f32	s13, s16
 80195f8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80195fc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019600:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019604:	ee16 aa90 	vmov	sl, s13
 8019608:	eef0 6a68 	vmov.f32	s13, s17
 801960c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019610:	ee16 8a90 	vmov	r8, s13
 8019614:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019618:	ee69 7a27 	vmul.f32	s15, s18, s15
 801961c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019620:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019624:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019628:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801962c:	ee18 2a10 	vmov	r2, s16
 8019630:	eeb0 8a47 	vmov.f32	s16, s14
 8019634:	fb92 f3f3 	sdiv	r3, r2, r3
 8019638:	ee18 2a90 	vmov	r2, s17
 801963c:	9333      	str	r3, [sp, #204]	; 0xcc
 801963e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019640:	eef0 8a67 	vmov.f32	s17, s15
 8019644:	fb92 f3f3 	sdiv	r3, r2, r3
 8019648:	9334      	str	r3, [sp, #208]	; 0xd0
 801964a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801964c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801964e:	3b01      	subs	r3, #1
 8019650:	930b      	str	r3, [sp, #44]	; 0x2c
 8019652:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019654:	bf08      	it	eq
 8019656:	4613      	moveq	r3, r2
 8019658:	9307      	str	r3, [sp, #28]
 801965a:	e6b1      	b.n	80193c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801965c:	1c47      	adds	r7, r0, #1
 801965e:	d482      	bmi.n	8019566 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8019660:	42bb      	cmp	r3, r7
 8019662:	db80      	blt.n	8019566 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8019664:	1c67      	adds	r7, r4, #1
 8019666:	f53f af7e 	bmi.w	8019566 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801966a:	42be      	cmp	r6, r7
 801966c:	f6ff af7b 	blt.w	8019566 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8019670:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019672:	b236      	sxth	r6, r6
 8019674:	9001      	str	r0, [sp, #4]
 8019676:	b21b      	sxth	r3, r3
 8019678:	9600      	str	r6, [sp, #0]
 801967a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801967c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8019680:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8019684:	4629      	mov	r1, r5
 8019686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019688:	f7ff fd58 	bl	801913c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801968c:	e76b      	b.n	8019566 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801968e:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8019690:	ea4f 402a 	mov.w	r0, sl, asr #16
 8019694:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8019698:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801969c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80196a0:	ea4f 4128 	mov.w	r1, r8, asr #16
 80196a4:	fb07 0101 	mla	r1, r7, r1, r0
 80196a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80196aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80196ae:	1844      	adds	r4, r0, r1
 80196b0:	5c40      	ldrb	r0, [r0, r1]
 80196b2:	78a6      	ldrb	r6, [r4, #2]
 80196b4:	7861      	ldrb	r1, [r4, #1]
 80196b6:	960f      	str	r6, [sp, #60]	; 0x3c
 80196b8:	78e6      	ldrb	r6, [r4, #3]
 80196ba:	910d      	str	r1, [sp, #52]	; 0x34
 80196bc:	9610      	str	r6, [sp, #64]	; 0x40
 80196be:	f894 9004 	ldrb.w	r9, [r4, #4]
 80196c2:	f894 b005 	ldrb.w	fp, [r4, #5]
 80196c6:	b192      	cbz	r2, 80196ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80196c8:	f06f 0604 	mvn.w	r6, #4
 80196cc:	2103      	movs	r1, #3
 80196ce:	3405      	adds	r4, #5
 80196d0:	fb17 6701 	smlabb	r7, r7, r1, r6
 80196d4:	19e6      	adds	r6, r4, r7
 80196d6:	5de4      	ldrb	r4, [r4, r7]
 80196d8:	9417      	str	r4, [sp, #92]	; 0x5c
 80196da:	7874      	ldrb	r4, [r6, #1]
 80196dc:	9419      	str	r4, [sp, #100]	; 0x64
 80196de:	78b4      	ldrb	r4, [r6, #2]
 80196e0:	941b      	str	r4, [sp, #108]	; 0x6c
 80196e2:	78f4      	ldrb	r4, [r6, #3]
 80196e4:	9418      	str	r4, [sp, #96]	; 0x60
 80196e6:	7934      	ldrb	r4, [r6, #4]
 80196e8:	941a      	str	r4, [sp, #104]	; 0x68
 80196ea:	7974      	ldrb	r4, [r6, #5]
 80196ec:	941c      	str	r4, [sp, #112]	; 0x70
 80196ee:	b29b      	uxth	r3, r3
 80196f0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80196f2:	b292      	uxth	r2, r2
 80196f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80196f6:	3503      	adds	r5, #3
 80196f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80196fc:	fb03 f402 	mul.w	r4, r3, r2
 8019700:	011b      	lsls	r3, r3, #4
 8019702:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8019706:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801970a:	1b1b      	subs	r3, r3, r4
 801970c:	b292      	uxth	r2, r2
 801970e:	b29b      	uxth	r3, r3
 8019710:	1ab6      	subs	r6, r6, r2
 8019712:	435f      	muls	r7, r3
 8019714:	b2b6      	uxth	r6, r6
 8019716:	fb03 f909 	mul.w	r9, r3, r9
 801971a:	fb03 fb0b 	mul.w	fp, r3, fp
 801971e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019720:	fb06 7000 	mla	r0, r6, r0, r7
 8019724:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019726:	fb06 bb03 	mla	fp, r6, r3, fp
 801972a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801972c:	fb02 0007 	mla	r0, r2, r7, r0
 8019730:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8019732:	fb02 bb03 	mla	fp, r2, r3, fp
 8019736:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019738:	fb04 0007 	mla	r0, r4, r7, r0
 801973c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8019740:	fb17 f701 	smulbb	r7, r7, r1
 8019744:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019748:	990d      	ldr	r1, [sp, #52]	; 0x34
 801974a:	fb00 700e 	mla	r0, r0, lr, r7
 801974e:	fb06 9101 	mla	r1, r6, r1, r9
 8019752:	b280      	uxth	r0, r0
 8019754:	1c47      	adds	r7, r0, #1
 8019756:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801975a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801975c:	1200      	asrs	r0, r0, #8
 801975e:	f805 0c06 	strb.w	r0, [r5, #-6]
 8019762:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019764:	fb02 1100 	mla	r1, r2, r0, r1
 8019768:	981a      	ldr	r0, [sp, #104]	; 0x68
 801976a:	fb04 1100 	mla	r1, r4, r0, r1
 801976e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8019772:	fb04 b403 	mla	r4, r4, r3, fp
 8019776:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801977a:	fb10 f007 	smulbb	r0, r0, r7
 801977e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019782:	fb13 f307 	smulbb	r3, r3, r7
 8019786:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801978a:	fb01 010e 	mla	r1, r1, lr, r0
 801978e:	fb04 340e 	mla	r4, r4, lr, r3
 8019792:	b289      	uxth	r1, r1
 8019794:	b2a4      	uxth	r4, r4
 8019796:	1c48      	adds	r0, r1, #1
 8019798:	1c63      	adds	r3, r4, #1
 801979a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801979e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80197a2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80197a4:	1209      	asrs	r1, r1, #8
 80197a6:	1224      	asrs	r4, r4, #8
 80197a8:	449a      	add	sl, r3
 80197aa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80197ac:	f805 1c05 	strb.w	r1, [r5, #-5]
 80197b0:	f805 4c04 	strb.w	r4, [r5, #-4]
 80197b4:	4498      	add	r8, r3
 80197b6:	e707      	b.n	80195c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80197b8:	b01f      	add	sp, #124	; 0x7c
 80197ba:	ecbd 8b08 	vpop	{d8-d11}
 80197be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080197c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80197c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c8:	b085      	sub	sp, #20
 80197ca:	784d      	ldrb	r5, [r1, #1]
 80197cc:	788e      	ldrb	r6, [r1, #2]
 80197ce:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80197d2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80197d6:	9403      	str	r4, [sp, #12]
 80197d8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80197dc:	780c      	ldrb	r4, [r1, #0]
 80197de:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80197e2:	fb07 ce03 	mla	lr, r7, r3, ip
 80197e6:	2f00      	cmp	r7, #0
 80197e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80197ec:	eb02 0b0e 	add.w	fp, r2, lr
 80197f0:	db56      	blt.n	80198a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80197f2:	45b9      	cmp	r9, r7
 80197f4:	dd54      	ble.n	80198a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80197f6:	f1bc 0f00 	cmp.w	ip, #0
 80197fa:	db4d      	blt.n	8019898 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80197fc:	4563      	cmp	r3, ip
 80197fe:	dd4b      	ble.n	8019898 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8019800:	f812 200e 	ldrb.w	r2, [r2, lr]
 8019804:	9200      	str	r2, [sp, #0]
 8019806:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801980a:	9201      	str	r2, [sp, #4]
 801980c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8019810:	9202      	str	r2, [sp, #8]
 8019812:	f11c 0201 	adds.w	r2, ip, #1
 8019816:	d44a      	bmi.n	80198ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8019818:	4293      	cmp	r3, r2
 801981a:	dd48      	ble.n	80198ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801981c:	2800      	cmp	r0, #0
 801981e:	d046      	beq.n	80198ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8019820:	f89b e003 	ldrb.w	lr, [fp, #3]
 8019824:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8019828:	f89b a005 	ldrb.w	sl, [fp, #5]
 801982c:	3701      	adds	r7, #1
 801982e:	d446      	bmi.n	80198be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8019830:	45b9      	cmp	r9, r7
 8019832:	dd44      	ble.n	80198be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8019834:	9a03      	ldr	r2, [sp, #12]
 8019836:	2a00      	cmp	r2, #0
 8019838:	d045      	beq.n	80198c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801983a:	f1bc 0f00 	cmp.w	ip, #0
 801983e:	db3a      	blt.n	80198b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8019840:	4563      	cmp	r3, ip
 8019842:	dd38      	ble.n	80198b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8019844:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019848:	f04f 0903 	mov.w	r9, #3
 801984c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8019850:	fb03 b209 	mla	r2, r3, r9, fp
 8019854:	fb03 b909 	mla	r9, r3, r9, fp
 8019858:	7852      	ldrb	r2, [r2, #1]
 801985a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801985e:	f11c 0c01 	adds.w	ip, ip, #1
 8019862:	d40d      	bmi.n	8019880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019864:	4563      	cmp	r3, ip
 8019866:	dd0b      	ble.n	8019880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019868:	b160      	cbz	r0, 8019884 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801986a:	2603      	movs	r6, #3
 801986c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8019870:	fb03 b506 	mla	r5, r3, r6, fp
 8019874:	fb03 b306 	mla	r3, r3, r6, fp
 8019878:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801987c:	792d      	ldrb	r5, [r5, #4]
 801987e:	795e      	ldrb	r6, [r3, #5]
 8019880:	280f      	cmp	r0, #15
 8019882:	d802      	bhi.n	801988a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8019884:	9b03      	ldr	r3, [sp, #12]
 8019886:	2b0f      	cmp	r3, #15
 8019888:	d922      	bls.n	80198d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801988a:	4b2f      	ldr	r3, [pc, #188]	; (8019948 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801988c:	f240 1157 	movw	r1, #343	; 0x157
 8019890:	4a2e      	ldr	r2, [pc, #184]	; (801994c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8019892:	482f      	ldr	r0, [pc, #188]	; (8019950 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8019894:	f002 fd0a 	bl	801c2ac <__assert_func>
 8019898:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801989c:	9400      	str	r4, [sp, #0]
 801989e:	e7b8      	b.n	8019812 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80198a0:	46b2      	mov	sl, r6
 80198a2:	46a8      	mov	r8, r5
 80198a4:	46a6      	mov	lr, r4
 80198a6:	9400      	str	r4, [sp, #0]
 80198a8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80198ac:	e7be      	b.n	801982c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80198ae:	46b2      	mov	sl, r6
 80198b0:	46a8      	mov	r8, r5
 80198b2:	46a6      	mov	lr, r4
 80198b4:	e7ba      	b.n	801982c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80198b6:	46b1      	mov	r9, r6
 80198b8:	462a      	mov	r2, r5
 80198ba:	4627      	mov	r7, r4
 80198bc:	e7cf      	b.n	801985e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80198be:	46b1      	mov	r9, r6
 80198c0:	462a      	mov	r2, r5
 80198c2:	4627      	mov	r7, r4
 80198c4:	e7dc      	b.n	8019880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80198c6:	280f      	cmp	r0, #15
 80198c8:	d8df      	bhi.n	801988a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80198ca:	46b1      	mov	r9, r6
 80198cc:	462a      	mov	r2, r5
 80198ce:	4627      	mov	r7, r4
 80198d0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80198d4:	b280      	uxth	r0, r0
 80198d6:	fb00 f30b 	mul.w	r3, r0, fp
 80198da:	0100      	lsls	r0, r0, #4
 80198dc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80198e0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80198e4:	1ac0      	subs	r0, r0, r3
 80198e6:	fa1f fb8b 	uxth.w	fp, fp
 80198ea:	b280      	uxth	r0, r0
 80198ec:	ebac 0c0b 	sub.w	ip, ip, fp
 80198f0:	9003      	str	r0, [sp, #12]
 80198f2:	fa1f fc8c 	uxth.w	ip, ip
 80198f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80198fa:	9800      	ldr	r0, [sp, #0]
 80198fc:	fb0c ee00 	mla	lr, ip, r0, lr
 8019900:	9803      	ldr	r0, [sp, #12]
 8019902:	fb00 f808 	mul.w	r8, r0, r8
 8019906:	9801      	ldr	r0, [sp, #4]
 8019908:	fb0b ee07 	mla	lr, fp, r7, lr
 801990c:	fb0c 8800 	mla	r8, ip, r0, r8
 8019910:	fb03 ee04 	mla	lr, r3, r4, lr
 8019914:	fb0b 8202 	mla	r2, fp, r2, r8
 8019918:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801991c:	fb03 2505 	mla	r5, r3, r5, r2
 8019920:	9a03      	ldr	r2, [sp, #12]
 8019922:	f881 e000 	strb.w	lr, [r1]
 8019926:	fb02 f00a 	mul.w	r0, r2, sl
 801992a:	9a02      	ldr	r2, [sp, #8]
 801992c:	122d      	asrs	r5, r5, #8
 801992e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8019932:	704d      	strb	r5, [r1, #1]
 8019934:	fb0b c909 	mla	r9, fp, r9, ip
 8019938:	fb03 9606 	mla	r6, r3, r6, r9
 801993c:	1236      	asrs	r6, r6, #8
 801993e:	708e      	strb	r6, [r1, #2]
 8019940:	b005      	add	sp, #20
 8019942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019946:	bf00      	nop
 8019948:	080205a7 	.word	0x080205a7
 801994c:	08020a5e 	.word	0x08020a5e
 8019950:	0802062f 	.word	0x0802062f

08019954 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019958:	ed2d 8b08 	vpush	{d8-d11}
 801995c:	b09b      	sub	sp, #108	; 0x6c
 801995e:	eeb0 aa40 	vmov.f32	s20, s0
 8019962:	eef0 9a60 	vmov.f32	s19, s1
 8019966:	920b      	str	r2, [sp, #44]	; 0x2c
 8019968:	eeb0 9a41 	vmov.f32	s18, s2
 801996c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801996e:	eeb0 8a62 	vmov.f32	s16, s5
 8019972:	9019      	str	r0, [sp, #100]	; 0x64
 8019974:	eef0 8a43 	vmov.f32	s17, s6
 8019978:	6850      	ldr	r0, [r2, #4]
 801997a:	eef0 ba44 	vmov.f32	s23, s8
 801997e:	9109      	str	r1, [sp, #36]	; 0x24
 8019980:	eeb0 ba64 	vmov.f32	s22, s9
 8019984:	9306      	str	r3, [sp, #24]
 8019986:	eef0 aa45 	vmov.f32	s21, s10
 801998a:	6812      	ldr	r2, [r2, #0]
 801998c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8019990:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8019994:	fb00 1303 	mla	r3, r0, r3, r1
 8019998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801999c:	18d3      	adds	r3, r2, r3
 801999e:	9307      	str	r3, [sp, #28]
 80199a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	9308      	str	r3, [sp, #32]
 80199a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	dc03      	bgt.n	80199b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80199ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	f340 81ab 	ble.w	8019d0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80199b4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80199b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80199ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80199be:	1e48      	subs	r0, r1, #1
 80199c0:	1e55      	subs	r5, r2, #1
 80199c2:	9b06      	ldr	r3, [sp, #24]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	f340 80b1 	ble.w	8019b2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80199ca:	ea5f 462b 	movs.w	r6, fp, asr #16
 80199ce:	ea4f 4324 	mov.w	r3, r4, asr #16
 80199d2:	d406      	bmi.n	80199e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80199d4:	4286      	cmp	r6, r0
 80199d6:	da04      	bge.n	80199e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80199d8:	2b00      	cmp	r3, #0
 80199da:	db02      	blt.n	80199e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80199dc:	42ab      	cmp	r3, r5
 80199de:	f2c0 80a6 	blt.w	8019b2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80199e2:	3601      	adds	r6, #1
 80199e4:	f100 8097 	bmi.w	8019b16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80199e8:	42b1      	cmp	r1, r6
 80199ea:	f2c0 8094 	blt.w	8019b16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80199ee:	3301      	adds	r3, #1
 80199f0:	f100 8091 	bmi.w	8019b16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80199f4:	429a      	cmp	r2, r3
 80199f6:	f2c0 808e 	blt.w	8019b16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80199fa:	9b06      	ldr	r3, [sp, #24]
 80199fc:	9e07      	ldr	r6, [sp, #28]
 80199fe:	930a      	str	r3, [sp, #40]	; 0x28
 8019a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	f340 80b0 	ble.w	8019b68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019a08:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8019a0a:	1425      	asrs	r5, r4, #16
 8019a0c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019a0e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8019a12:	68c7      	ldr	r7, [r0, #12]
 8019a14:	ea5f 402b 	movs.w	r0, fp, asr #16
 8019a18:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019a1c:	689b      	ldr	r3, [r3, #8]
 8019a1e:	f100 80ea 	bmi.w	8019bf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a22:	f103 3cff 	add.w	ip, r3, #4294967295
 8019a26:	4560      	cmp	r0, ip
 8019a28:	f280 80e5 	bge.w	8019bf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a2c:	2d00      	cmp	r5, #0
 8019a2e:	f2c0 80e2 	blt.w	8019bf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a32:	f107 3cff 	add.w	ip, r7, #4294967295
 8019a36:	4565      	cmp	r5, ip
 8019a38:	f280 80dd 	bge.w	8019bf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a3c:	b21b      	sxth	r3, r3
 8019a3e:	fb05 0003 	mla	r0, r5, r3, r0
 8019a42:	9d08      	ldr	r5, [sp, #32]
 8019a44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019a48:	182f      	adds	r7, r5, r0
 8019a4a:	5c2d      	ldrb	r5, [r5, r0]
 8019a4c:	7878      	ldrb	r0, [r7, #1]
 8019a4e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019a52:	900c      	str	r0, [sp, #48]	; 0x30
 8019a54:	f897 9003 	ldrb.w	r9, [r7, #3]
 8019a58:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019a5c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019a60:	b1c9      	cbz	r1, 8019a96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019a62:	f04f 0c03 	mov.w	ip, #3
 8019a66:	f06f 0004 	mvn.w	r0, #4
 8019a6a:	3705      	adds	r7, #5
 8019a6c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019a70:	eb07 0c03 	add.w	ip, r7, r3
 8019a74:	5cfb      	ldrb	r3, [r7, r3]
 8019a76:	930d      	str	r3, [sp, #52]	; 0x34
 8019a78:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a7e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019a82:	9311      	str	r3, [sp, #68]	; 0x44
 8019a84:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8019a88:	930e      	str	r3, [sp, #56]	; 0x38
 8019a8a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8019a8e:	9310      	str	r3, [sp, #64]	; 0x40
 8019a90:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8019a94:	9312      	str	r3, [sp, #72]	; 0x48
 8019a96:	b292      	uxth	r2, r2
 8019a98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019a9a:	b289      	uxth	r1, r1
 8019a9c:	fb02 f301 	mul.w	r3, r2, r1
 8019aa0:	0112      	lsls	r2, r2, #4
 8019aa2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8019aa6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8019aaa:	1ad2      	subs	r2, r2, r3
 8019aac:	b289      	uxth	r1, r1
 8019aae:	b292      	uxth	r2, r2
 8019ab0:	1a7f      	subs	r7, r7, r1
 8019ab2:	fb02 f909 	mul.w	r9, r2, r9
 8019ab6:	b2bf      	uxth	r7, r7
 8019ab8:	fb02 f808 	mul.w	r8, r2, r8
 8019abc:	fb02 fa0a 	mul.w	sl, r2, sl
 8019ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019ac2:	fb07 9905 	mla	r9, r7, r5, r9
 8019ac6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019ac8:	fb07 8800 	mla	r8, r7, r0, r8
 8019acc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019ace:	fb07 aa0e 	mla	sl, r7, lr, sl
 8019ad2:	fb01 9905 	mla	r9, r1, r5, r9
 8019ad6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019ad8:	fb01 8800 	mla	r8, r1, r0, r8
 8019adc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019ade:	fb01 a102 	mla	r1, r1, r2, sl
 8019ae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ae4:	fb03 9905 	mla	r9, r3, r5, r9
 8019ae8:	fb03 8800 	mla	r8, r3, r0, r8
 8019aec:	fb03 1302 	mla	r3, r3, r2, r1
 8019af0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019af4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019af8:	121b      	asrs	r3, r3, #8
 8019afa:	f886 9000 	strb.w	r9, [r6]
 8019afe:	f886 8001 	strb.w	r8, [r6, #1]
 8019b02:	70b3      	strb	r3, [r6, #2]
 8019b04:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019b06:	3603      	adds	r6, #3
 8019b08:	449b      	add	fp, r3
 8019b0a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019b0c:	441c      	add	r4, r3
 8019b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b10:	3b01      	subs	r3, #1
 8019b12:	930a      	str	r3, [sp, #40]	; 0x28
 8019b14:	e774      	b.n	8019a00 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8019b16:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019b18:	449b      	add	fp, r3
 8019b1a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019b1c:	441c      	add	r4, r3
 8019b1e:	9b06      	ldr	r3, [sp, #24]
 8019b20:	3b01      	subs	r3, #1
 8019b22:	9306      	str	r3, [sp, #24]
 8019b24:	9b07      	ldr	r3, [sp, #28]
 8019b26:	3303      	adds	r3, #3
 8019b28:	9307      	str	r3, [sp, #28]
 8019b2a:	e74a      	b.n	80199c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019b2c:	d024      	beq.n	8019b78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8019b2e:	9b06      	ldr	r3, [sp, #24]
 8019b30:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8019b32:	3b01      	subs	r3, #1
 8019b34:	fb00 b003 	mla	r0, r0, r3, fp
 8019b38:	1400      	asrs	r0, r0, #16
 8019b3a:	f53f af5e 	bmi.w	80199fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b3e:	3901      	subs	r1, #1
 8019b40:	4288      	cmp	r0, r1
 8019b42:	f6bf af5a 	bge.w	80199fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b46:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8019b48:	fb01 4303 	mla	r3, r1, r3, r4
 8019b4c:	141b      	asrs	r3, r3, #16
 8019b4e:	f53f af54 	bmi.w	80199fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b52:	3a01      	subs	r2, #1
 8019b54:	4293      	cmp	r3, r2
 8019b56:	f6bf af50 	bge.w	80199fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b5a:	9b07      	ldr	r3, [sp, #28]
 8019b5c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019b60:	1cde      	adds	r6, r3, #3
 8019b62:	f1be 0f00 	cmp.w	lr, #0
 8019b66:	dc5f      	bgt.n	8019c28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8019b68:	9b06      	ldr	r3, [sp, #24]
 8019b6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019b6e:	9b07      	ldr	r3, [sp, #28]
 8019b70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019b74:	4423      	add	r3, r4
 8019b76:	9307      	str	r3, [sp, #28]
 8019b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	f340 80c5 	ble.w	8019d0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8019b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019b86:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019b8a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019b8e:	eef0 6a48 	vmov.f32	s13, s16
 8019b92:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019b96:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019b9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b9e:	ee16 ba90 	vmov	fp, s13
 8019ba2:	eef0 6a68 	vmov.f32	s13, s17
 8019ba6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019baa:	ee16 4a90 	vmov	r4, s13
 8019bae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019bb2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019bb6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019bba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019bbe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019bc2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019bc6:	ee18 2a10 	vmov	r2, s16
 8019bca:	eeb0 8a47 	vmov.f32	s16, s14
 8019bce:	fb92 f3f3 	sdiv	r3, r2, r3
 8019bd2:	ee18 2a90 	vmov	r2, s17
 8019bd6:	932f      	str	r3, [sp, #188]	; 0xbc
 8019bd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019bda:	eef0 8a67 	vmov.f32	s17, s15
 8019bde:	fb92 f3f3 	sdiv	r3, r2, r3
 8019be2:	9330      	str	r3, [sp, #192]	; 0xc0
 8019be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019be8:	3b01      	subs	r3, #1
 8019bea:	9309      	str	r3, [sp, #36]	; 0x24
 8019bec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019bee:	bf08      	it	eq
 8019bf0:	4613      	moveq	r3, r2
 8019bf2:	9306      	str	r3, [sp, #24]
 8019bf4:	e6d7      	b.n	80199a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019bf6:	f110 0c01 	adds.w	ip, r0, #1
 8019bfa:	d483      	bmi.n	8019b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019bfc:	4563      	cmp	r3, ip
 8019bfe:	db81      	blt.n	8019b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c00:	f115 0c01 	adds.w	ip, r5, #1
 8019c04:	f53f af7e 	bmi.w	8019b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c08:	4567      	cmp	r7, ip
 8019c0a:	f6ff af7b 	blt.w	8019b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c0e:	b23f      	sxth	r7, r7
 8019c10:	b21b      	sxth	r3, r3
 8019c12:	9700      	str	r7, [sp, #0]
 8019c14:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8019c18:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8019c1c:	9a08      	ldr	r2, [sp, #32]
 8019c1e:	4631      	mov	r1, r6
 8019c20:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019c22:	f7ff fdcf 	bl	80197c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8019c26:	e76d      	b.n	8019b04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c28:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8019c2a:	ea4f 402b 	mov.w	r0, fp, asr #16
 8019c2e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019c32:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8019c36:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8019c3a:	1421      	asrs	r1, r4, #16
 8019c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8019c3e:	fb0c 0101 	mla	r1, ip, r1, r0
 8019c42:	9808      	ldr	r0, [sp, #32]
 8019c44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019c48:	1845      	adds	r5, r0, r1
 8019c4a:	5c40      	ldrb	r0, [r0, r1]
 8019c4c:	796f      	ldrb	r7, [r5, #5]
 8019c4e:	7869      	ldrb	r1, [r5, #1]
 8019c50:	f895 8002 	ldrb.w	r8, [r5, #2]
 8019c54:	f895 a003 	ldrb.w	sl, [r5, #3]
 8019c58:	f895 9004 	ldrb.w	r9, [r5, #4]
 8019c5c:	970c      	str	r7, [sp, #48]	; 0x30
 8019c5e:	b1a2      	cbz	r2, 8019c8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8019c60:	2703      	movs	r7, #3
 8019c62:	f06f 0304 	mvn.w	r3, #4
 8019c66:	3505      	adds	r5, #5
 8019c68:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8019c6c:	eb05 070c 	add.w	r7, r5, ip
 8019c70:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019c74:	9513      	str	r5, [sp, #76]	; 0x4c
 8019c76:	787d      	ldrb	r5, [r7, #1]
 8019c78:	9515      	str	r5, [sp, #84]	; 0x54
 8019c7a:	78bd      	ldrb	r5, [r7, #2]
 8019c7c:	9517      	str	r5, [sp, #92]	; 0x5c
 8019c7e:	78fd      	ldrb	r5, [r7, #3]
 8019c80:	9514      	str	r5, [sp, #80]	; 0x50
 8019c82:	793d      	ldrb	r5, [r7, #4]
 8019c84:	9516      	str	r5, [sp, #88]	; 0x58
 8019c86:	797d      	ldrb	r5, [r7, #5]
 8019c88:	9518      	str	r5, [sp, #96]	; 0x60
 8019c8a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019c8e:	b292      	uxth	r2, r2
 8019c90:	3603      	adds	r6, #3
 8019c92:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019c96:	fb03 f502 	mul.w	r5, r3, r2
 8019c9a:	011b      	lsls	r3, r3, #4
 8019c9c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8019ca0:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019ca4:	1b5b      	subs	r3, r3, r5
 8019ca6:	b292      	uxth	r2, r2
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	1abf      	subs	r7, r7, r2
 8019cac:	fb03 f909 	mul.w	r9, r3, r9
 8019cb0:	b2bf      	uxth	r7, r7
 8019cb2:	fb03 fa0a 	mul.w	sl, r3, sl
 8019cb6:	fb07 9901 	mla	r9, r7, r1, r9
 8019cba:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019cbc:	fb07 aa00 	mla	sl, r7, r0, sl
 8019cc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019cc2:	fb02 9901 	mla	r9, r2, r1, r9
 8019cc6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019cc8:	fb02 aa00 	mla	sl, r2, r0, sl
 8019ccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019cce:	fb05 9901 	mla	r9, r5, r1, r9
 8019cd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019cd4:	fb05 aa00 	mla	sl, r5, r0, sl
 8019cd8:	434b      	muls	r3, r1
 8019cda:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019cdc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019ce0:	fb07 3308 	mla	r3, r7, r8, r3
 8019ce4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019ce8:	f806 ac06 	strb.w	sl, [r6, #-6]
 8019cec:	fb02 3201 	mla	r2, r2, r1, r3
 8019cf0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019cf2:	f806 9c05 	strb.w	r9, [r6, #-5]
 8019cf6:	fb05 2503 	mla	r5, r5, r3, r2
 8019cfa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019cfc:	122d      	asrs	r5, r5, #8
 8019cfe:	449b      	add	fp, r3
 8019d00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019d02:	f806 5c04 	strb.w	r5, [r6, #-4]
 8019d06:	441c      	add	r4, r3
 8019d08:	e72b      	b.n	8019b62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019d0a:	b01b      	add	sp, #108	; 0x6c
 8019d0c:	ecbd 8b08 	vpop	{d8-d11}
 8019d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8019d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d18:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8019d1c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019d20:	fb04 5603 	mla	r6, r4, r3, r5
 8019d24:	2c00      	cmp	r4, #0
 8019d26:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8019d2a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019d2e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8019d32:	db36      	blt.n	8019da2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8019d34:	45a6      	cmp	lr, r4
 8019d36:	dd34      	ble.n	8019da2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8019d38:	2d00      	cmp	r5, #0
 8019d3a:	db30      	blt.n	8019d9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019d3c:	42ab      	cmp	r3, r5
 8019d3e:	dd2e      	ble.n	8019d9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019d40:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8019d44:	1c6e      	adds	r6, r5, #1
 8019d46:	d42f      	bmi.n	8019da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8019d48:	42b3      	cmp	r3, r6
 8019d4a:	dd2d      	ble.n	8019da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8019d4c:	b370      	cbz	r0, 8019dac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8019d4e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019d52:	3401      	adds	r4, #1
 8019d54:	d42e      	bmi.n	8019db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8019d56:	45a6      	cmp	lr, r4
 8019d58:	dd2c      	ble.n	8019db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8019d5a:	b377      	cbz	r7, 8019dba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8019d5c:	2d00      	cmp	r5, #0
 8019d5e:	db27      	blt.n	8019db0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019d60:	42ab      	cmp	r3, r5
 8019d62:	dd25      	ble.n	8019db0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019d64:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8019d68:	3501      	adds	r5, #1
 8019d6a:	d429      	bmi.n	8019dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019d6c:	42ab      	cmp	r3, r5
 8019d6e:	dd27      	ble.n	8019dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019d70:	b340      	cbz	r0, 8019dc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8019d72:	3301      	adds	r3, #1
 8019d74:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8019d78:	280f      	cmp	r0, #15
 8019d7a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019d7e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019d82:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8019d86:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8019d8a:	d801      	bhi.n	8019d90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8019d8c:	2f0f      	cmp	r7, #15
 8019d8e:	d91b      	bls.n	8019dc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8019d90:	4b89      	ldr	r3, [pc, #548]	; (8019fb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8019d92:	f240 1157 	movw	r1, #343	; 0x157
 8019d96:	4a89      	ldr	r2, [pc, #548]	; (8019fbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8019d98:	4889      	ldr	r0, [pc, #548]	; (8019fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8019d9a:	f002 fa87 	bl	801c2ac <__assert_func>
 8019d9e:	2200      	movs	r2, #0
 8019da0:	e7d0      	b.n	8019d44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8019da2:	2600      	movs	r6, #0
 8019da4:	4632      	mov	r2, r6
 8019da6:	e7d4      	b.n	8019d52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019da8:	2600      	movs	r6, #0
 8019daa:	e7d2      	b.n	8019d52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019dac:	4606      	mov	r6, r0
 8019dae:	e7d0      	b.n	8019d52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019db0:	2400      	movs	r4, #0
 8019db2:	e7d9      	b.n	8019d68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8019db4:	2300      	movs	r3, #0
 8019db6:	461c      	mov	r4, r3
 8019db8:	e7de      	b.n	8019d78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019dba:	463b      	mov	r3, r7
 8019dbc:	463c      	mov	r4, r7
 8019dbe:	e7db      	b.n	8019d78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	e7d9      	b.n	8019d78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019dc4:	4603      	mov	r3, r0
 8019dc6:	e7d7      	b.n	8019d78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019dc8:	b280      	uxth	r0, r0
 8019dca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019dce:	b2bf      	uxth	r7, r7
 8019dd0:	fb00 fe07 	mul.w	lr, r0, r7
 8019dd4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019dd8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8019ddc:	eba0 0c0e 	sub.w	ip, r0, lr
 8019de0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8019de4:	b2bf      	uxth	r7, r7
 8019de6:	fa1f fc8c 	uxth.w	ip, ip
 8019dea:	eba5 0507 	sub.w	r5, r5, r7
 8019dee:	fb0c f00a 	mul.w	r0, ip, sl
 8019df2:	b2ad      	uxth	r5, r5
 8019df4:	fb05 000b 	mla	r0, r5, fp, r0
 8019df8:	fb07 0009 	mla	r0, r7, r9, r0
 8019dfc:	fb0e 0008 	mla	r0, lr, r8, r0
 8019e00:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019e04:	9001      	str	r0, [sp, #4]
 8019e06:	d018      	beq.n	8019e3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8019e08:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8019e0c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019e10:	fb0b f000 	mul.w	r0, fp, r0
 8019e14:	fb0b fb02 	mul.w	fp, fp, r2
 8019e18:	0a02      	lsrs	r2, r0, #8
 8019e1a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019e1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019e22:	4402      	add	r2, r0
 8019e24:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8019e28:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019e2c:	0a12      	lsrs	r2, r2, #8
 8019e2e:	0a00      	lsrs	r0, r0, #8
 8019e30:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019e34:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019e38:	4302      	orrs	r2, r0
 8019e3a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019e3e:	d01a      	beq.n	8019e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8019e40:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019e44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019e48:	fb0a f000 	mul.w	r0, sl, r0
 8019e4c:	fb0a fa06 	mul.w	sl, sl, r6
 8019e50:	0a06      	lsrs	r6, r0, #8
 8019e52:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019e56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019e5a:	4406      	add	r6, r0
 8019e5c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019e60:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019e64:	0a36      	lsrs	r6, r6, #8
 8019e66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019e6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019e72:	ea46 060a 	orr.w	r6, r6, sl
 8019e76:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019e7a:	d01b      	beq.n	8019eb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8019e7c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019e80:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019e84:	fb09 fa0a 	mul.w	sl, r9, sl
 8019e88:	fb09 f004 	mul.w	r0, r9, r4
 8019e8c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019e90:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019e94:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8019e98:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019e9c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019ea0:	4454      	add	r4, sl
 8019ea2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019ea6:	0a24      	lsrs	r4, r4, #8
 8019ea8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019eac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019eb0:	ea44 0409 	orr.w	r4, r4, r9
 8019eb4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019eb8:	d01b      	beq.n	8019ef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8019eba:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8019ebe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019ec2:	fb08 f909 	mul.w	r9, r8, r9
 8019ec6:	fb08 f003 	mul.w	r0, r8, r3
 8019eca:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019ece:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8019ed2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8019ed6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019eda:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8019ede:	444b      	add	r3, r9
 8019ee0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019ee4:	0a1b      	lsrs	r3, r3, #8
 8019ee6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019eea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019eee:	ea43 0308 	orr.w	r3, r3, r8
 8019ef2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019ef6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019efa:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8019efe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019f02:	fb0c f000 	mul.w	r0, ip, r0
 8019f06:	fb0c f606 	mul.w	r6, ip, r6
 8019f0a:	fb05 0808 	mla	r8, r5, r8, r0
 8019f0e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8019f12:	fb05 6502 	mla	r5, r5, r2, r6
 8019f16:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019f1a:	fb07 8800 	mla	r8, r7, r0, r8
 8019f1e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8019f22:	fb07 5704 	mla	r7, r7, r4, r5
 8019f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f2a:	fb0e 8000 	mla	r0, lr, r0, r8
 8019f2e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8019f32:	9b01      	ldr	r3, [sp, #4]
 8019f34:	0a00      	lsrs	r0, r0, #8
 8019f36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019f3a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019f3e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019f42:	ea40 0e0e 	orr.w	lr, r0, lr
 8019f46:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8019f4a:	b280      	uxth	r0, r0
 8019f4c:	fa5f f48e 	uxtb.w	r4, lr
 8019f50:	4343      	muls	r3, r0
 8019f52:	fb14 f400 	smulbb	r4, r4, r0
 8019f56:	1c5a      	adds	r2, r3, #1
 8019f58:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019f5c:	780b      	ldrb	r3, [r1, #0]
 8019f5e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019f62:	b2d2      	uxtb	r2, r2
 8019f64:	fb03 4302 	mla	r3, r3, r2, r4
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	1c5c      	adds	r4, r3, #1
 8019f6c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019f70:	784c      	ldrb	r4, [r1, #1]
 8019f72:	fb14 f402 	smulbb	r4, r4, r2
 8019f76:	121b      	asrs	r3, r3, #8
 8019f78:	700b      	strb	r3, [r1, #0]
 8019f7a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8019f7e:	fb03 4300 	mla	r3, r3, r0, r4
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	1c5c      	adds	r4, r3, #1
 8019f86:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019f8a:	121b      	asrs	r3, r3, #8
 8019f8c:	704b      	strb	r3, [r1, #1]
 8019f8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8019f92:	f891 e002 	ldrb.w	lr, [r1, #2]
 8019f96:	fb1e fe02 	smulbb	lr, lr, r2
 8019f9a:	fb03 ee00 	mla	lr, r3, r0, lr
 8019f9e:	fa1f fe8e 	uxth.w	lr, lr
 8019fa2:	f10e 0301 	add.w	r3, lr, #1
 8019fa6:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8019faa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019fae:	f881 e002 	strb.w	lr, [r1, #2]
 8019fb2:	b003      	add	sp, #12
 8019fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb8:	080205a7 	.word	0x080205a7
 8019fbc:	08020a5e 	.word	0x08020a5e
 8019fc0:	0802062f 	.word	0x0802062f

08019fc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fc8:	ed2d 8b08 	vpush	{d8-d11}
 8019fcc:	b09d      	sub	sp, #116	; 0x74
 8019fce:	eeb0 aa40 	vmov.f32	s20, s0
 8019fd2:	eef0 9a60 	vmov.f32	s19, s1
 8019fd6:	9219      	str	r2, [sp, #100]	; 0x64
 8019fd8:	eeb0 9a41 	vmov.f32	s18, s2
 8019fdc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8019fde:	eeb0 8a62 	vmov.f32	s16, s5
 8019fe2:	9307      	str	r3, [sp, #28]
 8019fe4:	eef0 8a43 	vmov.f32	s17, s6
 8019fe8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8019fec:	eef0 ba44 	vmov.f32	s23, s8
 8019ff0:	901b      	str	r0, [sp, #108]	; 0x6c
 8019ff2:	eeb0 ba64 	vmov.f32	s22, s9
 8019ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8019ff8:	eef0 aa45 	vmov.f32	s21, s10
 8019ffc:	6850      	ldr	r0, [r2, #4]
 8019ffe:	9117      	str	r1, [sp, #92]	; 0x5c
 801a000:	6812      	ldr	r2, [r2, #0]
 801a002:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801a006:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801a00a:	fb00 1303 	mla	r3, r0, r3, r1
 801a00e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a012:	18d3      	adds	r3, r2, r3
 801a014:	930a      	str	r3, [sp, #40]	; 0x28
 801a016:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	9310      	str	r3, [sp, #64]	; 0x40
 801a01c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801a020:	930b      	str	r3, [sp, #44]	; 0x2c
 801a022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a024:	2b00      	cmp	r3, #0
 801a026:	dc03      	bgt.n	801a030 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	f340 8368 	ble.w	801a700 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801a030:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a032:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a036:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a03a:	1e48      	subs	r0, r1, #1
 801a03c:	1e57      	subs	r7, r2, #1
 801a03e:	9b07      	ldr	r3, [sp, #28]
 801a040:	2b00      	cmp	r3, #0
 801a042:	f340 8187 	ble.w	801a354 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801a046:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a04a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a04e:	d406      	bmi.n	801a05e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a050:	4584      	cmp	ip, r0
 801a052:	da04      	bge.n	801a05e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a054:	2b00      	cmp	r3, #0
 801a056:	db02      	blt.n	801a05e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a058:	42bb      	cmp	r3, r7
 801a05a:	f2c0 817c 	blt.w	801a356 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801a05e:	f11c 0c01 	adds.w	ip, ip, #1
 801a062:	f100 816c 	bmi.w	801a33e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a066:	4561      	cmp	r1, ip
 801a068:	f2c0 8169 	blt.w	801a33e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a06c:	3301      	adds	r3, #1
 801a06e:	f100 8166 	bmi.w	801a33e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a072:	429a      	cmp	r2, r3
 801a074:	f2c0 8163 	blt.w	801a33e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a078:	9b07      	ldr	r3, [sp, #28]
 801a07a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a07c:	9318      	str	r3, [sp, #96]	; 0x60
 801a07e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a080:	2b00      	cmp	r3, #0
 801a082:	f340 8186 	ble.w	801a392 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801a086:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a088:	142a      	asrs	r2, r5, #16
 801a08a:	ea4f 4026 	mov.w	r0, r6, asr #16
 801a08e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a092:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801a096:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801a09a:	f100 81cb 	bmi.w	801a434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a09e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a0a2:	4542      	cmp	r2, r8
 801a0a4:	f280 81c6 	bge.w	801a434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a0a8:	2800      	cmp	r0, #0
 801a0aa:	f2c0 81c3 	blt.w	801a434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a0ae:	f103 38ff 	add.w	r8, r3, #4294967295
 801a0b2:	4540      	cmp	r0, r8
 801a0b4:	f280 81be 	bge.w	801a434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a0b8:	fa0f f38e 	sxth.w	r3, lr
 801a0bc:	fb00 2203 	mla	r2, r0, r3, r2
 801a0c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a0c2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801a0c6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801a0ca:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a0ce:	2900      	cmp	r1, #0
 801a0d0:	f000 81a6 	beq.w	801a420 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 801a0d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a0d8:	900c      	str	r0, [sp, #48]	; 0x30
 801a0da:	0e00      	lsrs	r0, r0, #24
 801a0dc:	9013      	str	r0, [sp, #76]	; 0x4c
 801a0de:	f1bc 0f00 	cmp.w	ip, #0
 801a0e2:	d00f      	beq.n	801a104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a0e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a0e8:	3b01      	subs	r3, #1
 801a0ea:	009b      	lsls	r3, r3, #2
 801a0ec:	3304      	adds	r3, #4
 801a0ee:	eb08 0003 	add.w	r0, r8, r3
 801a0f2:	f858 3003 	ldr.w	r3, [r8, r3]
 801a0f6:	9308      	str	r3, [sp, #32]
 801a0f8:	0e1b      	lsrs	r3, r3, #24
 801a0fa:	9311      	str	r3, [sp, #68]	; 0x44
 801a0fc:	6843      	ldr	r3, [r0, #4]
 801a0fe:	930d      	str	r3, [sp, #52]	; 0x34
 801a100:	0e1b      	lsrs	r3, r3, #24
 801a102:	9314      	str	r3, [sp, #80]	; 0x50
 801a104:	b289      	uxth	r1, r1
 801a106:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a108:	fa1f fc8c 	uxth.w	ip, ip
 801a10c:	0108      	lsls	r0, r1, #4
 801a10e:	fb01 f90c 	mul.w	r9, r1, ip
 801a112:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a116:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801a11a:	eba0 0809 	sub.w	r8, r0, r9
 801a11e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a120:	fa1f f18c 	uxth.w	r1, ip
 801a124:	fa1f f888 	uxth.w	r8, r8
 801a128:	1a5b      	subs	r3, r3, r1
 801a12a:	fb08 f000 	mul.w	r0, r8, r0
 801a12e:	b29b      	uxth	r3, r3
 801a130:	fb03 000e 	mla	r0, r3, lr, r0
 801a134:	fb01 0004 	mla	r0, r1, r4, r0
 801a138:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a13a:	fb09 0004 	mla	r0, r9, r4, r0
 801a13e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a142:	2800      	cmp	r0, #0
 801a144:	f000 80f2 	beq.w	801a32c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a148:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a14c:	d01b      	beq.n	801a186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801a14e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801a152:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a156:	fb0e fa0a 	mul.w	sl, lr, sl
 801a15a:	fb0e fe02 	mul.w	lr, lr, r2
 801a15e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801a162:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a166:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a16a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a16e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a172:	4452      	add	r2, sl
 801a174:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a178:	0a12      	lsrs	r2, r2, #8
 801a17a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a17e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a182:	ea42 020c 	orr.w	r2, r2, ip
 801a186:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a188:	2cff      	cmp	r4, #255	; 0xff
 801a18a:	d021      	beq.n	801a1d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801a18c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a18e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a192:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a194:	fb04 fb0b 	mul.w	fp, r4, fp
 801a198:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a19a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a19e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a1a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a1a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a1a8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a1b4:	44de      	add	lr, fp
 801a1b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a1ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a1be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a1c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a1ca:	ea4e 040a 	orr.w	r4, lr, sl
 801a1ce:	940c      	str	r4, [sp, #48]	; 0x30
 801a1d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a1d2:	2cff      	cmp	r4, #255	; 0xff
 801a1d4:	d021      	beq.n	801a21a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801a1d6:	9c08      	ldr	r4, [sp, #32]
 801a1d8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a1dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a1de:	fb04 fb0b 	mul.w	fp, r4, fp
 801a1e2:	9c08      	ldr	r4, [sp, #32]
 801a1e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a1e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a1ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a1ee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a1f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1fa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a1fe:	44de      	add	lr, fp
 801a200:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a204:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a208:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a20c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a210:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a214:	ea4e 040a 	orr.w	r4, lr, sl
 801a218:	9408      	str	r4, [sp, #32]
 801a21a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a21c:	2cff      	cmp	r4, #255	; 0xff
 801a21e:	d021      	beq.n	801a264 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801a220:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a222:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a226:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a228:	fb04 fb0b 	mul.w	fp, r4, fp
 801a22c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a22e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a232:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a234:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a238:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a23c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a240:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a244:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a248:	44de      	add	lr, fp
 801a24a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a24e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a252:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a256:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a25a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a25e:	ea4e 040a 	orr.w	r4, lr, sl
 801a262:	940d      	str	r4, [sp, #52]	; 0x34
 801a264:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a266:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a26a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a26e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a272:	9c08      	ldr	r4, [sp, #32]
 801a274:	fb08 fc0c 	mul.w	ip, r8, ip
 801a278:	fb03 cc0e 	mla	ip, r3, lr, ip
 801a27c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a280:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a282:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a286:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a28a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a28c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a290:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a294:	fb08 f80e 	mul.w	r8, r8, lr
 801a298:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a29c:	fb03 8202 	mla	r2, r3, r2, r8
 801a2a0:	9b08      	ldr	r3, [sp, #32]
 801a2a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a2a6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801a2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2ac:	fb01 220a 	mla	r2, r1, sl, r2
 801a2b0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801a2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a2b6:	fb09 2901 	mla	r9, r9, r1, r2
 801a2ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a2bc:	4343      	muls	r3, r0
 801a2be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a2c2:	1c58      	adds	r0, r3, #1
 801a2c4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a2c8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a2cc:	783b      	ldrb	r3, [r7, #0]
 801a2ce:	ea4c 0c09 	orr.w	ip, ip, r9
 801a2d2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a2d6:	fa5f f28c 	uxtb.w	r2, ip
 801a2da:	b2c0      	uxtb	r0, r0
 801a2dc:	fb12 f201 	smulbb	r2, r2, r1
 801a2e0:	fb03 2300 	mla	r3, r3, r0, r2
 801a2e4:	b29b      	uxth	r3, r3
 801a2e6:	1c5a      	adds	r2, r3, #1
 801a2e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a2ec:	787a      	ldrb	r2, [r7, #1]
 801a2ee:	fb12 f200 	smulbb	r2, r2, r0
 801a2f2:	121b      	asrs	r3, r3, #8
 801a2f4:	703b      	strb	r3, [r7, #0]
 801a2f6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a2fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a2fe:	fb03 2301 	mla	r3, r3, r1, r2
 801a302:	b29b      	uxth	r3, r3
 801a304:	1c5a      	adds	r2, r3, #1
 801a306:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a30a:	121b      	asrs	r3, r3, #8
 801a30c:	707b      	strb	r3, [r7, #1]
 801a30e:	78bb      	ldrb	r3, [r7, #2]
 801a310:	fb13 f000 	smulbb	r0, r3, r0
 801a314:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a318:	fa1f fc8c 	uxth.w	ip, ip
 801a31c:	f10c 0301 	add.w	r3, ip, #1
 801a320:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a324:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a328:	f887 c002 	strb.w	ip, [r7, #2]
 801a32c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a32e:	3703      	adds	r7, #3
 801a330:	441d      	add	r5, r3
 801a332:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a334:	441e      	add	r6, r3
 801a336:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a338:	3b01      	subs	r3, #1
 801a33a:	9318      	str	r3, [sp, #96]	; 0x60
 801a33c:	e69f      	b.n	801a07e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a33e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a340:	441d      	add	r5, r3
 801a342:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a344:	441e      	add	r6, r3
 801a346:	9b07      	ldr	r3, [sp, #28]
 801a348:	3b01      	subs	r3, #1
 801a34a:	9307      	str	r3, [sp, #28]
 801a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a34e:	3303      	adds	r3, #3
 801a350:	930a      	str	r3, [sp, #40]	; 0x28
 801a352:	e674      	b.n	801a03e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a354:	d025      	beq.n	801a3a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801a356:	9b07      	ldr	r3, [sp, #28]
 801a358:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801a35a:	3b01      	subs	r3, #1
 801a35c:	fb00 5003 	mla	r0, r0, r3, r5
 801a360:	1400      	asrs	r0, r0, #16
 801a362:	f53f ae89 	bmi.w	801a078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a366:	3901      	subs	r1, #1
 801a368:	4288      	cmp	r0, r1
 801a36a:	f6bf ae85 	bge.w	801a078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a36e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801a370:	fb01 6303 	mla	r3, r1, r3, r6
 801a374:	141b      	asrs	r3, r3, #16
 801a376:	f53f ae7f 	bmi.w	801a078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a37a:	3a01      	subs	r2, #1
 801a37c:	4293      	cmp	r3, r2
 801a37e:	f6bf ae7b 	bge.w	801a078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a384:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a388:	f103 0e03 	add.w	lr, r3, #3
 801a38c:	f1bb 0f00 	cmp.w	fp, #0
 801a390:	dc6e      	bgt.n	801a470 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801a392:	9b07      	ldr	r3, [sp, #28]
 801a394:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a39a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a39e:	4423      	add	r3, r4
 801a3a0:	930a      	str	r3, [sp, #40]	; 0x28
 801a3a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	f340 81ab 	ble.w	801a700 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801a3aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a3ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a3b0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a3b4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a3b8:	eef0 6a48 	vmov.f32	s13, s16
 801a3bc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a3c0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a3c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3c8:	ee16 5a90 	vmov	r5, s13
 801a3cc:	eef0 6a68 	vmov.f32	s13, s17
 801a3d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3d4:	ee16 6a90 	vmov	r6, s13
 801a3d8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a3dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a3e0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a3e4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a3e8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a3ec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a3f0:	ee18 2a10 	vmov	r2, s16
 801a3f4:	eeb0 8a47 	vmov.f32	s16, s14
 801a3f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a3fc:	ee18 2a90 	vmov	r2, s17
 801a400:	9331      	str	r3, [sp, #196]	; 0xc4
 801a402:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a404:	eef0 8a67 	vmov.f32	s17, s15
 801a408:	fb92 f3f3 	sdiv	r3, r2, r3
 801a40c:	9332      	str	r3, [sp, #200]	; 0xc8
 801a40e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a410:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a412:	3b01      	subs	r3, #1
 801a414:	9317      	str	r3, [sp, #92]	; 0x5c
 801a416:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a418:	bf08      	it	eq
 801a41a:	4613      	moveq	r3, r2
 801a41c:	9307      	str	r3, [sp, #28]
 801a41e:	e600      	b.n	801a022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a420:	f1bc 0f00 	cmp.w	ip, #0
 801a424:	f43f ae6e 	beq.w	801a104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a428:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801a42c:	9308      	str	r3, [sp, #32]
 801a42e:	0e1b      	lsrs	r3, r3, #24
 801a430:	9311      	str	r3, [sp, #68]	; 0x44
 801a432:	e667      	b.n	801a104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a434:	f112 0801 	adds.w	r8, r2, #1
 801a438:	f53f af78 	bmi.w	801a32c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a43c:	45c6      	cmp	lr, r8
 801a43e:	f6ff af75 	blt.w	801a32c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a442:	f110 0801 	adds.w	r8, r0, #1
 801a446:	f53f af71 	bmi.w	801a32c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a44a:	4543      	cmp	r3, r8
 801a44c:	f6ff af6e 	blt.w	801a32c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a450:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801a452:	b21b      	sxth	r3, r3
 801a454:	9201      	str	r2, [sp, #4]
 801a456:	9300      	str	r3, [sp, #0]
 801a458:	fa0f f38e 	sxth.w	r3, lr
 801a45c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a45e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a462:	e9cd c404 	strd	ip, r4, [sp, #16]
 801a466:	4639      	mov	r1, r7
 801a468:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a46a:	f7ff fc53 	bl	8019d14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801a46e:	e75d      	b.n	801a32c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a470:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a472:	142f      	asrs	r7, r5, #16
 801a474:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a476:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a47a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801a47e:	1433      	asrs	r3, r6, #16
 801a480:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a484:	fb02 7303 	mla	r3, r2, r3, r7
 801a488:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801a48c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a490:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a494:	2900      	cmp	r1, #0
 801a496:	f000 812a 	beq.w	801a6ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801a49a:	687c      	ldr	r4, [r7, #4]
 801a49c:	940e      	str	r4, [sp, #56]	; 0x38
 801a49e:	0e24      	lsrs	r4, r4, #24
 801a4a0:	9415      	str	r4, [sp, #84]	; 0x54
 801a4a2:	b178      	cbz	r0, 801a4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a4a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801a4a8:	3a01      	subs	r2, #1
 801a4aa:	0092      	lsls	r2, r2, #2
 801a4ac:	3204      	adds	r2, #4
 801a4ae:	eb07 0802 	add.w	r8, r7, r2
 801a4b2:	58ba      	ldr	r2, [r7, r2]
 801a4b4:	9209      	str	r2, [sp, #36]	; 0x24
 801a4b6:	0e12      	lsrs	r2, r2, #24
 801a4b8:	9212      	str	r2, [sp, #72]	; 0x48
 801a4ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a4be:	920f      	str	r2, [sp, #60]	; 0x3c
 801a4c0:	0e12      	lsrs	r2, r2, #24
 801a4c2:	9216      	str	r2, [sp, #88]	; 0x58
 801a4c4:	b289      	uxth	r1, r1
 801a4c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4c8:	b280      	uxth	r0, r0
 801a4ca:	fb01 f900 	mul.w	r9, r1, r0
 801a4ce:	0109      	lsls	r1, r1, #4
 801a4d0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a4d4:	eba1 0809 	sub.w	r8, r1, r9
 801a4d8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801a4dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a4de:	b280      	uxth	r0, r0
 801a4e0:	fa1f f888 	uxth.w	r8, r8
 801a4e4:	1a12      	subs	r2, r2, r0
 801a4e6:	fb08 f101 	mul.w	r1, r8, r1
 801a4ea:	b292      	uxth	r2, r2
 801a4ec:	fb02 110c 	mla	r1, r2, ip, r1
 801a4f0:	fb00 1104 	mla	r1, r0, r4, r1
 801a4f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a4f6:	fb09 1104 	mla	r1, r9, r4, r1
 801a4fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a4fe:	2900      	cmp	r1, #0
 801a500:	f000 80ec 	beq.w	801a6dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a504:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a508:	d019      	beq.n	801a53e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801a50a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a50e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a512:	fb0c fa0a 	mul.w	sl, ip, sl
 801a516:	fb0c fc03 	mul.w	ip, ip, r3
 801a51a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a51e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a522:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a526:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a52a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a52e:	4453      	add	r3, sl
 801a530:	0a3f      	lsrs	r7, r7, #8
 801a532:	0a1b      	lsrs	r3, r3, #8
 801a534:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a538:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a53c:	433b      	orrs	r3, r7
 801a53e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a540:	2cff      	cmp	r4, #255	; 0xff
 801a542:	d020      	beq.n	801a586 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 801a544:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a546:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a54a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a54c:	4367      	muls	r7, r4
 801a54e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a550:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a554:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a558:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a55a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a55e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a562:	fb04 fa0a 	mul.w	sl, r4, sl
 801a566:	44bc      	add	ip, r7
 801a568:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a56c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a570:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a574:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a578:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a57c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a580:	ea4c 040a 	orr.w	r4, ip, sl
 801a584:	940e      	str	r4, [sp, #56]	; 0x38
 801a586:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a588:	2cff      	cmp	r4, #255	; 0xff
 801a58a:	d020      	beq.n	801a5ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801a58c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a58e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a592:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a594:	4367      	muls	r7, r4
 801a596:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a598:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a59c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a5a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a5a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a5a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5ae:	44bc      	add	ip, r7
 801a5b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a5b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a5b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a5bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5c8:	ea4c 040a 	orr.w	r4, ip, sl
 801a5cc:	9409      	str	r4, [sp, #36]	; 0x24
 801a5ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a5d0:	2cff      	cmp	r4, #255	; 0xff
 801a5d2:	d020      	beq.n	801a616 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 801a5d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a5d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a5da:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a5dc:	4367      	muls	r7, r4
 801a5de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a5e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a5e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a5e8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a5ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a5ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5f6:	44bc      	add	ip, r7
 801a5f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a5fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a600:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a604:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a608:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a60c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a610:	ea4c 040a 	orr.w	r4, ip, sl
 801a614:	940f      	str	r4, [sp, #60]	; 0x3c
 801a616:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a618:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a61c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a620:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a624:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a626:	fb08 f707 	mul.w	r7, r8, r7
 801a62a:	fb02 770c 	mla	r7, r2, ip, r7
 801a62e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a632:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a634:	fb00 770c 	mla	r7, r0, ip, r7
 801a638:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a63c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a63e:	fb09 770c 	mla	r7, r9, ip, r7
 801a642:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a646:	fb08 f80c 	mul.w	r8, r8, ip
 801a64a:	0a3f      	lsrs	r7, r7, #8
 801a64c:	fb02 8303 	mla	r3, r2, r3, r8
 801a650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a652:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a656:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a65a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a65c:	fb00 330a 	mla	r3, r0, sl, r3
 801a660:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a664:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a666:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a66c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a670:	434b      	muls	r3, r1
 801a672:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a676:	1c59      	adds	r1, r3, #1
 801a678:	ea47 070c 	orr.w	r7, r7, ip
 801a67c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a680:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a684:	b2fa      	uxtb	r2, r7
 801a686:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a68a:	fb12 f200 	smulbb	r2, r2, r0
 801a68e:	b2c9      	uxtb	r1, r1
 801a690:	fb03 2301 	mla	r3, r3, r1, r2
 801a694:	b29b      	uxth	r3, r3
 801a696:	1c5a      	adds	r2, r3, #1
 801a698:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a69c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a6a0:	fb12 f201 	smulbb	r2, r2, r1
 801a6a4:	121b      	asrs	r3, r3, #8
 801a6a6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a6aa:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a6ae:	0c3f      	lsrs	r7, r7, #16
 801a6b0:	fb03 2300 	mla	r3, r3, r0, r2
 801a6b4:	b29b      	uxth	r3, r3
 801a6b6:	1c5a      	adds	r2, r3, #1
 801a6b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a6bc:	121b      	asrs	r3, r3, #8
 801a6be:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a6c2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a6c6:	fb13 f101 	smulbb	r1, r3, r1
 801a6ca:	fb07 1700 	mla	r7, r7, r0, r1
 801a6ce:	b2bf      	uxth	r7, r7
 801a6d0:	1c79      	adds	r1, r7, #1
 801a6d2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801a6d6:	123f      	asrs	r7, r7, #8
 801a6d8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a6dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a6de:	f10e 0e03 	add.w	lr, lr, #3
 801a6e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a6e6:	441d      	add	r5, r3
 801a6e8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a6ea:	441e      	add	r6, r3
 801a6ec:	e64e      	b.n	801a38c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801a6ee:	2800      	cmp	r0, #0
 801a6f0:	f43f aee8 	beq.w	801a4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a6f4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801a6f8:	9209      	str	r2, [sp, #36]	; 0x24
 801a6fa:	0e12      	lsrs	r2, r2, #24
 801a6fc:	9212      	str	r2, [sp, #72]	; 0x48
 801a6fe:	e6e1      	b.n	801a4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a700:	b01d      	add	sp, #116	; 0x74
 801a702:	ecbd 8b08 	vpop	{d8-d11}
 801a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a70c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801a70c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a710:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801a714:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801a718:	fb04 5603 	mla	r6, r4, r3, r5
 801a71c:	2c00      	cmp	r4, #0
 801a71e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801a722:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801a726:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801a72a:	db36      	blt.n	801a79a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a72c:	45a6      	cmp	lr, r4
 801a72e:	dd34      	ble.n	801a79a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a730:	2d00      	cmp	r5, #0
 801a732:	db30      	blt.n	801a796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a734:	42ab      	cmp	r3, r5
 801a736:	dd2e      	ble.n	801a796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a738:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801a73c:	1c6e      	adds	r6, r5, #1
 801a73e:	d42f      	bmi.n	801a7a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a740:	42b3      	cmp	r3, r6
 801a742:	dd2d      	ble.n	801a7a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a744:	b370      	cbz	r0, 801a7a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801a746:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801a74a:	3401      	adds	r4, #1
 801a74c:	d42e      	bmi.n	801a7ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a74e:	45a6      	cmp	lr, r4
 801a750:	dd2c      	ble.n	801a7ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a752:	b377      	cbz	r7, 801a7b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801a754:	2d00      	cmp	r5, #0
 801a756:	db27      	blt.n	801a7a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a758:	42ab      	cmp	r3, r5
 801a75a:	dd25      	ble.n	801a7a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a75c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801a760:	3501      	adds	r5, #1
 801a762:	d429      	bmi.n	801a7b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a764:	42ab      	cmp	r3, r5
 801a766:	dd27      	ble.n	801a7b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a768:	b340      	cbz	r0, 801a7bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801a76a:	3301      	adds	r3, #1
 801a76c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801a770:	280f      	cmp	r0, #15
 801a772:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a776:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a77a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a77e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a782:	d801      	bhi.n	801a788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801a784:	2f0f      	cmp	r7, #15
 801a786:	d91b      	bls.n	801a7c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801a788:	4b7e      	ldr	r3, [pc, #504]	; (801a984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801a78a:	f240 1157 	movw	r1, #343	; 0x157
 801a78e:	4a7e      	ldr	r2, [pc, #504]	; (801a988 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801a790:	487e      	ldr	r0, [pc, #504]	; (801a98c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801a792:	f001 fd8b 	bl	801c2ac <__assert_func>
 801a796:	2200      	movs	r2, #0
 801a798:	e7d0      	b.n	801a73c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801a79a:	2600      	movs	r6, #0
 801a79c:	4632      	mov	r2, r6
 801a79e:	e7d4      	b.n	801a74a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a7a0:	2600      	movs	r6, #0
 801a7a2:	e7d2      	b.n	801a74a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a7a4:	4606      	mov	r6, r0
 801a7a6:	e7d0      	b.n	801a74a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a7a8:	2400      	movs	r4, #0
 801a7aa:	e7d9      	b.n	801a760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801a7ac:	2300      	movs	r3, #0
 801a7ae:	461c      	mov	r4, r3
 801a7b0:	e7de      	b.n	801a770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7b2:	463b      	mov	r3, r7
 801a7b4:	463c      	mov	r4, r7
 801a7b6:	e7db      	b.n	801a770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	e7d9      	b.n	801a770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	e7d7      	b.n	801a770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7c0:	b280      	uxth	r0, r0
 801a7c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a7c6:	b2bf      	uxth	r7, r7
 801a7c8:	fb00 fe07 	mul.w	lr, r0, r7
 801a7cc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a7d0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a7d4:	eba0 0c0e 	sub.w	ip, r0, lr
 801a7d8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a7dc:	b2bf      	uxth	r7, r7
 801a7de:	fa1f fc8c 	uxth.w	ip, ip
 801a7e2:	eba0 0507 	sub.w	r5, r0, r7
 801a7e6:	fb0c f00a 	mul.w	r0, ip, sl
 801a7ea:	b2ad      	uxth	r5, r5
 801a7ec:	fb05 000b 	mla	r0, r5, fp, r0
 801a7f0:	fb07 0009 	mla	r0, r7, r9, r0
 801a7f4:	fb0e 0008 	mla	r0, lr, r8, r0
 801a7f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a7fc:	9001      	str	r0, [sp, #4]
 801a7fe:	d018      	beq.n	801a832 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801a800:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a804:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a808:	fb0b f000 	mul.w	r0, fp, r0
 801a80c:	fb0b fb02 	mul.w	fp, fp, r2
 801a810:	0a02      	lsrs	r2, r0, #8
 801a812:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a816:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a81a:	4402      	add	r2, r0
 801a81c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a820:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a824:	0a12      	lsrs	r2, r2, #8
 801a826:	0a00      	lsrs	r0, r0, #8
 801a828:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a82c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a830:	4302      	orrs	r2, r0
 801a832:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a836:	d01a      	beq.n	801a86e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801a838:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a83c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a840:	fb0a f000 	mul.w	r0, sl, r0
 801a844:	fb0a fa06 	mul.w	sl, sl, r6
 801a848:	0a06      	lsrs	r6, r0, #8
 801a84a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a84e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a852:	4406      	add	r6, r0
 801a854:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a858:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a85c:	0a36      	lsrs	r6, r6, #8
 801a85e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a862:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a866:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a86a:	ea46 060a 	orr.w	r6, r6, sl
 801a86e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a872:	d01b      	beq.n	801a8ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801a874:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a878:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a87c:	fb09 fa0a 	mul.w	sl, r9, sl
 801a880:	fb09 f004 	mul.w	r0, r9, r4
 801a884:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a888:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a88c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801a890:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a894:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801a898:	4454      	add	r4, sl
 801a89a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a89e:	0a24      	lsrs	r4, r4, #8
 801a8a0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a8a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a8a8:	ea44 0409 	orr.w	r4, r4, r9
 801a8ac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a8b0:	d01b      	beq.n	801a8ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801a8b2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a8b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8ba:	fb08 f909 	mul.w	r9, r8, r9
 801a8be:	fb08 f003 	mul.w	r0, r8, r3
 801a8c2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a8c6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a8ca:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801a8ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8d2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801a8d6:	444b      	add	r3, r9
 801a8d8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a8dc:	0a1b      	lsrs	r3, r3, #8
 801a8de:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a8e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8e6:	ea43 0308 	orr.w	r3, r3, r8
 801a8ea:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a8ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a8f2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801a8f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a8fa:	fb0c f000 	mul.w	r0, ip, r0
 801a8fe:	fb0c f606 	mul.w	r6, ip, r6
 801a902:	fb05 0808 	mla	r8, r5, r8, r0
 801a906:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a90a:	fb05 6502 	mla	r5, r5, r2, r6
 801a90e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a912:	fb07 8800 	mla	r8, r7, r0, r8
 801a916:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a91a:	fb07 5704 	mla	r7, r7, r4, r5
 801a91e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a922:	fb0e 8000 	mla	r0, lr, r0, r8
 801a926:	780a      	ldrb	r2, [r1, #0]
 801a928:	fb0e 7e03 	mla	lr, lr, r3, r7
 801a92c:	9b01      	ldr	r3, [sp, #4]
 801a92e:	0a00      	lsrs	r0, r0, #8
 801a930:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a934:	43db      	mvns	r3, r3
 801a936:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a93a:	b2db      	uxtb	r3, r3
 801a93c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a940:	ea40 0e0e 	orr.w	lr, r0, lr
 801a944:	fb02 f003 	mul.w	r0, r2, r3
 801a948:	1c42      	adds	r2, r0, #1
 801a94a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a94e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a952:	700a      	strb	r2, [r1, #0]
 801a954:	784a      	ldrb	r2, [r1, #1]
 801a956:	435a      	muls	r2, r3
 801a958:	1c50      	adds	r0, r2, #1
 801a95a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a95e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a962:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a966:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a96a:	704a      	strb	r2, [r1, #1]
 801a96c:	788a      	ldrb	r2, [r1, #2]
 801a96e:	4353      	muls	r3, r2
 801a970:	1c5a      	adds	r2, r3, #1
 801a972:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a976:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a97a:	f881 e002 	strb.w	lr, [r1, #2]
 801a97e:	b003      	add	sp, #12
 801a980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a984:	080205a7 	.word	0x080205a7
 801a988:	08020a5e 	.word	0x08020a5e
 801a98c:	0802062f 	.word	0x0802062f

0801a990 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a994:	ed2d 8b08 	vpush	{d8-d11}
 801a998:	b099      	sub	sp, #100	; 0x64
 801a99a:	eeb0 aa40 	vmov.f32	s20, s0
 801a99e:	eef0 9a60 	vmov.f32	s19, s1
 801a9a2:	9017      	str	r0, [sp, #92]	; 0x5c
 801a9a4:	eeb0 9a41 	vmov.f32	s18, s2
 801a9a8:	9306      	str	r3, [sp, #24]
 801a9aa:	eeb0 8a62 	vmov.f32	s16, s5
 801a9ae:	eef0 8a43 	vmov.f32	s17, s6
 801a9b2:	eef0 ba44 	vmov.f32	s23, s8
 801a9b6:	eeb0 ba64 	vmov.f32	s22, s9
 801a9ba:	eef0 aa45 	vmov.f32	s21, s10
 801a9be:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801a9c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a9c4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801a9c8:	6850      	ldr	r0, [r2, #4]
 801a9ca:	6812      	ldr	r2, [r2, #0]
 801a9cc:	fb00 1303 	mla	r3, r0, r3, r1
 801a9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9d4:	18d3      	adds	r3, r2, r3
 801a9d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a9d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a9da:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	930e      	str	r3, [sp, #56]	; 0x38
 801a9e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	dc03      	bgt.n	801a9f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a9e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f340 8360 	ble.w	801b0b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801a9f0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a9f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a9f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a9fa:	1e48      	subs	r0, r1, #1
 801a9fc:	1e57      	subs	r7, r2, #1
 801a9fe:	9b06      	ldr	r3, [sp, #24]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	f340 817b 	ble.w	801acfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801aa06:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801aa0a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801aa0e:	d406      	bmi.n	801aa1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aa10:	4584      	cmp	ip, r0
 801aa12:	da04      	bge.n	801aa1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	db02      	blt.n	801aa1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aa18:	42bb      	cmp	r3, r7
 801aa1a:	f2c0 8170 	blt.w	801acfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801aa1e:	f11c 0c01 	adds.w	ip, ip, #1
 801aa22:	f100 8160 	bmi.w	801ace6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa26:	4561      	cmp	r1, ip
 801aa28:	f2c0 815d 	blt.w	801ace6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa2c:	3301      	adds	r3, #1
 801aa2e:	f100 815a 	bmi.w	801ace6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa32:	429a      	cmp	r2, r3
 801aa34:	f2c0 8157 	blt.w	801ace6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801aa3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801aa3e:	f1b8 0f00 	cmp.w	r8, #0
 801aa42:	f340 8179 	ble.w	801ad38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801aa46:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801aa48:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801aa4c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa4e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801aa52:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801aa56:	142a      	asrs	r2, r5, #16
 801aa58:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801aa5c:	689b      	ldr	r3, [r3, #8]
 801aa5e:	f100 81be 	bmi.w	801adde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aa62:	f103 39ff 	add.w	r9, r3, #4294967295
 801aa66:	454a      	cmp	r2, r9
 801aa68:	f280 81b9 	bge.w	801adde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aa6c:	f1bc 0f00 	cmp.w	ip, #0
 801aa70:	f2c0 81b5 	blt.w	801adde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aa74:	f10e 39ff 	add.w	r9, lr, #4294967295
 801aa78:	45cc      	cmp	ip, r9
 801aa7a:	f280 81b0 	bge.w	801adde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aa7e:	b21b      	sxth	r3, r3
 801aa80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aa82:	fb0c 2203 	mla	r2, ip, r3, r2
 801aa86:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801aa8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801aa8e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801aa92:	2900      	cmp	r1, #0
 801aa94:	f000 8197 	beq.w	801adc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 801aa98:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801aa9c:	940a      	str	r4, [sp, #40]	; 0x28
 801aa9e:	0e24      	lsrs	r4, r4, #24
 801aaa0:	9411      	str	r4, [sp, #68]	; 0x44
 801aaa2:	b180      	cbz	r0, 801aac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801aaa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801aaa8:	3b01      	subs	r3, #1
 801aaaa:	009b      	lsls	r3, r3, #2
 801aaac:	3304      	adds	r3, #4
 801aaae:	eb09 0c03 	add.w	ip, r9, r3
 801aab2:	f859 3003 	ldr.w	r3, [r9, r3]
 801aab6:	9307      	str	r3, [sp, #28]
 801aab8:	0e1b      	lsrs	r3, r3, #24
 801aaba:	930f      	str	r3, [sp, #60]	; 0x3c
 801aabc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801aac0:	930b      	str	r3, [sp, #44]	; 0x2c
 801aac2:	0e1b      	lsrs	r3, r3, #24
 801aac4:	9312      	str	r3, [sp, #72]	; 0x48
 801aac6:	b289      	uxth	r1, r1
 801aac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aaca:	b280      	uxth	r0, r0
 801aacc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aace:	fb01 fa00 	mul.w	sl, r1, r0
 801aad2:	0109      	lsls	r1, r1, #4
 801aad4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801aad8:	eba1 090a 	sub.w	r9, r1, sl
 801aadc:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801aae0:	b280      	uxth	r0, r0
 801aae2:	fa1f f989 	uxth.w	r9, r9
 801aae6:	1a09      	subs	r1, r1, r0
 801aae8:	fb09 f303 	mul.w	r3, r9, r3
 801aaec:	b289      	uxth	r1, r1
 801aaee:	fb01 330e 	mla	r3, r1, lr, r3
 801aaf2:	fb00 3304 	mla	r3, r0, r4, r3
 801aaf6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aaf8:	fb0a 3304 	mla	r3, sl, r4, r3
 801aafc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	f000 80e8 	beq.w	801acd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ab06:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ab0a:	d01b      	beq.n	801ab44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ab0c:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801ab10:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ab14:	fb0e fb0b 	mul.w	fp, lr, fp
 801ab18:	fb0e fe02 	mul.w	lr, lr, r2
 801ab1c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ab20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ab24:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ab28:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ab2c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ab30:	445a      	add	r2, fp
 801ab32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab36:	0a12      	lsrs	r2, r2, #8
 801ab38:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ab3c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ab40:	ea42 020c 	orr.w	r2, r2, ip
 801ab44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab46:	2cff      	cmp	r4, #255	; 0xff
 801ab48:	d021      	beq.n	801ab8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ab4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ab4c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ab50:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab52:	fb04 fc0c 	mul.w	ip, r4, ip
 801ab56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ab58:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ab5c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ab60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab62:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ab66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab6a:	fb04 fb0b 	mul.w	fp, r4, fp
 801ab6e:	44e6      	add	lr, ip
 801ab70:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ab74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab78:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ab7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab80:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ab84:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ab88:	ea4e 040b 	orr.w	r4, lr, fp
 801ab8c:	940a      	str	r4, [sp, #40]	; 0x28
 801ab8e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ab90:	2cff      	cmp	r4, #255	; 0xff
 801ab92:	d021      	beq.n	801abd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801ab94:	9c07      	ldr	r4, [sp, #28]
 801ab96:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ab9a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ab9c:	fb04 fc0c 	mul.w	ip, r4, ip
 801aba0:	9c07      	ldr	r4, [sp, #28]
 801aba2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801aba6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801abaa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801abac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801abb0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abb4:	fb04 fb0b 	mul.w	fp, r4, fp
 801abb8:	44e6      	add	lr, ip
 801abba:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801abbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801abc2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801abc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801abce:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801abd2:	ea4e 040b 	orr.w	r4, lr, fp
 801abd6:	9407      	str	r4, [sp, #28]
 801abd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801abda:	2cff      	cmp	r4, #255	; 0xff
 801abdc:	d021      	beq.n	801ac22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801abde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801abe0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801abe4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801abe6:	fb04 fc0c 	mul.w	ip, r4, ip
 801abea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801abec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801abf0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801abf4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801abf6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801abfa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abfe:	fb04 fb0b 	mul.w	fp, r4, fp
 801ac02:	44e6      	add	lr, ip
 801ac04:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ac08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac0c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ac10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac14:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ac18:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ac1c:	ea4e 040b 	orr.w	r4, lr, fp
 801ac20:	940b      	str	r4, [sp, #44]	; 0x2c
 801ac22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ac24:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801ac28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ac2c:	2bff      	cmp	r3, #255	; 0xff
 801ac2e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ac32:	9c07      	ldr	r4, [sp, #28]
 801ac34:	fb09 fc0c 	mul.w	ip, r9, ip
 801ac38:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ac3c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ac40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac42:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ac46:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ac4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ac4c:	fb0a cc0e 	mla	ip, sl, lr, ip
 801ac50:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ac54:	fb09 f90e 	mul.w	r9, r9, lr
 801ac58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac5c:	fb01 9202 	mla	r2, r1, r2, r9
 801ac60:	9907      	ldr	r1, [sp, #28]
 801ac62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac66:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801ac6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ac6c:	fb00 220b 	mla	r2, r0, fp, r2
 801ac70:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801ac74:	fb0a 2a00 	mla	sl, sl, r0, r2
 801ac78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ac7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ac80:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ac84:	fa5f f08c 	uxtb.w	r0, ip
 801ac88:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ac8c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ac90:	f000 80a2 	beq.w	801add8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801ac94:	43db      	mvns	r3, r3
 801ac96:	783a      	ldrb	r2, [r7, #0]
 801ac98:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ac9c:	b2db      	uxtb	r3, r3
 801ac9e:	fb02 fe03 	mul.w	lr, r2, r3
 801aca2:	fb0a fa03 	mul.w	sl, sl, r3
 801aca6:	f10e 0201 	add.w	r2, lr, #1
 801acaa:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801acae:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801acb2:	703a      	strb	r2, [r7, #0]
 801acb4:	787a      	ldrb	r2, [r7, #1]
 801acb6:	fb02 f003 	mul.w	r0, r2, r3
 801acba:	f10a 0301 	add.w	r3, sl, #1
 801acbe:	1c42      	adds	r2, r0, #1
 801acc0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801acc4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801acc8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801accc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801acd0:	707a      	strb	r2, [r7, #1]
 801acd2:	f887 c002 	strb.w	ip, [r7, #2]
 801acd6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801acd8:	3703      	adds	r7, #3
 801acda:	f108 38ff 	add.w	r8, r8, #4294967295
 801acde:	441d      	add	r5, r3
 801ace0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ace2:	441e      	add	r6, r3
 801ace4:	e6ab      	b.n	801aa3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ace6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ace8:	441d      	add	r5, r3
 801acea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801acec:	441e      	add	r6, r3
 801acee:	9b06      	ldr	r3, [sp, #24]
 801acf0:	3b01      	subs	r3, #1
 801acf2:	9306      	str	r3, [sp, #24]
 801acf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acf6:	3303      	adds	r3, #3
 801acf8:	9309      	str	r3, [sp, #36]	; 0x24
 801acfa:	e680      	b.n	801a9fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801acfc:	d024      	beq.n	801ad48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801acfe:	9b06      	ldr	r3, [sp, #24]
 801ad00:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801ad02:	3b01      	subs	r3, #1
 801ad04:	fb00 5003 	mla	r0, r0, r3, r5
 801ad08:	1400      	asrs	r0, r0, #16
 801ad0a:	f53f ae95 	bmi.w	801aa38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad0e:	3901      	subs	r1, #1
 801ad10:	4288      	cmp	r0, r1
 801ad12:	f6bf ae91 	bge.w	801aa38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad16:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ad18:	fb01 6303 	mla	r3, r1, r3, r6
 801ad1c:	141b      	asrs	r3, r3, #16
 801ad1e:	f53f ae8b 	bmi.w	801aa38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad22:	3a01      	subs	r2, #1
 801ad24:	4293      	cmp	r3, r2
 801ad26:	f6bf ae87 	bge.w	801aa38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad2c:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ad30:	1cdf      	adds	r7, r3, #3
 801ad32:	f1bb 0f00 	cmp.w	fp, #0
 801ad36:	dc6e      	bgt.n	801ae16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801ad38:	9b06      	ldr	r3, [sp, #24]
 801ad3a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ad44:	4423      	add	r3, r4
 801ad46:	9309      	str	r3, [sp, #36]	; 0x24
 801ad48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	f340 81b0 	ble.w	801b0b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801ad50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad56:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ad5a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ad5e:	eef0 6a48 	vmov.f32	s13, s16
 801ad62:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ad66:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ad6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad6e:	ee16 5a90 	vmov	r5, s13
 801ad72:	eef0 6a68 	vmov.f32	s13, s17
 801ad76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad7a:	ee16 6a90 	vmov	r6, s13
 801ad7e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ad82:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ad86:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ad8a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ad8e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ad92:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ad96:	ee18 2a10 	vmov	r2, s16
 801ad9a:	eeb0 8a47 	vmov.f32	s16, s14
 801ad9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ada2:	ee18 2a90 	vmov	r2, s17
 801ada6:	932d      	str	r3, [sp, #180]	; 0xb4
 801ada8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801adaa:	eef0 8a67 	vmov.f32	s17, s15
 801adae:	fb92 f3f3 	sdiv	r3, r2, r3
 801adb2:	932e      	str	r3, [sp, #184]	; 0xb8
 801adb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801adb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801adb8:	3b01      	subs	r3, #1
 801adba:	9315      	str	r3, [sp, #84]	; 0x54
 801adbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801adbe:	bf08      	it	eq
 801adc0:	4613      	moveq	r3, r2
 801adc2:	9306      	str	r3, [sp, #24]
 801adc4:	e60d      	b.n	801a9e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801adc6:	2800      	cmp	r0, #0
 801adc8:	f43f ae7d 	beq.w	801aac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801adcc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801add0:	9307      	str	r3, [sp, #28]
 801add2:	0e1b      	lsrs	r3, r3, #24
 801add4:	930f      	str	r3, [sp, #60]	; 0x3c
 801add6:	e676      	b.n	801aac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801add8:	7038      	strb	r0, [r7, #0]
 801adda:	7079      	strb	r1, [r7, #1]
 801addc:	e779      	b.n	801acd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801adde:	f112 0901 	adds.w	r9, r2, #1
 801ade2:	f53f af78 	bmi.w	801acd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ade6:	454b      	cmp	r3, r9
 801ade8:	f6ff af75 	blt.w	801acd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801adec:	f11c 0901 	adds.w	r9, ip, #1
 801adf0:	f53f af71 	bmi.w	801acd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801adf4:	45ce      	cmp	lr, r9
 801adf6:	f6ff af6e 	blt.w	801acd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801adfa:	b21b      	sxth	r3, r3
 801adfc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801ae00:	fa0f f28e 	sxth.w	r2, lr
 801ae04:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801ae08:	9200      	str	r2, [sp, #0]
 801ae0a:	4639      	mov	r1, r7
 801ae0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae0e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ae10:	f7ff fc7c 	bl	801a70c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801ae14:	e75f      	b.n	801acd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae16:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ae18:	1429      	asrs	r1, r5, #16
 801ae1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ae1c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ae20:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801ae24:	1433      	asrs	r3, r6, #16
 801ae26:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ae2a:	fb0c 1303 	mla	r3, ip, r3, r1
 801ae2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ae30:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ae34:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ae38:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ae3c:	2a00      	cmp	r2, #0
 801ae3e:	f000 8129 	beq.w	801b094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801ae42:	684c      	ldr	r4, [r1, #4]
 801ae44:	940c      	str	r4, [sp, #48]	; 0x30
 801ae46:	0e24      	lsrs	r4, r4, #24
 801ae48:	9413      	str	r4, [sp, #76]	; 0x4c
 801ae4a:	b198      	cbz	r0, 801ae74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ae4c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801ae50:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ae54:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801ae58:	f10c 0c04 	add.w	ip, ip, #4
 801ae5c:	eb01 080c 	add.w	r8, r1, ip
 801ae60:	f851 100c 	ldr.w	r1, [r1, ip]
 801ae64:	9108      	str	r1, [sp, #32]
 801ae66:	0e09      	lsrs	r1, r1, #24
 801ae68:	9110      	str	r1, [sp, #64]	; 0x40
 801ae6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ae6e:	910d      	str	r1, [sp, #52]	; 0x34
 801ae70:	0e09      	lsrs	r1, r1, #24
 801ae72:	9114      	str	r1, [sp, #80]	; 0x50
 801ae74:	b292      	uxth	r2, r2
 801ae76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ae78:	b280      	uxth	r0, r0
 801ae7a:	fb02 f900 	mul.w	r9, r2, r0
 801ae7e:	0112      	lsls	r2, r2, #4
 801ae80:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ae84:	eba2 0809 	sub.w	r8, r2, r9
 801ae88:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ae8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ae8e:	b280      	uxth	r0, r0
 801ae90:	fa1f f888 	uxth.w	r8, r8
 801ae94:	1a09      	subs	r1, r1, r0
 801ae96:	fb08 f202 	mul.w	r2, r8, r2
 801ae9a:	b289      	uxth	r1, r1
 801ae9c:	fb01 220e 	mla	r2, r1, lr, r2
 801aea0:	fb00 2204 	mla	r2, r0, r4, r2
 801aea4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aea6:	fb09 2204 	mla	r2, r9, r4, r2
 801aeaa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801aeae:	2a00      	cmp	r2, #0
 801aeb0:	f000 80e8 	beq.w	801b084 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801aeb4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801aeb8:	d01b      	beq.n	801aef2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801aeba:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801aebe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801aec2:	fb0e fa0a 	mul.w	sl, lr, sl
 801aec6:	fb0e fe03 	mul.w	lr, lr, r3
 801aeca:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801aece:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801aed2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801aed6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aeda:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801aede:	4453      	add	r3, sl
 801aee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aee4:	0a1b      	lsrs	r3, r3, #8
 801aee6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801aeea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aeee:	ea43 030c 	orr.w	r3, r3, ip
 801aef2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aef4:	2cff      	cmp	r4, #255	; 0xff
 801aef6:	d021      	beq.n	801af3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801aef8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801aefa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801aefe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af00:	fb04 fc0c 	mul.w	ip, r4, ip
 801af04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801af06:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801af0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801af0e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af10:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801af14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af18:	fb04 fa0a 	mul.w	sl, r4, sl
 801af1c:	44e6      	add	lr, ip
 801af1e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801af22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801af2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801af36:	ea4e 040a 	orr.w	r4, lr, sl
 801af3a:	940c      	str	r4, [sp, #48]	; 0x30
 801af3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af3e:	2cff      	cmp	r4, #255	; 0xff
 801af40:	d021      	beq.n	801af86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801af42:	9c08      	ldr	r4, [sp, #32]
 801af44:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af48:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af4a:	fb04 fc0c 	mul.w	ip, r4, ip
 801af4e:	9c08      	ldr	r4, [sp, #32]
 801af50:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801af54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af56:	fb04 fa0e 	mul.w	sl, r4, lr
 801af5a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801af5e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801af62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af66:	44e6      	add	lr, ip
 801af68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801af6c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801af70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801af80:	ea4e 040a 	orr.w	r4, lr, sl
 801af84:	9408      	str	r4, [sp, #32]
 801af86:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af88:	2cff      	cmp	r4, #255	; 0xff
 801af8a:	d021      	beq.n	801afd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801af8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801af8e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af92:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af94:	fb04 fc0c 	mul.w	ip, r4, ip
 801af98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801af9a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801af9e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801afa2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801afa4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801afa8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801afac:	fb04 fa0a 	mul.w	sl, r4, sl
 801afb0:	44e6      	add	lr, ip
 801afb2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801afb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801afba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801afbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801afc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801afc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801afca:	ea4e 040a 	orr.w	r4, lr, sl
 801afce:	940d      	str	r4, [sp, #52]	; 0x34
 801afd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801afd2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801afd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801afda:	2aff      	cmp	r2, #255	; 0xff
 801afdc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801afe0:	9c08      	ldr	r4, [sp, #32]
 801afe2:	fb08 fc0c 	mul.w	ip, r8, ip
 801afe6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801afea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801afee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aff0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801aff4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801aff8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801affa:	fb09 cc0e 	mla	ip, r9, lr, ip
 801affe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b002:	fb08 f80e 	mul.w	r8, r8, lr
 801b006:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b00a:	fb01 8303 	mla	r3, r1, r3, r8
 801b00e:	9908      	ldr	r1, [sp, #32]
 801b010:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b014:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b018:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b01a:	fb00 330a 	mla	r3, r0, sl, r3
 801b01e:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801b022:	fb09 3e0e 	mla	lr, r9, lr, r3
 801b026:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b02a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b02e:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b032:	fa5f f08c 	uxtb.w	r0, ip
 801b036:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801b03a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b03e:	d032      	beq.n	801b0a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801b040:	43d2      	mvns	r2, r2
 801b042:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801b046:	b2d2      	uxtb	r2, r2
 801b048:	fb0e fe02 	mul.w	lr, lr, r2
 801b04c:	f10e 0301 	add.w	r3, lr, #1
 801b050:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801b054:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b058:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801b05c:	4350      	muls	r0, r2
 801b05e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801b062:	1c43      	adds	r3, r0, #1
 801b064:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b068:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b06c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801b070:	4353      	muls	r3, r2
 801b072:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b076:	1c5a      	adds	r2, r3, #1
 801b078:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b07c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801b080:	f807 cc01 	strb.w	ip, [r7, #-1]
 801b084:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b086:	3703      	adds	r7, #3
 801b088:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b08c:	441d      	add	r5, r3
 801b08e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b090:	441e      	add	r6, r3
 801b092:	e64e      	b.n	801ad32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801b094:	2800      	cmp	r0, #0
 801b096:	f43f aeed 	beq.w	801ae74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b09a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b09e:	9108      	str	r1, [sp, #32]
 801b0a0:	0e09      	lsrs	r1, r1, #24
 801b0a2:	9110      	str	r1, [sp, #64]	; 0x40
 801b0a4:	e6e6      	b.n	801ae74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b0a6:	f807 0c03 	strb.w	r0, [r7, #-3]
 801b0aa:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b0ae:	e7e7      	b.n	801b080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801b0b0:	b019      	add	sp, #100	; 0x64
 801b0b2:	ecbd 8b08 	vpop	{d8-d11}
 801b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b0bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801b0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0c0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b0c4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b0c8:	2800      	cmp	r0, #0
 801b0ca:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b0ce:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b0d2:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b0d6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b0da:	db6b      	blt.n	801b1b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b0dc:	4580      	cmp	r8, r0
 801b0de:	dd69      	ble.n	801b1b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b0e0:	f1bc 0f00 	cmp.w	ip, #0
 801b0e4:	db66      	blt.n	801b1b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b0e6:	45e1      	cmp	r9, ip
 801b0e8:	dd64      	ble.n	801b1b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b0ea:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b0ee:	f01e 0f01 	tst.w	lr, #1
 801b0f2:	5d16      	ldrb	r6, [r2, r4]
 801b0f4:	bf0c      	ite	eq
 801b0f6:	f006 060f 	andeq.w	r6, r6, #15
 801b0fa:	1136      	asrne	r6, r6, #4
 801b0fc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b100:	b2f6      	uxtb	r6, r6
 801b102:	f110 0a01 	adds.w	sl, r0, #1
 801b106:	d457      	bmi.n	801b1b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b108:	45d0      	cmp	r8, sl
 801b10a:	dd55      	ble.n	801b1b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b10c:	f1bc 0f00 	cmp.w	ip, #0
 801b110:	db52      	blt.n	801b1b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b112:	45e1      	cmp	r9, ip
 801b114:	dd50      	ble.n	801b1b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b116:	2f00      	cmp	r7, #0
 801b118:	f000 80ac 	beq.w	801b274 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801b11c:	f10e 0b01 	add.w	fp, lr, #1
 801b120:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b124:	f01b 0f01 	tst.w	fp, #1
 801b128:	5d14      	ldrb	r4, [r2, r4]
 801b12a:	bf0c      	ite	eq
 801b12c:	f004 040f 	andeq.w	r4, r4, #15
 801b130:	1124      	asrne	r4, r4, #4
 801b132:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b136:	b2e4      	uxtb	r4, r4
 801b138:	2d00      	cmp	r5, #0
 801b13a:	f000 8096 	beq.w	801b26a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801b13e:	2800      	cmp	r0, #0
 801b140:	f10c 0c01 	add.w	ip, ip, #1
 801b144:	db3c      	blt.n	801b1c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b146:	4580      	cmp	r8, r0
 801b148:	dd3a      	ble.n	801b1c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b14a:	f1bc 0f00 	cmp.w	ip, #0
 801b14e:	db37      	blt.n	801b1c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b150:	45e1      	cmp	r9, ip
 801b152:	dd35      	ble.n	801b1c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b154:	eb03 0b0e 	add.w	fp, r3, lr
 801b158:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b15c:	f01b 0f01 	tst.w	fp, #1
 801b160:	5c10      	ldrb	r0, [r2, r0]
 801b162:	bf0c      	ite	eq
 801b164:	f000 000f 	andeq.w	r0, r0, #15
 801b168:	1100      	asrne	r0, r0, #4
 801b16a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b16e:	b2c0      	uxtb	r0, r0
 801b170:	f1ba 0f00 	cmp.w	sl, #0
 801b174:	db26      	blt.n	801b1c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b176:	45d0      	cmp	r8, sl
 801b178:	dd24      	ble.n	801b1c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b17a:	f1bc 0f00 	cmp.w	ip, #0
 801b17e:	db21      	blt.n	801b1c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b180:	45e1      	cmp	r9, ip
 801b182:	dd1f      	ble.n	801b1c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b184:	b307      	cbz	r7, 801b1c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801b186:	3301      	adds	r3, #1
 801b188:	449e      	add	lr, r3
 801b18a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b18e:	f01e 0f01 	tst.w	lr, #1
 801b192:	5cd3      	ldrb	r3, [r2, r3]
 801b194:	bf0c      	ite	eq
 801b196:	f003 030f 	andeq.w	r3, r3, #15
 801b19a:	111b      	asrne	r3, r3, #4
 801b19c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b1a0:	b2db      	uxtb	r3, r3
 801b1a2:	2f0f      	cmp	r7, #15
 801b1a4:	d911      	bls.n	801b1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801b1a6:	4b35      	ldr	r3, [pc, #212]	; (801b27c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801b1a8:	f240 1157 	movw	r1, #343	; 0x157
 801b1ac:	4a34      	ldr	r2, [pc, #208]	; (801b280 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801b1ae:	4835      	ldr	r0, [pc, #212]	; (801b284 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801b1b0:	f001 f87c 	bl	801c2ac <__assert_func>
 801b1b4:	2600      	movs	r6, #0
 801b1b6:	e7a4      	b.n	801b102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801b1b8:	2400      	movs	r4, #0
 801b1ba:	e7bd      	b.n	801b138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801b1bc:	463c      	mov	r4, r7
 801b1be:	e7be      	b.n	801b13e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801b1c0:	2000      	movs	r0, #0
 801b1c2:	e7d5      	b.n	801b170 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801b1c4:	2300      	movs	r3, #0
 801b1c6:	e7ec      	b.n	801b1a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801b1c8:	463b      	mov	r3, r7
 801b1ca:	2d0f      	cmp	r5, #15
 801b1cc:	d8eb      	bhi.n	801b1a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801b1ce:	b2bf      	uxth	r7, r7
 801b1d0:	b2ad      	uxth	r5, r5
 801b1d2:	fb07 f205 	mul.w	r2, r7, r5
 801b1d6:	013f      	lsls	r7, r7, #4
 801b1d8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b1dc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b1e0:	1abf      	subs	r7, r7, r2
 801b1e2:	b2ad      	uxth	r5, r5
 801b1e4:	b2bf      	uxth	r7, r7
 801b1e6:	ebac 0c05 	sub.w	ip, ip, r5
 801b1ea:	437c      	muls	r4, r7
 801b1ec:	fa1f fc8c 	uxth.w	ip, ip
 801b1f0:	fb06 440c 	mla	r4, r6, ip, r4
 801b1f4:	fb05 4400 	mla	r4, r5, r0, r4
 801b1f8:	fb02 4203 	mla	r2, r2, r3, r4
 801b1fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b200:	b38a      	cbz	r2, 801b266 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801b202:	4b21      	ldr	r3, [pc, #132]	; (801b288 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801b204:	681c      	ldr	r4, [r3, #0]
 801b206:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801b20a:	b2e5      	uxtb	r5, r4
 801b20c:	4353      	muls	r3, r2
 801b20e:	1c5a      	adds	r2, r3, #1
 801b210:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b214:	1212      	asrs	r2, r2, #8
 801b216:	b290      	uxth	r0, r2
 801b218:	43d2      	mvns	r2, r2
 801b21a:	fb15 f500 	smulbb	r5, r5, r0
 801b21e:	b2d3      	uxtb	r3, r2
 801b220:	780a      	ldrb	r2, [r1, #0]
 801b222:	fb02 5203 	mla	r2, r2, r3, r5
 801b226:	b292      	uxth	r2, r2
 801b228:	1c55      	adds	r5, r2, #1
 801b22a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b22e:	784d      	ldrb	r5, [r1, #1]
 801b230:	fb15 f503 	smulbb	r5, r5, r3
 801b234:	1212      	asrs	r2, r2, #8
 801b236:	700a      	strb	r2, [r1, #0]
 801b238:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801b23c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b240:	fb02 5200 	mla	r2, r2, r0, r5
 801b244:	b292      	uxth	r2, r2
 801b246:	1c55      	adds	r5, r2, #1
 801b248:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b24c:	1212      	asrs	r2, r2, #8
 801b24e:	704a      	strb	r2, [r1, #1]
 801b250:	788a      	ldrb	r2, [r1, #2]
 801b252:	fb12 f303 	smulbb	r3, r2, r3
 801b256:	fb04 3300 	mla	r3, r4, r0, r3
 801b25a:	b29b      	uxth	r3, r3
 801b25c:	1c5a      	adds	r2, r3, #1
 801b25e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b262:	121b      	asrs	r3, r3, #8
 801b264:	708b      	strb	r3, [r1, #2]
 801b266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b26a:	2f0f      	cmp	r7, #15
 801b26c:	d89b      	bhi.n	801b1a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801b26e:	462b      	mov	r3, r5
 801b270:	4628      	mov	r0, r5
 801b272:	e7ac      	b.n	801b1ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801b274:	2d00      	cmp	r5, #0
 801b276:	d1a1      	bne.n	801b1bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801b278:	462c      	mov	r4, r5
 801b27a:	e7f8      	b.n	801b26e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801b27c:	080205a7 	.word	0x080205a7
 801b280:	08020a5e 	.word	0x08020a5e
 801b284:	0802062f 	.word	0x0802062f
 801b288:	24006c6c 	.word	0x24006c6c

0801b28c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b290:	ed2d 8b08 	vpush	{d8-d11}
 801b294:	b097      	sub	sp, #92	; 0x5c
 801b296:	eeb0 aa40 	vmov.f32	s20, s0
 801b29a:	eef0 9a60 	vmov.f32	s19, s1
 801b29e:	9214      	str	r2, [sp, #80]	; 0x50
 801b2a0:	eeb0 9a41 	vmov.f32	s18, s2
 801b2a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b2a6:	eeb0 8a62 	vmov.f32	s16, s5
 801b2aa:	9309      	str	r3, [sp, #36]	; 0x24
 801b2ac:	eef0 8a43 	vmov.f32	s17, s6
 801b2b0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801b2b4:	eef0 ba44 	vmov.f32	s23, s8
 801b2b8:	9015      	str	r0, [sp, #84]	; 0x54
 801b2ba:	eeb0 ba64 	vmov.f32	s22, s9
 801b2be:	6850      	ldr	r0, [r2, #4]
 801b2c0:	eef0 aa45 	vmov.f32	s21, s10
 801b2c4:	910c      	str	r1, [sp, #48]	; 0x30
 801b2c6:	930e      	str	r3, [sp, #56]	; 0x38
 801b2c8:	6812      	ldr	r2, [r2, #0]
 801b2ca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801b2ce:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801b2d2:	fb00 1303 	mla	r3, r0, r3, r1
 801b2d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2da:	eb02 0a03 	add.w	sl, r2, r3
 801b2de:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b2e0:	689b      	ldr	r3, [r3, #8]
 801b2e2:	3301      	adds	r3, #1
 801b2e4:	f023 0301 	bic.w	r3, r3, #1
 801b2e8:	930f      	str	r3, [sp, #60]	; 0x3c
 801b2ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b2ec:	681f      	ldr	r7, [r3, #0]
 801b2ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	dc03      	bgt.n	801b2fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b2f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	f340 8247 	ble.w	801b78a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801b2fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b2fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b302:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b306:	1e48      	subs	r0, r1, #1
 801b308:	f102 3cff 	add.w	ip, r2, #4294967295
 801b30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b30e:	2b00      	cmp	r3, #0
 801b310:	f340 80e5 	ble.w	801b4de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b314:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801b318:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b31c:	d406      	bmi.n	801b32c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b31e:	4586      	cmp	lr, r0
 801b320:	da04      	bge.n	801b32c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b322:	2b00      	cmp	r3, #0
 801b324:	db02      	blt.n	801b32c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b326:	4563      	cmp	r3, ip
 801b328:	f2c0 80da 	blt.w	801b4e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b32c:	f11e 0e01 	adds.w	lr, lr, #1
 801b330:	f100 80cb 	bmi.w	801b4ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b334:	4571      	cmp	r1, lr
 801b336:	f2c0 80c8 	blt.w	801b4ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b33a:	3301      	adds	r3, #1
 801b33c:	f100 80c5 	bmi.w	801b4ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b340:	429a      	cmp	r2, r3
 801b342:	f2c0 80c2 	blt.w	801b4ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b348:	46d0      	mov	r8, sl
 801b34a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b34e:	930d      	str	r3, [sp, #52]	; 0x34
 801b350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b352:	2b00      	cmp	r3, #0
 801b354:	f340 80e3 	ble.w	801b51e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b358:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b35a:	1430      	asrs	r0, r6, #16
 801b35c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b360:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b364:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b368:	142b      	asrs	r3, r5, #16
 801b36a:	f100 812e 	bmi.w	801b5ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b36e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801b372:	455b      	cmp	r3, fp
 801b374:	f280 8129 	bge.w	801b5ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b378:	2800      	cmp	r0, #0
 801b37a:	f2c0 8126 	blt.w	801b5ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b37e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801b382:	4558      	cmp	r0, fp
 801b384:	f280 8121 	bge.w	801b5ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b388:	fb00 3309 	mla	r3, r0, r9, r3
 801b38c:	0858      	lsrs	r0, r3, #1
 801b38e:	07dc      	lsls	r4, r3, #31
 801b390:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b394:	bf54      	ite	pl
 801b396:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b39a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b39e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b3a2:	fa5f fc8c 	uxtb.w	ip, ip
 801b3a6:	2a00      	cmp	r2, #0
 801b3a8:	f000 80fe 	beq.w	801b5a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801b3ac:	1c58      	adds	r0, r3, #1
 801b3ae:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b3b2:	07c0      	lsls	r0, r0, #31
 801b3b4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b3b8:	bf54      	ite	pl
 801b3ba:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b3be:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b3c2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b3c6:	fa5f f08e 	uxtb.w	r0, lr
 801b3ca:	9010      	str	r0, [sp, #64]	; 0x40
 801b3cc:	b1d9      	cbz	r1, 801b406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b3ce:	444b      	add	r3, r9
 801b3d0:	0858      	lsrs	r0, r3, #1
 801b3d2:	07dc      	lsls	r4, r3, #31
 801b3d4:	f103 0301 	add.w	r3, r3, #1
 801b3d8:	5c38      	ldrb	r0, [r7, r0]
 801b3da:	bf54      	ite	pl
 801b3dc:	f000 000f 	andpl.w	r0, r0, #15
 801b3e0:	1100      	asrmi	r0, r0, #4
 801b3e2:	07dc      	lsls	r4, r3, #31
 801b3e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b3e8:	b2c0      	uxtb	r0, r0
 801b3ea:	900a      	str	r0, [sp, #40]	; 0x28
 801b3ec:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801b3f0:	f817 e000 	ldrb.w	lr, [r7, r0]
 801b3f4:	bf54      	ite	pl
 801b3f6:	f00e 030f 	andpl.w	r3, lr, #15
 801b3fa:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801b3fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b402:	b2db      	uxtb	r3, r3
 801b404:	9311      	str	r3, [sp, #68]	; 0x44
 801b406:	b292      	uxth	r2, r2
 801b408:	b289      	uxth	r1, r1
 801b40a:	0113      	lsls	r3, r2, #4
 801b40c:	fb02 f001 	mul.w	r0, r2, r1
 801b410:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b412:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b416:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801b41a:	1a1b      	subs	r3, r3, r0
 801b41c:	b289      	uxth	r1, r1
 801b41e:	b29b      	uxth	r3, r3
 801b420:	ebae 0e01 	sub.w	lr, lr, r1
 801b424:	4353      	muls	r3, r2
 801b426:	fa1f fe8e 	uxth.w	lr, lr
 801b42a:	fb0c 320e 	mla	r2, ip, lr, r3
 801b42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b430:	fb01 2203 	mla	r2, r1, r3, r2
 801b434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b436:	fb00 2203 	mla	r2, r0, r3, r2
 801b43a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b43e:	2a00      	cmp	r2, #0
 801b440:	d039      	beq.n	801b4b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b442:	4bc7      	ldr	r3, [pc, #796]	; (801b760 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801b444:	6819      	ldr	r1, [r3, #0]
 801b446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b448:	fa5f fc81 	uxtb.w	ip, r1
 801b44c:	435a      	muls	r2, r3
 801b44e:	1c53      	adds	r3, r2, #1
 801b450:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b454:	1212      	asrs	r2, r2, #8
 801b456:	b290      	uxth	r0, r2
 801b458:	43d2      	mvns	r2, r2
 801b45a:	fb1c fc00 	smulbb	ip, ip, r0
 801b45e:	b2d3      	uxtb	r3, r2
 801b460:	f898 2000 	ldrb.w	r2, [r8]
 801b464:	fb02 c203 	mla	r2, r2, r3, ip
 801b468:	b292      	uxth	r2, r2
 801b46a:	f102 0c01 	add.w	ip, r2, #1
 801b46e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b472:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b476:	fb1c fc03 	smulbb	ip, ip, r3
 801b47a:	1212      	asrs	r2, r2, #8
 801b47c:	f888 2000 	strb.w	r2, [r8]
 801b480:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801b484:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801b488:	fb02 c200 	mla	r2, r2, r0, ip
 801b48c:	b292      	uxth	r2, r2
 801b48e:	f102 0c01 	add.w	ip, r2, #1
 801b492:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b496:	1212      	asrs	r2, r2, #8
 801b498:	f888 2001 	strb.w	r2, [r8, #1]
 801b49c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b4a0:	fb12 f303 	smulbb	r3, r2, r3
 801b4a4:	fb01 3300 	mla	r3, r1, r0, r3
 801b4a8:	b29b      	uxth	r3, r3
 801b4aa:	1c5a      	adds	r2, r3, #1
 801b4ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b4b0:	121b      	asrs	r3, r3, #8
 801b4b2:	f888 3002 	strb.w	r3, [r8, #2]
 801b4b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b4b8:	f108 0803 	add.w	r8, r8, #3
 801b4bc:	441d      	add	r5, r3
 801b4be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b4c0:	441e      	add	r6, r3
 801b4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4c4:	3b01      	subs	r3, #1
 801b4c6:	930d      	str	r3, [sp, #52]	; 0x34
 801b4c8:	e742      	b.n	801b350 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801b4ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b4cc:	f10a 0a03 	add.w	sl, sl, #3
 801b4d0:	441d      	add	r5, r3
 801b4d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b4d4:	441e      	add	r6, r3
 801b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4d8:	3b01      	subs	r3, #1
 801b4da:	9309      	str	r3, [sp, #36]	; 0x24
 801b4dc:	e716      	b.n	801b30c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b4de:	d024      	beq.n	801b52a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4e2:	982b      	ldr	r0, [sp, #172]	; 0xac
 801b4e4:	3b01      	subs	r3, #1
 801b4e6:	fb00 5003 	mla	r0, r0, r3, r5
 801b4ea:	1400      	asrs	r0, r0, #16
 801b4ec:	f53f af2b 	bmi.w	801b346 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b4f0:	3901      	subs	r1, #1
 801b4f2:	4288      	cmp	r0, r1
 801b4f4:	f6bf af27 	bge.w	801b346 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b4f8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b4fa:	fb01 6303 	mla	r3, r1, r3, r6
 801b4fe:	141b      	asrs	r3, r3, #16
 801b500:	f53f af21 	bmi.w	801b346 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b504:	3a01      	subs	r2, #1
 801b506:	4293      	cmp	r3, r2
 801b508:	f6bf af1d 	bge.w	801b346 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b50c:	f10a 0e03 	add.w	lr, sl, #3
 801b510:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b514:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b518:	f1b8 0f00 	cmp.w	r8, #0
 801b51c:	dc76      	bgt.n	801b60c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801b51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b520:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b524:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b528:	44a2      	add	sl, r4
 801b52a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	f340 812c 	ble.w	801b78a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801b532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b536:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b538:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b53c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b540:	eef0 6a48 	vmov.f32	s13, s16
 801b544:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b548:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b54c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b550:	ee16 5a90 	vmov	r5, s13
 801b554:	eef0 6a68 	vmov.f32	s13, s17
 801b558:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b55c:	ee16 6a90 	vmov	r6, s13
 801b560:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b564:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b568:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b56c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b570:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b574:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b578:	ee18 2a10 	vmov	r2, s16
 801b57c:	eeb0 8a47 	vmov.f32	s16, s14
 801b580:	fb92 f3f3 	sdiv	r3, r2, r3
 801b584:	ee18 2a90 	vmov	r2, s17
 801b588:	932b      	str	r3, [sp, #172]	; 0xac
 801b58a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b58c:	eef0 8a67 	vmov.f32	s17, s15
 801b590:	fb92 f3f3 	sdiv	r3, r2, r3
 801b594:	932c      	str	r3, [sp, #176]	; 0xb0
 801b596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b59a:	3b01      	subs	r3, #1
 801b59c:	930c      	str	r3, [sp, #48]	; 0x30
 801b59e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5a0:	bf08      	it	eq
 801b5a2:	4613      	moveq	r3, r2
 801b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b5a6:	e6a2      	b.n	801b2ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b5a8:	2900      	cmp	r1, #0
 801b5aa:	f43f af2c 	beq.w	801b406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b5ae:	eb09 0003 	add.w	r0, r9, r3
 801b5b2:	0843      	lsrs	r3, r0, #1
 801b5b4:	07c0      	lsls	r0, r0, #31
 801b5b6:	5cfb      	ldrb	r3, [r7, r3]
 801b5b8:	bf54      	ite	pl
 801b5ba:	f003 030f 	andpl.w	r3, r3, #15
 801b5be:	111b      	asrmi	r3, r3, #4
 801b5c0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b5c4:	b2db      	uxtb	r3, r3
 801b5c6:	930a      	str	r3, [sp, #40]	; 0x28
 801b5c8:	e71d      	b.n	801b406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b5ca:	f113 0b01 	adds.w	fp, r3, #1
 801b5ce:	f53f af72 	bmi.w	801b4b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b5d2:	45dc      	cmp	ip, fp
 801b5d4:	f6ff af6f 	blt.w	801b4b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b5d8:	f110 0b01 	adds.w	fp, r0, #1
 801b5dc:	f53f af6b 	bmi.w	801b4b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b5e0:	45de      	cmp	lr, fp
 801b5e2:	f6ff af68 	blt.w	801b4b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b5e6:	9302      	str	r3, [sp, #8]
 801b5e8:	fa0f f38e 	sxth.w	r3, lr
 801b5ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b5ee:	9301      	str	r3, [sp, #4]
 801b5f0:	fa0f f38c 	sxth.w	r3, ip
 801b5f4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b5f8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b5fc:	9300      	str	r3, [sp, #0]
 801b5fe:	463a      	mov	r2, r7
 801b600:	464b      	mov	r3, r9
 801b602:	4641      	mov	r1, r8
 801b604:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b606:	f7ff fd59 	bl	801b0bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801b60a:	e754      	b.n	801b4b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b60c:	142a      	asrs	r2, r5, #16
 801b60e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b612:	1433      	asrs	r3, r6, #16
 801b614:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b618:	fb09 2303 	mla	r3, r9, r3, r2
 801b61c:	085a      	lsrs	r2, r3, #1
 801b61e:	07dc      	lsls	r4, r3, #31
 801b620:	5cba      	ldrb	r2, [r7, r2]
 801b622:	bf54      	ite	pl
 801b624:	f002 020f 	andpl.w	r2, r2, #15
 801b628:	1112      	asrmi	r2, r2, #4
 801b62a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b62e:	b2d2      	uxtb	r2, r2
 801b630:	2900      	cmp	r1, #0
 801b632:	f000 8097 	beq.w	801b764 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801b636:	f103 0b01 	add.w	fp, r3, #1
 801b63a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801b63e:	f01b 0f01 	tst.w	fp, #1
 801b642:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b646:	bf0c      	ite	eq
 801b648:	f00c 0c0f 	andeq.w	ip, ip, #15
 801b64c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801b650:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b654:	fa5f f48c 	uxtb.w	r4, ip
 801b658:	9412      	str	r4, [sp, #72]	; 0x48
 801b65a:	b300      	cbz	r0, 801b69e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b65c:	444b      	add	r3, r9
 801b65e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b662:	07dc      	lsls	r4, r3, #31
 801b664:	f103 0301 	add.w	r3, r3, #1
 801b668:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b66c:	bf54      	ite	pl
 801b66e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b672:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b676:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b67a:	fa5f f48c 	uxtb.w	r4, ip
 801b67e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b682:	940b      	str	r4, [sp, #44]	; 0x2c
 801b684:	07dc      	lsls	r4, r3, #31
 801b686:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b68a:	bf54      	ite	pl
 801b68c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b690:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b694:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b698:	fa5f f38c 	uxtb.w	r3, ip
 801b69c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b69e:	b289      	uxth	r1, r1
 801b6a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6a2:	b280      	uxth	r0, r0
 801b6a4:	fb01 f300 	mul.w	r3, r1, r0
 801b6a8:	0109      	lsls	r1, r1, #4
 801b6aa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801b6ae:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801b6b2:	1ac9      	subs	r1, r1, r3
 801b6b4:	b280      	uxth	r0, r0
 801b6b6:	b289      	uxth	r1, r1
 801b6b8:	ebac 0c00 	sub.w	ip, ip, r0
 801b6bc:	4361      	muls	r1, r4
 801b6be:	fa1f fc8c 	uxth.w	ip, ip
 801b6c2:	fb02 120c 	mla	r2, r2, ip, r1
 801b6c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b6c8:	fb00 2001 	mla	r0, r0, r1, r2
 801b6cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b6ce:	fb03 0302 	mla	r3, r3, r2, r0
 801b6d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d039      	beq.n	801b74e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b6da:	4a21      	ldr	r2, [pc, #132]	; (801b760 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801b6dc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b6e0:	6810      	ldr	r0, [r2, #0]
 801b6e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b6e4:	fa5f fc80 	uxtb.w	ip, r0
 801b6e8:	4353      	muls	r3, r2
 801b6ea:	1c5a      	adds	r2, r3, #1
 801b6ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b6f0:	121b      	asrs	r3, r3, #8
 801b6f2:	b29a      	uxth	r2, r3
 801b6f4:	43db      	mvns	r3, r3
 801b6f6:	fb1c fc02 	smulbb	ip, ip, r2
 801b6fa:	b2db      	uxtb	r3, r3
 801b6fc:	fb01 c103 	mla	r1, r1, r3, ip
 801b700:	b289      	uxth	r1, r1
 801b702:	f101 0c01 	add.w	ip, r1, #1
 801b706:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b70a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801b70e:	fb1c fc03 	smulbb	ip, ip, r3
 801b712:	1209      	asrs	r1, r1, #8
 801b714:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b718:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801b71c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801b720:	fb01 c102 	mla	r1, r1, r2, ip
 801b724:	b289      	uxth	r1, r1
 801b726:	f101 0c01 	add.w	ip, r1, #1
 801b72a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b72e:	1209      	asrs	r1, r1, #8
 801b730:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b734:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b738:	fb11 f303 	smulbb	r3, r1, r3
 801b73c:	fb00 3002 	mla	r0, r0, r2, r3
 801b740:	b280      	uxth	r0, r0
 801b742:	1c42      	adds	r2, r0, #1
 801b744:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b748:	1200      	asrs	r0, r0, #8
 801b74a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801b74e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b750:	f10e 0e03 	add.w	lr, lr, #3
 801b754:	f108 38ff 	add.w	r8, r8, #4294967295
 801b758:	441d      	add	r5, r3
 801b75a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b75c:	441e      	add	r6, r3
 801b75e:	e6db      	b.n	801b518 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b760:	24006c6c 	.word	0x24006c6c
 801b764:	2800      	cmp	r0, #0
 801b766:	d09a      	beq.n	801b69e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b768:	444b      	add	r3, r9
 801b76a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b76e:	07db      	lsls	r3, r3, #31
 801b770:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b774:	bf54      	ite	pl
 801b776:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b77a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b77e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b782:	fa5f f38c 	uxtb.w	r3, ip
 801b786:	930b      	str	r3, [sp, #44]	; 0x2c
 801b788:	e789      	b.n	801b69e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b78a:	b017      	add	sp, #92	; 0x5c
 801b78c:	ecbd 8b08 	vpop	{d8-d11}
 801b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801b794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b798:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b79c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b7a0:	2800      	cmp	r0, #0
 801b7a2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b7a6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b7aa:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b7ae:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b7b2:	db6b      	blt.n	801b88c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7b4:	4580      	cmp	r8, r0
 801b7b6:	dd69      	ble.n	801b88c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7b8:	f1bc 0f00 	cmp.w	ip, #0
 801b7bc:	db66      	blt.n	801b88c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7be:	45e1      	cmp	r9, ip
 801b7c0:	dd64      	ble.n	801b88c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7c2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b7c6:	f01e 0f01 	tst.w	lr, #1
 801b7ca:	5d16      	ldrb	r6, [r2, r4]
 801b7cc:	bf0c      	ite	eq
 801b7ce:	f006 060f 	andeq.w	r6, r6, #15
 801b7d2:	1136      	asrne	r6, r6, #4
 801b7d4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b7d8:	b2f6      	uxtb	r6, r6
 801b7da:	f110 0a01 	adds.w	sl, r0, #1
 801b7de:	d457      	bmi.n	801b890 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b7e0:	45d0      	cmp	r8, sl
 801b7e2:	dd55      	ble.n	801b890 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b7e4:	f1bc 0f00 	cmp.w	ip, #0
 801b7e8:	db52      	blt.n	801b890 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b7ea:	45e1      	cmp	r9, ip
 801b7ec:	dd50      	ble.n	801b890 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b7ee:	2f00      	cmp	r7, #0
 801b7f0:	f000 80a5 	beq.w	801b93e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801b7f4:	f10e 0b01 	add.w	fp, lr, #1
 801b7f8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b7fc:	f01b 0f01 	tst.w	fp, #1
 801b800:	5d14      	ldrb	r4, [r2, r4]
 801b802:	bf0c      	ite	eq
 801b804:	f004 040f 	andeq.w	r4, r4, #15
 801b808:	1124      	asrne	r4, r4, #4
 801b80a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b80e:	b2e4      	uxtb	r4, r4
 801b810:	2d00      	cmp	r5, #0
 801b812:	f000 808f 	beq.w	801b934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801b816:	2800      	cmp	r0, #0
 801b818:	f10c 0c01 	add.w	ip, ip, #1
 801b81c:	db3c      	blt.n	801b898 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b81e:	4580      	cmp	r8, r0
 801b820:	dd3a      	ble.n	801b898 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b822:	f1bc 0f00 	cmp.w	ip, #0
 801b826:	db37      	blt.n	801b898 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b828:	45e1      	cmp	r9, ip
 801b82a:	dd35      	ble.n	801b898 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b82c:	eb03 0b0e 	add.w	fp, r3, lr
 801b830:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b834:	f01b 0f01 	tst.w	fp, #1
 801b838:	5c10      	ldrb	r0, [r2, r0]
 801b83a:	bf0c      	ite	eq
 801b83c:	f000 000f 	andeq.w	r0, r0, #15
 801b840:	1100      	asrne	r0, r0, #4
 801b842:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b846:	b2c0      	uxtb	r0, r0
 801b848:	f1ba 0f00 	cmp.w	sl, #0
 801b84c:	db26      	blt.n	801b89c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b84e:	45d0      	cmp	r8, sl
 801b850:	dd24      	ble.n	801b89c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b852:	f1bc 0f00 	cmp.w	ip, #0
 801b856:	db21      	blt.n	801b89c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b858:	45e1      	cmp	r9, ip
 801b85a:	dd1f      	ble.n	801b89c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b85c:	b307      	cbz	r7, 801b8a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801b85e:	3301      	adds	r3, #1
 801b860:	449e      	add	lr, r3
 801b862:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b866:	f01e 0f01 	tst.w	lr, #1
 801b86a:	5cd3      	ldrb	r3, [r2, r3]
 801b86c:	bf0c      	ite	eq
 801b86e:	f003 030f 	andeq.w	r3, r3, #15
 801b872:	111b      	asrne	r3, r3, #4
 801b874:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b878:	b2db      	uxtb	r3, r3
 801b87a:	2f0f      	cmp	r7, #15
 801b87c:	d911      	bls.n	801b8a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801b87e:	4b32      	ldr	r3, [pc, #200]	; (801b948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801b880:	f240 1157 	movw	r1, #343	; 0x157
 801b884:	4a31      	ldr	r2, [pc, #196]	; (801b94c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801b886:	4832      	ldr	r0, [pc, #200]	; (801b950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801b888:	f000 fd10 	bl	801c2ac <__assert_func>
 801b88c:	2600      	movs	r6, #0
 801b88e:	e7a4      	b.n	801b7da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801b890:	2400      	movs	r4, #0
 801b892:	e7bd      	b.n	801b810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801b894:	463c      	mov	r4, r7
 801b896:	e7be      	b.n	801b816 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801b898:	2000      	movs	r0, #0
 801b89a:	e7d5      	b.n	801b848 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801b89c:	2300      	movs	r3, #0
 801b89e:	e7ec      	b.n	801b87a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801b8a0:	463b      	mov	r3, r7
 801b8a2:	2d0f      	cmp	r5, #15
 801b8a4:	d8eb      	bhi.n	801b87e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b8a6:	b2bf      	uxth	r7, r7
 801b8a8:	b2ad      	uxth	r5, r5
 801b8aa:	fb07 f205 	mul.w	r2, r7, r5
 801b8ae:	013f      	lsls	r7, r7, #4
 801b8b0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b8b4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b8b8:	1abf      	subs	r7, r7, r2
 801b8ba:	b2ad      	uxth	r5, r5
 801b8bc:	b2bf      	uxth	r7, r7
 801b8be:	ebac 0c05 	sub.w	ip, ip, r5
 801b8c2:	437c      	muls	r4, r7
 801b8c4:	fa1f fc8c 	uxth.w	ip, ip
 801b8c8:	fb06 440c 	mla	r4, r6, ip, r4
 801b8cc:	fb05 4400 	mla	r4, r5, r0, r4
 801b8d0:	fb02 4303 	mla	r3, r2, r3, r4
 801b8d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b8d8:	b353      	cbz	r3, 801b930 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801b8da:	4a1e      	ldr	r2, [pc, #120]	; (801b954 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801b8dc:	7808      	ldrb	r0, [r1, #0]
 801b8de:	6814      	ldr	r4, [r2, #0]
 801b8e0:	b29a      	uxth	r2, r3
 801b8e2:	43db      	mvns	r3, r3
 801b8e4:	b2e5      	uxtb	r5, r4
 801b8e6:	b2db      	uxtb	r3, r3
 801b8e8:	fb15 f502 	smulbb	r5, r5, r2
 801b8ec:	fb00 5003 	mla	r0, r0, r3, r5
 801b8f0:	b280      	uxth	r0, r0
 801b8f2:	1c45      	adds	r5, r0, #1
 801b8f4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b8f8:	784d      	ldrb	r5, [r1, #1]
 801b8fa:	fb15 f503 	smulbb	r5, r5, r3
 801b8fe:	1200      	asrs	r0, r0, #8
 801b900:	7008      	strb	r0, [r1, #0]
 801b902:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b906:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b90a:	fb00 5002 	mla	r0, r0, r2, r5
 801b90e:	b280      	uxth	r0, r0
 801b910:	1c45      	adds	r5, r0, #1
 801b912:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b916:	1200      	asrs	r0, r0, #8
 801b918:	7048      	strb	r0, [r1, #1]
 801b91a:	7888      	ldrb	r0, [r1, #2]
 801b91c:	fb10 f303 	smulbb	r3, r0, r3
 801b920:	fb04 3202 	mla	r2, r4, r2, r3
 801b924:	b292      	uxth	r2, r2
 801b926:	1c53      	adds	r3, r2, #1
 801b928:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b92c:	1212      	asrs	r2, r2, #8
 801b92e:	708a      	strb	r2, [r1, #2]
 801b930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b934:	2f0f      	cmp	r7, #15
 801b936:	d8a2      	bhi.n	801b87e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b938:	462b      	mov	r3, r5
 801b93a:	4628      	mov	r0, r5
 801b93c:	e7b3      	b.n	801b8a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801b93e:	2d00      	cmp	r5, #0
 801b940:	d1a8      	bne.n	801b894 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801b942:	462c      	mov	r4, r5
 801b944:	e7f8      	b.n	801b938 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801b946:	bf00      	nop
 801b948:	080205a7 	.word	0x080205a7
 801b94c:	08020a5e 	.word	0x08020a5e
 801b950:	0802062f 	.word	0x0802062f
 801b954:	24006c6c 	.word	0x24006c6c

0801b958 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b95c:	ed2d 8b08 	vpush	{d8-d11}
 801b960:	b093      	sub	sp, #76	; 0x4c
 801b962:	461c      	mov	r4, r3
 801b964:	eeb0 aa40 	vmov.f32	s20, s0
 801b968:	920c      	str	r2, [sp, #48]	; 0x30
 801b96a:	eef0 9a60 	vmov.f32	s19, s1
 801b96e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b970:	eeb0 9a41 	vmov.f32	s18, s2
 801b974:	9011      	str	r0, [sp, #68]	; 0x44
 801b976:	eeb0 8a62 	vmov.f32	s16, s5
 801b97a:	6850      	ldr	r0, [r2, #4]
 801b97c:	eef0 8a43 	vmov.f32	s17, s6
 801b980:	9107      	str	r1, [sp, #28]
 801b982:	eef0 ba44 	vmov.f32	s23, s8
 801b986:	6812      	ldr	r2, [r2, #0]
 801b988:	eeb0 ba64 	vmov.f32	s22, s9
 801b98c:	eef0 aa45 	vmov.f32	s21, s10
 801b990:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b994:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801b998:	fb00 1303 	mla	r3, r0, r3, r1
 801b99c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9a0:	eb02 0b03 	add.w	fp, r2, r3
 801b9a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b9a6:	689b      	ldr	r3, [r3, #8]
 801b9a8:	3301      	adds	r3, #1
 801b9aa:	f023 0301 	bic.w	r3, r3, #1
 801b9ae:	9309      	str	r3, [sp, #36]	; 0x24
 801b9b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b9b2:	f8d3 8000 	ldr.w	r8, [r3]
 801b9b6:	9b07      	ldr	r3, [sp, #28]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	dc03      	bgt.n	801b9c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b9bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	f340 822b 	ble.w	801be1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b9c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b9c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b9ce:	1e48      	subs	r0, r1, #1
 801b9d0:	1e57      	subs	r7, r2, #1
 801b9d2:	2c00      	cmp	r4, #0
 801b9d4:	f340 80d7 	ble.w	801bb86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801b9d8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b9dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b9e0:	d406      	bmi.n	801b9f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9e2:	4584      	cmp	ip, r0
 801b9e4:	da04      	bge.n	801b9f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	db02      	blt.n	801b9f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9ea:	42bb      	cmp	r3, r7
 801b9ec:	f2c0 80cc 	blt.w	801bb88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b9f0:	f11c 0c01 	adds.w	ip, ip, #1
 801b9f4:	f100 80bf 	bmi.w	801bb76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801b9f8:	4561      	cmp	r1, ip
 801b9fa:	f2c0 80bc 	blt.w	801bb76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801b9fe:	3301      	adds	r3, #1
 801ba00:	f100 80b9 	bmi.w	801bb76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba04:	429a      	cmp	r2, r3
 801ba06:	f2c0 80b6 	blt.w	801bb76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba0a:	46a2      	mov	sl, r4
 801ba0c:	465f      	mov	r7, fp
 801ba0e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ba12:	f1ba 0f00 	cmp.w	sl, #0
 801ba16:	f340 80d4 	ble.w	801bbc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ba1a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801ba1e:	1430      	asrs	r0, r6, #16
 801ba20:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ba24:	9308      	str	r3, [sp, #32]
 801ba26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ba28:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801ba2c:	142b      	asrs	r3, r5, #16
 801ba2e:	f100 8124 	bmi.w	801bc7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba32:	f10c 32ff 	add.w	r2, ip, #4294967295
 801ba36:	4293      	cmp	r3, r2
 801ba38:	f280 811f 	bge.w	801bc7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba3c:	2800      	cmp	r0, #0
 801ba3e:	f2c0 811c 	blt.w	801bc7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba42:	f10e 32ff 	add.w	r2, lr, #4294967295
 801ba46:	4290      	cmp	r0, r2
 801ba48:	f280 8117 	bge.w	801bc7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba4c:	fb00 3309 	mla	r3, r0, r9, r3
 801ba50:	0858      	lsrs	r0, r3, #1
 801ba52:	07da      	lsls	r2, r3, #31
 801ba54:	9a08      	ldr	r2, [sp, #32]
 801ba56:	f818 c000 	ldrb.w	ip, [r8, r0]
 801ba5a:	bf54      	ite	pl
 801ba5c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ba60:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ba64:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ba68:	fa5f fc8c 	uxtb.w	ip, ip
 801ba6c:	2a00      	cmp	r2, #0
 801ba6e:	f000 80ed 	beq.w	801bc4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ba72:	1c58      	adds	r0, r3, #1
 801ba74:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801ba78:	07c0      	lsls	r0, r0, #31
 801ba7a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801ba7e:	bf54      	ite	pl
 801ba80:	f00e 0e0f 	andpl.w	lr, lr, #15
 801ba84:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ba88:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801ba8c:	fa5f fe8e 	uxtb.w	lr, lr
 801ba90:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801ba94:	b1c9      	cbz	r1, 801baca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801ba96:	444b      	add	r3, r9
 801ba98:	0858      	lsrs	r0, r3, #1
 801ba9a:	07da      	lsls	r2, r3, #31
 801ba9c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801baa0:	bf54      	ite	pl
 801baa2:	f000 000f 	andpl.w	r0, r0, #15
 801baa6:	1100      	asrmi	r0, r0, #4
 801baa8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801baac:	b2c0      	uxtb	r0, r0
 801baae:	900a      	str	r0, [sp, #40]	; 0x28
 801bab0:	1c58      	adds	r0, r3, #1
 801bab2:	0843      	lsrs	r3, r0, #1
 801bab4:	07c2      	lsls	r2, r0, #31
 801bab6:	f818 3003 	ldrb.w	r3, [r8, r3]
 801baba:	bf54      	ite	pl
 801babc:	f003 030f 	andpl.w	r3, r3, #15
 801bac0:	111b      	asrmi	r3, r3, #4
 801bac2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bac6:	b2db      	uxtb	r3, r3
 801bac8:	930e      	str	r3, [sp, #56]	; 0x38
 801baca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bace:	b289      	uxth	r1, r1
 801bad0:	fb02 f301 	mul.w	r3, r2, r1
 801bad4:	0112      	lsls	r2, r2, #4
 801bad6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801bada:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801bade:	1ad2      	subs	r2, r2, r3
 801bae0:	b289      	uxth	r1, r1
 801bae2:	b292      	uxth	r2, r2
 801bae4:	1a40      	subs	r0, r0, r1
 801bae6:	fa1f fe80 	uxth.w	lr, r0
 801baea:	980d      	ldr	r0, [sp, #52]	; 0x34
 801baec:	4342      	muls	r2, r0
 801baee:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801baf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801baf4:	fb01 c102 	mla	r1, r1, r2, ip
 801baf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bafa:	fb03 1302 	mla	r3, r3, r2, r1
 801bafe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bb02:	b383      	cbz	r3, 801bb66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bb04:	4ac7      	ldr	r2, [pc, #796]	; (801be24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801bb06:	2bff      	cmp	r3, #255	; 0xff
 801bb08:	6812      	ldr	r2, [r2, #0]
 801bb0a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801bb0e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801bb12:	b2d2      	uxtb	r2, r2
 801bb14:	f000 80ac 	beq.w	801bc70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801bb18:	b299      	uxth	r1, r3
 801bb1a:	43db      	mvns	r3, r3
 801bb1c:	f897 c000 	ldrb.w	ip, [r7]
 801bb20:	fb12 f201 	smulbb	r2, r2, r1
 801bb24:	b2db      	uxtb	r3, r3
 801bb26:	fb10 f001 	smulbb	r0, r0, r1
 801bb2a:	fb0c 2203 	mla	r2, ip, r3, r2
 801bb2e:	fb1e f101 	smulbb	r1, lr, r1
 801bb32:	b292      	uxth	r2, r2
 801bb34:	f102 0c01 	add.w	ip, r2, #1
 801bb38:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801bb3c:	1212      	asrs	r2, r2, #8
 801bb3e:	703a      	strb	r2, [r7, #0]
 801bb40:	787a      	ldrb	r2, [r7, #1]
 801bb42:	fb02 0003 	mla	r0, r2, r3, r0
 801bb46:	b280      	uxth	r0, r0
 801bb48:	1c42      	adds	r2, r0, #1
 801bb4a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bb4e:	78ba      	ldrb	r2, [r7, #2]
 801bb50:	fb02 1303 	mla	r3, r2, r3, r1
 801bb54:	1200      	asrs	r0, r0, #8
 801bb56:	b29b      	uxth	r3, r3
 801bb58:	7078      	strb	r0, [r7, #1]
 801bb5a:	f103 0e01 	add.w	lr, r3, #1
 801bb5e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801bb62:	121b      	asrs	r3, r3, #8
 801bb64:	70bb      	strb	r3, [r7, #2]
 801bb66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bb68:	3703      	adds	r7, #3
 801bb6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb6e:	441d      	add	r5, r3
 801bb70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb72:	441e      	add	r6, r3
 801bb74:	e74d      	b.n	801ba12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801bb76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bb78:	3c01      	subs	r4, #1
 801bb7a:	f10b 0b03 	add.w	fp, fp, #3
 801bb7e:	441d      	add	r5, r3
 801bb80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb82:	441e      	add	r6, r3
 801bb84:	e725      	b.n	801b9d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801bb86:	d021      	beq.n	801bbcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801bb88:	1e63      	subs	r3, r4, #1
 801bb8a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801bb8c:	fb00 5003 	mla	r0, r0, r3, r5
 801bb90:	1400      	asrs	r0, r0, #16
 801bb92:	f53f af3a 	bmi.w	801ba0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bb96:	3901      	subs	r1, #1
 801bb98:	4288      	cmp	r0, r1
 801bb9a:	f6bf af36 	bge.w	801ba0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bb9e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bba0:	fb01 6303 	mla	r3, r1, r3, r6
 801bba4:	141b      	asrs	r3, r3, #16
 801bba6:	f53f af30 	bmi.w	801ba0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bbaa:	3a01      	subs	r2, #1
 801bbac:	4293      	cmp	r3, r2
 801bbae:	f6bf af2c 	bge.w	801ba0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bbb2:	f10b 0c03 	add.w	ip, fp, #3
 801bbb6:	46a6      	mov	lr, r4
 801bbb8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801bbbc:	f1be 0f00 	cmp.w	lr, #0
 801bbc0:	dc79      	bgt.n	801bcb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801bbc2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801bbc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bbca:	44a3      	add	fp, r4
 801bbcc:	9b07      	ldr	r3, [sp, #28]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	f340 8123 	ble.w	801be1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bbd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bbd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bbda:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801bbde:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801bbe2:	eef0 6a48 	vmov.f32	s13, s16
 801bbe6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801bbea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bbee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bbf2:	ee16 5a90 	vmov	r5, s13
 801bbf6:	eef0 6a68 	vmov.f32	s13, s17
 801bbfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bbfe:	ee16 6a90 	vmov	r6, s13
 801bc02:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bc06:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bc0a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bc0e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bc12:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bc16:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bc1a:	ee18 2a10 	vmov	r2, s16
 801bc1e:	eeb0 8a47 	vmov.f32	s16, s14
 801bc22:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc26:	ee18 2a90 	vmov	r2, s17
 801bc2a:	9327      	str	r3, [sp, #156]	; 0x9c
 801bc2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc2e:	eef0 8a67 	vmov.f32	s17, s15
 801bc32:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc36:	9328      	str	r3, [sp, #160]	; 0xa0
 801bc38:	9b07      	ldr	r3, [sp, #28]
 801bc3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc3c:	3b01      	subs	r3, #1
 801bc3e:	9307      	str	r3, [sp, #28]
 801bc40:	bf08      	it	eq
 801bc42:	4614      	moveq	r4, r2
 801bc44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc46:	bf18      	it	ne
 801bc48:	461c      	movne	r4, r3
 801bc4a:	e6b4      	b.n	801b9b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bc4c:	2900      	cmp	r1, #0
 801bc4e:	f43f af3c 	beq.w	801baca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bc52:	eb09 0003 	add.w	r0, r9, r3
 801bc56:	0843      	lsrs	r3, r0, #1
 801bc58:	07c0      	lsls	r0, r0, #31
 801bc5a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bc5e:	bf54      	ite	pl
 801bc60:	f003 030f 	andpl.w	r3, r3, #15
 801bc64:	111b      	asrmi	r3, r3, #4
 801bc66:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bc6a:	b2db      	uxtb	r3, r3
 801bc6c:	930a      	str	r3, [sp, #40]	; 0x28
 801bc6e:	e72c      	b.n	801baca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bc70:	703a      	strb	r2, [r7, #0]
 801bc72:	7078      	strb	r0, [r7, #1]
 801bc74:	f887 e002 	strb.w	lr, [r7, #2]
 801bc78:	e775      	b.n	801bb66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bc7a:	1c5a      	adds	r2, r3, #1
 801bc7c:	f53f af73 	bmi.w	801bb66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bc80:	4594      	cmp	ip, r2
 801bc82:	f6ff af70 	blt.w	801bb66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bc86:	1c42      	adds	r2, r0, #1
 801bc88:	f53f af6d 	bmi.w	801bb66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bc8c:	4596      	cmp	lr, r2
 801bc8e:	f6ff af6a 	blt.w	801bb66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bc92:	9302      	str	r3, [sp, #8]
 801bc94:	fa0f f38e 	sxth.w	r3, lr
 801bc98:	9a08      	ldr	r2, [sp, #32]
 801bc9a:	9301      	str	r3, [sp, #4]
 801bc9c:	fa0f f38c 	sxth.w	r3, ip
 801bca0:	9105      	str	r1, [sp, #20]
 801bca2:	4639      	mov	r1, r7
 801bca4:	9300      	str	r3, [sp, #0]
 801bca6:	464b      	mov	r3, r9
 801bca8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801bcac:	4642      	mov	r2, r8
 801bcae:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bcb0:	f7ff fd70 	bl	801b794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801bcb4:	e757      	b.n	801bb66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bcb6:	142a      	asrs	r2, r5, #16
 801bcb8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bcbc:	1433      	asrs	r3, r6, #16
 801bcbe:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801bcc2:	fb09 2303 	mla	r3, r9, r3, r2
 801bcc6:	085a      	lsrs	r2, r3, #1
 801bcc8:	07d9      	lsls	r1, r3, #31
 801bcca:	f818 2002 	ldrb.w	r2, [r8, r2]
 801bcce:	bf54      	ite	pl
 801bcd0:	f002 020f 	andpl.w	r2, r2, #15
 801bcd4:	1112      	asrmi	r2, r2, #4
 801bcd6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bcda:	b2d2      	uxtb	r2, r2
 801bcdc:	2800      	cmp	r0, #0
 801bcde:	f000 8085 	beq.w	801bdec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801bce2:	f103 0a01 	add.w	sl, r3, #1
 801bce6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801bcea:	f01a 0f01 	tst.w	sl, #1
 801bcee:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bcf2:	bf0c      	ite	eq
 801bcf4:	f001 010f 	andeq.w	r1, r1, #15
 801bcf8:	1109      	asrne	r1, r1, #4
 801bcfa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bcfe:	b2c9      	uxtb	r1, r1
 801bd00:	910f      	str	r1, [sp, #60]	; 0x3c
 801bd02:	b1df      	cbz	r7, 801bd3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801bd04:	444b      	add	r3, r9
 801bd06:	0859      	lsrs	r1, r3, #1
 801bd08:	f013 0f01 	tst.w	r3, #1
 801bd0c:	f103 0301 	add.w	r3, r3, #1
 801bd10:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bd14:	bf0c      	ite	eq
 801bd16:	f001 010f 	andeq.w	r1, r1, #15
 801bd1a:	1109      	asrne	r1, r1, #4
 801bd1c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bd20:	b2c9      	uxtb	r1, r1
 801bd22:	910b      	str	r1, [sp, #44]	; 0x2c
 801bd24:	0859      	lsrs	r1, r3, #1
 801bd26:	07db      	lsls	r3, r3, #31
 801bd28:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bd2c:	bf54      	ite	pl
 801bd2e:	f001 010f 	andpl.w	r1, r1, #15
 801bd32:	1109      	asrmi	r1, r1, #4
 801bd34:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bd38:	b2c9      	uxtb	r1, r1
 801bd3a:	9110      	str	r1, [sp, #64]	; 0x40
 801bd3c:	b280      	uxth	r0, r0
 801bd3e:	b2bf      	uxth	r7, r7
 801bd40:	fb00 f307 	mul.w	r3, r0, r7
 801bd44:	0100      	lsls	r0, r0, #4
 801bd46:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801bd4a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801bd4e:	1ac0      	subs	r0, r0, r3
 801bd50:	b2bf      	uxth	r7, r7
 801bd52:	b280      	uxth	r0, r0
 801bd54:	1bc9      	subs	r1, r1, r7
 801bd56:	fa1f fa81 	uxth.w	sl, r1
 801bd5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bd5c:	4348      	muls	r0, r1
 801bd5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bd60:	fb02 020a 	mla	r2, r2, sl, r0
 801bd64:	fb07 2701 	mla	r7, r7, r1, r2
 801bd68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd6a:	fb03 7302 	mla	r3, r3, r2, r7
 801bd6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bd72:	b393      	cbz	r3, 801bdda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801bd74:	4a2b      	ldr	r2, [pc, #172]	; (801be24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801bd76:	2bff      	cmp	r3, #255	; 0xff
 801bd78:	6811      	ldr	r1, [r2, #0]
 801bd7a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801bd7e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801bd82:	b2c9      	uxtb	r1, r1
 801bd84:	d042      	beq.n	801be0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801bd86:	b298      	uxth	r0, r3
 801bd88:	43db      	mvns	r3, r3
 801bd8a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801bd8e:	fb11 f100 	smulbb	r1, r1, r0
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	fb17 f700 	smulbb	r7, r7, r0
 801bd98:	fb02 1103 	mla	r1, r2, r3, r1
 801bd9c:	fb1a f000 	smulbb	r0, sl, r0
 801bda0:	b289      	uxth	r1, r1
 801bda2:	1c4a      	adds	r2, r1, #1
 801bda4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801bda8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801bdac:	fb02 7703 	mla	r7, r2, r3, r7
 801bdb0:	1209      	asrs	r1, r1, #8
 801bdb2:	b2bf      	uxth	r7, r7
 801bdb4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801bdb8:	1c7a      	adds	r2, r7, #1
 801bdba:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bdbe:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801bdc2:	fb02 0303 	mla	r3, r2, r3, r0
 801bdc6:	123f      	asrs	r7, r7, #8
 801bdc8:	b29b      	uxth	r3, r3
 801bdca:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801bdce:	1c5a      	adds	r2, r3, #1
 801bdd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bdd4:	121b      	asrs	r3, r3, #8
 801bdd6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801bdda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bddc:	f10c 0c03 	add.w	ip, ip, #3
 801bde0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bde4:	441d      	add	r5, r3
 801bde6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bde8:	441e      	add	r6, r3
 801bdea:	e6e7      	b.n	801bbbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801bdec:	2f00      	cmp	r7, #0
 801bdee:	d0a5      	beq.n	801bd3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801bdf0:	444b      	add	r3, r9
 801bdf2:	0859      	lsrs	r1, r3, #1
 801bdf4:	07db      	lsls	r3, r3, #31
 801bdf6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bdfa:	bf54      	ite	pl
 801bdfc:	f001 010f 	andpl.w	r1, r1, #15
 801be00:	1109      	asrmi	r1, r1, #4
 801be02:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801be06:	b2c9      	uxtb	r1, r1
 801be08:	910b      	str	r1, [sp, #44]	; 0x2c
 801be0a:	e797      	b.n	801bd3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801be0c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801be10:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801be14:	f80c ac01 	strb.w	sl, [ip, #-1]
 801be18:	e7df      	b.n	801bdda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801be1a:	b013      	add	sp, #76	; 0x4c
 801be1c:	ecbd 8b08 	vpop	{d8-d11}
 801be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be24:	24006c6c 	.word	0x24006c6c

0801be28 <CRC_Lock>:
 801be28:	4a20      	ldr	r2, [pc, #128]	; (801beac <CRC_Lock+0x84>)
 801be2a:	b530      	push	{r4, r5, lr}
 801be2c:	6813      	ldr	r3, [r2, #0]
 801be2e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801be32:	f24c 2540 	movw	r5, #49728	; 0xc240
 801be36:	f023 0301 	bic.w	r3, r3, #1
 801be3a:	6013      	str	r3, [r2, #0]
 801be3c:	4b1c      	ldr	r3, [pc, #112]	; (801beb0 <CRC_Lock+0x88>)
 801be3e:	681a      	ldr	r2, [r3, #0]
 801be40:	4022      	ands	r2, r4
 801be42:	42aa      	cmp	r2, r5
 801be44:	d005      	beq.n	801be52 <CRC_Lock+0x2a>
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	f24c 2270 	movw	r2, #49776	; 0xc270
 801be4c:	4023      	ands	r3, r4
 801be4e:	4293      	cmp	r3, r2
 801be50:	d124      	bne.n	801be9c <CRC_Lock+0x74>
 801be52:	4b18      	ldr	r3, [pc, #96]	; (801beb4 <CRC_Lock+0x8c>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	bb0b      	cbnz	r3, 801be9c <CRC_Lock+0x74>
 801be58:	4b17      	ldr	r3, [pc, #92]	; (801beb8 <CRC_Lock+0x90>)
 801be5a:	681a      	ldr	r2, [r3, #0]
 801be5c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801be60:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801be64:	d00d      	beq.n	801be82 <CRC_Lock+0x5a>
 801be66:	681a      	ldr	r2, [r3, #0]
 801be68:	f240 4483 	movw	r4, #1155	; 0x483
 801be6c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801be70:	42a2      	cmp	r2, r4
 801be72:	d006      	beq.n	801be82 <CRC_Lock+0x5a>
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	f240 4285 	movw	r2, #1157	; 0x485
 801be7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801be7e:	4293      	cmp	r3, r2
 801be80:	d10c      	bne.n	801be9c <CRC_Lock+0x74>
 801be82:	4b0e      	ldr	r3, [pc, #56]	; (801bebc <CRC_Lock+0x94>)
 801be84:	2201      	movs	r2, #1
 801be86:	601a      	str	r2, [r3, #0]
 801be88:	681a      	ldr	r2, [r3, #0]
 801be8a:	2a00      	cmp	r2, #0
 801be8c:	d1fc      	bne.n	801be88 <CRC_Lock+0x60>
 801be8e:	4b0c      	ldr	r3, [pc, #48]	; (801bec0 <CRC_Lock+0x98>)
 801be90:	6018      	str	r0, [r3, #0]
 801be92:	6818      	ldr	r0, [r3, #0]
 801be94:	1a43      	subs	r3, r0, r1
 801be96:	4258      	negs	r0, r3
 801be98:	4158      	adcs	r0, r3
 801be9a:	bd30      	pop	{r4, r5, pc}
 801be9c:	4b09      	ldr	r3, [pc, #36]	; (801bec4 <CRC_Lock+0x9c>)
 801be9e:	2201      	movs	r2, #1
 801bea0:	601a      	str	r2, [r3, #0]
 801bea2:	681a      	ldr	r2, [r3, #0]
 801bea4:	2a00      	cmp	r2, #0
 801bea6:	d1fc      	bne.n	801bea2 <CRC_Lock+0x7a>
 801bea8:	4b07      	ldr	r3, [pc, #28]	; (801bec8 <CRC_Lock+0xa0>)
 801beaa:	e7f1      	b.n	801be90 <CRC_Lock+0x68>
 801beac:	e0002000 	.word	0xe0002000
 801beb0:	e000ed00 	.word	0xe000ed00
 801beb4:	e0042000 	.word	0xe0042000
 801beb8:	5c001000 	.word	0x5c001000
 801bebc:	58024c08 	.word	0x58024c08
 801bec0:	58024c00 	.word	0x58024c00
 801bec4:	40023008 	.word	0x40023008
 801bec8:	40023000 	.word	0x40023000

0801becc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801becc:	6101      	str	r1, [r0, #16]
 801bece:	4770      	bx	lr

0801bed0 <_ZN8touchgfx8Gestures4tickEv>:
 801bed0:	7b83      	ldrb	r3, [r0, #14]
 801bed2:	b14b      	cbz	r3, 801bee8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801bed4:	8903      	ldrh	r3, [r0, #8]
 801bed6:	3301      	adds	r3, #1
 801bed8:	b29b      	uxth	r3, r3
 801beda:	2b07      	cmp	r3, #7
 801bedc:	8103      	strh	r3, [r0, #8]
 801bede:	bf81      	itttt	hi
 801bee0:	2300      	movhi	r3, #0
 801bee2:	8143      	strhhi	r3, [r0, #10]
 801bee4:	8183      	strhhi	r3, [r0, #12]
 801bee6:	7383      	strbhi	r3, [r0, #14]
 801bee8:	4770      	bx	lr
	...

0801beec <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801beec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bef0:	4604      	mov	r4, r0
 801bef2:	4698      	mov	r8, r3
 801bef4:	8880      	ldrh	r0, [r0, #4]
 801bef6:	4617      	mov	r7, r2
 801bef8:	4b1d      	ldr	r3, [pc, #116]	; (801bf70 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801befa:	460e      	mov	r6, r1
 801befc:	f8ad 0006 	strh.w	r0, [sp, #6]
 801bf00:	eba8 0000 	sub.w	r0, r8, r0
 801bf04:	9300      	str	r3, [sp, #0]
 801bf06:	2300      	movs	r3, #0
 801bf08:	b280      	uxth	r0, r0
 801bf0a:	8aa2      	ldrh	r2, [r4, #20]
 801bf0c:	f88d 3004 	strb.w	r3, [sp, #4]
 801bf10:	b203      	sxth	r3, r0
 801bf12:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801bf16:	88e1      	ldrh	r1, [r4, #6]
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801bf1e:	f8ad 1008 	strh.w	r1, [sp, #8]
 801bf22:	bfb8      	it	lt
 801bf24:	4240      	neglt	r0, r0
 801bf26:	f8ad 500c 	strh.w	r5, [sp, #12]
 801bf2a:	bfb8      	it	lt
 801bf2c:	b203      	sxthlt	r3, r0
 801bf2e:	4293      	cmp	r3, r2
 801bf30:	dc08      	bgt.n	801bf44 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801bf32:	1a69      	subs	r1, r5, r1
 801bf34:	b289      	uxth	r1, r1
 801bf36:	b20b      	sxth	r3, r1
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	bfbc      	itt	lt
 801bf3c:	4249      	neglt	r1, r1
 801bf3e:	b20b      	sxthlt	r3, r1
 801bf40:	429a      	cmp	r2, r3
 801bf42:	da13      	bge.n	801bf6c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801bf44:	6920      	ldr	r0, [r4, #16]
 801bf46:	4669      	mov	r1, sp
 801bf48:	eba8 0606 	sub.w	r6, r8, r6
 801bf4c:	1bef      	subs	r7, r5, r7
 801bf4e:	6803      	ldr	r3, [r0, #0]
 801bf50:	685b      	ldr	r3, [r3, #4]
 801bf52:	4798      	blx	r3
 801bf54:	2300      	movs	r3, #0
 801bf56:	2001      	movs	r0, #1
 801bf58:	8166      	strh	r6, [r4, #10]
 801bf5a:	8123      	strh	r3, [r4, #8]
 801bf5c:	81a7      	strh	r7, [r4, #12]
 801bf5e:	f8a4 8004 	strh.w	r8, [r4, #4]
 801bf62:	80e5      	strh	r5, [r4, #6]
 801bf64:	73a0      	strb	r0, [r4, #14]
 801bf66:	b004      	add	sp, #16
 801bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf6c:	2000      	movs	r0, #0
 801bf6e:	e7fa      	b.n	801bf66 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801bf70:	0801fa60 	.word	0x0801fa60

0801bf74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801bf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf76:	461e      	mov	r6, r3
 801bf78:	1e4b      	subs	r3, r1, #1
 801bf7a:	b085      	sub	sp, #20
 801bf7c:	4604      	mov	r4, r0
 801bf7e:	2b01      	cmp	r3, #1
 801bf80:	460d      	mov	r5, r1
 801bf82:	4617      	mov	r7, r2
 801bf84:	d84b      	bhi.n	801c01e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801bf86:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bf8a:	1cd3      	adds	r3, r2, #3
 801bf8c:	b29b      	uxth	r3, r3
 801bf8e:	2b06      	cmp	r3, #6
 801bf90:	d916      	bls.n	801bfc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801bf92:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801c034 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bf96:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bf9a:	f8cd c004 	str.w	ip, [sp, #4]
 801bf9e:	f04f 0c00 	mov.w	ip, #0
 801bfa2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bfa6:	6900      	ldr	r0, [r0, #16]
 801bfa8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bfac:	a901      	add	r1, sp, #4
 801bfae:	f88d c008 	strb.w	ip, [sp, #8]
 801bfb2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bfb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bfba:	6803      	ldr	r3, [r0, #0]
 801bfbc:	689b      	ldr	r3, [r3, #8]
 801bfbe:	4798      	blx	r3
 801bfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bfc4:	1cd3      	adds	r3, r2, #3
 801bfc6:	b29b      	uxth	r3, r3
 801bfc8:	2b06      	cmp	r3, #6
 801bfca:	d916      	bls.n	801bffa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bfcc:	f8df c064 	ldr.w	ip, [pc, #100]	; 801c034 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bfd0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bfd4:	f8cd c004 	str.w	ip, [sp, #4]
 801bfd8:	f04f 0c01 	mov.w	ip, #1
 801bfdc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bfe0:	6920      	ldr	r0, [r4, #16]
 801bfe2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bfe6:	a901      	add	r1, sp, #4
 801bfe8:	f88d c008 	strb.w	ip, [sp, #8]
 801bfec:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bff0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bff4:	6803      	ldr	r3, [r0, #0]
 801bff6:	689b      	ldr	r3, [r3, #8]
 801bff8:	4798      	blx	r3
 801bffa:	4b0d      	ldr	r3, [pc, #52]	; (801c030 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801bffc:	a901      	add	r1, sp, #4
 801bffe:	6920      	ldr	r0, [r4, #16]
 801c000:	9301      	str	r3, [sp, #4]
 801c002:	2300      	movs	r3, #0
 801c004:	f88d 5008 	strb.w	r5, [sp, #8]
 801c008:	f8ad 700a 	strh.w	r7, [sp, #10]
 801c00c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801c010:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c014:	6803      	ldr	r3, [r0, #0]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	4798      	blx	r3
 801c01a:	b005      	add	sp, #20
 801c01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c01e:	2900      	cmp	r1, #0
 801c020:	d1eb      	bne.n	801bffa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c022:	80a2      	strh	r2, [r4, #4]
 801c024:	80c6      	strh	r6, [r0, #6]
 801c026:	60a1      	str	r1, [r4, #8]
 801c028:	81a1      	strh	r1, [r4, #12]
 801c02a:	73a1      	strb	r1, [r4, #14]
 801c02c:	e7e5      	b.n	801bffa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c02e:	bf00      	nop
 801c030:	0801fa4c 	.word	0x0801fa4c
 801c034:	0801fa74 	.word	0x0801fa74

0801c038 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801c038:	790b      	ldrb	r3, [r1, #4]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	bf0c      	ite	eq
 801c03e:	2301      	moveq	r3, #1
 801c040:	2300      	movne	r3, #0
 801c042:	b570      	push	{r4, r5, r6, lr}
 801c044:	4604      	mov	r4, r0
 801c046:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801c04a:	460e      	mov	r6, r1
 801c04c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801c050:	d109      	bne.n	801c066 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801c052:	b14d      	cbz	r5, 801c068 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801c054:	7933      	ldrb	r3, [r6, #4]
 801c056:	2b01      	cmp	r3, #1
 801c058:	d10c      	bne.n	801c074 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c05a:	6823      	ldr	r3, [r4, #0]
 801c05c:	4620      	mov	r0, r4
 801c05e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c064:	4718      	bx	r3
 801c066:	b12d      	cbz	r5, 801c074 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c068:	6823      	ldr	r3, [r4, #0]
 801c06a:	4620      	mov	r0, r4
 801c06c:	695b      	ldr	r3, [r3, #20]
 801c06e:	4798      	blx	r3
 801c070:	2d00      	cmp	r5, #0
 801c072:	d1ef      	bne.n	801c054 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801c074:	bd70      	pop	{r4, r5, r6, pc}

0801c076 <__aeabi_atexit>:
 801c076:	460b      	mov	r3, r1
 801c078:	4601      	mov	r1, r0
 801c07a:	4618      	mov	r0, r3
 801c07c:	f000 b93a 	b.w	801c2f4 <__cxa_atexit>

0801c080 <_ZdlPvj>:
 801c080:	f000 b812 	b.w	801c0a8 <_ZdlPv>

0801c084 <__cxa_guard_acquire>:
 801c084:	6803      	ldr	r3, [r0, #0]
 801c086:	07db      	lsls	r3, r3, #31
 801c088:	d406      	bmi.n	801c098 <__cxa_guard_acquire+0x14>
 801c08a:	7843      	ldrb	r3, [r0, #1]
 801c08c:	b103      	cbz	r3, 801c090 <__cxa_guard_acquire+0xc>
 801c08e:	deff      	udf	#255	; 0xff
 801c090:	2301      	movs	r3, #1
 801c092:	7043      	strb	r3, [r0, #1]
 801c094:	4618      	mov	r0, r3
 801c096:	4770      	bx	lr
 801c098:	2000      	movs	r0, #0
 801c09a:	4770      	bx	lr

0801c09c <__cxa_guard_release>:
 801c09c:	2301      	movs	r3, #1
 801c09e:	6003      	str	r3, [r0, #0]
 801c0a0:	4770      	bx	lr

0801c0a2 <__cxa_pure_virtual>:
 801c0a2:	b508      	push	{r3, lr}
 801c0a4:	f000 f80e 	bl	801c0c4 <_ZSt9terminatev>

0801c0a8 <_ZdlPv>:
 801c0a8:	f000 b976 	b.w	801c398 <free>

0801c0ac <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c0ac:	b508      	push	{r3, lr}
 801c0ae:	4780      	blx	r0
 801c0b0:	f000 f8f4 	bl	801c29c <abort>

0801c0b4 <_ZSt13get_terminatev>:
 801c0b4:	4b02      	ldr	r3, [pc, #8]	; (801c0c0 <_ZSt13get_terminatev+0xc>)
 801c0b6:	6818      	ldr	r0, [r3, #0]
 801c0b8:	f3bf 8f5b 	dmb	ish
 801c0bc:	4770      	bx	lr
 801c0be:	bf00      	nop
 801c0c0:	240000d4 	.word	0x240000d4

0801c0c4 <_ZSt9terminatev>:
 801c0c4:	b508      	push	{r3, lr}
 801c0c6:	f7ff fff5 	bl	801c0b4 <_ZSt13get_terminatev>
 801c0ca:	f7ff ffef 	bl	801c0ac <_ZN10__cxxabiv111__terminateEPFvvE>

0801c0ce <sinf_poly>:
 801c0ce:	07cb      	lsls	r3, r1, #31
 801c0d0:	d412      	bmi.n	801c0f8 <sinf_poly+0x2a>
 801c0d2:	ee21 6b00 	vmul.f64	d6, d1, d0
 801c0d6:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801c0da:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801c0de:	eea5 7b01 	vfma.f64	d7, d5, d1
 801c0e2:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801c0e6:	ee21 1b06 	vmul.f64	d1, d1, d6
 801c0ea:	eea5 0b06 	vfma.f64	d0, d5, d6
 801c0ee:	eea7 0b01 	vfma.f64	d0, d7, d1
 801c0f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c0f6:	4770      	bx	lr
 801c0f8:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801c0fc:	ee21 6b01 	vmul.f64	d6, d1, d1
 801c100:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801c104:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801c108:	eea1 7b05 	vfma.f64	d7, d1, d5
 801c10c:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801c110:	eea1 0b05 	vfma.f64	d0, d1, d5
 801c114:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801c118:	ee21 1b06 	vmul.f64	d1, d1, d6
 801c11c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801c120:	e7e5      	b.n	801c0ee <sinf_poly+0x20>
 801c122:	0000      	movs	r0, r0
 801c124:	0000      	movs	r0, r0
	...

0801c128 <sinf>:
 801c128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c12a:	ee10 4a10 	vmov	r4, s0
 801c12e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c132:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801c136:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c13a:	eef0 7a40 	vmov.f32	s15, s0
 801c13e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801c142:	d218      	bcs.n	801c176 <sinf+0x4e>
 801c144:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c148:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801c14c:	d20a      	bcs.n	801c164 <sinf+0x3c>
 801c14e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801c152:	d103      	bne.n	801c15c <sinf+0x34>
 801c154:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801c158:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c15c:	eeb0 0a67 	vmov.f32	s0, s15
 801c160:	b003      	add	sp, #12
 801c162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c164:	483e      	ldr	r0, [pc, #248]	; (801c260 <sinf+0x138>)
 801c166:	eeb0 0b46 	vmov.f64	d0, d6
 801c16a:	2100      	movs	r1, #0
 801c16c:	b003      	add	sp, #12
 801c16e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c172:	f7ff bfac 	b.w	801c0ce <sinf_poly>
 801c176:	f240 422e 	movw	r2, #1070	; 0x42e
 801c17a:	4293      	cmp	r3, r2
 801c17c:	d824      	bhi.n	801c1c8 <sinf+0xa0>
 801c17e:	4b38      	ldr	r3, [pc, #224]	; (801c260 <sinf+0x138>)
 801c180:	ed93 7b08 	vldr	d7, [r3, #32]
 801c184:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c188:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c18c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801c190:	ee17 1a90 	vmov	r1, s15
 801c194:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801c198:	1609      	asrs	r1, r1, #24
 801c19a:	ee07 1a90 	vmov	s15, r1
 801c19e:	f001 0203 	and.w	r2, r1, #3
 801c1a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c1a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c1aa:	ed92 0b00 	vldr	d0, [r2]
 801c1ae:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801c1b2:	f011 0f02 	tst.w	r1, #2
 801c1b6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801c1ba:	bf08      	it	eq
 801c1bc:	4618      	moveq	r0, r3
 801c1be:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c1c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c1c6:	e7d1      	b.n	801c16c <sinf+0x44>
 801c1c8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801c1cc:	d23d      	bcs.n	801c24a <sinf+0x122>
 801c1ce:	4b25      	ldr	r3, [pc, #148]	; (801c264 <sinf+0x13c>)
 801c1d0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801c1d4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801c1d8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801c1dc:	6a06      	ldr	r6, [r0, #32]
 801c1de:	6900      	ldr	r0, [r0, #16]
 801c1e0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801c1e4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801c1e8:	40a9      	lsls	r1, r5
 801c1ea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c1ee:	fba1 6706 	umull	r6, r7, r1, r6
 801c1f2:	fb05 f301 	mul.w	r3, r5, r1
 801c1f6:	463a      	mov	r2, r7
 801c1f8:	fbe0 2301 	umlal	r2, r3, r0, r1
 801c1fc:	1c11      	adds	r1, r2, #0
 801c1fe:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801c202:	2000      	movs	r0, #0
 801c204:	1a10      	subs	r0, r2, r0
 801c206:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801c20a:	eb63 0101 	sbc.w	r1, r3, r1
 801c20e:	f7e4 fa5d 	bl	80006cc <__aeabi_l2d>
 801c212:	0fb5      	lsrs	r5, r6, #30
 801c214:	4a12      	ldr	r2, [pc, #72]	; (801c260 <sinf+0x138>)
 801c216:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 801c21a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 801c258 <sinf+0x130>
 801c21e:	ec41 0b17 	vmov	d7, r0, r1
 801c222:	f003 0103 	and.w	r1, r3, #3
 801c226:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801c22a:	ee27 0b00 	vmul.f64	d0, d7, d0
 801c22e:	ed91 7b00 	vldr	d7, [r1]
 801c232:	ee20 1b00 	vmul.f64	d1, d0, d0
 801c236:	f013 0f02 	tst.w	r3, #2
 801c23a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 801c23e:	4629      	mov	r1, r5
 801c240:	bf08      	it	eq
 801c242:	4610      	moveq	r0, r2
 801c244:	ee27 0b00 	vmul.f64	d0, d7, d0
 801c248:	e790      	b.n	801c16c <sinf+0x44>
 801c24a:	b003      	add	sp, #12
 801c24c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c250:	f000 b815 	b.w	801c27e <__math_invalidf>
 801c254:	f3af 8000 	nop.w
 801c258:	54442d18 	.word	0x54442d18
 801c25c:	3c1921fb 	.word	0x3c1921fb
 801c260:	08020d30 	.word	0x08020d30
 801c264:	08020cd0 	.word	0x08020cd0

0801c268 <with_errnof>:
 801c268:	b513      	push	{r0, r1, r4, lr}
 801c26a:	4604      	mov	r4, r0
 801c26c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801c270:	f000 f84e 	bl	801c310 <__errno>
 801c274:	ed9d 0a01 	vldr	s0, [sp, #4]
 801c278:	6004      	str	r4, [r0, #0]
 801c27a:	b002      	add	sp, #8
 801c27c:	bd10      	pop	{r4, pc}

0801c27e <__math_invalidf>:
 801c27e:	eef0 7a40 	vmov.f32	s15, s0
 801c282:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c286:	eef4 7a67 	vcmp.f32	s15, s15
 801c28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c28e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c292:	d602      	bvs.n	801c29a <__math_invalidf+0x1c>
 801c294:	2021      	movs	r0, #33	; 0x21
 801c296:	f7ff bfe7 	b.w	801c268 <with_errnof>
 801c29a:	4770      	bx	lr

0801c29c <abort>:
 801c29c:	b508      	push	{r3, lr}
 801c29e:	2006      	movs	r0, #6
 801c2a0:	f000 fc68 	bl	801cb74 <raise>
 801c2a4:	2001      	movs	r0, #1
 801c2a6:	f7e5 fcf5 	bl	8001c94 <_exit>
	...

0801c2ac <__assert_func>:
 801c2ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2ae:	4614      	mov	r4, r2
 801c2b0:	461a      	mov	r2, r3
 801c2b2:	4b09      	ldr	r3, [pc, #36]	; (801c2d8 <__assert_func+0x2c>)
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	4605      	mov	r5, r0
 801c2b8:	68d8      	ldr	r0, [r3, #12]
 801c2ba:	b14c      	cbz	r4, 801c2d0 <__assert_func+0x24>
 801c2bc:	4b07      	ldr	r3, [pc, #28]	; (801c2dc <__assert_func+0x30>)
 801c2be:	9100      	str	r1, [sp, #0]
 801c2c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c2c4:	4906      	ldr	r1, [pc, #24]	; (801c2e0 <__assert_func+0x34>)
 801c2c6:	462b      	mov	r3, r5
 801c2c8:	f000 f828 	bl	801c31c <fiprintf>
 801c2cc:	f7ff ffe6 	bl	801c29c <abort>
 801c2d0:	4b04      	ldr	r3, [pc, #16]	; (801c2e4 <__assert_func+0x38>)
 801c2d2:	461c      	mov	r4, r3
 801c2d4:	e7f3      	b.n	801c2be <__assert_func+0x12>
 801c2d6:	bf00      	nop
 801c2d8:	240000d8 	.word	0x240000d8
 801c2dc:	08020e10 	.word	0x08020e10
 801c2e0:	08020e1d 	.word	0x08020e1d
 801c2e4:	08020e4b 	.word	0x08020e4b

0801c2e8 <atexit>:
 801c2e8:	2300      	movs	r3, #0
 801c2ea:	4601      	mov	r1, r0
 801c2ec:	461a      	mov	r2, r3
 801c2ee:	4618      	mov	r0, r3
 801c2f0:	f000 bd1c 	b.w	801cd2c <__register_exitproc>

0801c2f4 <__cxa_atexit>:
 801c2f4:	b510      	push	{r4, lr}
 801c2f6:	4c05      	ldr	r4, [pc, #20]	; (801c30c <__cxa_atexit+0x18>)
 801c2f8:	4613      	mov	r3, r2
 801c2fa:	b12c      	cbz	r4, 801c308 <__cxa_atexit+0x14>
 801c2fc:	460a      	mov	r2, r1
 801c2fe:	4601      	mov	r1, r0
 801c300:	2002      	movs	r0, #2
 801c302:	f000 fd13 	bl	801cd2c <__register_exitproc>
 801c306:	bd10      	pop	{r4, pc}
 801c308:	4620      	mov	r0, r4
 801c30a:	e7fc      	b.n	801c306 <__cxa_atexit+0x12>
 801c30c:	0801cd2d 	.word	0x0801cd2d

0801c310 <__errno>:
 801c310:	4b01      	ldr	r3, [pc, #4]	; (801c318 <__errno+0x8>)
 801c312:	6818      	ldr	r0, [r3, #0]
 801c314:	4770      	bx	lr
 801c316:	bf00      	nop
 801c318:	240000d8 	.word	0x240000d8

0801c31c <fiprintf>:
 801c31c:	b40e      	push	{r1, r2, r3}
 801c31e:	b503      	push	{r0, r1, lr}
 801c320:	4601      	mov	r1, r0
 801c322:	ab03      	add	r3, sp, #12
 801c324:	4805      	ldr	r0, [pc, #20]	; (801c33c <fiprintf+0x20>)
 801c326:	f853 2b04 	ldr.w	r2, [r3], #4
 801c32a:	6800      	ldr	r0, [r0, #0]
 801c32c:	9301      	str	r3, [sp, #4]
 801c32e:	f000 f925 	bl	801c57c <_vfiprintf_r>
 801c332:	b002      	add	sp, #8
 801c334:	f85d eb04 	ldr.w	lr, [sp], #4
 801c338:	b003      	add	sp, #12
 801c33a:	4770      	bx	lr
 801c33c:	240000d8 	.word	0x240000d8

0801c340 <__libc_init_array>:
 801c340:	b570      	push	{r4, r5, r6, lr}
 801c342:	4d0d      	ldr	r5, [pc, #52]	; (801c378 <__libc_init_array+0x38>)
 801c344:	4c0d      	ldr	r4, [pc, #52]	; (801c37c <__libc_init_array+0x3c>)
 801c346:	1b64      	subs	r4, r4, r5
 801c348:	10a4      	asrs	r4, r4, #2
 801c34a:	2600      	movs	r6, #0
 801c34c:	42a6      	cmp	r6, r4
 801c34e:	d109      	bne.n	801c364 <__libc_init_array+0x24>
 801c350:	4d0b      	ldr	r5, [pc, #44]	; (801c380 <__libc_init_array+0x40>)
 801c352:	4c0c      	ldr	r4, [pc, #48]	; (801c384 <__libc_init_array+0x44>)
 801c354:	f001 f824 	bl	801d3a0 <_init>
 801c358:	1b64      	subs	r4, r4, r5
 801c35a:	10a4      	asrs	r4, r4, #2
 801c35c:	2600      	movs	r6, #0
 801c35e:	42a6      	cmp	r6, r4
 801c360:	d105      	bne.n	801c36e <__libc_init_array+0x2e>
 801c362:	bd70      	pop	{r4, r5, r6, pc}
 801c364:	f855 3b04 	ldr.w	r3, [r5], #4
 801c368:	4798      	blx	r3
 801c36a:	3601      	adds	r6, #1
 801c36c:	e7ee      	b.n	801c34c <__libc_init_array+0xc>
 801c36e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c372:	4798      	blx	r3
 801c374:	3601      	adds	r6, #1
 801c376:	e7f2      	b.n	801c35e <__libc_init_array+0x1e>
 801c378:	08022208 	.word	0x08022208
 801c37c:	08022208 	.word	0x08022208
 801c380:	08022208 	.word	0x08022208
 801c384:	0802221c 	.word	0x0802221c

0801c388 <malloc>:
 801c388:	4b02      	ldr	r3, [pc, #8]	; (801c394 <malloc+0xc>)
 801c38a:	4601      	mov	r1, r0
 801c38c:	6818      	ldr	r0, [r3, #0]
 801c38e:	f000 b871 	b.w	801c474 <_malloc_r>
 801c392:	bf00      	nop
 801c394:	240000d8 	.word	0x240000d8

0801c398 <free>:
 801c398:	4b02      	ldr	r3, [pc, #8]	; (801c3a4 <free+0xc>)
 801c39a:	4601      	mov	r1, r0
 801c39c:	6818      	ldr	r0, [r3, #0]
 801c39e:	f000 b819 	b.w	801c3d4 <_free_r>
 801c3a2:	bf00      	nop
 801c3a4:	240000d8 	.word	0x240000d8

0801c3a8 <memcpy>:
 801c3a8:	440a      	add	r2, r1
 801c3aa:	4291      	cmp	r1, r2
 801c3ac:	f100 33ff 	add.w	r3, r0, #4294967295
 801c3b0:	d100      	bne.n	801c3b4 <memcpy+0xc>
 801c3b2:	4770      	bx	lr
 801c3b4:	b510      	push	{r4, lr}
 801c3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c3be:	4291      	cmp	r1, r2
 801c3c0:	d1f9      	bne.n	801c3b6 <memcpy+0xe>
 801c3c2:	bd10      	pop	{r4, pc}

0801c3c4 <memset>:
 801c3c4:	4402      	add	r2, r0
 801c3c6:	4603      	mov	r3, r0
 801c3c8:	4293      	cmp	r3, r2
 801c3ca:	d100      	bne.n	801c3ce <memset+0xa>
 801c3cc:	4770      	bx	lr
 801c3ce:	f803 1b01 	strb.w	r1, [r3], #1
 801c3d2:	e7f9      	b.n	801c3c8 <memset+0x4>

0801c3d4 <_free_r>:
 801c3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c3d6:	2900      	cmp	r1, #0
 801c3d8:	d048      	beq.n	801c46c <_free_r+0x98>
 801c3da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3de:	9001      	str	r0, [sp, #4]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	f1a1 0404 	sub.w	r4, r1, #4
 801c3e6:	bfb8      	it	lt
 801c3e8:	18e4      	addlt	r4, r4, r3
 801c3ea:	f000 ff21 	bl	801d230 <__malloc_lock>
 801c3ee:	4a20      	ldr	r2, [pc, #128]	; (801c470 <_free_r+0x9c>)
 801c3f0:	9801      	ldr	r0, [sp, #4]
 801c3f2:	6813      	ldr	r3, [r2, #0]
 801c3f4:	4615      	mov	r5, r2
 801c3f6:	b933      	cbnz	r3, 801c406 <_free_r+0x32>
 801c3f8:	6063      	str	r3, [r4, #4]
 801c3fa:	6014      	str	r4, [r2, #0]
 801c3fc:	b003      	add	sp, #12
 801c3fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c402:	f000 bf1b 	b.w	801d23c <__malloc_unlock>
 801c406:	42a3      	cmp	r3, r4
 801c408:	d90b      	bls.n	801c422 <_free_r+0x4e>
 801c40a:	6821      	ldr	r1, [r4, #0]
 801c40c:	1862      	adds	r2, r4, r1
 801c40e:	4293      	cmp	r3, r2
 801c410:	bf04      	itt	eq
 801c412:	681a      	ldreq	r2, [r3, #0]
 801c414:	685b      	ldreq	r3, [r3, #4]
 801c416:	6063      	str	r3, [r4, #4]
 801c418:	bf04      	itt	eq
 801c41a:	1852      	addeq	r2, r2, r1
 801c41c:	6022      	streq	r2, [r4, #0]
 801c41e:	602c      	str	r4, [r5, #0]
 801c420:	e7ec      	b.n	801c3fc <_free_r+0x28>
 801c422:	461a      	mov	r2, r3
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	b10b      	cbz	r3, 801c42c <_free_r+0x58>
 801c428:	42a3      	cmp	r3, r4
 801c42a:	d9fa      	bls.n	801c422 <_free_r+0x4e>
 801c42c:	6811      	ldr	r1, [r2, #0]
 801c42e:	1855      	adds	r5, r2, r1
 801c430:	42a5      	cmp	r5, r4
 801c432:	d10b      	bne.n	801c44c <_free_r+0x78>
 801c434:	6824      	ldr	r4, [r4, #0]
 801c436:	4421      	add	r1, r4
 801c438:	1854      	adds	r4, r2, r1
 801c43a:	42a3      	cmp	r3, r4
 801c43c:	6011      	str	r1, [r2, #0]
 801c43e:	d1dd      	bne.n	801c3fc <_free_r+0x28>
 801c440:	681c      	ldr	r4, [r3, #0]
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	6053      	str	r3, [r2, #4]
 801c446:	4421      	add	r1, r4
 801c448:	6011      	str	r1, [r2, #0]
 801c44a:	e7d7      	b.n	801c3fc <_free_r+0x28>
 801c44c:	d902      	bls.n	801c454 <_free_r+0x80>
 801c44e:	230c      	movs	r3, #12
 801c450:	6003      	str	r3, [r0, #0]
 801c452:	e7d3      	b.n	801c3fc <_free_r+0x28>
 801c454:	6825      	ldr	r5, [r4, #0]
 801c456:	1961      	adds	r1, r4, r5
 801c458:	428b      	cmp	r3, r1
 801c45a:	bf04      	itt	eq
 801c45c:	6819      	ldreq	r1, [r3, #0]
 801c45e:	685b      	ldreq	r3, [r3, #4]
 801c460:	6063      	str	r3, [r4, #4]
 801c462:	bf04      	itt	eq
 801c464:	1949      	addeq	r1, r1, r5
 801c466:	6021      	streq	r1, [r4, #0]
 801c468:	6054      	str	r4, [r2, #4]
 801c46a:	e7c7      	b.n	801c3fc <_free_r+0x28>
 801c46c:	b003      	add	sp, #12
 801c46e:	bd30      	pop	{r4, r5, pc}
 801c470:	24006d40 	.word	0x24006d40

0801c474 <_malloc_r>:
 801c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c476:	1ccd      	adds	r5, r1, #3
 801c478:	f025 0503 	bic.w	r5, r5, #3
 801c47c:	3508      	adds	r5, #8
 801c47e:	2d0c      	cmp	r5, #12
 801c480:	bf38      	it	cc
 801c482:	250c      	movcc	r5, #12
 801c484:	2d00      	cmp	r5, #0
 801c486:	4606      	mov	r6, r0
 801c488:	db01      	blt.n	801c48e <_malloc_r+0x1a>
 801c48a:	42a9      	cmp	r1, r5
 801c48c:	d903      	bls.n	801c496 <_malloc_r+0x22>
 801c48e:	230c      	movs	r3, #12
 801c490:	6033      	str	r3, [r6, #0]
 801c492:	2000      	movs	r0, #0
 801c494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c496:	f000 fecb 	bl	801d230 <__malloc_lock>
 801c49a:	4921      	ldr	r1, [pc, #132]	; (801c520 <_malloc_r+0xac>)
 801c49c:	680a      	ldr	r2, [r1, #0]
 801c49e:	4614      	mov	r4, r2
 801c4a0:	b99c      	cbnz	r4, 801c4ca <_malloc_r+0x56>
 801c4a2:	4f20      	ldr	r7, [pc, #128]	; (801c524 <_malloc_r+0xb0>)
 801c4a4:	683b      	ldr	r3, [r7, #0]
 801c4a6:	b923      	cbnz	r3, 801c4b2 <_malloc_r+0x3e>
 801c4a8:	4621      	mov	r1, r4
 801c4aa:	4630      	mov	r0, r6
 801c4ac:	f000 fb2a 	bl	801cb04 <_sbrk_r>
 801c4b0:	6038      	str	r0, [r7, #0]
 801c4b2:	4629      	mov	r1, r5
 801c4b4:	4630      	mov	r0, r6
 801c4b6:	f000 fb25 	bl	801cb04 <_sbrk_r>
 801c4ba:	1c43      	adds	r3, r0, #1
 801c4bc:	d123      	bne.n	801c506 <_malloc_r+0x92>
 801c4be:	230c      	movs	r3, #12
 801c4c0:	6033      	str	r3, [r6, #0]
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	f000 feba 	bl	801d23c <__malloc_unlock>
 801c4c8:	e7e3      	b.n	801c492 <_malloc_r+0x1e>
 801c4ca:	6823      	ldr	r3, [r4, #0]
 801c4cc:	1b5b      	subs	r3, r3, r5
 801c4ce:	d417      	bmi.n	801c500 <_malloc_r+0x8c>
 801c4d0:	2b0b      	cmp	r3, #11
 801c4d2:	d903      	bls.n	801c4dc <_malloc_r+0x68>
 801c4d4:	6023      	str	r3, [r4, #0]
 801c4d6:	441c      	add	r4, r3
 801c4d8:	6025      	str	r5, [r4, #0]
 801c4da:	e004      	b.n	801c4e6 <_malloc_r+0x72>
 801c4dc:	6863      	ldr	r3, [r4, #4]
 801c4de:	42a2      	cmp	r2, r4
 801c4e0:	bf0c      	ite	eq
 801c4e2:	600b      	streq	r3, [r1, #0]
 801c4e4:	6053      	strne	r3, [r2, #4]
 801c4e6:	4630      	mov	r0, r6
 801c4e8:	f000 fea8 	bl	801d23c <__malloc_unlock>
 801c4ec:	f104 000b 	add.w	r0, r4, #11
 801c4f0:	1d23      	adds	r3, r4, #4
 801c4f2:	f020 0007 	bic.w	r0, r0, #7
 801c4f6:	1ac2      	subs	r2, r0, r3
 801c4f8:	d0cc      	beq.n	801c494 <_malloc_r+0x20>
 801c4fa:	1a1b      	subs	r3, r3, r0
 801c4fc:	50a3      	str	r3, [r4, r2]
 801c4fe:	e7c9      	b.n	801c494 <_malloc_r+0x20>
 801c500:	4622      	mov	r2, r4
 801c502:	6864      	ldr	r4, [r4, #4]
 801c504:	e7cc      	b.n	801c4a0 <_malloc_r+0x2c>
 801c506:	1cc4      	adds	r4, r0, #3
 801c508:	f024 0403 	bic.w	r4, r4, #3
 801c50c:	42a0      	cmp	r0, r4
 801c50e:	d0e3      	beq.n	801c4d8 <_malloc_r+0x64>
 801c510:	1a21      	subs	r1, r4, r0
 801c512:	4630      	mov	r0, r6
 801c514:	f000 faf6 	bl	801cb04 <_sbrk_r>
 801c518:	3001      	adds	r0, #1
 801c51a:	d1dd      	bne.n	801c4d8 <_malloc_r+0x64>
 801c51c:	e7cf      	b.n	801c4be <_malloc_r+0x4a>
 801c51e:	bf00      	nop
 801c520:	24006d40 	.word	0x24006d40
 801c524:	24006d44 	.word	0x24006d44

0801c528 <__sfputc_r>:
 801c528:	6893      	ldr	r3, [r2, #8]
 801c52a:	3b01      	subs	r3, #1
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	b410      	push	{r4}
 801c530:	6093      	str	r3, [r2, #8]
 801c532:	da08      	bge.n	801c546 <__sfputc_r+0x1e>
 801c534:	6994      	ldr	r4, [r2, #24]
 801c536:	42a3      	cmp	r3, r4
 801c538:	db01      	blt.n	801c53e <__sfputc_r+0x16>
 801c53a:	290a      	cmp	r1, #10
 801c53c:	d103      	bne.n	801c546 <__sfputc_r+0x1e>
 801c53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c542:	f000 bb33 	b.w	801cbac <__swbuf_r>
 801c546:	6813      	ldr	r3, [r2, #0]
 801c548:	1c58      	adds	r0, r3, #1
 801c54a:	6010      	str	r0, [r2, #0]
 801c54c:	7019      	strb	r1, [r3, #0]
 801c54e:	4608      	mov	r0, r1
 801c550:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c554:	4770      	bx	lr

0801c556 <__sfputs_r>:
 801c556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c558:	4606      	mov	r6, r0
 801c55a:	460f      	mov	r7, r1
 801c55c:	4614      	mov	r4, r2
 801c55e:	18d5      	adds	r5, r2, r3
 801c560:	42ac      	cmp	r4, r5
 801c562:	d101      	bne.n	801c568 <__sfputs_r+0x12>
 801c564:	2000      	movs	r0, #0
 801c566:	e007      	b.n	801c578 <__sfputs_r+0x22>
 801c568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c56c:	463a      	mov	r2, r7
 801c56e:	4630      	mov	r0, r6
 801c570:	f7ff ffda 	bl	801c528 <__sfputc_r>
 801c574:	1c43      	adds	r3, r0, #1
 801c576:	d1f3      	bne.n	801c560 <__sfputs_r+0xa>
 801c578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c57c <_vfiprintf_r>:
 801c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c580:	460d      	mov	r5, r1
 801c582:	b09d      	sub	sp, #116	; 0x74
 801c584:	4614      	mov	r4, r2
 801c586:	4698      	mov	r8, r3
 801c588:	4606      	mov	r6, r0
 801c58a:	b118      	cbz	r0, 801c594 <_vfiprintf_r+0x18>
 801c58c:	6983      	ldr	r3, [r0, #24]
 801c58e:	b90b      	cbnz	r3, 801c594 <_vfiprintf_r+0x18>
 801c590:	f000 fd48 	bl	801d024 <__sinit>
 801c594:	4b89      	ldr	r3, [pc, #548]	; (801c7bc <_vfiprintf_r+0x240>)
 801c596:	429d      	cmp	r5, r3
 801c598:	d11b      	bne.n	801c5d2 <_vfiprintf_r+0x56>
 801c59a:	6875      	ldr	r5, [r6, #4]
 801c59c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c59e:	07d9      	lsls	r1, r3, #31
 801c5a0:	d405      	bmi.n	801c5ae <_vfiprintf_r+0x32>
 801c5a2:	89ab      	ldrh	r3, [r5, #12]
 801c5a4:	059a      	lsls	r2, r3, #22
 801c5a6:	d402      	bmi.n	801c5ae <_vfiprintf_r+0x32>
 801c5a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5aa:	f000 fdd9 	bl	801d160 <__retarget_lock_acquire_recursive>
 801c5ae:	89ab      	ldrh	r3, [r5, #12]
 801c5b0:	071b      	lsls	r3, r3, #28
 801c5b2:	d501      	bpl.n	801c5b8 <_vfiprintf_r+0x3c>
 801c5b4:	692b      	ldr	r3, [r5, #16]
 801c5b6:	b9eb      	cbnz	r3, 801c5f4 <_vfiprintf_r+0x78>
 801c5b8:	4629      	mov	r1, r5
 801c5ba:	4630      	mov	r0, r6
 801c5bc:	f000 fb48 	bl	801cc50 <__swsetup_r>
 801c5c0:	b1c0      	cbz	r0, 801c5f4 <_vfiprintf_r+0x78>
 801c5c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5c4:	07dc      	lsls	r4, r3, #31
 801c5c6:	d50e      	bpl.n	801c5e6 <_vfiprintf_r+0x6a>
 801c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5cc:	b01d      	add	sp, #116	; 0x74
 801c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d2:	4b7b      	ldr	r3, [pc, #492]	; (801c7c0 <_vfiprintf_r+0x244>)
 801c5d4:	429d      	cmp	r5, r3
 801c5d6:	d101      	bne.n	801c5dc <_vfiprintf_r+0x60>
 801c5d8:	68b5      	ldr	r5, [r6, #8]
 801c5da:	e7df      	b.n	801c59c <_vfiprintf_r+0x20>
 801c5dc:	4b79      	ldr	r3, [pc, #484]	; (801c7c4 <_vfiprintf_r+0x248>)
 801c5de:	429d      	cmp	r5, r3
 801c5e0:	bf08      	it	eq
 801c5e2:	68f5      	ldreq	r5, [r6, #12]
 801c5e4:	e7da      	b.n	801c59c <_vfiprintf_r+0x20>
 801c5e6:	89ab      	ldrh	r3, [r5, #12]
 801c5e8:	0598      	lsls	r0, r3, #22
 801c5ea:	d4ed      	bmi.n	801c5c8 <_vfiprintf_r+0x4c>
 801c5ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5ee:	f000 fdb9 	bl	801d164 <__retarget_lock_release_recursive>
 801c5f2:	e7e9      	b.n	801c5c8 <_vfiprintf_r+0x4c>
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	9309      	str	r3, [sp, #36]	; 0x24
 801c5f8:	2320      	movs	r3, #32
 801c5fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c5fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801c602:	2330      	movs	r3, #48	; 0x30
 801c604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c7c8 <_vfiprintf_r+0x24c>
 801c608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c60c:	f04f 0901 	mov.w	r9, #1
 801c610:	4623      	mov	r3, r4
 801c612:	469a      	mov	sl, r3
 801c614:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c618:	b10a      	cbz	r2, 801c61e <_vfiprintf_r+0xa2>
 801c61a:	2a25      	cmp	r2, #37	; 0x25
 801c61c:	d1f9      	bne.n	801c612 <_vfiprintf_r+0x96>
 801c61e:	ebba 0b04 	subs.w	fp, sl, r4
 801c622:	d00b      	beq.n	801c63c <_vfiprintf_r+0xc0>
 801c624:	465b      	mov	r3, fp
 801c626:	4622      	mov	r2, r4
 801c628:	4629      	mov	r1, r5
 801c62a:	4630      	mov	r0, r6
 801c62c:	f7ff ff93 	bl	801c556 <__sfputs_r>
 801c630:	3001      	adds	r0, #1
 801c632:	f000 80aa 	beq.w	801c78a <_vfiprintf_r+0x20e>
 801c636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c638:	445a      	add	r2, fp
 801c63a:	9209      	str	r2, [sp, #36]	; 0x24
 801c63c:	f89a 3000 	ldrb.w	r3, [sl]
 801c640:	2b00      	cmp	r3, #0
 801c642:	f000 80a2 	beq.w	801c78a <_vfiprintf_r+0x20e>
 801c646:	2300      	movs	r3, #0
 801c648:	f04f 32ff 	mov.w	r2, #4294967295
 801c64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c650:	f10a 0a01 	add.w	sl, sl, #1
 801c654:	9304      	str	r3, [sp, #16]
 801c656:	9307      	str	r3, [sp, #28]
 801c658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c65c:	931a      	str	r3, [sp, #104]	; 0x68
 801c65e:	4654      	mov	r4, sl
 801c660:	2205      	movs	r2, #5
 801c662:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c666:	4858      	ldr	r0, [pc, #352]	; (801c7c8 <_vfiprintf_r+0x24c>)
 801c668:	f7e3 fe52 	bl	8000310 <memchr>
 801c66c:	9a04      	ldr	r2, [sp, #16]
 801c66e:	b9d8      	cbnz	r0, 801c6a8 <_vfiprintf_r+0x12c>
 801c670:	06d1      	lsls	r1, r2, #27
 801c672:	bf44      	itt	mi
 801c674:	2320      	movmi	r3, #32
 801c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c67a:	0713      	lsls	r3, r2, #28
 801c67c:	bf44      	itt	mi
 801c67e:	232b      	movmi	r3, #43	; 0x2b
 801c680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c684:	f89a 3000 	ldrb.w	r3, [sl]
 801c688:	2b2a      	cmp	r3, #42	; 0x2a
 801c68a:	d015      	beq.n	801c6b8 <_vfiprintf_r+0x13c>
 801c68c:	9a07      	ldr	r2, [sp, #28]
 801c68e:	4654      	mov	r4, sl
 801c690:	2000      	movs	r0, #0
 801c692:	f04f 0c0a 	mov.w	ip, #10
 801c696:	4621      	mov	r1, r4
 801c698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c69c:	3b30      	subs	r3, #48	; 0x30
 801c69e:	2b09      	cmp	r3, #9
 801c6a0:	d94e      	bls.n	801c740 <_vfiprintf_r+0x1c4>
 801c6a2:	b1b0      	cbz	r0, 801c6d2 <_vfiprintf_r+0x156>
 801c6a4:	9207      	str	r2, [sp, #28]
 801c6a6:	e014      	b.n	801c6d2 <_vfiprintf_r+0x156>
 801c6a8:	eba0 0308 	sub.w	r3, r0, r8
 801c6ac:	fa09 f303 	lsl.w	r3, r9, r3
 801c6b0:	4313      	orrs	r3, r2
 801c6b2:	9304      	str	r3, [sp, #16]
 801c6b4:	46a2      	mov	sl, r4
 801c6b6:	e7d2      	b.n	801c65e <_vfiprintf_r+0xe2>
 801c6b8:	9b03      	ldr	r3, [sp, #12]
 801c6ba:	1d19      	adds	r1, r3, #4
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	9103      	str	r1, [sp, #12]
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	bfbb      	ittet	lt
 801c6c4:	425b      	neglt	r3, r3
 801c6c6:	f042 0202 	orrlt.w	r2, r2, #2
 801c6ca:	9307      	strge	r3, [sp, #28]
 801c6cc:	9307      	strlt	r3, [sp, #28]
 801c6ce:	bfb8      	it	lt
 801c6d0:	9204      	strlt	r2, [sp, #16]
 801c6d2:	7823      	ldrb	r3, [r4, #0]
 801c6d4:	2b2e      	cmp	r3, #46	; 0x2e
 801c6d6:	d10c      	bne.n	801c6f2 <_vfiprintf_r+0x176>
 801c6d8:	7863      	ldrb	r3, [r4, #1]
 801c6da:	2b2a      	cmp	r3, #42	; 0x2a
 801c6dc:	d135      	bne.n	801c74a <_vfiprintf_r+0x1ce>
 801c6de:	9b03      	ldr	r3, [sp, #12]
 801c6e0:	1d1a      	adds	r2, r3, #4
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	9203      	str	r2, [sp, #12]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	bfb8      	it	lt
 801c6ea:	f04f 33ff 	movlt.w	r3, #4294967295
 801c6ee:	3402      	adds	r4, #2
 801c6f0:	9305      	str	r3, [sp, #20]
 801c6f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c7d8 <_vfiprintf_r+0x25c>
 801c6f6:	7821      	ldrb	r1, [r4, #0]
 801c6f8:	2203      	movs	r2, #3
 801c6fa:	4650      	mov	r0, sl
 801c6fc:	f7e3 fe08 	bl	8000310 <memchr>
 801c700:	b140      	cbz	r0, 801c714 <_vfiprintf_r+0x198>
 801c702:	2340      	movs	r3, #64	; 0x40
 801c704:	eba0 000a 	sub.w	r0, r0, sl
 801c708:	fa03 f000 	lsl.w	r0, r3, r0
 801c70c:	9b04      	ldr	r3, [sp, #16]
 801c70e:	4303      	orrs	r3, r0
 801c710:	3401      	adds	r4, #1
 801c712:	9304      	str	r3, [sp, #16]
 801c714:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c718:	482c      	ldr	r0, [pc, #176]	; (801c7cc <_vfiprintf_r+0x250>)
 801c71a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c71e:	2206      	movs	r2, #6
 801c720:	f7e3 fdf6 	bl	8000310 <memchr>
 801c724:	2800      	cmp	r0, #0
 801c726:	d03f      	beq.n	801c7a8 <_vfiprintf_r+0x22c>
 801c728:	4b29      	ldr	r3, [pc, #164]	; (801c7d0 <_vfiprintf_r+0x254>)
 801c72a:	bb1b      	cbnz	r3, 801c774 <_vfiprintf_r+0x1f8>
 801c72c:	9b03      	ldr	r3, [sp, #12]
 801c72e:	3307      	adds	r3, #7
 801c730:	f023 0307 	bic.w	r3, r3, #7
 801c734:	3308      	adds	r3, #8
 801c736:	9303      	str	r3, [sp, #12]
 801c738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c73a:	443b      	add	r3, r7
 801c73c:	9309      	str	r3, [sp, #36]	; 0x24
 801c73e:	e767      	b.n	801c610 <_vfiprintf_r+0x94>
 801c740:	fb0c 3202 	mla	r2, ip, r2, r3
 801c744:	460c      	mov	r4, r1
 801c746:	2001      	movs	r0, #1
 801c748:	e7a5      	b.n	801c696 <_vfiprintf_r+0x11a>
 801c74a:	2300      	movs	r3, #0
 801c74c:	3401      	adds	r4, #1
 801c74e:	9305      	str	r3, [sp, #20]
 801c750:	4619      	mov	r1, r3
 801c752:	f04f 0c0a 	mov.w	ip, #10
 801c756:	4620      	mov	r0, r4
 801c758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c75c:	3a30      	subs	r2, #48	; 0x30
 801c75e:	2a09      	cmp	r2, #9
 801c760:	d903      	bls.n	801c76a <_vfiprintf_r+0x1ee>
 801c762:	2b00      	cmp	r3, #0
 801c764:	d0c5      	beq.n	801c6f2 <_vfiprintf_r+0x176>
 801c766:	9105      	str	r1, [sp, #20]
 801c768:	e7c3      	b.n	801c6f2 <_vfiprintf_r+0x176>
 801c76a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c76e:	4604      	mov	r4, r0
 801c770:	2301      	movs	r3, #1
 801c772:	e7f0      	b.n	801c756 <_vfiprintf_r+0x1da>
 801c774:	ab03      	add	r3, sp, #12
 801c776:	9300      	str	r3, [sp, #0]
 801c778:	462a      	mov	r2, r5
 801c77a:	4b16      	ldr	r3, [pc, #88]	; (801c7d4 <_vfiprintf_r+0x258>)
 801c77c:	a904      	add	r1, sp, #16
 801c77e:	4630      	mov	r0, r6
 801c780:	f3af 8000 	nop.w
 801c784:	4607      	mov	r7, r0
 801c786:	1c78      	adds	r0, r7, #1
 801c788:	d1d6      	bne.n	801c738 <_vfiprintf_r+0x1bc>
 801c78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c78c:	07d9      	lsls	r1, r3, #31
 801c78e:	d405      	bmi.n	801c79c <_vfiprintf_r+0x220>
 801c790:	89ab      	ldrh	r3, [r5, #12]
 801c792:	059a      	lsls	r2, r3, #22
 801c794:	d402      	bmi.n	801c79c <_vfiprintf_r+0x220>
 801c796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c798:	f000 fce4 	bl	801d164 <__retarget_lock_release_recursive>
 801c79c:	89ab      	ldrh	r3, [r5, #12]
 801c79e:	065b      	lsls	r3, r3, #25
 801c7a0:	f53f af12 	bmi.w	801c5c8 <_vfiprintf_r+0x4c>
 801c7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7a6:	e711      	b.n	801c5cc <_vfiprintf_r+0x50>
 801c7a8:	ab03      	add	r3, sp, #12
 801c7aa:	9300      	str	r3, [sp, #0]
 801c7ac:	462a      	mov	r2, r5
 801c7ae:	4b09      	ldr	r3, [pc, #36]	; (801c7d4 <_vfiprintf_r+0x258>)
 801c7b0:	a904      	add	r1, sp, #16
 801c7b2:	4630      	mov	r0, r6
 801c7b4:	f000 f880 	bl	801c8b8 <_printf_i>
 801c7b8:	e7e4      	b.n	801c784 <_vfiprintf_r+0x208>
 801c7ba:	bf00      	nop
 801c7bc:	08020ea8 	.word	0x08020ea8
 801c7c0:	08020ec8 	.word	0x08020ec8
 801c7c4:	08020e88 	.word	0x08020e88
 801c7c8:	08020e50 	.word	0x08020e50
 801c7cc:	08020e5a 	.word	0x08020e5a
 801c7d0:	00000000 	.word	0x00000000
 801c7d4:	0801c557 	.word	0x0801c557
 801c7d8:	08020e56 	.word	0x08020e56

0801c7dc <_printf_common>:
 801c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7e0:	4616      	mov	r6, r2
 801c7e2:	4699      	mov	r9, r3
 801c7e4:	688a      	ldr	r2, [r1, #8]
 801c7e6:	690b      	ldr	r3, [r1, #16]
 801c7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c7ec:	4293      	cmp	r3, r2
 801c7ee:	bfb8      	it	lt
 801c7f0:	4613      	movlt	r3, r2
 801c7f2:	6033      	str	r3, [r6, #0]
 801c7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c7f8:	4607      	mov	r7, r0
 801c7fa:	460c      	mov	r4, r1
 801c7fc:	b10a      	cbz	r2, 801c802 <_printf_common+0x26>
 801c7fe:	3301      	adds	r3, #1
 801c800:	6033      	str	r3, [r6, #0]
 801c802:	6823      	ldr	r3, [r4, #0]
 801c804:	0699      	lsls	r1, r3, #26
 801c806:	bf42      	ittt	mi
 801c808:	6833      	ldrmi	r3, [r6, #0]
 801c80a:	3302      	addmi	r3, #2
 801c80c:	6033      	strmi	r3, [r6, #0]
 801c80e:	6825      	ldr	r5, [r4, #0]
 801c810:	f015 0506 	ands.w	r5, r5, #6
 801c814:	d106      	bne.n	801c824 <_printf_common+0x48>
 801c816:	f104 0a19 	add.w	sl, r4, #25
 801c81a:	68e3      	ldr	r3, [r4, #12]
 801c81c:	6832      	ldr	r2, [r6, #0]
 801c81e:	1a9b      	subs	r3, r3, r2
 801c820:	42ab      	cmp	r3, r5
 801c822:	dc26      	bgt.n	801c872 <_printf_common+0x96>
 801c824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c828:	1e13      	subs	r3, r2, #0
 801c82a:	6822      	ldr	r2, [r4, #0]
 801c82c:	bf18      	it	ne
 801c82e:	2301      	movne	r3, #1
 801c830:	0692      	lsls	r2, r2, #26
 801c832:	d42b      	bmi.n	801c88c <_printf_common+0xb0>
 801c834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c838:	4649      	mov	r1, r9
 801c83a:	4638      	mov	r0, r7
 801c83c:	47c0      	blx	r8
 801c83e:	3001      	adds	r0, #1
 801c840:	d01e      	beq.n	801c880 <_printf_common+0xa4>
 801c842:	6823      	ldr	r3, [r4, #0]
 801c844:	68e5      	ldr	r5, [r4, #12]
 801c846:	6832      	ldr	r2, [r6, #0]
 801c848:	f003 0306 	and.w	r3, r3, #6
 801c84c:	2b04      	cmp	r3, #4
 801c84e:	bf08      	it	eq
 801c850:	1aad      	subeq	r5, r5, r2
 801c852:	68a3      	ldr	r3, [r4, #8]
 801c854:	6922      	ldr	r2, [r4, #16]
 801c856:	bf0c      	ite	eq
 801c858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c85c:	2500      	movne	r5, #0
 801c85e:	4293      	cmp	r3, r2
 801c860:	bfc4      	itt	gt
 801c862:	1a9b      	subgt	r3, r3, r2
 801c864:	18ed      	addgt	r5, r5, r3
 801c866:	2600      	movs	r6, #0
 801c868:	341a      	adds	r4, #26
 801c86a:	42b5      	cmp	r5, r6
 801c86c:	d11a      	bne.n	801c8a4 <_printf_common+0xc8>
 801c86e:	2000      	movs	r0, #0
 801c870:	e008      	b.n	801c884 <_printf_common+0xa8>
 801c872:	2301      	movs	r3, #1
 801c874:	4652      	mov	r2, sl
 801c876:	4649      	mov	r1, r9
 801c878:	4638      	mov	r0, r7
 801c87a:	47c0      	blx	r8
 801c87c:	3001      	adds	r0, #1
 801c87e:	d103      	bne.n	801c888 <_printf_common+0xac>
 801c880:	f04f 30ff 	mov.w	r0, #4294967295
 801c884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c888:	3501      	adds	r5, #1
 801c88a:	e7c6      	b.n	801c81a <_printf_common+0x3e>
 801c88c:	18e1      	adds	r1, r4, r3
 801c88e:	1c5a      	adds	r2, r3, #1
 801c890:	2030      	movs	r0, #48	; 0x30
 801c892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c896:	4422      	add	r2, r4
 801c898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c89c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c8a0:	3302      	adds	r3, #2
 801c8a2:	e7c7      	b.n	801c834 <_printf_common+0x58>
 801c8a4:	2301      	movs	r3, #1
 801c8a6:	4622      	mov	r2, r4
 801c8a8:	4649      	mov	r1, r9
 801c8aa:	4638      	mov	r0, r7
 801c8ac:	47c0      	blx	r8
 801c8ae:	3001      	adds	r0, #1
 801c8b0:	d0e6      	beq.n	801c880 <_printf_common+0xa4>
 801c8b2:	3601      	adds	r6, #1
 801c8b4:	e7d9      	b.n	801c86a <_printf_common+0x8e>
	...

0801c8b8 <_printf_i>:
 801c8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c8bc:	460c      	mov	r4, r1
 801c8be:	4691      	mov	r9, r2
 801c8c0:	7e27      	ldrb	r7, [r4, #24]
 801c8c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c8c4:	2f78      	cmp	r7, #120	; 0x78
 801c8c6:	4680      	mov	r8, r0
 801c8c8:	469a      	mov	sl, r3
 801c8ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c8ce:	d807      	bhi.n	801c8e0 <_printf_i+0x28>
 801c8d0:	2f62      	cmp	r7, #98	; 0x62
 801c8d2:	d80a      	bhi.n	801c8ea <_printf_i+0x32>
 801c8d4:	2f00      	cmp	r7, #0
 801c8d6:	f000 80d8 	beq.w	801ca8a <_printf_i+0x1d2>
 801c8da:	2f58      	cmp	r7, #88	; 0x58
 801c8dc:	f000 80a3 	beq.w	801ca26 <_printf_i+0x16e>
 801c8e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c8e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c8e8:	e03a      	b.n	801c960 <_printf_i+0xa8>
 801c8ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c8ee:	2b15      	cmp	r3, #21
 801c8f0:	d8f6      	bhi.n	801c8e0 <_printf_i+0x28>
 801c8f2:	a001      	add	r0, pc, #4	; (adr r0, 801c8f8 <_printf_i+0x40>)
 801c8f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c8f8:	0801c951 	.word	0x0801c951
 801c8fc:	0801c965 	.word	0x0801c965
 801c900:	0801c8e1 	.word	0x0801c8e1
 801c904:	0801c8e1 	.word	0x0801c8e1
 801c908:	0801c8e1 	.word	0x0801c8e1
 801c90c:	0801c8e1 	.word	0x0801c8e1
 801c910:	0801c965 	.word	0x0801c965
 801c914:	0801c8e1 	.word	0x0801c8e1
 801c918:	0801c8e1 	.word	0x0801c8e1
 801c91c:	0801c8e1 	.word	0x0801c8e1
 801c920:	0801c8e1 	.word	0x0801c8e1
 801c924:	0801ca71 	.word	0x0801ca71
 801c928:	0801c995 	.word	0x0801c995
 801c92c:	0801ca53 	.word	0x0801ca53
 801c930:	0801c8e1 	.word	0x0801c8e1
 801c934:	0801c8e1 	.word	0x0801c8e1
 801c938:	0801ca93 	.word	0x0801ca93
 801c93c:	0801c8e1 	.word	0x0801c8e1
 801c940:	0801c995 	.word	0x0801c995
 801c944:	0801c8e1 	.word	0x0801c8e1
 801c948:	0801c8e1 	.word	0x0801c8e1
 801c94c:	0801ca5b 	.word	0x0801ca5b
 801c950:	680b      	ldr	r3, [r1, #0]
 801c952:	1d1a      	adds	r2, r3, #4
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	600a      	str	r2, [r1, #0]
 801c958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c960:	2301      	movs	r3, #1
 801c962:	e0a3      	b.n	801caac <_printf_i+0x1f4>
 801c964:	6825      	ldr	r5, [r4, #0]
 801c966:	6808      	ldr	r0, [r1, #0]
 801c968:	062e      	lsls	r6, r5, #24
 801c96a:	f100 0304 	add.w	r3, r0, #4
 801c96e:	d50a      	bpl.n	801c986 <_printf_i+0xce>
 801c970:	6805      	ldr	r5, [r0, #0]
 801c972:	600b      	str	r3, [r1, #0]
 801c974:	2d00      	cmp	r5, #0
 801c976:	da03      	bge.n	801c980 <_printf_i+0xc8>
 801c978:	232d      	movs	r3, #45	; 0x2d
 801c97a:	426d      	negs	r5, r5
 801c97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c980:	485e      	ldr	r0, [pc, #376]	; (801cafc <_printf_i+0x244>)
 801c982:	230a      	movs	r3, #10
 801c984:	e019      	b.n	801c9ba <_printf_i+0x102>
 801c986:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c98a:	6805      	ldr	r5, [r0, #0]
 801c98c:	600b      	str	r3, [r1, #0]
 801c98e:	bf18      	it	ne
 801c990:	b22d      	sxthne	r5, r5
 801c992:	e7ef      	b.n	801c974 <_printf_i+0xbc>
 801c994:	680b      	ldr	r3, [r1, #0]
 801c996:	6825      	ldr	r5, [r4, #0]
 801c998:	1d18      	adds	r0, r3, #4
 801c99a:	6008      	str	r0, [r1, #0]
 801c99c:	0628      	lsls	r0, r5, #24
 801c99e:	d501      	bpl.n	801c9a4 <_printf_i+0xec>
 801c9a0:	681d      	ldr	r5, [r3, #0]
 801c9a2:	e002      	b.n	801c9aa <_printf_i+0xf2>
 801c9a4:	0669      	lsls	r1, r5, #25
 801c9a6:	d5fb      	bpl.n	801c9a0 <_printf_i+0xe8>
 801c9a8:	881d      	ldrh	r5, [r3, #0]
 801c9aa:	4854      	ldr	r0, [pc, #336]	; (801cafc <_printf_i+0x244>)
 801c9ac:	2f6f      	cmp	r7, #111	; 0x6f
 801c9ae:	bf0c      	ite	eq
 801c9b0:	2308      	moveq	r3, #8
 801c9b2:	230a      	movne	r3, #10
 801c9b4:	2100      	movs	r1, #0
 801c9b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c9ba:	6866      	ldr	r6, [r4, #4]
 801c9bc:	60a6      	str	r6, [r4, #8]
 801c9be:	2e00      	cmp	r6, #0
 801c9c0:	bfa2      	ittt	ge
 801c9c2:	6821      	ldrge	r1, [r4, #0]
 801c9c4:	f021 0104 	bicge.w	r1, r1, #4
 801c9c8:	6021      	strge	r1, [r4, #0]
 801c9ca:	b90d      	cbnz	r5, 801c9d0 <_printf_i+0x118>
 801c9cc:	2e00      	cmp	r6, #0
 801c9ce:	d04d      	beq.n	801ca6c <_printf_i+0x1b4>
 801c9d0:	4616      	mov	r6, r2
 801c9d2:	fbb5 f1f3 	udiv	r1, r5, r3
 801c9d6:	fb03 5711 	mls	r7, r3, r1, r5
 801c9da:	5dc7      	ldrb	r7, [r0, r7]
 801c9dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c9e0:	462f      	mov	r7, r5
 801c9e2:	42bb      	cmp	r3, r7
 801c9e4:	460d      	mov	r5, r1
 801c9e6:	d9f4      	bls.n	801c9d2 <_printf_i+0x11a>
 801c9e8:	2b08      	cmp	r3, #8
 801c9ea:	d10b      	bne.n	801ca04 <_printf_i+0x14c>
 801c9ec:	6823      	ldr	r3, [r4, #0]
 801c9ee:	07df      	lsls	r7, r3, #31
 801c9f0:	d508      	bpl.n	801ca04 <_printf_i+0x14c>
 801c9f2:	6923      	ldr	r3, [r4, #16]
 801c9f4:	6861      	ldr	r1, [r4, #4]
 801c9f6:	4299      	cmp	r1, r3
 801c9f8:	bfde      	ittt	le
 801c9fa:	2330      	movle	r3, #48	; 0x30
 801c9fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ca00:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ca04:	1b92      	subs	r2, r2, r6
 801ca06:	6122      	str	r2, [r4, #16]
 801ca08:	f8cd a000 	str.w	sl, [sp]
 801ca0c:	464b      	mov	r3, r9
 801ca0e:	aa03      	add	r2, sp, #12
 801ca10:	4621      	mov	r1, r4
 801ca12:	4640      	mov	r0, r8
 801ca14:	f7ff fee2 	bl	801c7dc <_printf_common>
 801ca18:	3001      	adds	r0, #1
 801ca1a:	d14c      	bne.n	801cab6 <_printf_i+0x1fe>
 801ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 801ca20:	b004      	add	sp, #16
 801ca22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca26:	4835      	ldr	r0, [pc, #212]	; (801cafc <_printf_i+0x244>)
 801ca28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ca2c:	6823      	ldr	r3, [r4, #0]
 801ca2e:	680e      	ldr	r6, [r1, #0]
 801ca30:	061f      	lsls	r7, r3, #24
 801ca32:	f856 5b04 	ldr.w	r5, [r6], #4
 801ca36:	600e      	str	r6, [r1, #0]
 801ca38:	d514      	bpl.n	801ca64 <_printf_i+0x1ac>
 801ca3a:	07d9      	lsls	r1, r3, #31
 801ca3c:	bf44      	itt	mi
 801ca3e:	f043 0320 	orrmi.w	r3, r3, #32
 801ca42:	6023      	strmi	r3, [r4, #0]
 801ca44:	b91d      	cbnz	r5, 801ca4e <_printf_i+0x196>
 801ca46:	6823      	ldr	r3, [r4, #0]
 801ca48:	f023 0320 	bic.w	r3, r3, #32
 801ca4c:	6023      	str	r3, [r4, #0]
 801ca4e:	2310      	movs	r3, #16
 801ca50:	e7b0      	b.n	801c9b4 <_printf_i+0xfc>
 801ca52:	6823      	ldr	r3, [r4, #0]
 801ca54:	f043 0320 	orr.w	r3, r3, #32
 801ca58:	6023      	str	r3, [r4, #0]
 801ca5a:	2378      	movs	r3, #120	; 0x78
 801ca5c:	4828      	ldr	r0, [pc, #160]	; (801cb00 <_printf_i+0x248>)
 801ca5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ca62:	e7e3      	b.n	801ca2c <_printf_i+0x174>
 801ca64:	065e      	lsls	r6, r3, #25
 801ca66:	bf48      	it	mi
 801ca68:	b2ad      	uxthmi	r5, r5
 801ca6a:	e7e6      	b.n	801ca3a <_printf_i+0x182>
 801ca6c:	4616      	mov	r6, r2
 801ca6e:	e7bb      	b.n	801c9e8 <_printf_i+0x130>
 801ca70:	680b      	ldr	r3, [r1, #0]
 801ca72:	6826      	ldr	r6, [r4, #0]
 801ca74:	6960      	ldr	r0, [r4, #20]
 801ca76:	1d1d      	adds	r5, r3, #4
 801ca78:	600d      	str	r5, [r1, #0]
 801ca7a:	0635      	lsls	r5, r6, #24
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	d501      	bpl.n	801ca84 <_printf_i+0x1cc>
 801ca80:	6018      	str	r0, [r3, #0]
 801ca82:	e002      	b.n	801ca8a <_printf_i+0x1d2>
 801ca84:	0671      	lsls	r1, r6, #25
 801ca86:	d5fb      	bpl.n	801ca80 <_printf_i+0x1c8>
 801ca88:	8018      	strh	r0, [r3, #0]
 801ca8a:	2300      	movs	r3, #0
 801ca8c:	6123      	str	r3, [r4, #16]
 801ca8e:	4616      	mov	r6, r2
 801ca90:	e7ba      	b.n	801ca08 <_printf_i+0x150>
 801ca92:	680b      	ldr	r3, [r1, #0]
 801ca94:	1d1a      	adds	r2, r3, #4
 801ca96:	600a      	str	r2, [r1, #0]
 801ca98:	681e      	ldr	r6, [r3, #0]
 801ca9a:	6862      	ldr	r2, [r4, #4]
 801ca9c:	2100      	movs	r1, #0
 801ca9e:	4630      	mov	r0, r6
 801caa0:	f7e3 fc36 	bl	8000310 <memchr>
 801caa4:	b108      	cbz	r0, 801caaa <_printf_i+0x1f2>
 801caa6:	1b80      	subs	r0, r0, r6
 801caa8:	6060      	str	r0, [r4, #4]
 801caaa:	6863      	ldr	r3, [r4, #4]
 801caac:	6123      	str	r3, [r4, #16]
 801caae:	2300      	movs	r3, #0
 801cab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cab4:	e7a8      	b.n	801ca08 <_printf_i+0x150>
 801cab6:	6923      	ldr	r3, [r4, #16]
 801cab8:	4632      	mov	r2, r6
 801caba:	4649      	mov	r1, r9
 801cabc:	4640      	mov	r0, r8
 801cabe:	47d0      	blx	sl
 801cac0:	3001      	adds	r0, #1
 801cac2:	d0ab      	beq.n	801ca1c <_printf_i+0x164>
 801cac4:	6823      	ldr	r3, [r4, #0]
 801cac6:	079b      	lsls	r3, r3, #30
 801cac8:	d413      	bmi.n	801caf2 <_printf_i+0x23a>
 801caca:	68e0      	ldr	r0, [r4, #12]
 801cacc:	9b03      	ldr	r3, [sp, #12]
 801cace:	4298      	cmp	r0, r3
 801cad0:	bfb8      	it	lt
 801cad2:	4618      	movlt	r0, r3
 801cad4:	e7a4      	b.n	801ca20 <_printf_i+0x168>
 801cad6:	2301      	movs	r3, #1
 801cad8:	4632      	mov	r2, r6
 801cada:	4649      	mov	r1, r9
 801cadc:	4640      	mov	r0, r8
 801cade:	47d0      	blx	sl
 801cae0:	3001      	adds	r0, #1
 801cae2:	d09b      	beq.n	801ca1c <_printf_i+0x164>
 801cae4:	3501      	adds	r5, #1
 801cae6:	68e3      	ldr	r3, [r4, #12]
 801cae8:	9903      	ldr	r1, [sp, #12]
 801caea:	1a5b      	subs	r3, r3, r1
 801caec:	42ab      	cmp	r3, r5
 801caee:	dcf2      	bgt.n	801cad6 <_printf_i+0x21e>
 801caf0:	e7eb      	b.n	801caca <_printf_i+0x212>
 801caf2:	2500      	movs	r5, #0
 801caf4:	f104 0619 	add.w	r6, r4, #25
 801caf8:	e7f5      	b.n	801cae6 <_printf_i+0x22e>
 801cafa:	bf00      	nop
 801cafc:	08020e61 	.word	0x08020e61
 801cb00:	08020e72 	.word	0x08020e72

0801cb04 <_sbrk_r>:
 801cb04:	b538      	push	{r3, r4, r5, lr}
 801cb06:	4d06      	ldr	r5, [pc, #24]	; (801cb20 <_sbrk_r+0x1c>)
 801cb08:	2300      	movs	r3, #0
 801cb0a:	4604      	mov	r4, r0
 801cb0c:	4608      	mov	r0, r1
 801cb0e:	602b      	str	r3, [r5, #0]
 801cb10:	f7e5 f8ec 	bl	8001cec <_sbrk>
 801cb14:	1c43      	adds	r3, r0, #1
 801cb16:	d102      	bne.n	801cb1e <_sbrk_r+0x1a>
 801cb18:	682b      	ldr	r3, [r5, #0]
 801cb1a:	b103      	cbz	r3, 801cb1e <_sbrk_r+0x1a>
 801cb1c:	6023      	str	r3, [r4, #0]
 801cb1e:	bd38      	pop	{r3, r4, r5, pc}
 801cb20:	24007340 	.word	0x24007340

0801cb24 <_raise_r>:
 801cb24:	291f      	cmp	r1, #31
 801cb26:	b538      	push	{r3, r4, r5, lr}
 801cb28:	4604      	mov	r4, r0
 801cb2a:	460d      	mov	r5, r1
 801cb2c:	d904      	bls.n	801cb38 <_raise_r+0x14>
 801cb2e:	2316      	movs	r3, #22
 801cb30:	6003      	str	r3, [r0, #0]
 801cb32:	f04f 30ff 	mov.w	r0, #4294967295
 801cb36:	bd38      	pop	{r3, r4, r5, pc}
 801cb38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cb3a:	b112      	cbz	r2, 801cb42 <_raise_r+0x1e>
 801cb3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cb40:	b94b      	cbnz	r3, 801cb56 <_raise_r+0x32>
 801cb42:	4620      	mov	r0, r4
 801cb44:	f000 f830 	bl	801cba8 <_getpid_r>
 801cb48:	462a      	mov	r2, r5
 801cb4a:	4601      	mov	r1, r0
 801cb4c:	4620      	mov	r0, r4
 801cb4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb52:	f000 b817 	b.w	801cb84 <_kill_r>
 801cb56:	2b01      	cmp	r3, #1
 801cb58:	d00a      	beq.n	801cb70 <_raise_r+0x4c>
 801cb5a:	1c59      	adds	r1, r3, #1
 801cb5c:	d103      	bne.n	801cb66 <_raise_r+0x42>
 801cb5e:	2316      	movs	r3, #22
 801cb60:	6003      	str	r3, [r0, #0]
 801cb62:	2001      	movs	r0, #1
 801cb64:	e7e7      	b.n	801cb36 <_raise_r+0x12>
 801cb66:	2400      	movs	r4, #0
 801cb68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cb6c:	4628      	mov	r0, r5
 801cb6e:	4798      	blx	r3
 801cb70:	2000      	movs	r0, #0
 801cb72:	e7e0      	b.n	801cb36 <_raise_r+0x12>

0801cb74 <raise>:
 801cb74:	4b02      	ldr	r3, [pc, #8]	; (801cb80 <raise+0xc>)
 801cb76:	4601      	mov	r1, r0
 801cb78:	6818      	ldr	r0, [r3, #0]
 801cb7a:	f7ff bfd3 	b.w	801cb24 <_raise_r>
 801cb7e:	bf00      	nop
 801cb80:	240000d8 	.word	0x240000d8

0801cb84 <_kill_r>:
 801cb84:	b538      	push	{r3, r4, r5, lr}
 801cb86:	4d07      	ldr	r5, [pc, #28]	; (801cba4 <_kill_r+0x20>)
 801cb88:	2300      	movs	r3, #0
 801cb8a:	4604      	mov	r4, r0
 801cb8c:	4608      	mov	r0, r1
 801cb8e:	4611      	mov	r1, r2
 801cb90:	602b      	str	r3, [r5, #0]
 801cb92:	f7e5 f877 	bl	8001c84 <_kill>
 801cb96:	1c43      	adds	r3, r0, #1
 801cb98:	d102      	bne.n	801cba0 <_kill_r+0x1c>
 801cb9a:	682b      	ldr	r3, [r5, #0]
 801cb9c:	b103      	cbz	r3, 801cba0 <_kill_r+0x1c>
 801cb9e:	6023      	str	r3, [r4, #0]
 801cba0:	bd38      	pop	{r3, r4, r5, pc}
 801cba2:	bf00      	nop
 801cba4:	24007340 	.word	0x24007340

0801cba8 <_getpid_r>:
 801cba8:	f7e5 b86a 	b.w	8001c80 <_getpid>

0801cbac <__swbuf_r>:
 801cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbae:	460e      	mov	r6, r1
 801cbb0:	4614      	mov	r4, r2
 801cbb2:	4605      	mov	r5, r0
 801cbb4:	b118      	cbz	r0, 801cbbe <__swbuf_r+0x12>
 801cbb6:	6983      	ldr	r3, [r0, #24]
 801cbb8:	b90b      	cbnz	r3, 801cbbe <__swbuf_r+0x12>
 801cbba:	f000 fa33 	bl	801d024 <__sinit>
 801cbbe:	4b21      	ldr	r3, [pc, #132]	; (801cc44 <__swbuf_r+0x98>)
 801cbc0:	429c      	cmp	r4, r3
 801cbc2:	d12b      	bne.n	801cc1c <__swbuf_r+0x70>
 801cbc4:	686c      	ldr	r4, [r5, #4]
 801cbc6:	69a3      	ldr	r3, [r4, #24]
 801cbc8:	60a3      	str	r3, [r4, #8]
 801cbca:	89a3      	ldrh	r3, [r4, #12]
 801cbcc:	071a      	lsls	r2, r3, #28
 801cbce:	d52f      	bpl.n	801cc30 <__swbuf_r+0x84>
 801cbd0:	6923      	ldr	r3, [r4, #16]
 801cbd2:	b36b      	cbz	r3, 801cc30 <__swbuf_r+0x84>
 801cbd4:	6923      	ldr	r3, [r4, #16]
 801cbd6:	6820      	ldr	r0, [r4, #0]
 801cbd8:	1ac0      	subs	r0, r0, r3
 801cbda:	6963      	ldr	r3, [r4, #20]
 801cbdc:	b2f6      	uxtb	r6, r6
 801cbde:	4283      	cmp	r3, r0
 801cbe0:	4637      	mov	r7, r6
 801cbe2:	dc04      	bgt.n	801cbee <__swbuf_r+0x42>
 801cbe4:	4621      	mov	r1, r4
 801cbe6:	4628      	mov	r0, r5
 801cbe8:	f000 f988 	bl	801cefc <_fflush_r>
 801cbec:	bb30      	cbnz	r0, 801cc3c <__swbuf_r+0x90>
 801cbee:	68a3      	ldr	r3, [r4, #8]
 801cbf0:	3b01      	subs	r3, #1
 801cbf2:	60a3      	str	r3, [r4, #8]
 801cbf4:	6823      	ldr	r3, [r4, #0]
 801cbf6:	1c5a      	adds	r2, r3, #1
 801cbf8:	6022      	str	r2, [r4, #0]
 801cbfa:	701e      	strb	r6, [r3, #0]
 801cbfc:	6963      	ldr	r3, [r4, #20]
 801cbfe:	3001      	adds	r0, #1
 801cc00:	4283      	cmp	r3, r0
 801cc02:	d004      	beq.n	801cc0e <__swbuf_r+0x62>
 801cc04:	89a3      	ldrh	r3, [r4, #12]
 801cc06:	07db      	lsls	r3, r3, #31
 801cc08:	d506      	bpl.n	801cc18 <__swbuf_r+0x6c>
 801cc0a:	2e0a      	cmp	r6, #10
 801cc0c:	d104      	bne.n	801cc18 <__swbuf_r+0x6c>
 801cc0e:	4621      	mov	r1, r4
 801cc10:	4628      	mov	r0, r5
 801cc12:	f000 f973 	bl	801cefc <_fflush_r>
 801cc16:	b988      	cbnz	r0, 801cc3c <__swbuf_r+0x90>
 801cc18:	4638      	mov	r0, r7
 801cc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc1c:	4b0a      	ldr	r3, [pc, #40]	; (801cc48 <__swbuf_r+0x9c>)
 801cc1e:	429c      	cmp	r4, r3
 801cc20:	d101      	bne.n	801cc26 <__swbuf_r+0x7a>
 801cc22:	68ac      	ldr	r4, [r5, #8]
 801cc24:	e7cf      	b.n	801cbc6 <__swbuf_r+0x1a>
 801cc26:	4b09      	ldr	r3, [pc, #36]	; (801cc4c <__swbuf_r+0xa0>)
 801cc28:	429c      	cmp	r4, r3
 801cc2a:	bf08      	it	eq
 801cc2c:	68ec      	ldreq	r4, [r5, #12]
 801cc2e:	e7ca      	b.n	801cbc6 <__swbuf_r+0x1a>
 801cc30:	4621      	mov	r1, r4
 801cc32:	4628      	mov	r0, r5
 801cc34:	f000 f80c 	bl	801cc50 <__swsetup_r>
 801cc38:	2800      	cmp	r0, #0
 801cc3a:	d0cb      	beq.n	801cbd4 <__swbuf_r+0x28>
 801cc3c:	f04f 37ff 	mov.w	r7, #4294967295
 801cc40:	e7ea      	b.n	801cc18 <__swbuf_r+0x6c>
 801cc42:	bf00      	nop
 801cc44:	08020ea8 	.word	0x08020ea8
 801cc48:	08020ec8 	.word	0x08020ec8
 801cc4c:	08020e88 	.word	0x08020e88

0801cc50 <__swsetup_r>:
 801cc50:	4b32      	ldr	r3, [pc, #200]	; (801cd1c <__swsetup_r+0xcc>)
 801cc52:	b570      	push	{r4, r5, r6, lr}
 801cc54:	681d      	ldr	r5, [r3, #0]
 801cc56:	4606      	mov	r6, r0
 801cc58:	460c      	mov	r4, r1
 801cc5a:	b125      	cbz	r5, 801cc66 <__swsetup_r+0x16>
 801cc5c:	69ab      	ldr	r3, [r5, #24]
 801cc5e:	b913      	cbnz	r3, 801cc66 <__swsetup_r+0x16>
 801cc60:	4628      	mov	r0, r5
 801cc62:	f000 f9df 	bl	801d024 <__sinit>
 801cc66:	4b2e      	ldr	r3, [pc, #184]	; (801cd20 <__swsetup_r+0xd0>)
 801cc68:	429c      	cmp	r4, r3
 801cc6a:	d10f      	bne.n	801cc8c <__swsetup_r+0x3c>
 801cc6c:	686c      	ldr	r4, [r5, #4]
 801cc6e:	89a3      	ldrh	r3, [r4, #12]
 801cc70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc74:	0719      	lsls	r1, r3, #28
 801cc76:	d42c      	bmi.n	801ccd2 <__swsetup_r+0x82>
 801cc78:	06dd      	lsls	r5, r3, #27
 801cc7a:	d411      	bmi.n	801cca0 <__swsetup_r+0x50>
 801cc7c:	2309      	movs	r3, #9
 801cc7e:	6033      	str	r3, [r6, #0]
 801cc80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cc84:	81a3      	strh	r3, [r4, #12]
 801cc86:	f04f 30ff 	mov.w	r0, #4294967295
 801cc8a:	e03e      	b.n	801cd0a <__swsetup_r+0xba>
 801cc8c:	4b25      	ldr	r3, [pc, #148]	; (801cd24 <__swsetup_r+0xd4>)
 801cc8e:	429c      	cmp	r4, r3
 801cc90:	d101      	bne.n	801cc96 <__swsetup_r+0x46>
 801cc92:	68ac      	ldr	r4, [r5, #8]
 801cc94:	e7eb      	b.n	801cc6e <__swsetup_r+0x1e>
 801cc96:	4b24      	ldr	r3, [pc, #144]	; (801cd28 <__swsetup_r+0xd8>)
 801cc98:	429c      	cmp	r4, r3
 801cc9a:	bf08      	it	eq
 801cc9c:	68ec      	ldreq	r4, [r5, #12]
 801cc9e:	e7e6      	b.n	801cc6e <__swsetup_r+0x1e>
 801cca0:	0758      	lsls	r0, r3, #29
 801cca2:	d512      	bpl.n	801ccca <__swsetup_r+0x7a>
 801cca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cca6:	b141      	cbz	r1, 801ccba <__swsetup_r+0x6a>
 801cca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ccac:	4299      	cmp	r1, r3
 801ccae:	d002      	beq.n	801ccb6 <__swsetup_r+0x66>
 801ccb0:	4630      	mov	r0, r6
 801ccb2:	f7ff fb8f 	bl	801c3d4 <_free_r>
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	6363      	str	r3, [r4, #52]	; 0x34
 801ccba:	89a3      	ldrh	r3, [r4, #12]
 801ccbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ccc0:	81a3      	strh	r3, [r4, #12]
 801ccc2:	2300      	movs	r3, #0
 801ccc4:	6063      	str	r3, [r4, #4]
 801ccc6:	6923      	ldr	r3, [r4, #16]
 801ccc8:	6023      	str	r3, [r4, #0]
 801ccca:	89a3      	ldrh	r3, [r4, #12]
 801cccc:	f043 0308 	orr.w	r3, r3, #8
 801ccd0:	81a3      	strh	r3, [r4, #12]
 801ccd2:	6923      	ldr	r3, [r4, #16]
 801ccd4:	b94b      	cbnz	r3, 801ccea <__swsetup_r+0x9a>
 801ccd6:	89a3      	ldrh	r3, [r4, #12]
 801ccd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ccdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cce0:	d003      	beq.n	801ccea <__swsetup_r+0x9a>
 801cce2:	4621      	mov	r1, r4
 801cce4:	4630      	mov	r0, r6
 801cce6:	f000 fa63 	bl	801d1b0 <__smakebuf_r>
 801ccea:	89a0      	ldrh	r0, [r4, #12]
 801ccec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ccf0:	f010 0301 	ands.w	r3, r0, #1
 801ccf4:	d00a      	beq.n	801cd0c <__swsetup_r+0xbc>
 801ccf6:	2300      	movs	r3, #0
 801ccf8:	60a3      	str	r3, [r4, #8]
 801ccfa:	6963      	ldr	r3, [r4, #20]
 801ccfc:	425b      	negs	r3, r3
 801ccfe:	61a3      	str	r3, [r4, #24]
 801cd00:	6923      	ldr	r3, [r4, #16]
 801cd02:	b943      	cbnz	r3, 801cd16 <__swsetup_r+0xc6>
 801cd04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cd08:	d1ba      	bne.n	801cc80 <__swsetup_r+0x30>
 801cd0a:	bd70      	pop	{r4, r5, r6, pc}
 801cd0c:	0781      	lsls	r1, r0, #30
 801cd0e:	bf58      	it	pl
 801cd10:	6963      	ldrpl	r3, [r4, #20]
 801cd12:	60a3      	str	r3, [r4, #8]
 801cd14:	e7f4      	b.n	801cd00 <__swsetup_r+0xb0>
 801cd16:	2000      	movs	r0, #0
 801cd18:	e7f7      	b.n	801cd0a <__swsetup_r+0xba>
 801cd1a:	bf00      	nop
 801cd1c:	240000d8 	.word	0x240000d8
 801cd20:	08020ea8 	.word	0x08020ea8
 801cd24:	08020ec8 	.word	0x08020ec8
 801cd28:	08020e88 	.word	0x08020e88

0801cd2c <__register_exitproc>:
 801cd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd30:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801cdec <__register_exitproc+0xc0>
 801cd34:	4606      	mov	r6, r0
 801cd36:	f8d8 0000 	ldr.w	r0, [r8]
 801cd3a:	461f      	mov	r7, r3
 801cd3c:	460d      	mov	r5, r1
 801cd3e:	4691      	mov	r9, r2
 801cd40:	f000 fa0e 	bl	801d160 <__retarget_lock_acquire_recursive>
 801cd44:	4b25      	ldr	r3, [pc, #148]	; (801cddc <__register_exitproc+0xb0>)
 801cd46:	681c      	ldr	r4, [r3, #0]
 801cd48:	b934      	cbnz	r4, 801cd58 <__register_exitproc+0x2c>
 801cd4a:	4c25      	ldr	r4, [pc, #148]	; (801cde0 <__register_exitproc+0xb4>)
 801cd4c:	601c      	str	r4, [r3, #0]
 801cd4e:	4b25      	ldr	r3, [pc, #148]	; (801cde4 <__register_exitproc+0xb8>)
 801cd50:	b113      	cbz	r3, 801cd58 <__register_exitproc+0x2c>
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801cd58:	6863      	ldr	r3, [r4, #4]
 801cd5a:	2b1f      	cmp	r3, #31
 801cd5c:	dd07      	ble.n	801cd6e <__register_exitproc+0x42>
 801cd5e:	f8d8 0000 	ldr.w	r0, [r8]
 801cd62:	f000 f9ff 	bl	801d164 <__retarget_lock_release_recursive>
 801cd66:	f04f 30ff 	mov.w	r0, #4294967295
 801cd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd6e:	b34e      	cbz	r6, 801cdc4 <__register_exitproc+0x98>
 801cd70:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801cd74:	b988      	cbnz	r0, 801cd9a <__register_exitproc+0x6e>
 801cd76:	4b1c      	ldr	r3, [pc, #112]	; (801cde8 <__register_exitproc+0xbc>)
 801cd78:	b923      	cbnz	r3, 801cd84 <__register_exitproc+0x58>
 801cd7a:	f8d8 0000 	ldr.w	r0, [r8]
 801cd7e:	f000 f9f0 	bl	801d162 <__retarget_lock_release>
 801cd82:	e7f0      	b.n	801cd66 <__register_exitproc+0x3a>
 801cd84:	f44f 7084 	mov.w	r0, #264	; 0x108
 801cd88:	f7ff fafe 	bl	801c388 <malloc>
 801cd8c:	2800      	cmp	r0, #0
 801cd8e:	d0f4      	beq.n	801cd7a <__register_exitproc+0x4e>
 801cd90:	2300      	movs	r3, #0
 801cd92:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801cd96:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801cd9a:	6863      	ldr	r3, [r4, #4]
 801cd9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801cda0:	2201      	movs	r2, #1
 801cda2:	409a      	lsls	r2, r3
 801cda4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801cda8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801cdac:	4313      	orrs	r3, r2
 801cdae:	2e02      	cmp	r6, #2
 801cdb0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801cdb4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801cdb8:	bf02      	ittt	eq
 801cdba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801cdbe:	431a      	orreq	r2, r3
 801cdc0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801cdc4:	6863      	ldr	r3, [r4, #4]
 801cdc6:	f8d8 0000 	ldr.w	r0, [r8]
 801cdca:	1c5a      	adds	r2, r3, #1
 801cdcc:	3302      	adds	r3, #2
 801cdce:	6062      	str	r2, [r4, #4]
 801cdd0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801cdd4:	f000 f9c6 	bl	801d164 <__retarget_lock_release_recursive>
 801cdd8:	2000      	movs	r0, #0
 801cdda:	e7c6      	b.n	801cd6a <__register_exitproc+0x3e>
 801cddc:	24006edc 	.word	0x24006edc
 801cde0:	24006e50 	.word	0x24006e50
 801cde4:	08020e84 	.word	0x08020e84
 801cde8:	0801c389 	.word	0x0801c389
 801cdec:	2400013c 	.word	0x2400013c

0801cdf0 <__sflush_r>:
 801cdf0:	898a      	ldrh	r2, [r1, #12]
 801cdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdf6:	4605      	mov	r5, r0
 801cdf8:	0710      	lsls	r0, r2, #28
 801cdfa:	460c      	mov	r4, r1
 801cdfc:	d458      	bmi.n	801ceb0 <__sflush_r+0xc0>
 801cdfe:	684b      	ldr	r3, [r1, #4]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	dc05      	bgt.n	801ce10 <__sflush_r+0x20>
 801ce04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	dc02      	bgt.n	801ce10 <__sflush_r+0x20>
 801ce0a:	2000      	movs	r0, #0
 801ce0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce12:	2e00      	cmp	r6, #0
 801ce14:	d0f9      	beq.n	801ce0a <__sflush_r+0x1a>
 801ce16:	2300      	movs	r3, #0
 801ce18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ce1c:	682f      	ldr	r7, [r5, #0]
 801ce1e:	602b      	str	r3, [r5, #0]
 801ce20:	d032      	beq.n	801ce88 <__sflush_r+0x98>
 801ce22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ce24:	89a3      	ldrh	r3, [r4, #12]
 801ce26:	075a      	lsls	r2, r3, #29
 801ce28:	d505      	bpl.n	801ce36 <__sflush_r+0x46>
 801ce2a:	6863      	ldr	r3, [r4, #4]
 801ce2c:	1ac0      	subs	r0, r0, r3
 801ce2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ce30:	b10b      	cbz	r3, 801ce36 <__sflush_r+0x46>
 801ce32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce34:	1ac0      	subs	r0, r0, r3
 801ce36:	2300      	movs	r3, #0
 801ce38:	4602      	mov	r2, r0
 801ce3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce3c:	6a21      	ldr	r1, [r4, #32]
 801ce3e:	4628      	mov	r0, r5
 801ce40:	47b0      	blx	r6
 801ce42:	1c43      	adds	r3, r0, #1
 801ce44:	89a3      	ldrh	r3, [r4, #12]
 801ce46:	d106      	bne.n	801ce56 <__sflush_r+0x66>
 801ce48:	6829      	ldr	r1, [r5, #0]
 801ce4a:	291d      	cmp	r1, #29
 801ce4c:	d82c      	bhi.n	801cea8 <__sflush_r+0xb8>
 801ce4e:	4a2a      	ldr	r2, [pc, #168]	; (801cef8 <__sflush_r+0x108>)
 801ce50:	40ca      	lsrs	r2, r1
 801ce52:	07d6      	lsls	r6, r2, #31
 801ce54:	d528      	bpl.n	801cea8 <__sflush_r+0xb8>
 801ce56:	2200      	movs	r2, #0
 801ce58:	6062      	str	r2, [r4, #4]
 801ce5a:	04d9      	lsls	r1, r3, #19
 801ce5c:	6922      	ldr	r2, [r4, #16]
 801ce5e:	6022      	str	r2, [r4, #0]
 801ce60:	d504      	bpl.n	801ce6c <__sflush_r+0x7c>
 801ce62:	1c42      	adds	r2, r0, #1
 801ce64:	d101      	bne.n	801ce6a <__sflush_r+0x7a>
 801ce66:	682b      	ldr	r3, [r5, #0]
 801ce68:	b903      	cbnz	r3, 801ce6c <__sflush_r+0x7c>
 801ce6a:	6560      	str	r0, [r4, #84]	; 0x54
 801ce6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce6e:	602f      	str	r7, [r5, #0]
 801ce70:	2900      	cmp	r1, #0
 801ce72:	d0ca      	beq.n	801ce0a <__sflush_r+0x1a>
 801ce74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce78:	4299      	cmp	r1, r3
 801ce7a:	d002      	beq.n	801ce82 <__sflush_r+0x92>
 801ce7c:	4628      	mov	r0, r5
 801ce7e:	f7ff faa9 	bl	801c3d4 <_free_r>
 801ce82:	2000      	movs	r0, #0
 801ce84:	6360      	str	r0, [r4, #52]	; 0x34
 801ce86:	e7c1      	b.n	801ce0c <__sflush_r+0x1c>
 801ce88:	6a21      	ldr	r1, [r4, #32]
 801ce8a:	2301      	movs	r3, #1
 801ce8c:	4628      	mov	r0, r5
 801ce8e:	47b0      	blx	r6
 801ce90:	1c41      	adds	r1, r0, #1
 801ce92:	d1c7      	bne.n	801ce24 <__sflush_r+0x34>
 801ce94:	682b      	ldr	r3, [r5, #0]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d0c4      	beq.n	801ce24 <__sflush_r+0x34>
 801ce9a:	2b1d      	cmp	r3, #29
 801ce9c:	d001      	beq.n	801cea2 <__sflush_r+0xb2>
 801ce9e:	2b16      	cmp	r3, #22
 801cea0:	d101      	bne.n	801cea6 <__sflush_r+0xb6>
 801cea2:	602f      	str	r7, [r5, #0]
 801cea4:	e7b1      	b.n	801ce0a <__sflush_r+0x1a>
 801cea6:	89a3      	ldrh	r3, [r4, #12]
 801cea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ceac:	81a3      	strh	r3, [r4, #12]
 801ceae:	e7ad      	b.n	801ce0c <__sflush_r+0x1c>
 801ceb0:	690f      	ldr	r7, [r1, #16]
 801ceb2:	2f00      	cmp	r7, #0
 801ceb4:	d0a9      	beq.n	801ce0a <__sflush_r+0x1a>
 801ceb6:	0793      	lsls	r3, r2, #30
 801ceb8:	680e      	ldr	r6, [r1, #0]
 801ceba:	bf08      	it	eq
 801cebc:	694b      	ldreq	r3, [r1, #20]
 801cebe:	600f      	str	r7, [r1, #0]
 801cec0:	bf18      	it	ne
 801cec2:	2300      	movne	r3, #0
 801cec4:	eba6 0807 	sub.w	r8, r6, r7
 801cec8:	608b      	str	r3, [r1, #8]
 801ceca:	f1b8 0f00 	cmp.w	r8, #0
 801cece:	dd9c      	ble.n	801ce0a <__sflush_r+0x1a>
 801ced0:	6a21      	ldr	r1, [r4, #32]
 801ced2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ced4:	4643      	mov	r3, r8
 801ced6:	463a      	mov	r2, r7
 801ced8:	4628      	mov	r0, r5
 801ceda:	47b0      	blx	r6
 801cedc:	2800      	cmp	r0, #0
 801cede:	dc06      	bgt.n	801ceee <__sflush_r+0xfe>
 801cee0:	89a3      	ldrh	r3, [r4, #12]
 801cee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cee6:	81a3      	strh	r3, [r4, #12]
 801cee8:	f04f 30ff 	mov.w	r0, #4294967295
 801ceec:	e78e      	b.n	801ce0c <__sflush_r+0x1c>
 801ceee:	4407      	add	r7, r0
 801cef0:	eba8 0800 	sub.w	r8, r8, r0
 801cef4:	e7e9      	b.n	801ceca <__sflush_r+0xda>
 801cef6:	bf00      	nop
 801cef8:	20400001 	.word	0x20400001

0801cefc <_fflush_r>:
 801cefc:	b538      	push	{r3, r4, r5, lr}
 801cefe:	690b      	ldr	r3, [r1, #16]
 801cf00:	4605      	mov	r5, r0
 801cf02:	460c      	mov	r4, r1
 801cf04:	b913      	cbnz	r3, 801cf0c <_fflush_r+0x10>
 801cf06:	2500      	movs	r5, #0
 801cf08:	4628      	mov	r0, r5
 801cf0a:	bd38      	pop	{r3, r4, r5, pc}
 801cf0c:	b118      	cbz	r0, 801cf16 <_fflush_r+0x1a>
 801cf0e:	6983      	ldr	r3, [r0, #24]
 801cf10:	b90b      	cbnz	r3, 801cf16 <_fflush_r+0x1a>
 801cf12:	f000 f887 	bl	801d024 <__sinit>
 801cf16:	4b14      	ldr	r3, [pc, #80]	; (801cf68 <_fflush_r+0x6c>)
 801cf18:	429c      	cmp	r4, r3
 801cf1a:	d11b      	bne.n	801cf54 <_fflush_r+0x58>
 801cf1c:	686c      	ldr	r4, [r5, #4]
 801cf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d0ef      	beq.n	801cf06 <_fflush_r+0xa>
 801cf26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cf28:	07d0      	lsls	r0, r2, #31
 801cf2a:	d404      	bmi.n	801cf36 <_fflush_r+0x3a>
 801cf2c:	0599      	lsls	r1, r3, #22
 801cf2e:	d402      	bmi.n	801cf36 <_fflush_r+0x3a>
 801cf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf32:	f000 f915 	bl	801d160 <__retarget_lock_acquire_recursive>
 801cf36:	4628      	mov	r0, r5
 801cf38:	4621      	mov	r1, r4
 801cf3a:	f7ff ff59 	bl	801cdf0 <__sflush_r>
 801cf3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf40:	07da      	lsls	r2, r3, #31
 801cf42:	4605      	mov	r5, r0
 801cf44:	d4e0      	bmi.n	801cf08 <_fflush_r+0xc>
 801cf46:	89a3      	ldrh	r3, [r4, #12]
 801cf48:	059b      	lsls	r3, r3, #22
 801cf4a:	d4dd      	bmi.n	801cf08 <_fflush_r+0xc>
 801cf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf4e:	f000 f909 	bl	801d164 <__retarget_lock_release_recursive>
 801cf52:	e7d9      	b.n	801cf08 <_fflush_r+0xc>
 801cf54:	4b05      	ldr	r3, [pc, #20]	; (801cf6c <_fflush_r+0x70>)
 801cf56:	429c      	cmp	r4, r3
 801cf58:	d101      	bne.n	801cf5e <_fflush_r+0x62>
 801cf5a:	68ac      	ldr	r4, [r5, #8]
 801cf5c:	e7df      	b.n	801cf1e <_fflush_r+0x22>
 801cf5e:	4b04      	ldr	r3, [pc, #16]	; (801cf70 <_fflush_r+0x74>)
 801cf60:	429c      	cmp	r4, r3
 801cf62:	bf08      	it	eq
 801cf64:	68ec      	ldreq	r4, [r5, #12]
 801cf66:	e7da      	b.n	801cf1e <_fflush_r+0x22>
 801cf68:	08020ea8 	.word	0x08020ea8
 801cf6c:	08020ec8 	.word	0x08020ec8
 801cf70:	08020e88 	.word	0x08020e88

0801cf74 <std>:
 801cf74:	2300      	movs	r3, #0
 801cf76:	b510      	push	{r4, lr}
 801cf78:	4604      	mov	r4, r0
 801cf7a:	e9c0 3300 	strd	r3, r3, [r0]
 801cf7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf82:	6083      	str	r3, [r0, #8]
 801cf84:	8181      	strh	r1, [r0, #12]
 801cf86:	6643      	str	r3, [r0, #100]	; 0x64
 801cf88:	81c2      	strh	r2, [r0, #14]
 801cf8a:	6183      	str	r3, [r0, #24]
 801cf8c:	4619      	mov	r1, r3
 801cf8e:	2208      	movs	r2, #8
 801cf90:	305c      	adds	r0, #92	; 0x5c
 801cf92:	f7ff fa17 	bl	801c3c4 <memset>
 801cf96:	4b05      	ldr	r3, [pc, #20]	; (801cfac <std+0x38>)
 801cf98:	6263      	str	r3, [r4, #36]	; 0x24
 801cf9a:	4b05      	ldr	r3, [pc, #20]	; (801cfb0 <std+0x3c>)
 801cf9c:	62a3      	str	r3, [r4, #40]	; 0x28
 801cf9e:	4b05      	ldr	r3, [pc, #20]	; (801cfb4 <std+0x40>)
 801cfa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cfa2:	4b05      	ldr	r3, [pc, #20]	; (801cfb8 <std+0x44>)
 801cfa4:	6224      	str	r4, [r4, #32]
 801cfa6:	6323      	str	r3, [r4, #48]	; 0x30
 801cfa8:	bd10      	pop	{r4, pc}
 801cfaa:	bf00      	nop
 801cfac:	0801d249 	.word	0x0801d249
 801cfb0:	0801d26b 	.word	0x0801d26b
 801cfb4:	0801d2a3 	.word	0x0801d2a3
 801cfb8:	0801d2c7 	.word	0x0801d2c7

0801cfbc <_cleanup_r>:
 801cfbc:	4901      	ldr	r1, [pc, #4]	; (801cfc4 <_cleanup_r+0x8>)
 801cfbe:	f000 b8af 	b.w	801d120 <_fwalk_reent>
 801cfc2:	bf00      	nop
 801cfc4:	0801cefd 	.word	0x0801cefd

0801cfc8 <__sfmoreglue>:
 801cfc8:	b570      	push	{r4, r5, r6, lr}
 801cfca:	1e4a      	subs	r2, r1, #1
 801cfcc:	2568      	movs	r5, #104	; 0x68
 801cfce:	4355      	muls	r5, r2
 801cfd0:	460e      	mov	r6, r1
 801cfd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cfd6:	f7ff fa4d 	bl	801c474 <_malloc_r>
 801cfda:	4604      	mov	r4, r0
 801cfdc:	b140      	cbz	r0, 801cff0 <__sfmoreglue+0x28>
 801cfde:	2100      	movs	r1, #0
 801cfe0:	e9c0 1600 	strd	r1, r6, [r0]
 801cfe4:	300c      	adds	r0, #12
 801cfe6:	60a0      	str	r0, [r4, #8]
 801cfe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cfec:	f7ff f9ea 	bl	801c3c4 <memset>
 801cff0:	4620      	mov	r0, r4
 801cff2:	bd70      	pop	{r4, r5, r6, pc}

0801cff4 <__sfp_lock_acquire>:
 801cff4:	4801      	ldr	r0, [pc, #4]	; (801cffc <__sfp_lock_acquire+0x8>)
 801cff6:	f000 b8b3 	b.w	801d160 <__retarget_lock_acquire_recursive>
 801cffa:	bf00      	nop
 801cffc:	2400733c 	.word	0x2400733c

0801d000 <__sfp_lock_release>:
 801d000:	4801      	ldr	r0, [pc, #4]	; (801d008 <__sfp_lock_release+0x8>)
 801d002:	f000 b8af 	b.w	801d164 <__retarget_lock_release_recursive>
 801d006:	bf00      	nop
 801d008:	2400733c 	.word	0x2400733c

0801d00c <__sinit_lock_acquire>:
 801d00c:	4801      	ldr	r0, [pc, #4]	; (801d014 <__sinit_lock_acquire+0x8>)
 801d00e:	f000 b8a7 	b.w	801d160 <__retarget_lock_acquire_recursive>
 801d012:	bf00      	nop
 801d014:	24007337 	.word	0x24007337

0801d018 <__sinit_lock_release>:
 801d018:	4801      	ldr	r0, [pc, #4]	; (801d020 <__sinit_lock_release+0x8>)
 801d01a:	f000 b8a3 	b.w	801d164 <__retarget_lock_release_recursive>
 801d01e:	bf00      	nop
 801d020:	24007337 	.word	0x24007337

0801d024 <__sinit>:
 801d024:	b510      	push	{r4, lr}
 801d026:	4604      	mov	r4, r0
 801d028:	f7ff fff0 	bl	801d00c <__sinit_lock_acquire>
 801d02c:	69a3      	ldr	r3, [r4, #24]
 801d02e:	b11b      	cbz	r3, 801d038 <__sinit+0x14>
 801d030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d034:	f7ff bff0 	b.w	801d018 <__sinit_lock_release>
 801d038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d03c:	6523      	str	r3, [r4, #80]	; 0x50
 801d03e:	4b13      	ldr	r3, [pc, #76]	; (801d08c <__sinit+0x68>)
 801d040:	4a13      	ldr	r2, [pc, #76]	; (801d090 <__sinit+0x6c>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	62a2      	str	r2, [r4, #40]	; 0x28
 801d046:	42a3      	cmp	r3, r4
 801d048:	bf04      	itt	eq
 801d04a:	2301      	moveq	r3, #1
 801d04c:	61a3      	streq	r3, [r4, #24]
 801d04e:	4620      	mov	r0, r4
 801d050:	f000 f820 	bl	801d094 <__sfp>
 801d054:	6060      	str	r0, [r4, #4]
 801d056:	4620      	mov	r0, r4
 801d058:	f000 f81c 	bl	801d094 <__sfp>
 801d05c:	60a0      	str	r0, [r4, #8]
 801d05e:	4620      	mov	r0, r4
 801d060:	f000 f818 	bl	801d094 <__sfp>
 801d064:	2200      	movs	r2, #0
 801d066:	60e0      	str	r0, [r4, #12]
 801d068:	2104      	movs	r1, #4
 801d06a:	6860      	ldr	r0, [r4, #4]
 801d06c:	f7ff ff82 	bl	801cf74 <std>
 801d070:	68a0      	ldr	r0, [r4, #8]
 801d072:	2201      	movs	r2, #1
 801d074:	2109      	movs	r1, #9
 801d076:	f7ff ff7d 	bl	801cf74 <std>
 801d07a:	68e0      	ldr	r0, [r4, #12]
 801d07c:	2202      	movs	r2, #2
 801d07e:	2112      	movs	r1, #18
 801d080:	f7ff ff78 	bl	801cf74 <std>
 801d084:	2301      	movs	r3, #1
 801d086:	61a3      	str	r3, [r4, #24]
 801d088:	e7d2      	b.n	801d030 <__sinit+0xc>
 801d08a:	bf00      	nop
 801d08c:	08020e4c 	.word	0x08020e4c
 801d090:	0801cfbd 	.word	0x0801cfbd

0801d094 <__sfp>:
 801d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d096:	4607      	mov	r7, r0
 801d098:	f7ff ffac 	bl	801cff4 <__sfp_lock_acquire>
 801d09c:	4b1e      	ldr	r3, [pc, #120]	; (801d118 <__sfp+0x84>)
 801d09e:	681e      	ldr	r6, [r3, #0]
 801d0a0:	69b3      	ldr	r3, [r6, #24]
 801d0a2:	b913      	cbnz	r3, 801d0aa <__sfp+0x16>
 801d0a4:	4630      	mov	r0, r6
 801d0a6:	f7ff ffbd 	bl	801d024 <__sinit>
 801d0aa:	3648      	adds	r6, #72	; 0x48
 801d0ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d0b0:	3b01      	subs	r3, #1
 801d0b2:	d503      	bpl.n	801d0bc <__sfp+0x28>
 801d0b4:	6833      	ldr	r3, [r6, #0]
 801d0b6:	b30b      	cbz	r3, 801d0fc <__sfp+0x68>
 801d0b8:	6836      	ldr	r6, [r6, #0]
 801d0ba:	e7f7      	b.n	801d0ac <__sfp+0x18>
 801d0bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d0c0:	b9d5      	cbnz	r5, 801d0f8 <__sfp+0x64>
 801d0c2:	4b16      	ldr	r3, [pc, #88]	; (801d11c <__sfp+0x88>)
 801d0c4:	60e3      	str	r3, [r4, #12]
 801d0c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d0ca:	6665      	str	r5, [r4, #100]	; 0x64
 801d0cc:	f000 f847 	bl	801d15e <__retarget_lock_init_recursive>
 801d0d0:	f7ff ff96 	bl	801d000 <__sfp_lock_release>
 801d0d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d0d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d0dc:	6025      	str	r5, [r4, #0]
 801d0de:	61a5      	str	r5, [r4, #24]
 801d0e0:	2208      	movs	r2, #8
 801d0e2:	4629      	mov	r1, r5
 801d0e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d0e8:	f7ff f96c 	bl	801c3c4 <memset>
 801d0ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d0f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d0f4:	4620      	mov	r0, r4
 801d0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0f8:	3468      	adds	r4, #104	; 0x68
 801d0fa:	e7d9      	b.n	801d0b0 <__sfp+0x1c>
 801d0fc:	2104      	movs	r1, #4
 801d0fe:	4638      	mov	r0, r7
 801d100:	f7ff ff62 	bl	801cfc8 <__sfmoreglue>
 801d104:	4604      	mov	r4, r0
 801d106:	6030      	str	r0, [r6, #0]
 801d108:	2800      	cmp	r0, #0
 801d10a:	d1d5      	bne.n	801d0b8 <__sfp+0x24>
 801d10c:	f7ff ff78 	bl	801d000 <__sfp_lock_release>
 801d110:	230c      	movs	r3, #12
 801d112:	603b      	str	r3, [r7, #0]
 801d114:	e7ee      	b.n	801d0f4 <__sfp+0x60>
 801d116:	bf00      	nop
 801d118:	08020e4c 	.word	0x08020e4c
 801d11c:	ffff0001 	.word	0xffff0001

0801d120 <_fwalk_reent>:
 801d120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d124:	4606      	mov	r6, r0
 801d126:	4688      	mov	r8, r1
 801d128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d12c:	2700      	movs	r7, #0
 801d12e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d132:	f1b9 0901 	subs.w	r9, r9, #1
 801d136:	d505      	bpl.n	801d144 <_fwalk_reent+0x24>
 801d138:	6824      	ldr	r4, [r4, #0]
 801d13a:	2c00      	cmp	r4, #0
 801d13c:	d1f7      	bne.n	801d12e <_fwalk_reent+0xe>
 801d13e:	4638      	mov	r0, r7
 801d140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d144:	89ab      	ldrh	r3, [r5, #12]
 801d146:	2b01      	cmp	r3, #1
 801d148:	d907      	bls.n	801d15a <_fwalk_reent+0x3a>
 801d14a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d14e:	3301      	adds	r3, #1
 801d150:	d003      	beq.n	801d15a <_fwalk_reent+0x3a>
 801d152:	4629      	mov	r1, r5
 801d154:	4630      	mov	r0, r6
 801d156:	47c0      	blx	r8
 801d158:	4307      	orrs	r7, r0
 801d15a:	3568      	adds	r5, #104	; 0x68
 801d15c:	e7e9      	b.n	801d132 <_fwalk_reent+0x12>

0801d15e <__retarget_lock_init_recursive>:
 801d15e:	4770      	bx	lr

0801d160 <__retarget_lock_acquire_recursive>:
 801d160:	4770      	bx	lr

0801d162 <__retarget_lock_release>:
 801d162:	4770      	bx	lr

0801d164 <__retarget_lock_release_recursive>:
 801d164:	4770      	bx	lr

0801d166 <__swhatbuf_r>:
 801d166:	b570      	push	{r4, r5, r6, lr}
 801d168:	460e      	mov	r6, r1
 801d16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d16e:	2900      	cmp	r1, #0
 801d170:	b096      	sub	sp, #88	; 0x58
 801d172:	4614      	mov	r4, r2
 801d174:	461d      	mov	r5, r3
 801d176:	da07      	bge.n	801d188 <__swhatbuf_r+0x22>
 801d178:	2300      	movs	r3, #0
 801d17a:	602b      	str	r3, [r5, #0]
 801d17c:	89b3      	ldrh	r3, [r6, #12]
 801d17e:	061a      	lsls	r2, r3, #24
 801d180:	d410      	bmi.n	801d1a4 <__swhatbuf_r+0x3e>
 801d182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d186:	e00e      	b.n	801d1a6 <__swhatbuf_r+0x40>
 801d188:	466a      	mov	r2, sp
 801d18a:	f000 f8c3 	bl	801d314 <_fstat_r>
 801d18e:	2800      	cmp	r0, #0
 801d190:	dbf2      	blt.n	801d178 <__swhatbuf_r+0x12>
 801d192:	9a01      	ldr	r2, [sp, #4]
 801d194:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d198:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d19c:	425a      	negs	r2, r3
 801d19e:	415a      	adcs	r2, r3
 801d1a0:	602a      	str	r2, [r5, #0]
 801d1a2:	e7ee      	b.n	801d182 <__swhatbuf_r+0x1c>
 801d1a4:	2340      	movs	r3, #64	; 0x40
 801d1a6:	2000      	movs	r0, #0
 801d1a8:	6023      	str	r3, [r4, #0]
 801d1aa:	b016      	add	sp, #88	; 0x58
 801d1ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d1b0 <__smakebuf_r>:
 801d1b0:	898b      	ldrh	r3, [r1, #12]
 801d1b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d1b4:	079d      	lsls	r5, r3, #30
 801d1b6:	4606      	mov	r6, r0
 801d1b8:	460c      	mov	r4, r1
 801d1ba:	d507      	bpl.n	801d1cc <__smakebuf_r+0x1c>
 801d1bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d1c0:	6023      	str	r3, [r4, #0]
 801d1c2:	6123      	str	r3, [r4, #16]
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	6163      	str	r3, [r4, #20]
 801d1c8:	b002      	add	sp, #8
 801d1ca:	bd70      	pop	{r4, r5, r6, pc}
 801d1cc:	ab01      	add	r3, sp, #4
 801d1ce:	466a      	mov	r2, sp
 801d1d0:	f7ff ffc9 	bl	801d166 <__swhatbuf_r>
 801d1d4:	9900      	ldr	r1, [sp, #0]
 801d1d6:	4605      	mov	r5, r0
 801d1d8:	4630      	mov	r0, r6
 801d1da:	f7ff f94b 	bl	801c474 <_malloc_r>
 801d1de:	b948      	cbnz	r0, 801d1f4 <__smakebuf_r+0x44>
 801d1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1e4:	059a      	lsls	r2, r3, #22
 801d1e6:	d4ef      	bmi.n	801d1c8 <__smakebuf_r+0x18>
 801d1e8:	f023 0303 	bic.w	r3, r3, #3
 801d1ec:	f043 0302 	orr.w	r3, r3, #2
 801d1f0:	81a3      	strh	r3, [r4, #12]
 801d1f2:	e7e3      	b.n	801d1bc <__smakebuf_r+0xc>
 801d1f4:	4b0d      	ldr	r3, [pc, #52]	; (801d22c <__smakebuf_r+0x7c>)
 801d1f6:	62b3      	str	r3, [r6, #40]	; 0x28
 801d1f8:	89a3      	ldrh	r3, [r4, #12]
 801d1fa:	6020      	str	r0, [r4, #0]
 801d1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d200:	81a3      	strh	r3, [r4, #12]
 801d202:	9b00      	ldr	r3, [sp, #0]
 801d204:	6163      	str	r3, [r4, #20]
 801d206:	9b01      	ldr	r3, [sp, #4]
 801d208:	6120      	str	r0, [r4, #16]
 801d20a:	b15b      	cbz	r3, 801d224 <__smakebuf_r+0x74>
 801d20c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d210:	4630      	mov	r0, r6
 801d212:	f000 f891 	bl	801d338 <_isatty_r>
 801d216:	b128      	cbz	r0, 801d224 <__smakebuf_r+0x74>
 801d218:	89a3      	ldrh	r3, [r4, #12]
 801d21a:	f023 0303 	bic.w	r3, r3, #3
 801d21e:	f043 0301 	orr.w	r3, r3, #1
 801d222:	81a3      	strh	r3, [r4, #12]
 801d224:	89a0      	ldrh	r0, [r4, #12]
 801d226:	4305      	orrs	r5, r0
 801d228:	81a5      	strh	r5, [r4, #12]
 801d22a:	e7cd      	b.n	801d1c8 <__smakebuf_r+0x18>
 801d22c:	0801cfbd 	.word	0x0801cfbd

0801d230 <__malloc_lock>:
 801d230:	4801      	ldr	r0, [pc, #4]	; (801d238 <__malloc_lock+0x8>)
 801d232:	f7ff bf95 	b.w	801d160 <__retarget_lock_acquire_recursive>
 801d236:	bf00      	nop
 801d238:	24007338 	.word	0x24007338

0801d23c <__malloc_unlock>:
 801d23c:	4801      	ldr	r0, [pc, #4]	; (801d244 <__malloc_unlock+0x8>)
 801d23e:	f7ff bf91 	b.w	801d164 <__retarget_lock_release_recursive>
 801d242:	bf00      	nop
 801d244:	24007338 	.word	0x24007338

0801d248 <__sread>:
 801d248:	b510      	push	{r4, lr}
 801d24a:	460c      	mov	r4, r1
 801d24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d250:	f000 f894 	bl	801d37c <_read_r>
 801d254:	2800      	cmp	r0, #0
 801d256:	bfab      	itete	ge
 801d258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d25a:	89a3      	ldrhlt	r3, [r4, #12]
 801d25c:	181b      	addge	r3, r3, r0
 801d25e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d262:	bfac      	ite	ge
 801d264:	6563      	strge	r3, [r4, #84]	; 0x54
 801d266:	81a3      	strhlt	r3, [r4, #12]
 801d268:	bd10      	pop	{r4, pc}

0801d26a <__swrite>:
 801d26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d26e:	461f      	mov	r7, r3
 801d270:	898b      	ldrh	r3, [r1, #12]
 801d272:	05db      	lsls	r3, r3, #23
 801d274:	4605      	mov	r5, r0
 801d276:	460c      	mov	r4, r1
 801d278:	4616      	mov	r6, r2
 801d27a:	d505      	bpl.n	801d288 <__swrite+0x1e>
 801d27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d280:	2302      	movs	r3, #2
 801d282:	2200      	movs	r2, #0
 801d284:	f000 f868 	bl	801d358 <_lseek_r>
 801d288:	89a3      	ldrh	r3, [r4, #12]
 801d28a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d28e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d292:	81a3      	strh	r3, [r4, #12]
 801d294:	4632      	mov	r2, r6
 801d296:	463b      	mov	r3, r7
 801d298:	4628      	mov	r0, r5
 801d29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d29e:	f000 b817 	b.w	801d2d0 <_write_r>

0801d2a2 <__sseek>:
 801d2a2:	b510      	push	{r4, lr}
 801d2a4:	460c      	mov	r4, r1
 801d2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2aa:	f000 f855 	bl	801d358 <_lseek_r>
 801d2ae:	1c43      	adds	r3, r0, #1
 801d2b0:	89a3      	ldrh	r3, [r4, #12]
 801d2b2:	bf15      	itete	ne
 801d2b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801d2b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d2ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d2be:	81a3      	strheq	r3, [r4, #12]
 801d2c0:	bf18      	it	ne
 801d2c2:	81a3      	strhne	r3, [r4, #12]
 801d2c4:	bd10      	pop	{r4, pc}

0801d2c6 <__sclose>:
 801d2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2ca:	f000 b813 	b.w	801d2f4 <_close_r>
	...

0801d2d0 <_write_r>:
 801d2d0:	b538      	push	{r3, r4, r5, lr}
 801d2d2:	4d07      	ldr	r5, [pc, #28]	; (801d2f0 <_write_r+0x20>)
 801d2d4:	4604      	mov	r4, r0
 801d2d6:	4608      	mov	r0, r1
 801d2d8:	4611      	mov	r1, r2
 801d2da:	2200      	movs	r2, #0
 801d2dc:	602a      	str	r2, [r5, #0]
 801d2de:	461a      	mov	r2, r3
 801d2e0:	f7e4 fceb 	bl	8001cba <_write>
 801d2e4:	1c43      	adds	r3, r0, #1
 801d2e6:	d102      	bne.n	801d2ee <_write_r+0x1e>
 801d2e8:	682b      	ldr	r3, [r5, #0]
 801d2ea:	b103      	cbz	r3, 801d2ee <_write_r+0x1e>
 801d2ec:	6023      	str	r3, [r4, #0]
 801d2ee:	bd38      	pop	{r3, r4, r5, pc}
 801d2f0:	24007340 	.word	0x24007340

0801d2f4 <_close_r>:
 801d2f4:	b538      	push	{r3, r4, r5, lr}
 801d2f6:	4d06      	ldr	r5, [pc, #24]	; (801d310 <_close_r+0x1c>)
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	4604      	mov	r4, r0
 801d2fc:	4608      	mov	r0, r1
 801d2fe:	602b      	str	r3, [r5, #0]
 801d300:	f7e4 fce8 	bl	8001cd4 <_close>
 801d304:	1c43      	adds	r3, r0, #1
 801d306:	d102      	bne.n	801d30e <_close_r+0x1a>
 801d308:	682b      	ldr	r3, [r5, #0]
 801d30a:	b103      	cbz	r3, 801d30e <_close_r+0x1a>
 801d30c:	6023      	str	r3, [r4, #0]
 801d30e:	bd38      	pop	{r3, r4, r5, pc}
 801d310:	24007340 	.word	0x24007340

0801d314 <_fstat_r>:
 801d314:	b538      	push	{r3, r4, r5, lr}
 801d316:	4d07      	ldr	r5, [pc, #28]	; (801d334 <_fstat_r+0x20>)
 801d318:	2300      	movs	r3, #0
 801d31a:	4604      	mov	r4, r0
 801d31c:	4608      	mov	r0, r1
 801d31e:	4611      	mov	r1, r2
 801d320:	602b      	str	r3, [r5, #0]
 801d322:	f7e4 fcda 	bl	8001cda <_fstat>
 801d326:	1c43      	adds	r3, r0, #1
 801d328:	d102      	bne.n	801d330 <_fstat_r+0x1c>
 801d32a:	682b      	ldr	r3, [r5, #0]
 801d32c:	b103      	cbz	r3, 801d330 <_fstat_r+0x1c>
 801d32e:	6023      	str	r3, [r4, #0]
 801d330:	bd38      	pop	{r3, r4, r5, pc}
 801d332:	bf00      	nop
 801d334:	24007340 	.word	0x24007340

0801d338 <_isatty_r>:
 801d338:	b538      	push	{r3, r4, r5, lr}
 801d33a:	4d06      	ldr	r5, [pc, #24]	; (801d354 <_isatty_r+0x1c>)
 801d33c:	2300      	movs	r3, #0
 801d33e:	4604      	mov	r4, r0
 801d340:	4608      	mov	r0, r1
 801d342:	602b      	str	r3, [r5, #0]
 801d344:	f7e4 fcce 	bl	8001ce4 <_isatty>
 801d348:	1c43      	adds	r3, r0, #1
 801d34a:	d102      	bne.n	801d352 <_isatty_r+0x1a>
 801d34c:	682b      	ldr	r3, [r5, #0]
 801d34e:	b103      	cbz	r3, 801d352 <_isatty_r+0x1a>
 801d350:	6023      	str	r3, [r4, #0]
 801d352:	bd38      	pop	{r3, r4, r5, pc}
 801d354:	24007340 	.word	0x24007340

0801d358 <_lseek_r>:
 801d358:	b538      	push	{r3, r4, r5, lr}
 801d35a:	4d07      	ldr	r5, [pc, #28]	; (801d378 <_lseek_r+0x20>)
 801d35c:	4604      	mov	r4, r0
 801d35e:	4608      	mov	r0, r1
 801d360:	4611      	mov	r1, r2
 801d362:	2200      	movs	r2, #0
 801d364:	602a      	str	r2, [r5, #0]
 801d366:	461a      	mov	r2, r3
 801d368:	f7e4 fcbe 	bl	8001ce8 <_lseek>
 801d36c:	1c43      	adds	r3, r0, #1
 801d36e:	d102      	bne.n	801d376 <_lseek_r+0x1e>
 801d370:	682b      	ldr	r3, [r5, #0]
 801d372:	b103      	cbz	r3, 801d376 <_lseek_r+0x1e>
 801d374:	6023      	str	r3, [r4, #0]
 801d376:	bd38      	pop	{r3, r4, r5, pc}
 801d378:	24007340 	.word	0x24007340

0801d37c <_read_r>:
 801d37c:	b538      	push	{r3, r4, r5, lr}
 801d37e:	4d07      	ldr	r5, [pc, #28]	; (801d39c <_read_r+0x20>)
 801d380:	4604      	mov	r4, r0
 801d382:	4608      	mov	r0, r1
 801d384:	4611      	mov	r1, r2
 801d386:	2200      	movs	r2, #0
 801d388:	602a      	str	r2, [r5, #0]
 801d38a:	461a      	mov	r2, r3
 801d38c:	f7e4 fc88 	bl	8001ca0 <_read>
 801d390:	1c43      	adds	r3, r0, #1
 801d392:	d102      	bne.n	801d39a <_read_r+0x1e>
 801d394:	682b      	ldr	r3, [r5, #0]
 801d396:	b103      	cbz	r3, 801d39a <_read_r+0x1e>
 801d398:	6023      	str	r3, [r4, #0]
 801d39a:	bd38      	pop	{r3, r4, r5, pc}
 801d39c:	24007340 	.word	0x24007340

0801d3a0 <_init>:
 801d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3a2:	bf00      	nop
 801d3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3a6:	bc08      	pop	{r3}
 801d3a8:	469e      	mov	lr, r3
 801d3aa:	4770      	bx	lr

0801d3ac <_fini>:
 801d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3ae:	bf00      	nop
 801d3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3b2:	bc08      	pop	{r3}
 801d3b4:	469e      	mov	lr, r3
 801d3b6:	4770      	bx	lr
