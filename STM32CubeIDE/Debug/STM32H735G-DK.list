
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bed8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038d0  0801c1a8  0801c1a8  0002c1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000104e  0801fa78  0801fa78  0002fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  08020ac8  08020ac8  00030ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000dc  08020af0  08020af0  00030af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08020bcc  08020bcc  000d2d48  2**0
                  CONTENTS
  7 .ARM          00000000  08020bcc  08020bcc  000d2d48  2**0
                  CONTENTS
  8 .preinit_array 00000000  08020bcc  08020bcc  000d2d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08020bcc  08020bcc  00030bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08020be0  08020be0  00030be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000124  24000000  08020be8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000712c  24000124  08020d0c  00040124  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  24007250  08020d0c  00047250  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000d2d48  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00082d48  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d50ba  00000000  00000000  000d2d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000157bf  00000000  00000000  001a7e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ea8  00000000  00000000  001bd5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00005258  00000000  00000000  001c0498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00043761  00000000  00000000  001c56f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005394e  00000000  00000000  00208e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0017f01e  00000000  00000000  0025c79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  003db7bd  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008b70  00000000  00000000  003db890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0002fdc8  00000000  00000000  003e4400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000124 	.word	0x24000124
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c190 	.word	0x0801c190

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000128 	.word	0x24000128
 800030c:	0801c190 	.word	0x0801c190

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	; (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f00a b950 	b.w	800a9d0 <vTaskSetApplicationTaskTag>
 8000730:	08001d61 	.word	0x08001d61

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000736:	2064      	movs	r0, #100	; 0x64
 8000738:	f008 fcf7 	bl	800912a <osDelay>
  for(;;)
 800073c:	e7fb      	b.n	8000736 <StartDefaultTask+0x2>
	...

08000740 <SystemClock_Config>:
{
 8000740:	b510      	push	{r4, lr}
 8000742:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	224c      	movs	r2, #76	; 0x4c
 8000746:	2100      	movs	r1, #0
 8000748:	a809      	add	r0, sp, #36	; 0x24
 800074a:	f01a fd33 	bl	801b1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	a801      	add	r0, sp, #4
 8000754:	f01a fd2e 	bl	801b1b4 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000758:	2004      	movs	r0, #4
 800075a:	f006 fd19 	bl	8007190 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <SystemClock_Config+0x9c>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800076a:	619a      	str	r2, [r3, #24]
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000772:	9200      	str	r2, [sp, #0]
 8000774:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000776:	699a      	ldr	r2, [r3, #24]
 8000778:	0491      	lsls	r1, r2, #18
 800077a:	d5fc      	bpl.n	8000776 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000780:	2130      	movs	r1, #48	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000784:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000786:	f023 0303 	bic.w	r3, r3, #3
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000796:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007a2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a8:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007aa:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ae:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f006 fd2b 	bl	800720c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2103      	movs	r1, #3
 80007b8:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ba:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007bc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ce:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d4:	f007 f818 	bl	8007808 <HAL_RCC_ClockConfig>
}
 80007d8:	b01c      	add	sp, #112	; 0x70
 80007da:	bd10      	pop	{r4, pc}
 80007dc:	58024800 	.word	0x58024800
 80007e0:	58024400 	.word	0x58024400

080007e4 <PeriphCommonClock_Config>:
{
 80007e4:	b500      	push	{lr}
 80007e6:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e8:	2290      	movs	r2, #144	; 0x90
 80007ea:	2100      	movs	r1, #0
 80007ec:	a80a      	add	r0, sp, #40	; 0x28
 80007ee:	f01a fce1 	bl	801b1b4 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007f6:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007f8:	2150      	movs	r1, #80	; 0x50
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007fa:	2080      	movs	r0, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000806:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800080a:	2300      	movs	r3, #0
 800080c:	e9cd 0307 	strd	r0, r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000810:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000812:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000814:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000816:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000818:	f007 fa7c 	bl	8007d14 <HAL_RCCEx_PeriphCLKConfig>
}
 800081c:	b02f      	add	sp, #188	; 0xbc
 800081e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000824 <adjustMIAndFreq>:
	modulationIndex = foo_MI;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <adjustMIAndFreq+0x20>)
	counter = 0;
 8000826:	2200      	movs	r2, #0
	modulationIndex = foo_MI;
 8000828:	ed83 0a00 	vstr	s0, [r3]
	frq = foo_freq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <adjustMIAndFreq+0x24>)
 800082e:	6018      	str	r0, [r3, #0]
	upperLimit = (5000/foo_freq);
 8000830:	f241 3388 	movw	r3, #5000	; 0x1388
 8000834:	fbb3 f0f0 	udiv	r0, r3, r0
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <adjustMIAndFreq+0x28>)
 800083a:	6018      	str	r0, [r3, #0]
	counter = 0;
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <adjustMIAndFreq+0x2c>)
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	24000008 	.word	0x24000008
 8000848:	24000004 	.word	0x24000004
 800084c:	24000014 	.word	0x24000014
 8000850:	24000140 	.word	0x24000140

08000854 <motorStart>:
{
 8000854:	b508      	push	{r3, lr}
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000856:	210c      	movs	r1, #12
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <motorStart+0x24>)
 800085a:	f008 fb33 	bl	8008ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800085e:	210c      	movs	r1, #12
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <motorStart+0x28>)
 8000862:	f008 fb2f 	bl	8008ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000866:	2100      	movs	r1, #0
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <motorStart+0x2c>)
 800086a:	f008 fb2b 	bl	8008ec4 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim14);
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <motorStart+0x30>)
}
 8000870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Base_Start_IT(&htim14);
 8000874:	f007 bff2 	b.w	800885c <HAL_TIM_Base_Start_IT>
 8000878:	24007004 	.word	0x24007004
 800087c:	24006e3c 	.word	0x24006e3c
 8000880:	24006f0c 	.word	0x24006f0c
 8000884:	240070b8 	.word	0x240070b8

08000888 <main>:
{
 8000888:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800088c:	b0a3      	sub	sp, #140	; 0x8c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800088e:	2210      	movs	r2, #16
 8000890:	2100      	movs	r1, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000892:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000894:	a815      	add	r0, sp, #84	; 0x54
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000896:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000898:	f01a fc8c 	bl	801b1b4 <memset>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800089c:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 800089e:	f004 fdaf 	bl	8005400 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80008a2:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
 80008a6:	4bd8      	ldr	r3, [pc, #864]	; (8000c08 <main+0x380>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a8:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008aa:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008ae:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80008b0:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008b4:	4bd5      	ldr	r3, [pc, #852]	; (8000c0c <main+0x384>)
 80008b6:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008b8:	f004 fdc4 	bl	8005444 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 80008bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008c0:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008c2:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x70000000;
 80008c6:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008c8:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008cc:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80008d0:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008d4:	f004 fdb6 	bl	8005444 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80008d8:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008da:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008dc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80008e0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80008e4:	2316      	movs	r3, #22
 80008e6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80008ea:	f240 1301 	movw	r3, #257	; 0x101
 80008ee:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008f2:	f004 fda7 	bl	8005444 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 80008f6:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008fa:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008fc:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000900:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000902:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000906:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000908:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800090c:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000910:	f004 fd98 	bl	8005444 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000914:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000916:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000918:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800091c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000920:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000924:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000928:	f004 fd8c 	bl	8005444 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800092c:	4620      	mov	r0, r4
 800092e:	f004 fd77 	bl	8005420 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000932:	4bb7      	ldr	r3, [pc, #732]	; (8000c10 <main+0x388>)
 8000934:	695a      	ldr	r2, [r3, #20]
 8000936:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800093a:	d111      	bne.n	8000960 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800093c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000940:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000944:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800094c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000956:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000958:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800095c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000960:	4aab      	ldr	r2, [pc, #684]	; (8000c10 <main+0x388>)
 8000962:	6953      	ldr	r3, [r2, #20]
 8000964:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000968:	d123      	bne.n	80009b2 <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800096a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800096e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000972:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000976:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800097a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800097e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000982:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000984:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000988:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800098a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800098e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000990:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000994:	d2f9      	bcs.n	800098a <main+0x102>
    } while(sets-- != 0U);
 8000996:	3b20      	subs	r3, #32
 8000998:	f113 0f20 	cmn.w	r3, #32
 800099c:	d1f2      	bne.n	8000984 <main+0xfc>
 800099e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009a2:	6953      	ldr	r3, [r2, #20]
 80009a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009ae:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80009b2:	f004 fc81 	bl	80052b8 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2400      	movs	r4, #0
  SystemClock_Config();
 80009b8:	f7ff fec2 	bl	8000740 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 80009be:	f7ff ff11 	bl	80007e4 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	2214      	movs	r2, #20
 80009c4:	2100      	movs	r1, #0
 80009c6:	a815      	add	r0, sp, #84	; 0x54
 80009c8:	f01a fbf4 	bl	801b1b4 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b91      	ldr	r3, [pc, #580]	; (8000c14 <main+0x38c>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80009ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d2:	4891      	ldr	r0, [pc, #580]	; (8000c18 <main+0x390>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80009d8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 80009dc:	f04f 090c 	mov.w	r9, #12
  hltdc.Instance = LTDC;
 80009e0:	4d8e      	ldr	r5, [pc, #568]	; (8000c1c <main+0x394>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	f042 0202 	orr.w	r2, r2, #2
  pLayerCfg.FBStartAdress = 0x70000000;
 80009e6:	f04f 0805 	mov.w	r8, #5
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80009ea:	f04f 0b18 	mov.w	fp, #24
  hospi1.Init.FifoThreshold = 4;
 80009ee:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009fa:	f002 0202 	and.w	r2, r2, #2
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a12:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000a16:	9201      	str	r2, [sp, #4]
 8000a18:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a1e:	f042 0208 	orr.w	r2, r2, #8
 8000a22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a2a:	f002 0208 	and.w	r2, r2, #8
 8000a2e:	9202      	str	r2, [sp, #8]
 8000a30:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a36:	f042 0210 	orr.w	r2, r2, #16
 8000a3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a42:	f002 0210 	and.w	r2, r2, #16
 8000a46:	9203      	str	r2, [sp, #12]
 8000a48:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a4e:	f042 0201 	orr.w	r2, r2, #1
 8000a52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a5a:	f002 0201 	and.w	r2, r2, #1
 8000a5e:	9204      	str	r2, [sp, #16]
 8000a60:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a72:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000a76:	9205      	str	r2, [sp, #20]
 8000a78:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a7e:	f042 0204 	orr.w	r2, r2, #4
 8000a82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a8a:	f002 0204 	and.w	r2, r2, #4
 8000a8e:	9206      	str	r2, [sp, #24]
 8000a90:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a96:	f042 0220 	orr.w	r2, r2, #32
 8000a9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f003 0320 	and.w	r3, r3, #32
 8000aa8:	9307      	str	r3, [sp, #28]
 8000aaa:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000aac:	f004 ffa2 	bl	80059f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	485a      	ldr	r0, [pc, #360]	; (8000c20 <main+0x398>)
 8000ab8:	f004 ff9c 	bl	80059f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	210c      	movs	r1, #12
 8000ac0:	4858      	ldr	r0, [pc, #352]	; (8000c24 <main+0x39c>)
 8000ac2:	f004 ff97 	bl	80059f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000aca:	a915      	add	r1, sp, #84	; 0x54
 8000acc:	4852      	ldr	r0, [pc, #328]	; (8000c18 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	e9cd 3615 	strd	r3, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f004 fe01 	bl	80056dc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000ada:	a915      	add	r1, sp, #84	; 0x54
 8000adc:	4850      	ldr	r0, [pc, #320]	; (8000c20 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f004 fdf9 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	a915      	add	r1, sp, #84	; 0x54
 8000aee:	484d      	ldr	r0, [pc, #308]	; (8000c24 <main+0x39c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	e9cd 9615 	strd	r9, r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f004 fdf0 	bl	80056dc <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000afc:	484a      	ldr	r0, [pc, #296]	; (8000c28 <main+0x3a0>)
 8000afe:	4a4b      	ldr	r2, [pc, #300]	; (8000c2c <main+0x3a4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b00:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000b02:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b04:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b06:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b0a:	f004 fcc3 	bl	8005494 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b0e:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <main+0x3a8>)
  hdma2d.Instance = DMA2D;
 8000b10:	4848      	ldr	r0, [pc, #288]	; (8000c34 <main+0x3ac>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hdma2d.Init.OutputOffset = 0;
 8000b16:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b1a:	e9c0 3200 	strd	r3, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b1e:	f004 fd14 	bl	800554a <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b22:	2234      	movs	r2, #52	; 0x34
 8000b24:	4621      	mov	r1, r4
 8000b26:	a815      	add	r0, sp, #84	; 0x54
 8000b28:	f01a fb44 	bl	801b1b4 <memset>
  hltdc.Instance = LTDC;
 8000b2c:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <main+0x3b0>)
  hltdc.Init.VerticalSync = 9;
 8000b2e:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000b30:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000b32:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8000b36:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8000b3a:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b3c:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000b3e:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b42:	e9c5 2400 	strd	r2, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000b46:	2209      	movs	r2, #9
 8000b48:	e9c5 1205 	strd	r1, r2, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000b4c:	220b      	movs	r2, #11
 8000b4e:	e9c5 0207 	strd	r0, r2, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000b52:	f240 121b 	movw	r2, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b56:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000b58:	e9c5 c209 	strd	ip, r2, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8000b5c:	f240 121d 	movw	r2, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b60:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000b64:	e9c5 e20b 	strd	lr, r2, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b68:	f005 fb98 	bl	800629c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000b6c:	20ff      	movs	r0, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 8000b6e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8000b72:	f44f 7288 	mov.w	r2, #272	; 0x110
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b76:	971c      	str	r7, [sp, #112]	; 0x70
  hospi1.Init.ChipSelectHighTime = 2;
 8000b78:	2702      	movs	r7, #2
  pLayerCfg.WindowX0 = 0;
 8000b7a:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.Backcolor.Blue = 0;
 8000b7c:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Red = 0;
 8000b80:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  pLayerCfg.Alpha0 = 0;
 8000b84:	e9cd 041a 	strd	r0, r4, [sp, #104]	; 0x68
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b88:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 8000b8c:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b90:	e9cd 801d 	strd	r8, r0, [sp, #116]	; 0x74
  pLayerCfg.WindowY0 = 0;
 8000b94:	e9cd 1416 	strd	r1, r4, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b98:	4628      	mov	r0, r5
 8000b9a:	a915      	add	r1, sp, #84	; 0x54
  hospi1.Instance = OCTOSPI1;
 8000b9c:	4d27      	ldr	r5, [pc, #156]	; (8000c3c <main+0x3b4>)
  hospi1.Init.DeviceSize = 32;
 8000b9e:	f04f 0820 	mov.w	r8, #32
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ba2:	e9cd 2618 	strd	r2, r6, [sp, #96]	; 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	f005 fc43 	bl	8006432 <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000bac:	465a      	mov	r2, fp
 8000bae:	4621      	mov	r1, r4
 8000bb0:	a815      	add	r0, sp, #84	; 0x54
 8000bb2:	f01a faff 	bl	801b1b4 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000bb6:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <main+0x3b8>)
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000bb8:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000bba:	60ac      	str	r4, [r5, #8]
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000bbc:	636c      	str	r4, [r5, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000bbe:	642c      	str	r4, [r5, #64]	; 0x40
  hospi1.Init.FifoThreshold = 4;
 8000bc0:	e9c5 2a00 	strd	r2, sl, [r5]
  hospi1.Init.DeviceSize = 32;
 8000bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bc8:	e9c5 2803 	strd	r2, r8, [r5, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000bcc:	2208      	movs	r2, #8
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000bce:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000bd2:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.MaxTran = 0;
 8000bd6:	e9c5 240e 	strd	r2, r4, [r5, #56]	; 0x38
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000bda:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.ChipSelectBoundary = 0;
 8000bde:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000be2:	f005 fda9 	bl	8006738 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000be6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bea:	a915      	add	r1, sp, #84	; 0x54
 8000bec:	4628      	mov	r0, r5
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000bee:	9218      	str	r2, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bf0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
  sOspiManagerCfg.NCSPort = 1;
 8000bf4:	9617      	str	r6, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bf6:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bf8:	f241 3288 	movw	r2, #5000	; 0x1388
  sOspiManagerCfg.DQSPort = 1;
 8000bfc:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c00:	f006 f824 	bl	8006c4c <HAL_OSPIM_Config>
 8000c04:	e01e      	b.n	8000c44 <main+0x3bc>
 8000c06:	bf00      	nop
 8000c08:	03000012 	.word	0x03000012
 8000c0c:	01010001 	.word	0x01010001
 8000c10:	e000ed00 	.word	0xe000ed00
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58021800 	.word	0x58021800
 8000c1c:	24006f58 	.word	0x24006f58
 8000c20:	58020c00 	.word	0x58020c00
 8000c24:	58020800 	.word	0x58020800
 8000c28:	24006ee8 	.word	0x24006ee8
 8000c2c:	58024c00 	.word	0x58024c00
 8000c30:	52001000 	.word	0x52001000
 8000c34:	24007050 	.word	0x24007050
 8000c38:	50001000 	.word	0x50001000
 8000c3c:	24006e88 	.word	0x24006e88
 8000c40:	52005000 	.word	0x52005000
  HAL_OSPI_DeInit(&hospi1);
 8000c44:	4628      	mov	r0, r5
 8000c46:	f005 fded 	bl	8006824 <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000c4a:	f240 1201 	movw	r2, #257	; 0x101
  BSP_OSPI_NOR_DeInit(0);
 8000c4e:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000c50:	4d8f      	ldr	r5, [pc, #572]	; (8000e90 <main+0x608>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000c52:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000c56:	f003 ff8d 	bl	8004b74 <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000c5a:	a90e      	add	r1, sp, #56	; 0x38
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f004 f879 	bl	8004d54 <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c62:	4620      	mov	r0, r4
 8000c64:	f003 ff4e 	bl	8004b04 <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c68:	465a      	mov	r2, fp
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	a815      	add	r0, sp, #84	; 0x54
 8000c6e:	f01a faa1 	bl	801b1b4 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000c72:	2210      	movs	r2, #16
 8000c74:	4621      	mov	r1, r4
 8000c76:	a80a      	add	r0, sp, #40	; 0x28
 8000c78:	f01a fa9c 	bl	801b1b4 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	2214      	movs	r2, #20
 8000c80:	a80e      	add	r0, sp, #56	; 0x38
 8000c82:	f01a fa97 	bl	801b1b4 <memset>
  hospi2.Instance = OCTOSPI2;
 8000c86:	4a83      	ldr	r2, [pc, #524]	; (8000e94 <main+0x60c>)
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c88:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c8a:	60ac      	str	r4, [r5, #8]
  hospi2.Init.MaxTran = 0;
 8000c8c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi2.Init.FifoThreshold = 4;
 8000c8e:	e9c5 2a00 	strd	r2, sl, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000c92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c96:	e9c5 a405 	strd	sl, r4, [r5, #20]
  hospi2.Init.DeviceSize = 24;
 8000c9a:	e9c5 2b03 	strd	r2, fp, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000c9e:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8000ca2:	2217      	movs	r2, #23
  sHyperBusCfg.AccessTime = 6;
 8000ca4:	f04f 0b03 	mov.w	fp, #3
  hospi2.Init.ChipSelectBoundary = 23;
 8000ca8:	e9c5 a20b 	strd	sl, r2, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 8000cac:	f44f 72c8 	mov.w	r2, #400	; 0x190
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb0:	f04f 0a80 	mov.w	sl, #128	; 0x80
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000cb4:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.Refresh = 400;
 8000cb8:	642a      	str	r2, [r5, #64]	; 0x40
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000cba:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000cbe:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000cc2:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000cc6:	f005 fd37 	bl	8006738 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000cca:	4a73      	ldr	r2, [pc, #460]	; (8000e98 <main+0x610>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ccc:	a915      	add	r1, sp, #84	; 0x54
 8000cce:	4628      	mov	r0, r5
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000cd0:	9218      	str	r2, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000cd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
  sOspiManagerCfg.NCSPort = 2;
 8000cd6:	9717      	str	r7, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000cd8:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cda:	f241 3288 	movw	r2, #5000	; 0x1388
  sOspiManagerCfg.DQSPort = 2;
 8000cde:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ce2:	f005 ffb3 	bl	8006c4c <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000ce6:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cec:	a90a      	add	r1, sp, #40	; 0x28
 8000cee:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2760      	movs	r7, #96	; 0x60
  sHyperBusCfg.AccessTime = 6;
 8000cf2:	e9cd b30a 	strd	fp, r3, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000cf6:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cfa:	f005 fdf5 	bl	80068e8 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000cfe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d06:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000d08:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000d0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d0e:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000d10:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000d12:	9312      	str	r3, [sp, #72]	; 0x48
  htim1.Init.Period = 28800-1;
 8000d14:	f247 0b7f 	movw	fp, #28799	; 0x707f
  sCommand.Address      = 0;
 8000d18:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000d1a:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d1c:	f005 fe0a 	bl	8006934 <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000d20:	eb0d 0108 	add.w	r1, sp, r8
 8000d24:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000d26:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000d28:	f005 ff1c 	bl	8006b64 <HAL_OSPI_MemoryMapped>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	221c      	movs	r2, #28
 8000d2e:	4621      	mov	r1, r4
 8000d30:	a80e      	add	r0, sp, #56	; 0x38
  htim1.Instance = TIM1;
 8000d32:	4d5a      	ldr	r5, [pc, #360]	; (8000e9c <main+0x614>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	940c      	str	r4, [sp, #48]	; 0x30
 8000d36:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	f01a fa3b 	bl	801b1b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3e:	2234      	movs	r2, #52	; 0x34
 8000d40:	4621      	mov	r1, r4
 8000d42:	a815      	add	r0, sp, #84	; 0x54
 8000d44:	f01a fa36 	bl	801b1b4 <memset>
  htim1.Instance = TIM1;
 8000d48:	4b55      	ldr	r3, [pc, #340]	; (8000ea0 <main+0x618>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d4a:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d4c:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8000d50:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d52:	f8c5 a018 	str.w	sl, [r5, #24]
  htim1.Init.Prescaler = 0;
 8000d56:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	e9c5 b403 	strd	fp, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d5e:	f007 ff15 	bl	8008b8c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d62:	a90a      	add	r1, sp, #40	; 0x28
 8000d64:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	940c      	str	r4, [sp, #48]	; 0x30
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d68:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d6c:	f008 f8ac 	bl	8008ec8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d70:	464a      	mov	r2, r9
 8000d72:	a90e      	add	r1, sp, #56	; 0x38
 8000d74:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d78:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.Pulse = 1;
 8000d7a:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d7e:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d82:	f007 ff79 	bl	8008c78 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d8a:	a915      	add	r1, sp, #84	; 0x54
 8000d8c:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d8e:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d90:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d92:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d94:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d9c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000da0:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.DeadTime = 0;
 8000da4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da8:	f008 f8e0 	bl	8008f6c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000dac:	4628      	mov	r0, r5
 8000dae:	f000 fc89 	bl	80016c4 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000db2:	4d3c      	ldr	r5, [pc, #240]	; (8000ea4 <main+0x61c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	221c      	movs	r2, #28
 8000db6:	4621      	mov	r1, r4
 8000db8:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	9410      	str	r4, [sp, #64]	; 0x40
 8000dbc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc0:	f01a f9f8 	bl	801b1b4 <memset>
  htim4.Instance = TIM4;
 8000dc4:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <main+0x620>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc6:	4628      	mov	r0, r5
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dca:	f8c5 a018 	str.w	sl, [r5, #24]
  htim4.Init.Prescaler = 0;
 8000dce:	e9c5 3400 	strd	r3, r4, [r5]
  htim4.Init.Period = 28800-1;
 8000dd2:	e9c5 8b02 	strd	r8, fp, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dd6:	f007 fed9 	bl	8008b8c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dda:	a90e      	add	r1, sp, #56	; 0x38
 8000ddc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000de2:	f008 f871 	bl	8008ec8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000de6:	464a      	mov	r2, r9
 8000de8:	a915      	add	r1, sp, #84	; 0x54
 8000dea:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dec:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8000df0:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000df4:	f007 ff40 	bl	8008c78 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8000df8:	4628      	mov	r0, r5
 8000dfa:	f000 fc63 	bl	80016c4 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000dfe:	4d2b      	ldr	r5, [pc, #172]	; (8000eac <main+0x624>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	221c      	movs	r2, #28
 8000e02:	4621      	mov	r1, r4
 8000e04:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	9410      	str	r4, [sp, #64]	; 0x40
 8000e08:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	f01a f9d2 	bl	801b1b4 <memset>
  htim5.Instance = TIM5;
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <main+0x628>)
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e12:	4628      	mov	r0, r5
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e16:	f8c5 a018 	str.w	sl, [r5, #24]
  htim5.Init.Prescaler = 0;
 8000e1a:	e9c5 3400 	strd	r3, r4, [r5]
  htim5.Init.Period = 28800-1;
 8000e1e:	e9c5 8b02 	strd	r8, fp, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e22:	f007 feb3 	bl	8008b8c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e26:	a90e      	add	r1, sp, #56	; 0x38
 8000e28:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e2e:	f008 f84b 	bl	8008ec8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e32:	4622      	mov	r2, r4
 8000e34:	a915      	add	r1, sp, #84	; 0x54
 8000e36:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e38:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8000e3c:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e40:	f007 ff1a 	bl	8008c78 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8000e44:	4628      	mov	r0, r5
 8000e46:	f000 fc3d 	bl	80016c4 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8000e4a:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <main+0x62c>)
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <main+0x630>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	6084      	str	r4, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	6184      	str	r4, [r0, #24]
  htim14.Init.Prescaler = 0;
 8000e52:	e9c0 3400 	strd	r3, r4, [r0]
  htim14.Init.Period = 57600-1;
 8000e56:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e5e:	f007 fe65 	bl	8008b2c <HAL_TIM_Base_Init>
  MX_TouchGFX_Init();
 8000e62:	f000 fd86 	bl	8001972 <MX_TouchGFX_Init>
  motorStart();
 8000e66:	f7ff fcf5 	bl	8000854 <motorStart>
  osKernelInitialize();
 8000e6a:	f008 f8e9 	bl	8009040 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <main+0x634>)
 8000e70:	4621      	mov	r1, r4
 8000e72:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <main+0x638>)
 8000e74:	f008 f910 	bl	8009098 <osThreadNew>
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <main+0x63c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <main+0x640>)
 8000e7c:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e7e:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <main+0x644>)
 8000e82:	f008 f909 	bl	8009098 <osThreadNew>
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <main+0x648>)
 8000e88:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000e8a:	f008 f8eb 	bl	8009064 <osKernelStart>
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <main+0x606>
 8000e90:	24007104 	.word	0x24007104
 8000e94:	5200a000 	.word	0x5200a000
 8000e98:	00010002 	.word	0x00010002
 8000e9c:	24007004 	.word	0x24007004
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	24006e3c 	.word	0x24006e3c
 8000ea8:	40000800 	.word	0x40000800
 8000eac:	24006f0c 	.word	0x24006f0c
 8000eb0:	40000c00 	.word	0x40000c00
 8000eb4:	240070b8 	.word	0x240070b8
 8000eb8:	40002000 	.word	0x40002000
 8000ebc:	0801c228 	.word	0x0801c228
 8000ec0:	08000735 	.word	0x08000735
 8000ec4:	24006e38 	.word	0x24006e38
 8000ec8:	0801c204 	.word	0x0801c204
 8000ecc:	08001977 	.word	0x08001977
 8000ed0:	24007000 	.word	0x24007000

08000ed4 <HAL_TIM_PeriodElapsedCallback>:
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM14)
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ed8:	4293      	cmp	r3, r2
{
 8000eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ede:	ed2d 8b04 	vpush	{d8-d9}
	if (htim->Instance == TIM14)
 8000ee2:	d170      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		float theta = (frq * TWO_PI * counter) * time;
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8000ee4:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ee6:	4d3e      	ldr	r5, [pc, #248]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ee8:	edd3 9a00 	vldr	s19, [r3]
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;

		if(modulationIndex != 0)
 8000eec:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000eee:	eef5 9a40 	vcmp.f32	s19, #0.0
 8000ef2:	f8d3 8000 	ldr.w	r8, [r3]
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	681f      	ldr	r7, [r3, #0]
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f00:	681e      	ldr	r6, [r3, #0]
 8000f02:	d057      	beq.n	8000fb4 <HAL_TIM_PeriodElapsedCallback+0xe0>
		float theta = (frq * TWO_PI * counter) * time;
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8000f06:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
		float theta = (frq * TWO_PI * counter) * time;
 8000f0a:	682c      	ldr	r4, [r5, #0]
 8000f0c:	ed93 8a00 	vldr	s16, [r3]
 8000f10:	eddf 7a38 	vldr	s15, [pc, #224]	; 8000ff4 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000f14:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8000f18:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000f1e:	ee07 4a90 	vmov	s15, r4
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));

			counter++;
 8000f22:	3401      	adds	r4, #1
		float theta = (frq * TWO_PI * counter) * time;
 8000f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f28:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8000f30:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x128>)
		float theta = (frq * TWO_PI * counter) * time;
 8000f32:	ee28 8a27 	vmul.f32	s16, s16, s15
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8000f36:	edd3 8a00 	vldr	s17, [r3]
 8000f3a:	eef8 8a68 	vcvt.f32.u32	s17, s17
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8000f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8000f42:	f019 ffe9 	bl	801af18 <sinf>
 8000f46:	eef0 7a49 	vmov.f32	s15, s18
 8000f4a:	ee20 0a29 	vmul.f32	s0, s0, s19
 8000f4e:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f52:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001000 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8000f56:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8000f5a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f62:	edc8 7a10 	vstr	s15, [r8, #64]	; 0x40
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f66:	f019 ffd7 	bl	801af18 <sinf>
 8000f6a:	eef0 7a49 	vmov.f32	s15, s18
 8000f6e:	ee29 0a80 	vmul.f32	s0, s19, s0
 8000f72:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f76:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001004 <HAL_TIM_PeriodElapsedCallback+0x130>
 8000f7a:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
 8000f7e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f86:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f8a:	f019 ffc5 	bl	801af18 <sinf>
 8000f8e:	ee29 0a80 	vmul.f32	s0, s19, s0

			counter = 0;

		}

		if(counter > upperLimit)
 8000f92:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x134>)
			counter++;
 8000f94:	602c      	str	r4, [r5, #0]
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f96:	eea0 9a09 	vfma.f32	s18, s0, s18
		if(counter > upperLimit)
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	4294      	cmp	r4, r2
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));
 8000f9e:	ee28 9a89 	vmul.f32	s18, s17, s18
 8000fa2:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 8000fa6:	ed86 9a0d 	vstr	s18, [r6, #52]	; 0x34
		if(counter > upperLimit)
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0xee>
		HAL_IncTick();
	}
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fac:	ecbd 8b04 	vpop	{d8-d9}
 8000fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8000fbc:	6373      	str	r3, [r6, #52]	; 0x34
			counter = 0;
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	e7f4      	b.n	8000fac <HAL_TIM_PeriodElapsedCallback+0xd8>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e7fb      	b.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0xea>
	if (htim->Instance == TIM6)
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d1ef      	bne.n	8000fac <HAL_TIM_PeriodElapsedCallback+0xd8>
}
 8000fcc:	ecbd 8b04 	vpop	{d8-d9}
 8000fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_IncTick();
 8000fd4:	f004 b99e 	b.w	8005314 <HAL_IncTick>
 8000fd8:	40002000 	.word	0x40002000
 8000fdc:	24000008 	.word	0x24000008
 8000fe0:	24000140 	.word	0x24000140
 8000fe4:	24007004 	.word	0x24007004
 8000fe8:	24006e3c 	.word	0x24006e3c
 8000fec:	24006f0c 	.word	0x24006f0c
 8000ff0:	24000004 	.word	0x24000004
 8000ff4:	40c90fdb 	.word	0x40c90fdb
 8000ff8:	24000010 	.word	0x24000010
 8000ffc:	2400000c 	.word	0x2400000c
 8001000:	40060a92 	.word	0x40060a92
 8001004:	40860a92 	.word	0x40860a92
 8001008:	24000014 	.word	0x24000014
 800100c:	40001000 	.word	0x40001000

08001010 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001010:	4770      	bx	lr
	...

08001014 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x2c>)
{
 8001016:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001018:	210f      	movs	r1, #15
 800101a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001022:	f042 0202 	orr.w	r2, r2, #2
 8001026:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800102a:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001038:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103a:	f004 b9a1 	b.w	8005380 <HAL_NVIC_SetPriority>
 800103e:	bf00      	nop
 8001040:	58024400 	.word	0x58024400

08001044 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001044:	6802      	ldr	r2, [r0, #0]
{
 8001046:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_CRC_MspInit+0x2c>)
 800104a:	429a      	cmp	r2, r3
 800104c:	d10d      	bne.n	800106a <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800104e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001052:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001056:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800105a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800106a:	b002      	add	sp, #8
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	58024c00 	.word	0x58024c00

08001074 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_DMA2D_MspInit+0x40>)
{
 8001076:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001078:	6802      	ldr	r2, [r0, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d117      	bne.n	80010ae <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001080:	2105      	movs	r1, #5
 8001082:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001084:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001088:	f042 0210 	orr.w	r2, r2, #16
 800108c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001090:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001092:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109e:	f004 f96f 	bl	8005380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80010a4:	b003      	add	sp, #12
 80010a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010aa:	f004 b99b 	b.w	80053e4 <HAL_NVIC_EnableIRQ>
}
 80010ae:	b003      	add	sp, #12
 80010b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b4:	52001000 	.word	0x52001000
 80010b8:	58024400 	.word	0x58024400

080010bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c0:	b0ba      	sub	sp, #232	; 0xe8
 80010c2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	2214      	movs	r2, #20
 80010c6:	2100      	movs	r1, #0
 80010c8:	a808      	add	r0, sp, #32
 80010ca:	f01a f873 	bl	801b1b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ce:	22b4      	movs	r2, #180	; 0xb4
 80010d0:	2100      	movs	r1, #0
 80010d2:	a80d      	add	r0, sp, #52	; 0x34
 80010d4:	f01a f86e 	bl	801b1b4 <memset>
  if(hltdc->Instance==LTDC)
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	4b77      	ldr	r3, [pc, #476]	; (80012b8 <HAL_LTDC_MspInit+0x1fc>)
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 80e8 	bne.w	80012b2 <HAL_LTDC_MspInit+0x1f6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 25;
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80010e6:	2119      	movs	r1, #25
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010e8:	201e      	movs	r0, #30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010ea:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80010ec:	f44f 7390 	mov.w	r3, #288	; 0x120
 80010f0:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010f4:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010f6:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010fe:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001102:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001104:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001106:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f006 fe03 	bl	8007d14 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	b108      	cbz	r0, 8001114 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001110:	f7ff ff7e 	bl	8001010 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001114:	4b69      	ldr	r3, [pc, #420]	; (80012bc <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 800111c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001120:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	a908      	add	r1, sp, #32
 8001124:	4866      	ldr	r0, [pc, #408]	; (80012c0 <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001126:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800112a:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 800112e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001132:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001136:	f002 0208 	and.w	r2, r2, #8
 800113a:	9200      	str	r2, [sp, #0]
 800113c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001142:	f042 0202 	orr.w	r2, r2, #2
 8001146:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800114a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114e:	f002 0202 	and.w	r2, r2, #2
 8001152:	9201      	str	r2, [sp, #4]
 8001154:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800115a:	f042 0208 	orr.w	r2, r2, #8
 800115e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001162:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001166:	f002 0208 	and.w	r2, r2, #8
 800116a:	9202      	str	r2, [sp, #8]
 800116c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001172:	f042 0210 	orr.w	r2, r2, #16
 8001176:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800117a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800117e:	f002 0210 	and.w	r2, r2, #16
 8001182:	9203      	str	r2, [sp, #12]
 8001184:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001192:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001196:	f002 0201 	and.w	r2, r2, #1
 800119a:	9204      	str	r2, [sp, #16]
 800119c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800119e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011ae:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80011b2:	9205      	str	r2, [sp, #20]
 80011b4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011c6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011ca:	9206      	str	r2, [sp, #24]
 80011cc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011d2:	f042 0204 	orr.w	r2, r2, #4
 80011d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011de:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	9307      	str	r3, [sp, #28]
 80011e6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f004 fa72 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 80011f8:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fa:	a908      	add	r1, sp, #32
 80011fc:	4831      	ldr	r0, [pc, #196]	; (80012c4 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011fe:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001208:	f004 fa68 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 800120c:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001210:	a908      	add	r1, sp, #32
 8001212:	482d      	ldr	r0, [pc, #180]	; (80012c8 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001214:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121e:	f004 fa5d 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	a908      	add	r1, sp, #32
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800122e:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001234:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f004 fa51 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800123a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123e:	a908      	add	r1, sp, #32
 8001240:	4823      	ldr	r0, [pc, #140]	; (80012d0 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001242:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124c:	f004 fa46 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8001250:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001254:	a908      	add	r1, sp, #32
 8001256:	481f      	ldr	r0, [pc, #124]	; (80012d4 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001258:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001262:	f004 fa3b 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001266:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	a908      	add	r1, sp, #32
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800126c:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f004 fa31 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	a908      	add	r1, sp, #32
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127e:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f004 fa28 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800128c:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800128e:	a908      	add	r1, sp, #32
 8001290:	4810      	ldr	r0, [pc, #64]	; (80012d4 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001296:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800129c:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800129e:	f004 fa1d 	bl	80056dc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012a2:	4640      	mov	r0, r8
 80012a4:	4622      	mov	r2, r4
 80012a6:	2105      	movs	r1, #5
 80012a8:	f004 f86a 	bl	8005380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012ac:	4640      	mov	r0, r8
 80012ae:	f004 f899 	bl	80053e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80012b2:	b03a      	add	sp, #232	; 0xe8
 80012b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b8:	50001000 	.word	0x50001000
 80012bc:	58024400 	.word	0x58024400
 80012c0:	58020400 	.word	0x58020400
 80012c4:	58020c00 	.word	0x58020c00
 80012c8:	58021000 	.word	0x58021000
 80012cc:	58020000 	.word	0x58020000
 80012d0:	58021800 	.word	0x58021800
 80012d4:	58021c00 	.word	0x58021c00
 80012d8:	58020800 	.word	0x58020800

080012dc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80012dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012e0:	b091      	sub	sp, #68	; 0x44
 80012e2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	2214      	movs	r2, #20
 80012e6:	2100      	movs	r1, #0
 80012e8:	a80b      	add	r0, sp, #44	; 0x2c
 80012ea:	f019 ff63 	bl	801b1b4 <memset>
  if(hospi->Instance==OCTOSPI1)
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	4a89      	ldr	r2, [pc, #548]	; (8001518 <HAL_OSPI_MspInit+0x23c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f040 80b1 	bne.w	800145a <HAL_OSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80012f8:	4a88      	ldr	r2, [pc, #544]	; (800151c <HAL_OSPI_MspInit+0x240>)
 80012fa:	6813      	ldr	r3, [r2, #0]
 80012fc:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80012fe:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001300:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001302:	d10c      	bne.n	800131e <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001304:	4b86      	ldr	r3, [pc, #536]	; (8001520 <HAL_OSPI_MspInit+0x244>)
 8001306:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800130a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800130e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001312:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800131e:	4b80      	ldr	r3, [pc, #512]	; (8001520 <HAL_OSPI_MspInit+0x244>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2500      	movs	r5, #0
 8001324:	2403      	movs	r4, #3
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001326:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800132a:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800132c:	a90b      	add	r1, sp, #44	; 0x2c
 800132e:	487d      	ldr	r0, [pc, #500]	; (8001524 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001334:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001338:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800133c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001340:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001344:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800134c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001354:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001358:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800135c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001360:	9202      	str	r2, [sp, #8]
 8001362:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001368:	f042 0208 	orr.w	r2, r2, #8
 800136c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001370:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001374:	f002 0208 	and.w	r2, r2, #8
 8001378:	9203      	str	r2, [sp, #12]
 800137a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800137c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001380:	f042 0210 	orr.w	r2, r2, #16
 8001384:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001388:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800138c:	f002 0210 	and.w	r2, r2, #16
 8001390:	9204      	str	r2, [sp, #16]
 8001392:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013a4:	f002 0220 	and.w	r2, r2, #32
 80013a8:	9205      	str	r2, [sp, #20]
 80013aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013b0:	f042 0202 	orr.w	r2, r2, #2
 80013b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	9306      	str	r3, [sp, #24]
 80013c2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013d0:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d2:	f004 f983 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 80013d6:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	a90b      	add	r1, sp, #44	; 0x2c
 80013da:	4853      	ldr	r0, [pc, #332]	; (8001528 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013dc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e8:	f004 f978 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ec:	a90b      	add	r1, sp, #44	; 0x2c
 80013ee:	484f      	ldr	r0, [pc, #316]	; (800152c <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013f0:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fa:	f004 f96f 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013fe:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001400:	a90b      	add	r1, sp, #44	; 0x2c
 8001402:	4848      	ldr	r0, [pc, #288]	; (8001524 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001404:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001410:	f004 f964 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8001414:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	a90b      	add	r1, sp, #44	; 0x2c
 800141a:	4843      	ldr	r0, [pc, #268]	; (8001528 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800141c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001426:	f004 f959 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142e:	a90b      	add	r1, sp, #44	; 0x2c
 8001430:	483f      	ldr	r0, [pc, #252]	; (8001530 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001432:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800143c:	f004 f94e 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	a90b      	add	r1, sp, #44	; 0x2c
 8001442:	483c      	ldr	r0, [pc, #240]	; (8001534 <HAL_OSPI_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001444:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001450:	f004 f944 	bl	80056dc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001454:	b011      	add	sp, #68	; 0x44
 8001456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 800145a:	4a37      	ldr	r2, [pc, #220]	; (8001538 <HAL_OSPI_MspInit+0x25c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d1f9      	bne.n	8001454 <HAL_OSPI_MspInit+0x178>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <HAL_OSPI_MspInit+0x240>)
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001466:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001468:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800146a:	d10c      	bne.n	8001486 <HAL_OSPI_MspInit+0x1aa>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <HAL_OSPI_MspInit+0x244>)
 800146e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001472:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001476:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800147a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	9307      	str	r3, [sp, #28]
 8001484:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2500      	movs	r5, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800148e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001492:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001494:	a90b      	add	r1, sp, #44	; 0x2c
 8001496:	4823      	ldr	r0, [pc, #140]	; (8001524 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001498:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800149c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80014a0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80014a4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80014a8:	9208      	str	r2, [sp, #32]
 80014aa:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014bc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80014c0:	9209      	str	r2, [sp, #36]	; 0x24
 80014c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014c8:	f042 0220 	orr.w	r2, r2, #32
 80014cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80014d4:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	930a      	str	r3, [sp, #40]	; 0x28
 80014dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ea:	f004 f8f7 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80014ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f2:	a90b      	add	r1, sp, #44	; 0x2c
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 80014f6:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001500:	f004 f8ec 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001504:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001508:	a90b      	add	r1, sp, #44	; 0x2c
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800150c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001516:	e79b      	b.n	8001450 <HAL_OSPI_MspInit+0x174>
 8001518:	52005000 	.word	0x52005000
 800151c:	24000144 	.word	0x24000144
 8001520:	58024400 	.word	0x58024400
 8001524:	58021800 	.word	0x58021800
 8001528:	58020c00 	.word	0x58020c00
 800152c:	58021000 	.word	0x58021000
 8001530:	58021400 	.word	0x58021400
 8001534:	58020400 	.word	0x58020400
 8001538:	5200a000 	.word	0x5200a000

0800153c <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <HAL_OSPI_MspDeInit+0xa0>)
{
 800153e:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8001540:	6803      	ldr	r3, [r0, #0]
 8001542:	4293      	cmp	r3, r2
 8001544:	d12a      	bne.n	800159c <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_OSPI_MspDeInit+0xa4>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	3a01      	subs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <HAL_OSPI_MspDeInit+0xa8>)
 8001550:	b92a      	cbnz	r2, 800155e <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001552:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001556:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800155a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800155e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001562:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800156c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001570:	f004 f99a 	bl	80058a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 8001574:	f643 01b0 	movw	r1, #14512	; 0x38b0
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <HAL_OSPI_MspDeInit+0xb0>)
 800157a:	f004 f995 	bl	80058a8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800157e:	2104      	movs	r1, #4
 8001580:	481b      	ldr	r0, [pc, #108]	; (80015f0 <HAL_OSPI_MspDeInit+0xb4>)
 8001582:	f004 f991 	bl	80058a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	481a      	ldr	r0, [pc, #104]	; (80015f4 <HAL_OSPI_MspDeInit+0xb8>)
 800158c:	f004 f98c 	bl	80058a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8001590:	2104      	movs	r1, #4
 8001592:	4819      	ldr	r0, [pc, #100]	; (80015f8 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8001594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001598:	f004 b986 	b.w	80058a8 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_OSPI_MspDeInit+0xc0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d11a      	bne.n	80015d8 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_OSPI_MspDeInit+0xa4>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	3a01      	subs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_OSPI_MspDeInit+0xa8>)
 80015ac:	b92a      	cbnz	r2, 80015ba <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80015ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80015b2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80015b6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 80015ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 80015be:	f641 4103 	movw	r1, #7171	; 0x1c03
 80015c2:	4809      	ldr	r0, [pc, #36]	; (80015e8 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 80015c4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80015c8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 80015cc:	f004 f96c 	bl	80058a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80015d0:	f241 011f 	movw	r1, #4127	; 0x101f
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <HAL_OSPI_MspDeInit+0xb8>)
 80015d6:	e7dd      	b.n	8001594 <HAL_OSPI_MspDeInit+0x58>
}
 80015d8:	bd08      	pop	{r3, pc}
 80015da:	bf00      	nop
 80015dc:	52005000 	.word	0x52005000
 80015e0:	24000144 	.word	0x24000144
 80015e4:	58024400 	.word	0x58024400
 80015e8:	58021800 	.word	0x58021800
 80015ec:	58020c00 	.word	0x58020c00
 80015f0:	58021000 	.word	0x58021000
 80015f4:	58021400 	.word	0x58021400
 80015f8:	58020400 	.word	0x58020400
 80015fc:	5200a000 	.word	0x5200a000

08001600 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001600:	6803      	ldr	r3, [r0, #0]
{
 8001602:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_TIM_PWM_MspInit+0x6c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10e      	bne.n	8001628 <HAL_TIM_PWM_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_TIM_PWM_MspInit+0x70>)
 800160c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001624:	b004      	add	sp, #16
 8001626:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <HAL_TIM_PWM_MspInit+0x74>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10d      	bne.n	800164a <HAL_TIM_PWM_MspInit+0x4a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_TIM_PWM_MspInit+0x70>)
 8001630:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001634:	f042 0204 	orr.w	r2, r2, #4
 8001638:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	9b02      	ldr	r3, [sp, #8]
 8001648:	e7ec      	b.n	8001624 <HAL_TIM_PWM_MspInit+0x24>
  else if(htim_pwm->Instance==TIM5)
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <HAL_TIM_PWM_MspInit+0x78>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d1e9      	bne.n	8001624 <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_TIM_PWM_MspInit+0x70>)
 8001652:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001656:	f042 0208 	orr.w	r2, r2, #8
 800165a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800165e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	9303      	str	r3, [sp, #12]
 8001668:	9b03      	ldr	r3, [sp, #12]
}
 800166a:	e7db      	b.n	8001624 <HAL_TIM_PWM_MspInit+0x24>
 800166c:	40010000 	.word	0x40010000
 8001670:	58024400 	.word	0x58024400
 8001674:	40000800 	.word	0x40000800
 8001678:	40000c00 	.word	0x40000c00

0800167c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_TIM_Base_MspInit+0x40>)
{
 800167e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM14)
 8001680:	6802      	ldr	r2, [r0, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d117      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001688:	2105      	movs	r1, #5
 800168a:	202d      	movs	r0, #45	; 0x2d
    __HAL_RCC_TIM14_CLK_ENABLE();
 800168c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001694:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001698:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 800169a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80016a6:	f003 fe6b 	bl	8005380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016aa:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80016ac:	b003      	add	sp, #12
 80016ae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016b2:	f003 be97 	b.w	80053e4 <HAL_NVIC_EnableIRQ>
}
 80016b6:	b003      	add	sp, #12
 80016b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016bc:	40002000 	.word	0x40002000
 80016c0:	58024400 	.word	0x58024400

080016c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	2214      	movs	r2, #20
 80016cc:	2100      	movs	r1, #0
 80016ce:	a803      	add	r0, sp, #12
 80016d0:	f019 fd70 	bl	801b1b4 <memset>
  if(htim->Instance==TIM1)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	4a2b      	ldr	r2, [pc, #172]	; (8001784 <HAL_TIM_MspPostInit+0xc0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d11c      	bne.n	8001716 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_TIM_MspPostInit+0xc4>)
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016e8:	f042 0210 	orr.w	r2, r2, #16
 80016ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001704:	4821      	ldr	r0, [pc, #132]	; (800178c <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800170a:	2301      	movs	r3, #1
 800170c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f003 ffe5 	bl	80056dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001712:	b008      	add	sp, #32
 8001714:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_TIM_MspPostInit+0xcc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d118      	bne.n	800174e <HAL_TIM_MspPostInit+0x8a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_TIM_MspPostInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	481c      	ldr	r0, [pc, #112]	; (8001794 <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001728:	f042 0208 	orr.w	r2, r2, #8
 800172c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001748:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174a:	a903      	add	r1, sp, #12
 800174c:	e7df      	b.n	800170e <HAL_TIM_MspPostInit+0x4a>
  else if(htim->Instance==TIM5)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_TIM_MspPostInit+0xd4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d1de      	bne.n	8001712 <HAL_TIM_MspPostInit+0x4e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	a903      	add	r1, sp, #12
 8001758:	4810      	ldr	r0, [pc, #64]	; (800179c <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800177c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	e9cd 2205 	strd	r2, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	e7c4      	b.n	800170e <HAL_TIM_MspPostInit+0x4a>
 8001784:	40010000 	.word	0x40010000
 8001788:	58024400 	.word	0x58024400
 800178c:	58021000 	.word	0x58021000
 8001790:	40000800 	.word	0x40000800
 8001794:	58020c00 	.word	0x58020c00
 8001798:	40000c00 	.word	0x40000c00
 800179c:	58020000 	.word	0x58020000

080017a0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a0:	280f      	cmp	r0, #15
{
 80017a2:	b510      	push	{r4, lr}
 80017a4:	4604      	mov	r4, r0
 80017a6:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a8:	d902      	bls.n	80017b0 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80017ac:	b00a      	add	sp, #40	; 0x28
 80017ae:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80017b0:	4601      	mov	r1, r0
 80017b2:	2200      	movs	r2, #0
 80017b4:	2036      	movs	r0, #54	; 0x36
 80017b6:	f003 fde3 	bl	8005380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ba:	2036      	movs	r0, #54	; 0x36
 80017bc:	f003 fe12 	bl	80053e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c2:	4669      	mov	r1, sp
 80017c4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80017c6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_InitTick+0x88>)
 80017ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80017ce:	f042 0210 	orr.w	r2, r2, #16
 80017d2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80017d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e2:	f006 f97d 	bl	8007ae0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e6:	9b07      	ldr	r3, [sp, #28]
 80017e8:	b9c3      	cbnz	r3, 800181c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ea:	f006 f955 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80017ee:	4c0f      	ldr	r4, [pc, #60]	; (800182c <HAL_InitTick+0x8c>)
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_InitTick+0x90>)
 80017f2:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017f4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80017f8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_InitTick+0x94>)
 80017fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001800:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001802:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001804:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001806:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001808:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800180c:	f007 f98e 	bl	8008b2c <HAL_TIM_Base_Init>
 8001810:	2800      	cmp	r0, #0
 8001812:	d1ca      	bne.n	80017aa <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001814:	4620      	mov	r0, r4
 8001816:	f007 f821 	bl	800885c <HAL_TIM_Base_Start_IT>
 800181a:	e7c7      	b.n	80017ac <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800181c:	f006 f93c 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 8001820:	0040      	lsls	r0, r0, #1
 8001822:	e7e4      	b.n	80017ee <HAL_InitTick+0x4e>
 8001824:	2400005c 	.word	0x2400005c
 8001828:	58024400 	.word	0x58024400
 800182c:	24007164 	.word	0x24007164
 8001830:	40001000 	.word	0x40001000
 8001834:	000f4240 	.word	0x000f4240

08001838 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001838:	4770      	bx	lr

0800183a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler>

0800183c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler>

0800183e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler>

08001840 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler>

08001842 <DebugMon_Handler>:
 8001842:	4770      	bx	lr

08001844 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001844:	4801      	ldr	r0, [pc, #4]	; (800184c <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8001846:	f007 b853 	b.w	80088f0 <HAL_TIM_IRQHandler>
 800184a:	bf00      	nop
 800184c:	240070b8 	.word	0x240070b8

08001850 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001850:	4801      	ldr	r0, [pc, #4]	; (8001858 <TIM6_DAC_IRQHandler+0x8>)
 8001852:	f007 b84d 	b.w	80088f0 <HAL_TIM_IRQHandler>
 8001856:	bf00      	nop
 8001858:	24007164 	.word	0x24007164

0800185c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800185c:	4801      	ldr	r0, [pc, #4]	; (8001864 <LTDC_IRQHandler+0x8>)
 800185e:	f004 bd8b 	b.w	8006378 <HAL_LTDC_IRQHandler>
 8001862:	bf00      	nop
 8001864:	24006f58 	.word	0x24006f58

08001868 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001868:	4801      	ldr	r0, [pc, #4]	; (8001870 <DMA2D_IRQHandler+0x8>)
 800186a:	f003 bead 	b.w	80055c8 <HAL_DMA2D_IRQHandler>
 800186e:	bf00      	nop
 8001870:	24007050 	.word	0x24007050

08001874 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001874:	2001      	movs	r0, #1
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b508      	push	{r3, lr}
	errno = EINVAL;
 800187a:	f019 fc41 	bl	801b100 <__errno>
 800187e:	2316      	movs	r3, #22
 8001880:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001882:	f04f 30ff 	mov.w	r0, #4294967295
 8001886:	bd08      	pop	{r3, pc}

08001888 <_exit>:

void _exit (int status)
{
 8001888:	b508      	push	{r3, lr}
	errno = EINVAL;
 800188a:	f019 fc39 	bl	801b100 <__errno>
 800188e:	2316      	movs	r3, #22
 8001890:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001892:	e7fe      	b.n	8001892 <_exit+0xa>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	460e      	mov	r6, r1
 8001898:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	2500      	movs	r5, #0
 800189c:	42a5      	cmp	r5, r4
 800189e:	db01      	blt.n	80018a4 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80018a0:	4620      	mov	r0, r4
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80018a4:	f3af 8000 	nop.w
 80018a8:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	3501      	adds	r5, #1
 80018ac:	e7f6      	b.n	800189c <_read+0x8>

080018ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ae:	b570      	push	{r4, r5, r6, lr}
 80018b0:	460e      	mov	r6, r1
 80018b2:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	2500      	movs	r5, #0
 80018b6:	42a5      	cmp	r5, r4
 80018b8:	db01      	blt.n	80018be <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80018ba:	4620      	mov	r0, r4
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80018be:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 80018c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	e7f6      	b.n	80018b6 <_write+0x8>

080018c8 <_close>:

int _close(int file)
{
	return -1;
}
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80018d2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80018d4:	604b      	str	r3, [r1, #4]
}
 80018d6:	4770      	bx	lr

080018d8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018d8:	2001      	movs	r0, #1
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr

080018e0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <_sbrk+0x30>)
{
 80018e2:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80018e4:	6819      	ldr	r1, [r3, #0]
{
 80018e6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80018e8:	b909      	cbnz	r1, 80018ee <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018ea:	490a      	ldr	r1, [pc, #40]	; (8001914 <_sbrk+0x34>)
 80018ec:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	4909      	ldr	r1, [pc, #36]	; (8001918 <_sbrk+0x38>)
 80018f2:	4c0a      	ldr	r4, [pc, #40]	; (800191c <_sbrk+0x3c>)
 80018f4:	4402      	add	r2, r0
 80018f6:	1b09      	subs	r1, r1, r4
 80018f8:	428a      	cmp	r2, r1
 80018fa:	d906      	bls.n	800190a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80018fc:	f019 fc00 	bl	801b100 <__errno>
 8001900:	230c      	movs	r3, #12
 8001902:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001904:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001908:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800190a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800190c:	e7fc      	b.n	8001908 <_sbrk+0x28>
 800190e:	bf00      	nop
 8001910:	24000148 	.word	0x24000148
 8001914:	24007250 	.word	0x24007250
 8001918:	24050000 	.word	0x24050000
 800191c:	00001000 	.word	0x00001000

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001924:	f003 fc72 	bl	800520c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001928:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800192a:	e003      	b.n	8001934 <LoopCopyDataInit>

0800192c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800192e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001930:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001932:	3104      	adds	r1, #4

08001934 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001938:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800193c:	d3f6      	bcc.n	800192c <CopyDataInit>
  ldr  r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001940:	e002      	b.n	8001948 <LoopFillZerobss>

08001942 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001942:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001944:	f842 3b04 	str.w	r3, [r2], #4

08001948 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800194a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800194c:	d3f9      	bcc.n	8001942 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800194e:	f019 fbef 	bl	801b130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7fe ff99 	bl	8000888 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 800195c:	08020be8 	.word	0x08020be8
  ldr  r0, =_sdata
 8001960:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001964:	24000124 	.word	0x24000124
  ldr  r2, =_sbss
 8001968:	24000124 	.word	0x24000124
  ldr  r3, = _ebss
 800196c:	24007250 	.word	0x24007250

08001970 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC3_IRQHandler>

08001972 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001972:	f000 bc8f 	b.w	8002294 <touchgfx_init>

08001976 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001976:	f000 bcfd 	b.w	8002374 <touchgfx_taskEntry>

0800197a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800197a:	6840      	ldr	r0, [r0, #4]
    }
 800197c:	4770      	bx	lr

0800197e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800197e:	6041      	str	r1, [r0, #4]
    }
 8001980:	4770      	bx	lr
	...

08001984 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001984:	4a09      	ldr	r2, [pc, #36]	; (80019ac <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001986:	6813      	ldr	r3, [r2, #0]
 8001988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198c:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 800198e:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001994:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 8001998:	3a4c      	subs	r2, #76	; 0x4c
 800199a:	430b      	orrs	r3, r1
 800199c:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 800199e:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 80019a2:	6813      	ldr	r3, [r2, #0]
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6013      	str	r3, [r2, #0]
}
 80019aa:	4770      	bx	lr
 80019ac:	e000edfc 	.word	0xe000edfc
 80019b0:	c5acce55 	.word	0xc5acce55

080019b4 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80019b4:	1a51      	subs	r1, r2, r1
 80019b6:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80019ba:	fbb1 f0f3 	udiv	r0, r1, r3
 80019be:	4770      	bx	lr

080019c0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80019c0:	4b01      	ldr	r3, [pc, #4]	; (80019c8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80019c2:	6818      	ldr	r0, [r3, #0]
}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e0001004 	.word	0xe0001004

080019cc <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80019cc:	4770      	bx	lr

080019ce <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80019ce:	b510      	push	{r4, lr}
 80019d0:	4604      	mov	r4, r0
 80019d2:	210c      	movs	r1, #12
 80019d4:	f019 fa4c 	bl	801ae70 <_ZdlPvj>
 80019d8:	4620      	mov	r0, r4
 80019da:	bd10      	pop	{r4, pc}

080019dc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 80019dc:	6803      	ldr	r3, [r0, #0]
{
 80019de:	b510      	push	{r4, lr}
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80019e4:	b131      	cbz	r1, 80019f4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80019e6:	4798      	blx	r3
 80019e8:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	4418      	add	r0, r3
 80019f0:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80019f2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80019f4:	4798      	blx	r3
 80019f6:	60a0      	str	r0, [r4, #8]
}
 80019f8:	e7fb      	b.n	80019f2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080019fa <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80019fa:	4770      	bx	lr

080019fc <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80019fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 80019fe:	2308      	movs	r3, #8
 8001a00:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 8001a02:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 8001a04:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <_ZN20STM32TouchController4initEv+0x24>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <_ZN20STM32TouchController4initEv+0x28>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8001a14:	f003 fb18 	bl	8005048 <BSP_TS_Init>
}
 8001a18:	b005      	add	sp, #20
 8001a1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a1e:	bf00      	nop
 8001a20:	24006bb6 	.word	0x24006bb6
 8001a24:	24006bb8 	.word	0x24006bb8

08001a28 <_ZN20STM32TouchControllerD0Ev>:
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	f019 fa1f 	bl	801ae70 <_ZdlPvj>
 8001a32:	4620      	mov	r0, r4
 8001a34:	bd10      	pop	{r4, pc}

08001a36 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a36:	b530      	push	{r4, r5, lr}
 8001a38:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001a3a:	2000      	movs	r0, #0
{
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001a40:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001a42:	9003      	str	r0, [sp, #12]
 8001a44:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001a48:	f003 fb80 	bl	800514c <BSP_TS_GetState>
 8001a4c:	b140      	cbz	r0, 8001a60 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8001a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a52:	f383 8811 	msr	BASEPRI, r3
 8001a56:	f3bf 8f6f 	isb	sy
 8001a5a:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001a5e:	e7fe      	b.n	8001a5e <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001a60:	9801      	ldr	r0, [sp, #4]
 8001a62:	b120      	cbz	r0, 8001a6e <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001a64:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001a66:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001a68:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 8001a6a:	9b03      	ldr	r3, [sp, #12]
 8001a6c:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001a6e:	b005      	add	sp, #20
 8001a70:	bd30      	pop	{r4, r5, pc}
	...

08001a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001a74:	b110      	cbz	r0, 8001a7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8001a76:	2801      	cmp	r0, #1
 8001a78:	d009      	beq.n	8001a8e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001a7a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001a7e:	2108      	movs	r1, #8
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	fab2 f282 	clz	r2, r2
 8001a86:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8001a8a:	f003 bfb3 	b.w	80059f4 <HAL_GPIO_WritePin>
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001a90:	2104      	movs	r1, #4
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	fab2 f282 	clz	r2, r2
 8001a98:	0952      	lsrs	r2, r2, #5
 8001a9a:	e7f5      	b.n	8001a88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8001a9c:	2400014c 	.word	0x2400014c
 8001aa0:	58020800 	.word	0x58020800

08001aa4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001aa4:	b110      	cbz	r0, 8001aac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 8001aa6:	2801      	cmp	r0, #1
 8001aa8:	d009      	beq.n	8001abe <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001aaa:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001aae:	2108      	movs	r1, #8
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	3a00      	subs	r2, #0
 8001ab4:	bf18      	it	ne
 8001ab6:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001aba:	f003 bf9b 	b.w	80059f4 <HAL_GPIO_WritePin>
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	3a00      	subs	r2, #0
 8001ac6:	bf18      	it	ne
 8001ac8:	2201      	movne	r2, #1
 8001aca:	e7f5      	b.n	8001ab8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 8001acc:	2400014c 	.word	0x2400014c
 8001ad0:	58020800 	.word	0x58020800

08001ad4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001ad4:	b110      	cbz	r0, 8001adc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8001ad6:	2801      	cmp	r0, #1
 8001ad8:	d004      	beq.n	8001ae4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001ada:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001adc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ade:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 8001ae0:	f003 bf8d 	b.w	80059fe <HAL_GPIO_TogglePin>
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	e7fa      	b.n	8001ade <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 8001ae8:	58020800 	.word	0x58020800

08001aec <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001aec:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001aee:	b130      	cbz	r0, 8001afe <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001af0:	2801      	cmp	r0, #1
 8001af2:	d009      	beq.n	8001b08 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 8001af4:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001af6:	1e43      	subs	r3, r0, #1
 8001af8:	4258      	negs	r0, r3
 8001afa:	4158      	adcs	r0, r3
 8001afc:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001afe:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 8001b02:	f003 ff71 	bl	80059e8 <HAL_GPIO_ReadPin>
        break;
 8001b06:	e7f6      	b.n	8001af6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001b08:	2104      	movs	r1, #4
 8001b0a:	e7f9      	b.n	8001b00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 8001b0c:	58020800 	.word	0x58020800

08001b10 <_ZN8touchgfx4GPIO4initEv>:
{
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4d08      	ldr	r5, [pc, #32]	; (8001b34 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001b14:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001b16:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001b18:	b2e0      	uxtb	r0, r4
 8001b1a:	f7ff ffe7 	bl	8001aec <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001b1e:	b118      	cbz	r0, 8001b28 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001b24:	bf18      	it	ne
 8001b26:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001b28:	3401      	adds	r4, #1
 8001b2a:	3504      	adds	r5, #4
 8001b2c:	2c05      	cmp	r4, #5
 8001b2e:	d1f3      	bne.n	8001b18 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
 8001b32:	bf00      	nop
 8001b34:	2400014c 	.word	0x2400014c

08001b38 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001b38:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001b3a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001b3e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001b42:	4770      	bx	lr

08001b44 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001b44:	2000      	movs	r0, #0
 8001b46:	4770      	bx	lr

08001b48 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001b48:	2000      	movs	r0, #0
 8001b4a:	4770      	bx	lr

08001b4c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001b4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b4e:	b10b      	cbz	r3, 8001b54 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001b50:	4608      	mov	r0, r1
 8001b52:	4718      	bx	r3
        }
    }
 8001b54:	4770      	bx	lr

08001b56 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001b56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b5a:	4770      	bx	lr

08001b5c <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001b5c:	6840      	ldr	r0, [r0, #4]
 8001b5e:	6803      	ldr	r3, [r0, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4718      	bx	r3

08001b64 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001b64:	4770      	bx	lr
	...

08001b68 <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001b68:	b538      	push	{r3, r4, r5, lr}
 8001b6a:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001b6c:	f000 fcac 	bl	80024c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001b72:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001b80:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 8001b82:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 8001b86:	f7ff ffc3 	bl	8001b10 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f7ff fefa 	bl	8001984 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001b90:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b92:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b94:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001b98:	bd38      	pop	{r3, r4, r5, pc}
 8001b9a:	bf00      	nop
 8001b9c:	70060000 	.word	0x70060000
 8001ba0:	700c0000 	.word	0x700c0000

08001ba4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001ba4:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001ba6:	b931      	cbnz	r1, 8001bb6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001baa:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001bb0:	480a      	ldr	r0, [pc, #40]	; (8001bdc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001bb2:	f019 fa73 	bl	801b09c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001bb6:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001bba:	3a00      	subs	r2, #0
 8001bbc:	4908      	ldr	r1, [pc, #32]	; (8001be0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001bbe:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001bc0:	bf18      	it	ne
 8001bc2:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001bc4:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001bc6:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001bc8:	bf18      	it	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8001bce:	7013      	strb	r3, [r2, #0]
    }
 8001bd0:	bd08      	pop	{r3, pc}
 8001bd2:	bf00      	nop
 8001bd4:	0801c28c 	.word	0x0801c28c
 8001bd8:	0801c2c4 	.word	0x0801c2c4
 8001bdc:	0801c312 	.word	0x0801c312
 8001be0:	24006bba 	.word	0x24006bba
 8001be4:	24006bbb 	.word	0x24006bbb

08001be8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001be8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	428b      	cmp	r3, r1
 8001bf0:	d803      	bhi.n	8001bfa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d905      	bls.n	8001c06 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bfc:	219e      	movs	r1, #158	; 0x9e
 8001bfe:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001c02:	f019 fa4b 	bl	801b09c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001c08:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001c0c:	801a      	strh	r2, [r3, #0]
    }
 8001c0e:	bd08      	pop	{r3, pc}
 8001c10:	24006bb0 	.word	0x24006bb0
 8001c14:	24006bb2 	.word	0x24006bb2
 8001c18:	0801c357 	.word	0x0801c357
 8001c1c:	0801c3ba 	.word	0x0801c3ba
 8001c20:	0801c312 	.word	0x0801c312
 8001c24:	24006bb6 	.word	0x24006bb6
 8001c28:	24006bb8 	.word	0x24006bb8

08001c2c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001c2c:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001c2e:	6803      	ldr	r3, [r0, #0]
{
 8001c30:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c34:	4798      	blx	r3
    enableInterrupts();
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	4620      	mov	r0, r4
 8001c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3c:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001c3e:	f000 f8e7 	bl	8001e10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	4620      	mov	r0, r4
 8001c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c48:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c50:	4807      	ldr	r0, [pc, #28]	; (8001c70 <_ZN11TouchGFXHAL9taskEntryEv+0x44>)
 8001c52:	f003 fecf 	bl	80059f4 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 8001c5e:	f003 fec9 	bl	80059f4 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001c62:	f000 f8d5 	bl	8001e10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	4620      	mov	r0, r4
 8001c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c6c:	4798      	blx	r3
    for (;;)
 8001c6e:	e7f8      	b.n	8001c62 <_ZN11TouchGFXHAL9taskEntryEv+0x36>
 8001c70:	58020c00 	.word	0x58020c00
 8001c74:	58021800 	.word	0x58021800

08001c78 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001c7c:	f00a fc94 	bl	800c5a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	4620      	mov	r0, r4
 8001c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 8001c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001c8c:	4718      	bx	r3

08001c8e <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c8e:	f000 bc0d 	b.w	80024ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001c92 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001c92:	f000 bc11 	b.w	80024b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08001c98 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001c98:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001c9a:	f000 fc6d 	bl	8002578 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ca6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001caa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cae:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cb2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cb6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001cba:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cbc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cc0:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cc2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cc6:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cc8:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001ccc:	d2f9      	bcs.n	8001cc2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001cce:	3b20      	subs	r3, #32
 8001cd0:	f113 0f20 	cmn.w	r3, #32
 8001cd4:	d1f2      	bne.n	8001cbc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cda:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001ce4:	f000 bbbe 	b.w	8002464 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001ce8 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001ce8:	f000 bc68 	b.w	80025bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001cec <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001cec:	f000 bc52 	b.w	8002594 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001cf0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001cf0:	f000 bbc2 	b.w	8002478 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001cf4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001cf4:	f009 be10 	b.w	800b918 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001cf8 <_ZN11TouchGFXHALD0Ev>:
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	2188      	movs	r1, #136	; 0x88
 8001cfe:	f019 f8b7 	bl	801ae70 <_ZdlPvj>
 8001d02:	4620      	mov	r0, r4
 8001d04:	bd10      	pop	{r4, pc}

08001d06 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001d06:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001d0a:	b11b      	cbz	r3, 8001d14 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001d0c:	6840      	ldr	r0, [r0, #4]
 8001d0e:	6803      	ldr	r3, [r0, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4718      	bx	r3
    }
 8001d14:	4618      	mov	r0, r3
 8001d16:	4770      	bx	lr

08001d18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d18:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001d1e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d20:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	428c      	cmp	r4, r1
 8001d28:	d009      	beq.n	8001d3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d2a:	b93a      	cbnz	r2, 8001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d2c:	490a      	ldr	r1, [pc, #40]	; (8001d58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d30:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d32:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d34:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d36:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d38:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001d3a:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d3c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d0fc      	beq.n	8001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d42:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d46:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d48:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d4a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d4c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d4e:	2200      	movs	r2, #0
 8001d50:	e7f3      	b.n	8001d3a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d52:	bf00      	nop
 8001d54:	24006bb4 	.word	0x24006bb4
 8001d58:	24006bb2 	.word	0x24006bb2
 8001d5c:	24006bb0 	.word	0x24006bb0

08001d60 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001d60:	4601      	mov	r1, r0
 8001d62:	b508      	push	{r3, lr}
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <IdleTaskHook+0x14>)
 8001d66:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001d68:	b101      	cbz	r1, 8001d6c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001d6a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001d6c:	f00a fc36 	bl	800c5dc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001d70:	2001      	movs	r0, #1
 8001d72:	bd08      	pop	{r3, pc}
 8001d74:	24006bbc 	.word	0x24006bbc

08001d78 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2200      	movs	r2, #0
{
 8001d7c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d7e:	4608      	mov	r0, r1
 8001d80:	f007 f9df 	bl	8009142 <osSemaphoreNew>
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001d86:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001d88:	b928      	cbnz	r0, 8001d96 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001d8c:	2128      	movs	r1, #40	; 0x28
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d90:	480a      	ldr	r0, [pc, #40]	; (8001dbc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001d92:	f019 f983 	bl	801b09c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2104      	movs	r1, #4
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f007 fa70 	bl	8009280 <osMessageQueueNew>
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001da2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001da4:	b918      	cbnz	r0, 8001dae <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001da8:	212c      	movs	r1, #44	; 0x2c
 8001daa:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001dac:	e7f0      	b.n	8001d90 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001dae:	bd08      	pop	{r3, pc}
 8001db0:	24000160 	.word	0x24000160
 8001db4:	0801c4d0 	.word	0x0801c4d0
 8001db8:	0801c519 	.word	0x0801c519
 8001dbc:	0801c548 	.word	0x0801c548
 8001dc0:	2400015c 	.word	0x2400015c
 8001dc4:	0801c59b 	.word	0x0801c59b

08001dc8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001dca:	f04f 31ff 	mov.w	r1, #4294967295
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	f007 ba02 	b.w	80091d8 <osSemaphoreAcquire>
 8001dd4:	24000160 	.word	0x24000160

08001dd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001dd8:	4b01      	ldr	r3, [pc, #4]	; (8001de0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	f007 ba28 	b.w	8009230 <osSemaphoreRelease>
 8001de0:	24000160 	.word	0x24000160

08001de4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001de6:	2100      	movs	r1, #0
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	f007 b9f5 	b.w	80091d8 <osSemaphoreAcquire>
 8001dee:	bf00      	nop
 8001df0:	24000160 	.word	0x24000160

08001df4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001df4:	f7ff bff0 	b.w	8001dd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001df8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4803      	ldr	r0, [pc, #12]	; (8001e08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6800      	ldr	r0, [r0, #0]
 8001e02:	f007 ba79 	b.w	80092f8 <osMessageQueuePut>
 8001e06:	bf00      	nop
 8001e08:	2400015c 	.word	0x2400015c
 8001e0c:	24000018 	.word	0x24000018

08001e10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001e10:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001e12:	2300      	movs	r3, #0
 8001e14:	4c07      	ldr	r4, [pc, #28]	; (8001e34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001e16:	a901      	add	r1, sp, #4
 8001e18:	461a      	mov	r2, r3
 8001e1a:	6820      	ldr	r0, [r4, #0]
 8001e1c:	f007 fa9c 	bl	8009358 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	2200      	movs	r2, #0
 8001e26:	a901      	add	r1, sp, #4
 8001e28:	6820      	ldr	r0, [r4, #0]
 8001e2a:	f007 fa95 	bl	8009358 <osMessageQueueGet>
}
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd10      	pop	{r4, pc}
 8001e32:	bf00      	nop
 8001e34:	2400015c 	.word	0x2400015c

08001e38 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001e38:	6803      	ldr	r3, [r0, #0]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	4718      	bx	r3

08001e3e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001e3e:	2001      	movs	r0, #1
 8001e40:	4770      	bx	lr

08001e42 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001e42:	6803      	ldr	r3, [r0, #0]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	4718      	bx	r3

08001e48 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001e48:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001e4c:	4770      	bx	lr
	...

08001e50 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <DMA2D_XferCpltCallback+0xc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001e56:	6803      	ldr	r3, [r0, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4718      	bx	r3
 8001e5c:	24006bbc 	.word	0x24006bbc

08001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001e60:	b508      	push	{r3, lr}
 8001e62:	280b      	cmp	r0, #11
 8001e64:	d80b      	bhi.n	8001e7e <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001e66:	e8df f000 	tbb	[pc, r0]
 8001e6a:	0612      	.short	0x0612
 8001e6c:	0a0a0a10 	.word	0x0a0a0a10
 8001e70:	0808080a 	.word	0x0808080a
 8001e74:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e76:	2001      	movs	r0, #1
}
 8001e78:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001e7a:	2005      	movs	r0, #5
        break;
 8001e7c:	e7fc      	b.n	8001e78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e80:	2166      	movs	r1, #102	; 0x66
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001e86:	f019 f909 	bl	801b09c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	e7f4      	b.n	8001e78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e8e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001e90:	e7f2      	b.n	8001e78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001e92:	bf00      	nop
 8001e94:	0801c5dd 	.word	0x0801c5dd
 8001e98:	0801c5f8 	.word	0x0801c5f8
 8001e9c:	0801c642 	.word	0x0801c642

08001ea0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001ea0:	b508      	push	{r3, lr}
 8001ea2:	280a      	cmp	r0, #10
 8001ea4:	d809      	bhi.n	8001eba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001ea6:	e8df f000 	tbb	[pc, r0]
 8001eaa:	0610      	.short	0x0610
 8001eac:	0808080e 	.word	0x0808080e
 8001eb0:	06060608 	.word	0x06060608
 8001eb4:	06          	.byte	0x06
 8001eb5:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001eb6:	2001      	movs	r0, #1
}
 8001eb8:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001ebc:	2187      	movs	r1, #135	; 0x87
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001ec2:	f019 f8eb 	bl	801b09c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e7f6      	b.n	8001eb8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001eca:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001ecc:	e7f4      	b.n	8001eb8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001ece:	bf00      	nop
 8001ed0:	0801c5dd 	.word	0x0801c5dd
 8001ed4:	0801c693 	.word	0x0801c693
 8001ed8:	0801c642 	.word	0x0801c642

08001edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ee0:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001ee4:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	f7ff ffba 	bl	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001eec:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001eee:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ef0:	4638      	mov	r0, r7
 8001ef2:	f7ff ffb5 	bl	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001ef6:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ef8:	4638      	mov	r0, r7
 8001efa:	f7ff ffd1 	bl	8001ea0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001efe:	8aa1      	ldrh	r1, [r4, #20]
 8001f00:	8b62      	ldrh	r2, [r4, #26]
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8001f04:	1a52      	subs	r2, r2, r1
 8001f06:	469e      	mov	lr, r3
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001f0a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001f0c:	8b22      	ldrh	r2, [r4, #24]
 8001f0e:	1a52      	subs	r2, r2, r1
 8001f10:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001f12:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001f14:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001f16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f1a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001f1e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f20:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001f22:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001f24:	f8d4 c000 	ldr.w	ip, [r4]
 8001f28:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001f2c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8001f30:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8001f34:	d029      	beq.n	8001f8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8001f36:	d813      	bhi.n	8001f60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8001f38:	f1bc 0f20 	cmp.w	ip, #32
 8001f3c:	ea45 0002 	orr.w	r0, r5, r2
 8001f40:	d067      	beq.n	8002012 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8001f42:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8001f46:	d064      	beq.n	8002012 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8001f48:	f1bc 0f04 	cmp.w	ip, #4
 8001f4c:	d05d      	beq.n	800200a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f4e:	432a      	orrs	r2, r5
 8001f50:	4b38      	ldr	r3, [pc, #224]	; (8002034 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001f52:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f58:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001f5a:	d067      	beq.n	800202c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001f5c:	4a36      	ldr	r2, [pc, #216]	; (8002038 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001f5e:	e040      	b.n	8001fe2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
    switch (blitOp.operation)
 8001f60:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001f64:	d007      	beq.n	8001f76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
 8001f66:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8001f6a:	d1f0      	bne.n	8001f4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f70:	f042 0209 	orr.w	r2, r2, #9
 8001f74:	e003      	b.n	8001f7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f7a:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f7e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001f80:	68e2      	ldr	r2, [r4, #12]
 8001f82:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f84:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f86:	6159      	str	r1, [r3, #20]
 8001f88:	e02a      	b.n	8001fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f8a:	432a      	orrs	r2, r5
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001f8c:	68a0      	ldr	r0, [r4, #8]
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f92:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f94:	1d02      	adds	r2, r0, #4
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f96:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f98:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
        switch ((Bitmap::ClutFormat)palette->format)
 8001f9c:	7802      	ldrb	r2, [r0, #0]
 8001f9e:	b142      	cbz	r2, 8001fb2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 8001fa0:	2a01      	cmp	r2, #1
 8001fa2:	d020      	beq.n	8001fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
            assert(0 && "Unsupported format");
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 8001fa6:	f240 1101 	movw	r1, #257	; 0x101
 8001faa:	4a25      	ldr	r2, [pc, #148]	; (8002040 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 8001fac:	4825      	ldr	r0, [pc, #148]	; (8002044 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 8001fae:	f019 f875 	bl	801b09c <__assert_func>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fb2:	8842      	ldrh	r2, [r0, #2]
        bool blend = true;
 8001fb4:	2401      	movs	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fb6:	69d9      	ldr	r1, [r3, #28]
 8001fb8:	1e50      	subs	r0, r2, #1
 8001fba:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001fbe:	f022 0210 	bic.w	r2, r2, #16
 8001fc2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fc6:	61da      	str	r2, [r3, #28]
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	f042 0220 	orr.w	r2, r2, #32
 8001fd0:	61da      	str	r2, [r3, #28]
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	0692      	lsls	r2, r2, #26
 8001fd6:	d4fc      	bmi.n	8001fd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001fd8:	2210      	movs	r2, #16
 8001fda:	609a      	str	r2, [r3, #8]
        if(blend)
 8001fdc:	2c00      	cmp	r4, #0
 8001fde:	d0bd      	beq.n	8001f5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001fe2:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8001fe4:	e020      	b.n	8002028 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fe6:	8842      	ldrh	r2, [r0, #2]
            if(blitOp.alpha == 255)
 8001fe8:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fec:	69d9      	ldr	r1, [r3, #28]
 8001fee:	f102 30ff 	add.w	r0, r2, #4294967295
            if(blitOp.alpha == 255)
 8001ff2:	bf18      	it	ne
 8001ff4:	2401      	movne	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001ff6:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001ffa:	f022 0210 	bic.w	r2, r2, #16
 8001ffe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002002:	f042 0210 	orr.w	r2, r2, #16
 8002006:	61da      	str	r2, [r3, #28]
            break;
 8002008:	e7de      	b.n	8001fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800200a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800200e:	61d8      	str	r0, [r3, #28]
 8002010:	e7b8      	b.n	8001f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002012:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002018:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800201c:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002020:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002024:	f8ce 3000 	str.w	r3, [lr]
}
 8002028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800202c:	f240 2201 	movw	r2, #513	; 0x201
 8002030:	e7d7      	b.n	8001fe2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002032:	bf00      	nop
 8002034:	52001000 	.word	0x52001000
 8002038:	00010201 	.word	0x00010201
 800203c:	0801c6de 	.word	0x0801c6de
 8002040:	0801c6f8 	.word	0x0801c6f8
 8002044:	0801c642 	.word	0x0801c642
 8002048:	00020201 	.word	0x00020201

0800204c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002050:	7f88      	ldrb	r0, [r1, #30]
 8002052:	f7ff ff25 	bl	8001ea0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002058:	8aa5      	ldrh	r5, [r4, #20]
 800205a:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800205c:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800205e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002062:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002064:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002066:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002068:	6921      	ldr	r1, [r4, #16]
 800206a:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800206c:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800206e:	6825      	ldr	r5, [r4, #0]
 8002070:	2d08      	cmp	r5, #8
 8002072:	d10e      	bne.n	8002092 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002074:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002076:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002078:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 800207c:	7f20      	ldrb	r0, [r4, #28]
 800207e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002082:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002084:	68e2      	ldr	r2, [r4, #12]
 8002086:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800208a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800208c:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800208e:	601a      	str	r2, [r3, #0]
    }
}
 8002090:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002092:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002094:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002096:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002098:	68e2      	ldr	r2, [r4, #12]
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800209c:	4a03      	ldr	r2, [pc, #12]	; (80020ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 800209e:	e7f6      	b.n	800208e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80020a0:	52001000 	.word	0x52001000
 80020a4:	00010009 	.word	0x00010009
 80020a8:	00020201 	.word	0x00020201
 80020ac:	00030201 	.word	0x00030201

080020b0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b6:	6003      	str	r3, [r0, #0]
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <_ZN8STM32DMAD1Ev+0x1c>)
 80020ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80020be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020c2:	f3bf 8f6f 	isb	sy
}
 80020c6:	4770      	bx	lr
 80020c8:	0801c740 	.word	0x0801c740
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80020d0:	b510      	push	{r4, lr}
 80020d2:	4604      	mov	r4, r0
}
 80020d4:	f7ff ffec 	bl	80020b0 <_ZN8STM32DMAD1Ev>
 80020d8:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80020dc:	4620      	mov	r0, r4
 80020de:	f018 fec7 	bl	801ae70 <_ZdlPvj>
 80020e2:	4620      	mov	r0, r4
 80020e4:	bd10      	pop	{r4, pc}
	...

080020e8 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <_ZN8STM32DMA10initializeEv+0x40>)
{
 80020ea:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020ec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80020f0:	f042 0210 	orr.w	r2, r2, #16
 80020f4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80020f8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80020fc:	f002 0210 	and.w	r2, r2, #16
 8002100:	9201      	str	r2, [sp, #4]
 8002102:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002104:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002106:	f042 0210 	orr.w	r2, r2, #16
 800210a:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800210c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <_ZN8STM32DMA10initializeEv+0x44>)
 8002116:	4a06      	ldr	r2, [pc, #24]	; (8002130 <_ZN8STM32DMA10initializeEv+0x48>)
 8002118:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <_ZN8STM32DMA10initializeEv+0x4c>)
 800211c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002120:	609a      	str	r2, [r3, #8]
}
 8002122:	b002      	add	sp, #8
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	58024400 	.word	0x58024400
 800212c:	24007050 	.word	0x24007050
 8002130:	08001e51 	.word	0x08001e51
 8002134:	e000e100 	.word	0xe000e100

08002138 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <_ZN8STM32DMAC1Ev+0x30>)
 800213e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002140:	2600      	movs	r6, #0
 8002142:	4625      	mov	r5, r4
 8002144:	2260      	movs	r2, #96	; 0x60
 8002146:	6060      	str	r0, [r4, #4]
 8002148:	7226      	strb	r6, [r4, #8]
 800214a:	7266      	strb	r6, [r4, #9]
 800214c:	f845 3b20 	str.w	r3, [r5], #32
 8002150:	4629      	mov	r1, r5
 8002152:	f00a fbab 	bl	800c8ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002156:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 800215a:	60ee      	str	r6, [r5, #12]
 800215c:	3520      	adds	r5, #32
 800215e:	42ab      	cmp	r3, r5
 8002160:	d1fb      	bne.n	800215a <_ZN8STM32DMAC1Ev+0x22>
}
 8002162:	4620      	mov	r0, r4
 8002164:	bd70      	pop	{r4, r5, r6, pc}
 8002166:	bf00      	nop
 8002168:	0801c740 	.word	0x0801c740

0800216c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800216c:	2001      	movs	r0, #1
 800216e:	4770      	bx	lr

08002170 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002170:	200c      	movs	r0, #12
 8002172:	4770      	bx	lr

08002174 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002174:	230c      	movs	r3, #12
 8002176:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800217a:	3008      	adds	r0, #8
 800217c:	4770      	bx	lr

0800217e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800217e:	230c      	movs	r3, #12
 8002180:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002184:	3008      	adds	r0, #8
 8002186:	4770      	bx	lr

08002188 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002188:	2001      	movs	r0, #1
 800218a:	4770      	bx	lr

0800218c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800218c:	f240 60d4 	movw	r0, #1748	; 0x6d4
 8002190:	4770      	bx	lr

08002192 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002192:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8002196:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800219a:	3008      	adds	r0, #8
 800219c:	4770      	bx	lr

0800219e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800219e:	f240 63d4 	movw	r3, #1748	; 0x6d4
 80021a2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021a6:	3008      	adds	r0, #8
 80021a8:	4770      	bx	lr

080021aa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80021aa:	2001      	movs	r0, #1
 80021ac:	4770      	bx	lr

080021ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80021ae:	2010      	movs	r0, #16
 80021b0:	4770      	bx	lr

080021b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021b2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80021b6:	3008      	adds	r0, #8
 80021b8:	4770      	bx	lr

080021ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021ba:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80021be:	3008      	adds	r0, #8
 80021c0:	4770      	bx	lr

080021c2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80021c2:	4608      	mov	r0, r1
 80021c4:	f000 bb14 	b.w	80027f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080021c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80021ca:	b510      	push	{r4, lr}
 80021cc:	4604      	mov	r4, r0
 80021ce:	6003      	str	r3, [r0, #0]
 80021d0:	f009 f8d4 	bl	800b37c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021d4:	4620      	mov	r0, r4
 80021d6:	bd10      	pop	{r4, pc}
 80021d8:	0801c7f8 	.word	0x0801c7f8

080021dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80021dc:	b510      	push	{r4, lr}
 80021de:	4604      	mov	r4, r0
 80021e0:	f7ff fff2 	bl	80021c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021e4:	2114      	movs	r1, #20
 80021e6:	4620      	mov	r0, r4
 80021e8:	f018 fe42 	bl	801ae70 <_ZdlPvj>
 80021ec:	4620      	mov	r0, r4
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80021f2:	b510      	push	{r4, lr}
 80021f4:	4604      	mov	r4, r0
 80021f6:	6003      	str	r3, [r0, #0]
 80021f8:	f009 f8c0 	bl	800b37c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021fc:	4620      	mov	r0, r4
 80021fe:	bd10      	pop	{r4, pc}
 8002200:	0801c7c4 	.word	0x0801c7c4

08002204 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002204:	b510      	push	{r4, lr}
 8002206:	4604      	mov	r4, r0
 8002208:	f7ff fff2 	bl	80021f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800220c:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8002210:	4620      	mov	r0, r4
 8002212:	f018 fe2d 	bl	801ae70 <_ZdlPvj>
 8002216:	4620      	mov	r0, r4
 8002218:	bd10      	pop	{r4, pc}
	...

0800221c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800221e:	b510      	push	{r4, lr}
 8002220:	4604      	mov	r4, r0
 8002222:	6003      	str	r3, [r0, #0]
 8002224:	f009 f8aa 	bl	800b37c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002228:	4620      	mov	r0, r4
 800222a:	bd10      	pop	{r4, pc}
 800222c:	0801c790 	.word	0x0801c790

08002230 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002230:	b510      	push	{r4, lr}
 8002232:	4604      	mov	r4, r0
 8002234:	f7ff fff2 	bl	800221c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002238:	2118      	movs	r1, #24
 800223a:	4620      	mov	r0, r4
 800223c:	f018 fe18 	bl	801ae70 <_ZdlPvj>
 8002240:	4620      	mov	r0, r4
 8002242:	bd10      	pop	{r4, pc}

08002244 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <_ZN12FrontendHeapD1Ev+0x24>)
 8002246:	b510      	push	{r4, lr}
 8002248:	4604      	mov	r4, r0
 800224a:	6003      	str	r3, [r0, #0]
 800224c:	f500 60e1 	add.w	r0, r0, #1800	; 0x708
 8002250:	f7ff ffba 	bl	80021c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002254:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002258:	f7ff ffca 	bl	80021f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800225c:	f104 0014 	add.w	r0, r4, #20
 8002260:	f7ff ffdc 	bl	800221c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002264:	4620      	mov	r0, r4
 8002266:	bd10      	pop	{r4, pc}
 8002268:	0801c82c 	.word	0x0801c82c

0800226c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800226c:	b508      	push	{r3, lr}
 800226e:	4802      	ldr	r0, [pc, #8]	; (8002278 <__tcf_0+0xc>)
 8002270:	f7ff ffe8 	bl	8002244 <_ZN12FrontendHeapD1Ev>
 8002274:	bd08      	pop	{r3, pc}
 8002276:	bf00      	nop
 8002278:	24000168 	.word	0x24000168

0800227c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800227c:	b510      	push	{r4, lr}
 800227e:	4604      	mov	r4, r0
 8002280:	f7ff ffe0 	bl	8002244 <_ZN12FrontendHeapD1Ev>
 8002284:	f640 0178 	movw	r1, #2168	; 0x878
 8002288:	4620      	mov	r0, r4
 800228a:	f018 fdf1 	bl	801ae70 <_ZdlPvj>
 800228e:	4620      	mov	r0, r4
 8002290:	bd10      	pop	{r4, pc}
	...

08002294 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002294:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002298:	f000 f9ec 	bl	8002674 <_ZN14BitmapDatabase11getInstanceEv>
 800229c:	2400      	movs	r4, #0
 800229e:	4605      	mov	r5, r0
 80022a0:	f000 f9ec 	bl	800267c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80022a4:	4623      	mov	r3, r4
 80022a6:	4601      	mov	r1, r0
 80022a8:	4622      	mov	r2, r4
 80022aa:	4628      	mov	r0, r5
 80022ac:	9400      	str	r4, [sp, #0]
 80022ae:	f010 facf 	bl	8012850 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <touchgfx_init+0xb4>)
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80022b6:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80022b8:	4d25      	ldr	r5, [pc, #148]	; (8002350 <touchgfx_init+0xbc>)
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f001 fb10 	bl	80038e0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80022c0:	4824      	ldr	r0, [pc, #144]	; (8002354 <touchgfx_init+0xc0>)
 80022c2:	f010 fa07 	bl	80126d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80022c6:	782b      	ldrb	r3, [r5, #0]
 80022c8:	f3bf 8f5b 	dmb	ish
 80022cc:	07db      	lsls	r3, r3, #31
 80022ce:	d435      	bmi.n	800233c <touchgfx_init+0xa8>
 80022d0:	4628      	mov	r0, r5
 80022d2:	f018 fdcf 	bl	801ae74 <__cxa_guard_acquire>
 80022d6:	b388      	cbz	r0, 800233c <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80022d8:	4c1f      	ldr	r4, [pc, #124]	; (8002358 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <touchgfx_init+0xc8>)
 80022dc:	f504 66e4 	add.w	r6, r4, #1824	; 0x720
 80022e0:	f104 0014 	add.w	r0, r4, #20
 80022e4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80022e8:	f504 67e1 	add.w	r7, r4, #1800	; 0x708
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	6060      	str	r0, [r4, #4]
 80022f0:	f8c4 8008 	str.w	r8, [r4, #8]
 80022f4:	60e7      	str	r7, [r4, #12]
 80022f6:	6126      	str	r6, [r4, #16]
 80022f8:	f009 f842 	bl	800b380 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <touchgfx_init+0xcc>)
 80022fe:	4640      	mov	r0, r8
 8002300:	6163      	str	r3, [r4, #20]
 8002302:	f009 f83d 	bl	800b380 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <touchgfx_init+0xd0>)
 8002308:	4638      	mov	r0, r7
 800230a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800230c:	f009 f838 	bl	800b380 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <touchgfx_init+0xd4>)
 8002312:	f204 701c 	addw	r0, r4, #1820	; 0x71c
 8002316:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
 800231a:	f001 fb61 	bl	80039e0 <_ZN5ModelC1Ev>
 800231e:	4622      	mov	r2, r4
 8002320:	f204 711c 	addw	r1, r4, #1820	; 0x71c
 8002324:	4630      	mov	r0, r6
 8002326:	f001 fb51 	bl	80039cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800232a:	4630      	mov	r0, r6
 800232c:	f000 fa60 	bl	80027f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002330:	4628      	mov	r0, r5
 8002332:	f018 fdab 	bl	801ae8c <__cxa_guard_release>
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <touchgfx_init+0xd8>)
 8002338:	f018 fece 	bl	801b0d8 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <touchgfx_init+0xdc>)
}
 800233e:	b002      	add	sp, #8
 8002340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002344:	f7ff bc10 	b.w	8001b68 <_ZN11TouchGFXHAL10initializeEv>
 8002348:	24006c18 	.word	0x24006c18
 800234c:	2400168c 	.word	0x2400168c
 8002350:	24000164 	.word	0x24000164
 8002354:	2400001c 	.word	0x2400001c
 8002358:	24000168 	.word	0x24000168
 800235c:	0801c82c 	.word	0x0801c82c
 8002360:	0801c790 	.word	0x0801c790
 8002364:	0801c7c4 	.word	0x0801c7c4
 8002368:	0801c7f8 	.word	0x0801c7f8
 800236c:	0800226d 	.word	0x0800226d
 8002370:	24001604 	.word	0x24001604

08002374 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002374:	4801      	ldr	r0, [pc, #4]	; (800237c <touchgfx_taskEntry+0x8>)
 8002376:	f7ff bc59 	b.w	8001c2c <_ZN11TouchGFXHAL9taskEntryEv>
 800237a:	bf00      	nop
 800237c:	24001604 	.word	0x24001604

08002380 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002380:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002382:	4e27      	ldr	r6, [pc, #156]	; (8002420 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8002386:	4c28      	ldr	r4, [pc, #160]	; (8002428 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002388:	4630      	mov	r0, r6
static LCD24bpp display;
 800238a:	4d28      	ldr	r5, [pc, #160]	; (800242c <_GLOBAL__sub_I_touchgfx_init+0xac>)
 800238c:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800238e:	f7ff fed3 	bl	8002138 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8002392:	4628      	mov	r0, r5
 8002394:	f012 fcb0 	bl	8014cf8 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 800239a:	2200      	movs	r2, #0
 800239c:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80023a0:	4824      	ldr	r0, [pc, #144]	; (8002434 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80023a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80023aa:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 80023ac:	661a      	str	r2, [r3, #96]	; 0x60
 80023ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80023b2:	671a      	str	r2, [r3, #112]	; 0x70
 80023b4:	60dc      	str	r4, [r3, #12]
 80023b6:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 80023ba:	491f      	ldr	r1, [pc, #124]	; (8002438 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80023bc:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 80023c0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80023c4:	6759      	str	r1, [r3, #116]	; 0x74
 80023c6:	2101      	movs	r1, #1
 80023c8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 80023cc:	491b      	ldr	r1, [pc, #108]	; (800243c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80023ce:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80023d0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80023d4:	8001      	strh	r1, [r0, #0]
 80023d6:	481a      	ldr	r0, [pc, #104]	; (8002440 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 80023d8:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 80023dc:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80023e0:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80023e4:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 80023e8:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80023ec:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 80023f0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 80023f4:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80023f8:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80023fa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80023fe:	4811      	ldr	r0, [pc, #68]	; (8002444 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 8002400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002404:	8001      	strh	r1, [r0, #0]
 8002406:	4810      	ldr	r0, [pc, #64]	; (8002448 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800240c:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 800240e:	490f      	ldr	r1, [pc, #60]	; (800244c <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8002410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002414:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002416:	490e      	ldr	r1, [pc, #56]	; (8002450 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8002418:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 800241a:	6019      	str	r1, [r3, #0]
 800241c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	240009e4 	.word	0x240009e4
 8002424:	0801c27c 	.word	0x0801c27c
 8002428:	240009e0 	.word	0x240009e0
 800242c:	24001690 	.word	0x24001690
 8002430:	24001604 	.word	0x24001604
 8002434:	24006bb0 	.word	0x24006bb0
 8002438:	01000001 	.word	0x01000001
 800243c:	24006bbc 	.word	0x24006bbc
 8002440:	24006bb6 	.word	0x24006bb6
 8002444:	24006bb2 	.word	0x24006bb2
 8002448:	24006bb8 	.word	0x24006bb8
 800244c:	24006bb4 	.word	0x24006bb4
 8002450:	0801c408 	.word	0x0801c408
 8002454:	0801c254 	.word	0x0801c254

08002458 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800245a:	f7ff be29 	b.w	80020b0 <_ZN8STM32DMAD1Ev>
 800245e:	bf00      	nop
 8002460:	240009e4 	.word	0x240009e4

08002464 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002466:	2290      	movs	r2, #144	; 0x90
 8002468:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800246c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002478:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800247a:	490a      	ldr	r1, [pc, #40]	; (80024a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800247c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800247e:	480a      	ldr	r0, [pc, #40]	; (80024a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002484:	3b01      	subs	r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800248a:	6911      	ldr	r1, [r2, #16]
 800248c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002490:	3901      	subs	r1, #1
 8002492:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002496:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800249e:	4770      	bx	lr
 80024a0:	50001000 	.word	0x50001000
 80024a4:	240016ea 	.word	0x240016ea
 80024a8:	240016e8 	.word	0x240016e8

080024ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80024ac:	4b01      	ldr	r3, [pc, #4]	; (80024b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80024ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	50001084 	.word	0x50001084

080024b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80024b8:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80024ba:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80024bc:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80024be:	f843 2c60 	str.w	r2, [r3, #-96]
}
 80024c2:	4770      	bx	lr
 80024c4:	50001084 	.word	0x50001084

080024c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	4604      	mov	r4, r0
    HAL::initialize();
 80024cc:	f009 fa79 	bl	800b9c2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80024d4:	f00d f820 	bl	800f518 <_ZN8touchgfx11Application11getInstanceEv>
 80024d8:	4601      	mov	r1, r0
 80024da:	4620      	mov	r0, r4
 80024dc:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	4620      	mov	r0, r4
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80024e4:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 80024e8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80024ec:	2300      	movs	r3, #0
 80024ee:	46ac      	mov	ip, r5
}
 80024f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 80024f4:	4760      	bx	ip
 80024f6:	bf00      	nop
 80024f8:	70060000 	.word	0x70060000

080024fc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80024fc:	f009 ba48 	b.w	800b990 <_ZN8touchgfx3HAL10beginFrameEv>

08002500 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8002500:	f009 ba52 	b.w	800b9a8 <_ZN8touchgfx3HAL8endFrameEv>

08002504 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002504:	f009 bb6b 	b.w	800bbde <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002508:	4a10      	ldr	r2, [pc, #64]	; (800254c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x44>)
 800250a:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002512:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002516:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800251a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800251e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002522:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002526:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002528:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800252c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800252e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002532:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002534:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002538:	d2f9      	bcs.n	800252e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 800253a:	3b20      	subs	r3, #32
 800253c:	f113 0f20 	cmn.w	r3, #32
 8002540:	d1f2      	bne.n	8002528 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x20>
 8002542:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002546:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x10>)
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	03db      	lsls	r3, r3, #15
 8002556:	d501      	bpl.n	800255c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xc>
 8002558:	f7ff bfd6 	b.w	8002508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	03db      	lsls	r3, r3, #15
 800256a:	d501      	bpl.n	8002570 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 800256c:	f7ff bfcc 	b.w	8002508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002578:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 800257a:	f009 f9d3 	bl	800b924 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	03db      	lsls	r3, r3, #15
 8002584:	d503      	bpl.n	800258e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800258a:	f7ff bfbd 	b.w	8002508 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
 800258e:	bd08      	pop	{r3, pc}
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002596:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800259a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800259e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80025ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025b2:	f3bf 8f6f 	isb	sy
}
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100

080025bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80025be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025c8:	609a      	str	r2, [r3, #8]
}
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_LTDC_LineEventCallback+0x50>)
 80025d2:	4a14      	ldr	r2, [pc, #80]	; (8002624 <HAL_LTDC_LineEventCallback+0x54>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	8811      	ldrh	r1, [r2, #0]
 80025d8:	428b      	cmp	r3, r1
    {
 80025da:	b510      	push	{r4, lr}
 80025dc:	4c12      	ldr	r4, [pc, #72]	; (8002628 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 80025de:	d113      	bne.n	8002608 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_LTDC_LineEventCallback+0x5c>)
 80025e2:	8819      	ldrh	r1, [r3, #0]
 80025e4:	f003 ff52 	bl	800648c <HAL_LTDC_ProgramLineEvent>
        return instance;
 80025e8:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80025ea:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80025ee:	3301      	adds	r3, #1
 80025f0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80025f4:	f7ff fc00 	bl	8001df8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	f009 ffd5 	bl	800c5a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80025fe:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002604:	f7ff ba36 	b.w	8001a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002608:	f003 ff40 	bl	800648c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fa49 	bl	8001aa4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8002612:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002614:	6803      	ldr	r3, [r0, #0]
    }
 8002616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4718      	bx	r3
 800261e:	bf00      	nop
 8002620:	50001000 	.word	0x50001000
 8002624:	240016ea 	.word	0x240016ea
 8002628:	24006bbc 	.word	0x24006bbc
 800262c:	240016e8 	.word	0x240016e8

08002630 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002630:	4770      	bx	lr

08002632 <_ZN23ApplicationFontProviderD0Ev>:
 8002632:	b510      	push	{r4, lr}
 8002634:	4604      	mov	r4, r0
 8002636:	2104      	movs	r1, #4
 8002638:	f018 fc1a 	bl	801ae70 <_ZdlPvj>
 800263c:	4620      	mov	r0, r4
 800263e:	bd10      	pop	{r4, pc}

08002640 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002640:	b508      	push	{r3, lr}
 8002642:	2903      	cmp	r1, #3
 8002644:	d813      	bhi.n	800266e <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002646:	e8df f001 	tbb	[pc, r1]
 800264a:	0602      	.short	0x0602
 800264c:	0e0a      	.short	0x0e0a
    switch (typography)
    {
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800264e:	f001 f993 	bl	8003978 <_ZN17TypedTextDatabase8getFontsEv>
 8002652:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002654:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002656:	f001 f98f 	bl	8003978 <_ZN17TypedTextDatabase8getFontsEv>
 800265a:	6840      	ldr	r0, [r0, #4]
 800265c:	e7fa      	b.n	8002654 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800265e:	f001 f98b 	bl	8003978 <_ZN17TypedTextDatabase8getFontsEv>
 8002662:	6880      	ldr	r0, [r0, #8]
 8002664:	e7f6      	b.n	8002654 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002666:	f001 f987 	bl	8003978 <_ZN17TypedTextDatabase8getFontsEv>
 800266a:	68c0      	ldr	r0, [r0, #12]
 800266c:	e7f2      	b.n	8002654 <_ZN23ApplicationFontProvider7getFontEt+0x14>
{
 800266e:	2000      	movs	r0, #0
 8002670:	e7f0      	b.n	8002654 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002674 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002674:	4800      	ldr	r0, [pc, #0]	; (8002678 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002676:	4770      	bx	lr
 8002678:	0801c84c 	.word	0x0801c84c

0800267c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800267c:	200b      	movs	r0, #11
 800267e:	4770      	bx	lr

08002680 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002680:	b513      	push	{r0, r1, r4, lr}
 8002682:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002684:	b151      	cbz	r1, 800269c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002686:	6803      	ldr	r3, [r0, #0]
 8002688:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800268a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800268c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002690:	689c      	ldr	r4, [r3, #8]
 8002692:	f10d 0303 	add.w	r3, sp, #3
 8002696:	47a0      	blx	r4
        return glyph;
    }
 8002698:	b002      	add	sp, #8
 800269a:	bd10      	pop	{r4, pc}
            return 0;
 800269c:	4608      	mov	r0, r1
 800269e:	e7fb      	b.n	8002698 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080026a0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80026a0:	8940      	ldrh	r0, [r0, #10]
 80026a2:	4770      	bx	lr

080026a4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80026a4:	8980      	ldrh	r0, [r0, #12]
 80026a6:	4770      	bx	lr

080026a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80026a8:	8880      	ldrh	r0, [r0, #4]
 80026aa:	4770      	bx	lr

080026ac <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80026ac:	7983      	ldrb	r3, [r0, #6]
 80026ae:	8880      	ldrh	r0, [r0, #4]
 80026b0:	4418      	add	r0, r3
    }
 80026b2:	b280      	uxth	r0, r0
 80026b4:	4770      	bx	lr

080026b6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80026b6:	79c0      	ldrb	r0, [r0, #7]
    }
 80026b8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80026bc:	4770      	bx	lr

080026be <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80026be:	79c0      	ldrb	r0, [r0, #7]
    }
 80026c0:	09c0      	lsrs	r0, r0, #7
 80026c2:	4770      	bx	lr

080026c4 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80026c4:	4770      	bx	lr

080026c6 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80026c6:	b510      	push	{r4, lr}
 80026c8:	4604      	mov	r4, r0
    }
 80026ca:	2108      	movs	r1, #8
 80026cc:	f018 fbd0 	bl	801ae70 <_ZdlPvj>
 80026d0:	4620      	mov	r0, r4
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 80026d4:	4770      	bx	lr

080026d6 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80026d6:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80026da:	6808      	ldr	r0, [r1, #0]
 80026dc:	6849      	ldr	r1, [r1, #4]
 80026de:	c303      	stmia	r3!, {r0, r1}
    }
 80026e0:	4770      	bx	lr

080026e2 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80026e2:	4770      	bx	lr

080026e4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80026e4:	4770      	bx	lr

080026e6 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80026e6:	6041      	str	r1, [r0, #4]
    }
 80026e8:	4770      	bx	lr

080026ea <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80026ea:	4770      	bx	lr

080026ec <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80026ec:	2301      	movs	r3, #1
 80026ee:	7203      	strb	r3, [r0, #8]
    }
 80026f0:	4770      	bx	lr

080026f2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80026f2:	4770      	bx	lr

080026f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80026f4:	4770      	bx	lr

080026f6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80026f6:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 80026f8:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80026fa:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 80026fc:	68c2      	ldr	r2, [r0, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	1054      	asrs	r4, r2, #1
 8002702:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002706:	07d2      	lsls	r2, r2, #31
 8002708:	bf48      	it	mi
 800270a:	590a      	ldrmi	r2, [r1, r4]
    }
 800270c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8002710:	bf48      	it	mi
 8002712:	58d3      	ldrmi	r3, [r2, r3]
 8002714:	4718      	bx	r3

08002716 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8002716:	6843      	ldr	r3, [r0, #4]
 8002718:	b12b      	cbz	r3, 8002726 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800271a:	6883      	ldr	r3, [r0, #8]
 800271c:	b92b      	cbnz	r3, 800272a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800271e:	68c0      	ldr	r0, [r0, #12]
 8002720:	f000 0001 	and.w	r0, r0, #1
 8002724:	4770      	bx	lr
 8002726:	4618      	mov	r0, r3
 8002728:	4770      	bx	lr
 800272a:	2001      	movs	r0, #1
    }
 800272c:	4770      	bx	lr

0800272e <_ZN8touchgfx12NoTransitionD0Ev>:
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
 8002732:	210c      	movs	r1, #12
 8002734:	f018 fb9c 	bl	801ae70 <_ZdlPvj>
 8002738:	4620      	mov	r0, r4
 800273a:	bd10      	pop	{r4, pc}

0800273c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800273c:	b510      	push	{r4, lr}
 800273e:	4604      	mov	r4, r0
 8002740:	2110      	movs	r1, #16
 8002742:	f018 fb95 	bl	801ae70 <_ZdlPvj>
 8002746:	4620      	mov	r0, r4
 8002748:	bd10      	pop	{r4, pc}

0800274a <_ZN23FrontendApplicationBaseD0Ev>:
 800274a:	b510      	push	{r4, lr}
 800274c:	4604      	mov	r4, r0
 800274e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002752:	f018 fb8d 	bl	801ae70 <_ZdlPvj>
 8002756:	4620      	mov	r0, r4
 8002758:	bd10      	pop	{r4, pc}

0800275a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800275a:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 800275c:	f00c fedc 	bl	800f518 <_ZN8touchgfx11Application11getInstanceEv>
 8002760:	6803      	ldr	r3, [r0, #0]
    }
 8002762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4718      	bx	r3

0800276a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800276a:	b510      	push	{r4, lr}
 800276c:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800276e:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002772:	b158      	cbz	r0, 800278c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002774:	6803      	ldr	r3, [r0, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4798      	blx	r3
 800277a:	b138      	cbz	r0, 800278c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800277c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002780:	6803      	ldr	r3, [r0, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800278c:	bd10      	pop	{r4, pc}
	...

08002790 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	4604      	mov	r4, r0
 8002794:	4617      	mov	r7, r2
 8002796:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002798:	f00c fee0 	bl	800f55c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800279c:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 800279e:	2500      	movs	r5, #0
        instance = this;
 80027a0:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80027a2:	4629      	mov	r1, r5
      model(m)
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80027a6:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 80027aa:	4e0f      	ldr	r6, [pc, #60]	; (80027e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80027b2:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 80027b6:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80027ba:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80027bc:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80027c4:	4628      	mov	r0, r5
 80027c6:	f001 f88b 	bl	80038e0 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80027ca:	6833      	ldr	r3, [r6, #0]
 80027cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80027d0:	b10a      	cbz	r2, 80027d6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80027d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80027d4:	b900      	cbnz	r0, 80027d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80027d6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80027d8:	f013 fb7b 	bl	8015ed2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80027dc:	4620      	mov	r0, r4
 80027de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027e0:	24006c08 	.word	0x24006c08
 80027e4:	0801cc78 	.word	0x0801cc78
 80027e8:	24006bbc 	.word	0x24006bbc
 80027ec:	0801cc60 	.word	0x0801cc60

080027f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80027f2:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80027f6:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002800:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002804:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	08002951 	.word	0x08002951

08002810 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002814:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002816:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002818:	4699      	mov	r9, r3
 800281a:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800281c:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800281e:	4614      	mov	r4, r2
 8002820:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4798      	blx	r3
 8002828:	f240 63d3 	movw	r3, #1747	; 0x6d3
 800282c:	4298      	cmp	r0, r3
 800282e:	d805      	bhi.n	800283c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002832:	21a3      	movs	r1, #163	; 0xa3
 8002834:	4a41      	ldr	r2, [pc, #260]	; (800293c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002836:	4842      	ldr	r0, [pc, #264]	; (8002940 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002838:	f018 fc30 	bl	801b09c <__assert_func>
 800283c:	6860      	ldr	r0, [r4, #4]
 800283e:	6803      	ldr	r3, [r0, #0]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4798      	blx	r3
 8002844:	280f      	cmp	r0, #15
 8002846:	d803      	bhi.n	8002850 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
 8002848:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 800284a:	21a4      	movs	r1, #164	; 0xa4
 800284c:	4a3b      	ldr	r2, [pc, #236]	; (800293c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 800284e:	e7f2      	b.n	8002836 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002850:	68e0      	ldr	r0, [r4, #12]
 8002852:	6803      	ldr	r3, [r0, #0]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4798      	blx	r3
 8002858:	280b      	cmp	r0, #11
 800285a:	d803      	bhi.n	8002864 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 800285e:	21a5      	movs	r1, #165	; 0xa5
 8002860:	4a36      	ldr	r2, [pc, #216]	; (800293c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002862:	e7e8      	b.n	8002836 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
 8002864:	f00c fe58 	bl	800f518 <_ZN8touchgfx11Application11getInstanceEv>
 8002868:	f00c fe5c 	bl	800f524 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800286c:	f8d9 0000 	ldr.w	r0, [r9]
 8002870:	b110      	cbz	r0, 8002878 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
 8002872:	6803      	ldr	r3, [r0, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4798      	blx	r3
    if (*currentTrans)
 8002878:	f8d9 0000 	ldr.w	r0, [r9]
 800287c:	b110      	cbz	r0, 8002884 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
 800287e:	6803      	ldr	r3, [r0, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4798      	blx	r3
    if (*currentScreen)
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	b110      	cbz	r0, 800288e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
 8002888:	6803      	ldr	r3, [r0, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4798      	blx	r3
    if (*currentPresenter)
 800288e:	f8d8 0000 	ldr.w	r0, [r8]
 8002892:	b110      	cbz	r0, 800289a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
 8002894:	6803      	ldr	r3, [r0, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4798      	blx	r3
    if (*currentScreen)
 800289a:	6838      	ldr	r0, [r7, #0]
 800289c:	b110      	cbz	r0, 80028a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
 800289e:	6803      	ldr	r3, [r0, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4798      	blx	r3
    if (*currentPresenter)
 80028a4:	f8d8 0000 	ldr.w	r0, [r8]
 80028a8:	b110      	cbz	r0, 80028b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
 80028aa:	6803      	ldr	r3, [r0, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80028b0:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80028b2:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80028b4:	f04f 0b00 	mov.w	fp, #0
 80028b8:	6803      	ldr	r3, [r0, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	4798      	blx	r3
 80028be:	4b23      	ldr	r3, [pc, #140]	; (800294c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80028c0:	4605      	mov	r5, r0
 80028c2:	f8c0 b004 	str.w	fp, [r0, #4]
 80028c6:	6003      	str	r3, [r0, #0]
 80028c8:	4659      	mov	r1, fp
 80028ca:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80028ce:	68a0      	ldr	r0, [r4, #8]
 80028d0:	6803      	ldr	r3, [r0, #0]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	4798      	blx	r3
 80028d6:	4606      	mov	r6, r0
 80028d8:	f001 f964 	bl	8003ba4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80028dc:	6860      	ldr	r0, [r4, #4]
 80028de:	4659      	mov	r1, fp
 80028e0:	6803      	ldr	r3, [r0, #0]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	4798      	blx	r3
 80028e6:	4604      	mov	r4, r0
 80028e8:	4631      	mov	r1, r6
 80028ea:	f001 f88b 	bl	8003a04 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80028ee:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 80028f2:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 80028f6:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80028f8:	b1e4      	cbz	r4, 8002934 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
 80028fa:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80028fc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002900:	4630      	mov	r0, r6
 8002902:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002904:	f8c4 a008 	str.w	sl, [r4, #8]
 8002908:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 800290a:	63f4      	str	r4, [r6, #60]	; 0x3c
 800290c:	4798      	blx	r3
    newPresenter->activate();
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	4620      	mov	r0, r4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002916:	4629      	mov	r1, r5
 8002918:	4630      	mov	r0, r6
 800291a:	f00e f9eb 	bl	8010cf4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800291e:	682b      	ldr	r3, [r5, #0]
 8002920:	4628      	mov	r0, r5
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4798      	blx	r3
    newTransition->invalidate();
 8002926:	682b      	ldr	r3, [r5, #0]
 8002928:	4628      	mov	r0, r5
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 800292e:	4620      	mov	r0, r4
 8002930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8002934:	4623      	mov	r3, r4
 8002936:	e7e1      	b.n	80028fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
 8002938:	0801c938 	.word	0x0801c938
 800293c:	0801c9c6 	.word	0x0801c9c6
 8002940:	0801caca 	.word	0x0801caca
 8002944:	0801cb11 	.word	0x0801cb11
 8002948:	0801cbb4 	.word	0x0801cbb4
 800294c:	0801ccbc 	.word	0x0801ccbc

08002950 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002950:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002954:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002956:	f500 719c 	add.w	r1, r0, #312	; 0x138
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
 800295e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002962:	4804      	ldr	r0, [pc, #16]	; (8002974 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
 8002964:	f7ff ff54 	bl	8002810 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002968:	b003      	add	sp, #12
 800296a:	f85d fb04 	ldr.w	pc, [sp], #4
 800296e:	bf00      	nop
 8002970:	24006bfc 	.word	0x24006bfc
 8002974:	24006bf8 	.word	0x24006bf8

08002978 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002978:	6a00      	ldr	r0, [r0, #32]
 800297a:	4770      	bx	lr

0800297c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800297c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800297e:	4770      	bx	lr

08002980 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002980:	4770      	bx	lr

08002982 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002982:	888b      	ldrh	r3, [r1, #4]
 8002984:	6980      	ldr	r0, [r0, #24]
 8002986:	0adb      	lsrs	r3, r3, #11
 8002988:	680a      	ldr	r2, [r1, #0]
 800298a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800298e:	4410      	add	r0, r2
 8002990:	4770      	bx	lr

08002992 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002992:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002994:	b1c2      	cbz	r2, 80029c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002996:	7b13      	ldrb	r3, [r2, #12]
 8002998:	b1b3      	cbz	r3, 80029c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800299a:	7b54      	ldrb	r4, [r2, #13]
 800299c:	7ad2      	ldrb	r2, [r2, #11]
 800299e:	0224      	lsls	r4, r4, #8
 80029a0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80029a4:	4314      	orrs	r4, r2
 80029a6:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80029a8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80029aa:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80029ae:	8813      	ldrh	r3, [r2, #0]
 80029b0:	428b      	cmp	r3, r1
 80029b2:	d102      	bne.n	80029ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80029b4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80029b8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80029ba:	d805      	bhi.n	80029c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80029bc:	3801      	subs	r0, #1
 80029be:	3204      	adds	r2, #4
 80029c0:	b280      	uxth	r0, r0
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d1f3      	bne.n	80029ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80029c6:	e7f7      	b.n	80029b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80029c8:	2000      	movs	r0, #0
 80029ca:	e7f5      	b.n	80029b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080029cc <_ZN8touchgfx13GeneratedFontD0Ev>:
 80029cc:	b510      	push	{r4, lr}
 80029ce:	4604      	mov	r4, r0
 80029d0:	2128      	movs	r1, #40	; 0x28
 80029d2:	f018 fa4d 	bl	801ae70 <_ZdlPvj>
 80029d6:	4620      	mov	r0, r4
 80029d8:	bd10      	pop	{r4, pc}
	...

080029dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80029dc:	b530      	push	{r4, r5, lr}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80029e2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80029e6:	9506      	str	r5, [sp, #24]
 80029e8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80029ec:	9505      	str	r5, [sp, #20]
 80029ee:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80029f2:	9504      	str	r5, [sp, #16]
 80029f4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80029f8:	9503      	str	r5, [sp, #12]
 80029fa:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80029fe:	9502      	str	r5, [sp, #8]
 8002a00:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8002a04:	9501      	str	r5, [sp, #4]
 8002a06:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8002a0a:	9500      	str	r5, [sp, #0]
 8002a0c:	f00d fdb0 	bl	8010570 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8002a12:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a18:	61a3      	str	r3, [r4, #24]
 8002a1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002a1c:	61e3      	str	r3, [r4, #28]
 8002a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002a20:	6223      	str	r3, [r4, #32]
 8002a22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002a24:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002a26:	b009      	add	sp, #36	; 0x24
 8002a28:	bd30      	pop	{r4, r5, pc}
 8002a2a:	bf00      	nop
 8002a2c:	0801cce0 	.word	0x0801cce0

08002a30 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002a30:	2000      	movs	r0, #0
 8002a32:	4770      	bx	lr

08002a34 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002a34:	8081      	strh	r1, [r0, #4]
    }
 8002a36:	4770      	bx	lr

08002a38 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002a38:	80c1      	strh	r1, [r0, #6]
    }
 8002a3a:	4770      	bx	lr

08002a3c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002a3c:	8101      	strh	r1, [r0, #8]
    }
 8002a3e:	4770      	bx	lr

08002a40 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002a40:	8141      	strh	r1, [r0, #10]
    }
 8002a42:	4770      	bx	lr

08002a44 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002a44:	4770      	bx	lr

08002a46 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 8002a46:	4770      	bx	lr

08002a48 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8002a48:	4770      	bx	lr

08002a4a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8002a4a:	4770      	bx	lr

08002a4c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002a4c:	4770      	bx	lr

08002a4e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002a4e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002a50:	88c4      	ldrh	r4, [r0, #6]
 8002a52:	6803      	ldr	r3, [r0, #0]
 8002a54:	1b12      	subs	r2, r2, r4
 8002a56:	8884      	ldrh	r4, [r0, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	1b09      	subs	r1, r1, r4
 8002a5c:	b212      	sxth	r2, r2
    }
 8002a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002a62:	b209      	sxth	r1, r1
 8002a64:	4718      	bx	r3

08002a66 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002a76:	6010      	str	r0, [r2, #0]
    }
 8002a78:	4770      	bx	lr

08002a7a <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002a7a:	4770      	bx	lr

08002a7c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002a7c:	4770      	bx	lr

08002a7e <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002a7e:	4770      	bx	lr

08002a80 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002a80:	4770      	bx	lr

08002a82 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8002a82:	4770      	bx	lr

08002a84 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8002a84:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002a88:	b11a      	cbz	r2, 8002a92 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002a8a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002a8e:	b102      	cbz	r2, 8002a92 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002a90:	6018      	str	r0, [r3, #0]
        }
    }
 8002a92:	4770      	bx	lr

08002a94 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8002a94:	4770      	bx	lr

08002a96 <_ZN15Screen1ViewBase14button9ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button9Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a96:	4770      	bx	lr

08002a98 <_ZN15Screen1ViewBase14button8ClickedEv>:

    virtual void button8Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a98:	4770      	bx	lr

08002a9a <_ZN15Screen1ViewBase19buttonSwitchClickedEv>:

    virtual void buttonSwitchClicked()
    {
        // Override and implement this function in Screen1
    }
 8002a9a:	4770      	bx	lr

08002a9c <_ZN15Screen1ViewBase17buttonSendClickedEv>:

    virtual void buttonSendClicked()
    {
        // Override and implement this function in Screen1
    }
 8002a9c:	4770      	bx	lr

08002a9e <_ZN15Screen1ViewBase14button0ClickedEv>:

    virtual void button0Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN15Screen1ViewBase18buttonClearClickedEv>:

    virtual void buttonClearClicked()
    {
        // Override and implement this function in Screen1
    }
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN15Screen1ViewBase14button3ClickedEv>:

    virtual void button3Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002aa2:	4770      	bx	lr

08002aa4 <_ZN15Screen1ViewBase14button2ClickedEv>:

    virtual void button2Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002aa4:	4770      	bx	lr

08002aa6 <_ZN15Screen1ViewBase14button1ClickedEv>:

    virtual void button1Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002aa6:	4770      	bx	lr

08002aa8 <_ZN15Screen1ViewBase14button6ClickedEv>:

    virtual void button6Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002aa8:	4770      	bx	lr

08002aaa <_ZN15Screen1ViewBase14button5ClickedEv>:

    virtual void button5Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002aaa:	4770      	bx	lr

08002aac <_ZN15Screen1ViewBase14button4ClickedEv>:

    virtual void button4Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002aac:	4770      	bx	lr

08002aae <_ZN15Screen1ViewBase14button7ClickedEv>:

    virtual void button7Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002aae:	4770      	bx	lr

08002ab0 <_ZN15Screen1ViewBase16buttonDotClickedEv>:

    virtual void buttonDotClicked()
    {
        // Override and implement this function in Screen1
    }
 8002ab0:	4770      	bx	lr

08002ab2 <_ZN15Screen1ViewBase17buttonFreqToggledEv>:

    virtual void buttonFreqToggled()
    {
        // Override and implement this function in Screen1
    }
 8002ab2:	4770      	bx	lr

08002ab4 <_ZN15Screen1ViewBase15buttonMIToggledEv>:

    virtual void buttonMIToggled()
    {
        // Override and implement this function in Screen1
    }
 8002ab4:	4770      	bx	lr

08002ab6 <_ZN15Screen1ViewBase18buttonPowerClickedEv>:

    virtual void buttonPowerClicked()
    {
        // Override and implement this function in Screen1
    }
 8002ab6:	4770      	bx	lr

08002ab8 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8002ab8:	4770      	bx	lr

08002aba <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002aba:	4770      	bx	lr

08002abc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002abc:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002abe:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002ac0:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8002ac2:	68c2      	ldr	r2, [r0, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	1055      	asrs	r5, r2, #1
 8002ac8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002acc:	07d2      	lsls	r2, r2, #31
 8002ace:	bf48      	it	mi
 8002ad0:	5962      	ldrmi	r2, [r4, r5]
    }
 8002ad2:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002ad4:	bf48      	it	mi
 8002ad6:	58d3      	ldrmi	r3, [r2, r3]
 8002ad8:	4718      	bx	r3

08002ada <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8002ada:	6843      	ldr	r3, [r0, #4]
 8002adc:	b12b      	cbz	r3, 8002aea <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8002ade:	6883      	ldr	r3, [r0, #8]
 8002ae0:	b92b      	cbnz	r3, 8002aee <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8002ae2:	68c0      	ldr	r0, [r0, #12]
 8002ae4:	f000 0001 	and.w	r0, r0, #1
 8002ae8:	4770      	bx	lr
 8002aea:	4618      	mov	r0, r3
 8002aec:	4770      	bx	lr
 8002aee:	2001      	movs	r0, #1
    }
 8002af0:	4770      	bx	lr

08002af2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002af2:	b510      	push	{r4, lr}
 8002af4:	4604      	mov	r4, r0
 8002af6:	2110      	movs	r1, #16
 8002af8:	f018 f9ba 	bl	801ae70 <_ZdlPvj>
 8002afc:	4620      	mov	r0, r4
 8002afe:	bd10      	pop	{r4, pc}

08002b00 <_ZN15Screen1ViewBaseD0Ev>:
    virtual ~Screen1ViewBase() {}
 8002b00:	b510      	push	{r4, lr}
 8002b02:	4604      	mov	r4, r0
 8002b04:	f240 61d4 	movw	r1, #1748	; 0x6d4
 8002b08:	f018 f9b2 	bl	801ae70 <_ZdlPvj>
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	bd10      	pop	{r4, pc}

08002b10 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button7)
 8002b10:	f100 0298 	add.w	r2, r0, #152	; 0x98
{
 8002b14:	4603      	mov	r3, r0
    if (&src == &button7)
 8002b16:	4291      	cmp	r1, r2
 8002b18:	d102      	bne.n	8002b20 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    {
        //Interaction14
        //When button7 clicked call virtual function
        //Call button7Clicked
        button7Clicked();
 8002b1a:	6803      	ldr	r3, [r0, #0]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    else if (&src == &button8)
    {
        //Interaction2
        //When button8 clicked call virtual function
        //Call button8Clicked
        button8Clicked();
 8002b1e:	4718      	bx	r3
    else if (&src == &button8)
 8002b20:	f100 02e0 	add.w	r2, r0, #224	; 0xe0
 8002b24:	4291      	cmp	r1, r2
 8002b26:	d102      	bne.n	8002b2e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1e>
        button8Clicked();
 8002b28:	6803      	ldr	r3, [r0, #0]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	e7f7      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button9)
 8002b2e:	f500 7294 	add.w	r2, r0, #296	; 0x128
 8002b32:	4291      	cmp	r1, r2
 8002b34:	d102      	bne.n	8002b3c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c>
    {
        //Interaction1
        //When button9 clicked call virtual function
        //Call button9Clicked
        button9Clicked();
 8002b36:	6803      	ldr	r3, [r0, #0]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	e7f0      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button4)
 8002b3c:	f500 72b8 	add.w	r2, r0, #368	; 0x170
 8002b40:	4291      	cmp	r1, r2
 8002b42:	d102      	bne.n	8002b4a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    {
        //Interaction13
        //When button4 clicked call virtual function
        //Call button4Clicked
        button4Clicked();
 8002b44:	6803      	ldr	r3, [r0, #0]
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	e7e9      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button5)
 8002b4a:	f500 72dc 	add.w	r2, r0, #440	; 0x1b8
 8002b4e:	4291      	cmp	r1, r2
 8002b50:	d102      	bne.n	8002b58 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x48>
    {
        //Interaction12
        //When button5 clicked call virtual function
        //Call button5Clicked
        button5Clicked();
 8002b52:	6803      	ldr	r3, [r0, #0]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	e7e2      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button6)
 8002b58:	f500 7200 	add.w	r2, r0, #512	; 0x200
 8002b5c:	4291      	cmp	r1, r2
 8002b5e:	d102      	bne.n	8002b66 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
    {
        //Interaction11
        //When button6 clicked call virtual function
        //Call button6Clicked
        button6Clicked();
 8002b60:	6803      	ldr	r3, [r0, #0]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	e7db      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button1)
 8002b66:	f500 7212 	add.w	r2, r0, #584	; 0x248
 8002b6a:	4291      	cmp	r1, r2
 8002b6c:	d102      	bne.n	8002b74 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x64>
    {
        //Interaction10
        //When button1 clicked call virtual function
        //Call button1Clicked
        button1Clicked();
 8002b6e:	6803      	ldr	r3, [r0, #0]
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	e7d4      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button2)
 8002b74:	f500 7224 	add.w	r2, r0, #656	; 0x290
 8002b78:	4291      	cmp	r1, r2
 8002b7a:	d102      	bne.n	8002b82 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x72>
    {
        //Interaction8
        //When button2 clicked call virtual function
        //Call button2Clicked
        button2Clicked();
 8002b7c:	6803      	ldr	r3, [r0, #0]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b80:	e7cd      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button3)
 8002b82:	f500 7236 	add.w	r2, r0, #728	; 0x2d8
 8002b86:	4291      	cmp	r1, r2
 8002b88:	d102      	bne.n	8002b90 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x80>
    {
        //Interaction7
        //When button3 clicked call virtual function
        //Call button3Clicked
        button3Clicked();
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	e7c6      	b.n	8002b1e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &buttonClear)
 8002b90:	f500 7248 	add.w	r2, r0, #800	; 0x320
 8002b94:	4291      	cmp	r1, r2
 8002b96:	d103      	bne.n	8002ba0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
    {
        //Interaction6
        //When buttonClear clicked call virtual function
        //Call buttonClearClicked
        buttonClearClicked();
 8002b98:	6802      	ldr	r2, [r0, #0]
 8002b9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    else if (&src == &buttonPower)
    {
        //buttonPowerClicked
        //When buttonPower clicked call virtual function
        //Call buttonPowerClicked
        buttonPowerClicked();
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	4710      	bx	r2
    else if (&src == &button0)
 8002ba0:	f500 725a 	add.w	r2, r0, #872	; 0x368
 8002ba4:	4291      	cmp	r1, r2
 8002ba6:	d102      	bne.n	8002bae <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
        button0Clicked();
 8002ba8:	6802      	ldr	r2, [r0, #0]
 8002baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bac:	e7f6      	b.n	8002b9c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonSend)
 8002bae:	f500 726c 	add.w	r2, r0, #944	; 0x3b0
 8002bb2:	4291      	cmp	r1, r2
 8002bb4:	d102      	bne.n	8002bbc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xac>
        buttonSendClicked();
 8002bb6:	6802      	ldr	r2, [r0, #0]
 8002bb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bba:	e7ef      	b.n	8002b9c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonSwitch)
 8002bbc:	f500 727e 	add.w	r2, r0, #1016	; 0x3f8
 8002bc0:	4291      	cmp	r1, r2
 8002bc2:	d102      	bne.n	8002bca <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xba>
        buttonSwitchClicked();
 8002bc4:	6802      	ldr	r2, [r0, #0]
 8002bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc8:	e7e8      	b.n	8002b9c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonDot)
 8002bca:	f200 5294 	addw	r2, r0, #1428	; 0x594
 8002bce:	4291      	cmp	r1, r2
 8002bd0:	d102      	bne.n	8002bd8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>
        buttonDotClicked();
 8002bd2:	6802      	ldr	r2, [r0, #0]
 8002bd4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002bd6:	e7e1      	b.n	8002b9c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &toggleButtonFreq)
 8002bd8:	f200 52dc 	addw	r2, r0, #1500	; 0x5dc
 8002bdc:	4291      	cmp	r1, r2
 8002bde:	d102      	bne.n	8002be6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
        buttonFreqToggled();
 8002be0:	6802      	ldr	r2, [r0, #0]
 8002be2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002be4:	e7da      	b.n	8002b9c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &toggleButtonMI)
 8002be6:	f200 6214 	addw	r2, r0, #1556	; 0x614
 8002bea:	4291      	cmp	r1, r2
 8002bec:	d102      	bne.n	8002bf4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>
        buttonMIToggled();
 8002bee:	6802      	ldr	r2, [r0, #0]
 8002bf0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bf2:	e7d3      	b.n	8002b9c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonPower)
 8002bf4:	f200 624c 	addw	r2, r0, #1612	; 0x64c
 8002bf8:	4291      	cmp	r1, r2
 8002bfa:	d102      	bne.n	8002c02 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf2>
        buttonPowerClicked();
 8002bfc:	6802      	ldr	r2, [r0, #0]
 8002bfe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002c00:	e7cc      	b.n	8002b9c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    }
}
 8002c02:	4770      	bx	lr

08002c04 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8002c06:	6002      	str	r2, [r0, #0]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002c0e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8002c12:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002c16:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1e:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	0801e520 	.word	0x0801e520

08002c28 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8002c28:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002c2a:	b570      	push	{r4, r5, r6, lr}
 8002c2c:	4604      	mov	r4, r0
        setX(x);
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 8002c30:	4615      	mov	r5, r2
        setX(x);
 8002c32:	4798      	blx	r3
        setY(y);
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	4620      	mov	r0, r4
 8002c38:	4629      	mov	r1, r5
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 8002c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002c40:	4718      	bx	r3

08002c42 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002c42:	b570      	push	{r4, r5, r6, lr}
 8002c44:	4604      	mov	r4, r0
 8002c46:	461d      	mov	r5, r3
 8002c48:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002c4c:	f7ff ffec 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	4629      	mov	r1, r5
 8002c54:	4620      	mov	r0, r4
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	4798      	blx	r3
        setHeight(height);
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	4631      	mov	r1, r6
 8002c5e:	4620      	mov	r0, r4
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 8002c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002c66:	4718      	bx	r3

08002c68 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8002c6c:	2226      	movs	r2, #38	; 0x26
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f018 faa0 	bl	801b1b4 <memset>
class Widget : public Drawable
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff ffc5 	bl	8002c04 <_ZN8touchgfx8DrawableC1Ev>
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8002c7c:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8002c7e:	6023      	str	r3, [r4, #0]
 8002c80:	23ff      	movs	r3, #255	; 0xff
 8002c82:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8002c86:	2300      	movs	r3, #0
 8002c88:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8002c8a:	bd10      	pop	{r4, pc}
 8002c8c:	0801df1c 	.word	0x0801df1c

08002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8002c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8002c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 8002c96:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
 8002c98:	4606      	mov	r6, r0
        if (typedText.hasValidId())
 8002c9a:	4299      	cmp	r1, r3
 8002c9c:	d033      	beq.n	8002d06 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b92b      	cbnz	r3, 8002cb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8002ca6:	21ae      	movs	r1, #174	; 0xae
 8002ca8:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8002caa:	481c      	ldr	r0, [pc, #112]	; (8002d1c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
 8002cac:	f018 f9f6 	bl	801b09c <__assert_func>
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
 8002cb2:	8812      	ldrh	r2, [r2, #0]
 8002cb4:	428a      	cmp	r2, r1
 8002cb6:	d803      	bhi.n	8002cc0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
 8002cba:	21af      	movs	r1, #175	; 0xaf
 8002cbc:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 8002cbe:	e7f4      	b.n	8002caa <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
 8002cc0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	f000 fe42 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	9001      	str	r0, [sp, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	4628      	mov	r0, r5
 8002cde:	4798      	blx	r3
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	9901      	ldr	r1, [sp, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4628      	mov	r0, r5
 8002cea:	4798      	blx	r3
 8002cec:	fb14 f400 	smulbb	r4, r4, r0
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	b2e4      	uxtb	r4, r4
 8002cf6:	9901      	ldr	r1, [sp, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	4798      	blx	r3
 8002cfc:	4404      	add	r4, r0
 8002cfe:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8002d02:	b002      	add	sp, #8
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8002d0c:	e7f9      	b.n	8002d02 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
 8002d0e:	bf00      	nop
 8002d10:	24006c0c 	.word	0x24006c0c
 8002d14:	0801cd30 	.word	0x0801cd30
 8002d18:	0801cd72 	.word	0x0801cd72
 8002d1c:	0801cda0 	.word	0x0801cda0
 8002d20:	24006c10 	.word	0x24006c10
 8002d24:	0801cde7 	.word	0x0801cde7
 8002d28:	24006c14 	.word	0x24006c14
 8002d2c:	24006c18 	.word	0x24006c18

08002d30 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8002d34:	2226      	movs	r2, #38	; 0x26
 8002d36:	2100      	movs	r1, #0
 8002d38:	f018 fa3c 	bl	801b1b4 <memset>
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff ff61 	bl	8002c04 <_ZN8touchgfx8DrawableC1Ev>
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_ZN8touchgfx8TextAreaC1Ev+0x30>)
 8002d44:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8002d48:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8002d4a:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <_ZN8touchgfx8TextAreaC1Ev+0x34>)
 8002d4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d54:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8002d56:	2300      	movs	r3, #0
 8002d58:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8002d5c:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8002d5e:	bd10      	pop	{r4, pc}
 8002d60:	0801de74 	.word	0x0801de74
 8002d64:	0801c930 	.word	0x0801c930

08002d68 <_ZN8touchgfx12ToggleButtonC1Ev>:
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002d6c:	2226      	movs	r2, #38	; 0x26
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f018 fa20 	bl	801b1b4 <memset>
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff ff45 	bl	8002c04 <_ZN8touchgfx8DrawableC1Ev>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <_ZN8touchgfx12ToggleButtonC1Ev+0x38>)
 8002d7e:	4620      	mov	r0, r4
 8002d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        touchable = touch;
 8002d86:	2301      	movs	r3, #1
 8002d88:	6022      	str	r2, [r4, #0]
 8002d8a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d92:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002d94:	8623      	strh	r3, [r4, #48]	; 0x30
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002d96:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8002d9a:	86a3      	strh	r3, [r4, #52]	; 0x34
 8002d9c:	bd10      	pop	{r4, pc}
 8002d9e:	bf00      	nop
 8002da0:	0801dd60 	.word	0x0801dd60

08002da4 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da8:	4604      	mov	r4, r0
        : presenter(0)
 8002daa:	2700      	movs	r7, #0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8002dac:	4dea      	ldr	r5, [pc, #936]	; (8003158 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
 8002dae:	f04f 0a06 	mov.w	sl, #6
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002db2:	f504 6bd1 	add.w	fp, r4, #1672	; 0x688
 8002db6:	f04f 0907 	mov.w	r9, #7
    button7.setAction(buttonCallback);
 8002dba:	f204 66c4 	addw	r6, r4, #1732	; 0x6c4
class TypedText
 8002dbe:	f04f 0805 	mov.w	r8, #5
Screen1ViewBase::Screen1ViewBase() :
 8002dc2:	ed2d 8b10 	vpush	{d8-d15}
 8002dc6:	b093      	sub	sp, #76	; 0x4c
 8002dc8:	f00d fde8 	bl	801099c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002dcc:	4622      	mov	r2, r4
 8002dce:	4be3      	ldr	r3, [pc, #908]	; (800315c <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
 8002dd0:	63e7      	str	r7, [r4, #60]	; 0x3c
 8002dd2:	f842 3b40 	str.w	r3, [r2], #64
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	ee08 2a10 	vmov	s16, r2
 8002ddc:	f7ff ff44 	bl	8002c68 <_ZN8touchgfx3BoxC1Ev>
 8002de0:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8002de4:	4618      	mov	r0, r3
 8002de6:	9308      	str	r3, [sp, #32]
 8002de8:	f7ff ff3e 	bl	8002c68 <_ZN8touchgfx3BoxC1Ev>
 8002dec:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8002df0:	4618      	mov	r0, r3
 8002df2:	ee08 3a90 	vmov	s17, r3
 8002df6:	f00a fe9b 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002dfa:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	ee09 3a10 	vmov	s18, r3
 8002e04:	f00a fe94 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e08:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	ee09 3a90 	vmov	s19, r3
 8002e12:	f00a fe8d 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e16:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	ee0a 3a10 	vmov	s20, r3
 8002e20:	f00a fe86 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e24:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8002e28:	4618      	mov	r0, r3
 8002e2a:	ee0a 3a90 	vmov	s21, r3
 8002e2e:	f00a fe7f 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e32:	f504 7300 	add.w	r3, r4, #512	; 0x200
 8002e36:	4618      	mov	r0, r3
 8002e38:	ee0b 3a10 	vmov	s22, r3
 8002e3c:	f00a fe78 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e40:	f504 7312 	add.w	r3, r4, #584	; 0x248
 8002e44:	4618      	mov	r0, r3
 8002e46:	ee0b 3a90 	vmov	s23, r3
 8002e4a:	f00a fe71 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e4e:	f504 7324 	add.w	r3, r4, #656	; 0x290
 8002e52:	4618      	mov	r0, r3
 8002e54:	ee0c 3a10 	vmov	s24, r3
 8002e58:	f00a fe6a 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e5c:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 8002e60:	4618      	mov	r0, r3
 8002e62:	ee0c 3a90 	vmov	s25, r3
 8002e66:	f00a fe63 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e6a:	f504 7348 	add.w	r3, r4, #800	; 0x320
 8002e6e:	4618      	mov	r0, r3
 8002e70:	ee0d 3a10 	vmov	s26, r3
 8002e74:	f00a fe5c 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e78:	f504 735a 	add.w	r3, r4, #872	; 0x368
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	ee0d 3a90 	vmov	s27, r3
 8002e82:	f00a fe55 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e86:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	ee0e 3a10 	vmov	s28, r3
 8002e90:	f00a fe4e 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e94:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 8002e98:	4618      	mov	r0, r3
 8002e9a:	ee0f 3a10 	vmov	s30, r3
 8002e9e:	f00a fcdb 	bl	800d858 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8002ea2:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eaa:	f7ff fedd 	bl	8002c68 <_ZN8touchgfx3BoxC1Ev>
 8002eae:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 8002eb2:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f8c4 7460 	str.w	r7, [r4, #1120]	; 0x460
 8002ebc:	f8a4 7464 	strh.w	r7, [r4, #1124]	; 0x464
 8002ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8002ec2:	f7ff fed1 	bl	8002c68 <_ZN8touchgfx3BoxC1Ev>
 8002ec6:	f204 439c 	addw	r3, r4, #1180	; 0x49c
 8002eca:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
 8002ece:	f8c4 7494 	str.w	r7, [r4, #1172]	; 0x494
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f8a4 7498 	strh.w	r7, [r4, #1176]	; 0x498
 8002ed8:	ee0f 3a90 	vmov	s31, r3
 8002edc:	4da0      	ldr	r5, [pc, #640]	; (8003160 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 8002ede:	f7ff ff27 	bl	8002d30 <_ZN8touchgfx8TextAreaC1Ev>
 8002ee2:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 8002ee6:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
 8002eea:	4618      	mov	r0, r3
 8002eec:	f8c4 74d8 	str.w	r7, [r4, #1240]	; 0x4d8
 8002ef0:	9302      	str	r3, [sp, #8]
 8002ef2:	f7ff ff1d 	bl	8002d30 <_ZN8touchgfx8TextAreaC1Ev>
 8002ef6:	f204 531c 	addw	r3, r4, #1308	; 0x51c
 8002efa:	f8c4 54dc 	str.w	r5, [r4, #1244]	; 0x4dc
 8002efe:	f8c4 7518 	str.w	r7, [r4, #1304]	; 0x518
    __background.setPosition(0, 0, 480, 272);
 8002f02:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002f06:	4618      	mov	r0, r3
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	f7ff ff11 	bl	8002d30 <_ZN8touchgfx8TextAreaC1Ev>
 8002f0e:	f504 63ab 	add.w	r3, r4, #1368	; 0x558
 8002f12:	4618      	mov	r0, r3
 8002f14:	9304      	str	r3, [sp, #16]
 8002f16:	f7ff ff0b 	bl	8002d30 <_ZN8touchgfx8TextAreaC1Ev>
 8002f1a:	f204 5394 	addw	r3, r4, #1428	; 0x594
 8002f1e:	4618      	mov	r0, r3
 8002f20:	ee0e 3a90 	vmov	s29, r3
 8002f24:	f00a fe04 	bl	800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f28:	f204 53dc 	addw	r3, r4, #1500	; 0x5dc
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	9305      	str	r3, [sp, #20]
 8002f30:	f7ff ff1a 	bl	8002d68 <_ZN8touchgfx12ToggleButtonC1Ev>
 8002f34:	f204 6314 	addw	r3, r4, #1556	; 0x614
 8002f38:	4618      	mov	r0, r3
 8002f3a:	9306      	str	r3, [sp, #24]
 8002f3c:	f7ff ff14 	bl	8002d68 <_ZN8touchgfx12ToggleButtonC1Ev>
 8002f40:	f204 634c 	addw	r3, r4, #1612	; 0x64c
 8002f44:	4618      	mov	r0, r3
 8002f46:	9307      	str	r3, [sp, #28]
 8002f48:	f00a fc86 	bl	800d858 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8002f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f50:	a910      	add	r1, sp, #64	; 0x40
 8002f52:	4658      	mov	r0, fp
 8002f54:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8002f58:	f009 fd52 	bl	800ca00 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8002f5c:	4b81      	ldr	r3, [pc, #516]	; (8003164 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
    __background.setPosition(0, 0, 480, 272);
 8002f5e:	463a      	mov	r2, r7
 8002f60:	4639      	mov	r1, r7
 8002f62:	ee18 0a10 	vmov	r0, s16
 8002f66:	f8c4 36c4 	str.w	r3, [r4, #1732]	; 0x6c4
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	; (8003168 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8002f6c:	9500      	str	r5, [sp, #0]
 8002f6e:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
 8002f72:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f76:	f8c4 46c8 	str.w	r4, [r4, #1736]	; 0x6c8
 8002f7a:	f8c4 76d0 	str.w	r7, [r4, #1744]	; 0x6d0
 8002f7e:	f7ff fe60 	bl	8002c42 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8002f82:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 8002f86:	463a      	mov	r2, r7
 8002f88:	4639      	mov	r1, r7
 8002f8a:	9808      	ldr	r0, [sp, #32]
 8002f8c:	66a3      	str	r3, [r4, #104]	; 0x68
 8002f8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f92:	9500      	str	r5, [sp, #0]
        color = col;
 8002f94:	f04f 35ff 	mov.w	r5, #4294967295
 8002f98:	f7ff fe53 	bl	8002c42 <_ZN8touchgfx8Drawable11setPositionEssss>
 8002f9c:	4b73      	ldr	r3, [pc, #460]	; (800316c <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
    button7.setXY(0, 16);
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	4639      	mov	r1, r7
 8002fa2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8002fa6:	ee18 0a90 	vmov	r0, s17
 8002faa:	f7ff fe3d 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button7.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8002fae:	aa10      	add	r2, sp, #64	; 0x40
 8002fb0:	a90f      	add	r1, sp, #60	; 0x3c
 8002fb2:	ee18 0a90 	vmov	r0, s17
 8002fb6:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8002fba:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8002fbe:	f00a f94b 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8002fc2:	ee18 0a90 	vmov	r0, s17
 8002fc6:	f8a4 70d0 	strh.w	r7, [r4, #208]	; 0xd0
 8002fca:	f7ff fe61 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8.setXY(60, 16);
 8002fce:	2210      	movs	r2, #16
 8002fd0:	213c      	movs	r1, #60	; 0x3c
 8002fd2:	ee19 0a10 	vmov	r0, s18
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8002fd6:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
        colorPressed = col;
 8002fda:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
 8002fde:	f7ff fe23 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button8.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8002fe2:	a90f      	add	r1, sp, #60	; 0x3c
 8002fe4:	aa10      	add	r2, sp, #64	; 0x40
 8002fe6:	ee19 0a10 	vmov	r0, s18
 8002fea:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8002fee:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8002ff2:	f00a f931 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8002ff6:	f04f 0201 	mov.w	r2, #1
        updateTextPosition();
 8002ffa:	ee19 0a10 	vmov	r0, s18
 8002ffe:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
 8003002:	f7ff fe45 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9.setXY(120, 16);
 8003006:	2210      	movs	r2, #16
 8003008:	2178      	movs	r1, #120	; 0x78
 800300a:	ee19 0a90 	vmov	r0, s19
 800300e:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
        colorPressed = col;
 8003012:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
 8003016:	f7ff fe07 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button9.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800301a:	a90f      	add	r1, sp, #60	; 0x3c
 800301c:	aa10      	add	r2, sp, #64	; 0x40
 800301e:	ee19 0a90 	vmov	r0, s19
 8003022:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003026:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800302a:	f00a f915 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800302e:	f04f 0202 	mov.w	r2, #2
        updateTextPosition();
 8003032:	ee19 0a90 	vmov	r0, s19
 8003036:	f8a4 2160 	strh.w	r2, [r4, #352]	; 0x160
 800303a:	f7ff fe29 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4.setXY(0, 76);
 800303e:	224c      	movs	r2, #76	; 0x4c
 8003040:	4639      	mov	r1, r7
 8003042:	ee1a 0a10 	vmov	r0, s20
 8003046:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
        colorPressed = col;
 800304a:	e9c4 5559 	strd	r5, r5, [r4, #356]	; 0x164
 800304e:	f7ff fdeb 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button4.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003052:	a90f      	add	r1, sp, #60	; 0x3c
 8003054:	aa10      	add	r2, sp, #64	; 0x40
 8003056:	ee1a 0a10 	vmov	r0, s20
 800305a:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800305e:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003062:	f00a f8f9 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003066:	f04f 0203 	mov.w	r2, #3
        updateTextPosition();
 800306a:	ee1a 0a10 	vmov	r0, s20
 800306e:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
 8003072:	f7ff fe0d 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5.setXY(60, 76);
 8003076:	224c      	movs	r2, #76	; 0x4c
 8003078:	213c      	movs	r1, #60	; 0x3c
 800307a:	ee1a 0a90 	vmov	r0, s21
 800307e:	f8c4 6198 	str.w	r6, [r4, #408]	; 0x198
        colorPressed = col;
 8003082:	e9c4 556b 	strd	r5, r5, [r4, #428]	; 0x1ac
 8003086:	f7ff fdcf 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button5.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800308a:	a910      	add	r1, sp, #64	; 0x40
 800308c:	ee1a 0a90 	vmov	r0, s21
 8003090:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003094:	460a      	mov	r2, r1
 8003096:	a90f      	add	r1, sp, #60	; 0x3c
 8003098:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800309c:	f00a f8dc 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80030a0:	f04f 0104 	mov.w	r1, #4
        updateTextPosition();
 80030a4:	ee1a 0a90 	vmov	r0, s21
 80030a8:	f8a4 11f0 	strh.w	r1, [r4, #496]	; 0x1f0
 80030ac:	f7ff fdf0 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6.setXY(120, 76);
 80030b0:	224c      	movs	r2, #76	; 0x4c
 80030b2:	2178      	movs	r1, #120	; 0x78
 80030b4:	ee1b 0a10 	vmov	r0, s22
 80030b8:	f8c4 61e0 	str.w	r6, [r4, #480]	; 0x1e0
        colorPressed = col;
 80030bc:	e9c4 557d 	strd	r5, r5, [r4, #500]	; 0x1f4
 80030c0:	f7ff fdb2 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button6.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80030c4:	a910      	add	r1, sp, #64	; 0x40
 80030c6:	ee1b 0a10 	vmov	r0, s22
 80030ca:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80030ce:	460a      	mov	r2, r1
 80030d0:	a90f      	add	r1, sp, #60	; 0x3c
 80030d2:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 80030d6:	f00a f8bf 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80030da:	ee1b 0a10 	vmov	r0, s22
 80030de:	f8a4 8238 	strh.w	r8, [r4, #568]	; 0x238
 80030e2:	f7ff fdd5 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1.setXY(0, 136);
 80030e6:	2288      	movs	r2, #136	; 0x88
 80030e8:	4639      	mov	r1, r7
 80030ea:	ee1b 0a90 	vmov	r0, s23
 80030ee:	f8c4 6228 	str.w	r6, [r4, #552]	; 0x228
        colorPressed = col;
 80030f2:	e9c4 558f 	strd	r5, r5, [r4, #572]	; 0x23c
 80030f6:	f7ff fd97 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80030fa:	a910      	add	r1, sp, #64	; 0x40
 80030fc:	ee1b 0a90 	vmov	r0, s23
 8003100:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003104:	460a      	mov	r2, r1
 8003106:	a90f      	add	r1, sp, #60	; 0x3c
 8003108:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800310c:	f00a f8a4 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003110:	ee1b 0a90 	vmov	r0, s23
 8003114:	f8a4 a280 	strh.w	sl, [r4, #640]	; 0x280
 8003118:	f7ff fdba 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2.setXY(60, 136);
 800311c:	2288      	movs	r2, #136	; 0x88
 800311e:	213c      	movs	r1, #60	; 0x3c
 8003120:	ee1c 0a10 	vmov	r0, s24
 8003124:	f8c4 6270 	str.w	r6, [r4, #624]	; 0x270
        colorPressed = col;
 8003128:	e9c4 55a1 	strd	r5, r5, [r4, #644]	; 0x284
 800312c:	f7ff fd7c 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003130:	a910      	add	r1, sp, #64	; 0x40
 8003132:	ee1c 0a10 	vmov	r0, s24
 8003136:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800313a:	460a      	mov	r2, r1
 800313c:	a90f      	add	r1, sp, #60	; 0x3c
 800313e:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003142:	f00a f889 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003146:	ee1c 0a10 	vmov	r0, s24
 800314a:	f8a4 92c8 	strh.w	r9, [r4, #712]	; 0x2c8
 800314e:	f7ff fd9f 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3.setXY(120, 136);
 8003152:	2288      	movs	r2, #136	; 0x88
 8003154:	2178      	movs	r1, #120	; 0x78
 8003156:	e00b      	b.n	8003170 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8003158:	0801e05c 	.word	0x0801e05c
 800315c:	0801ce5c 	.word	0x0801ce5c
 8003160:	0801dfb4 	.word	0x0801dfb4
 8003164:	0801ce44 	.word	0x0801ce44
 8003168:	08002b11 	.word	0x08002b11
 800316c:	ff570e0e 	.word	0xff570e0e
 8003170:	ee1c 0a90 	vmov	r0, s25
 8003174:	f8c4 62b8 	str.w	r6, [r4, #696]	; 0x2b8
        colorPressed = col;
 8003178:	e9c4 55b3 	strd	r5, r5, [r4, #716]	; 0x2cc
 800317c:	f7ff fd54 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003180:	a910      	add	r1, sp, #64	; 0x40
 8003182:	ee1c 0a90 	vmov	r0, s25
 8003186:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800318a:	460a      	mov	r2, r1
 800318c:	a90f      	add	r1, sp, #60	; 0x3c
 800318e:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003192:	f00a f861 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003196:	f04f 0108 	mov.w	r1, #8
        updateTextPosition();
 800319a:	ee1c 0a90 	vmov	r0, s25
 800319e:	f8a4 1310 	strh.w	r1, [r4, #784]	; 0x310
 80031a2:	f7ff fd75 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear.setXY(0, 196);
 80031a6:	22c4      	movs	r2, #196	; 0xc4
 80031a8:	4639      	mov	r1, r7
 80031aa:	ee1d 0a10 	vmov	r0, s26
 80031ae:	f8c4 6300 	str.w	r6, [r4, #768]	; 0x300
        colorPressed = col;
 80031b2:	e9c4 55c5 	strd	r5, r5, [r4, #788]	; 0x314
 80031b6:	f7ff fd37 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80031ba:	a910      	add	r1, sp, #64	; 0x40
 80031bc:	ee1d 0a10 	vmov	r0, s26
 80031c0:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80031c4:	460a      	mov	r2, r1
 80031c6:	a90f      	add	r1, sp, #60	; 0x3c
 80031c8:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 80031cc:	f00a f844 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80031d0:	f04f 0109 	mov.w	r1, #9
        updateTextPosition();
 80031d4:	ee1d 0a10 	vmov	r0, s26
 80031d8:	f8a4 1358 	strh.w	r1, [r4, #856]	; 0x358
 80031dc:	f7ff fd58 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0.setXY(60, 196);
 80031e0:	22c4      	movs	r2, #196	; 0xc4
 80031e2:	213c      	movs	r1, #60	; 0x3c
 80031e4:	ee1d 0a90 	vmov	r0, s27
 80031e8:	f8c4 6348 	str.w	r6, [r4, #840]	; 0x348
        colorPressed = col;
 80031ec:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
 80031f0:	f7ff fd1a 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80031f4:	a910      	add	r1, sp, #64	; 0x40
 80031f6:	ee1d 0a90 	vmov	r0, s27
 80031fa:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80031fe:	460a      	mov	r2, r1
 8003200:	a90f      	add	r1, sp, #60	; 0x3c
 8003202:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003206:	f00a f827 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800320a:	230a      	movs	r3, #10
        updateTextPosition();
 800320c:	ee1d 0a90 	vmov	r0, s27
 8003210:	f8a4 33a0 	strh.w	r3, [r4, #928]	; 0x3a0
 8003214:	f7ff fd3c 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend.setXY(120, 196);
 8003218:	22c4      	movs	r2, #196	; 0xc4
 800321a:	2178      	movs	r1, #120	; 0x78
 800321c:	ee1e 0a10 	vmov	r0, s28
 8003220:	f8c4 6390 	str.w	r6, [r4, #912]	; 0x390
        colorPressed = col;
 8003224:	e9c4 55e9 	strd	r5, r5, [r4, #932]	; 0x3a4
 8003228:	f7ff fcfe 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800322c:	a910      	add	r1, sp, #64	; 0x40
 800322e:	ee1e 0a10 	vmov	r0, s28
 8003232:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003236:	460a      	mov	r2, r1
 8003238:	a90f      	add	r1, sp, #60	; 0x3c
 800323a:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800323e:	f00a f80b 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003242:	230b      	movs	r3, #11
        updateTextPosition();
 8003244:	ee1e 0a10 	vmov	r0, s28
 8003248:	f8a4 33e8 	strh.w	r3, [r4, #1000]	; 0x3e8
 800324c:	f7ff fd20 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSwitch.setXY(180, 196);
 8003250:	22c4      	movs	r2, #196	; 0xc4
 8003252:	21b4      	movs	r1, #180	; 0xb4
 8003254:	ee1f 0a10 	vmov	r0, s30
 8003258:	f8c4 63d8 	str.w	r6, [r4, #984]	; 0x3d8
        colorPressed = col;
 800325c:	e9c4 55fb 	strd	r5, r5, [r4, #1004]	; 0x3ec
 8003260:	f7ff fce2 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 8003264:	f04f 0203 	mov.w	r2, #3
    buttonSwitch.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID));
 8003268:	a90d      	add	r1, sp, #52	; 0x34
 800326a:	ee1f 0a10 	vmov	r0, s30
 800326e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8003272:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8003276:	aa10      	add	r2, sp, #64	; 0x40
 8003278:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 800327c:	9200      	str	r2, [sp, #0]
 800327e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003280:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
 8003284:	4613      	mov	r3, r2
 8003286:	aa0e      	add	r2, sp, #56	; 0x38
 8003288:	f00a fa43 	bl	800d712 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 800328c:	f04f 020f 	mov.w	r2, #15
    boxWithBorder1_1.setPosition(247, 5, 121, 82);
 8003290:	2379      	movs	r3, #121	; 0x79
 8003292:	21f7      	movs	r1, #247	; 0xf7
 8003294:	f8a4 2430 	strh.w	r2, [r4, #1072]	; 0x430
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
    {
        iconY = y;
 8003298:	f04f 0210 	mov.w	r2, #16
 800329c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800329e:	f8a4 2432 	strh.w	r2, [r4, #1074]	; 0x432
 80032a2:	2252      	movs	r2, #82	; 0x52
 80032a4:	f8c4 6420 	str.w	r6, [r4, #1056]	; 0x420
 80032a8:	9200      	str	r2, [sp, #0]
 80032aa:	4642      	mov	r2, r8
 80032ac:	f7ff fcc9 	bl	8002c42 <_ZN8touchgfx8Drawable11setPositionEssss>
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
    {
        borderColor = color;
 80032b0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80032b4:	4bd1      	ldr	r3, [pc, #836]	; (80035fc <_ZN15Screen1ViewBaseC1Ev+0x858>)
    boxWithBorder1.setPosition(372, 5, 100, 82);
 80032b6:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80032ba:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
 80032be:	2252      	movs	r2, #82	; 0x52
 80032c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80032c2:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
 80032c6:	2364      	movs	r3, #100	; 0x64
 80032c8:	9200      	str	r2, [sp, #0]
 80032ca:	4642      	mov	r2, r8
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80032cc:	f8a4 8464 	strh.w	r8, [r4, #1124]	; 0x464
 80032d0:	f7ff fcb7 	bl	8002c42 <_ZN8touchgfx8Drawable11setPositionEssss>
 80032d4:	4bc9      	ldr	r3, [pc, #804]	; (80035fc <_ZN15Screen1ViewBaseC1Ev+0x858>)
    textAreaFreq.setPosition(255, 40, 104, 35);
 80032d6:	2228      	movs	r2, #40	; 0x28
 80032d8:	21ff      	movs	r1, #255	; 0xff
 80032da:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
        borderColor = color;
 80032de:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80032e2:	ee1f 0a90 	vmov	r0, s31
        borderSize = size;
 80032e6:	f8a4 8498 	strh.w	r8, [r4, #1176]	; 0x498
        borderColor = color;
 80032ea:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
 80032ee:	2323      	movs	r3, #35	; 0x23
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2368      	movs	r3, #104	; 0x68
 80032f4:	f7ff fca5 	bl	8002c42 <_ZN8touchgfx8Drawable11setPositionEssss>
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 80032f8:	f204 63b4 	addw	r3, r4, #1716	; 0x6b4
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80032fc:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
 8003300:	930b      	str	r3, [sp, #44]	; 0x2c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003302:	4bbf      	ldr	r3, [pc, #764]	; (8003600 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8003304:	f8a4 74d0 	strh.w	r7, [r4, #1232]	; 0x4d0
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	b92b      	cbnz	r3, 8003318 <_ZN15Screen1ViewBaseC1Ev+0x574>
 800330c:	4bbd      	ldr	r3, [pc, #756]	; (8003604 <_ZN15Screen1ViewBaseC1Ev+0x860>)
 800330e:	21ae      	movs	r1, #174	; 0xae
 8003310:	4abd      	ldr	r2, [pc, #756]	; (8003608 <_ZN15Screen1ViewBaseC1Ev+0x864>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8003312:	48be      	ldr	r0, [pc, #760]	; (800360c <_ZN15Screen1ViewBaseC1Ev+0x868>)
 8003314:	f017 fec2 	bl	801b09c <__assert_func>
 8003318:	4bbd      	ldr	r3, [pc, #756]	; (8003610 <_ZN15Screen1ViewBaseC1Ev+0x86c>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	2b10      	cmp	r3, #16
 800331e:	d803      	bhi.n	8003328 <_ZN15Screen1ViewBaseC1Ev+0x584>
 8003320:	4bbc      	ldr	r3, [pc, #752]	; (8003614 <_ZN15Screen1ViewBaseC1Ev+0x870>)
 8003322:	21af      	movs	r1, #175	; 0xaf
 8003324:	4ab8      	ldr	r2, [pc, #736]	; (8003608 <_ZN15Screen1ViewBaseC1Ev+0x864>)
 8003326:	e7f4      	b.n	8003312 <_ZN15Screen1ViewBaseC1Ev+0x56e>
        return texts->getText(typedTextId);
 8003328:	4bbb      	ldr	r3, [pc, #748]	; (8003618 <_ZN15Screen1ViewBaseC1Ev+0x874>)
 800332a:	2110      	movs	r1, #16
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f000 fb13 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 8003332:	4aba      	ldr	r2, [pc, #744]	; (800361c <_ZN15Screen1ViewBaseC1Ev+0x878>)
 8003334:	4603      	mov	r3, r0
 8003336:	2103      	movs	r1, #3
 8003338:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800333a:	f00f f803 	bl	8012344 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 800333e:	4bb8      	ldr	r3, [pc, #736]	; (8003620 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
 8003340:	990b      	ldr	r1, [sp, #44]	; 0x2c
    textAreaFreq.setTypedText(touchgfx::TypedText(T_FREQ));
 8003342:	ee1f 0a90 	vmov	r0, s31
 8003346:	9310      	str	r3, [sp, #64]	; 0x40
 8003348:	230e      	movs	r3, #14
 800334a:	f8c4 14d8 	str.w	r1, [r4, #1240]	; 0x4d8
 800334e:	a910      	add	r1, sp, #64	; 0x40
 8003350:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8003354:	f009 ff40 	bl	800d1d8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreaMI.setPosition(380, 46, 84, 31);
 8003358:	231f      	movs	r3, #31
 800335a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800335e:	222e      	movs	r2, #46	; 0x2e
 8003360:	9802      	ldr	r0, [sp, #8]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2354      	movs	r3, #84	; 0x54
 8003366:	f7ff fc6c 	bl	8002c42 <_ZN8touchgfx8Drawable11setPositionEssss>
    Unicode::snprintf(textAreaMIBuffer, TEXTAREAMI_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LXQE).getText());
 800336a:	f204 61ba 	addw	r1, r4, #1722	; 0x6ba
        this->color = color;
 800336e:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8003372:	910b      	str	r1, [sp, #44]	; 0x2c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003374:	49a2      	ldr	r1, [pc, #648]	; (8003600 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
        linespace = space;
 8003376:	f8a4 7510 	strh.w	r7, [r4, #1296]	; 0x510
 800337a:	680b      	ldr	r3, [r1, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0c5      	beq.n	800330c <_ZN15Screen1ViewBaseC1Ev+0x568>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8003380:	49a3      	ldr	r1, [pc, #652]	; (8003610 <_ZN15Screen1ViewBaseC1Ev+0x86c>)
 8003382:	880b      	ldrh	r3, [r1, #0]
 8003384:	2b11      	cmp	r3, #17
 8003386:	d9cb      	bls.n	8003320 <_ZN15Screen1ViewBaseC1Ev+0x57c>
        return texts->getText(typedTextId);
 8003388:	4aa3      	ldr	r2, [pc, #652]	; (8003618 <_ZN15Screen1ViewBaseC1Ev+0x874>)
 800338a:	2111      	movs	r1, #17
 800338c:	6810      	ldr	r0, [r2, #0]
 800338e:	f000 fae3 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 8003392:	4aa2      	ldr	r2, [pc, #648]	; (800361c <_ZN15Screen1ViewBaseC1Ev+0x878>)
 8003394:	4603      	mov	r3, r0
 8003396:	2104      	movs	r1, #4
 8003398:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800339a:	f00e ffd3 	bl	8012344 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800339e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        : typedTextId(id)
 80033a0:	4b9f      	ldr	r3, [pc, #636]	; (8003620 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
    textAreaMI.setTypedText(touchgfx::TypedText(T_MI));
 80033a2:	a910      	add	r1, sp, #64	; 0x40
 80033a4:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 80033a8:	f04f 020f 	mov.w	r2, #15
 80033ac:	9802      	ldr	r0, [sp, #8]
 80033ae:	9310      	str	r3, [sp, #64]	; 0x40
 80033b0:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80033b4:	f009 ff10 	bl	800d1d8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2.setXY(402, 15);
 80033b8:	220f      	movs	r2, #15
 80033ba:	9803      	ldr	r0, [sp, #12]
 80033bc:	f44f 71c9 	mov.w	r1, #402	; 0x192
 80033c0:	f7ff fc32 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 80033c4:	4b96      	ldr	r3, [pc, #600]	; (8003620 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IO59));
 80033c6:	a910      	add	r1, sp, #64	; 0x40
 80033c8:	9803      	ldr	r0, [sp, #12]
 80033ca:	9310      	str	r3, [sp, #64]	; 0x40
 80033cc:	230c      	movs	r3, #12
        this->color = color;
 80033ce:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
        linespace = space;
 80033d2:	f8a4 7550 	strh.w	r7, [r4, #1360]	; 0x550
 80033d6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80033da:	f009 fefd 	bl	800d1d8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2_1.setXY(255, 15);
 80033de:	220f      	movs	r2, #15
 80033e0:	9804      	ldr	r0, [sp, #16]
 80033e2:	21ff      	movs	r1, #255	; 0xff
 80033e4:	f7ff fc20 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 80033e8:	4b8d      	ldr	r3, [pc, #564]	; (8003620 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X3GJ));
 80033ea:	a910      	add	r1, sp, #64	; 0x40
 80033ec:	9804      	ldr	r0, [sp, #16]
 80033ee:	9310      	str	r3, [sp, #64]	; 0x40
 80033f0:	230d      	movs	r3, #13
        this->color = color;
 80033f2:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
        linespace = space;
 80033f6:	f8a4 758c 	strh.w	r7, [r4, #1420]	; 0x58c
 80033fa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80033fe:	f009 feeb 	bl	800d1d8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonDot.setXY(180, 136);
 8003402:	ee1e 0a90 	vmov	r0, s29
 8003406:	2288      	movs	r2, #136	; 0x88
 8003408:	21b4      	movs	r1, #180	; 0xb4
 800340a:	f7ff fc0d 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
    buttonDot.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800340e:	aa10      	add	r2, sp, #64	; 0x40
 8003410:	a90f      	add	r1, sp, #60	; 0x3c
 8003412:	ee1e 0a90 	vmov	r0, s29
 8003416:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800341a:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800341e:	f009 ff1b 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8003422:	2312      	movs	r3, #18
        updateTextPosition();
 8003424:	ee1e 0a90 	vmov	r0, s29
 8003428:	f8a4 35cc 	strh.w	r3, [r4, #1484]	; 0x5cc
 800342c:	f7ff fc30 	bl	8002c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    toggleButtonFreq.setXY(259, 98);
 8003430:	9805      	ldr	r0, [sp, #20]
        color = col;
 8003432:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
 8003436:	2262      	movs	r2, #98	; 0x62
        colorPressed = col;
 8003438:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800343c:	f240 1103 	movw	r1, #259	; 0x103
 8003440:	f04f 0504 	mov.w	r5, #4
 8003444:	f8c4 65bc 	str.w	r6, [r4, #1468]	; 0x5bc
 8003448:	f7ff fbee 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800344c:	aa10      	add	r2, sp, #64	; 0x40
 800344e:	a90f      	add	r1, sp, #60	; 0x3c
 8003450:	9805      	ldr	r0, [sp, #20]
        originalPressed = bitmapPressed;
 8003452:	f8a4 8610 	strh.w	r8, [r4, #1552]	; 0x610
 8003456:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
 800345a:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800345e:	f009 fefb 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButtonMI.setXY(374, 98);
 8003462:	9806      	ldr	r0, [sp, #24]
 8003464:	2262      	movs	r2, #98	; 0x62
 8003466:	f44f 71bb 	mov.w	r1, #374	; 0x176
 800346a:	f8c4 6604 	str.w	r6, [r4, #1540]	; 0x604
 800346e:	f7ff fbdb 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 8003472:	aa10      	add	r2, sp, #64	; 0x40
 8003474:	a90f      	add	r1, sp, #60	; 0x3c
 8003476:	9806      	ldr	r0, [sp, #24]
        originalPressed = bitmapPressed;
 8003478:	f8a4 8648 	strh.w	r8, [r4, #1608]	; 0x648
 800347c:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003480:	1d25      	adds	r5, r4, #4
 8003482:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003486:	f009 fee7 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonPower.setXY(300, 196);
 800348a:	9807      	ldr	r0, [sp, #28]
 800348c:	22c4      	movs	r2, #196	; 0xc4
 800348e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003492:	f8c4 663c 	str.w	r6, [r4, #1596]	; 0x63c
 8003496:	f7ff fbc7 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 800349a:	f04f 0308 	mov.w	r3, #8
    buttonPower.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 800349e:	aa0e      	add	r2, sp, #56	; 0x38
 80034a0:	a90d      	add	r1, sp, #52	; 0x34
 80034a2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80034a6:	f04f 0309 	mov.w	r3, #9
 80034aa:	9807      	ldr	r0, [sp, #28]
 80034ac:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80034b0:	f04f 0302 	mov.w	r3, #2
 80034b4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 80034b8:	f04f 0301 	mov.w	r3, #1
 80034bc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80034c0:	ab10      	add	r3, sp, #64	; 0x40
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	ab0f      	add	r3, sp, #60	; 0x3c
 80034c6:	f00a f924 	bl	800d712 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 80034ca:	2347      	movs	r3, #71	; 0x47
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 80034cc:	a910      	add	r1, sp, #64	; 0x40
 80034ce:	4658      	mov	r0, fp
 80034d0:	f8a4 3684 	strh.w	r3, [r4, #1668]	; 0x684
        iconY = y;
 80034d4:	f04f 0310 	mov.w	r3, #16
 80034d8:	f8c4 6674 	str.w	r6, [r4, #1652]	; 0x674
 80034dc:	f8a4 3686 	strh.w	r3, [r4, #1670]	; 0x686
 80034e0:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80034e4:	f00a f9df 	bl	800d8a6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(241, 9, 2, 250);
 80034e8:	23fa      	movs	r3, #250	; 0xfa
 80034ea:	2209      	movs	r2, #9
 80034ec:	4658      	mov	r0, fp
 80034ee:	21f1      	movs	r1, #241	; 0xf1
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2302      	movs	r3, #2
 80034f4:	f7ff fba5 	bl	8002c42 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80034f8:	4639      	mov	r1, r7
 80034fa:	4658      	mov	r0, fp
 80034fc:	f009 fa47 	bl	800c98e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003500:	ee18 1a10 	vmov	r1, s16
 8003504:	4628      	mov	r0, r5
 8003506:	f007 ffb5 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800350a:	9908      	ldr	r1, [sp, #32]
 800350c:	4628      	mov	r0, r5
 800350e:	f007 ffb1 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003512:	ee18 1a90 	vmov	r1, s17
 8003516:	4628      	mov	r0, r5
 8003518:	f007 ffac 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800351c:	ee19 1a10 	vmov	r1, s18
 8003520:	4628      	mov	r0, r5
 8003522:	f007 ffa7 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003526:	ee19 1a90 	vmov	r1, s19
 800352a:	4628      	mov	r0, r5
 800352c:	f007 ffa2 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003530:	ee1a 1a10 	vmov	r1, s20
 8003534:	4628      	mov	r0, r5
 8003536:	f007 ff9d 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800353a:	ee1a 1a90 	vmov	r1, s21
 800353e:	4628      	mov	r0, r5
 8003540:	f007 ff98 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003544:	ee1b 1a10 	vmov	r1, s22
 8003548:	4628      	mov	r0, r5
 800354a:	f007 ff93 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800354e:	ee1b 1a90 	vmov	r1, s23
 8003552:	4628      	mov	r0, r5
 8003554:	f007 ff8e 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003558:	ee1c 1a10 	vmov	r1, s24
 800355c:	4628      	mov	r0, r5
 800355e:	f007 ff89 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003562:	ee1c 1a90 	vmov	r1, s25
 8003566:	4628      	mov	r0, r5
 8003568:	f007 ff84 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800356c:	ee1d 1a10 	vmov	r1, s26
 8003570:	4628      	mov	r0, r5
 8003572:	f007 ff7f 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003576:	ee1d 1a90 	vmov	r1, s27
 800357a:	4628      	mov	r0, r5
 800357c:	f007 ff7a 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003580:	ee1e 1a10 	vmov	r1, s28
 8003584:	4628      	mov	r0, r5
 8003586:	f007 ff75 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800358a:	ee1f 1a10 	vmov	r1, s30
 800358e:	4628      	mov	r0, r5
 8003590:	f007 ff70 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003596:	4628      	mov	r0, r5
 8003598:	f007 ff6c 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800359c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800359e:	4628      	mov	r0, r5
 80035a0:	f007 ff68 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035a4:	ee1f 1a90 	vmov	r1, s31
 80035a8:	4628      	mov	r0, r5
 80035aa:	f007 ff63 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035ae:	9902      	ldr	r1, [sp, #8]
 80035b0:	4628      	mov	r0, r5
 80035b2:	f007 ff5f 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035b6:	9903      	ldr	r1, [sp, #12]
 80035b8:	4628      	mov	r0, r5
 80035ba:	f007 ff5b 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035be:	9904      	ldr	r1, [sp, #16]
 80035c0:	4628      	mov	r0, r5
 80035c2:	f007 ff57 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035c6:	ee1e 1a90 	vmov	r1, s29
 80035ca:	4628      	mov	r0, r5
 80035cc:	f007 ff52 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035d0:	9905      	ldr	r1, [sp, #20]
 80035d2:	4628      	mov	r0, r5
 80035d4:	f007 ff4e 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035d8:	9906      	ldr	r1, [sp, #24]
 80035da:	4628      	mov	r0, r5
 80035dc:	f007 ff4a 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035e0:	9907      	ldr	r1, [sp, #28]
 80035e2:	4628      	mov	r0, r5
 80035e4:	f007 ff46 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035e8:	4628      	mov	r0, r5
 80035ea:	4659      	mov	r1, fp
 80035ec:	f007 ff42 	bl	800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80035f0:	4620      	mov	r0, r4
 80035f2:	b013      	add	sp, #76	; 0x4c
 80035f4:	ecbd 8b10 	vpop	{d8-d15}
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fc:	ff570e0e 	.word	0xff570e0e
 8003600:	24006c0c 	.word	0x24006c0c
 8003604:	0801cd30 	.word	0x0801cd30
 8003608:	0801cd72 	.word	0x0801cd72
 800360c:	0801cda0 	.word	0x0801cda0
 8003610:	24006c10 	.word	0x24006c10
 8003614:	0801cde7 	.word	0x0801cde7
 8003618:	24006c18 	.word	0x24006c18
 800361c:	0801ce39 	.word	0x0801ce39
 8003620:	0801c930 	.word	0x0801c930

08003624 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003624:	4770      	bx	lr
	...

08003628 <_Z23getFont_verdana_10_4bppv>:
{
 8003628:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800362a:	4d15      	ldr	r5, [pc, #84]	; (8003680 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 800362c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800362e:	782c      	ldrb	r4, [r5, #0]
 8003630:	f3bf 8f5b 	dmb	ish
 8003634:	f014 0401 	ands.w	r4, r4, #1
 8003638:	d11e      	bne.n	8003678 <_Z23getFont_verdana_10_4bppv+0x50>
 800363a:	4628      	mov	r0, r5
 800363c:	f017 fc1a 	bl	801ae74 <__cxa_guard_acquire>
 8003640:	b1d0      	cbz	r0, 8003678 <_Z23getFont_verdana_10_4bppv+0x50>
 8003642:	233f      	movs	r3, #63	; 0x3f
 8003644:	2201      	movs	r2, #1
 8003646:	490f      	ldr	r1, [pc, #60]	; (8003684 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003648:	9307      	str	r3, [sp, #28]
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <_Z23getFont_verdana_10_4bppv+0x60>)
 800364c:	480f      	ldr	r0, [pc, #60]	; (800368c <_Z23getFont_verdana_10_4bppv+0x64>)
 800364e:	9306      	str	r3, [sp, #24]
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003652:	9408      	str	r4, [sp, #32]
 8003654:	9403      	str	r4, [sp, #12]
 8003656:	9400      	str	r4, [sp, #0]
 8003658:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800365c:	2304      	movs	r3, #4
 800365e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003662:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003666:	230a      	movs	r3, #10
 8003668:	f7ff f9b8 	bl	80029dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800366c:	4628      	mov	r0, r5
 800366e:	f017 fc0d 	bl	801ae8c <__cxa_guard_release>
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003674:	f017 fd30 	bl	801b0d8 <atexit>
    return verdana_10_4bpp;
}
 8003678:	4804      	ldr	r0, [pc, #16]	; (800368c <_Z23getFont_verdana_10_4bppv+0x64>)
 800367a:	b00d      	add	sp, #52	; 0x34
 800367c:	bd30      	pop	{r4, r5, pc}
 800367e:	bf00      	nop
 8003680:	240016ec 	.word	0x240016ec
 8003684:	08020910 	.word	0x08020910
 8003688:	08020ac8 	.word	0x08020ac8
 800368c:	240016f0 	.word	0x240016f0
 8003690:	08020ae0 	.word	0x08020ae0
 8003694:	08003625 	.word	0x08003625

08003698 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003698:	4770      	bx	lr
	...

0800369c <_Z23getFont_verdana_20_4bppv>:
{
 800369c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800369e:	4d15      	ldr	r5, [pc, #84]	; (80036f4 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80036a0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80036a2:	782c      	ldrb	r4, [r5, #0]
 80036a4:	f3bf 8f5b 	dmb	ish
 80036a8:	f014 0401 	ands.w	r4, r4, #1
 80036ac:	d11f      	bne.n	80036ee <_Z23getFont_verdana_20_4bppv+0x52>
 80036ae:	4628      	mov	r0, r5
 80036b0:	f017 fbe0 	bl	801ae74 <__cxa_guard_acquire>
 80036b4:	b1d8      	cbz	r0, 80036ee <_Z23getFont_verdana_20_4bppv+0x52>
 80036b6:	233f      	movs	r3, #63	; 0x3f
 80036b8:	2201      	movs	r2, #1
 80036ba:	490f      	ldr	r1, [pc, #60]	; (80036f8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80036bc:	9307      	str	r3, [sp, #28]
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <_Z23getFont_verdana_20_4bppv+0x60>)
 80036c0:	480f      	ldr	r0, [pc, #60]	; (8003700 <_Z23getFont_verdana_20_4bppv+0x64>)
 80036c2:	9306      	str	r3, [sp, #24]
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <_Z23getFont_verdana_20_4bppv+0x68>)
 80036c6:	9408      	str	r4, [sp, #32]
 80036c8:	9403      	str	r4, [sp, #12]
 80036ca:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80036ce:	2304      	movs	r3, #4
 80036d0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80036d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	220c      	movs	r2, #12
 80036dc:	2314      	movs	r3, #20
 80036de:	f7ff f97d 	bl	80029dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80036e2:	4628      	mov	r0, r5
 80036e4:	f017 fbd2 	bl	801ae8c <__cxa_guard_release>
 80036e8:	4807      	ldr	r0, [pc, #28]	; (8003708 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80036ea:	f017 fcf5 	bl	801b0d8 <atexit>
    return verdana_20_4bpp;
}
 80036ee:	4804      	ldr	r0, [pc, #16]	; (8003700 <_Z23getFont_verdana_20_4bppv+0x64>)
 80036f0:	b00d      	add	sp, #52	; 0x34
 80036f2:	bd30      	pop	{r4, r5, pc}
 80036f4:	24001718 	.word	0x24001718
 80036f8:	08020920 	.word	0x08020920
 80036fc:	08020acc 	.word	0x08020acc
 8003700:	2400171c 	.word	0x2400171c
 8003704:	08020ae4 	.word	0x08020ae4
 8003708:	08003699 	.word	0x08003699

0800370c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800370c:	4770      	bx	lr
	...

08003710 <_Z23getFont_verdana_30_4bppv>:
{
 8003710:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8003712:	4d15      	ldr	r5, [pc, #84]	; (8003768 <_Z23getFont_verdana_30_4bppv+0x58>)
{
 8003714:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8003716:	782c      	ldrb	r4, [r5, #0]
 8003718:	f3bf 8f5b 	dmb	ish
 800371c:	f014 0401 	ands.w	r4, r4, #1
 8003720:	d11f      	bne.n	8003762 <_Z23getFont_verdana_30_4bppv+0x52>
 8003722:	4628      	mov	r0, r5
 8003724:	f017 fba6 	bl	801ae74 <__cxa_guard_acquire>
 8003728:	b1d8      	cbz	r0, 8003762 <_Z23getFont_verdana_30_4bppv+0x52>
 800372a:	233f      	movs	r3, #63	; 0x3f
 800372c:	2201      	movs	r2, #1
 800372e:	490f      	ldr	r1, [pc, #60]	; (800376c <_Z23getFont_verdana_30_4bppv+0x5c>)
 8003730:	9307      	str	r3, [sp, #28]
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <_Z23getFont_verdana_30_4bppv+0x60>)
 8003734:	480f      	ldr	r0, [pc, #60]	; (8003774 <_Z23getFont_verdana_30_4bppv+0x64>)
 8003736:	9306      	str	r3, [sp, #24]
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <_Z23getFont_verdana_30_4bppv+0x68>)
 800373a:	9408      	str	r4, [sp, #32]
 800373c:	9403      	str	r4, [sp, #12]
 800373e:	9400      	str	r4, [sp, #0]
 8003740:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003744:	2304      	movs	r3, #4
 8003746:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800374a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800374e:	231e      	movs	r3, #30
 8003750:	2211      	movs	r2, #17
 8003752:	f7ff f943 	bl	80029dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003756:	4628      	mov	r0, r5
 8003758:	f017 fb98 	bl	801ae8c <__cxa_guard_release>
 800375c:	4807      	ldr	r0, [pc, #28]	; (800377c <_Z23getFont_verdana_30_4bppv+0x6c>)
 800375e:	f017 fcbb 	bl	801b0d8 <atexit>
    return verdana_30_4bpp;
}
 8003762:	4804      	ldr	r0, [pc, #16]	; (8003774 <_Z23getFont_verdana_30_4bppv+0x64>)
 8003764:	b00d      	add	sp, #52	; 0x34
 8003766:	bd30      	pop	{r4, r5, pc}
 8003768:	24001744 	.word	0x24001744
 800376c:	080209c8 	.word	0x080209c8
 8003770:	08020ad8 	.word	0x08020ad8
 8003774:	24001748 	.word	0x24001748
 8003778:	08020ae8 	.word	0x08020ae8
 800377c:	0800370d 	.word	0x0800370d

08003780 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003780:	4770      	bx	lr
	...

08003784 <_Z23getFont_verdana_40_4bppv>:
{
 8003784:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003786:	4d15      	ldr	r5, [pc, #84]	; (80037dc <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003788:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800378a:	782c      	ldrb	r4, [r5, #0]
 800378c:	f3bf 8f5b 	dmb	ish
 8003790:	f014 0401 	ands.w	r4, r4, #1
 8003794:	d11e      	bne.n	80037d4 <_Z23getFont_verdana_40_4bppv+0x50>
 8003796:	4628      	mov	r0, r5
 8003798:	f017 fb6c 	bl	801ae74 <__cxa_guard_acquire>
 800379c:	b1d0      	cbz	r0, 80037d4 <_Z23getFont_verdana_40_4bppv+0x50>
 800379e:	233f      	movs	r3, #63	; 0x3f
 80037a0:	2201      	movs	r2, #1
 80037a2:	490f      	ldr	r1, [pc, #60]	; (80037e0 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80037a4:	9307      	str	r3, [sp, #28]
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <_Z23getFont_verdana_40_4bppv+0x60>)
 80037a8:	480f      	ldr	r0, [pc, #60]	; (80037e8 <_Z23getFont_verdana_40_4bppv+0x64>)
 80037aa:	9306      	str	r3, [sp, #24]
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <_Z23getFont_verdana_40_4bppv+0x68>)
 80037ae:	9408      	str	r4, [sp, #32]
 80037b0:	9403      	str	r4, [sp, #12]
 80037b2:	9400      	str	r4, [sp, #0]
 80037b4:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80037b8:	2304      	movs	r3, #4
 80037ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80037be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80037c2:	2328      	movs	r3, #40	; 0x28
 80037c4:	f7ff f90a 	bl	80029dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80037c8:	4628      	mov	r0, r5
 80037ca:	f017 fb5f 	bl	801ae8c <__cxa_guard_release>
 80037ce:	4808      	ldr	r0, [pc, #32]	; (80037f0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80037d0:	f017 fc82 	bl	801b0d8 <atexit>
    return verdana_40_4bpp;
}
 80037d4:	4804      	ldr	r0, [pc, #16]	; (80037e8 <_Z23getFont_verdana_40_4bppv+0x64>)
 80037d6:	b00d      	add	sp, #52	; 0x34
 80037d8:	bd30      	pop	{r4, r5, pc}
 80037da:	bf00      	nop
 80037dc:	24001770 	.word	0x24001770
 80037e0:	08020ab8 	.word	0x08020ab8
 80037e4:	08020adc 	.word	0x08020adc
 80037e8:	24001774 	.word	0x24001774
 80037ec:	08020aec 	.word	0x08020aec
 80037f0:	08003781 	.word	0x08003781

080037f4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80037f4:	2000      	movs	r0, #0
 80037f6:	4770      	bx	lr

080037f8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80037f8:	2000      	movs	r0, #0
 80037fa:	4770      	bx	lr

080037fc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80037fc:	b40e      	push	{r1, r2, r3}
 80037fe:	b503      	push	{r0, r1, lr}
 8003800:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003802:	2100      	movs	r1, #0
{
 8003804:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003808:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800380a:	f00c fce5 	bl	80101d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800380e:	b002      	add	sp, #8
 8003810:	f85d eb04 	ldr.w	lr, [sp], #4
 8003814:	b003      	add	sp, #12
 8003816:	4770      	bx	lr

08003818 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003818:	b40c      	push	{r2, r3}
 800381a:	b507      	push	{r0, r1, r2, lr}
 800381c:	ab04      	add	r3, sp, #16
 800381e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003822:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003824:	f00c fcd8 	bl	80101d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003828:	b003      	add	sp, #12
 800382a:	f85d eb04 	ldr.w	lr, [sp], #4
 800382e:	b002      	add	sp, #8
 8003830:	4770      	bx	lr
	...

08003834 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003834:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003836:	b510      	push	{r4, lr}
 8003838:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800383a:	b373      	cbz	r3, 800389a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800383c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800383e:	b92b      	cbnz	r3, 800384c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003842:	21c0      	movs	r1, #192	; 0xc0
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003846:	4819      	ldr	r0, [pc, #100]	; (80038ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003848:	f017 fc28 	bl	801b09c <__assert_func>
            return buffer[pos];
 800384c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800384e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003852:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003854:	b30b      	cbz	r3, 800389a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003856:	f00d ffbd 	bl	80117d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800385a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800385c:	2b01      	cmp	r3, #1
 800385e:	d803      	bhi.n	8003868 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003862:	21c5      	movs	r1, #197	; 0xc5
 8003864:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003866:	e7ee      	b.n	8003846 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003868:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800386a:	f640 103f 	movw	r0, #2367	; 0x93f
 800386e:	1c53      	adds	r3, r2, #1
 8003870:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003872:	2b09      	cmp	r3, #9
 8003874:	4619      	mov	r1, r3
 8003876:	bf88      	it	hi
 8003878:	f1a3 010a 	subhi.w	r1, r3, #10
 800387c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003880:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003882:	4281      	cmp	r1, r0
 8003884:	d109      	bne.n	800389a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003886:	2b0a      	cmp	r3, #10
 8003888:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800388c:	bf28      	it	cs
 800388e:	2300      	movcs	r3, #0
            return buffer[pos];
 8003890:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003892:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003896:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003898:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800389a:	4620      	mov	r0, r4
}
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80038a0:	f00d be7c 	b.w	801159c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80038a4:	0801cecc 	.word	0x0801cecc
 80038a8:	0801ced5 	.word	0x0801ced5
 80038ac:	0801cf80 	.word	0x0801cf80
 80038b0:	0801cfca 	.word	0x0801cfca
 80038b4:	0801cfd8 	.word	0x0801cfd8

080038b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80038b8:	f00d be28 	b.w	801150c <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080038bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80038bc:	b510      	push	{r4, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	ac02      	add	r4, sp, #8
 80038c2:	e884 0006 	stmia.w	r4, {r1, r2}
 80038c6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80038c8:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80038ca:	4621      	mov	r1, r4
    va_start(pArg, format);
 80038cc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	9b08      	ldr	r3, [sp, #32]
 80038d6:	f00b f979 	bl	800ebcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80038da:	b006      	add	sp, #24
 80038dc:	bd10      	pop	{r4, pc}
	...

080038e0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80038e0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80038e2:	bb18      	cbnz	r0, 800392c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80038e6:	4813      	ldr	r0, [pc, #76]	; (8003934 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4913      	ldr	r1, [pc, #76]	; (8003938 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80038ec:	b1b3      	cbz	r3, 800391c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80038ee:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80038f0:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80038f2:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80038f4:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80038f6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	441a      	add	r2, r3
 80038fc:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003900:	2200      	movs	r2, #0
 8003902:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003904:	f000 f838 	bl	8003978 <_ZN17TypedTextDatabase8getFontsEv>
 8003908:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800390a:	f000 f833 	bl	8003974 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003910:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003914:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003918:	8018      	strh	r0, [r3, #0]
    }
}
 800391a:	e007      	b.n	800392c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800391e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003922:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003926:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003928:	2c00      	cmp	r4, #0
 800392a:	d1e8      	bne.n	80038fe <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800392c:	bd38      	pop	{r3, r4, r5, pc}
 800392e:	bf00      	nop
 8003930:	2400179c 	.word	0x2400179c
 8003934:	240017a0 	.word	0x240017a0
 8003938:	240017a4 	.word	0x240017a4
 800393c:	240017a8 	.word	0x240017a8
 8003940:	24006c0c 	.word	0x24006c0c
 8003944:	24006c14 	.word	0x24006c14
 8003948:	24006c10 	.word	0x24006c10
 800394c:	08020b3c 	.word	0x08020b3c
 8003950:	08020af0 	.word	0x08020af0
 8003954:	08020bc8 	.word	0x08020bc8

08003958 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	240017a4 	.word	0x240017a4
 8003970:	240017a0 	.word	0x240017a0

08003974 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003974:	2013      	movs	r0, #19
 8003976:	4770      	bx	lr

08003978 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003978:	4800      	ldr	r0, [pc, #0]	; (800397c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800397a:	4770      	bx	lr
 800397c:	240017ac 	.word	0x240017ac

08003980 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003980:	b510      	push	{r4, lr}
};
 8003982:	4c07      	ldr	r4, [pc, #28]	; (80039a0 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_30_4bpp()),
 8003984:	f7ff fec4 	bl	8003710 <_Z23getFont_verdana_30_4bppv>
};
 8003988:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800398a:	f7ff fefb 	bl	8003784 <_Z23getFont_verdana_40_4bppv>
};
 800398e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8003990:	f7ff fe4a 	bl	8003628 <_Z23getFont_verdana_10_4bppv>
};
 8003994:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 8003996:	f7ff fe81 	bl	800369c <_Z23getFont_verdana_20_4bppv>
};
 800399a:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	240017ac 	.word	0x240017ac

080039a4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80039a4:	4770      	bx	lr

080039a6 <_ZN19FrontendApplicationD0Ev>:
 80039a6:	b510      	push	{r4, lr}
 80039a8:	4604      	mov	r4, r0
 80039aa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80039ae:	f017 fa5f 	bl	801ae70 <_ZdlPvj>
 80039b2:	4620      	mov	r0, r4
 80039b4:	bd10      	pop	{r4, pc}

080039b6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80039b6:	b510      	push	{r4, lr}
 80039b8:	4604      	mov	r4, r0
    {
        model.tick();
 80039ba:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80039be:	f000 f812 	bl	80039e6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80039c2:	4620      	mov	r0, r4
    }
 80039c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80039c8:	f00b bc7a 	b.w	800f2c0 <_ZN8touchgfx11Application15handleTickEventEv>

080039cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80039cc:	b510      	push	{r4, lr}
 80039ce:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80039d0:	f7fe fede 	bl	8002790 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80039d4:	4b01      	ldr	r3, [pc, #4]	; (80039dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80039d6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80039d8:	6023      	str	r3, [r4, #0]
}
 80039da:	bd10      	pop	{r4, pc}
 80039dc:	0801d0b4 	.word	0x0801d0b4

080039e0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80039e0:	2200      	movs	r2, #0
 80039e2:	6002      	str	r2, [r0, #0]
{

}
 80039e4:	4770      	bx	lr

080039e6 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80039e6:	4770      	bx	lr

080039e8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80039e8:	4770      	bx	lr

080039ea <_ZThn4_N16Screen1PresenterD1Ev>:
 80039ea:	3804      	subs	r0, #4
 80039ec:	4770      	bx	lr

080039ee <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80039ee:	4770      	bx	lr

080039f0 <_ZN16Screen1PresenterD0Ev>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4604      	mov	r4, r0
 80039f4:	2110      	movs	r1, #16
 80039f6:	f017 fa3b 	bl	801ae70 <_ZdlPvj>
 80039fa:	4620      	mov	r0, r4
 80039fc:	bd10      	pop	{r4, pc}

080039fe <_ZThn4_N16Screen1PresenterD0Ev>:
 80039fe:	f1a0 0004 	sub.w	r0, r0, #4
 8003a02:	e7f5      	b.n	80039f0 <_ZN16Screen1PresenterD0Ev>

08003a04 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003a04:	2200      	movs	r2, #0
    : view(v)
 8003a06:	60c1      	str	r1, [r0, #12]
 8003a08:	6082      	str	r2, [r0, #8]
 8003a0a:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003a0c:	b510      	push	{r4, lr}
    : view(v)
 8003a0e:	f102 0408 	add.w	r4, r2, #8
 8003a12:	3220      	adds	r2, #32
 8003a14:	6004      	str	r4, [r0, #0]
 8003a16:	6042      	str	r2, [r0, #4]
}
 8003a18:	bd10      	pop	{r4, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0801d0f0 	.word	0x0801d0f0

08003a20 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003a20:	4770      	bx	lr

08003a22 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003a22:	4770      	bx	lr

08003a24 <_ZN11Screen1View19buttonSwitchClickedEv>:
{
	fillBuffer(7);
}
void Screen1View::buttonSwitchClicked()
{
	switchPressed = !switchPressed;
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <_ZN11Screen1View19buttonSwitchClickedEv+0x14>)
 8003a26:	7813      	ldrb	r3, [r2, #0]
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	7013      	strb	r3, [r2, #0]
	dotPressed = 0;
 8003a30:	2200      	movs	r2, #0
 8003a32:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <_ZN11Screen1View19buttonSwitchClickedEv+0x18>)
 8003a34:	701a      	strb	r2, [r3, #0]
}
 8003a36:	4770      	bx	lr
 8003a38:	240017d0 	.word	0x240017d0
 8003a3c:	240017bc 	.word	0x240017bc

08003a40 <_ZN11Screen1View16buttonDotClickedEv>:
	textAreaMI.invalidate();
	textAreaFreq.invalidate();
}
void Screen1View::buttonDotClicked()
{
	dotPressed = 1;
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <_ZN11Screen1View16buttonDotClickedEv+0x8>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
}
 8003a46:	4770      	bx	lr
 8003a48:	240017bc 	.word	0x240017bc

08003a4c <_ZN11Screen1View17buttonFreqToggledEv>:
void Screen1View::buttonFreqToggled()
{
	freqReady = 1;
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <_ZN11Screen1View17buttonFreqToggledEv+0x8>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
}
 8003a52:	4770      	bx	lr
 8003a54:	240017bd 	.word	0x240017bd

08003a58 <_ZN11Screen1View15buttonMIToggledEv>:
void Screen1View::buttonMIToggled()
{
	miReady = 1;
 8003a58:	4b01      	ldr	r3, [pc, #4]	; (8003a60 <_ZN11Screen1View15buttonMIToggledEv+0x8>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
}
 8003a5e:	4770      	bx	lr
 8003a60:	240017c8 	.word	0x240017c8

08003a64 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003a64:	f7ff b828 	b.w	8002ab8 <_ZN15Screen1ViewBase11setupScreenEv>

08003a68 <_ZN11Screen1View18buttonPowerClickedEv>:
void Screen1View::buttonPowerClicked()
{
 8003a68:	b508      	push	{r3, lr}
	buttonClearClicked();
 8003a6a:	6803      	ldr	r3, [r0, #0]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4798      	blx	r3
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <_ZN11Screen1View18buttonPowerClickedEv+0x18>)
 8003a72:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8003a84 <_ZN11Screen1View18buttonPowerClickedEv+0x1c>
 8003a76:	6818      	ldr	r0, [r3, #0]
}
 8003a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 8003a7c:	f7fc bed2 	b.w	8000824 <adjustMIAndFreq>
 8003a80:	240017c0 	.word	0x240017c0
 8003a84:	00000000 	.word	0x00000000

08003a88 <_ZN11Screen1ViewD0Ev>:
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	f240 61d4 	movw	r1, #1748	; 0x6d4
 8003a90:	f017 f9ee 	bl	801ae70 <_ZdlPvj>
 8003a94:	4620      	mov	r0, r4
 8003a96:	bd10      	pop	{r4, pc}

08003a98 <_ZN11Screen1View17buttonSendClickedEv>:
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <_ZN11Screen1View17buttonSendClickedEv+0x5c>)
{
 8003a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8003a9c:	781a      	ldrb	r2, [r3, #0]
{
 8003a9e:	4604      	mov	r4, r0
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8003aa0:	2a01      	cmp	r2, #1
 8003aa2:	d124      	bne.n	8003aee <_ZN11Screen1View17buttonSendClickedEv+0x56>
 8003aa4:	4e14      	ldr	r6, [pc, #80]	; (8003af8 <_ZN11Screen1View17buttonSendClickedEv+0x60>)
 8003aa6:	7832      	ldrb	r2, [r6, #0]
 8003aa8:	2a01      	cmp	r2, #1
 8003aaa:	d120      	bne.n	8003aee <_ZN11Screen1View17buttonSendClickedEv+0x56>
 	   dotPressed = 0;
 8003aac:	2500      	movs	r5, #0
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <_ZN11Screen1View17buttonSendClickedEv+0x64>)
 	   toggleButtonMI.forceState(0);
 8003ab0:	f200 6014 	addw	r0, r0, #1556	; 0x614
 8003ab4:	4629      	mov	r1, r5
 	   miReady = 0;
 8003ab6:	701d      	strb	r5, [r3, #0]
 	   dotPressed = 0;
 8003ab8:	7015      	strb	r5, [r2, #0]
 	   toggleButtonMI.forceState(0);
 8003aba:	9001      	str	r0, [sp, #4]
 8003abc:	f008 ff46 	bl	800c94c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonMI.invalidate();
 8003ac0:	9801      	ldr	r0, [sp, #4]
 8003ac2:	f00c fcab 	bl	801041c <_ZNK8touchgfx8Drawable10invalidateEv>
 	   toggleButtonFreq.forceState(0);
 8003ac6:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8003aca:	4629      	mov	r1, r5
 	   freqReady = 0;
 8003acc:	7035      	strb	r5, [r6, #0]
 	   toggleButtonFreq.forceState(0);
 8003ace:	9001      	str	r0, [sp, #4]
 8003ad0:	f008 ff3c 	bl	800c94c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonFreq.invalidate();
 8003ad4:	9801      	ldr	r0, [sp, #4]
 8003ad6:	f00c fca1 	bl	801041c <_ZNK8touchgfx8Drawable10invalidateEv>
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <_ZN11Screen1View17buttonSendClickedEv+0x68>)
 8003adc:	ed93 0a00 	vldr	s0, [r3]
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <_ZN11Screen1View17buttonSendClickedEv+0x6c>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
}
 8003ae4:	b002      	add	sp, #8
 8003ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 8003aea:	f7fc be9b 	b.w	8000824 <adjustMIAndFreq>
}
 8003aee:	b002      	add	sp, #8
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	bf00      	nop
 8003af4:	240017c8 	.word	0x240017c8
 8003af8:	240017bd 	.word	0x240017bd
 8003afc:	240017bc 	.word	0x240017bc
 8003b00:	240017cc 	.word	0x240017cc
 8003b04:	240017c0 	.word	0x240017c0

08003b08 <_ZN11Screen1View18buttonClearClickedEv>:
{
 8003b08:	b5f0      	push	{r4, r5, r6, r7, lr}
	dotPressed = 0;
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <_ZN11Screen1View18buttonClearClickedEv+0x7c>)
 8003b0c:	2500      	movs	r5, #0
{
 8003b0e:	b085      	sub	sp, #20
 8003b10:	4604      	mov	r4, r0
	dotPressed = 0;
 8003b12:	701d      	strb	r5, [r3, #0]
	toggleButtonMI.forceState(0);
 8003b14:	f200 6014 	addw	r0, r0, #1556	; 0x614
	freqReady = 0;
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <_ZN11Screen1View18buttonClearClickedEv+0x80>)
	toggleButtonMI.forceState(0);
 8003b1a:	4629      	mov	r1, r5
	miScreenBuffer = 0.0;
 8003b1c:	4f1b      	ldr	r7, [pc, #108]	; (8003b8c <_ZN11Screen1View18buttonClearClickedEv+0x84>)
	freqReady = 0;
 8003b1e:	701d      	strb	r5, [r3, #0]
	miReady = 0;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <_ZN11Screen1View18buttonClearClickedEv+0x88>)
	freqScreenBuffer = 0;
 8003b22:	4e1c      	ldr	r6, [pc, #112]	; (8003b94 <_ZN11Screen1View18buttonClearClickedEv+0x8c>)
	miReady = 0;
 8003b24:	701d      	strb	r5, [r3, #0]
	miBuffer = 0;
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <_ZN11Screen1View18buttonClearClickedEv+0x90>)
	toggleButtonMI.forceState(0);
 8003b28:	9001      	str	r0, [sp, #4]
	miBuffer = 0;
 8003b2a:	601d      	str	r5, [r3, #0]
	miScreenBuffer = 0.0;
 8003b2c:	2300      	movs	r3, #0
	freqScreenBuffer = 0;
 8003b2e:	6035      	str	r5, [r6, #0]
	miScreenBuffer = 0.0;
 8003b30:	603b      	str	r3, [r7, #0]
	toggleButtonMI.forceState(0);
 8003b32:	f008 ff0b 	bl	800c94c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonMI.invalidate();
 8003b36:	9801      	ldr	r0, [sp, #4]
 8003b38:	f00c fc70 	bl	801041c <_ZNK8touchgfx8Drawable10invalidateEv>
	toggleButtonFreq.forceState(0);
 8003b3c:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8003b40:	4629      	mov	r1, r5
 8003b42:	9001      	str	r0, [sp, #4]
 8003b44:	f008 ff02 	bl	800c94c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonFreq.invalidate();
 8003b48:	9801      	ldr	r0, [sp, #4]
 8003b4a:	f00c fc67 	bl	801041c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(textAreaMIBuffer, 4, "%3.2f", miScreenBuffer);
 8003b4e:	683b      	ldr	r3, [r7, #0]
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8003b50:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <_ZN11Screen1View18buttonClearClickedEv+0x94>)
 8003b52:	2104      	movs	r1, #4
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	f204 60ba 	addw	r0, r4, #1722	; 0x6ba
 8003b5a:	ab03      	add	r3, sp, #12
 8003b5c:	f00e fdb0 	bl	80126c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8003b60:	6833      	ldr	r3, [r6, #0]
 8003b62:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <_ZN11Screen1View18buttonClearClickedEv+0x98>)
 8003b64:	2103      	movs	r1, #3
 8003b66:	f204 60b4 	addw	r0, r4, #1716	; 0x6b4
 8003b6a:	f00e fbeb 	bl	8012344 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaMI.invalidate();
 8003b6e:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8003b72:	f00c fc53 	bl	801041c <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaFreq.invalidate();
 8003b76:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8003b7a:	f00c fc4f 	bl	801041c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8003b7e:	b005      	add	sp, #20
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	240017bc 	.word	0x240017bc
 8003b88:	240017bd 	.word	0x240017bd
 8003b8c:	240017cc 	.word	0x240017cc
 8003b90:	240017c8 	.word	0x240017c8
 8003b94:	240017c0 	.word	0x240017c0
 8003b98:	240017c4 	.word	0x240017c4
 8003b9c:	0801d118 	.word	0x0801d118
 8003ba0:	0801d11e 	.word	0x0801d11e

08003ba4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	f7ff f8fc 	bl	8002da4 <_ZN15Screen1ViewBaseC1Ev>
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8003bae:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8003bb0:	6023      	str	r3, [r4, #0]
}
 8003bb2:	bd10      	pop	{r4, pc}
 8003bb4:	0801d130 	.word	0x0801d130

08003bb8 <_ZN11Screen1View10fillBufferEh>:
	if(switchPressed == 1)
 8003bb8:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <_ZN11Screen1View10fillBufferEh+0x90>)
{
 8003bba:	b513      	push	{r0, r1, r4, lr}
	if(switchPressed == 1)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
{
 8003bbe:	4604      	mov	r4, r0
	if(switchPressed == 1)
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d131      	bne.n	8003c28 <_ZN11Screen1View10fillBufferEh+0x70>
			if(dotPressed == 0)
 8003bc4:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <_ZN11Screen1View10fillBufferEh+0x94>)
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8003bc6:	ee07 1a90 	vmov	s15, r1
 8003bca:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <_ZN11Screen1View10fillBufferEh+0x98>)
			if(dotPressed == 0)
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	ed93 6a00 	vldr	s12, [r3]
 8003bd2:	b9e2      	cbnz	r2, 8003c0e <_ZN11Screen1View10fillBufferEh+0x56>
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8003bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003bdc:	eea6 7a27 	vfma.f32	s14, s12, s15
		miBuffer = (miBuffer*10) + foo;
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <_ZN11Screen1View10fillBufferEh+0x9c>)
 8003be2:	200a      	movs	r0, #10
 8003be4:	ed83 7a00 	vstr	s14, [r3]
 8003be8:	6813      	ldr	r3, [r2, #0]
 8003bea:	ed8d 7a01 	vstr	s14, [sp, #4]
 8003bee:	fb00 1103 	mla	r1, r0, r3, r1
 8003bf2:	ab01      	add	r3, sp, #4
 8003bf4:	f204 60ba 	addw	r0, r4, #1722	; 0x6ba
 8003bf8:	6011      	str	r1, [r2, #0]
 8003bfa:	2104      	movs	r1, #4
 8003bfc:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <_ZN11Screen1View10fillBufferEh+0xa0>)
 8003bfe:	f00e fd5f 	bl	80126c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
		textAreaMI.invalidate();
 8003c02:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
		textAreaFreq.invalidate();
 8003c06:	f00c fc09 	bl	801041c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8003c0a:	b002      	add	sp, #8
 8003c0c:	bd10      	pop	{r4, pc}
				miScreenBuffer = miScreenBuffer + (foo/10.0);
 8003c0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003c12:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003c16:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003c1a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003c1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c22:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003c26:	e7db      	b.n	8003be0 <_ZN11Screen1View10fillBufferEh+0x28>
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8003c28:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <_ZN11Screen1View10fillBufferEh+0xa4>)
 8003c2a:	200a      	movs	r0, #10
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	fb00 1303 	mla	r3, r0, r3, r1
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8003c32:	2103      	movs	r1, #3
 8003c34:	f204 60b4 	addw	r0, r4, #1716	; 0x6b4
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8003c38:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8003c3a:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <_ZN11Screen1View10fillBufferEh+0xa8>)
 8003c3c:	f00e fb82 	bl	8012344 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaFreq.invalidate();
 8003c40:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8003c44:	e7df      	b.n	8003c06 <_ZN11Screen1View10fillBufferEh+0x4e>
 8003c46:	bf00      	nop
 8003c48:	240017d0 	.word	0x240017d0
 8003c4c:	240017bc 	.word	0x240017bc
 8003c50:	240017cc 	.word	0x240017cc
 8003c54:	240017c4 	.word	0x240017c4
 8003c58:	0801d121 	.word	0x0801d121
 8003c5c:	240017c0 	.word	0x240017c0
 8003c60:	0801d11e 	.word	0x0801d11e

08003c64 <_ZN11Screen1View14button9ClickedEv>:
	fillBuffer(9);
 8003c64:	2109      	movs	r1, #9
 8003c66:	f7ff bfa7 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c6a <_ZN11Screen1View14button8ClickedEv>:
	fillBuffer(8);
 8003c6a:	2108      	movs	r1, #8
 8003c6c:	f7ff bfa4 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c70 <_ZN11Screen1View14button0ClickedEv>:
	fillBuffer(0);
 8003c70:	2100      	movs	r1, #0
 8003c72:	f7ff bfa1 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c76 <_ZN11Screen1View14button3ClickedEv>:
	fillBuffer(3);
 8003c76:	2103      	movs	r1, #3
 8003c78:	f7ff bf9e 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c7c <_ZN11Screen1View14button2ClickedEv>:
	fillBuffer(2);
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	f7ff bf9b 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c82 <_ZN11Screen1View14button1ClickedEv>:
	fillBuffer(1);
 8003c82:	2101      	movs	r1, #1
 8003c84:	f7ff bf98 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c88 <_ZN11Screen1View14button6ClickedEv>:
	fillBuffer(6);
 8003c88:	2106      	movs	r1, #6
 8003c8a:	f7ff bf95 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c8e <_ZN11Screen1View14button5ClickedEv>:
	fillBuffer(5);
 8003c8e:	2105      	movs	r1, #5
 8003c90:	f7ff bf92 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c94 <_ZN11Screen1View14button4ClickedEv>:
	fillBuffer(4);
 8003c94:	2104      	movs	r1, #4
 8003c96:	f7ff bf8f 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003c9a <_ZN11Screen1View14button7ClickedEv>:
	fillBuffer(7);
 8003c9a:	2107      	movs	r1, #7
 8003c9c:	f7ff bf8c 	b.w	8003bb8 <_ZN11Screen1View10fillBufferEh>

08003ca0 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8003ca0:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003ca4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8003ca8:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8003caa:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8003cac:	2305      	movs	r3, #5
 8003cae:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003cb0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003cb4:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8003cb8:	4770      	bx	lr

08003cba <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8003cba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003cbe:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8003cc0:	bf04      	itt	eq
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8003cc8:	2000      	movs	r0, #0
 8003cca:	4770      	bx	lr

08003ccc <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8003ccc:	2000      	movs	r0, #0
 8003cce:	4770      	bx	lr

08003cd0 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003cd0:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003cd2:	6904      	ldr	r4, [r0, #16]
 8003cd4:	8900      	ldrh	r0, [r0, #8]
 8003cd6:	46a4      	mov	ip, r4
}
 8003cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003cdc:	4760      	bx	ip

08003cde <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003cde:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003ce0:	68c4      	ldr	r4, [r0, #12]
 8003ce2:	8900      	ldrh	r0, [r0, #8]
 8003ce4:	46a4      	mov	ip, r4
}
 8003ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003cea:	4760      	bx	ip

08003cec <FT5336_GestureConfig>:
{
 8003cec:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003cf0:	f100 0818 	add.w	r8, r0, #24
{
 8003cf4:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003cf6:	7809      	ldrb	r1, [r1, #0]
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	f000 f8fb 	bl	8003ef4 <ft5336_radian_value>
 8003cfe:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003d00:	f899 1004 	ldrb.w	r1, [r9, #4]
 8003d04:	4640      	mov	r0, r8
 8003d06:	f000 f901 	bl	8003f0c <ft5336_offset_left_right>
 8003d0a:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003d0c:	f899 1008 	ldrb.w	r1, [r9, #8]
 8003d10:	4640      	mov	r0, r8
 8003d12:	f000 f907 	bl	8003f24 <ft5336_offset_up_down>
 8003d16:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8003d18:	f899 100c 	ldrb.w	r1, [r9, #12]
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	f000 f90d 	bl	8003f3c <ft5336_disatnce_left_right>
 8003d22:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003d24:	f899 1010 	ldrb.w	r1, [r9, #16]
 8003d28:	4640      	mov	r0, r8
 8003d2a:	f000 f913 	bl	8003f54 <ft5336_distance_up_down>
 8003d2e:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003d30:	f899 1014 	ldrb.w	r1, [r9, #20]
 8003d34:	4640      	mov	r0, r8
 8003d36:	f000 f919 	bl	8003f6c <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8003d3a:	42c5      	cmn	r5, r0
}
 8003d3c:	bf14      	ite	ne
 8003d3e:	f04f 30ff 	movne.w	r0, #4294967295
 8003d42:	2000      	moveq	r0, #0
 8003d44:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08003d48 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003d48:	3018      	adds	r0, #24
 8003d4a:	f000 b927 	b.w	8003f9c <ft5336_chip_id>

08003d4e <FT5336_GetMultiTouchState>:
{
 8003d4e:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003d50:	f100 0518 	add.w	r5, r0, #24
{
 8003d54:	b088      	sub	sp, #32
 8003d56:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003d58:	4628      	mov	r0, r5
 8003d5a:	4669      	mov	r1, sp
 8003d5c:	f000 f8bd 	bl	8003eda <ft5336_td_status>
 8003d60:	bb98      	cbnz	r0, 8003dca <FT5336_GetMultiTouchState+0x7c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003d62:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	bf98      	it	ls
 8003d6a:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003d6c:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003d6e:	231e      	movs	r3, #30
 8003d70:	466a      	mov	r2, sp
 8003d72:	2103      	movs	r1, #3
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 f89d 	bl	8003eb4 <ft5336_read_reg>
 8003d7a:	bb48      	cbnz	r0, 8003dd0 <FT5336_GetMultiTouchState+0x82>
 8003d7c:	466b      	mov	r3, sp
 8003d7e:	1d22      	adds	r2, r4, #4
 8003d80:	f104 0118 	add.w	r1, r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003d84:	781d      	ldrb	r5, [r3, #0]
 8003d86:	3306      	adds	r3, #6
 8003d88:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8003d8c:	022c      	lsls	r4, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003d8e:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003d90:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8003d94:	4334      	orrs	r4, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003d96:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003d9a:	f842 4b04 	str.w	r4, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003d9e:	4291      	cmp	r1, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003da0:	f813 4c04 	ldrb.w	r4, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003da4:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003da6:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8003daa:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8003dae:	ea44 0406 	orr.w	r4, r4, r6
 8003db2:	6114      	str	r4, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8003db4:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8003db8:	6254      	str	r4, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003dba:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8003dbe:	ea4f 1414 	mov.w	r4, r4, lsr #4
 8003dc2:	64d4      	str	r4, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003dc4:	d1de      	bne.n	8003d84 <FT5336_GetMultiTouchState+0x36>
}
 8003dc6:	b008      	add	sp, #32
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8003dca:	f04f 30ff 	mov.w	r0, #4294967295
 8003dce:	e7cd      	b.n	8003d6c <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003dd4:	e7f7      	b.n	8003dc6 <FT5336_GetMultiTouchState+0x78>

08003dd6 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003dd6:	3018      	adds	r0, #24
 8003dd8:	f000 b87a 	b.w	8003ed0 <ft5336_gest_id>

08003ddc <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003ddc:	2101      	movs	r1, #1
 8003dde:	3018      	adds	r0, #24
 8003de0:	f000 b8d0 	b.w	8003f84 <ft5336_g_mode>

08003de4 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8003de4:	2100      	movs	r1, #0
 8003de6:	3018      	adds	r0, #24
 8003de8:	f000 b8cc 	b.w	8003f84 <ft5336_g_mode>

08003dec <FT5336_Init>:
{
 8003dec:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8003dee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003df2:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8003df4:	b96b      	cbnz	r3, 8003e12 <FT5336_Init+0x26>
    pObj->IO.Init();
 8003df6:	6803      	ldr	r3, [r0, #0]
 8003df8:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7ff fff2 	bl	8003de4 <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8003e00:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8003e02:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8003e06:	bf18      	it	ne
 8003e08:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8003e0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8003e0e:	4240      	negs	r0, r0
}
 8003e10:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8003e12:	2000      	movs	r0, #0
  return ret;
 8003e14:	e7fc      	b.n	8003e10 <FT5336_Init+0x24>

08003e16 <FT5336_ClearIT>:
 8003e16:	2000      	movs	r0, #0
 8003e18:	4770      	bx	lr

08003e1a <FT5336_GetState>:
{
 8003e1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003e1c:	f100 0518 	add.w	r5, r0, #24
{
 8003e20:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003e22:	a901      	add	r1, sp, #4
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 f858 	bl	8003eda <ft5336_td_status>
 8003e2a:	bb08      	cbnz	r0, 8003e70 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003e2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	bf98      	it	ls
 8003e34:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003e36:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003e38:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	eb0d 0203 	add.w	r2, sp, r3
 8003e42:	f000 f837 	bl	8003eb4 <ft5336_read_reg>
 8003e46:	b9b0      	cbnz	r0, 8003e76 <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003e48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e56:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003e58:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003e5c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003e5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60a3      	str	r3, [r4, #8]
}
 8003e6c:	b003      	add	sp, #12
 8003e6e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	e7df      	b.n	8003e36 <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003e7a:	e7f7      	b.n	8003e6c <FT5336_GetState+0x52>

08003e7c <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003e7c:	b190      	cbz	r0, 8003ea4 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8003e7e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8003e80:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003e82:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8003e84:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8003e86:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8003e88:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003e8a:	68ca      	ldr	r2, [r1, #12]
 8003e8c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e8e:	690a      	ldr	r2, [r1, #16]
 8003e90:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e92:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8003e94:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e96:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8003e98:	4a04      	ldr	r2, [pc, #16]	; (8003eac <FT5336_RegisterBusIO+0x30>)
 8003e9a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <FT5336_RegisterBusIO+0x34>)
 8003e9e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8003ea0:	b103      	cbz	r3, 8003ea4 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8003ea2:	4718      	bx	r3
}
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	08003cd1 	.word	0x08003cd1
 8003eb0:	08003cdf 	.word	0x08003cdf

08003eb4 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003eb4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003eb6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8003eba:	46a4      	mov	ip, r4
}
 8003ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003ec0:	4760      	bx	ip

08003ec2 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8003ec2:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003ec4:	6804      	ldr	r4, [r0, #0]
 8003ec6:	6880      	ldr	r0, [r0, #8]
 8003ec8:	46a4      	mov	ip, r4
}
 8003eca:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003ece:	4760      	bx	ip

08003ed0 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003ed0:	2301      	movs	r3, #1
{
 8003ed2:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7ff bfed 	b.w	8003eb4 <ft5336_read_reg>

08003eda <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003eda:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003edc:	460a      	mov	r2, r1
{
 8003ede:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	f7ff ffe6 	bl	8003eb4 <ft5336_read_reg>
  
  if(ret == 0)
 8003ee8:	b918      	cbnz	r0, 8003ef2 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003eea:	7823      	ldrb	r3, [r4, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003ef4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003ef6:	2301      	movs	r3, #1
{
 8003ef8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003efc:	f10d 0207 	add.w	r2, sp, #7
 8003f00:	2191      	movs	r1, #145	; 0x91
 8003f02:	f7ff ffde 	bl	8003ec2 <ft5336_write_reg>
}
 8003f06:	b003      	add	sp, #12
 8003f08:	f85d fb04 	ldr.w	pc, [sp], #4

08003f0c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f0c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003f0e:	2301      	movs	r3, #1
{
 8003f10:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003f14:	f10d 0207 	add.w	r2, sp, #7
 8003f18:	2192      	movs	r1, #146	; 0x92
 8003f1a:	f7ff ffd2 	bl	8003ec2 <ft5336_write_reg>
}
 8003f1e:	b003      	add	sp, #12
 8003f20:	f85d fb04 	ldr.w	pc, [sp], #4

08003f24 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f24:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003f26:	2301      	movs	r3, #1
{
 8003f28:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003f2c:	f10d 0207 	add.w	r2, sp, #7
 8003f30:	2193      	movs	r1, #147	; 0x93
 8003f32:	f7ff ffc6 	bl	8003ec2 <ft5336_write_reg>
}
 8003f36:	b003      	add	sp, #12
 8003f38:	f85d fb04 	ldr.w	pc, [sp], #4

08003f3c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f3c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003f3e:	2301      	movs	r3, #1
{
 8003f40:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003f44:	f10d 0207 	add.w	r2, sp, #7
 8003f48:	2194      	movs	r1, #148	; 0x94
 8003f4a:	f7ff ffba 	bl	8003ec2 <ft5336_write_reg>
}
 8003f4e:	b003      	add	sp, #12
 8003f50:	f85d fb04 	ldr.w	pc, [sp], #4

08003f54 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f54:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003f56:	2301      	movs	r3, #1
{
 8003f58:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003f5c:	f10d 0207 	add.w	r2, sp, #7
 8003f60:	2195      	movs	r1, #149	; 0x95
 8003f62:	f7ff ffae 	bl	8003ec2 <ft5336_write_reg>
}
 8003f66:	b003      	add	sp, #12
 8003f68:	f85d fb04 	ldr.w	pc, [sp], #4

08003f6c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f6c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003f6e:	2301      	movs	r3, #1
{
 8003f70:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003f74:	f10d 0207 	add.w	r2, sp, #7
 8003f78:	2196      	movs	r1, #150	; 0x96
 8003f7a:	f7ff ffa2 	bl	8003ec2 <ft5336_write_reg>
}
 8003f7e:	b003      	add	sp, #12
 8003f80:	f85d fb04 	ldr.w	pc, [sp], #4

08003f84 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f84:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003f86:	2301      	movs	r3, #1
{
 8003f88:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003f8c:	f10d 0207 	add.w	r2, sp, #7
 8003f90:	21a4      	movs	r1, #164	; 0xa4
 8003f92:	f7ff ff96 	bl	8003ec2 <ft5336_write_reg>
}
 8003f96:	b003      	add	sp, #12
 8003f98:	f85d fb04 	ldr.w	pc, [sp], #4

08003f9c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003f9c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	21a8      	movs	r1, #168	; 0xa8
 8003fa2:	f7ff bf87 	b.w	8003eb4 <ft5336_read_reg>

08003fa6 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8003fa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003fae:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8003fb2:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8003fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fbe:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003fc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8003fc6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003fca:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fd0:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	4770      	bx	lr

08003fd8 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	b09a      	sub	sp, #104	; 0x68
 8003fdc:	460d      	mov	r5, r1
 8003fde:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003fe0:	2100      	movs	r1, #0
{
 8003fe2:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003fe4:	a806      	add	r0, sp, #24
 8003fe6:	2250      	movs	r2, #80	; 0x50
 8003fe8:	f017 f8e4 	bl	801b1b4 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003fec:	2214      	movs	r2, #20
 8003fee:	2100      	movs	r1, #0
 8003ff0:	a801      	add	r0, sp, #4
 8003ff2:	f017 f8df 	bl	801b1b4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003ff6:	b92d      	cbnz	r5, 8004004 <MX25LM51245G_AutoPollingMemReady+0x2c>
 8003ff8:	2c01      	cmp	r4, #1
 8003ffa:	d103      	bne.n	8004004 <MX25LM51245G_AutoPollingMemReady+0x2c>
  {
    return MX25LM51245G_ERROR;
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004000:	b01a      	add	sp, #104	; 0x68
 8004002:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8004004:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004006:	a906      	add	r1, sp, #24
 8004008:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800400a:	429d      	cmp	r5, r3
  s_command.Address            = 0U;
 800400c:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800400e:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004010:	bf0c      	ite	eq
 8004012:	2201      	moveq	r2, #1
 8004014:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004016:	2c01      	cmp	r4, #1
  s_config.Match         = 0U;
 8004018:	9301      	str	r3, [sp, #4]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800401a:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800401c:	bf14      	ite	ne
 800401e:	461a      	movne	r2, r3
 8004020:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004022:	429d      	cmp	r5, r3
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004024:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004026:	bf0c      	ite	eq
 8004028:	461a      	moveq	r2, r3
 800402a:	2210      	movne	r2, #16
 800402c:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800402e:	f240 52fa 	movw	r2, #1530	; 0x5fa
 8004032:	bf08      	it	eq
 8004034:	2205      	moveq	r2, #5
 8004036:	9208      	str	r2, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8004038:	bf0c      	ite	eq
 800403a:	461a      	moveq	r2, r3
 800403c:	f44f 6280 	movne.w	r2, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004040:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8004042:	920d      	str	r2, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004044:	bf14      	ite	ne
 8004046:	461a      	movne	r2, r3
 8004048:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800404c:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800404e:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004050:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004054:	920e      	str	r2, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004056:	bf0c      	ite	eq
 8004058:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 800405c:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004060:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004062:	9214      	str	r2, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004064:	bf14      	ite	ne
 8004066:	461a      	movne	r2, r3
 8004068:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800406c:	429d      	cmp	r5, r3
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800406e:	9216      	str	r2, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004070:	bf0c      	ite	eq
 8004072:	461a      	moveq	r2, r3
 8004074:	2205      	movne	r2, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004076:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004078:	9217      	str	r2, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800407a:	bf0c      	ite	eq
 800407c:	2202      	moveq	r2, #2
 800407e:	2201      	movne	r2, #1
 8004080:	9215      	str	r2, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8004082:	bf14      	ite	ne
 8004084:	461a      	movne	r2, r3
 8004086:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800408a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800408e:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8004090:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8004094:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004098:	2210      	movs	r2, #16
 800409a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800409e:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	f002 fbd0 	bl	800684a <HAL_OSPI_Command>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d1a6      	bne.n	8003ffc <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	a901      	add	r1, sp, #4
 80040b4:	4630      	mov	r0, r6
 80040b6:	f002 fd05 	bl	8006ac4 <HAL_OSPI_AutoPolling>
 80040ba:	3800      	subs	r0, #0
 80040bc:	bf18      	it	ne
 80040be:	2001      	movne	r0, #1
 80040c0:	4240      	negs	r0, r0
 80040c2:	e79d      	b.n	8004000 <MX25LM51245G_AutoPollingMemReady+0x28>

080040c4 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	b096      	sub	sp, #88	; 0x58
 80040c8:	460c      	mov	r4, r1
 80040ca:	4606      	mov	r6, r0
 80040cc:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 80040ce:	2100      	movs	r1, #0
 80040d0:	2250      	movs	r2, #80	; 0x50
 80040d2:	a802      	add	r0, sp, #8
 80040d4:	f017 f86e 	bl	801b1b4 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80040d8:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80040da:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80040dc:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80040e0:	d104      	bne.n	80040ec <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 80040e2:	b91d      	cbnz	r5, 80040ec <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80040e8:	b016      	add	sp, #88	; 0x58
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80040ec:	2300      	movs	r3, #0
 80040ee:	2101      	movs	r1, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040f0:	429c      	cmp	r4, r3
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040f2:	9307      	str	r3, [sp, #28]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040f4:	bf0c      	ite	eq
 80040f6:	2201      	moveq	r2, #1
 80040f8:	2204      	movne	r2, #4
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80040fa:	e9cd 1302 	strd	r1, r3, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040fe:	bf18      	it	ne
 8004100:	2310      	movne	r3, #16
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004102:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004104:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8004106:	d146      	bne.n	8004196 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd2>
 8004108:	2d00      	cmp	r5, #0
 800410a:	bf0c      	ite	eq
 800410c:	230b      	moveq	r3, #11
 800410e:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004110:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8004112:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004114:	a902      	add	r1, sp, #8
 8004116:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004118:	bf0c      	ite	eq
 800411a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800411e:	f44f 6380 	movne.w	r3, #1024	; 0x400
 8004122:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004124:	2300      	movs	r3, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8004126:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004128:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800412a:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800412c:	bf0c      	ite	eq
 800412e:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8004132:	f44f 5240 	movne.w	r2, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004136:	429c      	cmp	r4, r3
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8004138:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800413a:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800413c:	bf0c      	ite	eq
 800413e:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 8004142:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8004146:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004148:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800414a:	bf0c      	ite	eq
 800414c:	2208      	moveq	r2, #8
 800414e:	2206      	movne	r2, #6
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8004150:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	f002 fb77 	bl	800684a <HAL_OSPI_Command>
 800415c:	2800      	cmp	r0, #0
 800415e:	d1c1      	bne.n	80040e4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8004160:	2302      	movs	r3, #2
 8004162:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8004164:	b9d4      	cbnz	r4, 800419c <MX25LM51245G_EnableSTRMemoryMappedMode+0xd8>
 8004166:	2d00      	cmp	r5, #0
 8004168:	bf18      	it	ne
 800416a:	2312      	movne	r3, #18
 800416c:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 800416e:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004170:	f241 3288 	movw	r2, #5000	; 0x1388
 8004174:	a902      	add	r1, sp, #8
 8004176:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 8004178:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800417a:	f002 fb66 	bl	800684a <HAL_OSPI_Command>
 800417e:	2800      	cmp	r0, #0
 8004180:	d1b0      	bne.n	80040e4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8004182:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8004184:	4669      	mov	r1, sp
 8004186:	4630      	mov	r0, r6
 8004188:	f002 fcec 	bl	8006b64 <HAL_OSPI_MemoryMapped>
 800418c:	3800      	subs	r0, #0
 800418e:	bf18      	it	ne
 8004190:	2001      	movne	r0, #1
 8004192:	4240      	negs	r0, r0
 8004194:	e7a8      	b.n	80040e8 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8004196:	f64e 4313 	movw	r3, #60435	; 0xec13
 800419a:	e7b9      	b.n	8004110 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800419c:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80041a0:	e7e4      	b.n	800416c <MX25LM51245G_EnableSTRMemoryMappedMode+0xa8>

080041a2 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80041a2:	b510      	push	{r4, lr}
 80041a4:	b096      	sub	sp, #88	; 0x58
 80041a6:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80041a8:	2228      	movs	r2, #40	; 0x28
 80041aa:	2100      	movs	r1, #0
 80041ac:	a808      	add	r0, sp, #32
 80041ae:	f017 f801 	bl	801b1b4 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80041b2:	2300      	movs	r3, #0

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80041b4:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80041b6:	2008      	movs	r0, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80041b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80041bc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80041c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80041c4:	2204      	movs	r2, #4
 80041c6:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80041c8:	2210      	movs	r2, #16
 80041ca:	e9cd 2006 	strd	r2, r0, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80041ce:	f64e 6211 	movw	r2, #60945	; 0xee11
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041d2:	4620      	mov	r0, r4
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80041d4:	9204      	str	r2, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80041d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041da:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80041dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80041e0:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80041e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041e8:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80041ea:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80041ec:	2206      	movs	r2, #6
 80041ee:	e9cd c212 	strd	ip, r2, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80041f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80041f6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80041fe:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004202:	f002 fb22 	bl	800684a <HAL_OSPI_Command>
 8004206:	b118      	cbz	r0, 8004210 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25LM51245G_ERROR;
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800420c:	b016      	add	sp, #88	; 0x58
 800420e:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8004210:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8004218:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800421a:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800421e:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004222:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8004224:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004226:	f002 fb10 	bl	800684a <HAL_OSPI_Command>
 800422a:	2800      	cmp	r0, #0
 800422c:	d1ec      	bne.n	8004208 <MX25LM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800422e:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8004230:	4669      	mov	r1, sp
 8004232:	4620      	mov	r0, r4
 8004234:	f002 fc96 	bl	8006b64 <HAL_OSPI_MemoryMapped>
 8004238:	3800      	subs	r0, #0
 800423a:	bf18      	it	ne
 800423c:	2001      	movne	r0, #1
 800423e:	4240      	negs	r0, r0
 8004240:	e7e4      	b.n	800420c <MX25LM51245G_EnableDTRMemoryMappedMode+0x6a>

08004242 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8004242:	b570      	push	{r4, r5, r6, lr}
 8004244:	b09a      	sub	sp, #104	; 0x68
 8004246:	460c      	mov	r4, r1
 8004248:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 800424a:	2100      	movs	r1, #0
{
 800424c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 800424e:	a806      	add	r0, sp, #24
 8004250:	2250      	movs	r2, #80	; 0x50
 8004252:	f016 ffaf 	bl	801b1b4 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8004256:	2214      	movs	r2, #20
 8004258:	2100      	movs	r1, #0
 800425a:	a801      	add	r0, sp, #4
 800425c:	f016 ffaa 	bl	801b1b4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004260:	b92c      	cbnz	r4, 800426e <MX25LM51245G_WriteEnable+0x2c>
 8004262:	2d01      	cmp	r5, #1
 8004264:	d103      	bne.n	800426e <MX25LM51245G_WriteEnable+0x2c>
  {
    return MX25LM51245G_ERROR;
 8004266:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800426a:	b01a      	add	sp, #104	; 0x68
 800426c:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800426e:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004270:	a906      	add	r1, sp, #24
 8004272:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004274:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8004276:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004278:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800427a:	bf0c      	ite	eq
 800427c:	2201      	moveq	r2, #1
 800427e:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004280:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8004282:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004284:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004286:	bf0c      	ite	eq
 8004288:	2208      	moveq	r2, #8
 800428a:	461a      	movne	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800428c:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800428e:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004290:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004292:	bf0c      	ite	eq
 8004294:	461a      	moveq	r2, r3
 8004296:	2210      	movne	r2, #16
 8004298:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800429a:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800429e:	bf08      	it	eq
 80042a0:	2206      	moveq	r2, #6
 80042a2:	9208      	str	r2, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80042a8:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80042ac:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042b0:	f002 facb 	bl	800684a <HAL_OSPI_Command>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d1d6      	bne.n	8004266 <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80042b8:	2c00      	cmp	r4, #0
 80042ba:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 80042be:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80042c4:	bf08      	it	eq
 80042c6:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042c8:	a906      	add	r1, sp, #24
 80042ca:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80042cc:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80042ce:	bf0c      	ite	eq
 80042d0:	2300      	moveq	r3, #0
 80042d2:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80042d6:	2d01      	cmp	r5, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80042d8:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80042da:	bf0c      	ite	eq
 80042dc:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80042e0:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80042e2:	2c00      	cmp	r4, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80042e4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80042e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042ea:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80042ec:	bf0c      	ite	eq
 80042ee:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80042f2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80042f6:	2d01      	cmp	r5, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80042f8:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80042fa:	bf0c      	ite	eq
 80042fc:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8004300:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004302:	2c00      	cmp	r4, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004304:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004306:	bf0c      	ite	eq
 8004308:	2300      	moveq	r3, #0
 800430a:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800430c:	2d01      	cmp	r5, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800430e:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004310:	bf0c      	ite	eq
 8004312:	2302      	moveq	r3, #2
 8004314:	2301      	movne	r3, #1
 8004316:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8004318:	bf0c      	ite	eq
 800431a:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 800431e:	2300      	movne	r3, #0
 8004320:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004322:	f002 fa92 	bl	800684a <HAL_OSPI_Command>
 8004326:	2800      	cmp	r0, #0
 8004328:	d19d      	bne.n	8004266 <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 800432a:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800432c:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800432e:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004330:	a901      	add	r1, sp, #4
 8004332:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 8004334:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800433c:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	f002 fbbe 	bl	8006ac4 <HAL_OSPI_AutoPolling>
 8004348:	3800      	subs	r0, #0
 800434a:	bf18      	it	ne
 800434c:	2001      	movne	r0, #1
 800434e:	4240      	negs	r0, r0
 8004350:	e78b      	b.n	800426a <MX25LM51245G_WriteEnable+0x28>

08004352 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8004352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004354:	b095      	sub	sp, #84	; 0x54
 8004356:	460d      	mov	r5, r1
 8004358:	4606      	mov	r6, r0
 800435a:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800435c:	2100      	movs	r1, #0
 800435e:	2250      	movs	r2, #80	; 0x50
 8004360:	4668      	mov	r0, sp
{
 8004362:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8004364:	f016 ff26 	bl	801b1b4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004368:	b92d      	cbnz	r5, 8004376 <MX25LM51245G_WriteCfg2Register+0x24>
 800436a:	2c01      	cmp	r4, #1
 800436c:	d103      	bne.n	8004376 <MX25LM51245G_WriteCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 800436e:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004372:	b015      	add	sp, #84	; 0x54
 8004374:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8004376:	2200      	movs	r2, #0
  s_command.Address            = WriteAddr;
 8004378:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800437a:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800437c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004384:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004386:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004388:	bf0c      	ite	eq
 800438a:	2308      	moveq	r3, #8
 800438c:	4613      	movne	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800438e:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004390:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004392:	bf0c      	ite	eq
 8004394:	4613      	moveq	r3, r2
 8004396:	2310      	movne	r3, #16
 8004398:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800439a:	f247 238d 	movw	r3, #29325	; 0x728d
 800439e:	bf08      	it	eq
 80043a0:	2372      	moveq	r3, #114	; 0x72
 80043a2:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80043a4:	bf0c      	ite	eq
 80043a6:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80043aa:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80043ae:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80043b0:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80043b2:	bf0c      	ite	eq
 80043b4:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80043b8:	4613      	movne	r3, r2
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80043ba:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80043bc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80043be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80043c2:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80043c4:	bf0c      	ite	eq
 80043c6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80043ca:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80043ce:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80043d0:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80043d2:	bf0c      	ite	eq
 80043d4:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80043d8:	4613      	movne	r3, r2
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80043da:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.DummyCycles        = 0U;
 80043de:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80043e2:	b1d5      	cbz	r5, 800441a <MX25LM51245G_WriteCfg2Register+0xc8>
 80043e4:	2c01      	cmp	r4, #1
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2302      	moveq	r3, #2
 80043ec:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80043ee:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4669      	mov	r1, sp
 80043f6:	4630      	mov	r0, r6
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80043f8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043fc:	f002 fa25 	bl	800684a <HAL_OSPI_Command>
 8004400:	2800      	cmp	r0, #0
 8004402:	d1b4      	bne.n	800436e <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	a91a      	add	r1, sp, #104	; 0x68
 800440a:	4630      	mov	r0, r6
 800440c:	f002 fac8 	bl	80069a0 <HAL_OSPI_Transmit>
 8004410:	3800      	subs	r0, #0
 8004412:	bf18      	it	ne
 8004414:	2001      	movne	r0, #1
 8004416:	4240      	negs	r0, r0
 8004418:	e7ab      	b.n	8004372 <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800441a:	2301      	movs	r3, #1
 800441c:	e7e6      	b.n	80043ec <MX25LM51245G_WriteCfg2Register+0x9a>

0800441e <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800441e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004420:	b095      	sub	sp, #84	; 0x54
 8004422:	460d      	mov	r5, r1
 8004424:	4606      	mov	r6, r0
 8004426:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004428:	2100      	movs	r1, #0
 800442a:	2250      	movs	r2, #80	; 0x50
 800442c:	4668      	mov	r0, sp
{
 800442e:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8004430:	f016 fec0 	bl	801b1b4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004434:	b92d      	cbnz	r5, 8004442 <MX25LM51245G_ReadCfg2Register+0x24>
 8004436:	2c01      	cmp	r4, #1
 8004438:	d103      	bne.n	8004442 <MX25LM51245G_ReadCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 800443a:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800443e:	b015      	add	sp, #84	; 0x54
 8004440:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8004442:	2200      	movs	r2, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004444:	4669      	mov	r1, sp
 8004446:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 8004448:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800444a:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800444c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004454:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004456:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004458:	bf14      	ite	ne
 800445a:	4613      	movne	r3, r2
 800445c:	2308      	moveq	r3, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800445e:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004460:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004462:	bf0c      	ite	eq
 8004464:	4613      	moveq	r3, r2
 8004466:	2310      	movne	r3, #16
 8004468:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800446a:	f247 138e 	movw	r3, #29070	; 0x718e
 800446e:	bf08      	it	eq
 8004470:	2371      	moveq	r3, #113	; 0x71
 8004472:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004474:	bf0c      	ite	eq
 8004476:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800447a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800447e:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004480:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004482:	bf14      	ite	ne
 8004484:	4613      	movne	r3, r2
 8004486:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800448a:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800448c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800448e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004492:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004494:	bf0c      	ite	eq
 8004496:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800449a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800449e:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80044a0:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80044a2:	bf14      	ite	ne
 80044a4:	4613      	movne	r3, r2
 80044a6:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80044aa:	4295      	cmp	r5, r2
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80044ac:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80044ae:	bf0c      	ite	eq
 80044b0:	4613      	moveq	r3, r2
 80044b2:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80044b4:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80044b6:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80044b8:	bf0c      	ite	eq
 80044ba:	2302      	moveq	r3, #2
 80044bc:	2301      	movne	r3, #1
 80044be:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80044c0:	bf14      	ite	ne
 80044c2:	4613      	movne	r3, r2
 80044c4:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80044c8:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80044cc:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	f002 f9b9 	bl	800684a <HAL_OSPI_Command>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1ae      	bne.n	800443a <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044e2:	4630      	mov	r0, r6
 80044e4:	f002 fa9c 	bl	8006a20 <HAL_OSPI_Receive>
 80044e8:	3800      	subs	r0, #0
 80044ea:	bf18      	it	ne
 80044ec:	2001      	movne	r0, #1
 80044ee:	4240      	negs	r0, r0
 80044f0:	e7a5      	b.n	800443e <MX25LM51245G_ReadCfg2Register+0x20>

080044f2 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80044f2:	b570      	push	{r4, r5, r6, lr}
 80044f4:	b094      	sub	sp, #80	; 0x50
 80044f6:	460c      	mov	r4, r1
 80044f8:	4606      	mov	r6, r0
 80044fa:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80044fc:	2100      	movs	r1, #0
 80044fe:	2250      	movs	r2, #80	; 0x50
 8004500:	4668      	mov	r0, sp
 8004502:	f016 fe57 	bl	801b1b4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004506:	b90c      	cbnz	r4, 800450c <MX25LM51245G_ResetEnable+0x1a>
 8004508:	2d01      	cmp	r5, #1
 800450a:	d028      	beq.n	800455e <MX25LM51245G_ResetEnable+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800450c:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800450e:	4669      	mov	r1, sp
 8004510:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004512:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8004514:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004516:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004518:	bf0c      	ite	eq
 800451a:	2201      	moveq	r2, #1
 800451c:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800451e:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8004520:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004522:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004524:	bf14      	ite	ne
 8004526:	461a      	movne	r2, r3
 8004528:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800452a:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800452c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800452e:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004530:	bf0c      	ite	eq
 8004532:	461a      	moveq	r2, r3
 8004534:	2210      	movne	r2, #16
 8004536:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8004538:	f246 6299 	movw	r2, #26265	; 0x6699
 800453c:	bf08      	it	eq
 800453e:	2266      	moveq	r2, #102	; 0x66
 8004540:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8004546:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800454a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800454e:	f002 f97c 	bl	800684a <HAL_OSPI_Command>
 8004552:	3800      	subs	r0, #0
 8004554:	bf18      	it	ne
 8004556:	2001      	movne	r0, #1
 8004558:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800455a:	b014      	add	sp, #80	; 0x50
 800455c:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	e7fa      	b.n	800455a <MX25LM51245G_ResetEnable+0x68>

08004564 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	b094      	sub	sp, #80	; 0x50
 8004568:	460c      	mov	r4, r1
 800456a:	4606      	mov	r6, r0
 800456c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800456e:	2100      	movs	r1, #0
 8004570:	2250      	movs	r2, #80	; 0x50
 8004572:	4668      	mov	r0, sp
 8004574:	f016 fe1e 	bl	801b1b4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004578:	b90c      	cbnz	r4, 800457e <MX25LM51245G_ResetMemory+0x1a>
 800457a:	2d01      	cmp	r5, #1
 800457c:	d028      	beq.n	80045d0 <MX25LM51245G_ResetMemory+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800457e:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004580:	4669      	mov	r1, sp
 8004582:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004584:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8004586:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004588:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800458a:	bf0c      	ite	eq
 800458c:	2201      	moveq	r2, #1
 800458e:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004590:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8004592:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004594:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004596:	bf14      	ite	ne
 8004598:	461a      	movne	r2, r3
 800459a:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800459c:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800459e:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80045a0:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80045a2:	bf0c      	ite	eq
 80045a4:	461a      	moveq	r2, r3
 80045a6:	2210      	movne	r2, #16
 80045a8:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80045aa:	f649 1266 	movw	r2, #39270	; 0x9966
 80045ae:	bf08      	it	eq
 80045b0:	2299      	moveq	r2, #153	; 0x99
 80045b2:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80045b8:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80045bc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045c0:	f002 f943 	bl	800684a <HAL_OSPI_Command>
 80045c4:	3800      	subs	r0, #0
 80045c6:	bf18      	it	ne
 80045c8:	2001      	movne	r0, #1
 80045ca:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80045cc:	b014      	add	sp, #80	; 0x50
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	e7fa      	b.n	80045cc <MX25LM51245G_ResetMemory+0x68>
	...

080045d8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 80045d8:	4a11      	ldr	r2, [pc, #68]	; (8004620 <BSP_I2C4_DeInit+0x48>)
{
 80045da:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 80045dc:	6813      	ldr	r3, [r2, #0]
 80045de:	b90b      	cbnz	r3, 80045e4 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 80045e0:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 80045e2:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 80045e4:	3b01      	subs	r3, #1
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f9      	bne.n	80045e0 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80045ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045f0:	480c      	ldr	r0, [pc, #48]	; (8004624 <BSP_I2C4_DeInit+0x4c>)
 80045f2:	f001 f959 	bl	80058a8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80045f6:	480b      	ldr	r0, [pc, #44]	; (8004624 <BSP_I2C4_DeInit+0x4c>)
 80045f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045fc:	f001 f954 	bl	80058a8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004602:	480a      	ldr	r0, [pc, #40]	; (800462c <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 8004604:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8004608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800460c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004610:	f001 fbe3 	bl	8005dda <HAL_I2C_DeInit>
 8004614:	2800      	cmp	r0, #0
 8004616:	d0e3      	beq.n	80045e0 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 8004618:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800461c:	e7e1      	b.n	80045e2 <BSP_I2C4_DeInit+0xa>
 800461e:	bf00      	nop
 8004620:	240017d4 	.word	0x240017d4
 8004624:	58021400 	.word	0x58021400
 8004628:	58024400 	.word	0x58024400
 800462c:	240071b0 	.word	0x240071b0

08004630 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004630:	2300      	movs	r3, #0
 8004632:	2201      	movs	r2, #1
{
 8004634:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8004636:	6041      	str	r1, [r0, #4]
{
 8004638:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800463a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800463c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8004640:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004644:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004648:	f001 fb75 	bl	8005d36 <HAL_I2C_Init>
 800464c:	4601      	mov	r1, r0
 800464e:	b108      	cbz	r0, 8004654 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8004650:	2001      	movs	r0, #1
}
 8004652:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004654:	4620      	mov	r0, r4
 8004656:	f001 fd50 	bl	80060fa <HAL_I2CEx_ConfigAnalogFilter>
 800465a:	4601      	mov	r1, r0
 800465c:	2800      	cmp	r0, #0
 800465e:	d1f7      	bne.n	8004650 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004660:	4620      	mov	r0, r4
 8004662:	f001 fd70 	bl	8006146 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8004666:	3800      	subs	r0, #0
 8004668:	bf18      	it	ne
 800466a:	2001      	movne	r0, #1
 800466c:	e7f1      	b.n	8004652 <MX_I2C4_Init+0x22>
	...

08004670 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8004670:	4ba3      	ldr	r3, [pc, #652]	; (8004900 <BSP_I2C4_Init+0x290>)
 8004672:	48a4      	ldr	r0, [pc, #656]	; (8004904 <BSP_I2C4_Init+0x294>)
{
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8004678:	6003      	str	r3, [r0, #0]
{
 800467a:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 800467c:	4ba2      	ldr	r3, [pc, #648]	; (8004908 <BSP_I2C4_Init+0x298>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	9200      	str	r2, [sp, #0]
 8004682:	3201      	adds	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	9b00      	ldr	r3, [sp, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f040 80c9 	bne.w	8004820 <BSP_I2C4_Init+0x1b0>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800468e:	f001 fd2f 	bl	80060f0 <HAL_I2C_GetState>
 8004692:	2800      	cmp	r0, #0
 8004694:	f040 80c4 	bne.w	8004820 <BSP_I2C4_Init+0x1b0>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004698:	4d9c      	ldr	r5, [pc, #624]	; (800490c <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800469a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800469e:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80046a0:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80046a2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80046a6:	489a      	ldr	r0, [pc, #616]	; (8004910 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80046a8:	f043 0320 	orr.w	r3, r3, #32
 80046ac:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80046b0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	930a      	str	r3, [sp, #40]	; 0x28
 80046ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80046bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80046c0:	f043 0320 	orr.w	r3, r3, #32
 80046c4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80046c8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80046cc:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80046d6:	2312      	movs	r3, #18
 80046d8:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80046dc:	2302      	movs	r3, #2
 80046de:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80046e2:	a90d      	add	r1, sp, #52	; 0x34
 80046e4:	f000 fffa 	bl	80056dc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80046e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80046ec:	a90d      	add	r1, sp, #52	; 0x34
 80046ee:	4888      	ldr	r0, [pc, #544]	; (8004910 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80046f0:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80046f2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80046f4:	f000 fff2 	bl	80056dc <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80046f8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8004704:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	930c      	str	r3, [sp, #48]	; 0x30
 800470e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8004710:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004718:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800471c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004724:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004728:	f003 f9c8 	bl	8007abc <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800472c:	2800      	cmp	r0, #0
 800472e:	d071      	beq.n	8004814 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004730:	4b78      	ldr	r3, [pc, #480]	; (8004914 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004732:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004736:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 800491c <BSP_I2C4_Init+0x2ac>
 800473a:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800473e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004742:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004746:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800474a:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800474e:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004750:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004754:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004758:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800475c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004760:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 8004762:	9302      	str	r3, [sp, #8]
 8004764:	4b6c      	ldr	r3, [pc, #432]	; (8004918 <BSP_I2C4_Init+0x2a8>)
 8004766:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800476a:	9a00      	ldr	r2, [sp, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4690      	mov	r8, r2
{
 8004770:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004772:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8004774:	f240 3479 	movw	r4, #889	; 0x379
 8004778:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800477a:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800477c:	45a4      	cmp	ip, r4
 800477e:	d95a      	bls.n	8004836 <BSP_I2C4_Init+0x1c6>
 8004780:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004782:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004784:	45ab      	cmp	fp, r5
 8004786:	d852      	bhi.n	800482e <BSP_I2C4_Init+0x1be>
 8004788:	9c02      	ldr	r4, [sp, #8]
 800478a:	42ac      	cmp	r4, r5
 800478c:	d34f      	bcc.n	800482e <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 800478e:	4596      	cmp	lr, r2
 8004790:	d04d      	beq.n	800482e <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004792:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8004796:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004798:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800479a:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800479e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80047a0:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80047a4:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80047a8:	d93e      	bls.n	8004828 <BSP_I2C4_Init+0x1b8>
 80047aa:	4a5b      	ldr	r2, [pc, #364]	; (8004918 <BSP_I2C4_Init+0x2a8>)
 80047ac:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047ae:	4b5a      	ldr	r3, [pc, #360]	; (8004918 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047b0:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80047b4:	4a59      	ldr	r2, [pc, #356]	; (800491c <BSP_I2C4_Init+0x2ac>)
 80047b6:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047b8:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047ba:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047be:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80047c4:	9303      	str	r3, [sp, #12]
 80047c6:	f10b 0332 	add.w	r3, fp, #50	; 0x32
 80047ca:	9309      	str	r3, [sp, #36]	; 0x24
 80047cc:	f5ab 5311 	sub.w	r3, fp, #9280	; 0x2440
 80047d0:	3b0a      	subs	r3, #10
 80047d2:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047d4:	9b06      	ldr	r3, [sp, #24]
 80047d6:	429e      	cmp	r6, r3
 80047d8:	d138      	bne.n	800484c <BSP_I2C4_Init+0x1dc>
        if (idx < I2C_VALID_TIMING_NBR)
 80047da:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 80047de:	d819      	bhi.n	8004814 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047e0:	2314      	movs	r3, #20
 80047e2:	fb03 f808 	mul.w	r8, r3, r8
 80047e6:	4b4d      	ldr	r3, [pc, #308]	; (800491c <BSP_I2C4_Init+0x2ac>)
 80047e8:	eb03 0208 	add.w	r2, r3, r8
 80047ec:	f853 3008 	ldr.w	r3, [r3, r8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80047f0:	7c14      	ldrb	r4, [r2, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047f2:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80047f6:	6853      	ldr	r3, [r2, #4]
 80047f8:	051b      	lsls	r3, r3, #20
 80047fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047fe:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8004800:	6893      	ldr	r3, [r2, #8]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004808:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800480a:	68d3      	ldr	r3, [r2, #12]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004810:	4323      	orrs	r3, r4
 8004812:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004814:	9900      	ldr	r1, [sp, #0]
 8004816:	483b      	ldr	r0, [pc, #236]	; (8004904 <BSP_I2C4_Init+0x294>)
 8004818:	f7ff ff0a 	bl	8004630 <MX_I2C4_Init>
 800481c:	2800      	cmp	r0, #0
 800481e:	d16b      	bne.n	80048f8 <BSP_I2C4_Init+0x288>
  int32_t ret = BSP_ERROR_NONE;
 8004820:	2000      	movs	r0, #0
}
 8004822:	b013      	add	sp, #76	; 0x4c
 8004824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004828:	4696      	mov	lr, r2
 800482a:	f04f 0801 	mov.w	r8, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800482e:	3701      	adds	r7, #1
 8004830:	440d      	add	r5, r1
 8004832:	2f10      	cmp	r7, #16
 8004834:	d1a6      	bne.n	8004784 <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004836:	2e10      	cmp	r6, #16
 8004838:	448c      	add	ip, r1
 800483a:	d19b      	bne.n	8004774 <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800483c:	3201      	adds	r2, #1
 800483e:	4401      	add	r1, r0
 8004840:	2a10      	cmp	r2, #16
 8004842:	d195      	bne.n	8004770 <BSP_I2C4_Init+0x100>
 8004844:	f1b8 0f00 	cmp.w	r8, #0
 8004848:	d1af      	bne.n	80047aa <BSP_I2C4_Init+0x13a>
 800484a:	e7b0      	b.n	80047ae <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	f06f 0401 	mvn.w	r4, #1
 8004852:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004854:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004856:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800485a:	4419      	add	r1, r3
 800485c:	9104      	str	r1, [sp, #16]
 800485e:	eb03 010b 	add.w	r1, r3, fp
 8004862:	4361      	muls	r1, r4
 8004864:	9c02      	ldr	r4, [sp, #8]
 8004866:	9101      	str	r1, [sp, #4]
 8004868:	441c      	add	r4, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800486a:	9904      	ldr	r1, [sp, #16]
 800486c:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800486e:	f241 245c 	movw	r4, #4700	; 0x125c
 8004872:	9707      	str	r7, [sp, #28]
 8004874:	f1a1 0532 	sub.w	r5, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004878:	3701      	adds	r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800487a:	42a1      	cmp	r1, r4
 800487c:	d931      	bls.n	80048e2 <BSP_I2C4_Init+0x272>
 800487e:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
 8004882:	d22e      	bcs.n	80048e2 <BSP_I2C4_Init+0x272>
 8004884:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004886:	f04f 0c00 	mov.w	ip, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800488a:	f8dd e010 	ldr.w	lr, [sp, #16]
 800488e:	f504 5910 	add.w	r9, r4, #9216	; 0x2400
 8004892:	9c08      	ldr	r4, [sp, #32]
 8004894:	f109 0918 	add.w	r9, r9, #24
 8004898:	1865      	adds	r5, r4, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800489a:	f205 6a83 	addw	sl, r5, #1667	; 0x683
 800489e:	f241 0447 	movw	r4, #4167	; 0x1047
 80048a2:	f8cd c014 	str.w	ip, [sp, #20]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80048a6:	f10c 0c01 	add.w	ip, ip, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80048aa:	45a2      	cmp	sl, r4
 80048ac:	d812      	bhi.n	80048d4 <BSP_I2C4_Init+0x264>
 80048ae:	f5be 6f7a 	cmp.w	lr, #4000	; 0xfa0
 80048b2:	d30f      	bcc.n	80048d4 <BSP_I2C4_Init+0x264>
 80048b4:	4570      	cmp	r0, lr
 80048b6:	d20d      	bcs.n	80048d4 <BSP_I2C4_Init+0x264>
              error = -error;
 80048b8:	ea35 0a25 	bics.w	sl, r5, r5, asr #32
 80048bc:	bf28      	it	cs
 80048be:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80048c0:	9c03      	ldr	r4, [sp, #12]
 80048c2:	4554      	cmp	r4, sl
 80048c4:	d906      	bls.n	80048d4 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80048c6:	9c07      	ldr	r4, [sp, #28]
              I2c_valid_timing[count].sclh = sclh;
 80048c8:	46b0      	mov	r8, r6
 80048ca:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 80048ce:	6114      	str	r4, [r2, #16]
              I2c_valid_timing[count].sclh = sclh;
 80048d0:	9c05      	ldr	r4, [sp, #20]
 80048d2:	60d4      	str	r4, [r2, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80048d4:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80048d8:	eba9 0903 	sub.w	r9, r9, r3
 80048dc:	441d      	add	r5, r3
 80048de:	449e      	add	lr, r3
 80048e0:	d1db      	bne.n	800489a <BSP_I2C4_Init+0x22a>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80048e2:	9c01      	ldr	r4, [sp, #4]
 80048e4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80048e8:	4419      	add	r1, r3
 80048ea:	eba4 0403 	sub.w	r4, r4, r3
 80048ee:	9401      	str	r4, [sp, #4]
 80048f0:	d1bd      	bne.n	800486e <BSP_I2C4_Init+0x1fe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80048f2:	3601      	adds	r6, #1
 80048f4:	3214      	adds	r2, #20
 80048f6:	e76d      	b.n	80047d4 <BSP_I2C4_Init+0x164>
          ret = BSP_ERROR_BUS_FAILURE;
 80048f8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80048fc:	e791      	b.n	8004822 <BSP_I2C4_Init+0x1b2>
 80048fe:	bf00      	nop
 8004900:	58001c00 	.word	0x58001c00
 8004904:	240071b0 	.word	0x240071b0
 8004908:	240017d4 	.word	0x240017d4
 800490c:	58024400 	.word	0x58024400
 8004910:	58021400 	.word	0x58021400
 8004914:	3b9aca00 	.word	0x3b9aca00
 8004918:	240021d8 	.word	0x240021d8
 800491c:	240017d8 	.word	0x240017d8

08004920 <BSP_I2C4_WriteReg>:
{
 8004920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004922:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004926:	9200      	str	r2, [sp, #0]
 8004928:	460a      	mov	r2, r1
 800492a:	4601      	mov	r1, r0
 800492c:	4808      	ldr	r0, [pc, #32]	; (8004950 <BSP_I2C4_WriteReg+0x30>)
 800492e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004932:	2301      	movs	r3, #1
 8004934:	f001 fa6a 	bl	8005e0c <HAL_I2C_Mem_Write>
 8004938:	b140      	cbz	r0, 800494c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800493a:	4805      	ldr	r0, [pc, #20]	; (8004950 <BSP_I2C4_WriteReg+0x30>)
 800493c:	f001 fbdb 	bl	80060f6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004940:	2804      	cmp	r0, #4
 8004942:	bf0c      	ite	eq
 8004944:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8004948:	f06f 0003 	mvnne.w	r0, #3
}
 800494c:	b004      	add	sp, #16
 800494e:	bd10      	pop	{r4, pc}
 8004950:	240071b0 	.word	0x240071b0

08004954 <BSP_I2C4_ReadReg>:
{
 8004954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8004956:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800495a:	9200      	str	r2, [sp, #0]
 800495c:	460a      	mov	r2, r1
 800495e:	4601      	mov	r1, r0
 8004960:	4808      	ldr	r0, [pc, #32]	; (8004984 <BSP_I2C4_ReadReg+0x30>)
 8004962:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004966:	2301      	movs	r3, #1
 8004968:	f001 fb06 	bl	8005f78 <HAL_I2C_Mem_Read>
 800496c:	b140      	cbz	r0, 8004980 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800496e:	4805      	ldr	r0, [pc, #20]	; (8004984 <BSP_I2C4_ReadReg+0x30>)
 8004970:	f001 fbc1 	bl	80060f6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004974:	2804      	cmp	r0, #4
 8004976:	bf0c      	ite	eq
 8004978:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800497c:	f06f 0003 	mvnne.w	r0, #3
}
 8004980:	b004      	add	sp, #16
 8004982:	bd10      	pop	{r4, pc}
 8004984:	240071b0 	.word	0x240071b0

08004988 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8004988:	f000 bcd0 	b.w	800532c <HAL_GetTick>

0800498c <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 800498c:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800498e:	4c21      	ldr	r4, [pc, #132]	; (8004a14 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8004990:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004992:	4821      	ldr	r0, [pc, #132]	; (8004a18 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004994:	78a2      	ldrb	r2, [r4, #2]
 8004996:	7861      	ldrb	r1, [r4, #1]
 8004998:	f7ff fc53 	bl	8004242 <MX25LM51245G_WriteEnable>
 800499c:	b118      	cbz	r0, 80049a6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800499e:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80049a2:	b005      	add	sp, #20
 80049a4:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 80049a6:	2303      	movs	r3, #3
 80049a8:	481b      	ldr	r0, [pc, #108]	; (8004a18 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049b0:	78a2      	ldrb	r2, [r4, #2]
 80049b2:	7861      	ldrb	r1, [r4, #1]
 80049b4:	f7ff fccd 	bl	8004352 <MX25LM51245G_WriteCfg2Register>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d1f0      	bne.n	800499e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80049bc:	78a2      	ldrb	r2, [r4, #2]
 80049be:	7861      	ldrb	r1, [r4, #1]
 80049c0:	4815      	ldr	r0, [pc, #84]	; (8004a18 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049c2:	f7ff fc3e 	bl	8004242 <MX25LM51245G_WriteEnable>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d1e8      	bne.n	800499e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80049cc:	2501      	movs	r5, #1
 80049ce:	4812      	ldr	r0, [pc, #72]	; (8004a18 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049d0:	9500      	str	r5, [sp, #0]
 80049d2:	78a2      	ldrb	r2, [r4, #2]
 80049d4:	7861      	ldrb	r1, [r4, #1]
 80049d6:	f7ff fcbc 	bl	8004352 <MX25LM51245G_WriteCfg2Register>
 80049da:	4604      	mov	r4, r0
 80049dc:	2800      	cmp	r0, #0
 80049de:	d1de      	bne.n	800499e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80049e0:	2028      	movs	r0, #40	; 0x28
 80049e2:	f000 fca9 	bl	8005338 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80049e6:	4622      	mov	r2, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	480b      	ldr	r0, [pc, #44]	; (8004a18 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049ec:	f7ff faf4 	bl	8003fd8 <MX25LM51245G_AutoPollingMemReady>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d1d4      	bne.n	800499e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80049f4:	ab03      	add	r3, sp, #12
 80049f6:	4602      	mov	r2, r0
 80049f8:	4629      	mov	r1, r5
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4603      	mov	r3, r0
 80049fe:	4806      	ldr	r0, [pc, #24]	; (8004a18 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004a00:	f7ff fd0d 	bl	800441e <MX25LM51245G_ReadCfg2Register>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d1ca      	bne.n	800499e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8004a08:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004a0c:	42ab      	cmp	r3, r5
 8004a0e:	d0c8      	beq.n	80049a2 <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8004a10:	e7c5      	b.n	800499e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8004a12:	bf00      	nop
 8004a14:	240021dc 	.word	0x240021dc
 8004a18:	240021e4 	.word	0x240021e4

08004a1c <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004a1c:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a1e:	4d27      	ldr	r5, [pc, #156]	; (8004abc <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004a20:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a22:	4c27      	ldr	r4, [pc, #156]	; (8004ac0 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8004a24:	78aa      	ldrb	r2, [r5, #2]
 8004a26:	7869      	ldrb	r1, [r5, #1]
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff fc0a 	bl	8004242 <MX25LM51245G_WriteEnable>
 8004a2e:	b118      	cbz	r0, 8004a38 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a30:	f06f 0004 	mvn.w	r0, #4
}
 8004a34:	b005      	add	sp, #20
 8004a36:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004a38:	2303      	movs	r3, #3
 8004a3a:	78aa      	ldrb	r2, [r5, #2]
 8004a3c:	7869      	ldrb	r1, [r5, #1]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a46:	f7ff fc84 	bl	8004352 <MX25LM51245G_WriteCfg2Register>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1f0      	bne.n	8004a30 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a4e:	78aa      	ldrb	r2, [r5, #2]
 8004a50:	4620      	mov	r0, r4
 8004a52:	7869      	ldrb	r1, [r5, #1]
 8004a54:	f7ff fbf5 	bl	8004242 <MX25LM51245G_WriteEnable>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d1e9      	bne.n	8004a30 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	78aa      	ldrb	r2, [r5, #2]
 8004a60:	7869      	ldrb	r1, [r5, #1]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4603      	mov	r3, r0
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff fc73 	bl	8004352 <MX25LM51245G_WriteCfg2Register>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d1df      	bne.n	8004a30 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004a70:	2028      	movs	r0, #40	; 0x28
 8004a72:	f000 fc61 	bl	8005338 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004a7a:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004a7c:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004a7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a82:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004a84:	f001 fe58 	bl	8006738 <HAL_OSPI_Init>
 8004a88:	b9a8      	cbnz	r0, 8004ab6 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4611      	mov	r1, r2
 8004a90:	f7ff faa2 	bl	8003fd8 <MX25LM51245G_AutoPollingMemReady>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d1cb      	bne.n	8004a30 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f7ff fcbb 	bl	800441e <MX25LM51245G_ReadCfg2Register>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d1c1      	bne.n	8004a30 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004aac:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d0bf      	beq.n	8004a34 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004ab4:	e7bc      	b.n	8004a30 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004ab6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004aba:	e7bb      	b.n	8004a34 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004abc:	240021dc 	.word	0x240021dc
 8004ac0:	240021e4 	.word	0x240021e4

08004ac4 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8004ac4:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <MX_OSPI_NOR_Init+0x3c>)
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004acc:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004ace:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004ad0:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8004ad2:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004ad4:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004ad6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004ada:	684a      	ldr	r2, [r1, #4]
 8004adc:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004ade:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8004ae0:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004ae2:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004ae4:	68ca      	ldr	r2, [r1, #12]
 8004ae6:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004ae8:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004aec:	bf09      	itett	eq
 8004aee:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004af2:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004af4:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004af6:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004afa:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8004afc:	f001 be1c 	b.w	8006738 <HAL_OSPI_Init>
 8004b00:	52005000 	.word	0x52005000

08004b04 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8004b04:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b06:	b998      	cbnz	r0, 8004b30 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004b08:	4c0b      	ldr	r4, [pc, #44]	; (8004b38 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
 8004b0a:	78a2      	ldrb	r2, [r4, #2]
 8004b0c:	7861      	ldrb	r1, [r4, #1]
 8004b0e:	b95a      	cbnz	r2, 8004b28 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004b10:	2201      	movs	r2, #1
 8004b12:	480a      	ldr	r0, [pc, #40]	; (8004b3c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004b14:	f7ff fad6 	bl	80040c4 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8004b18:	b110      	cbz	r0, 8004b20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b1a:	f06f 0004 	mvn.w	r0, #4
}
 8004b1e:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004b20:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8004b22:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004b24:	7023      	strb	r3, [r4, #0]
 8004b26:	e7fa      	b.n	8004b1e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8004b28:	4804      	ldr	r0, [pc, #16]	; (8004b3c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004b2a:	f7ff fb3a 	bl	80041a2 <MX25LM51245G_EnableDTRMemoryMappedMode>
 8004b2e:	e7f3      	b.n	8004b18 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8004b30:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004b34:	e7f3      	b.n	8004b1e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8004b36:	bf00      	nop
 8004b38:	240021dc 	.word	0x240021dc
 8004b3c:	240021e4 	.word	0x240021e4

08004b40 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8004b40:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b42:	b950      	cbnz	r0, 8004b5a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8004b44:	4c09      	ldr	r4, [pc, #36]	; (8004b6c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8004b46:	7823      	ldrb	r3, [r4, #0]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d109      	bne.n	8004b60 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8004b4c:	4808      	ldr	r0, [pc, #32]	; (8004b70 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8004b4e:	f002 f838 	bl	8006bc2 <HAL_OSPI_Abort>
 8004b52:	b940      	cbnz	r0, 8004b66 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004b54:	2301      	movs	r3, #1
 8004b56:	7023      	strb	r3, [r4, #0]
}
 8004b58:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004b5a:	f06f 0001 	mvn.w	r0, #1
 8004b5e:	e7fb      	b.n	8004b58 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004b60:	f06f 001a 	mvn.w	r0, #26
 8004b64:	e7f8      	b.n	8004b58 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004b66:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004b6a:	e7f5      	b.n	8004b58 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8004b6c:	240021dc 	.word	0x240021dc
 8004b70:	240021e4 	.word	0x240021e4

08004b74 <BSP_OSPI_NOR_DeInit>:
{
 8004b74:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d156      	bne.n	8004c28 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004b7a:	4c2d      	ldr	r4, [pc, #180]	; (8004c30 <BSP_OSPI_NOR_DeInit+0xbc>)
 8004b7c:	7823      	ldrb	r3, [r4, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d04b      	beq.n	8004c1a <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004b82:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b88:	482a      	ldr	r0, [pc, #168]	; (8004c34 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004b8a:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8004b8c:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004b8e:	f000 fe8b 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8004b92:	2104      	movs	r1, #4
 8004b94:	4828      	ldr	r0, [pc, #160]	; (8004c38 <BSP_OSPI_NOR_DeInit+0xc4>)
 8004b96:	f000 fe87 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8004b9a:	2140      	movs	r1, #64	; 0x40
 8004b9c:	4827      	ldr	r0, [pc, #156]	; (8004c3c <BSP_OSPI_NOR_DeInit+0xc8>)
 8004b9e:	f000 fe83 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8004ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ba6:	4826      	ldr	r0, [pc, #152]	; (8004c40 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004ba8:	f000 fe7e 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8004bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bb0:	4823      	ldr	r0, [pc, #140]	; (8004c40 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bb2:	f000 fe79 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8004bb6:	2104      	movs	r1, #4
 8004bb8:	4822      	ldr	r0, [pc, #136]	; (8004c44 <BSP_OSPI_NOR_DeInit+0xd0>)
 8004bba:	f000 fe75 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8004bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bc2:	481f      	ldr	r0, [pc, #124]	; (8004c40 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bc4:	f000 fe70 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8004bc8:	2110      	movs	r1, #16
 8004bca:	481d      	ldr	r0, [pc, #116]	; (8004c40 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bcc:	f000 fe6c 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	481b      	ldr	r0, [pc, #108]	; (8004c40 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bd4:	f000 fe68 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8004bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bdc:	4817      	ldr	r0, [pc, #92]	; (8004c3c <BSP_OSPI_NOR_DeInit+0xc8>)
 8004bde:	f000 fe63 	bl	80058a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	4816      	ldr	r0, [pc, #88]	; (8004c40 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004be6:	f000 fe5f 	bl	80058a8 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004bec:	4817      	ldr	r0, [pc, #92]	; (8004c4c <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8004bee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004bf6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8004bfe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004c02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c06:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004c0a:	f001 fe0b 	bl	8006824 <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2000      	moveq	r0, #0
 8004c14:	f06f 0003 	mvnne.w	r0, #3
}
 8004c18:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004c1a:	f7ff ff91 	bl	8004b40 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d0af      	beq.n	8004b82 <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8004c22:	f06f 0004 	mvn.w	r0, #4
 8004c26:	e7f7      	b.n	8004c18 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8004c28:	f06f 0001 	mvn.w	r0, #1
 8004c2c:	e7f4      	b.n	8004c18 <BSP_OSPI_NOR_DeInit+0xa4>
 8004c2e:	bf00      	nop
 8004c30:	240021dc 	.word	0x240021dc
 8004c34:	58021400 	.word	0x58021400
 8004c38:	58020400 	.word	0x58020400
 8004c3c:	58021800 	.word	0x58021800
 8004c40:	58020c00 	.word	0x58020c00
 8004c44:	58021000 	.word	0x58021000
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	240021e4 	.word	0x240021e4

08004c50 <BSP_OSPI_NOR_ConfigFlash>:
{
 8004c50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004c54:	460d      	mov	r5, r1
 8004c56:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d156      	bne.n	8004d0a <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004c5c:	4c2e      	ldr	r4, [pc, #184]	; (8004d18 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8004c5e:	7823      	ldrb	r3, [r4, #0]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d055      	beq.n	8004d10 <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8004c64:	7863      	ldrb	r3, [r4, #1]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d146      	bne.n	8004cf8 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8004c6a:	2901      	cmp	r1, #1
 8004c6c:	78a2      	ldrb	r2, [r4, #2]
 8004c6e:	d109      	bne.n	8004c84 <BSP_OSPI_NOR_ConfigFlash+0x34>
 8004c70:	4296      	cmp	r6, r2
 8004c72:	d107      	bne.n	8004c84 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004c74:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004c76:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8004c78:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004c7a:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004c7c:	70a6      	strb	r6, [r4, #2]
}
 8004c7e:	b004      	add	sp, #16
 8004c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004c84:	4f25      	ldr	r7, [pc, #148]	; (8004d1c <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004c86:	2101      	movs	r1, #1
 8004c88:	4638      	mov	r0, r7
 8004c8a:	f7ff fada 	bl	8004242 <MX25LM51245G_WriteEnable>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	bb78      	cbnz	r0, 8004cf2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8004c92:	f8ad 000c 	strh.w	r0, [sp, #12]
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8004c96:	9000      	str	r0, [sp, #0]
 8004c98:	4638      	mov	r0, r7
 8004c9a:	78a2      	ldrb	r2, [r4, #2]
 8004c9c:	7861      	ldrb	r1, [r4, #1]
 8004c9e:	f7ff fb58 	bl	8004352 <MX25LM51245G_WriteCfg2Register>
 8004ca2:	4680      	mov	r8, r0
 8004ca4:	bb28      	cbnz	r0, 8004cf2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004ca6:	2028      	movs	r0, #40	; 0x28
 8004ca8:	f000 fb46 	bl	8005338 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004cac:	78a3      	ldrb	r3, [r4, #2]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d106      	bne.n	8004cc0 <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004cb2:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004cb4:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004cb8:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004cbc:	f001 fd3c 	bl	8006738 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4816      	ldr	r0, [pc, #88]	; (8004d1c <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	f7ff f987 	bl	8003fd8 <MX25LM51245G_AutoPollingMemReady>
 8004cca:	b990      	cbnz	r0, 8004cf2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004ccc:	ab03      	add	r3, sp, #12
 8004cce:	4602      	mov	r2, r0
 8004cd0:	4601      	mov	r1, r0
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4811      	ldr	r0, [pc, #68]	; (8004d1c <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004cd8:	f7ff fba1 	bl	800441e <MX25LM51245G_ReadCfg2Register>
 8004cdc:	b948      	cbnz	r0, 8004cf2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8004cde:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004ce2:	b933      	cbnz	r3, 8004cf2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004ce4:	2d01      	cmp	r5, #1
 8004ce6:	d1c5      	bne.n	8004c74 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004ce8:	78a3      	ldrb	r3, [r4, #2]
 8004cea:	b94b      	cbnz	r3, 8004d00 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004cec:	f7ff fe96 	bl	8004a1c <OSPI_NOR_EnterDOPIMode.constprop.0>
 8004cf0:	e008      	b.n	8004d04 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004cf2:	f06f 0004 	mvn.w	r0, #4
 8004cf6:	e7c2      	b.n	8004c7e <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8004cf8:	2901      	cmp	r1, #1
 8004cfa:	d1bb      	bne.n	8004c74 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	d1f5      	bne.n	8004cec <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004d00:	f7ff fe44 	bl	800498c <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d1ba      	bne.n	8004c7e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004d08:	e7b4      	b.n	8004c74 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8004d0a:	f06f 0001 	mvn.w	r0, #1
 8004d0e:	e7b6      	b.n	8004c7e <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004d10:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8004d14:	e7b3      	b.n	8004c7e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004d16:	bf00      	nop
 8004d18:	240021dc 	.word	0x240021dc
 8004d1c:	240021e4 	.word	0x240021e4

08004d20 <MX_OSPI_ClockConfig>:
{
 8004d20:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8004d26:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004d28:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004d2a:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004d2c:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004d2e:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004d30:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004d32:	2305      	movs	r3, #5
 8004d34:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8004d38:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8004d3a:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004d3c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004d40:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004d42:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8004d46:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004d48:	f002 ffe4 	bl	8007d14 <HAL_RCCEx_PeriphCLKConfig>
}
 8004d4c:	b02f      	add	sp, #188	; 0xbc
 8004d4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004d54 <BSP_OSPI_NOR_Init>:
{
 8004d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d58:	460e      	mov	r6, r1
 8004d5a:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f040 8160 	bne.w	8005022 <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8004d62:	4cb1      	ldr	r4, [pc, #708]	; (8005028 <BSP_OSPI_NOR_Init+0x2d4>)
 8004d64:	7825      	ldrb	r5, [r4, #0]
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	f040 8159 	bne.w	800501e <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8004d6c:	4baf      	ldr	r3, [pc, #700]	; (800502c <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004d6e:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004d72:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004d76:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8004d78:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004d7c:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004d7e:	48ac      	ldr	r0, [pc, #688]	; (8005030 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8004d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d84:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004d88:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004d8c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004d90:	9201      	str	r2, [sp, #4]
 8004d92:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8004d94:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004d9c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004da2:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8004da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004da8:	f042 0220 	orr.w	r2, r2, #32
 8004dac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004db4:	f002 0220 	and.w	r2, r2, #32
 8004db8:	9202      	str	r2, [sp, #8]
 8004dba:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8004dbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dc0:	f042 0202 	orr.w	r2, r2, #2
 8004dc4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004dc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dcc:	f002 0202 	and.w	r2, r2, #2
 8004dd0:	9203      	str	r2, [sp, #12]
 8004dd2:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8004dd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ddc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004de0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004de4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004de8:	9204      	str	r2, [sp, #16]
 8004dea:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8004dec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004df0:	f042 0208 	orr.w	r2, r2, #8
 8004df4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004df8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dfc:	f002 0208 	and.w	r2, r2, #8
 8004e00:	9205      	str	r2, [sp, #20]
 8004e02:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8004e04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e08:	f042 0208 	orr.w	r2, r2, #8
 8004e0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e14:	f002 0208 	and.w	r2, r2, #8
 8004e18:	9206      	str	r2, [sp, #24]
 8004e1a:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8004e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e20:	f042 0210 	orr.w	r2, r2, #16
 8004e24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e2c:	f002 0210 	and.w	r2, r2, #16
 8004e30:	9207      	str	r2, [sp, #28]
 8004e32:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8004e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e38:	f042 0208 	orr.w	r2, r2, #8
 8004e3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e44:	f002 0208 	and.w	r2, r2, #8
 8004e48:	9208      	str	r2, [sp, #32]
 8004e4a:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8004e4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e50:	f042 0208 	orr.w	r2, r2, #8
 8004e54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e5c:	f002 0208 	and.w	r2, r2, #8
 8004e60:	9209      	str	r2, [sp, #36]	; 0x24
 8004e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8004e64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e68:	f042 0208 	orr.w	r2, r2, #8
 8004e6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e74:	f002 0208 	and.w	r2, r2, #8
 8004e78:	920a      	str	r2, [sp, #40]	; 0x28
 8004e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8004e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e8c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004e90:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004e94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e98:	f042 0208 	orr.w	r2, r2, #8
 8004e9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea0:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	930c      	str	r3, [sp, #48]	; 0x30
 8004eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004eae:	2340      	movs	r3, #64	; 0x40
 8004eb0:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb4:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004eb6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eba:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004ebe:	f000 fc0d 	bl	80056dc <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004ec2:	a911      	add	r1, sp, #68	; 0x44
 8004ec4:	485b      	ldr	r0, [pc, #364]	; (8005034 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004ec6:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004ec8:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8004eca:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004ece:	f000 fc05 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004ed6:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004ed8:	2509      	movs	r5, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004eda:	a911      	add	r1, sp, #68	; 0x44
 8004edc:	4856      	ldr	r0, [pc, #344]	; (8005038 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004ede:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004ee0:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004ee2:	f000 fbfb 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004eea:	a911      	add	r1, sp, #68	; 0x44
 8004eec:	4853      	ldr	r0, [pc, #332]	; (800503c <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004eee:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004ef0:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004ef2:	f000 fbf3 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004efa:	a911      	add	r1, sp, #68	; 0x44
 8004efc:	484f      	ldr	r0, [pc, #316]	; (800503c <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004efe:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004f00:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004f02:	f000 fbeb 	bl	80056dc <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004f06:	a911      	add	r1, sp, #68	; 0x44
 8004f08:	484d      	ldr	r0, [pc, #308]	; (8005040 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8004f0a:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004f0c:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8004f0e:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004f10:	f000 fbe4 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004f18:	a911      	add	r1, sp, #68	; 0x44
 8004f1a:	4848      	ldr	r0, [pc, #288]	; (800503c <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004f1c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8004f1e:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004f20:	f000 fbdc 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004f24:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004f26:	a911      	add	r1, sp, #68	; 0x44
 8004f28:	4844      	ldr	r0, [pc, #272]	; (800503c <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004f2a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8004f2c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004f30:	f000 fbd4 	bl	80056dc <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004f34:	a911      	add	r1, sp, #68	; 0x44
 8004f36:	4841      	ldr	r0, [pc, #260]	; (800503c <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004f38:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8004f3a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004f3e:	f000 fbcd 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004f42:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004f46:	a911      	add	r1, sp, #68	; 0x44
 8004f48:	4839      	ldr	r0, [pc, #228]	; (8005030 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004f4a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8004f4c:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004f4e:	f000 fbc5 	bl	80056dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004f52:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004f54:	a911      	add	r1, sp, #68	; 0x44
 8004f56:	4839      	ldr	r0, [pc, #228]	; (800503c <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004f58:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8004f5a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004f5e:	f000 fbbd 	bl	80056dc <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8004f62:	a811      	add	r0, sp, #68	; 0x44
 8004f64:	f7ff f81f 	bl	8003fa6 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 8004f6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f6e:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f72:	b10b      	cbz	r3, 8004f78 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004f74:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004f78:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004f7a:	4832      	ldr	r0, [pc, #200]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8004f7c:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004f7e:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8004f80:	7873      	ldrb	r3, [r6, #1]
 8004f82:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004f84:	f7ff fecc 	bl	8004d20 <MX_OSPI_ClockConfig>
 8004f88:	b120      	cbz	r0, 8004f94 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004f8a:	f06f 0003 	mvn.w	r0, #3
}
 8004f8e:	b01b      	add	sp, #108	; 0x6c
 8004f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004f94:	a90d      	add	r1, sp, #52	; 0x34
 8004f96:	482b      	ldr	r0, [pc, #172]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 8004f98:	f7ff fd94 	bl	8004ac4 <MX_OSPI_NOR_Init>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d1f3      	bne.n	8004f8a <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4827      	ldr	r0, [pc, #156]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fa6:	f7ff faa4 	bl	80044f2 <MX25LM51245G_ResetEnable>
 8004faa:	4602      	mov	r2, r0
 8004fac:	b110      	cbz	r0, 8004fb4 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fae:	f06f 0004 	mvn.w	r0, #4
 8004fb2:	e7ec      	b.n	8004f8e <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	4823      	ldr	r0, [pc, #140]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fb8:	f7ff fad4 	bl	8004564 <MX25LM51245G_ResetMemory>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d1f5      	bne.n	8004fae <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	481f      	ldr	r0, [pc, #124]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fc6:	f7ff fa94 	bl	80044f2 <MX25LM51245G_ResetEnable>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1ee      	bne.n	8004fae <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	481c      	ldr	r0, [pc, #112]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fd4:	f7ff fac6 	bl	8004564 <MX25LM51245G_ResetMemory>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d1e8      	bne.n	8004fae <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	4819      	ldr	r0, [pc, #100]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	f7ff fa86 	bl	80044f2 <MX25LM51245G_ResetEnable>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d1e1      	bne.n	8004fae <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004fea:	2201      	movs	r2, #1
 8004fec:	4815      	ldr	r0, [pc, #84]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 8004fee:	4611      	mov	r1, r2
 8004ff0:	f7ff fab8 	bl	8004564 <MX25LM51245G_ResetMemory>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d1da      	bne.n	8004fae <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004ff8:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8004ffa:	70a0      	strb	r0, [r4, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004ffc:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004ffe:	8023      	strh	r3, [r4, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8005000:	f000 f99a 	bl	8005338 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005004:	78a2      	ldrb	r2, [r4, #2]
 8005006:	7861      	ldrb	r1, [r4, #1]
 8005008:	480e      	ldr	r0, [pc, #56]	; (8005044 <BSP_OSPI_NOR_Init+0x2f0>)
 800500a:	f7fe ffe5 	bl	8003fd8 <MX25LM51245G_AutoPollingMemReady>
 800500e:	2800      	cmp	r0, #0
 8005010:	d1cd      	bne.n	8004fae <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005012:	7872      	ldrb	r2, [r6, #1]
 8005014:	7831      	ldrb	r1, [r6, #0]
 8005016:	f7ff fe1b 	bl	8004c50 <BSP_OSPI_NOR_ConfigFlash>
 800501a:	2800      	cmp	r0, #0
 800501c:	d1c7      	bne.n	8004fae <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 800501e:	2000      	movs	r0, #0
 8005020:	e7b5      	b.n	8004f8e <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 8005022:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005026:	e7b2      	b.n	8004f8e <BSP_OSPI_NOR_Init+0x23a>
 8005028:	240021dc 	.word	0x240021dc
 800502c:	58024400 	.word	0x58024400
 8005030:	58021800 	.word	0x58021800
 8005034:	58020400 	.word	0x58020400
 8005038:	58021400 	.word	0x58021400
 800503c:	58020c00 	.word	0x58020c00
 8005040:	58021000 	.word	0x58021000
 8005044:	240021e4 	.word	0x240021e4

08005048 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504c:	460c      	mov	r4, r1
 800504e:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005050:	2800      	cmp	r0, #0
 8005052:	d163      	bne.n	800511c <BSP_TS_Init+0xd4>
 8005054:	680b      	ldr	r3, [r1, #0]
 8005056:	1e5a      	subs	r2, r3, #1
 8005058:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 800505c:	d25e      	bcs.n	800511c <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800505e:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005060:	1e51      	subs	r1, r2, #1
 8005062:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 8005066:	d259      	bcs.n	800511c <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005068:	4293      	cmp	r3, r2
 800506a:	bf28      	it	cs
 800506c:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800506e:	68e2      	ldr	r2, [r4, #12]
 8005070:	429a      	cmp	r2, r3
 8005072:	d853      	bhi.n	800511c <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005074:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005076:	4d2b      	ldr	r5, [pc, #172]	; (8005124 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8005078:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800507a:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 800507c:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005080:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 8005082:	4b29      	ldr	r3, [pc, #164]	; (8005128 <BSP_TS_Init+0xe0>)
 8005084:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <BSP_TS_Init+0xe4>)
 8005088:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800508a:	4b29      	ldr	r3, [pc, #164]	; (8005130 <BSP_TS_Init+0xe8>)
 800508c:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800508e:	4b29      	ldr	r3, [pc, #164]	; (8005134 <BSP_TS_Init+0xec>)
 8005090:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <BSP_TS_Init+0xf0>)
 8005094:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005096:	f7fe fef1 	bl	8003e7c <FT5336_RegisterBusIO>
 800509a:	b128      	cbz	r0, 80050a8 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 800509c:	f04f 35ff 	mov.w	r5, #4294967295
}
 80050a0:	4628      	mov	r0, r5
 80050a2:	b008      	add	sp, #32
 80050a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80050a8:	a901      	add	r1, sp, #4
 80050aa:	4628      	mov	r0, r5
 80050ac:	f7fe fe4c 	bl	8003d48 <FT5336_ReadID>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d1f3      	bne.n	800509c <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	2b51      	cmp	r3, #81	; 0x51
 80050b8:	d1f0      	bne.n	800509c <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80050bc:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 80050be:	4f20      	ldr	r7, [pc, #128]	; (8005140 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050c0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8005148 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 80050c4:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050c6:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4798      	blx	r3
 80050ce:	4605      	mov	r5, r0
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d1e3      	bne.n	800509c <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050d4:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050d6:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050d8:	4e1a      	ldr	r6, [pc, #104]	; (8005144 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050da:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050dc:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80050de:	6863      	ldr	r3, [r4, #4]
 80050e0:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050ea:	f8d8 3000 	ldr.w	r3, [r8]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4798      	blx	r3
 80050f2:	2800      	cmp	r0, #0
 80050f4:	db0f      	blt.n	8005116 <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80050f6:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80050f8:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80050fa:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80050fc:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80050fe:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005100:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005106:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005108:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800510a:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800510c:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800510e:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005110:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005114:	e7c4      	b.n	80050a0 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005116:	f06f 0504 	mvn.w	r5, #4
 800511a:	e7c1      	b.n	80050a0 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 800511c:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005120:	e7be      	b.n	80050a0 <BSP_TS_Init+0x58>
 8005122:	bf00      	nop
 8005124:	24002244 	.word	0x24002244
 8005128:	08004671 	.word	0x08004671
 800512c:	080045d9 	.word	0x080045d9
 8005130:	08004955 	.word	0x08004955
 8005134:	08004921 	.word	0x08004921
 8005138:	08004989 	.word	0x08004989
 800513c:	24000020 	.word	0x24000020
 8005140:	2400226c 	.word	0x2400226c
 8005144:	24002270 	.word	0x24002270
 8005148:	24002298 	.word	0x24002298

0800514c <BSP_TS_GetState>:
{
 800514c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005150:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 8005152:	2800      	cmp	r0, #0
 8005154:	d151      	bne.n	80051fa <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <BSP_TS_GetState+0xb4>)
 8005158:	a901      	add	r1, sp, #4
 800515a:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <BSP_TS_GetState+0xb8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6810      	ldr	r0, [r2, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	4798      	blx	r3
 8005164:	2800      	cmp	r0, #0
 8005166:	db45      	blt.n	80051f4 <BSP_TS_GetState+0xa8>
    else if(state.TouchDetected != 0U)
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <BSP_TS_GetState+0xbc>)
 800516a:	9801      	ldr	r0, [sp, #4]
 800516c:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8005170:	6a1f      	ldr	r7, [r3, #32]
 8005172:	2800      	cmp	r0, #0
 8005174:	d03a      	beq.n	80051ec <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005176:	689e      	ldr	r6, [r3, #8]
 8005178:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800517c:	0732      	lsls	r2, r6, #28
      y_oriented = state.TouchY;
 800517e:	e9dd e102 	ldrd	lr, r1, [sp, #8]
        x_oriented = state.TouchY;
 8005182:	bf4b      	itete	mi
 8005184:	460d      	movmi	r5, r1
      x_oriented = state.TouchX;
 8005186:	4675      	movpl	r5, lr
        y_oriented = state.TouchX;
 8005188:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 800518a:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800518c:	f016 0f02 	tst.w	r6, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8005190:	bf1c      	itt	ne
 8005192:	f108 35ff 	addne.w	r5, r8, #4294967295
 8005196:	eba5 050e 	subne.w	r5, r5, lr
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800519a:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800519e:	0776      	lsls	r6, r6, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051a0:	681e      	ldr	r6, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80051a2:	bf48      	it	mi
 80051a4:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051a8:	4375      	muls	r5, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051aa:	6859      	ldr	r1, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80051ac:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051ae:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80051b0:	68d8      	ldr	r0, [r3, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051b2:	fbb5 f5f8 	udiv	r5, r5, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051b6:	fbb2 f2fe 	udiv	r2, r2, lr
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80051ba:	4565      	cmp	r5, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051bc:	6065      	str	r5, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051be:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80051c0:	bf8c      	ite	hi
 80051c2:	eba5 060c 	subhi.w	r6, r5, ip
 80051c6:	ebac 0605 	subls.w	r6, ip, r5
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80051ca:	42ba      	cmp	r2, r7
 80051cc:	bf8c      	ite	hi
 80051ce:	1bd1      	subhi	r1, r2, r7
 80051d0:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80051d2:	42b0      	cmp	r0, r6
 80051d4:	d301      	bcc.n	80051da <BSP_TS_GetState+0x8e>
 80051d6:	4288      	cmp	r0, r1
 80051d8:	d205      	bcs.n	80051e6 <BSP_TS_GetState+0x9a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80051da:	619d      	str	r5, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80051dc:	621a      	str	r2, [r3, #32]
  int32_t ret = BSP_ERROR_NONE;
 80051de:	2000      	movs	r0, #0
}
 80051e0:	b004      	add	sp, #16
 80051e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80051e6:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80051ea:	e7f8      	b.n	80051de <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80051ec:	e9c4 0c00 	strd	r0, ip, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80051f0:	60a7      	str	r7, [r4, #8]
 80051f2:	e7f5      	b.n	80051e0 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80051f4:	f06f 0004 	mvn.w	r0, #4
 80051f8:	e7f2      	b.n	80051e0 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80051fa:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80051fe:	e7ef      	b.n	80051e0 <BSP_TS_GetState+0x94>
 8005200:	24002298 	.word	0x24002298
 8005204:	2400226c 	.word	0x2400226c
 8005208:	24002270 	.word	0x24002270

0800520c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800520c:	4a22      	ldr	r2, [pc, #136]	; (8005298 <SystemInit+0x8c>)
 800520e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005212:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005216:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800521a:	4a20      	ldr	r2, [pc, #128]	; (800529c <SystemInit+0x90>)
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	2b06      	cmp	r3, #6
 8005224:	d805      	bhi.n	8005232 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	f023 030f 	bic.w	r3, r3, #15
 800522c:	f043 0307 	orr.w	r3, r3, #7
 8005230:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <SystemInit+0x94>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800523c:	2200      	movs	r2, #0
 800523e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <SystemInit+0x98>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005246:	4915      	ldr	r1, [pc, #84]	; (800529c <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8005248:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800524a:	680a      	ldr	r2, [r1, #0]
 800524c:	0712      	lsls	r2, r2, #28
 800524e:	d505      	bpl.n	800525c <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005250:	680a      	ldr	r2, [r1, #0]
 8005252:	f022 020f 	bic.w	r2, r2, #15
 8005256:	f042 0207 	orr.w	r2, r2, #7
 800525a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800525c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800525e:	4912      	ldr	r1, [pc, #72]	; (80052a8 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8005260:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005262:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005264:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005266:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005268:	4910      	ldr	r1, [pc, #64]	; (80052ac <SystemInit+0xa0>)
 800526a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800526c:	4910      	ldr	r1, [pc, #64]	; (80052b0 <SystemInit+0xa4>)
 800526e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005272:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005276:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005278:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800527a:	6819      	ldr	r1, [r3, #0]
 800527c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005280:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005282:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005284:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <SystemInit+0xa8>)
 800528a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800528c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005290:	4b01      	ldr	r3, [pc, #4]	; (8005298 <SystemInit+0x8c>)
 8005292:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	e000ed00 	.word	0xe000ed00
 800529c:	52002000 	.word	0x52002000
 80052a0:	58024400 	.word	0x58024400
 80052a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80052a8:	02020200 	.word	0x02020200
 80052ac:	01ff0000 	.word	0x01ff0000
 80052b0:	01010280 	.word	0x01010280
 80052b4:	52004000 	.word	0x52004000

080052b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ba:	2003      	movs	r0, #3
 80052bc:	f000 f84e 	bl	800535c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052c0:	f002 fa02 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 80052c4:	490f      	ldr	r1, [pc, #60]	; (8005304 <HAL_Init+0x4c>)
 80052c6:	4a10      	ldr	r2, [pc, #64]	; (8005308 <HAL_Init+0x50>)
 80052c8:	698b      	ldr	r3, [r1, #24]
 80052ca:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80052ce:	5cd3      	ldrb	r3, [r2, r3]
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052d6:	698b      	ldr	r3, [r1, #24]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
 80052de:	4a0b      	ldr	r2, [pc, #44]	; (800530c <HAL_Init+0x54>)
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	fa20 f303 	lsr.w	r3, r0, r3
 80052e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_Init+0x58>)
 80052ec:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7fc fa56 	bl	80017a0 <HAL_InitTick>
 80052f4:	4604      	mov	r4, r0
 80052f6:	b918      	cbnz	r0, 8005300 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80052f8:	f7fb fe8c 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80052fc:	4620      	mov	r0, r4
 80052fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005300:	2401      	movs	r4, #1
 8005302:	e7fb      	b.n	80052fc <HAL_Init+0x44>
 8005304:	58024400 	.word	0x58024400
 8005308:	0801d1a0 	.word	0x0801d1a0
 800530c:	24000054 	.word	0x24000054
 8005310:	24000050 	.word	0x24000050

08005314 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005314:	4a03      	ldr	r2, [pc, #12]	; (8005324 <HAL_IncTick+0x10>)
 8005316:	4b04      	ldr	r3, [pc, #16]	; (8005328 <HAL_IncTick+0x14>)
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	440b      	add	r3, r1
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	240071fc 	.word	0x240071fc
 8005328:	24000058 	.word	0x24000058

0800532c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800532c:	4b01      	ldr	r3, [pc, #4]	; (8005334 <HAL_GetTick+0x8>)
 800532e:	6818      	ldr	r0, [r3, #0]
}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	240071fc 	.word	0x240071fc

08005338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800533c:	f7ff fff6 	bl	800532c <HAL_GetTick>
 8005340:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005342:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005344:	bf1e      	ittt	ne
 8005346:	4b04      	ldrne	r3, [pc, #16]	; (8005358 <HAL_Delay+0x20>)
 8005348:	781b      	ldrbne	r3, [r3, #0]
 800534a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800534c:	f7ff ffee 	bl	800532c <HAL_GetTick>
 8005350:	1b43      	subs	r3, r0, r5
 8005352:	42a3      	cmp	r3, r4
 8005354:	d3fa      	bcc.n	800534c <HAL_Delay+0x14>
  {
  }
}
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	24000058 	.word	0x24000058

0800535c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800535c:	4907      	ldr	r1, [pc, #28]	; (800537c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800535e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005360:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800536a:	0412      	lsls	r2, r2, #16
 800536c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800536e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005378:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005382:	b530      	push	{r4, r5, lr}
 8005384:	68dc      	ldr	r4, [r3, #12]
 8005386:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800538a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005390:	2d04      	cmp	r5, #4
 8005392:	bf28      	it	cs
 8005394:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005396:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005398:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800539c:	bf8c      	ite	hi
 800539e:	3c03      	subhi	r4, #3
 80053a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80053a6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053a8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053ac:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b4:	fa01 f104 	lsl.w	r1, r1, r4
 80053b8:	ea41 0302 	orr.w	r3, r1, r2
 80053bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80053c0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80053c2:	db06      	blt.n	80053d2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80053c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80053cc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053d0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d2:	f000 000f 	and.w	r0, r0, #15
 80053d6:	4a02      	ldr	r2, [pc, #8]	; (80053e0 <HAL_NVIC_SetPriority+0x60>)
 80053d8:	5413      	strb	r3, [r2, r0]
 80053da:	e7f9      	b.n	80053d0 <HAL_NVIC_SetPriority+0x50>
 80053dc:	e000ed00 	.word	0xe000ed00
 80053e0:	e000ed14 	.word	0xe000ed14

080053e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053e4:	2800      	cmp	r0, #0
 80053e6:	db08      	blt.n	80053fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053e8:	2301      	movs	r3, #1
 80053ea:	0942      	lsrs	r2, r0, #5
 80053ec:	f000 001f 	and.w	r0, r0, #31
 80053f0:	fa03 f000 	lsl.w	r0, r3, r0
 80053f4:	4b01      	ldr	r3, [pc, #4]	; (80053fc <HAL_NVIC_EnableIRQ+0x18>)
 80053f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80053fa:	4770      	bx	lr
 80053fc:	e000e100 	.word	0xe000e100

08005400 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005400:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <HAL_MPU_Disable+0x18>)
 8005406:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800540e:	2200      	movs	r2, #0
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <HAL_MPU_Disable+0x1c>)
 8005412:	605a      	str	r2, [r3, #4]
}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000ed00 	.word	0xe000ed00
 800541c:	e000ed90 	.word	0xe000ed90

08005420 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005420:	4a06      	ldr	r2, [pc, #24]	; (800543c <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005422:	f040 0001 	orr.w	r0, r0, #1
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_MPU_Enable+0x20>)
 8005428:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800542a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800542c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005430:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005432:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005436:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800543a:	4770      	bx	lr
 800543c:	e000ed00 	.word	0xe000ed00
 8005440:	e000ed90 	.word	0xe000ed90

08005444 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005444:	7843      	ldrb	r3, [r0, #1]
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <HAL_MPU_ConfigRegion+0x4c>)
{
 8005448:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800544a:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800544c:	7801      	ldrb	r1, [r0, #0]
 800544e:	b1d9      	cbz	r1, 8005488 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005450:	6843      	ldr	r3, [r0, #4]
 8005452:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005454:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005456:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005458:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800545a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800545e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005460:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005462:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005466:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005468:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800546c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800546e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005472:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005474:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005478:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800547a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800547e:	7a01      	ldrb	r1, [r0, #8]
 8005480:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005484:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005486:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005488:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800548a:	6111      	str	r1, [r2, #16]
}
 800548c:	e7fb      	b.n	8005486 <HAL_MPU_ConfigRegion+0x42>
 800548e:	bf00      	nop
 8005490:	e000ed90 	.word	0xe000ed90

08005494 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005494:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005496:	4604      	mov	r4, r0
 8005498:	b908      	cbnz	r0, 800549e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800549c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800549e:	7f43      	ldrb	r3, [r0, #29]
 80054a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054a4:	b913      	cbnz	r3, 80054ac <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80054a6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80054a8:	f7fb fdcc 	bl	8001044 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80054ac:	2302      	movs	r3, #2
 80054ae:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80054b0:	7923      	ldrb	r3, [r4, #4]
 80054b2:	b9e3      	cbnz	r3, 80054ee <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <HAL_CRC_Init+0x70>)
 80054b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	f022 0218 	bic.w	r2, r2, #24
 80054c0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80054c2:	7962      	ldrb	r2, [r4, #5]
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	b9d2      	cbnz	r2, 80054fe <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80054c8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80054cc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80054ce:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	6961      	ldr	r1, [r4, #20]
 80054d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054d8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054da:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80054dc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80054e8:	2301      	movs	r3, #1
 80054ea:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80054ec:	e7d6      	b.n	800549c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80054ee:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 f808 	bl	8005508 <HAL_CRCEx_Polynomial_Set>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d0e2      	beq.n	80054c2 <HAL_CRC_Init+0x2e>
 80054fc:	e7cd      	b.n	800549a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80054fe:	6922      	ldr	r2, [r4, #16]
 8005500:	e7e4      	b.n	80054cc <HAL_CRC_Init+0x38>
 8005502:	bf00      	nop
 8005504:	04c11db7 	.word	0x04c11db7

08005508 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005508:	231f      	movs	r3, #31
{
 800550a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800550c:	3b01      	subs	r3, #1
 800550e:	d306      	bcc.n	800551e <HAL_CRCEx_Polynomial_Set+0x16>
 8005510:	fa21 f403 	lsr.w	r4, r1, r3
 8005514:	07e4      	lsls	r4, r4, #31
 8005516:	d5f9      	bpl.n	800550c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8005518:	2a08      	cmp	r2, #8
 800551a:	d014      	beq.n	8005546 <HAL_CRCEx_Polynomial_Set+0x3e>
 800551c:	d802      	bhi.n	8005524 <HAL_CRCEx_Polynomial_Set+0x1c>
 800551e:	b13a      	cbz	r2, 8005530 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8005520:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8005522:	e00d      	b.n	8005540 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8005524:	2a10      	cmp	r2, #16
 8005526:	d00c      	beq.n	8005542 <HAL_CRCEx_Polynomial_Set+0x3a>
 8005528:	2a18      	cmp	r2, #24
 800552a:	d1f9      	bne.n	8005520 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 800552c:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800552e:	d8f7      	bhi.n	8005520 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005530:	6800      	ldr	r0, [r0, #0]
 8005532:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005534:	6883      	ldr	r3, [r0, #8]
 8005536:	f023 0318 	bic.w	r3, r3, #24
 800553a:	431a      	orrs	r2, r3
 800553c:	6082      	str	r2, [r0, #8]
 800553e:	2000      	movs	r0, #0
}
 8005540:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8005542:	2b07      	cmp	r3, #7
 8005544:	e7f3      	b.n	800552e <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005546:	2b0f      	cmp	r3, #15
 8005548:	e7f1      	b.n	800552e <HAL_CRCEx_Polynomial_Set+0x26>

0800554a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800554a:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800554c:	4604      	mov	r4, r0
 800554e:	2800      	cmp	r0, #0
 8005550:	d036      	beq.n	80055c0 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005552:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8005556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800555a:	b91b      	cbnz	r3, 8005564 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800555c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005560:	f7fb fd88 	bl	8001074 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005564:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005566:	69e0      	ldr	r0, [r4, #28]
 8005568:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800556a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005572:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800557a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800557e:	430a      	orrs	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005582:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005584:	68a2      	ldr	r2, [r4, #8]
 8005586:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 800558a:	4302      	orrs	r2, r0
 800558c:	f021 0101 	bic.w	r1, r1, #1
 8005590:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005592:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005594:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005598:	0c12      	lsrs	r2, r2, #16
 800559a:	0412      	lsls	r2, r2, #16
 800559c:	430a      	orrs	r2, r1
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80055a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055a2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80055a6:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80055aa:	0552      	lsls	r2, r2, #21
 80055ac:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055b0:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80055b2:	430a      	orrs	r2, r1
 80055b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055b6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055b8:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055ba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80055be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80055c0:	2001      	movs	r0, #1
 80055c2:	e7fc      	b.n	80055be <HAL_DMA2D_Init+0x74>

080055c4 <HAL_DMA2D_LineEventCallback>:
 80055c4:	4770      	bx	lr

080055c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80055c6:	4770      	bx	lr

080055c8 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055c8:	6803      	ldr	r3, [r0, #0]
{
 80055ca:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055cc:	685e      	ldr	r6, [r3, #4]
{
 80055ce:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80055d0:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055d2:	07f2      	lsls	r2, r6, #31
 80055d4:	d514      	bpl.n	8005600 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80055d6:	05e9      	lsls	r1, r5, #23
 80055d8:	d512      	bpl.n	8005600 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055e2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80055ea:	2201      	movs	r2, #1
 80055ec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055ee:	2304      	movs	r3, #4
 80055f0:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055f4:	2300      	movs	r3, #0
 80055f6:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80055fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055fc:	b103      	cbz	r3, 8005600 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055fe:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005600:	06b2      	lsls	r2, r6, #26
 8005602:	d516      	bpl.n	8005632 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005604:	04ab      	lsls	r3, r5, #18
 8005606:	d514      	bpl.n	8005632 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005610:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005612:	2220      	movs	r2, #32
 8005614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800561e:	2304      	movs	r3, #4
 8005620:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005624:	2300      	movs	r3, #0
 8005626:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800562a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800562c:	b10b      	cbz	r3, 8005632 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800562e:	4620      	mov	r0, r4
 8005630:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005632:	0730      	lsls	r0, r6, #28
 8005634:	d516      	bpl.n	8005664 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005636:	0529      	lsls	r1, r5, #20
 8005638:	d514      	bpl.n	8005664 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005642:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005644:	2208      	movs	r2, #8
 8005646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005650:	2304      	movs	r3, #4
 8005652:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005656:	2300      	movs	r3, #0
 8005658:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800565c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800565e:	b10b      	cbz	r3, 8005664 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005660:	4620      	mov	r0, r4
 8005662:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005664:	0772      	lsls	r2, r6, #29
 8005666:	d50b      	bpl.n	8005680 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005668:	056b      	lsls	r3, r5, #21
 800566a:	d509      	bpl.n	8005680 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800566c:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800566e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005676:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005678:	2204      	movs	r2, #4
 800567a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800567c:	f7ff ffa2 	bl	80055c4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005680:	07b0      	lsls	r0, r6, #30
 8005682:	d514      	bpl.n	80056ae <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005684:	05a9      	lsls	r1, r5, #22
 8005686:	d512      	bpl.n	80056ae <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005690:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005692:	2202      	movs	r2, #2
 8005694:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005698:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800569a:	2301      	movs	r3, #1
 800569c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056a0:	2300      	movs	r3, #0
 80056a2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80056a6:	6a23      	ldr	r3, [r4, #32]
 80056a8:	b10b      	cbz	r3, 80056ae <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80056aa:	4620      	mov	r0, r4
 80056ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80056ae:	06f2      	lsls	r2, r6, #27
 80056b0:	d513      	bpl.n	80056da <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80056b2:	04eb      	lsls	r3, r5, #19
 80056b4:	d511      	bpl.n	80056da <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056b6:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056b8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80056c2:	2210      	movs	r2, #16
 80056c4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80056d0:	2300      	movs	r3, #0
 80056d2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056d6:	f7ff ff76 	bl	80055c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80056da:	bd70      	pop	{r4, r5, r6, pc}

080056dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80056e0:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056e2:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 80056e6:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80058a4 <HAL_GPIO_Init+0x1c8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056ea:	680a      	ldr	r2, [r1, #0]
 80056ec:	fa32 f403 	lsrs.w	r4, r2, r3
 80056f0:	d102      	bne.n	80056f8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80056f2:	b003      	add	sp, #12
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056f8:	f04f 0c01 	mov.w	ip, #1
 80056fc:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8005700:	ea1c 0202 	ands.w	r2, ip, r2
 8005704:	f000 80b7 	beq.w	8005876 <HAL_GPIO_Init+0x19a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005708:	684d      	ldr	r5, [r1, #4]
 800570a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800570e:	2603      	movs	r6, #3
 8005710:	f005 0403 	and.w	r4, r5, #3
 8005714:	fa06 f608 	lsl.w	r6, r6, r8
 8005718:	1e67      	subs	r7, r4, #1
 800571a:	43f6      	mvns	r6, r6
 800571c:	2f01      	cmp	r7, #1
 800571e:	d834      	bhi.n	800578a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8005720:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005722:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005726:	68cf      	ldr	r7, [r1, #12]
 8005728:	fa07 f708 	lsl.w	r7, r7, r8
 800572c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005730:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005732:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005734:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005738:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800573c:	409f      	lsls	r7, r3
 800573e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8005742:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8005744:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005746:	2c02      	cmp	r4, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005748:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800574c:	688f      	ldr	r7, [r1, #8]
 800574e:	fa07 f708 	lsl.w	r7, r7, r8
 8005752:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 8005756:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005758:	d119      	bne.n	800578e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800575a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800575e:	f003 0b07 	and.w	fp, r3, #7
 8005762:	f04f 0c0f 	mov.w	ip, #15
 8005766:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800576a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800576e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005772:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005776:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800577a:	690f      	ldr	r7, [r1, #16]
 800577c:	fa07 f70b 	lsl.w	r7, r7, fp
 8005780:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8005784:	f8ca 7020 	str.w	r7, [sl, #32]
 8005788:	e001      	b.n	800578e <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800578a:	2c03      	cmp	r4, #3
 800578c:	d1da      	bne.n	8005744 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800578e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005790:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005794:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005798:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800579c:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80057a0:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057a2:	d068      	beq.n	8005876 <HAL_GPIO_Init+0x19a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a4:	4e3d      	ldr	r6, [pc, #244]	; (800589c <HAL_GPIO_Init+0x1c0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057a6:	f003 0703 	and.w	r7, r3, #3
 80057aa:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ae:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057b2:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b4:	f044 0402 	orr.w	r4, r4, #2
 80057b8:	f8c6 40f4 	str.w	r4, [r6, #244]	; 0xf4
 80057bc:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
 80057c0:	f023 0603 	bic.w	r6, r3, #3
 80057c4:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
 80057c8:	f004 0402 	and.w	r4, r4, #2
 80057cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80057d0:	9401      	str	r4, [sp, #4]
 80057d2:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057d4:	fa0c f407 	lsl.w	r4, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80057d8:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057dc:	ea28 0c04 	bic.w	ip, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057e0:	4c2f      	ldr	r4, [pc, #188]	; (80058a0 <HAL_GPIO_Init+0x1c4>)
 80057e2:	42a0      	cmp	r0, r4
 80057e4:	d049      	beq.n	800587a <HAL_GPIO_Init+0x19e>
 80057e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057ea:	42a0      	cmp	r0, r4
 80057ec:	d047      	beq.n	800587e <HAL_GPIO_Init+0x1a2>
 80057ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057f2:	42a0      	cmp	r0, r4
 80057f4:	d045      	beq.n	8005882 <HAL_GPIO_Init+0x1a6>
 80057f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057fa:	42a0      	cmp	r0, r4
 80057fc:	d043      	beq.n	8005886 <HAL_GPIO_Init+0x1aa>
 80057fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005802:	42a0      	cmp	r0, r4
 8005804:	d041      	beq.n	800588a <HAL_GPIO_Init+0x1ae>
 8005806:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800580a:	42a0      	cmp	r0, r4
 800580c:	d03f      	beq.n	800588e <HAL_GPIO_Init+0x1b2>
 800580e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005812:	42a0      	cmp	r0, r4
 8005814:	d03d      	beq.n	8005892 <HAL_GPIO_Init+0x1b6>
 8005816:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800581a:	42a0      	cmp	r0, r4
 800581c:	d03b      	beq.n	8005896 <HAL_GPIO_Init+0x1ba>
 800581e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005822:	42a0      	cmp	r0, r4
 8005824:	bf0c      	ite	eq
 8005826:	2409      	moveq	r4, #9
 8005828:	240a      	movne	r4, #10
 800582a:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800582c:	02ef      	lsls	r7, r5, #11
        EXTI->RTSR1 = temp;
 800582e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005832:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005836:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8005838:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI->RTSR1;
 800583c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8005840:	bf54      	ite	pl
 8005842:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005844:	4314      	orrmi	r4, r2
        EXTI->RTSR1 = temp;
 8005846:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8005848:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800584a:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 800584c:	bf54      	ite	pl
 800584e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005850:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005852:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8005854:	f8c9 4004 	str.w	r4, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005858:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 800585c:	bf54      	ite	pl
 800585e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005860:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005862:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005864:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8005868:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800586c:	bf54      	ite	pl
 800586e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005870:	4314      	orrmi	r4, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8005872:	f8ce 4000 	str.w	r4, [lr]
    position++;
 8005876:	3301      	adds	r3, #1
 8005878:	e737      	b.n	80056ea <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800587a:	2400      	movs	r4, #0
 800587c:	e7d5      	b.n	800582a <HAL_GPIO_Init+0x14e>
 800587e:	2401      	movs	r4, #1
 8005880:	e7d3      	b.n	800582a <HAL_GPIO_Init+0x14e>
 8005882:	2402      	movs	r4, #2
 8005884:	e7d1      	b.n	800582a <HAL_GPIO_Init+0x14e>
 8005886:	2403      	movs	r4, #3
 8005888:	e7cf      	b.n	800582a <HAL_GPIO_Init+0x14e>
 800588a:	2404      	movs	r4, #4
 800588c:	e7cd      	b.n	800582a <HAL_GPIO_Init+0x14e>
 800588e:	2405      	movs	r4, #5
 8005890:	e7cb      	b.n	800582a <HAL_GPIO_Init+0x14e>
 8005892:	2406      	movs	r4, #6
 8005894:	e7c9      	b.n	800582a <HAL_GPIO_Init+0x14e>
 8005896:	2407      	movs	r4, #7
 8005898:	e7c7      	b.n	800582a <HAL_GPIO_Init+0x14e>
 800589a:	bf00      	nop
 800589c:	58024400 	.word	0x58024400
 80058a0:	58020000 	.word	0x58020000
 80058a4:	58000080 	.word	0x58000080

080058a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80058ac:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80058ae:	4d49      	ldr	r5, [pc, #292]	; (80059d4 <HAL_GPIO_DeInit+0x12c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058b0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80059dc <HAL_GPIO_DeInit+0x134>
 80058b4:	f8df a128 	ldr.w	sl, [pc, #296]	; 80059e0 <HAL_GPIO_DeInit+0x138>
 80058b8:	f8df b128 	ldr.w	fp, [pc, #296]	; 80059e4 <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 80058bc:	fa31 f302 	lsrs.w	r3, r1, r2
 80058c0:	d101      	bne.n	80058c6 <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80058c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80058c6:	2301      	movs	r3, #1
 80058c8:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 80058cc:	ea1e 0701 	ands.w	r7, lr, r1
 80058d0:	d06e      	beq.n	80059b0 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058d2:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058d6:	f002 0c03 	and.w	ip, r2, #3
 80058da:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058dc:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <HAL_GPIO_DeInit+0x130>)
 80058de:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058e2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058e6:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058e8:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058ec:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058f4:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058f8:	d05c      	beq.n	80059b4 <HAL_GPIO_DeInit+0x10c>
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	4298      	cmp	r0, r3
 8005900:	d05a      	beq.n	80059b8 <HAL_GPIO_DeInit+0x110>
 8005902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005906:	4298      	cmp	r0, r3
 8005908:	d058      	beq.n	80059bc <HAL_GPIO_DeInit+0x114>
 800590a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590e:	4298      	cmp	r0, r3
 8005910:	d056      	beq.n	80059c0 <HAL_GPIO_DeInit+0x118>
 8005912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005916:	4298      	cmp	r0, r3
 8005918:	d054      	beq.n	80059c4 <HAL_GPIO_DeInit+0x11c>
 800591a:	4548      	cmp	r0, r9
 800591c:	d054      	beq.n	80059c8 <HAL_GPIO_DeInit+0x120>
 800591e:	4550      	cmp	r0, sl
 8005920:	d054      	beq.n	80059cc <HAL_GPIO_DeInit+0x124>
 8005922:	4558      	cmp	r0, fp
 8005924:	d054      	beq.n	80059d0 <HAL_GPIO_DeInit+0x128>
 8005926:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800592a:	4298      	cmp	r0, r3
 800592c:	bf0c      	ite	eq
 800592e:	2309      	moveq	r3, #9
 8005930:	230a      	movne	r3, #10
 8005932:	fa03 f30c 	lsl.w	r3, r3, ip
 8005936:	4543      	cmp	r3, r8
 8005938:	d118      	bne.n	800596c <HAL_GPIO_DeInit+0xc4>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	ea23 0307 	bic.w	r3, r3, r7
 8005940:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005942:	686b      	ldr	r3, [r5, #4]
 8005944:	ea23 0307 	bic.w	r3, r3, r7
 8005948:	606b      	str	r3, [r5, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005952:	ea2c 0c07 	bic.w	ip, ip, r7
 8005956:	f8c3 c004 	str.w	ip, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800595a:	f8d3 c000 	ldr.w	ip, [r3]
 800595e:	ea2c 0707 	bic.w	r7, ip, r7
 8005962:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005964:	68a3      	ldr	r3, [r4, #8]
 8005966:	ea23 0606 	bic.w	r6, r3, r6
 800596a:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800596c:	2603      	movs	r6, #3
 800596e:	0053      	lsls	r3, r2, #1
 8005970:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005972:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005976:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800597a:	270f      	movs	r7, #15
 800597c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005980:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005982:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005986:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005988:	fa22 f406 	lsr.w	r4, r2, r6
 800598c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005990:	6a26      	ldr	r6, [r4, #32]
 8005992:	ea26 0707 	bic.w	r7, r6, r7
 8005996:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005998:	68c4      	ldr	r4, [r0, #12]
 800599a:	ea24 0403 	bic.w	r4, r4, r3
 800599e:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80059a0:	6844      	ldr	r4, [r0, #4]
 80059a2:	ea24 040e 	bic.w	r4, r4, lr
 80059a6:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059a8:	6884      	ldr	r4, [r0, #8]
 80059aa:	ea24 0303 	bic.w	r3, r4, r3
 80059ae:	6083      	str	r3, [r0, #8]
    position++;
 80059b0:	3201      	adds	r2, #1
 80059b2:	e783      	b.n	80058bc <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80059b4:	2300      	movs	r3, #0
 80059b6:	e7bc      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e7ba      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059bc:	2302      	movs	r3, #2
 80059be:	e7b8      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059c0:	2303      	movs	r3, #3
 80059c2:	e7b6      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059c4:	2304      	movs	r3, #4
 80059c6:	e7b4      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059c8:	2305      	movs	r3, #5
 80059ca:	e7b2      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059cc:	2306      	movs	r3, #6
 80059ce:	e7b0      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059d0:	2307      	movs	r3, #7
 80059d2:	e7ae      	b.n	8005932 <HAL_GPIO_DeInit+0x8a>
 80059d4:	58000080 	.word	0x58000080
 80059d8:	58020000 	.word	0x58020000
 80059dc:	58021400 	.word	0x58021400
 80059e0:	58021800 	.word	0x58021800
 80059e4:	58021c00 	.word	0x58021c00

080059e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059e8:	6903      	ldr	r3, [r0, #16]
 80059ea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80059ec:	bf14      	ite	ne
 80059ee:	2001      	movne	r0, #1
 80059f0:	2000      	moveq	r0, #0
 80059f2:	4770      	bx	lr

080059f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059f4:	b10a      	cbz	r2, 80059fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059f6:	6181      	str	r1, [r0, #24]
  }
}
 80059f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059fa:	0409      	lsls	r1, r1, #16
 80059fc:	e7fb      	b.n	80059f6 <HAL_GPIO_WritePin+0x2>

080059fe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059fe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a00:	ea01 0203 	and.w	r2, r1, r3
 8005a04:	ea21 0103 	bic.w	r1, r1, r3
 8005a08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a0c:	6181      	str	r1, [r0, #24]
}
 8005a0e:	4770      	bx	lr

08005a10 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a10:	6803      	ldr	r3, [r0, #0]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	0791      	lsls	r1, r2, #30
 8005a16:	d501      	bpl.n	8005a1c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a18:	2200      	movs	r2, #0
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	07d2      	lsls	r2, r2, #31
 8005a20:	d403      	bmi.n	8005a2a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	619a      	str	r2, [r3, #24]
  }
}
 8005a2a:	4770      	bx	lr

08005a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a2c:	b530      	push	{r4, r5, lr}
 8005a2e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a30:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a34:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a36:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a38:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a3e:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a40:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a42:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a4a:	ea20 0002 	bic.w	r0, r0, r2
 8005a4e:	4303      	orrs	r3, r0
 8005a50:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a52:	bd30      	pop	{r4, r5, pc}
 8005a54:	03ff63ff 	.word	0x03ff63ff

08005a58 <I2C_IsErrorOccurred>:
{
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a5c:	6803      	ldr	r3, [r0, #0]
{
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4688      	mov	r8, r1
 8005a62:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a64:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a66:	f015 0510 	ands.w	r5, r5, #16
 8005a6a:	d079      	beq.n	8005b60 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6c:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005a70:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a74:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	0695      	lsls	r5, r2, #26
 8005a7c:	d436      	bmi.n	8005aec <I2C_IsErrorOccurred+0x94>
 8005a7e:	b10e      	cbz	r6, 8005a84 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005a80:	2504      	movs	r5, #4
 8005a82:	e039      	b.n	8005af8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005a84:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a88:	d0f6      	beq.n	8005a78 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7ff fc4f 	bl	800532c <HAL_GetTick>
 8005a8e:	1bc0      	subs	r0, r0, r7
 8005a90:	4540      	cmp	r0, r8
 8005a92:	d802      	bhi.n	8005a9a <I2C_IsErrorOccurred+0x42>
 8005a94:	f1b8 0f00 	cmp.w	r8, #0
 8005a98:	d1ed      	bne.n	8005a76 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8005a9e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005aa2:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005aa4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005aa6:	0400      	lsls	r0, r0, #16
 8005aa8:	d50a      	bpl.n	8005ac0 <I2C_IsErrorOccurred+0x68>
 8005aaa:	0449      	lsls	r1, r1, #17
 8005aac:	d408      	bmi.n	8005ac0 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8005aae:	2a20      	cmp	r2, #32
 8005ab0:	d006      	beq.n	8005ac0 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005aba:	f7ff fc37 	bl	800532c <HAL_GetTick>
 8005abe:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	699d      	ldr	r5, [r3, #24]
 8005ac4:	f015 0520 	ands.w	r5, r5, #32
 8005ac8:	d1d5      	bne.n	8005a76 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005aca:	f7ff fc2f 	bl	800532c <HAL_GetTick>
 8005ace:	1bc0      	subs	r0, r0, r7
 8005ad0:	2819      	cmp	r0, #25
 8005ad2:	d9f5      	bls.n	8005ac0 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ad4:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8005ad6:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8005ad8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005adc:	f043 0320 	orr.w	r3, r3, #32
 8005ae0:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8005aea:	e7e9      	b.n	8005ac0 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8005aec:	2e00      	cmp	r6, #0
 8005aee:	d1c7      	bne.n	8005a80 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af0:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8005af2:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8005af4:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005afc:	05d0      	lsls	r0, r2, #23
 8005afe:	d505      	bpl.n	8005b0c <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b00:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005b04:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8005b08:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b0a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b0c:	0551      	lsls	r1, r2, #21
 8005b0e:	d505      	bpl.n	8005b1c <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005b14:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8005b18:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b1a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b1c:	0592      	lsls	r2, r2, #22
 8005b1e:	d521      	bpl.n	8005b64 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b20:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b24:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b28:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005b2a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8005b2c:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8005b2e:	f7ff ff6f 	bl	8005a10 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	6853      	ldr	r3, [r2, #4]
 8005b36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005b3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005b3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005b48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b4a:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8005b4e:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005b5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b5e:	e003      	b.n	8005b68 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	462e      	mov	r6, r5
 8005b62:	e7c9      	b.n	8005af8 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8005b64:	2e00      	cmp	r6, #0
 8005b66:	d1e0      	bne.n	8005b2a <I2C_IsErrorOccurred+0xd2>
}
 8005b68:	4630      	mov	r0, r6
 8005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005b6e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005b6e:	b570      	push	{r4, r5, r6, lr}
 8005b70:	4604      	mov	r4, r0
 8005b72:	460d      	mov	r5, r1
 8005b74:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	079b      	lsls	r3, r3, #30
 8005b7c:	d501      	bpl.n	8005b82 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005b7e:	2000      	movs	r0, #0
}
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b82:	4632      	mov	r2, r6
 8005b84:	4629      	mov	r1, r5
 8005b86:	4620      	mov	r0, r4
 8005b88:	f7ff ff66 	bl	8005a58 <I2C_IsErrorOccurred>
 8005b8c:	b9a0      	cbnz	r0, 8005bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	1c6a      	adds	r2, r5, #1
 8005b90:	d0f1      	beq.n	8005b76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7ff fbcb 	bl	800532c <HAL_GetTick>
 8005b96:	1b80      	subs	r0, r0, r6
 8005b98:	42a8      	cmp	r0, r5
 8005b9a:	d801      	bhi.n	8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	d1ea      	bne.n	8005b76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ba2:	f043 0320 	orr.w	r3, r3, #32
 8005ba6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005bb4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005bb8:	2001      	movs	r0, #1
 8005bba:	e7e1      	b.n	8005b80 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08005bbc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	069b      	lsls	r3, r3, #26
 8005bca:	d501      	bpl.n	8005bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005bcc:	2000      	movs	r0, #0
}
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f7ff ff3f 	bl	8005a58 <I2C_IsErrorOccurred>
 8005bda:	b990      	cbnz	r0, 8005c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bdc:	f7ff fba6 	bl	800532c <HAL_GetTick>
 8005be0:	1b80      	subs	r0, r0, r6
 8005be2:	42a8      	cmp	r0, r5
 8005be4:	d801      	bhi.n	8005bea <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005be6:	2d00      	cmp	r5, #0
 8005be8:	d1ec      	bne.n	8005bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bec:	f043 0320 	orr.w	r3, r3, #32
 8005bf0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	2320      	movs	r3, #32
 8005bf4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005bfe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005c02:	2001      	movs	r0, #1
 8005c04:	e7e3      	b.n	8005bce <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08005c06 <I2C_WaitOnFlagUntilTimeout>:
{
 8005c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0a:	9f06      	ldr	r7, [sp, #24]
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	4688      	mov	r8, r1
 8005c10:	4616      	mov	r6, r2
 8005c12:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	6993      	ldr	r3, [r2, #24]
 8005c18:	ea38 0303 	bics.w	r3, r8, r3
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	42b3      	cmp	r3, r6
 8005c24:	d001      	beq.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005c26:	2000      	movs	r0, #0
 8005c28:	e015      	b.n	8005c56 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	1c6b      	adds	r3, r5, #1
 8005c2c:	d0f3      	beq.n	8005c16 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2e:	f7ff fb7d 	bl	800532c <HAL_GetTick>
 8005c32:	1bc0      	subs	r0, r0, r7
 8005c34:	42a8      	cmp	r0, r5
 8005c36:	d801      	bhi.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0x36>
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	d1eb      	bne.n	8005c14 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005c3e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	f043 0320 	orr.w	r3, r3, #32
 8005c44:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c46:	2320      	movs	r3, #32
 8005c48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005c52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005c5c <I2C_RequestMemoryWrite>:
{
 8005c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c60:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c62:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <I2C_RequestMemoryWrite+0x68>)
{
 8005c64:	4605      	mov	r5, r0
 8005c66:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	b2f2      	uxtb	r2, r6
 8005c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8005c70:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c74:	f7ff feda 	bl	8005a2c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c78:	4628      	mov	r0, r5
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7ff ff76 	bl	8005b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005c82:	b118      	cbz	r0, 8005c8c <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8005c84:	2001      	movs	r0, #1
}
 8005c86:	b002      	add	sp, #8
 8005c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c8c:	2e01      	cmp	r6, #1
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	d10d      	bne.n	8005cae <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c92:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c94:	2200      	movs	r2, #0
 8005c96:	2180      	movs	r1, #128	; 0x80
 8005c98:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	f8cd 8000 	str.w	r8, [sp]
 8005ca2:	f7ff ffb0 	bl	8005c06 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005ca6:	3800      	subs	r0, #0
 8005ca8:	bf18      	it	ne
 8005caa:	2001      	movne	r0, #1
 8005cac:	e7eb      	b.n	8005c86 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cae:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	f7ff ff59 	bl	8005b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d1e1      	bne.n	8005c84 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	e7e6      	b.n	8005c92 <I2C_RequestMemoryWrite+0x36>
 8005cc4:	80002000 	.word	0x80002000

08005cc8 <I2C_RequestMemoryRead>:
{
 8005cc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ccc:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cce:	4b18      	ldr	r3, [pc, #96]	; (8005d30 <I2C_RequestMemoryRead+0x68>)
{
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	b2f2      	uxtb	r2, r6
 8005cd8:	2300      	movs	r3, #0
{
 8005cda:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cde:	f7ff fea5 	bl	8005a2c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	f7ff ff41 	bl	8005b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005cec:	b118      	cbz	r0, 8005cf6 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005cee:	2001      	movs	r0, #1
}
 8005cf0:	b002      	add	sp, #8
 8005cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cf6:	2e01      	cmp	r6, #1
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	d10d      	bne.n	8005d18 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cfc:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2140      	movs	r1, #64	; 0x40
 8005d02:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d04:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d06:	463b      	mov	r3, r7
 8005d08:	f8cd 8000 	str.w	r8, [sp]
 8005d0c:	f7ff ff7b 	bl	8005c06 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005d10:	3800      	subs	r0, #0
 8005d12:	bf18      	it	ne
 8005d14:	2001      	movne	r0, #1
 8005d16:	e7eb      	b.n	8005cf0 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d18:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d20:	4642      	mov	r2, r8
 8005d22:	f7ff ff24 	bl	8005b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d1e1      	bne.n	8005cee <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d2a:	682b      	ldr	r3, [r5, #0]
 8005d2c:	e7e6      	b.n	8005cfc <I2C_RequestMemoryRead+0x34>
 8005d2e:	bf00      	nop
 8005d30:	80002000 	.word	0x80002000

08005d34 <HAL_I2C_MspInit>:
}
 8005d34:	4770      	bx	lr

08005d36 <HAL_I2C_Init>:
{
 8005d36:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005d38:	4604      	mov	r4, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d04a      	beq.n	8005dd4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005d42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d46:	b91b      	cbnz	r3, 8005d50 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005d48:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005d4c:	f7ff fff2 	bl	8005d34 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d50:	2324      	movs	r3, #36	; 0x24
 8005d52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d60:	6862      	ldr	r2, [r4, #4]
 8005d62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d66:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d6e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005d74:	2901      	cmp	r1, #1
 8005d76:	d124      	bne.n	8005dc2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d7c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d7e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d80:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d82:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d8a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d92:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d94:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005d98:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d9a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005da0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005da2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005db2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005dc0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dc6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dc8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dca:	d1d8      	bne.n	8005d7e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd0:	605a      	str	r2, [r3, #4]
 8005dd2:	e7d4      	b.n	8005d7e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	e7f3      	b.n	8005dc0 <HAL_I2C_Init+0x8a>

08005dd8 <HAL_I2C_MspDeInit>:
 8005dd8:	4770      	bx	lr

08005dda <HAL_I2C_DeInit>:
{
 8005dda:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	b198      	cbz	r0, 8005e08 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005de0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005de2:	2324      	movs	r3, #36	; 0x24
 8005de4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005de8:	6813      	ldr	r3, [r2, #0]
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005df0:	f7ff fff2 	bl	8005dd8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df4:	2000      	movs	r0, #0
 8005df6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005df8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005dfc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e00:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e02:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005e06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005e08:	2001      	movs	r0, #1
 8005e0a:	e7fc      	b.n	8005e06 <HAL_I2C_DeInit+0x2c>

08005e0c <HAL_I2C_Mem_Write>:
{
 8005e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e10:	b085      	sub	sp, #20
 8005e12:	469b      	mov	fp, r3
 8005e14:	4604      	mov	r4, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005e1c:	4692      	mov	sl, r2
 8005e1e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005e22:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	f040 80a3 	bne.w	8005f74 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8005e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e30:	b10b      	cbz	r3, 8005e36 <HAL_I2C_Mem_Write+0x2a>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	b933      	cbnz	r3, 8005e44 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005e3c:	2001      	movs	r0, #1
}
 8005e3e:	b005      	add	sp, #20
 8005e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005e44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f000 8093 	beq.w	8005f74 <HAL_I2C_Mem_Write+0x168>
 8005e4e:	2501      	movs	r5, #1
 8005e50:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005e54:	f7ff fa6a 	bl	800532c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e58:	2319      	movs	r3, #25
 8005e5a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005e5c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e5e:	462a      	mov	r2, r5
 8005e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7ff fece 	bl	8005c06 <I2C_WaitOnFlagUntilTimeout>
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1e5      	bne.n	8005e3c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e70:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005e72:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e74:	4652      	mov	r2, sl
 8005e76:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e7c:	2340      	movs	r3, #64	; 0x40
 8005e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e84:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e86:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005e88:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e8a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e8c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005e90:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e92:	465b      	mov	r3, fp
 8005e94:	f7ff fee2 	bl	8005c5c <I2C_RequestMemoryWrite>
 8005e98:	b110      	cbz	r0, 8005ea0 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005e9a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e9e:	e7cd      	b.n	8005e3c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2bff      	cmp	r3, #255	; 0xff
 8005ea6:	d955      	bls.n	8005f54 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ea8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eae:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eb0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff fdb9 	bl	8005a2c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eba:	4632      	mov	r2, r6
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff fe55 	bl	8005b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1b9      	bne.n	8005e3c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005ed0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005ed2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005ed4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ed6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005ed8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005eda:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005edc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005ede:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005ee0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ee4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	b1ab      	cbz	r3, 8005f16 <HAL_I2C_Mem_Write+0x10a>
 8005eea:	b9a2      	cbnz	r2, 8005f16 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eec:	464b      	mov	r3, r9
 8005eee:	2180      	movs	r1, #128	; 0x80
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	9600      	str	r6, [sp, #0]
 8005ef4:	f7ff fe87 	bl	8005c06 <I2C_WaitOnFlagUntilTimeout>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d19f      	bne.n	8005e3c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005efc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2bff      	cmp	r3, #255	; 0xff
 8005f02:	d92f      	bls.n	8005f64 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f04:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f0a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f0c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff fd8b 	bl	8005a2c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005f16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1cd      	bne.n	8005eba <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1e:	4632      	mov	r2, r6
 8005f20:	4649      	mov	r1, r9
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff fe4a 	bl	8005bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d187      	bne.n	8005e3c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	2120      	movs	r1, #32
 8005f30:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005f38:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005f3c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005f4a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005f52:	e774      	b.n	8005e3e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005f54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f5a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	e7a6      	b.n	8005eb2 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8005f64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f6a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	e7cc      	b.n	8005f0e <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8005f74:	2002      	movs	r0, #2
 8005f76:	e762      	b.n	8005e3e <HAL_I2C_Mem_Write+0x32>

08005f78 <HAL_I2C_Mem_Read>:
{
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	469b      	mov	fp, r3
 8005f80:	4604      	mov	r4, r0
 8005f82:	460f      	mov	r7, r1
 8005f84:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005f88:	4692      	mov	sl, r2
 8005f8a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005f8e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f90:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	f040 80a7 	bne.w	80060e8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8005f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9c:	b10b      	cbz	r3, 8005fa2 <HAL_I2C_Mem_Read+0x2a>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	b933      	cbnz	r3, 8005fb0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005fa8:	2001      	movs	r0, #1
}
 8005faa:	b005      	add	sp, #20
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005fb0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	f000 8097 	beq.w	80060e8 <HAL_I2C_Mem_Read+0x170>
 8005fba:	2501      	movs	r5, #1
 8005fbc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005fc0:	f7ff f9b4 	bl	800532c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fc4:	2319      	movs	r3, #25
 8005fc6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005fc8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fca:	462a      	mov	r2, r5
 8005fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff fe18 	bl	8005c06 <I2C_WaitOnFlagUntilTimeout>
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d1e5      	bne.n	8005fa8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fdc:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005fde:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fe0:	4652      	mov	r2, sl
 8005fe2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fe4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fe8:	2340      	movs	r3, #64	; 0x40
 8005fea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ff2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005ff4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ff6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ff8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005ffc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ffe:	465b      	mov	r3, fp
 8006000:	f7ff fe62 	bl	8005cc8 <I2C_RequestMemoryRead>
 8006004:	b110      	cbz	r0, 800600c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8006006:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800600a:	e7cd      	b.n	8005fa8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800600c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2bff      	cmp	r3, #255	; 0xff
 8006012:	4b36      	ldr	r3, [pc, #216]	; (80060ec <HAL_I2C_Mem_Read+0x174>)
 8006014:	d958      	bls.n	80060c8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006016:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800601e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006020:	4639      	mov	r1, r7
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff fd02 	bl	8005a2c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006028:	464b      	mov	r3, r9
 800602a:	2200      	movs	r2, #0
 800602c:	2104      	movs	r1, #4
 800602e:	4620      	mov	r0, r4
 8006030:	9600      	str	r6, [sp, #0]
 8006032:	f7ff fde8 	bl	8005c06 <I2C_WaitOnFlagUntilTimeout>
 8006036:	2800      	cmp	r0, #0
 8006038:	d1b6      	bne.n	8005fa8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800603e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006040:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006042:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006044:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006046:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8006048:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800604a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800604c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800604e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006050:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006052:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006054:	b29b      	uxth	r3, r3
 8006056:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006058:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	b1ab      	cbz	r3, 800608a <HAL_I2C_Mem_Read+0x112>
 800605e:	b9a2      	cbnz	r2, 800608a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006060:	464b      	mov	r3, r9
 8006062:	2180      	movs	r1, #128	; 0x80
 8006064:	4620      	mov	r0, r4
 8006066:	9600      	str	r6, [sp, #0]
 8006068:	f7ff fdcd 	bl	8005c06 <I2C_WaitOnFlagUntilTimeout>
 800606c:	2800      	cmp	r0, #0
 800606e:	d19b      	bne.n	8005fa8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006070:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	2bff      	cmp	r3, #255	; 0xff
 8006076:	d92f      	bls.n	80060d8 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006078:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800607a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800607e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006080:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006082:	4639      	mov	r1, r7
 8006084:	4620      	mov	r0, r4
 8006086:	f7ff fcd1 	bl	8005a2c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800608a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1ca      	bne.n	8006028 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006092:	4632      	mov	r2, r6
 8006094:	4649      	mov	r1, r9
 8006096:	4620      	mov	r0, r4
 8006098:	f7ff fd90 	bl	8005bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 800609c:	2800      	cmp	r0, #0
 800609e:	d183      	bne.n	8005fa8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	2120      	movs	r1, #32
 80060a4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80060ac:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80060b0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80060be:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80060c6:	e770      	b.n	8005faa <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80060c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80060d0:	b292      	uxth	r2, r2
 80060d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	e7a3      	b.n	8006020 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80060d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060de:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80060e0:	b292      	uxth	r2, r2
 80060e2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	e7cc      	b.n	8006082 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80060e8:	2002      	movs	r0, #2
 80060ea:	e75e      	b.n	8005faa <HAL_I2C_Mem_Read+0x32>
 80060ec:	80002400 	.word	0x80002400

080060f0 <HAL_I2C_GetState>:
  return hi2c->State;
 80060f0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80060f4:	4770      	bx	lr

080060f6 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80060f6:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80060f8:	4770      	bx	lr

080060fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060fa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006100:	2b20      	cmp	r3, #32
 8006102:	b2dc      	uxtb	r4, r3
 8006104:	d11d      	bne.n	8006142 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006106:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800610a:	2b01      	cmp	r3, #1
 800610c:	d019      	beq.n	8006142 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800610e:	2324      	movs	r3, #36	; 0x24
 8006110:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006114:	6803      	ldr	r3, [r0, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	f022 0201 	bic.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006124:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4311      	orrs	r1, r2
 800612a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006134:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006136:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800613a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800613e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006140:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006142:	2002      	movs	r0, #2
 8006144:	e7fc      	b.n	8006140 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08006146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006146:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006148:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800614c:	2b20      	cmp	r3, #32
 800614e:	b2dc      	uxtb	r4, r3
 8006150:	d11c      	bne.n	800618c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006152:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006156:	2b01      	cmp	r3, #1
 8006158:	d018      	beq.n	800618c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800615a:	2324      	movs	r3, #36	; 0x24
 800615c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006160:	6803      	ldr	r3, [r0, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800616a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800616c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006170:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006174:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006180:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006184:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006188:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800618a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800618c:	2002      	movs	r0, #2
 800618e:	e7fc      	b.n	800618a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08006190 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006190:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006192:	f8d1 c000 	ldr.w	ip, [r1]
{
 8006196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800619a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800619c:	6804      	ldr	r4, [r0, #0]
 800619e:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061a0:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061a4:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061a6:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80061a8:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80061ac:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061b0:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061b2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061b6:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061ba:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061bc:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061be:	68e0      	ldr	r0, [r4, #12]
 80061c0:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80061c4:	4430      	add	r0, r6
 80061c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061ca:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061cc:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061ce:	68e0      	ldr	r0, [r4, #12]
 80061d0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80061d4:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061d6:	6898      	ldr	r0, [r3, #8]
 80061d8:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80061dc:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061de:	6888      	ldr	r0, [r1, #8]
 80061e0:	68e6      	ldr	r6, [r4, #12]
 80061e2:	3001      	adds	r0, #1
 80061e4:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80061e8:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061ea:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061ec:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80061f0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061f2:	6918      	ldr	r0, [r3, #16]
 80061f4:	f020 0007 	bic.w	r0, r0, #7
 80061f8:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061fa:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80061fc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061fe:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006202:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006206:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800620a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800620e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8006212:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8006216:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800621a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800621c:	6958      	ldr	r0, [r3, #20]
 800621e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8006222:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006224:	6948      	ldr	r0, [r1, #20]
 8006226:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006228:	69d8      	ldr	r0, [r3, #28]
 800622a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800622e:	f020 0007 	bic.w	r0, r0, #7
 8006232:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006234:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8006238:	4305      	orrs	r5, r0
 800623a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800623c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800623e:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006240:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006244:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006246:	b31e      	cbz	r6, 8006290 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006248:	2e01      	cmp	r6, #1
 800624a:	d023      	beq.n	8006294 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800624c:	1eb0      	subs	r0, r6, #2
 800624e:	2802      	cmp	r0, #2
 8006250:	d922      	bls.n	8006298 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006252:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8006254:	bf0c      	ite	eq
 8006256:	2002      	moveq	r0, #2
 8006258:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800625a:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800625c:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006260:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8006264:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006266:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006268:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800626a:	4345      	muls	r5, r0
 800626c:	4378      	muls	r0, r7
 800626e:	3007      	adds	r0, #7
 8006270:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006274:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006276:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006278:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800627c:	f020 0007 	bic.w	r0, r0, #7
 8006280:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006282:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006284:	58a3      	ldr	r3, [r4, r2]
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	50a3      	str	r3, [r4, r2]
}
 800628c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8006290:	2004      	movs	r0, #4
 8006292:	e7e2      	b.n	800625a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8006294:	2003      	movs	r0, #3
 8006296:	e7e0      	b.n	800625a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8006298:	2002      	movs	r0, #2
 800629a:	e7de      	b.n	800625a <LTDC_SetConfig+0xca>

0800629c <HAL_LTDC_Init>:
{
 800629c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800629e:	4604      	mov	r4, r0
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d063      	beq.n	800636c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80062a4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80062a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062ac:	b91b      	cbnz	r3, 80062b6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80062ae:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80062b2:	f7fa ff03 	bl	80010bc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062b6:	2302      	movs	r3, #2
 80062b8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80062c4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062c6:	6999      	ldr	r1, [r3, #24]
 80062c8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80062cc:	4302      	orrs	r2, r0
 80062ce:	68e0      	ldr	r0, [r4, #12]
 80062d0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062d2:	6920      	ldr	r0, [r4, #16]
 80062d4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062d6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062d8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062da:	4925      	ldr	r1, [pc, #148]	; (8006370 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062dc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	400a      	ands	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062ea:	69a0      	ldr	r0, [r4, #24]
 80062ec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062ee:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062f0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	400a      	ands	r2, r1
 80062f6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062fe:	6a20      	ldr	r0, [r4, #32]
 8006300:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006302:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006304:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	400a      	ands	r2, r1
 800630a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800630c:	691a      	ldr	r2, [r3, #16]
 800630e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006312:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006314:	4302      	orrs	r2, r0
 8006316:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	4011      	ands	r1, r2
 800631c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800631e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006320:	695a      	ldr	r2, [r3, #20]
 8006322:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006326:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006328:	430a      	orrs	r2, r1
 800632a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800632c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800632e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006332:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006336:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800633a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800633c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800633e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8006342:	430a      	orrs	r2, r1
 8006344:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006348:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800634c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006352:	f042 0206 	orr.w	r2, r2, #6
 8006356:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006360:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006362:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006366:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800636a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800636c:	2001      	movs	r0, #1
 800636e:	e7fc      	b.n	800636a <HAL_LTDC_Init+0xce>
 8006370:	f000f800 	.word	0xf000f800

08006374 <HAL_LTDC_ErrorCallback>:
 8006374:	4770      	bx	lr

08006376 <HAL_LTDC_ReloadEventCallback>:
 8006376:	4770      	bx	lr

08006378 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006378:	6803      	ldr	r3, [r0, #0]
{
 800637a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800637c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800637e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006380:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006382:	0772      	lsls	r2, r6, #29
 8006384:	d514      	bpl.n	80063b0 <HAL_LTDC_IRQHandler+0x38>
 8006386:	0769      	lsls	r1, r5, #29
 8006388:	d512      	bpl.n	80063b0 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800638a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638c:	f022 0204 	bic.w	r2, r2, #4
 8006390:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006392:	2204      	movs	r2, #4
 8006394:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006396:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80063a2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063a4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80063a8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80063ac:	f7ff ffe2 	bl	8006374 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80063b0:	07b2      	lsls	r2, r6, #30
 80063b2:	d516      	bpl.n	80063e2 <HAL_LTDC_IRQHandler+0x6a>
 80063b4:	07ab      	lsls	r3, r5, #30
 80063b6:	d514      	bpl.n	80063e2 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063b8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80063ba:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063be:	f022 0202 	bic.w	r2, r2, #2
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80063c4:	2202      	movs	r2, #2
 80063c6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80063c8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063d2:	2304      	movs	r3, #4
 80063d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80063d8:	2300      	movs	r3, #0
 80063da:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80063de:	f7ff ffc9 	bl	8006374 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80063e2:	07f0      	lsls	r0, r6, #31
 80063e4:	d510      	bpl.n	8006408 <HAL_LTDC_IRQHandler+0x90>
 80063e6:	07e9      	lsls	r1, r5, #31
 80063e8:	d50e      	bpl.n	8006408 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063ea:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80063ec:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80063f6:	2201      	movs	r2, #1
 80063f8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80063fa:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80063fc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006400:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8006404:	f7fc f8e4 	bl	80025d0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006408:	0732      	lsls	r2, r6, #28
 800640a:	d511      	bpl.n	8006430 <HAL_LTDC_IRQHandler+0xb8>
 800640c:	072b      	lsls	r3, r5, #28
 800640e:	d50f      	bpl.n	8006430 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006410:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006412:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006416:	f022 0208 	bic.w	r2, r2, #8
 800641a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800641c:	2208      	movs	r2, #8
 800641e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006420:	2301      	movs	r3, #1
 8006422:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006426:	2300      	movs	r3, #0
 8006428:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800642c:	f7ff ffa3 	bl	8006376 <HAL_LTDC_ReloadEventCallback>
}
 8006430:	bd70      	pop	{r4, r5, r6, pc}

08006432 <HAL_LTDC_ConfigLayer>:
{
 8006432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8006436:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8006440:	2b01      	cmp	r3, #1
 8006442:	f04f 0002 	mov.w	r0, #2
 8006446:	d01f      	beq.n	8006488 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006448:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800644a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800644e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006450:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006454:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8006458:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800645c:	3438      	adds	r4, #56	; 0x38
 800645e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800646c:	4630      	mov	r0, r6
 800646e:	4662      	mov	r2, ip
 8006470:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006472:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006474:	f7ff fe8c 	bl	8006190 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006478:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800647a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800647c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006480:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006484:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8006488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800648c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800648c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006490:	2b01      	cmp	r3, #1
 8006492:	f04f 0302 	mov.w	r3, #2
 8006496:	d012      	beq.n	80064be <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006498:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800649c:	6803      	ldr	r3, [r0, #0]
 800649e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80064a6:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <HAL_LTDC_ProgramLineEvent+0x38>)
 80064a8:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80064aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ac:	f042 0201 	orr.w	r2, r2, #1
 80064b0:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80064b8:	2300      	movs	r3, #0
 80064ba:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80064be:	4618      	mov	r0, r3
}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	50001000 	.word	0x50001000

080064c8 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80064cc:	f7fe ff2e 	bl	800532c <HAL_GetTick>
 80064d0:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80064d2:	b144      	cbz	r4, 80064e6 <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80064d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d006      	beq.n	80064ea <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80064e0:	2300      	movs	r3, #0
 80064e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80064e6:	2001      	movs	r0, #1
 80064e8:	e015      	b.n	8006516 <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80064f2:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	68d3      	ldr	r3, [r2, #12]
 8006500:	f013 0301 	ands.w	r3, r3, #1
 8006504:	d108      	bne.n	8006518 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8006506:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 8006508:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800650a:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 800650c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 800650e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 8006512:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8006516:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006518:	f7fe ff08 	bl	800532c <HAL_GetTick>
 800651c:	1b40      	subs	r0, r0, r5
 800651e:	2805      	cmp	r0, #5
 8006520:	d9ec      	bls.n	80064fc <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8006522:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006528:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800652a:	2300      	movs	r3, #0
 800652c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006530:	2303      	movs	r3, #3
 8006532:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 8006536:	e7d6      	b.n	80064e6 <HAL_MDMA_Abort+0x1e>

08006538 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800653c:	6804      	ldr	r4, [r0, #0]
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006544:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006546:	6883      	ldr	r3, [r0, #8]
 8006548:	b92b      	cbnz	r3, 8006556 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	684a      	ldr	r2, [r1, #4]
 800654e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006552:	4313      	orrs	r3, r2
 8006554:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006556:	680b      	ldr	r3, [r1, #0]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d14e      	bne.n	80065fa <OSPI_ConfigCmd+0xc2>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800655c:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8006560:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8006564:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8006568:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800656c:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 8006570:	433b      	orrs	r3, r7
 8006572:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006574:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006576:	b16b      	cbz	r3, 8006594 <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006578:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800657a:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800657e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8006580:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006582:	f8d2 c000 	ldr.w	ip, [r2]
 8006586:	433b      	orrs	r3, r7
 8006588:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 800658a:	433b      	orrs	r3, r7
 800658c:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 8006590:	433b      	orrs	r3, r7
 8006592:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006594:	6833      	ldr	r3, [r6, #0]
 8006596:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8006598:	f023 031f 	bic.w	r3, r3, #31
 800659c:	433b      	orrs	r3, r7
 800659e:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80065a0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80065a2:	b123      	cbz	r3, 80065ae <OSPI_ConfigCmd+0x76>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80065a4:	680e      	ldr	r6, [r1, #0]
 80065a6:	b916      	cbnz	r6, 80065ae <OSPI_ConfigCmd+0x76>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80065a8:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 80065aa:	3e01      	subs	r6, #1
 80065ac:	6426      	str	r6, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80065ae:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 80065b2:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80065b6:	f1ba 0f00 	cmp.w	sl, #0
 80065ba:	d076      	beq.n	80066aa <OSPI_ConfigCmd+0x172>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80065bc:	e9d1 e804 	ldrd	lr, r8, [r1, #16]
 80065c0:	f1b9 0f00 	cmp.w	r9, #0
 80065c4:	d047      	beq.n	8006656 <OSPI_ConfigCmd+0x11e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80065c6:	6817      	ldr	r7, [r2, #0]
 80065c8:	e9d1 6c08 	ldrd	r6, ip, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80065cc:	b34b      	cbz	r3, 8006622 <OSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80065ce:	ea43 000a 	orr.w	r0, r3, sl
 80065d2:	ea40 0309 	orr.w	r3, r0, r9
 80065d6:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80065d8:	ea43 0308 	orr.w	r3, r3, r8
 80065dc:	ea43 030e 	orr.w	r3, r3, lr
 80065e0:	ea43 030c 	orr.w	r3, r3, ip
 80065e4:	4333      	orrs	r3, r6
 80065e6:	4303      	orrs	r3, r0
 80065e8:	483e      	ldr	r0, [pc, #248]	; (80066e4 <OSPI_ConfigCmd+0x1ac>)
 80065ea:	4038      	ands	r0, r7
 80065ec:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80065ee:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80065f0:	688b      	ldr	r3, [r1, #8]
 80065f2:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80065f4:	698b      	ldr	r3, [r1, #24]
 80065f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80065f8:	e040      	b.n	800667c <OSPI_ConfigCmd+0x144>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80065fa:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 80065fc:	bf01      	itttt	eq
 80065fe:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 8006602:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 8006606:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800660a:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 800660e:	bf1f      	itttt	ne
 8006610:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8006614:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8006618:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800661c:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 8006620:	e7a4      	b.n	800656c <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006622:	ea4a 0309 	orr.w	r3, sl, r9
 8006626:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800662a:	ea43 0308 	orr.w	r3, r3, r8
 800662e:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 8006632:	ea43 030e 	orr.w	r3, r3, lr
 8006636:	ea43 030c 	orr.w	r3, r3, ip
 800663a:	4333      	orrs	r3, r6
 800663c:	433b      	orrs	r3, r7
 800663e:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006640:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006646:	d1d3      	bne.n	80065f0 <OSPI_ConfigCmd+0xb8>
 8006648:	694b      	ldr	r3, [r1, #20]
 800664a:	2b08      	cmp	r3, #8
 800664c:	d1d0      	bne.n	80065f0 <OSPI_ConfigCmd+0xb8>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006654:	e7cb      	b.n	80065ee <OSPI_ConfigCmd+0xb6>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006656:	b1a3      	cbz	r3, 8006682 <OSPI_ConfigCmd+0x14a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006658:	ea43 030a 	orr.w	r3, r3, sl
 800665c:	6810      	ldr	r0, [r2, #0]
 800665e:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8006660:	ea43 0308 	orr.w	r3, r3, r8
 8006664:	ea43 030e 	orr.w	r3, r3, lr
 8006668:	f020 6e70 	bic.w	lr, r0, #251658240	; 0xf000000
 800666c:	4323      	orrs	r3, r4
 800666e:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 8006672:	ea43 030e 	orr.w	r3, r3, lr
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006676:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 8006678:	688b      	ldr	r3, [r1, #8]
 800667a:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800667c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006682:	6814      	ldr	r4, [r2, #0]
 8006684:	ea4a 0308 	orr.w	r3, sl, r8
 8006688:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800668c:	ea43 030e 	orr.w	r3, r3, lr
 8006690:	4323      	orrs	r3, r4
 8006692:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006694:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669a:	d1ed      	bne.n	8006678 <OSPI_ConfigCmd+0x140>
 800669c:	694b      	ldr	r3, [r1, #20]
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d1ea      	bne.n	8006678 <OSPI_ConfigCmd+0x140>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066a8:	e7e5      	b.n	8006676 <OSPI_ConfigCmd+0x13e>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80066aa:	f1b9 0f00 	cmp.w	r9, #0
 80066ae:	d014      	beq.n	80066da <OSPI_ConfigCmd+0x1a2>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80066b0:	6810      	ldr	r0, [r2, #0]
 80066b2:	e9d1 5608 	ldrd	r5, r6, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80066b6:	b163      	cbz	r3, 80066d2 <OSPI_ConfigCmd+0x19a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80066b8:	ea43 0309 	orr.w	r3, r3, r9
 80066bc:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80066c0:	4333      	orrs	r3, r6
 80066c2:	432b      	orrs	r3, r5
 80066c4:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80066c6:	432b      	orrs	r3, r5
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80066c8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80066cc:	4303      	orrs	r3, r0
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	e790      	b.n	80065f4 <OSPI_ConfigCmd+0xbc>
 80066d2:	ea49 0306 	orr.w	r3, r9, r6
 80066d6:	432b      	orrs	r3, r5
 80066d8:	e7f6      	b.n	80066c8 <OSPI_ConfigCmd+0x190>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80066da:	2308      	movs	r3, #8
 80066dc:	6583      	str	r3, [r0, #88]	; 0x58
      status = HAL_ERROR;
 80066de:	2001      	movs	r0, #1
 80066e0:	e7cd      	b.n	800667e <OSPI_ConfigCmd+0x146>
 80066e2:	bf00      	nop
 80066e4:	f0ffc0c0 	.word	0xf0ffc0c0

080066e8 <OSPI_WaitFlagStateUntilTimeout>:
{
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80066f0:	4604      	mov	r4, r0
 80066f2:	460e      	mov	r6, r1
 80066f4:	4615      	mov	r5, r2
 80066f6:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	6a13      	ldr	r3, [r2, #32]
 80066fc:	4233      	tst	r3, r6
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	42ab      	cmp	r3, r5
 8006706:	d101      	bne.n	800670c <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8006708:	2000      	movs	r0, #0
 800670a:	e012      	b.n	8006732 <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800670c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006710:	d0f3      	beq.n	80066fa <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006712:	f7fe fe0b 	bl	800532c <HAL_GetTick>
 8006716:	1bc0      	subs	r0, r0, r7
 8006718:	4540      	cmp	r0, r8
 800671a:	d802      	bhi.n	8006722 <OSPI_WaitFlagStateUntilTimeout+0x3a>
 800671c:	f1b8 0f00 	cmp.w	r8, #0
 8006720:	d1ea      	bne.n	80066f8 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006722:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006726:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006728:	6563      	str	r3, [r4, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800672a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006738 <HAL_OSPI_Init>:
{
 8006738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800673a:	4604      	mov	r4, r0
 800673c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800673e:	f7fe fdf5 	bl	800532c <HAL_GetTick>
 8006742:	4603      	mov	r3, r0
  if (hospi == NULL)
 8006744:	2c00      	cmp	r4, #0
 8006746:	d068      	beq.n	800681a <HAL_OSPI_Init+0xe2>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006748:	2000      	movs	r0, #0
 800674a:	65a0      	str	r0, [r4, #88]	; 0x58
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800674c:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800674e:	2e00      	cmp	r6, #0
 8006750:	d161      	bne.n	8006816 <HAL_OSPI_Init+0xde>
      HAL_OSPI_MspInit(hospi);
 8006752:	4620      	mov	r0, r4
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	f7fa fdc1 	bl	80012dc <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 800675a:	69e0      	ldr	r0, [r4, #28]
 800675c:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 800675e:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	4301      	orrs	r1, r0
 8006766:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006768:	68af      	ldr	r7, [r5, #8]
 800676a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800676e:	482c      	ldr	r0, [pc, #176]	; (8006820 <HAL_OSPI_Init+0xe8>)
  hospi->Timeout = Timeout;
 8006770:	65e2      	str	r2, [r4, #92]	; 0x5c
      MODIFY_REG(hospi->Instance->DCR1,
 8006772:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006774:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 8006776:	4301      	orrs	r1, r0
 8006778:	6920      	ldr	r0, [r4, #16]
 800677a:	3801      	subs	r0, #1
 800677c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006780:	6960      	ldr	r0, [r4, #20]
 8006782:	3801      	subs	r0, #1
 8006784:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006788:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 800678a:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800678c:	68e9      	ldr	r1, [r5, #12]
 800678e:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006792:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006794:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006796:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006798:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800679a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800679e:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80067a0:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80067a2:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80067a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80067a6:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80067a8:	6829      	ldr	r1, [r5, #0]
 80067aa:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 80067ae:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80067b2:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80067b4:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80067b6:	2120      	movs	r1, #32
 80067b8:	9200      	str	r2, [sp, #0]
 80067ba:	4632      	mov	r2, r6
 80067bc:	f7ff ff94 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80067c0:	bb48      	cbnz	r0, 8006816 <HAL_OSPI_Init+0xde>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067c6:	68d9      	ldr	r1, [r3, #12]
 80067c8:	3a01      	subs	r2, #1
 80067ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80067ce:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80067d0:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80067d2:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067da:	430a      	orrs	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80067de:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80067e2:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 80067e6:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 80067ea:	432a      	orrs	r2, r5
 80067ec:	430a      	orrs	r2, r1
 80067ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80067fa:	69a2      	ldr	r2, [r4, #24]
 80067fc:	2a02      	cmp	r2, #2
 80067fe:	d103      	bne.n	8006808 <HAL_OSPI_Init+0xd0>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	f042 0202 	orr.w	r2, r2, #2
 8006806:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006808:	68e3      	ldr	r3, [r4, #12]
 800680a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 8006812:	2302      	movne	r3, #2
 8006814:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006816:	b005      	add	sp, #20
 8006818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 800681a:	2001      	movs	r0, #1
 800681c:	e7fb      	b.n	8006816 <HAL_OSPI_Init+0xde>
 800681e:	bf00      	nop
 8006820:	f8e0f88c 	.word	0xf8e0f88c

08006824 <HAL_OSPI_DeInit>:
{
 8006824:	b510      	push	{r4, lr}
  if (hospi == NULL)
 8006826:	4604      	mov	r4, r0
 8006828:	b168      	cbz	r0, 8006846 <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 800682a:	6803      	ldr	r3, [r0, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	f022 0202 	bic.w	r2, r2, #2
 800683a:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 800683c:	f7fa fe7e 	bl	800153c <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8006840:	2000      	movs	r0, #0
 8006842:	6560      	str	r0, [r4, #84]	; 0x54
}
 8006844:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8006846:	2001      	movs	r0, #1
 8006848:	e7fc      	b.n	8006844 <HAL_OSPI_DeInit+0x20>

0800684a <HAL_OSPI_Command>:
{
 800684a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800684c:	4604      	mov	r4, r0
 800684e:	4616      	mov	r6, r2
 8006850:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006852:	f7fe fd6b 	bl	800532c <HAL_GetTick>
  state = hospi->State;
 8006856:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8006858:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800685a:	2a02      	cmp	r2, #2
 800685c:	d107      	bne.n	800686e <HAL_OSPI_Command+0x24>
 800685e:	68e2      	ldr	r2, [r4, #12]
 8006860:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8006864:	d109      	bne.n	800687a <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006866:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006868:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800686a:	65a3      	str	r3, [r4, #88]	; 0x58
 800686c:	e01f      	b.n	80068ae <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800686e:	2a14      	cmp	r2, #20
 8006870:	d11f      	bne.n	80068b2 <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8006872:	682a      	ldr	r2, [r5, #0]
 8006874:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006876:	2a01      	cmp	r2, #1
 8006878:	d8f5      	bhi.n	8006866 <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800687a:	2200      	movs	r2, #0
 800687c:	2120      	movs	r1, #32
 800687e:	4620      	mov	r0, r4
 8006880:	9600      	str	r6, [sp, #0]
 8006882:	9303      	str	r3, [sp, #12]
 8006884:	f7ff ff30 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006888:	b988      	cbnz	r0, 80068ae <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800688a:	65a0      	str	r0, [r4, #88]	; 0x58
      status = OSPI_ConfigCmd(hospi, cmd);
 800688c:	4629      	mov	r1, r5
 800688e:	4620      	mov	r0, r4
 8006890:	f7ff fe52 	bl	8006538 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8006894:	b958      	cbnz	r0, 80068ae <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8006896:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	b992      	cbnz	r2, 80068c2 <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800689c:	2201      	movs	r2, #1
 800689e:	2102      	movs	r1, #2
 80068a0:	4620      	mov	r0, r4
 80068a2:	9600      	str	r6, [sp, #0]
 80068a4:	f7ff ff20 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	2202      	movs	r2, #2
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80068ae:	b004      	add	sp, #16
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80068b2:	2a24      	cmp	r2, #36	; 0x24
 80068b4:	d1d7      	bne.n	8006866 <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80068b6:	682a      	ldr	r2, [r5, #0]
 80068b8:	f022 0202 	bic.w	r2, r2, #2
 80068bc:	2a01      	cmp	r2, #1
 80068be:	d1d2      	bne.n	8006866 <HAL_OSPI_Command+0x1c>
 80068c0:	e7db      	b.n	800687a <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	b90b      	cbnz	r3, 80068ca <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068c6:	2304      	movs	r3, #4
 80068c8:	e005      	b.n	80068d6 <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80068ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068d0:	2b24      	cmp	r3, #36	; 0x24
 80068d2:	d0f8      	beq.n	80068c6 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80068d4:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068d6:	6563      	str	r3, [r4, #84]	; 0x54
 80068d8:	e7e9      	b.n	80068ae <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d1e7      	bne.n	80068ae <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80068de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068e0:	2b14      	cmp	r3, #20
 80068e2:	d0f0      	beq.n	80068c6 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80068e4:	2324      	movs	r3, #36	; 0x24
 80068e6:	e7f6      	b.n	80068d6 <HAL_OSPI_Command+0x8c>

080068e8 <HAL_OSPI_HyperbusCfg>:
{
 80068e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068ea:	4604      	mov	r4, r0
 80068ec:	4616      	mov	r6, r2
 80068ee:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80068f0:	f7fe fd1c 	bl	800532c <HAL_GetTick>
  state = hospi->State;
 80068f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 80068f6:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80068f8:	3a01      	subs	r2, #1
 80068fa:	2a01      	cmp	r2, #1
 80068fc:	d816      	bhi.n	800692c <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80068fe:	2200      	movs	r2, #0
 8006900:	2120      	movs	r1, #32
 8006902:	4620      	mov	r0, r4
 8006904:	9600      	str	r6, [sp, #0]
 8006906:	f7ff feef 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800690a:	b968      	cbnz	r0, 8006928 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 8006912:	430b      	orrs	r3, r1
 8006914:	6829      	ldr	r1, [r5, #0]
 8006916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800691a:	6869      	ldr	r1, [r5, #4]
 800691c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006920:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 8006924:	2302      	movs	r3, #2
 8006926:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006928:	b002      	add	sp, #8
 800692a:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800692c:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800692e:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006930:	65a3      	str	r3, [r4, #88]	; 0x58
 8006932:	e7f9      	b.n	8006928 <HAL_OSPI_HyperbusCfg+0x40>

08006934 <HAL_OSPI_HyperbusCmd>:
{
 8006934:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006936:	4604      	mov	r4, r0
 8006938:	4616      	mov	r6, r2
 800693a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800693c:	f7fe fcf6 	bl	800532c <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8006940:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8006942:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8006944:	2a02      	cmp	r2, #2
 8006946:	d127      	bne.n	8006998 <HAL_OSPI_HyperbusCmd+0x64>
 8006948:	68e2      	ldr	r2, [r4, #12]
 800694a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800694e:	d123      	bne.n	8006998 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006950:	2200      	movs	r2, #0
 8006952:	2120      	movs	r1, #32
 8006954:	4620      	mov	r0, r4
 8006956:	9600      	str	r6, [sp, #0]
 8006958:	f7ff fec6 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800695c:	b9d0      	cbnz	r0, 8006994 <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800695e:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006960:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006968:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006970:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8006972:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006974:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8006976:	692a      	ldr	r2, [r5, #16]
 8006978:	430a      	orrs	r2, r1
 800697a:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 800697e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8006982:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8006986:	68ea      	ldr	r2, [r5, #12]
 8006988:	3a01      	subs	r2, #1
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 800698c:	686a      	ldr	r2, [r5, #4]
 800698e:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006990:	2304      	movs	r3, #4
 8006992:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006994:	b002      	add	sp, #8
 8006996:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006998:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800699a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800699c:	65a3      	str	r3, [r4, #88]	; 0x58
 800699e:	e7f9      	b.n	8006994 <HAL_OSPI_HyperbusCmd+0x60>

080069a0 <HAL_OSPI_Transmit>:
{
 80069a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069a2:	460f      	mov	r7, r1
 80069a4:	b085      	sub	sp, #20
 80069a6:	4604      	mov	r4, r0
 80069a8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 80069aa:	f7fe fcbf 	bl	800532c <HAL_GetTick>
 80069ae:	4603      	mov	r3, r0
  if (pData == NULL)
 80069b0:	b91f      	cbnz	r7, 80069ba <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80069b2:	2308      	movs	r3, #8
      status = HAL_ERROR;
 80069b4:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80069b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80069b8:	e02e      	b.n	8006a18 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80069ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80069bc:	2a04      	cmp	r2, #4
 80069be:	d12d      	bne.n	8006a1c <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80069c0:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069c2:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 80069c4:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069c6:	3201      	adds	r2, #1
 80069c8:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 80069ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069cc:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80069ce:	6832      	ldr	r2, [r6, #0]
 80069d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80069d4:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80069d6:	2201      	movs	r2, #1
 80069d8:	2104      	movs	r1, #4
 80069da:	4620      	mov	r0, r4
 80069dc:	9500      	str	r5, [sp, #0]
 80069de:	9303      	str	r3, [sp, #12]
 80069e0:	f7ff fe82 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80069e4:	b9c0      	cbnz	r0, 8006a18 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80069e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while (hospi->XferCount > 0U);
 80069e8:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80069ea:	7812      	ldrb	r2, [r2, #0]
 80069ec:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 80069f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80069f2:	3201      	adds	r2, #1
 80069f4:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 80069f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069f8:	3a01      	subs	r2, #1
 80069fa:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 80069fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	d1e9      	bne.n	80069d6 <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a02:	2201      	movs	r2, #1
 8006a04:	2102      	movs	r1, #2
 8006a06:	4620      	mov	r0, r4
 8006a08:	9500      	str	r5, [sp, #0]
 8006a0a:	f7ff fe6d 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006a0e:	b918      	cbnz	r0, 8006a18 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006a10:	2302      	movs	r3, #2
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006a16:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006a18:	b005      	add	sp, #20
 8006a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	e7c9      	b.n	80069b4 <HAL_OSPI_Transmit+0x14>

08006a20 <HAL_OSPI_Receive>:
{
 8006a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a22:	4604      	mov	r4, r0
 8006a24:	b085      	sub	sp, #20
 8006a26:	460f      	mov	r7, r1
 8006a28:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006a2a:	f7fe fc7f 	bl	800532c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006a2e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006a30:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006a32:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006a34:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8006a38:	b91f      	cbnz	r7, 8006a42 <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006a3a:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8006a3c:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a40:	e034      	b.n	8006aac <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006a42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006a44:	2a04      	cmp	r2, #4
 8006a46:	d13b      	bne.n	8006ac0 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006a48:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8006a4a:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006a4c:	3201      	adds	r2, #1
 8006a4e:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8006a50:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a52:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a54:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a56:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a58:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a5c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a60:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006a64:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a66:	d123      	bne.n	8006ab0 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006a68:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	2106      	movs	r1, #6
 8006a6e:	4620      	mov	r0, r4
 8006a70:	9600      	str	r6, [sp, #0]
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	f7ff fe38 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006a78:	b9c0      	cbnz	r0, 8006aac <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006a7a:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8006a7e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while(hospi->XferCount > 0U);
 8006a80:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006a82:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8006a84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a86:	3201      	adds	r2, #1
 8006a88:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8006a8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a8c:	3a01      	subs	r2, #1
 8006a8e:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8006a90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	d1e9      	bne.n	8006a6a <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a96:	2201      	movs	r2, #1
 8006a98:	2102      	movs	r1, #2
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	9600      	str	r6, [sp, #0]
 8006a9e:	f7ff fe23 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006aa2:	b918      	cbnz	r0, 8006aac <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006aaa:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006aac:	b005      	add	sp, #20
 8006aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006ab0:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8006ab4:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8006ab8:	d1d6      	bne.n	8006a68 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006aba:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8006abe:	e7d4      	b.n	8006a6a <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	e7bb      	b.n	8006a3c <HAL_OSPI_Receive+0x1c>

08006ac4 <HAL_OSPI_AutoPolling>:
{
 8006ac4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	4616      	mov	r6, r2
 8006acc:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006ace:	f7fe fc2d 	bl	800532c <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006ad2:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006ad4:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006ad6:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006ad8:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006adc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006ade:	2a04      	cmp	r2, #4
 8006ae0:	d13c      	bne.n	8006b5c <HAL_OSPI_AutoPolling+0x98>
 8006ae2:	68ea      	ldr	r2, [r5, #12]
 8006ae4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006ae8:	d138      	bne.n	8006b5c <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006aea:	9003      	str	r0, [sp, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	2120      	movs	r1, #32
 8006af0:	4620      	mov	r0, r4
 8006af2:	9600      	str	r6, [sp, #0]
 8006af4:	f7ff fdf8 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006af8:	bb28      	cbnz	r0, 8006b46 <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8006afa:	6829      	ldr	r1, [r5, #0]
 8006afc:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006afe:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8006b00:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8006b04:	6869      	ldr	r1, [r5, #4]
 8006b06:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8006b0a:	6929      	ldr	r1, [r5, #16]
 8006b0c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006b10:	6810      	ldr	r0, [r2, #0]
 8006b12:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8006b16:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 8006b1a:	4329      	orrs	r1, r5
 8006b1c:	4301      	orrs	r1, r0
 8006b1e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006b22:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006b24:	68e1      	ldr	r1, [r4, #12]
 8006b26:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006b2a:	d10f      	bne.n	8006b4c <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006b2c:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006b2e:	2201      	movs	r2, #1
 8006b30:	2108      	movs	r1, #8
 8006b32:	4620      	mov	r0, r4
 8006b34:	9600      	str	r6, [sp, #0]
 8006b36:	f7ff fdd7 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006b3a:	b920      	cbnz	r0, 8006b46 <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	2208      	movs	r2, #8
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8006b42:	2302      	movs	r3, #2
 8006b44:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006b46:	b004      	add	sp, #16
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006b4c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8006b50:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8006b54:	d1ea      	bne.n	8006b2c <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006b56:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8006b5a:	e7e8      	b.n	8006b2e <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b5c:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006b5e:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b60:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b62:	e7f0      	b.n	8006b46 <HAL_OSPI_AutoPolling+0x82>

08006b64 <HAL_OSPI_MemoryMapped>:
{
 8006b64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006b6a:	f7fe fbdf 	bl	800532c <HAL_GetTick>
 8006b6e:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006b70:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b72:	2a04      	cmp	r2, #4
 8006b74:	d121      	bne.n	8006bba <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006b76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006b78:	2120      	movs	r1, #32
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	9200      	str	r2, [sp, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f7ff fdb2 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006b84:	b9b8      	cbnz	r0, 8006bb6 <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b86:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006b88:	2388      	movs	r3, #136	; 0x88
 8006b8a:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b8c:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006b8e:	6563      	str	r3, [r4, #84]	; 0x54
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b90:	d108      	bne.n	8006ba4 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006b92:	686b      	ldr	r3, [r5, #4]
 8006b94:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006b98:	2310      	movs	r3, #16
 8006b9a:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006b9c:	6811      	ldr	r1, [r2, #0]
 8006b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006ba2:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006ba4:	6813      	ldr	r3, [r2, #0]
 8006ba6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006baa:	f023 0308 	bic.w	r3, r3, #8
 8006bae:	4333      	orrs	r3, r6
 8006bb0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006bb4:	6013      	str	r3, [r2, #0]
}
 8006bb6:	b002      	add	sp, #8
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006bba:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006bbc:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006bbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bc0:	e7f9      	b.n	8006bb6 <HAL_OSPI_MemoryMapped+0x52>

08006bc2 <HAL_OSPI_Abort>:
{
 8006bc2:	b530      	push	{r4, r5, lr}
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006bc8:	f7fe fbb0 	bl	800532c <HAL_GetTick>
 8006bcc:	4603      	mov	r3, r0
  state = hospi->State;
 8006bce:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006bd0:	f012 0f0c 	tst.w	r2, #12
 8006bd4:	d035      	beq.n	8006c42 <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006bd6:	6821      	ldr	r1, [r4, #0]
 8006bd8:	680a      	ldr	r2, [r1, #0]
 8006bda:	f012 0204 	ands.w	r2, r2, #4
 8006bde:	d02b      	beq.n	8006c38 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006be0:	680a      	ldr	r2, [r1, #0]
 8006be2:	9003      	str	r0, [sp, #12]
 8006be4:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006be8:	6d20      	ldr	r0, [r4, #80]	; 0x50
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006bea:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006bec:	f7ff fc6c 	bl	80064c8 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	b108      	cbz	r0, 8006bf8 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	65a2      	str	r2, [r4, #88]	; 0x58
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	6a11      	ldr	r1, [r2, #32]
 8006bfc:	0689      	lsls	r1, r1, #26
 8006bfe:	d51d      	bpl.n	8006c3c <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006c00:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006c02:	4620      	mov	r0, r4
 8006c04:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006c06:	f041 0102 	orr.w	r1, r1, #2
 8006c0a:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006c10:	9200      	str	r2, [sp, #0]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f7ff fd68 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	b958      	cbnz	r0, 8006c34 <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006c1c:	6822      	ldr	r2, [r4, #0]
 8006c1e:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c20:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006c22:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c24:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006c26:	9200      	str	r2, [sp, #0]
 8006c28:	4602      	mov	r2, r0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff fd5c 	bl	80066e8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006c30:	b900      	cbnz	r0, 8006c34 <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8006c32:	6565      	str	r5, [r4, #84]	; 0x54
}
 8006c34:	b005      	add	sp, #20
 8006c36:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006c38:	4610      	mov	r0, r2
 8006c3a:	e7dd      	b.n	8006bf8 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	6563      	str	r3, [r4, #84]	; 0x54
 8006c40:	e7f8      	b.n	8006c34 <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c42:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006c44:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c46:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c48:	e7f4      	b.n	8006c34 <HAL_OSPI_Abort+0x72>
	...

08006c4c <HAL_OSPIM_Config>:
    other_instance = 0U;
 8006c4c:	4bc4      	ldr	r3, [pc, #784]	; (8006f60 <HAL_OSPIM_Config+0x314>)
  if (hospi->Instance == OCTOSPI1)
 8006c4e:	6802      	ldr	r2, [r0, #0]
{
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8006c54:	429a      	cmp	r2, r3
{
 8006c56:	b08f      	sub	sp, #60	; 0x3c
 8006c58:	4688      	mov	r8, r1
    instance = 1U;
 8006c5a:	f04f 0501 	mov.w	r5, #1
    other_instance = 0U;
 8006c5e:	bf0b      	itete	eq
 8006c60:	f04f 0c01 	moveq.w	ip, #1
 8006c64:	f04f 0c00 	movne.w	ip, #0
 8006c68:	2400      	moveq	r4, #0
 8006c6a:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006c6c:	ab02      	add	r3, sp, #8
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006c6e:	2600      	movs	r6, #0
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006c70:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 8006f68 <HAL_OSPIM_Config+0x31c>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8006c74:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8006f6c <HAL_OSPIM_Config+0x320>
    if (instance_nb == 2U)
 8006c78:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8006c7a:	611e      	str	r6, [r3, #16]
    cfg->DQSPort    = 0U;
 8006c7c:	e9c3 6600 	strd	r6, r6, [r3]
    cfg->IOLowPort  = 0U;
 8006c80:	e9c3 6602 	strd	r6, r6, [r3, #8]
    if (instance_nb == 2U)
 8006c84:	f040 8126 	bne.w	8006ed4 <HAL_OSPIM_Config+0x288>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006c88:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8006c8c:	f012 0f01 	tst.w	r2, #1
 8006c90:	bf0c      	ite	eq
 8006c92:	4648      	moveq	r0, r9
 8006c94:	f44f 7000 	movne.w	r0, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006c98:	2700      	movs	r7, #0
    {
      reg = OCTOSPIM->PCR[index];
 8006c9a:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 8006c9e:	1c79      	adds	r1, r7, #1
 8006ca0:	6852      	ldr	r2, [r2, #4]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006ca2:	07d7      	lsls	r7, r2, #31
 8006ca4:	d504      	bpl.n	8006cb0 <HAL_OSPIM_Config+0x64>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006ca6:	ea82 0700 	eor.w	r7, r2, r0
 8006caa:	07bf      	lsls	r7, r7, #30
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006cac:	bf58      	it	pl
 8006cae:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006cb0:	06d7      	lsls	r7, r2, #27
 8006cb2:	d504      	bpl.n	8006cbe <HAL_OSPIM_Config+0x72>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006cb4:	ea82 0700 	eor.w	r7, r2, r0
 8006cb8:	06bf      	lsls	r7, r7, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8006cba:	bf58      	it	pl
 8006cbc:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006cbe:	05d7      	lsls	r7, r2, #23
 8006cc0:	d504      	bpl.n	8006ccc <HAL_OSPIM_Config+0x80>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006cc2:	ea82 0700 	eor.w	r7, r2, r0
 8006cc6:	05bf      	lsls	r7, r7, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8006cc8:	bf58      	it	pl
 8006cca:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006ccc:	03d7      	lsls	r7, r2, #15
 8006cce:	d50a      	bpl.n	8006ce6 <HAL_OSPIM_Config+0x9a>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006cd0:	ea82 0700 	eor.w	r7, r2, r0
 8006cd4:	037f      	lsls	r7, r7, #13
 8006cd6:	d406      	bmi.n	8006ce6 <HAL_OSPIM_Config+0x9a>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006cd8:	0397      	lsls	r7, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006cda:	bf54      	ite	pl
 8006cdc:	f441 3780 	orrpl.w	r7, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006ce0:	f041 7780 	orrmi.w	r7, r1, #16777216	; 0x1000000
 8006ce4:	60df      	str	r7, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006ce6:	01d7      	lsls	r7, r2, #7
 8006ce8:	d50a      	bpl.n	8006d00 <HAL_OSPIM_Config+0xb4>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006cea:	ea82 0700 	eor.w	r7, r2, r0
 8006cee:	017f      	lsls	r7, r7, #5
 8006cf0:	d406      	bmi.n	8006d00 <HAL_OSPIM_Config+0xb4>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006cf2:	0197      	lsls	r7, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006cf4:	bf54      	ite	pl
 8006cf6:	f441 3280 	orrpl.w	r2, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006cfa:	f041 7280 	orrmi.w	r2, r1, #16777216	; 0x1000000
 8006cfe:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006d00:	2902      	cmp	r1, #2
 8006d02:	f04f 0701 	mov.w	r7, #1
 8006d06:	d1c8      	bne.n	8006c9a <HAL_OSPIM_Config+0x4e>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006d08:	2d02      	cmp	r5, #2
 8006d0a:	f103 0318 	add.w	r3, r3, #24
 8006d0e:	f040 80df 	bne.w	8006ed0 <HAL_OSPIM_Config+0x284>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006d12:	4a93      	ldr	r2, [pc, #588]	; (8006f60 <HAL_OSPIM_Config+0x314>)
 8006d14:	6815      	ldr	r5, [r2, #0]
 8006d16:	403d      	ands	r5, r7
 8006d18:	d004      	beq.n	8006d24 <HAL_OSPIM_Config+0xd8>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006d1a:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006d1c:	463d      	mov	r5, r7
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006d1e:	f023 0301 	bic.w	r3, r3, #1
 8006d22:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006d24:	4b8f      	ldr	r3, [pc, #572]	; (8006f64 <HAL_OSPIM_Config+0x318>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	07d0      	lsls	r0, r2, #31
 8006d2a:	f140 80d5 	bpl.w	8006ed8 <HAL_OSPIM_Config+0x28c>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8006d36:	f045 0302 	orr.w	r3, r5, #2
 8006d3a:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006d3c:	ab0e      	add	r3, sp, #56	; 0x38
 8006d3e:	2218      	movs	r2, #24
 8006d40:	fb02 3204 	mla	r2, r2, r4, r3
 8006d44:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006d4e:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006d58:	6019      	str	r1, [r3, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006d5a:	4b83      	ldr	r3, [pc, #524]	; (8006f68 <HAL_OSPIM_Config+0x31c>)
 8006d5c:	6819      	ldr	r1, [r3, #0]
 8006d5e:	07c9      	lsls	r1, r1, #31
 8006d60:	f140 80bc 	bpl.w	8006edc <HAL_OSPIM_Config+0x290>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8006d6c:	f1bc 0f00 	cmp.w	ip, #0
 8006d70:	d030      	beq.n	8006dd4 <HAL_OSPIM_Config+0x188>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006d7a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	f042 0202 	orr.w	r2, r2, #2
 8006d84:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	b143      	cbz	r3, 8006d9c <HAL_OSPIM_Config+0x150>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006d90:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	f042 0220 	orr.w	r2, r2, #32
 8006d9a:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d9e:	b15b      	cbz	r3, 8006db8 <HAL_OSPIM_Config+0x16c>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8006da0:	3b01      	subs	r3, #1
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006dac:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006db6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dba:	b15b      	cbz	r3, 8006dd4 <HAL_OSPIM_Config+0x188>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006dc8:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006dd2:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006dd4:	ab0e      	add	r3, sp, #56	; 0x38
 8006dd6:	f04f 0a18 	mov.w	sl, #24
 8006dda:	f8d8 7000 	ldr.w	r7, [r8]
 8006dde:	fb0a 3a0c 	mla	sl, sl, ip, r3
 8006de2:	f85a 9c30 	ldr.w	r9, [sl, #-48]
 8006de6:	f85a 1c20 	ldr.w	r1, [sl, #-32]
 8006dea:	454f      	cmp	r7, r9
 8006dec:	f85a bc2c 	ldr.w	fp, [sl, #-44]
 8006df0:	e9d8 0e01 	ldrd	r0, lr, [r8, #4]
 8006df4:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 8006df8:	f000 80ba 	beq.w	8006f70 <HAL_OSPIM_Config+0x324>
 8006dfc:	4583      	cmp	fp, r0
 8006dfe:	d00a      	beq.n	8006e16 <HAL_OSPIM_Config+0x1ca>
 8006e00:	f85a 6c28 	ldr.w	r6, [sl, #-40]
 8006e04:	4576      	cmp	r6, lr
 8006e06:	d006      	beq.n	8006e16 <HAL_OSPIM_Config+0x1ca>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006e08:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8006e0c:	4592      	cmp	sl, r2
 8006e0e:	d002      	beq.n	8006e16 <HAL_OSPIM_Config+0x1ca>
 8006e10:	4299      	cmp	r1, r3
 8006e12:	f040 80c0 	bne.w	8006f96 <HAL_OSPIM_Config+0x34a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006e16:	ea4f 0989 	mov.w	r9, r9, lsl #2
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006e1a:	ae0e      	add	r6, sp, #56	; 0x38
 8006e1c:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8006e20:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006e24:	f8d9 a000 	ldr.w	sl, [r9]
 8006e28:	f02a 0a01 	bic.w	sl, sl, #1
 8006e2c:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006e30:	f04f 0918 	mov.w	r9, #24
 8006e34:	fb09 690c 	mla	r9, r9, ip, r6
 8006e38:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8006e3c:	f1b9 0f00 	cmp.w	r9, #0
 8006e40:	d00b      	beq.n	8006e5a <HAL_OSPIM_Config+0x20e>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006e42:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006e46:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8006e4a:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
 8006e4e:	f8d9 a000 	ldr.w	sl, [r9]
 8006e52:	f02a 0a10 	bic.w	sl, sl, #16
 8006e56:	f8c9 a000 	str.w	sl, [r9]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006e5a:	f04f 0918 	mov.w	r9, #24
 8006e5e:	ae0e      	add	r6, sp, #56	; 0x38
 8006e60:	fb09 6c0c 	mla	ip, r9, ip, r6
 8006e64:	f85c 6c28 	ldr.w	r6, [ip, #-40]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e68:	f85c cc24 	ldr.w	ip, [ip, #-36]
 8006e6c:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006e70:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8006e74:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006e78:	f8d9 a000 	ldr.w	sl, [r9]
 8006e7c:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8006e80:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e84:	f1bc 0f00 	cmp.w	ip, #0
 8006e88:	d00f      	beq.n	8006eaa <HAL_OSPIM_Config+0x25e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006e8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e8e:	f00c 0c01 	and.w	ip, ip, #1
 8006e92:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006e96:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8006e9a:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8006e9e:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8006ea2:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8006ea6:	f8cc 9004 	str.w	r9, [ip, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006eaa:	2900      	cmp	r1, #0
 8006eac:	d073      	beq.n	8006f96 <HAL_OSPIM_Config+0x34a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006eae:	f101 3cff 	add.w	ip, r1, #4294967295
 8006eb2:	f00c 0c01 	and.w	ip, ip, #1
 8006eb6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006eba:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8006ebe:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8006ec2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006ec6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006eca:	f8cc 1004 	str.w	r1, [ip, #4]
 8006ece:	e062      	b.n	8006f96 <HAL_OSPIM_Config+0x34a>
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	e6d1      	b.n	8006c78 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e6df      	b.n	8006c98 <HAL_OSPIM_Config+0x4c>
 8006ed8:	9501      	str	r5, [sp, #4]
 8006eda:	e72f      	b.n	8006d3c <HAL_OSPIM_Config+0xf0>
      if (IOM_cfg[instance].ClkPort != 0U)
 8006edc:	f852 3c30 	ldr.w	r3, [r2, #-48]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f43f af77 	beq.w	8006dd4 <HAL_OSPIM_Config+0x188>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006eec:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	f021 0101 	bic.w	r1, r1, #1
 8006ef6:	6019      	str	r1, [r3, #0]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006ef8:	f852 3c2c 	ldr.w	r3, [r2, #-44]
 8006efc:	b143      	cbz	r3, 8006f10 <HAL_OSPIM_Config+0x2c4>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006f04:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	f022 0210 	bic.w	r2, r2, #16
 8006f0e:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006f10:	2318      	movs	r3, #24
 8006f12:	aa0e      	add	r2, sp, #56	; 0x38
 8006f14:	fb03 2304 	mla	r3, r3, r4, r2
 8006f18:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006f1c:	b15b      	cbz	r3, 8006f36 <HAL_OSPIM_Config+0x2ea>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006f2a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f34:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f36:	2318      	movs	r3, #24
 8006f38:	aa0e      	add	r2, sp, #56	; 0x38
 8006f3a:	fb03 2304 	mla	r3, r3, r4, r2
 8006f3e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f43f af46 	beq.w	8006dd4 <HAL_OSPIM_Config+0x188>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006f54:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006f5e:	e738      	b.n	8006dd2 <HAL_OSPIM_Config+0x186>
 8006f60:	52005000 	.word	0x52005000
 8006f64:	5200a000 	.word	0x5200a000
 8006f68:	5200b400 	.word	0x5200b400
 8006f6c:	04040222 	.word	0x04040222
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006f70:	4583      	cmp	fp, r0
 8006f72:	f47f af50 	bne.w	8006e16 <HAL_OSPIM_Config+0x1ca>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006f76:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8006f7a:	4592      	cmp	sl, r2
 8006f7c:	f47f af4b 	bne.w	8006e16 <HAL_OSPIM_Config+0x1ca>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006f80:	4299      	cmp	r1, r3
 8006f82:	f47f af48 	bne.w	8006e16 <HAL_OSPIM_Config+0x1ca>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006f86:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8007184 <HAL_OSPIM_Config+0x538>
 8006f8a:	f8dc 1000 	ldr.w	r1, [ip]
 8006f8e:	f041 0101 	orr.w	r1, r1, #1
 8006f92:	f8cc 1000 	str.w	r1, [ip]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006f96:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006f9a:	f10e 4ea4 	add.w	lr, lr, #1375731712	; 0x52000000
 8006f9e:	f50e 4e34 	add.w	lr, lr, #46080	; 0xb400
 8006fa2:	f8de 1000 	ldr.w	r1, [lr]
 8006fa6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006faa:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8006fae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006fb2:	f8ce 1000 	str.w	r1, [lr]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006fb6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8006fba:	f101 3eff 	add.w	lr, r1, #4294967295
 8006fbe:	4971      	ldr	r1, [pc, #452]	; (8007184 <HAL_OSPIM_Config+0x538>)
 8006fc0:	f8d1 c000 	ldr.w	ip, [r1]
 8006fc4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8006fc8:	45e6      	cmp	lr, ip
 8006fca:	d907      	bls.n	8006fdc <HAL_OSPIM_Config+0x390>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006fcc:	f8d1 c000 	ldr.w	ip, [r1]
 8006fd0:	f42c 0c7f 	bic.w	ip, ip, #16711680	; 0xff0000
 8006fd4:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 8006fd8:	f8c1 c000 	str.w	ip, [r1]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006fdc:	6809      	ldr	r1, [r1, #0]
 8006fde:	f402 3c80 	and.w	ip, r2, #65536	; 0x10000
 8006fe2:	f011 0f01 	tst.w	r1, #1
 8006fe6:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8006fea:	f403 3780 	and.w	r7, r3, #65536	; 0x10000
 8006fee:	f101 41a4 	add.w	r1, r1, #1375731712	; 0x52000000
 8006ff2:	f501 4134 	add.w	r1, r1, #46080	; 0xb400
 8006ff6:	d063      	beq.n	80070c0 <HAL_OSPIM_Config+0x474>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006ff8:	680c      	ldr	r4, [r1, #0]
 8006ffa:	f024 0403 	bic.w	r4, r4, #3
 8006ffe:	f044 0401 	orr.w	r4, r4, #1
 8007002:	600c      	str	r4, [r1, #0]
      if (cfg->DQSPort != 0U)
 8007004:	b150      	cbz	r0, 800701c <HAL_OSPIM_Config+0x3d0>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007006:	0080      	lsls	r0, r0, #2
 8007008:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 800700c:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8007010:	6801      	ldr	r1, [r0, #0]
 8007012:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8007016:	f041 0110 	orr.w	r1, r1, #16
 800701a:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800701c:	f1bc 0f00 	cmp.w	ip, #0
 8007020:	d02e      	beq.n	8007080 <HAL_OSPIM_Config+0x434>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007022:	3a01      	subs	r2, #1
 8007024:	f002 0201 	and.w	r2, r2, #1
 8007028:	0092      	lsls	r2, r2, #2
 800702a:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800702e:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8007032:	6851      	ldr	r1, [r2, #4]
 8007034:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8007038:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800703c:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800703e:	b37f      	cbz	r7, 80070a0 <HAL_OSPIM_Config+0x454>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007040:	3b01      	subs	r3, #1
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800704c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007056:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800705a:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800705c:	b125      	cbz	r5, 8007068 <HAL_OSPIM_Config+0x41c>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800705e:	4a4a      	ldr	r2, [pc, #296]	; (8007188 <HAL_OSPIM_Config+0x53c>)
 8007060:	6813      	ldr	r3, [r2, #0]
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	079b      	lsls	r3, r3, #30
 800706c:	d504      	bpl.n	8007078 <HAL_OSPIM_Config+0x42c>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800706e:	4a47      	ldr	r2, [pc, #284]	; (800718c <HAL_OSPIM_Config+0x540>)
 8007070:	6813      	ldr	r3, [r2, #0]
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	6013      	str	r3, [r2, #0]
}
 8007078:	2000      	movs	r0, #0
 800707a:	b00f      	add	sp, #60	; 0x3c
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007080:	2a00      	cmp	r2, #0
 8007082:	d0dc      	beq.n	800703e <HAL_OSPIM_Config+0x3f2>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007084:	3a01      	subs	r2, #1
 8007086:	f002 0201 	and.w	r2, r2, #1
 800708a:	0092      	lsls	r2, r2, #2
 800708c:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007090:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8007094:	6851      	ldr	r1, [r2, #4]
 8007096:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800709a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800709e:	e7cd      	b.n	800703c <HAL_OSPIM_Config+0x3f0>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0db      	beq.n	800705c <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80070a4:	3b01      	subs	r3, #1
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80070b0:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80070ba:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80070be:	e7cc      	b.n	800705a <HAL_OSPIM_Config+0x40e>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80070c0:	f8d1 e000 	ldr.w	lr, [r1]
 80070c4:	f02e 0e03 	bic.w	lr, lr, #3
 80070c8:	ea4e 0e44 	orr.w	lr, lr, r4, lsl #1
 80070cc:	f04e 0e01 	orr.w	lr, lr, #1
 80070d0:	f8c1 e000 	str.w	lr, [r1]
      if (cfg->DQSPort != 0U)
 80070d4:	b160      	cbz	r0, 80070f0 <HAL_OSPIM_Config+0x4a4>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80070d6:	0080      	lsls	r0, r0, #2
 80070d8:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 80070dc:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 80070e0:	6801      	ldr	r1, [r0, #0]
 80070e2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80070e6:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 80070ea:	f041 0110 	orr.w	r1, r1, #16
 80070ee:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070f0:	f1bc 0f00 	cmp.w	ip, #0
 80070f4:	d021      	beq.n	800713a <HAL_OSPIM_Config+0x4ee>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80070f6:	3a01      	subs	r2, #1
 80070f8:	f002 0201 	and.w	r2, r2, #1
 80070fc:	0092      	lsls	r2, r2, #2
 80070fe:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007102:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8007106:	6851      	ldr	r1, [r2, #4]
 8007108:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800710c:	ea41 4184 	orr.w	r1, r1, r4, lsl #18
 8007110:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007114:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007116:	b317      	cbz	r7, 800715e <HAL_OSPIM_Config+0x512>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007118:	3b01      	subs	r3, #1
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007124:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800712e:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 8007132:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007136:	605c      	str	r4, [r3, #4]
 8007138:	e790      	b.n	800705c <HAL_OSPIM_Config+0x410>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800713a:	2a00      	cmp	r2, #0
 800713c:	d0eb      	beq.n	8007116 <HAL_OSPIM_Config+0x4ca>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800713e:	3a01      	subs	r2, #1
 8007140:	f002 0201 	and.w	r2, r2, #1
 8007144:	0092      	lsls	r2, r2, #2
 8007146:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800714a:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800714e:	6851      	ldr	r1, [r2, #4]
 8007150:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8007154:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8007158:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800715c:	e7da      	b.n	8007114 <HAL_OSPIM_Config+0x4c8>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800715e:	2b00      	cmp	r3, #0
 8007160:	f43f af7c 	beq.w	800705c <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007164:	3b01      	subs	r3, #1
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007170:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800717a:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 800717e:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8007182:	e7d8      	b.n	8007136 <HAL_OSPIM_Config+0x4ea>
 8007184:	5200b400 	.word	0x5200b400
 8007188:	52005000 	.word	0x52005000
 800718c:	5200a000 	.word	0x5200a000

08007190 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007190:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007192:	4d1d      	ldr	r5, [pc, #116]	; (8007208 <HAL_PWREx_ConfigSupply+0x78>)
{
 8007194:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007196:	68eb      	ldr	r3, [r5, #12]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	2b06      	cmp	r3, #6
 800719e:	d006      	beq.n	80071ae <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071a0:	68e8      	ldr	r0, [r5, #12]
 80071a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071a6:	1b00      	subs	r0, r0, r4
 80071a8:	bf18      	it	ne
 80071aa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071ae:	68eb      	ldr	r3, [r5, #12]
 80071b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071b4:	4303      	orrs	r3, r0
 80071b6:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 80071b8:	f7fe f8b8 	bl	800532c <HAL_GetTick>
 80071bc:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071be:	686b      	ldr	r3, [r5, #4]
 80071c0:	049b      	lsls	r3, r3, #18
 80071c2:	d508      	bpl.n	80071d6 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80071c4:	f1a4 031d 	sub.w	r3, r4, #29
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d90c      	bls.n	80071e6 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80071cc:	3c2d      	subs	r4, #45	; 0x2d
 80071ce:	2c01      	cmp	r4, #1
 80071d0:	d909      	bls.n	80071e6 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80071d2:	2000      	movs	r0, #0
 80071d4:	e7ea      	b.n	80071ac <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071d6:	f7fe f8a9 	bl	800532c <HAL_GetTick>
 80071da:	1b80      	subs	r0, r0, r6
 80071dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80071e0:	d9ed      	bls.n	80071be <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 80071e2:	2001      	movs	r0, #1
 80071e4:	e7e2      	b.n	80071ac <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 80071e6:	f7fe f8a1 	bl	800532c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80071ea:	4d07      	ldr	r5, [pc, #28]	; (8007208 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 80071ec:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80071ee:	68eb      	ldr	r3, [r5, #12]
 80071f0:	f003 0311 	and.w	r3, r3, #17
 80071f4:	2b11      	cmp	r3, #17
 80071f6:	d0ec      	beq.n	80071d2 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071f8:	f7fe f898 	bl	800532c <HAL_GetTick>
 80071fc:	1b00      	subs	r0, r0, r4
 80071fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007202:	d9f4      	bls.n	80071ee <HAL_PWREx_ConfigSupply+0x5e>
 8007204:	e7ed      	b.n	80071e2 <HAL_PWREx_ConfigSupply+0x52>
 8007206:	bf00      	nop
 8007208:	58024800 	.word	0x58024800

0800720c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800720e:	4604      	mov	r4, r0
 8007210:	b908      	cbnz	r0, 8007216 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8007212:	2001      	movs	r0, #1
 8007214:	e07f      	b.n	8007316 <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007216:	6803      	ldr	r3, [r0, #0]
 8007218:	07df      	lsls	r7, r3, #31
 800721a:	d453      	bmi.n	80072c4 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	079e      	lsls	r6, r3, #30
 8007220:	f100 80a3 	bmi.w	800736a <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	06da      	lsls	r2, r3, #27
 8007228:	d51c      	bpl.n	8007264 <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800722a:	4ba0      	ldr	r3, [pc, #640]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 800722c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800722e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007230:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007234:	2a08      	cmp	r2, #8
 8007236:	d007      	beq.n	8007248 <HAL_RCC_OscConfig+0x3c>
 8007238:	2a18      	cmp	r2, #24
 800723a:	f040 80e5 	bne.w	8007408 <HAL_RCC_OscConfig+0x1fc>
 800723e:	f001 0203 	and.w	r2, r1, #3
 8007242:	2a01      	cmp	r2, #1
 8007244:	f040 80e0 	bne.w	8007408 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	05db      	lsls	r3, r3, #23
 800724c:	d502      	bpl.n	8007254 <HAL_RCC_OscConfig+0x48>
 800724e:	69e3      	ldr	r3, [r4, #28]
 8007250:	2b80      	cmp	r3, #128	; 0x80
 8007252:	d1de      	bne.n	8007212 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007254:	4a95      	ldr	r2, [pc, #596]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 8007256:	6a21      	ldr	r1, [r4, #32]
 8007258:	68d3      	ldr	r3, [r2, #12]
 800725a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800725e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007262:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	0719      	lsls	r1, r3, #28
 8007268:	f100 80fb 	bmi.w	8007462 <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	069a      	lsls	r2, r3, #26
 8007270:	f100 8120 	bmi.w	80074b4 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	075d      	lsls	r5, r3, #29
 8007278:	d51e      	bpl.n	80072b8 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 800727a:	4d8d      	ldr	r5, [pc, #564]	; (80074b0 <HAL_RCC_OscConfig+0x2a4>)
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007282:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007284:	f7fe f852 	bl	800532c <HAL_GetTick>
 8007288:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	05da      	lsls	r2, r3, #23
 800728e:	f140 8136 	bpl.w	80074fe <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	4d85      	ldr	r5, [pc, #532]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 8007296:	2b01      	cmp	r3, #1
 8007298:	f040 8138 	bne.w	800750c <HAL_RCC_OscConfig+0x300>
 800729c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80072a8:	f7fe f840 	bl	800532c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ac:	4e7f      	ldr	r6, [pc, #508]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
      tickstart = HAL_GetTick();
 80072ae:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80072b2:	079b      	lsls	r3, r3, #30
 80072b4:	f140 8150 	bpl.w	8007558 <HAL_RCC_OscConfig+0x34c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f040 8153 	bne.w	8007566 <HAL_RCC_OscConfig+0x35a>
      }
    }
  }
  return HAL_OK;
 80072c0:	2000      	movs	r0, #0
 80072c2:	e028      	b.n	8007316 <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072c4:	4b79      	ldr	r3, [pc, #484]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 80072c6:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072ca:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072ce:	2a10      	cmp	r2, #16
 80072d0:	d005      	beq.n	80072de <HAL_RCC_OscConfig+0xd2>
 80072d2:	2a18      	cmp	r2, #24
 80072d4:	d10a      	bne.n	80072ec <HAL_RCC_OscConfig+0xe0>
 80072d6:	f001 0203 	and.w	r2, r1, #3
 80072da:	2a02      	cmp	r2, #2
 80072dc:	d106      	bne.n	80072ec <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	039d      	lsls	r5, r3, #14
 80072e2:	d59b      	bpl.n	800721c <HAL_RCC_OscConfig+0x10>
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d198      	bne.n	800721c <HAL_RCC_OscConfig+0x10>
 80072ea:	e792      	b.n	8007212 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80072f2:	d111      	bne.n	8007318 <HAL_RCC_OscConfig+0x10c>
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80072fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80072fc:	f7fe f816 	bl	800532c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007300:	4e6a      	ldr	r6, [pc, #424]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 8007302:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007304:	6833      	ldr	r3, [r6, #0]
 8007306:	0398      	lsls	r0, r3, #14
 8007308:	d488      	bmi.n	800721c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800730a:	f7fe f80f 	bl	800532c <HAL_GetTick>
 800730e:	1b40      	subs	r0, r0, r5
 8007310:	2864      	cmp	r0, #100	; 0x64
 8007312:	d9f7      	bls.n	8007304 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 8007314:	2003      	movs	r0, #3
}
 8007316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007318:	4d64      	ldr	r5, [pc, #400]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	b99a      	cbnz	r2, 8007346 <HAL_RCC_OscConfig+0x13a>
 800731e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800732a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800732c:	f7fd fffe 	bl	800532c <HAL_GetTick>
 8007330:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	0399      	lsls	r1, r3, #14
 8007336:	f57f af71 	bpl.w	800721c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800733a:	f7fd fff7 	bl	800532c <HAL_GetTick>
 800733e:	1b80      	subs	r0, r0, r6
 8007340:	2864      	cmp	r0, #100	; 0x64
 8007342:	d9f6      	bls.n	8007332 <HAL_RCC_OscConfig+0x126>
 8007344:	e7e6      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007346:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800734a:	d107      	bne.n	800735c <HAL_RCC_OscConfig+0x150>
 800734c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	e7cf      	b.n	80072fc <HAL_RCC_OscConfig+0xf0>
 800735c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	682b      	ldr	r3, [r5, #0]
 8007364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007368:	e7f6      	b.n	8007358 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800736a:	4b50      	ldr	r3, [pc, #320]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 800736c:	68e1      	ldr	r1, [r4, #12]
 800736e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007370:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007372:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8007376:	d003      	beq.n	8007380 <HAL_RCC_OscConfig+0x174>
 8007378:	2a18      	cmp	r2, #24
 800737a:	d121      	bne.n	80073c0 <HAL_RCC_OscConfig+0x1b4>
 800737c:	0782      	lsls	r2, r0, #30
 800737e:	d11f      	bne.n	80073c0 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	075b      	lsls	r3, r3, #29
 8007384:	d502      	bpl.n	800738c <HAL_RCC_OscConfig+0x180>
 8007386:	2900      	cmp	r1, #0
 8007388:	f43f af43 	beq.w	8007212 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800738c:	4d47      	ldr	r5, [pc, #284]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 800738e:	682a      	ldr	r2, [r5, #0]
 8007390:	f022 0219 	bic.w	r2, r2, #25
 8007394:	430a      	orrs	r2, r1
 8007396:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8007398:	f7fd ffc8 	bl	800532c <HAL_GetTick>
 800739c:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	075f      	lsls	r7, r3, #29
 80073a2:	d507      	bpl.n	80073b4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a4:	686b      	ldr	r3, [r5, #4]
 80073a6:	6922      	ldr	r2, [r4, #16]
 80073a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80073ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80073b0:	606b      	str	r3, [r5, #4]
 80073b2:	e737      	b.n	8007224 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073b4:	f7fd ffba 	bl	800532c <HAL_GetTick>
 80073b8:	1b80      	subs	r0, r0, r6
 80073ba:	2802      	cmp	r0, #2
 80073bc:	d9ef      	bls.n	800739e <HAL_RCC_OscConfig+0x192>
 80073be:	e7a9      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073c0:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073c2:	b181      	cbz	r1, 80073e6 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073c4:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073c8:	4d38      	ldr	r5, [pc, #224]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073ca:	430a      	orrs	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80073ce:	f7fd ffad 	bl	800532c <HAL_GetTick>
 80073d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	0758      	lsls	r0, r3, #29
 80073d8:	d4e4      	bmi.n	80073a4 <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073da:	f7fd ffa7 	bl	800532c <HAL_GetTick>
 80073de:	1b80      	subs	r0, r0, r6
 80073e0:	2802      	cmp	r0, #2
 80073e2:	d9f7      	bls.n	80073d4 <HAL_RCC_OscConfig+0x1c8>
 80073e4:	e796      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 80073e6:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073ea:	4e30      	ldr	r6, [pc, #192]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_DISABLE();
 80073ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80073ee:	f7fd ff9d 	bl	800532c <HAL_GetTick>
 80073f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073f4:	6833      	ldr	r3, [r6, #0]
 80073f6:	0759      	lsls	r1, r3, #29
 80073f8:	f57f af14 	bpl.w	8007224 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073fc:	f7fd ff96 	bl	800532c <HAL_GetTick>
 8007400:	1b40      	subs	r0, r0, r5
 8007402:	2802      	cmp	r0, #2
 8007404:	d9f6      	bls.n	80073f4 <HAL_RCC_OscConfig+0x1e8>
 8007406:	e785      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007408:	69e2      	ldr	r2, [r4, #28]
 800740a:	b1c2      	cbz	r2, 800743e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 800740c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800740e:	4d27      	ldr	r5, [pc, #156]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_ENABLE();
 8007410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007414:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007416:	f7fd ff89 	bl	800532c <HAL_GetTick>
 800741a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	05df      	lsls	r7, r3, #23
 8007420:	d507      	bpl.n	8007432 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007422:	68eb      	ldr	r3, [r5, #12]
 8007424:	6a22      	ldr	r2, [r4, #32]
 8007426:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800742a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800742e:	60eb      	str	r3, [r5, #12]
 8007430:	e718      	b.n	8007264 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007432:	f7fd ff7b 	bl	800532c <HAL_GetTick>
 8007436:	1b80      	subs	r0, r0, r6
 8007438:	2802      	cmp	r0, #2
 800743a:	d9ef      	bls.n	800741c <HAL_RCC_OscConfig+0x210>
 800743c:	e76a      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 800743e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007440:	4e1a      	ldr	r6, [pc, #104]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_DISABLE();
 8007442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007446:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007448:	f7fd ff70 	bl	800532c <HAL_GetTick>
 800744c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800744e:	6833      	ldr	r3, [r6, #0]
 8007450:	05d8      	lsls	r0, r3, #23
 8007452:	f57f af07 	bpl.w	8007264 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007456:	f7fd ff69 	bl	800532c <HAL_GetTick>
 800745a:	1b40      	subs	r0, r0, r5
 800745c:	2802      	cmp	r0, #2
 800745e:	d9f6      	bls.n	800744e <HAL_RCC_OscConfig+0x242>
 8007460:	e758      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007462:	6963      	ldr	r3, [r4, #20]
 8007464:	4d11      	ldr	r5, [pc, #68]	; (80074ac <HAL_RCC_OscConfig+0x2a0>)
 8007466:	b183      	cbz	r3, 800748a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 8007468:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007470:	f7fd ff5c 	bl	800532c <HAL_GetTick>
 8007474:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007476:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007478:	079b      	lsls	r3, r3, #30
 800747a:	f53f aef7 	bmi.w	800726c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800747e:	f7fd ff55 	bl	800532c <HAL_GetTick>
 8007482:	1b80      	subs	r0, r0, r6
 8007484:	2802      	cmp	r0, #2
 8007486:	d9f6      	bls.n	8007476 <HAL_RCC_OscConfig+0x26a>
 8007488:	e744      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_LSI_DISABLE();
 800748a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007492:	f7fd ff4b 	bl	800532c <HAL_GetTick>
 8007496:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007498:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800749a:	079f      	lsls	r7, r3, #30
 800749c:	f57f aee6 	bpl.w	800726c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074a0:	f7fd ff44 	bl	800532c <HAL_GetTick>
 80074a4:	1b80      	subs	r0, r0, r6
 80074a6:	2802      	cmp	r0, #2
 80074a8:	d9f6      	bls.n	8007498 <HAL_RCC_OscConfig+0x28c>
 80074aa:	e733      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
 80074ac:	58024400 	.word	0x58024400
 80074b0:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80074b4:	69a3      	ldr	r3, [r4, #24]
 80074b6:	4d83      	ldr	r5, [pc, #524]	; (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80074b8:	b183      	cbz	r3, 80074dc <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_HSI48_ENABLE();
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80074c2:	f7fd ff33 	bl	800532c <HAL_GetTick>
 80074c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	0498      	lsls	r0, r3, #18
 80074cc:	f53f aed2 	bmi.w	8007274 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074d0:	f7fd ff2c 	bl	800532c <HAL_GetTick>
 80074d4:	1b80      	subs	r0, r0, r6
 80074d6:	2802      	cmp	r0, #2
 80074d8:	d9f6      	bls.n	80074c8 <HAL_RCC_OscConfig+0x2bc>
 80074da:	e71b      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80074e4:	f7fd ff22 	bl	800532c <HAL_GetTick>
 80074e8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	0499      	lsls	r1, r3, #18
 80074ee:	f57f aec1 	bpl.w	8007274 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074f2:	f7fd ff1b 	bl	800532c <HAL_GetTick>
 80074f6:	1b80      	subs	r0, r0, r6
 80074f8:	2802      	cmp	r0, #2
 80074fa:	d9f6      	bls.n	80074ea <HAL_RCC_OscConfig+0x2de>
 80074fc:	e70a      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074fe:	f7fd ff15 	bl	800532c <HAL_GetTick>
 8007502:	1b80      	subs	r0, r0, r6
 8007504:	2864      	cmp	r0, #100	; 0x64
 8007506:	f67f aec0 	bls.w	800728a <HAL_RCC_OscConfig+0x7e>
 800750a:	e703      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800750c:	b9b3      	cbnz	r3, 800753c <HAL_RCC_OscConfig+0x330>
 800750e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007510:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	672b      	str	r3, [r5, #112]	; 0x70
 800751a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800751c:	f023 0304 	bic.w	r3, r3, #4
 8007520:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007522:	f7fd ff03 	bl	800532c <HAL_GetTick>
 8007526:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007528:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800752a:	0798      	lsls	r0, r3, #30
 800752c:	f57f aec4 	bpl.w	80072b8 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007530:	f7fd fefc 	bl	800532c <HAL_GetTick>
 8007534:	1b80      	subs	r0, r0, r6
 8007536:	42b8      	cmp	r0, r7
 8007538:	d9f6      	bls.n	8007528 <HAL_RCC_OscConfig+0x31c>
 800753a:	e6eb      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800753c:	2b05      	cmp	r3, #5
 800753e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007540:	d103      	bne.n	800754a <HAL_RCC_OscConfig+0x33e>
 8007542:	f043 0304 	orr.w	r3, r3, #4
 8007546:	672b      	str	r3, [r5, #112]	; 0x70
 8007548:	e6a8      	b.n	800729c <HAL_RCC_OscConfig+0x90>
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	672b      	str	r3, [r5, #112]	; 0x70
 8007550:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007552:	f023 0304 	bic.w	r3, r3, #4
 8007556:	e6a4      	b.n	80072a2 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007558:	f7fd fee8 	bl	800532c <HAL_GetTick>
 800755c:	1b40      	subs	r0, r0, r5
 800755e:	42b8      	cmp	r0, r7
 8007560:	f67f aea6 	bls.w	80072b0 <HAL_RCC_OscConfig+0xa4>
 8007564:	e6d6      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007566:	4d57      	ldr	r5, [pc, #348]	; (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007568:	692b      	ldr	r3, [r5, #16]
 800756a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800756e:	2b18      	cmp	r3, #24
 8007570:	d07a      	beq.n	8007668 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 8007572:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007574:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800757a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800757c:	d167      	bne.n	800764e <HAL_RCC_OscConfig+0x442>
        tickstart = HAL_GetTick();
 800757e:	f7fd fed5 	bl	800532c <HAL_GetTick>
 8007582:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	0199      	lsls	r1, r3, #6
 8007588:	d45b      	bmi.n	8007642 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800758a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800758c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800758e:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8007592:	f023 0303 	bic.w	r3, r3, #3
 8007596:	4313      	orrs	r3, r2
 8007598:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800759a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800759e:	62ab      	str	r3, [r5, #40]	; 0x28
 80075a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80075a4:	3b01      	subs	r3, #1
 80075a6:	3a01      	subs	r2, #1
 80075a8:	025b      	lsls	r3, r3, #9
 80075aa:	0412      	lsls	r2, r2, #16
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80075b2:	4313      	orrs	r3, r2
 80075b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80075b6:	3a01      	subs	r2, #1
 80075b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075bc:	4313      	orrs	r3, r2
 80075be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80075c0:	3a01      	subs	r2, #1
 80075c2:	0612      	lsls	r2, r2, #24
 80075c4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80075c8:	4313      	orrs	r3, r2
 80075ca:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80075cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80075d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80075d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80075e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80075e4:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80075ea:	f023 030c 	bic.w	r3, r3, #12
 80075ee:	4313      	orrs	r3, r2
 80075f0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80075f6:	f023 0302 	bic.w	r3, r3, #2
 80075fa:	4313      	orrs	r3, r2
 80075fc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007604:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800760c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800760e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007614:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8007616:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007618:	f043 0301 	orr.w	r3, r3, #1
 800761c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007624:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007626:	f7fd fe81 	bl	800532c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800762a:	4d26      	ldr	r5, [pc, #152]	; (80076c4 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800762c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800762e:	682b      	ldr	r3, [r5, #0]
 8007630:	019a      	lsls	r2, r3, #6
 8007632:	f53f ae45 	bmi.w	80072c0 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007636:	f7fd fe79 	bl	800532c <HAL_GetTick>
 800763a:	1b00      	subs	r0, r0, r4
 800763c:	2802      	cmp	r0, #2
 800763e:	d9f6      	bls.n	800762e <HAL_RCC_OscConfig+0x422>
 8007640:	e668      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007642:	f7fd fe73 	bl	800532c <HAL_GetTick>
 8007646:	1b80      	subs	r0, r0, r6
 8007648:	2802      	cmp	r0, #2
 800764a:	d99b      	bls.n	8007584 <HAL_RCC_OscConfig+0x378>
 800764c:	e662      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 800764e:	f7fd fe6d 	bl	800532c <HAL_GetTick>
 8007652:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	019b      	lsls	r3, r3, #6
 8007658:	f57f ae32 	bpl.w	80072c0 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800765c:	f7fd fe66 	bl	800532c <HAL_GetTick>
 8007660:	1b00      	subs	r0, r0, r4
 8007662:	2802      	cmp	r0, #2
 8007664:	d9f6      	bls.n	8007654 <HAL_RCC_OscConfig+0x448>
 8007666:	e655      	b.n	8007314 <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007668:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800766a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800766c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800766e:	f43f ae52 	beq.w	8007316 <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007672:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007676:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007678:	4281      	cmp	r1, r0
 800767a:	f47f adca 	bne.w	8007212 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800767e:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007682:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007684:	428a      	cmp	r2, r1
 8007686:	f47f adc4 	bne.w	8007212 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800768a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800768c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8007690:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007692:	4291      	cmp	r1, r2
 8007694:	f47f adbd 	bne.w	8007212 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007698:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800769a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800769e:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076a0:	4291      	cmp	r1, r2
 80076a2:	f47f adb6 	bne.w	8007212 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80076a8:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80076ac:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076ae:	4291      	cmp	r1, r2
 80076b0:	f47f adaf 	bne.w	8007212 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80076b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80076ba:	3801      	subs	r0, #1
  return HAL_OK;
 80076bc:	1a18      	subs	r0, r3, r0
 80076be:	bf18      	it	ne
 80076c0:	2001      	movne	r0, #1
 80076c2:	e628      	b.n	8007316 <HAL_RCC_OscConfig+0x10a>
 80076c4:	58024400 	.word	0x58024400

080076c8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076c8:	4b48      	ldr	r3, [pc, #288]	; (80077ec <HAL_RCC_GetSysClockFreq+0x124>)
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80076d0:	2a10      	cmp	r2, #16
{
 80076d2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d4:	f000 8086 	beq.w	80077e4 <HAL_RCC_GetSysClockFreq+0x11c>
 80076d8:	2a18      	cmp	r2, #24
 80076da:	d00c      	beq.n	80076f6 <HAL_RCC_GetSysClockFreq+0x2e>
 80076dc:	2a00      	cmp	r2, #0
 80076de:	f040 8083 	bne.w	80077e8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	4842      	ldr	r0, [pc, #264]	; (80077f0 <HAL_RCC_GetSysClockFreq+0x128>)
 80076e6:	f012 0f20 	tst.w	r2, #32
 80076ea:	d003      	beq.n	80076f4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80076f2:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80076f4:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80076fc:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007700:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007704:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8007706:	d0f5      	beq.n	80076f4 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007708:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800770c:	f002 0201 	and.w	r2, r2, #1
 8007710:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007714:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007718:	4362      	muls	r2, r4
 800771a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800771e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007722:	2901      	cmp	r1, #1
 8007724:	ee07 2a90 	vmov	s15, r2
 8007728:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800772c:	d04c      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x100>
 800772e:	2902      	cmp	r1, #2
 8007730:	d03c      	beq.n	80077ac <HAL_RCC_GetSysClockFreq+0xe4>
 8007732:	2900      	cmp	r1, #0
 8007734:	d148      	bne.n	80077c8 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	0692      	lsls	r2, r2, #26
 800773a:	d527      	bpl.n	800778c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	4a2c      	ldr	r2, [pc, #176]	; (80077f0 <HAL_RCC_GetSysClockFreq+0x128>)
 8007740:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007746:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774c:	ee07 2a10 	vmov	s14, r2
 8007750:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007754:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007758:	ee06 3a90 	vmov	s13, r3
 800775c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007764:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007768:	4b20      	ldr	r3, [pc, #128]	; (80077ec <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800776a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007770:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007774:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007776:	ee07 3a10 	vmov	s14, r3
 800777a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800777e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007782:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007786:	ee17 0a90 	vmov	r0, s15
 800778a:	e7b3      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007792:	ee07 3a10 	vmov	s14, r3
 8007796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800779a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800779e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80077a2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80077f4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077a6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80077aa:	e7dd      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b2:	ee07 3a10 	vmov	s14, r3
 80077b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80077c2:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80077f8 <HAL_RCC_GetSysClockFreq+0x130>
 80077c6:	e7ee      	b.n	80077a6 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a10 	vmov	s14, r3
 80077d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80077de:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80077fc <HAL_RCC_GetSysClockFreq+0x134>
 80077e2:	e7e0      	b.n	80077a6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077e4:	4806      	ldr	r0, [pc, #24]	; (8007800 <HAL_RCC_GetSysClockFreq+0x138>)
 80077e6:	e785      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80077e8:	4806      	ldr	r0, [pc, #24]	; (8007804 <HAL_RCC_GetSysClockFreq+0x13c>)
 80077ea:	e783      	b.n	80076f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80077ec:	58024400 	.word	0x58024400
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	4c742400 	.word	0x4c742400
 80077f8:	4b989680 	.word	0x4b989680
 80077fc:	4a742400 	.word	0x4a742400
 8007800:	01312d00 	.word	0x01312d00
 8007804:	003d0900 	.word	0x003d0900

08007808 <HAL_RCC_ClockConfig>:
{
 8007808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800780c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800780e:	4604      	mov	r4, r0
 8007810:	b910      	cbnz	r0, 8007818 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007812:	2001      	movs	r0, #1
}
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007818:	4a88      	ldr	r2, [pc, #544]	; (8007a3c <HAL_RCC_ClockConfig+0x234>)
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	428b      	cmp	r3, r1
 8007822:	f0c0 8093 	bcc.w	800794c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	075f      	lsls	r7, r3, #29
 800782a:	f100 809b 	bmi.w	8007964 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782e:	071e      	lsls	r6, r3, #28
 8007830:	d50b      	bpl.n	800784a <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007832:	4983      	ldr	r1, [pc, #524]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 8007834:	6966      	ldr	r6, [r4, #20]
 8007836:	69c8      	ldr	r0, [r1, #28]
 8007838:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800783c:	4286      	cmp	r6, r0
 800783e:	d904      	bls.n	800784a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007840:	69ca      	ldr	r2, [r1, #28]
 8007842:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007846:	4332      	orrs	r2, r6
 8007848:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800784a:	06d8      	lsls	r0, r3, #27
 800784c:	d50b      	bpl.n	8007866 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800784e:	497c      	ldr	r1, [pc, #496]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 8007850:	69a6      	ldr	r6, [r4, #24]
 8007852:	69c8      	ldr	r0, [r1, #28]
 8007854:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8007858:	4286      	cmp	r6, r0
 800785a:	d904      	bls.n	8007866 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800785c:	69ca      	ldr	r2, [r1, #28]
 800785e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007862:	4332      	orrs	r2, r6
 8007864:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007866:	0699      	lsls	r1, r3, #26
 8007868:	d50b      	bpl.n	8007882 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800786a:	4975      	ldr	r1, [pc, #468]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 800786c:	69e6      	ldr	r6, [r4, #28]
 800786e:	6a08      	ldr	r0, [r1, #32]
 8007870:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007874:	4286      	cmp	r6, r0
 8007876:	d904      	bls.n	8007882 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007878:	6a0a      	ldr	r2, [r1, #32]
 800787a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800787e:	4332      	orrs	r2, r6
 8007880:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007882:	079a      	lsls	r2, r3, #30
 8007884:	d50b      	bpl.n	800789e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007886:	496e      	ldr	r1, [pc, #440]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 8007888:	68e6      	ldr	r6, [r4, #12]
 800788a:	6988      	ldr	r0, [r1, #24]
 800788c:	f000 000f 	and.w	r0, r0, #15
 8007890:	4286      	cmp	r6, r0
 8007892:	d904      	bls.n	800789e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007894:	698a      	ldr	r2, [r1, #24]
 8007896:	f022 020f 	bic.w	r2, r2, #15
 800789a:	4332      	orrs	r2, r6
 800789c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800789e:	07df      	lsls	r7, r3, #31
 80078a0:	d46e      	bmi.n	8007980 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	079e      	lsls	r6, r3, #30
 80078a6:	f100 80a1 	bmi.w	80079ec <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078aa:	4964      	ldr	r1, [pc, #400]	; (8007a3c <HAL_RCC_ClockConfig+0x234>)
 80078ac:	680a      	ldr	r2, [r1, #0]
 80078ae:	f002 020f 	and.w	r2, r2, #15
 80078b2:	42aa      	cmp	r2, r5
 80078b4:	f200 80a8 	bhi.w	8007a08 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078b8:	0758      	lsls	r0, r3, #29
 80078ba:	f100 80b1 	bmi.w	8007a20 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078be:	0719      	lsls	r1, r3, #28
 80078c0:	d50b      	bpl.n	80078da <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078c2:	495f      	ldr	r1, [pc, #380]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 80078c4:	6965      	ldr	r5, [r4, #20]
 80078c6:	69c8      	ldr	r0, [r1, #28]
 80078c8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80078cc:	4285      	cmp	r5, r0
 80078ce:	d204      	bcs.n	80078da <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078d0:	69ca      	ldr	r2, [r1, #28]
 80078d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80078d6:	432a      	orrs	r2, r5
 80078d8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078da:	06da      	lsls	r2, r3, #27
 80078dc:	d50b      	bpl.n	80078f6 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078de:	4958      	ldr	r1, [pc, #352]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 80078e0:	69a5      	ldr	r5, [r4, #24]
 80078e2:	69c8      	ldr	r0, [r1, #28]
 80078e4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80078e8:	4285      	cmp	r5, r0
 80078ea:	d204      	bcs.n	80078f6 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078ec:	69ca      	ldr	r2, [r1, #28]
 80078ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078f2:	432a      	orrs	r2, r5
 80078f4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078f6:	069b      	lsls	r3, r3, #26
 80078f8:	d50b      	bpl.n	8007912 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078fa:	4a51      	ldr	r2, [pc, #324]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 80078fc:	69e0      	ldr	r0, [r4, #28]
 80078fe:	6a11      	ldr	r1, [r2, #32]
 8007900:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8007904:	4288      	cmp	r0, r1
 8007906:	d204      	bcs.n	8007912 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007908:	6a13      	ldr	r3, [r2, #32]
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	4303      	orrs	r3, r0
 8007910:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007912:	f7ff fed9 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 8007916:	494a      	ldr	r1, [pc, #296]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 8007918:	4a4a      	ldr	r2, [pc, #296]	; (8007a44 <HAL_RCC_ClockConfig+0x23c>)
 800791a:	698b      	ldr	r3, [r1, #24]
 800791c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007920:	5cd3      	ldrb	r3, [r2, r3]
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007928:	698b      	ldr	r3, [r1, #24]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	5cd3      	ldrb	r3, [r2, r3]
 8007930:	4a45      	ldr	r2, [pc, #276]	; (8007a48 <HAL_RCC_ClockConfig+0x240>)
 8007932:	f003 031f 	and.w	r3, r3, #31
 8007936:	fa20 f303 	lsr.w	r3, r0, r3
 800793a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800793c:	4b43      	ldr	r3, [pc, #268]	; (8007a4c <HAL_RCC_ClockConfig+0x244>)
 800793e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8007940:	4b43      	ldr	r3, [pc, #268]	; (8007a50 <HAL_RCC_ClockConfig+0x248>)
}
 8007942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	f7f9 bf2a 	b.w	80017a0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794c:	6813      	ldr	r3, [r2, #0]
 800794e:	f023 030f 	bic.w	r3, r3, #15
 8007952:	430b      	orrs	r3, r1
 8007954:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007956:	6813      	ldr	r3, [r2, #0]
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	428b      	cmp	r3, r1
 800795e:	f47f af58 	bne.w	8007812 <HAL_RCC_ClockConfig+0xa>
 8007962:	e760      	b.n	8007826 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007964:	4936      	ldr	r1, [pc, #216]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 8007966:	6926      	ldr	r6, [r4, #16]
 8007968:	6988      	ldr	r0, [r1, #24]
 800796a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800796e:	4286      	cmp	r6, r0
 8007970:	f67f af5d 	bls.w	800782e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007974:	698a      	ldr	r2, [r1, #24]
 8007976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800797a:	4332      	orrs	r2, r6
 800797c:	618a      	str	r2, [r1, #24]
 800797e:	e756      	b.n	800782e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007980:	4b2f      	ldr	r3, [pc, #188]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 8007982:	68a1      	ldr	r1, [r4, #8]
 8007984:	699a      	ldr	r2, [r3, #24]
 8007986:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800798a:	430a      	orrs	r2, r1
 800798c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800798e:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007990:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007992:	2a02      	cmp	r2, #2
 8007994:	d11d      	bne.n	80079d2 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007996:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800799a:	f43f af3a 	beq.w	8007812 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800799e:	4e28      	ldr	r6, [pc, #160]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a0:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079a4:	6933      	ldr	r3, [r6, #16]
 80079a6:	f023 0307 	bic.w	r3, r3, #7
 80079aa:	4313      	orrs	r3, r2
 80079ac:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 80079ae:	f7fd fcbd 	bl	800532c <HAL_GetTick>
 80079b2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079b4:	6933      	ldr	r3, [r6, #16]
 80079b6:	6862      	ldr	r2, [r4, #4]
 80079b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079bc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80079c0:	f43f af6f 	beq.w	80078a2 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c4:	f7fd fcb2 	bl	800532c <HAL_GetTick>
 80079c8:	1bc0      	subs	r0, r0, r7
 80079ca:	4540      	cmp	r0, r8
 80079cc:	d9f2      	bls.n	80079b4 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 80079ce:	2003      	movs	r0, #3
 80079d0:	e720      	b.n	8007814 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079d2:	2a03      	cmp	r2, #3
 80079d4:	d102      	bne.n	80079dc <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80079da:	e7de      	b.n	800799a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079dc:	2a01      	cmp	r2, #1
 80079de:	d102      	bne.n	80079e6 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80079e4:	e7d9      	b.n	800799a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079e6:	f013 0f04 	tst.w	r3, #4
 80079ea:	e7d6      	b.n	800799a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079ec:	4914      	ldr	r1, [pc, #80]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 80079ee:	68e6      	ldr	r6, [r4, #12]
 80079f0:	6988      	ldr	r0, [r1, #24]
 80079f2:	f000 000f 	and.w	r0, r0, #15
 80079f6:	4286      	cmp	r6, r0
 80079f8:	f4bf af57 	bcs.w	80078aa <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079fc:	698a      	ldr	r2, [r1, #24]
 80079fe:	f022 020f 	bic.w	r2, r2, #15
 8007a02:	4332      	orrs	r2, r6
 8007a04:	618a      	str	r2, [r1, #24]
 8007a06:	e750      	b.n	80078aa <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a08:	680a      	ldr	r2, [r1, #0]
 8007a0a:	f022 020f 	bic.w	r2, r2, #15
 8007a0e:	432a      	orrs	r2, r5
 8007a10:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a12:	680a      	ldr	r2, [r1, #0]
 8007a14:	f002 020f 	and.w	r2, r2, #15
 8007a18:	42aa      	cmp	r2, r5
 8007a1a:	f47f aefa 	bne.w	8007812 <HAL_RCC_ClockConfig+0xa>
 8007a1e:	e74b      	b.n	80078b8 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a20:	4907      	ldr	r1, [pc, #28]	; (8007a40 <HAL_RCC_ClockConfig+0x238>)
 8007a22:	6925      	ldr	r5, [r4, #16]
 8007a24:	6988      	ldr	r0, [r1, #24]
 8007a26:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007a2a:	4285      	cmp	r5, r0
 8007a2c:	f4bf af47 	bcs.w	80078be <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a30:	698a      	ldr	r2, [r1, #24]
 8007a32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a36:	432a      	orrs	r2, r5
 8007a38:	618a      	str	r2, [r1, #24]
 8007a3a:	e740      	b.n	80078be <HAL_RCC_ClockConfig+0xb6>
 8007a3c:	52002000 	.word	0x52002000
 8007a40:	58024400 	.word	0x58024400
 8007a44:	0801d1a0 	.word	0x0801d1a0
 8007a48:	24000054 	.word	0x24000054
 8007a4c:	24000050 	.word	0x24000050
 8007a50:	2400005c 	.word	0x2400005c

08007a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a54:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a56:	4c0c      	ldr	r4, [pc, #48]	; (8007a88 <HAL_RCC_GetHCLKFreq+0x34>)
 8007a58:	f7ff fe36 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 8007a5c:	490b      	ldr	r1, [pc, #44]	; (8007a8c <HAL_RCC_GetHCLKFreq+0x38>)
 8007a5e:	69a3      	ldr	r3, [r4, #24]
 8007a60:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007a64:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a66:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a68:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a6c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a70:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a74:	5ccb      	ldrb	r3, [r1, r3]
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	fa22 f003 	lsr.w	r0, r2, r3
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007a80:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a82:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <HAL_RCC_GetHCLKFreq+0x40>)
 8007a84:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007a86:	bd10      	pop	{r4, pc}
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	0801d1a0 	.word	0x0801d1a0
 8007a90:	24000054 	.word	0x24000054
 8007a94:	24000050 	.word	0x24000050

08007a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a98:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a9a:	f7ff ffdb 	bl	8007a54 <HAL_RCC_GetHCLKFreq>
 8007a9e:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007aa0:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007aa8:	5cd3      	ldrb	r3, [r2, r3]
 8007aaa:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007aae:	40d8      	lsrs	r0, r3
 8007ab0:	bd08      	pop	{r3, pc}
 8007ab2:	bf00      	nop
 8007ab4:	58024400 	.word	0x58024400
 8007ab8:	0801d1a0 	.word	0x0801d1a0

08007abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007abc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007abe:	f7ff ffc9 	bl	8007a54 <HAL_RCC_GetHCLKFreq>
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007ac4:	4a05      	ldr	r2, [pc, #20]	; (8007adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007acc:	5cd3      	ldrb	r3, [r2, r3]
 8007ace:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ad2:	40d8      	lsrs	r0, r3
 8007ad4:	bd08      	pop	{r3, pc}
 8007ad6:	bf00      	nop
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	0801d1a0 	.word	0x0801d1a0

08007ae0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007ae0:	233f      	movs	r3, #63	; 0x3f
 8007ae2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ae4:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <HAL_RCC_GetClockConfig+0x4c>)
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	f002 0207 	and.w	r2, r2, #7
 8007aec:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8007af4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	f002 020f 	and.w	r2, r2, #15
 8007afc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007b04:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007b0c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007b0e:	69da      	ldr	r2, [r3, #28]
 8007b10:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007b14:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b1c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b1e:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <HAL_RCC_GetClockConfig+0x50>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	600b      	str	r3, [r1, #0]
}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	52002000 	.word	0x52002000

08007b34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b36:	4c3a      	ldr	r4, [pc, #232]	; (8007c20 <RCCEx_PLL2_Config+0xec>)
{
 8007b38:	4606      	mov	r6, r0
 8007b3a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d069      	beq.n	8007c1a <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b4c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4e:	f7fd fbed 	bl	800532c <HAL_GetTick>
 8007b52:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	011a      	lsls	r2, r3, #4
 8007b58:	d44b      	bmi.n	8007bf2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b5c:	6832      	ldr	r2, [r6, #0]
 8007b5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b62:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007b66:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b68:	68b3      	ldr	r3, [r6, #8]
 8007b6a:	68f2      	ldr	r2, [r6, #12]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	3a01      	subs	r2, #1
 8007b70:	025b      	lsls	r3, r3, #9
 8007b72:	0412      	lsls	r2, r2, #16
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	6872      	ldr	r2, [r6, #4]
 8007b7e:	3a01      	subs	r2, #1
 8007b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b84:	4313      	orrs	r3, r2
 8007b86:	6932      	ldr	r2, [r6, #16]
 8007b88:	3a01      	subs	r2, #1
 8007b8a:	0612      	lsls	r2, r2, #24
 8007b8c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007b90:	4313      	orrs	r3, r2
 8007b92:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b96:	6972      	ldr	r2, [r6, #20]
 8007b98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ba2:	69b2      	ldr	r2, [r6, #24]
 8007ba4:	f023 0320 	bic.w	r3, r3, #32
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007bae:	f023 0310 	bic.w	r3, r3, #16
 8007bb2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bb6:	69f2      	ldr	r2, [r6, #28]
 8007bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007bc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007bc4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007bc8:	f043 0310 	orr.w	r3, r3, #16
 8007bcc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007bd0:	b9b5      	cbnz	r5, 8007c00 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bd8:	4c11      	ldr	r4, [pc, #68]	; (8007c20 <RCCEx_PLL2_Config+0xec>)
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007be0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be2:	f7fd fba3 	bl	800532c <HAL_GetTick>
 8007be6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	d50f      	bpl.n	8007c0e <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e005      	b.n	8007bfe <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bf2:	f7fd fb9b 	bl	800532c <HAL_GetTick>
 8007bf6:	1bc0      	subs	r0, r0, r7
 8007bf8:	2802      	cmp	r0, #2
 8007bfa:	d9ab      	bls.n	8007b54 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8007bfc:	2003      	movs	r0, #3
}
 8007bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c00:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c02:	bf0c      	ite	eq
 8007c04:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c08:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007c0c:	e7e3      	b.n	8007bd6 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c0e:	f7fd fb8d 	bl	800532c <HAL_GetTick>
 8007c12:	1b40      	subs	r0, r0, r5
 8007c14:	2802      	cmp	r0, #2
 8007c16:	d9e7      	bls.n	8007be8 <RCCEx_PLL2_Config+0xb4>
 8007c18:	e7f0      	b.n	8007bfc <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	e7ef      	b.n	8007bfe <RCCEx_PLL2_Config+0xca>
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400

08007c24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c26:	4c3a      	ldr	r4, [pc, #232]	; (8007d10 <RCCEx_PLL3_Config+0xec>)
{
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d069      	beq.n	8007d0a <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3e:	f7fd fb75 	bl	800532c <HAL_GetTick>
 8007c42:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	009a      	lsls	r2, r3, #2
 8007c48:	d44b      	bmi.n	8007ce2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c4c:	6832      	ldr	r2, [r6, #0]
 8007c4e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007c52:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007c56:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c58:	68b3      	ldr	r3, [r6, #8]
 8007c5a:	68f2      	ldr	r2, [r6, #12]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	3a01      	subs	r2, #1
 8007c60:	025b      	lsls	r3, r3, #9
 8007c62:	0412      	lsls	r2, r2, #16
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	6872      	ldr	r2, [r6, #4]
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c74:	4313      	orrs	r3, r2
 8007c76:	6932      	ldr	r2, [r6, #16]
 8007c78:	3a01      	subs	r2, #1
 8007c7a:	0612      	lsls	r2, r2, #24
 8007c7c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007c80:	4313      	orrs	r3, r2
 8007c82:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c86:	6972      	ldr	r2, [r6, #20]
 8007c88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c92:	69b2      	ldr	r2, [r6, #24]
 8007c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007ca6:	69f2      	ldr	r2, [r6, #28]
 8007ca8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007cb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007cb4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cbc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007cc0:	b9b5      	cbnz	r5, 8007cf0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cc8:	4c11      	ldr	r4, [pc, #68]	; (8007d10 <RCCEx_PLL3_Config+0xec>)
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cd2:	f7fd fb2b 	bl	800532c <HAL_GetTick>
 8007cd6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	d50f      	bpl.n	8007cfe <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8007cde:	2000      	movs	r0, #0
 8007ce0:	e005      	b.n	8007cee <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ce2:	f7fd fb23 	bl	800532c <HAL_GetTick>
 8007ce6:	1bc0      	subs	r0, r0, r7
 8007ce8:	2802      	cmp	r0, #2
 8007cea:	d9ab      	bls.n	8007c44 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8007cec:	2003      	movs	r0, #3
}
 8007cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cf0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cf2:	bf0c      	ite	eq
 8007cf4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cf8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007cfc:	e7e3      	b.n	8007cc6 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cfe:	f7fd fb15 	bl	800532c <HAL_GetTick>
 8007d02:	1b40      	subs	r0, r0, r5
 8007d04:	2802      	cmp	r0, #2
 8007d06:	d9e7      	bls.n	8007cd8 <RCCEx_PLL3_Config+0xb4>
 8007d08:	e7f0      	b.n	8007cec <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	e7ef      	b.n	8007cee <RCCEx_PLL3_Config+0xca>
 8007d0e:	bf00      	nop
 8007d10:	58024400 	.word	0x58024400

08007d14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d18:	6806      	ldr	r6, [r0, #0]
{
 8007d1a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d1c:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8007d20:	d009      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d22:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d28:	d02c      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8007d2a:	d811      	bhi.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007d2c:	b1e3      	cbz	r3, 8007d68 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d32:	d01f      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007d34:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d36:	682b      	ldr	r3, [r5, #0]
 8007d38:	05d8      	lsls	r0, r3, #23
 8007d3a:	f140 80d7 	bpl.w	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d3e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	f200 80d2 	bhi.w	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8007d46:	e8df f003 	tbb	[pc, r3]
 8007d4a:	2922      	.short	0x2922
 8007d4c:	27ca      	.short	0x27ca
 8007d4e:	27          	.byte	0x27
 8007d4f:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d54:	d1ee      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d56:	4ab6      	ldr	r2, [pc, #728]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d58:	2600      	movs	r6, #0
 8007d5a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007d5c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007d5e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d62:	430b      	orrs	r3, r1
 8007d64:	6513      	str	r3, [r2, #80]	; 0x50
 8007d66:	e7e6      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d68:	4ab1      	ldr	r2, [pc, #708]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d70:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007d72:	e7f0      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d74:	2102      	movs	r1, #2
 8007d76:	3004      	adds	r0, #4
 8007d78:	f7ff fedc 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d7c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d1d9      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8007d82:	e7e8      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d84:	2102      	movs	r1, #2
 8007d86:	3024      	adds	r0, #36	; 0x24
 8007d88:	f7ff ff4c 	bl	8007c24 <RCCEx_PLL3_Config>
 8007d8c:	e7f6      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8e:	4aa8      	ldr	r2, [pc, #672]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d96:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d98:	4634      	mov	r4, r6
 8007d9a:	e004      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	1d28      	adds	r0, r5, #4
 8007da0:	f7ff fec8 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007da4:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007da6:	2c00      	cmp	r4, #0
 8007da8:	f040 80a2 	bne.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dac:	4aa0      	ldr	r2, [pc, #640]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007dae:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007db0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	430b      	orrs	r3, r1
 8007db8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	0559      	lsls	r1, r3, #21
 8007dbe:	d510      	bpl.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007dc0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8007dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dc8:	f000 80b3 	beq.w	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007dcc:	f200 8092 	bhi.w	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80a2 	beq.w	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dda:	f000 80a4 	beq.w	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007dde:	2601      	movs	r6, #1
 8007de0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	051a      	lsls	r2, r3, #20
 8007de6:	d510      	bpl.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007de8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8007dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007df0:	f000 80c6 	beq.w	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007df4:	f200 80a5 	bhi.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80b5 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e02:	f000 80b7 	beq.w	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007e06:	2601      	movs	r6, #1
 8007e08:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	019b      	lsls	r3, r3, #6
 8007e0e:	d50d      	bpl.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8007e10:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	f000 80ce 	beq.w	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8007e18:	f200 80ba 	bhi.w	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 80ba 	beq.w	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	f000 80c0 	beq.w	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8007e28:	2601      	movs	r6, #1
 8007e2a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	04df      	lsls	r7, r3, #19
 8007e30:	d50f      	bpl.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e32:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e38:	f000 80e0 	beq.w	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007e3c:	f200 80c2 	bhi.w	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 80cf 	beq.w	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4a:	f000 80d1 	beq.w	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007e4e:	2601      	movs	r6, #1
 8007e50:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	0498      	lsls	r0, r3, #18
 8007e56:	d50f      	bpl.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e58:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8007e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e5e:	f000 80ef 	beq.w	8008040 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8007e62:	f200 80d3 	bhi.w	800800c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80d9 	beq.w	800801e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e70:	f000 80e0 	beq.w	8008034 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8007e74:	2601      	movs	r6, #1
 8007e76:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	0459      	lsls	r1, r3, #17
 8007e7c:	d510      	bpl.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e7e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8007e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e86:	f000 80fc 	beq.w	8008082 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007e8a:	f200 80e1 	bhi.w	8008050 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80e7 	beq.w	8008062 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e98:	f000 80ed 	beq.w	8008076 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007e9c:	2601      	movs	r6, #1
 8007e9e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	041a      	lsls	r2, r3, #16
 8007ea4:	d50d      	bpl.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8007ea6:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8007ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eac:	f000 80f1 	beq.w	8008092 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb4:	f000 80fb 	beq.w	80080ae <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80ef 	beq.w	800809c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007ebe:	2601      	movs	r6, #1
 8007ec0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ec2:	682b      	ldr	r3, [r5, #0]
 8007ec4:	01db      	lsls	r3, r3, #7
 8007ec6:	f140 8108 	bpl.w	80080da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8007eca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	f200 8148 	bhi.w	8008162 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007ed2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ed6:	00f9      	.short	0x00f9
 8007ed8:	014000f4 	.word	0x014000f4
 8007edc:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ede:	2100      	movs	r1, #0
 8007ee0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007ee4:	f7ff fe9e 	bl	8007c24 <RCCEx_PLL3_Config>
 8007ee8:	e75c      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007eea:	2601      	movs	r6, #1
 8007eec:	4634      	mov	r4, r6
 8007eee:	e764      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8007ef0:	4626      	mov	r6, r4
 8007ef2:	e762      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ef4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ef8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007efc:	d003      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007efe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f02:	f47f af6c 	bne.w	8007dde <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 8007f06:	b9d4      	cbnz	r4, 8007f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f08:	4a49      	ldr	r2, [pc, #292]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f0a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8007f0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f10:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8007f14:	430b      	orrs	r3, r1
 8007f16:	6593      	str	r3, [r2, #88]	; 0x58
 8007f18:	e763      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1a:	4a45      	ldr	r2, [pc, #276]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f22:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007f24:	e7ef      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f26:	2100      	movs	r1, #0
 8007f28:	1d28      	adds	r0, r5, #4
 8007f2a:	f7ff fe03 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f2e:	4604      	mov	r4, r0
      break;
 8007f30:	e7e9      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f32:	2100      	movs	r1, #0
 8007f34:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007f38:	f7ff fe74 	bl	8007c24 <RCCEx_PLL3_Config>
 8007f3c:	e7f7      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007f3e:	4626      	mov	r6, r4
 8007f40:	e74f      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f46:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007f4a:	d003      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007f4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f50:	f47f af59 	bne.w	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 8007f54:	b9d4      	cbnz	r4, 8007f8c <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f56:	4a36      	ldr	r2, [pc, #216]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f58:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8007f5c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007f62:	430b      	orrs	r3, r1
 8007f64:	6593      	str	r3, [r2, #88]	; 0x58
 8007f66:	e750      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f68:	4a31      	ldr	r2, [pc, #196]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f70:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007f72:	e7ef      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f74:	2100      	movs	r1, #0
 8007f76:	1d28      	adds	r0, r5, #4
 8007f78:	f7ff fddc 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f7c:	4604      	mov	r4, r0
      break;
 8007f7e:	e7e9      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f80:	2100      	movs	r1, #0
 8007f82:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007f86:	f7ff fe4d 	bl	8007c24 <RCCEx_PLL3_Config>
 8007f8a:	e7f7      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007f8c:	4626      	mov	r6, r4
 8007f8e:	e73c      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 8007f90:	2b30      	cmp	r3, #48	; 0x30
 8007f92:	f47f af49 	bne.w	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 8007f96:	b99c      	cbnz	r4, 8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007f98:	4a25      	ldr	r2, [pc, #148]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f9a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007f9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007f9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fa6:	e741      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa8:	4a21      	ldr	r2, [pc, #132]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007faa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007fb2:	e7f0      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	1d28      	adds	r0, r5, #4
 8007fb8:	f7ff fdbc 	bl	8007b34 <RCCEx_PLL2_Config>
 8007fbc:	4604      	mov	r4, r0
      break;
 8007fbe:	e7ea      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007fc0:	4626      	mov	r6, r4
 8007fc2:	e733      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007fc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fc8:	d003      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fce:	f47f af3e 	bne.w	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8007fd2:	b9cc      	cbnz	r4, 8008008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007fd4:	4a16      	ldr	r2, [pc, #88]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007fd6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8007fd8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	6513      	str	r3, [r2, #80]	; 0x50
 8007fe2:	e736      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe4:	4a12      	ldr	r2, [pc, #72]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007fe6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fec:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007fee:	e7f0      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	1d28      	adds	r0, r5, #4
 8007ff4:	f7ff fd9e 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ff8:	4604      	mov	r4, r0
      break;
 8007ffa:	e7ea      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008002:	f7ff fe0f 	bl	8007c24 <RCCEx_PLL3_Config>
 8008006:	e7f7      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8008008:	4626      	mov	r6, r4
 800800a:	e722      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 800800c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008010:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8008014:	d003      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8008016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800801a:	f47f af2b 	bne.w	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 800801e:	b9ac      	cbnz	r4, 800804c <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008020:	4a03      	ldr	r2, [pc, #12]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008022:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8008024:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008026:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800802a:	430b      	orrs	r3, r1
 800802c:	6513      	str	r3, [r2, #80]	; 0x50
 800802e:	e723      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8008030:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008034:	2101      	movs	r1, #1
 8008036:	1d28      	adds	r0, r5, #4
 8008038:	f7ff fd7c 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800803c:	4604      	mov	r4, r0
      break;
 800803e:	e7ee      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008040:	2101      	movs	r1, #1
 8008042:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008046:	f7ff fded 	bl	8007c24 <RCCEx_PLL3_Config>
 800804a:	e7f7      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x328>
 800804c:	4626      	mov	r6, r4
 800804e:	e713      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008050:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008054:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008058:	d003      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800805a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800805e:	f47f af1d 	bne.w	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 8008062:	b9a4      	cbnz	r4, 800808e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008064:	4a7f      	ldr	r2, [pc, #508]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008066:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800806a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800806c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008070:	430b      	orrs	r3, r1
 8008072:	6593      	str	r3, [r2, #88]	; 0x58
 8008074:	e714      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008076:	2101      	movs	r1, #1
 8008078:	1d28      	adds	r0, r5, #4
 800807a:	f7ff fd5b 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800807e:	4604      	mov	r4, r0
      break;
 8008080:	e7ef      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008082:	2101      	movs	r1, #1
 8008084:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008088:	f7ff fdcc 	bl	8007c24 <RCCEx_PLL3_Config>
 800808c:	e7f7      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800808e:	4626      	mov	r6, r4
 8008090:	e706      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008092:	4a74      	ldr	r2, [pc, #464]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008094:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800809a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800809c:	b96c      	cbnz	r4, 80080ba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800809e:	4a71      	ldr	r2, [pc, #452]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80080a0:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80080a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080a4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6513      	str	r3, [r2, #80]	; 0x50
 80080ac:	e709      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080ae:	2101      	movs	r1, #1
 80080b0:	1d28      	adds	r0, r5, #4
 80080b2:	f7ff fd3f 	bl	8007b34 <RCCEx_PLL2_Config>
 80080b6:	4604      	mov	r4, r0
      break;
 80080b8:	e7f0      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x388>
 80080ba:	4626      	mov	r6, r4
 80080bc:	e701      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080be:	4a69      	ldr	r2, [pc, #420]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80080c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80080c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80080c8:	2c00      	cmp	r4, #0
 80080ca:	d14d      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080cc:	4a65      	ldr	r2, [pc, #404]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80080ce:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80080d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	430b      	orrs	r3, r1
 80080d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	025f      	lsls	r7, r3, #9
 80080de:	d54d      	bpl.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080e0:	4f61      	ldr	r7, [pc, #388]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80080ea:	f7fd f91f 	bl	800532c <HAL_GetTick>
 80080ee:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	05d8      	lsls	r0, r3, #23
 80080f4:	d53a      	bpl.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	d16c      	bne.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080fa:	4b5a      	ldr	r3, [pc, #360]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80080fc:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 8008100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008102:	4042      	eors	r2, r0
 8008104:	f412 7f40 	tst.w	r2, #768	; 0x300
 8008108:	d00b      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800810a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800810c:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800810e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008112:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008116:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008118:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800811a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800811e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8008120:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008122:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008126:	d040      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008128:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800812c:	494d      	ldr	r1, [pc, #308]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800812e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008132:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008136:	d149      	bne.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8008138:	6908      	ldr	r0, [r1, #16]
 800813a:	4a4c      	ldr	r2, [pc, #304]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800813c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008140:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008144:	4302      	orrs	r2, r0
 8008146:	610a      	str	r2, [r1, #16]
 8008148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800814c:	4a45      	ldr	r2, [pc, #276]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800814e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008150:	430b      	orrs	r3, r1
 8008152:	6713      	str	r3, [r2, #112]	; 0x70
 8008154:	e012      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008156:	2102      	movs	r1, #2
 8008158:	1d28      	adds	r0, r5, #4
 800815a:	f7ff fceb 	bl	8007b34 <RCCEx_PLL2_Config>
 800815e:	4604      	mov	r4, r0
      break;
 8008160:	e7b2      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8008162:	2601      	movs	r6, #1
 8008164:	4634      	mov	r4, r6
 8008166:	e7b8      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8008168:	4626      	mov	r6, r4
 800816a:	e7b6      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800816c:	f7fd f8de 	bl	800532c <HAL_GetTick>
 8008170:	eba0 0008 	sub.w	r0, r0, r8
 8008174:	2864      	cmp	r0, #100	; 0x64
 8008176:	d9bb      	bls.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8008178:	2603      	movs	r6, #3
 800817a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	07da      	lsls	r2, r3, #31
 8008180:	d508      	bpl.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008182:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008184:	2b10      	cmp	r3, #16
 8008186:	d03c      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008188:	d826      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800818a:	b35b      	cbz	r3, 80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800818c:	2b08      	cmp	r3, #8
 800818e:	d032      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008190:	2601      	movs	r6, #1
 8008192:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	079b      	lsls	r3, r3, #30
 8008198:	d548      	bpl.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800819a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800819c:	2b05      	cmp	r3, #5
 800819e:	d85b      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80081a0:	e8df f003 	tbb	[pc, r3]
 80081a4:	3c54373c 	.word	0x3c54373c
 80081a8:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 80081aa:	f7fd f8bf 	bl	800532c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081ae:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 80081b2:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081b4:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081b8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80081bc:	0799      	lsls	r1, r3, #30
 80081be:	d4b3      	bmi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081c0:	f7fd f8b4 	bl	800532c <HAL_GetTick>
 80081c4:	1bc0      	subs	r0, r0, r7
 80081c6:	4548      	cmp	r0, r9
 80081c8:	d9f6      	bls.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80081ca:	e7d5      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081cc:	690a      	ldr	r2, [r1, #16]
 80081ce:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80081d2:	e7b8      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80081d4:	4626      	mov	r6, r4
 80081d6:	e7d1      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 80081d8:	f023 0208 	bic.w	r2, r3, #8
 80081dc:	2a20      	cmp	r2, #32
 80081de:	d001      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80081e0:	2b18      	cmp	r3, #24
 80081e2:	d1d5      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 80081e4:	b99c      	cbnz	r4, 800820e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081e6:	4a1f      	ldr	r2, [pc, #124]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80081e8:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80081ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081ec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6553      	str	r3, [r2, #84]	; 0x54
 80081f4:	e7ce      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081f6:	2101      	movs	r1, #1
 80081f8:	1d28      	adds	r0, r5, #4
 80081fa:	f7ff fc9b 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081fe:	4604      	mov	r4, r0
      break;
 8008200:	e7f0      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008202:	2101      	movs	r1, #1
 8008204:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008208:	f7ff fd0c 	bl	8007c24 <RCCEx_PLL3_Config>
 800820c:	e7f7      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800820e:	4626      	mov	r6, r4
 8008210:	e7c0      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008212:	2101      	movs	r1, #1
 8008214:	1d28      	adds	r0, r5, #4
 8008216:	f7ff fc8d 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800821a:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800821c:	b9fc      	cbnz	r4, 800825e <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800821e:	4a11      	ldr	r2, [pc, #68]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008220:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8008222:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008224:	f023 0307 	bic.w	r3, r3, #7
 8008228:	430b      	orrs	r3, r1
 800822a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	075f      	lsls	r7, r3, #29
 8008230:	d52e      	bpl.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008232:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8008236:	2b05      	cmp	r3, #5
 8008238:	f200 8134 	bhi.w	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800823c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008240:	0018001d 	.word	0x0018001d
 8008244:	001d012c 	.word	0x001d012c
 8008248:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800824c:	2101      	movs	r1, #1
 800824e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008252:	f7ff fce7 	bl	8007c24 <RCCEx_PLL3_Config>
 8008256:	e7e0      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008258:	2601      	movs	r6, #1
 800825a:	4634      	mov	r4, r6
 800825c:	e7e6      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800825e:	4626      	mov	r6, r4
 8008260:	e7e4      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008262:	bf00      	nop
 8008264:	58024400 	.word	0x58024400
 8008268:	58024800 	.word	0x58024800
 800826c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008270:	2101      	movs	r1, #1
 8008272:	1d28      	adds	r0, r5, #4
 8008274:	f7ff fc5e 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008278:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800827a:	2c00      	cmp	r4, #0
 800827c:	f040 8115 	bne.w	80084aa <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008280:	4ab8      	ldr	r2, [pc, #736]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008282:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8008286:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008288:	f023 0307 	bic.w	r3, r3, #7
 800828c:	430b      	orrs	r3, r1
 800828e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	0698      	lsls	r0, r3, #26
 8008294:	d510      	bpl.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008296:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800829a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800829e:	f000 811f 	beq.w	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80082a2:	f200 8104 	bhi.w	80084ae <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 810a 	beq.w	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80082ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b0:	f000 8110 	beq.w	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80082b4:	2601      	movs	r6, #1
 80082b6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	0659      	lsls	r1, r3, #25
 80082bc:	d510      	bpl.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80082be:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80082c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c6:	f000 812c 	beq.w	8008522 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80082ca:	f200 8111 	bhi.w	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8117 	beq.w	8008502 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80082d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d8:	f000 811d 	beq.w	8008516 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80082dc:	2601      	movs	r6, #1
 80082de:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	061a      	lsls	r2, r3, #24
 80082e4:	d510      	bpl.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80082e6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80082ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082ee:	f000 813b 	beq.w	8008568 <HAL_RCCEx_PeriphCLKConfig+0x854>
 80082f2:	f200 811e 	bhi.w	8008532 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 8124 	beq.w	8008544 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80082fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008300:	f000 812a 	beq.w	8008558 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8008304:	2601      	movs	r6, #1
 8008306:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	071b      	lsls	r3, r3, #28
 800830c:	d512      	bpl.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800830e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8008310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008314:	d107      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008316:	2102      	movs	r1, #2
 8008318:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800831c:	f7ff fc82 	bl	8007c24 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8008320:	2800      	cmp	r0, #0
 8008322:	bf18      	it	ne
 8008324:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008326:	4a8f      	ldr	r2, [pc, #572]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008328:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800832a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800832c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008330:	430b      	orrs	r3, r1
 8008332:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	06df      	lsls	r7, r3, #27
 8008338:	d514      	bpl.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800833a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800833e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008342:	d107      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008344:	2102      	movs	r1, #2
 8008346:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800834a:	f7ff fc6b 	bl	8007c24 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800834e:	2800      	cmp	r0, #0
 8008350:	bf18      	it	ne
 8008352:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008354:	4a83      	ldr	r2, [pc, #524]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008356:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800835a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800835c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008360:	430b      	orrs	r3, r1
 8008362:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	0318      	lsls	r0, r3, #12
 8008368:	d51a      	bpl.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 800836a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800836e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008372:	f000 8101 	beq.w	8008578 <HAL_RCCEx_PeriphCLKConfig+0x864>
 8008376:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800837a:	d006      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800837c:	2900      	cmp	r1, #0
 800837e:	f040 8101 	bne.w	8008584 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008382:	1d28      	adds	r0, r5, #4
 8008384:	f7ff fbd6 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008388:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800838a:	2c00      	cmp	r4, #0
 800838c:	f040 80fd 	bne.w	800858a <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008390:	4a74      	ldr	r2, [pc, #464]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008392:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8008396:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008398:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800839c:	430b      	orrs	r3, r1
 800839e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	0359      	lsls	r1, r3, #13
 80083a4:	d51c      	bpl.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 80083a6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80083aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ae:	f000 80ee 	beq.w	800858e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80083b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083b6:	d008      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80083b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083bc:	f040 80ee 	bne.w	800859c <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c0:	4a68      	ldr	r2, [pc, #416]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80083c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80083c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80083ca:	2c00      	cmp	r4, #0
 80083cc:	f040 80e9 	bne.w	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083d0:	4a64      	ldr	r2, [pc, #400]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80083d2:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80083d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80083d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80083dc:	430b      	orrs	r3, r1
 80083de:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	03da      	lsls	r2, r3, #15
 80083e4:	d509      	bpl.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 80083e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80dc 	beq.w	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x892>
 80083ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f2:	f000 80e6 	beq.w	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 80083f6:	2601      	movs	r6, #1
 80083f8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083fa:	682b      	ldr	r3, [r5, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	d507      	bpl.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008400:	2102      	movs	r1, #2
 8008402:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008406:	f7ff fc0d 	bl	8007c24 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800840a:	2800      	cmp	r0, #0
 800840c:	bf18      	it	ne
 800840e:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	039f      	lsls	r7, r3, #14
 8008414:	d50a      	bpl.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 8008416:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8008418:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800841c:	f000 80e7 	beq.w	80085ee <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8008420:	f200 80d7 	bhi.w	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8008424:	2900      	cmp	r1, #0
 8008426:	f000 80da 	beq.w	80085de <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800842a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800842c:	02d8      	lsls	r0, r3, #11
 800842e:	d506      	bpl.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008430:	494c      	ldr	r1, [pc, #304]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008432:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8008434:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008436:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800843a:	4302      	orrs	r2, r0
 800843c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800843e:	0299      	lsls	r1, r3, #10
 8008440:	d506      	bpl.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008442:	4948      	ldr	r1, [pc, #288]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008444:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8008446:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008448:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800844c:	4302      	orrs	r2, r0
 800844e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008450:	005a      	lsls	r2, r3, #1
 8008452:	d509      	bpl.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008454:	4a43      	ldr	r2, [pc, #268]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008456:	6911      	ldr	r1, [r2, #16]
 8008458:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800845c:	6111      	str	r1, [r2, #16]
 800845e:	6911      	ldr	r1, [r2, #16]
 8008460:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8008464:	4301      	orrs	r1, r0
 8008466:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008468:	2b00      	cmp	r3, #0
 800846a:	da06      	bge.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800846c:	493d      	ldr	r1, [pc, #244]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800846e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8008470:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008472:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008476:	4302      	orrs	r2, r0
 8008478:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	d507      	bpl.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800847e:	4a39      	ldr	r2, [pc, #228]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008480:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8008484:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008486:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800848a:	430b      	orrs	r3, r1
 800848c:	6553      	str	r3, [r2, #84]	; 0x54
}
 800848e:	1e30      	subs	r0, r6, #0
 8008490:	bf18      	it	ne
 8008492:	2001      	movne	r0, #1
 8008494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008498:	2101      	movs	r1, #1
 800849a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800849e:	f7ff fbc1 	bl	8007c24 <RCCEx_PLL3_Config>
 80084a2:	e6e9      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80084a4:	2601      	movs	r6, #1
 80084a6:	4634      	mov	r4, r6
 80084a8:	e6f2      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80084aa:	4626      	mov	r6, r4
 80084ac:	e6f0      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80084ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084b2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80084b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084bc:	f47f aefa 	bne.w	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 80084c0:	b9a4      	cbnz	r4, 80084ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084c2:	4a28      	ldr	r2, [pc, #160]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80084c4:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80084c8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80084ca:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80084ce:	430b      	orrs	r3, r1
 80084d0:	6553      	str	r3, [r2, #84]	; 0x54
 80084d2:	e6f1      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084d4:	2100      	movs	r1, #0
 80084d6:	1d28      	adds	r0, r5, #4
 80084d8:	f7ff fb2c 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084dc:	4604      	mov	r4, r0
      break;
 80084de:	e7ef      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084e0:	2102      	movs	r1, #2
 80084e2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80084e6:	f7ff fb9d 	bl	8007c24 <RCCEx_PLL3_Config>
 80084ea:	e7f7      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80084ec:	4626      	mov	r6, r4
 80084ee:	e6e3      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80084f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80084f8:	d003      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80084fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084fe:	f47f aeed 	bne.w	80082dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 8008502:	b9a4      	cbnz	r4, 800852e <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008504:	4a17      	ldr	r2, [pc, #92]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008506:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800850a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800850c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008510:	430b      	orrs	r3, r1
 8008512:	6593      	str	r3, [r2, #88]	; 0x58
 8008514:	e6e4      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008516:	2100      	movs	r1, #0
 8008518:	1d28      	adds	r0, r5, #4
 800851a:	f7ff fb0b 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800851e:	4604      	mov	r4, r0
      break;
 8008520:	e7ef      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008522:	2102      	movs	r1, #2
 8008524:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008528:	f7ff fb7c 	bl	8007c24 <RCCEx_PLL3_Config>
 800852c:	e7f7      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800852e:	4626      	mov	r6, r4
 8008530:	e6d6      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008532:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008536:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800853a:	d003      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800853c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008540:	f47f aee0 	bne.w	8008304 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 8008544:	b9b4      	cbnz	r4, 8008574 <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008546:	4a07      	ldr	r2, [pc, #28]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008548:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800854c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800854e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008552:	430b      	orrs	r3, r1
 8008554:	6593      	str	r3, [r2, #88]	; 0x58
 8008556:	e6d7      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008558:	2100      	movs	r1, #0
 800855a:	1d28      	adds	r0, r5, #4
 800855c:	f7ff faea 	bl	8007b34 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008560:	4604      	mov	r4, r0
      break;
 8008562:	e7ef      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8008564:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008568:	2102      	movs	r1, #2
 800856a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800856e:	f7ff fb59 	bl	8007c24 <RCCEx_PLL3_Config>
 8008572:	e7f5      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008574:	4626      	mov	r6, r4
 8008576:	e6c7      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008578:	2102      	movs	r1, #2
 800857a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800857e:	f7ff fb51 	bl	8007c24 <RCCEx_PLL3_Config>
 8008582:	e701      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 8008584:	2601      	movs	r6, #1
 8008586:	4634      	mov	r4, r6
 8008588:	e70a      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800858a:	4626      	mov	r6, r4
 800858c:	e708      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800858e:	2101      	movs	r1, #1
 8008590:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008594:	f7ff fb46 	bl	8007c24 <RCCEx_PLL3_Config>
 8008598:	4604      	mov	r4, r0
      break;
 800859a:	e716      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 800859c:	2601      	movs	r6, #1
 800859e:	4634      	mov	r4, r6
 80085a0:	e71e      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80085a2:	4626      	mov	r6, r4
 80085a4:	e71c      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a6:	4a16      	ldr	r2, [pc, #88]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80085a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80085b0:	b96c      	cbnz	r4, 80085ce <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80085b2:	4a13      	ldr	r2, [pc, #76]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80085b4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80085b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80085b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085bc:	430b      	orrs	r3, r1
 80085be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085c0:	e71b      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085c2:	2102      	movs	r1, #2
 80085c4:	1d28      	adds	r0, r5, #4
 80085c6:	f7ff fab5 	bl	8007b34 <RCCEx_PLL2_Config>
 80085ca:	4604      	mov	r4, r0
      break;
 80085cc:	e7f0      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80085ce:	4626      	mov	r6, r4
 80085d0:	e713      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 80085d2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80085d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80085da:	f47f af26 	bne.w	800842a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 80085de:	b964      	cbnz	r4, 80085fa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085e0:	4807      	ldr	r0, [pc, #28]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80085e2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80085e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80085e8:	430a      	orrs	r2, r1
 80085ea:	6542      	str	r2, [r0, #84]	; 0x54
 80085ec:	e71e      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085ee:	4804      	ldr	r0, [pc, #16]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80085f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80085f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80085f6:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80085f8:	e7f1      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80085fa:	4626      	mov	r6, r4
 80085fc:	e716      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x718>
 80085fe:	bf00      	nop
 8008600:	58024400 	.word	0x58024400

08008604 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008604:	6a03      	ldr	r3, [r0, #32]
 8008606:	f023 0301 	bic.w	r3, r3, #1
{
 800860a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008612:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008614:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8008618:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800861a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800861e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008622:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008624:	688d      	ldr	r5, [r1, #8]
 8008626:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008628:	4d1b      	ldr	r5, [pc, #108]	; (8008698 <TIM_OC1_SetConfig+0x94>)
 800862a:	42a8      	cmp	r0, r5
 800862c:	d00f      	beq.n	800864e <TIM_OC1_SetConfig+0x4a>
 800862e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008632:	42a8      	cmp	r0, r5
 8008634:	d00b      	beq.n	800864e <TIM_OC1_SetConfig+0x4a>
 8008636:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800863a:	42a8      	cmp	r0, r5
 800863c:	d007      	beq.n	800864e <TIM_OC1_SetConfig+0x4a>
 800863e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008642:	42a8      	cmp	r0, r5
 8008644:	d003      	beq.n	800864e <TIM_OC1_SetConfig+0x4a>
 8008646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800864a:	42a8      	cmp	r0, r5
 800864c:	d11e      	bne.n	800868c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800864e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008650:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008654:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008656:	4d10      	ldr	r5, [pc, #64]	; (8008698 <TIM_OC1_SetConfig+0x94>)
 8008658:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800865a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800865e:	d00f      	beq.n	8008680 <TIM_OC1_SetConfig+0x7c>
 8008660:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008664:	42a8      	cmp	r0, r5
 8008666:	d00b      	beq.n	8008680 <TIM_OC1_SetConfig+0x7c>
 8008668:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800866c:	42a8      	cmp	r0, r5
 800866e:	d007      	beq.n	8008680 <TIM_OC1_SetConfig+0x7c>
 8008670:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008674:	42a8      	cmp	r0, r5
 8008676:	d003      	beq.n	8008680 <TIM_OC1_SetConfig+0x7c>
 8008678:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800867c:	42a8      	cmp	r0, r5
 800867e:	d105      	bne.n	800868c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008680:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008684:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008688:	4334      	orrs	r4, r6
 800868a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800868c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800868e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008690:	684a      	ldr	r2, [r1, #4]
 8008692:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008694:	6203      	str	r3, [r0, #32]
}
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	40010000 	.word	0x40010000

0800869c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800869c:	6a03      	ldr	r3, [r0, #32]
 800869e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80086a2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086aa:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80086b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80086b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80086ba:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086bc:	688d      	ldr	r5, [r1, #8]
 80086be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086c2:	4d16      	ldr	r5, [pc, #88]	; (800871c <TIM_OC3_SetConfig+0x80>)
 80086c4:	42a8      	cmp	r0, r5
 80086c6:	d003      	beq.n	80086d0 <TIM_OC3_SetConfig+0x34>
 80086c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086cc:	42a8      	cmp	r0, r5
 80086ce:	d10d      	bne.n	80086ec <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086d0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80086d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086da:	4d10      	ldr	r5, [pc, #64]	; (800871c <TIM_OC3_SetConfig+0x80>)
 80086dc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80086de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e2:	d00e      	beq.n	8008702 <TIM_OC3_SetConfig+0x66>
 80086e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086e8:	42a8      	cmp	r0, r5
 80086ea:	d00a      	beq.n	8008702 <TIM_OC3_SetConfig+0x66>
 80086ec:	4d0c      	ldr	r5, [pc, #48]	; (8008720 <TIM_OC3_SetConfig+0x84>)
 80086ee:	42a8      	cmp	r0, r5
 80086f0:	d007      	beq.n	8008702 <TIM_OC3_SetConfig+0x66>
 80086f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086f6:	42a8      	cmp	r0, r5
 80086f8:	d003      	beq.n	8008702 <TIM_OC3_SetConfig+0x66>
 80086fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086fe:	42a8      	cmp	r0, r5
 8008700:	d106      	bne.n	8008710 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008702:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008706:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 800870a:	4334      	orrs	r4, r6
 800870c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008710:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008712:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008714:	684a      	ldr	r2, [r1, #4]
 8008716:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008718:	6203      	str	r3, [r0, #32]
}
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	40010000 	.word	0x40010000
 8008720:	40014000 	.word	0x40014000

08008724 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008724:	6a03      	ldr	r3, [r0, #32]
 8008726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800872a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800872c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008732:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008738:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800873a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800873e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008742:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008746:	688d      	ldr	r5, [r1, #8]
 8008748:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800874c:	4d0e      	ldr	r5, [pc, #56]	; (8008788 <TIM_OC4_SetConfig+0x64>)
 800874e:	42a8      	cmp	r0, r5
 8008750:	d00f      	beq.n	8008772 <TIM_OC4_SetConfig+0x4e>
 8008752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008756:	42a8      	cmp	r0, r5
 8008758:	d00b      	beq.n	8008772 <TIM_OC4_SetConfig+0x4e>
 800875a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800875e:	42a8      	cmp	r0, r5
 8008760:	d007      	beq.n	8008772 <TIM_OC4_SetConfig+0x4e>
 8008762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008766:	42a8      	cmp	r0, r5
 8008768:	d003      	beq.n	8008772 <TIM_OC4_SetConfig+0x4e>
 800876a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800876e:	42a8      	cmp	r0, r5
 8008770:	d104      	bne.n	800877c <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008772:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008776:	694d      	ldr	r5, [r1, #20]
 8008778:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800877e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008780:	684a      	ldr	r2, [r1, #4]
 8008782:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008784:	6203      	str	r3, [r0, #32]
}
 8008786:	bd30      	pop	{r4, r5, pc}
 8008788:	40010000 	.word	0x40010000

0800878c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800878c:	6a03      	ldr	r3, [r0, #32]
 800878e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8008792:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008794:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008798:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800879a:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800879c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80087a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80087aa:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ac:	688d      	ldr	r5, [r1, #8]
 80087ae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b2:	4d0f      	ldr	r5, [pc, #60]	; (80087f0 <TIM_OC5_SetConfig+0x64>)
 80087b4:	42a8      	cmp	r0, r5
 80087b6:	d00f      	beq.n	80087d8 <TIM_OC5_SetConfig+0x4c>
 80087b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087bc:	42a8      	cmp	r0, r5
 80087be:	d00b      	beq.n	80087d8 <TIM_OC5_SetConfig+0x4c>
 80087c0:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80087c4:	42a8      	cmp	r0, r5
 80087c6:	d007      	beq.n	80087d8 <TIM_OC5_SetConfig+0x4c>
 80087c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087cc:	42a8      	cmp	r0, r5
 80087ce:	d003      	beq.n	80087d8 <TIM_OC5_SetConfig+0x4c>
 80087d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087d4:	42a8      	cmp	r0, r5
 80087d6:	d104      	bne.n	80087e2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087d8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087dc:	694d      	ldr	r5, [r1, #20]
 80087de:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087e4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087e6:	684a      	ldr	r2, [r1, #4]
 80087e8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ea:	6203      	str	r3, [r0, #32]
}
 80087ec:	bd30      	pop	{r4, r5, pc}
 80087ee:	bf00      	nop
 80087f0:	40010000 	.word	0x40010000

080087f4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087f4:	6a03      	ldr	r3, [r0, #32]
 80087f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80087fa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008800:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008802:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008804:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008808:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800880a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800880e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008812:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008816:	688d      	ldr	r5, [r1, #8]
 8008818:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881c:	4d0e      	ldr	r5, [pc, #56]	; (8008858 <TIM_OC6_SetConfig+0x64>)
 800881e:	42a8      	cmp	r0, r5
 8008820:	d00f      	beq.n	8008842 <TIM_OC6_SetConfig+0x4e>
 8008822:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008826:	42a8      	cmp	r0, r5
 8008828:	d00b      	beq.n	8008842 <TIM_OC6_SetConfig+0x4e>
 800882a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800882e:	42a8      	cmp	r0, r5
 8008830:	d007      	beq.n	8008842 <TIM_OC6_SetConfig+0x4e>
 8008832:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008836:	42a8      	cmp	r0, r5
 8008838:	d003      	beq.n	8008842 <TIM_OC6_SetConfig+0x4e>
 800883a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800883e:	42a8      	cmp	r0, r5
 8008840:	d104      	bne.n	800884c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008842:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008846:	694d      	ldr	r5, [r1, #20]
 8008848:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800884c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800884e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008850:	684a      	ldr	r2, [r1, #4]
 8008852:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008854:	6203      	str	r3, [r0, #32]
}
 8008856:	bd30      	pop	{r4, r5, pc}
 8008858:	40010000 	.word	0x40010000

0800885c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800885c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008860:	2b01      	cmp	r3, #1
 8008862:	d13b      	bne.n	80088dc <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8008864:	2302      	movs	r3, #2
 8008866:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800886a:	6803      	ldr	r3, [r0, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008874:	4a1a      	ldr	r2, [pc, #104]	; (80088e0 <HAL_TIM_Base_Start_IT+0x84>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d022      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 800887a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887e:	d01f      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 8008880:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008884:	4293      	cmp	r3, r2
 8008886:	d01b      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 8008888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800888c:	4293      	cmp	r3, r2
 800888e:	d017      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 8008890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008894:	4293      	cmp	r3, r2
 8008896:	d013      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 8008898:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800889c:	4293      	cmp	r3, r2
 800889e:	d00f      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 80088a0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00b      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 80088a8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 80088b0:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x64>
 80088b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088bc:	4293      	cmp	r3, r2
 80088be:	d107      	bne.n	80088d0 <HAL_TIM_Base_Start_IT+0x74>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088c0:	6899      	ldr	r1, [r3, #8]
 80088c2:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <HAL_TIM_Base_Start_IT+0x88>)
 80088c4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c6:	2a06      	cmp	r2, #6
 80088c8:	d006      	beq.n	80088d8 <HAL_TIM_Base_Start_IT+0x7c>
 80088ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80088ce:	d003      	beq.n	80088d8 <HAL_TIM_Base_Start_IT+0x7c>
    __HAL_TIM_ENABLE(htim);
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80088d8:	2000      	movs	r0, #0
}
 80088da:	4770      	bx	lr
    return HAL_ERROR;
 80088dc:	2001      	movs	r0, #1
 80088de:	4770      	bx	lr
 80088e0:	40010000 	.word	0x40010000
 80088e4:	00010007 	.word	0x00010007

080088e8 <HAL_TIM_OC_DelayElapsedCallback>:
 80088e8:	4770      	bx	lr

080088ea <HAL_TIM_IC_CaptureCallback>:
 80088ea:	4770      	bx	lr

080088ec <HAL_TIM_PWM_PulseFinishedCallback>:
 80088ec:	4770      	bx	lr

080088ee <HAL_TIM_TriggerCallback>:
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088f0:	6803      	ldr	r3, [r0, #0]
 80088f2:	691a      	ldr	r2, [r3, #16]
 80088f4:	0791      	lsls	r1, r2, #30
{
 80088f6:	b510      	push	{r4, lr}
 80088f8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088fa:	d50f      	bpl.n	800891c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	0792      	lsls	r2, r2, #30
 8008900:	d50c      	bpl.n	800891c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008902:	f06f 0202 	mvn.w	r2, #2
 8008906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008908:	2201      	movs	r2, #1
 800890a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	0799      	lsls	r1, r3, #30
 8008910:	f000 8085 	beq.w	8008a1e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008914:	f7ff ffe9 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008918:	2300      	movs	r3, #0
 800891a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	0752      	lsls	r2, r2, #29
 8008922:	d510      	bpl.n	8008946 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	0750      	lsls	r0, r2, #29
 8008928:	d50d      	bpl.n	8008946 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800892a:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800892e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008932:	2202      	movs	r2, #2
 8008934:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	f413 7f40 	tst.w	r3, #768	; 0x300
 800893c:	d075      	beq.n	8008a2a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800893e:	f7ff ffd4 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008942:	2300      	movs	r3, #0
 8008944:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	691a      	ldr	r2, [r3, #16]
 800894a:	0711      	lsls	r1, r2, #28
 800894c:	d50f      	bpl.n	800896e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	0712      	lsls	r2, r2, #28
 8008952:	d50c      	bpl.n	800896e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008954:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8008958:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800895a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800895c:	2204      	movs	r2, #4
 800895e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	079b      	lsls	r3, r3, #30
 8008964:	d067      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008966:	f7ff ffc0 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896a:	2300      	movs	r3, #0
 800896c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	06d0      	lsls	r0, r2, #27
 8008974:	d510      	bpl.n	8008998 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	06d1      	lsls	r1, r2, #27
 800897a:	d50d      	bpl.n	8008998 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800897c:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8008980:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008984:	2208      	movs	r2, #8
 8008986:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800898e:	d058      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8008990:	f7ff ffab 	bl	80088ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008994:	2300      	movs	r3, #0
 8008996:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	07d2      	lsls	r2, r2, #31
 800899e:	d508      	bpl.n	80089b2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	07d0      	lsls	r0, r2, #31
 80089a4:	d505      	bpl.n	80089b2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089a6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80089aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80089ae:	f7f8 fa91 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	0611      	lsls	r1, r2, #24
 80089b8:	d508      	bpl.n	80089cc <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	0612      	lsls	r2, r2, #24
 80089be:	d505      	bpl.n	80089cc <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80089c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80089c8:	f000 fb29 	bl	800901e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	691a      	ldr	r2, [r3, #16]
 80089d0:	05d0      	lsls	r0, r2, #23
 80089d2:	d508      	bpl.n	80089e6 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	0611      	lsls	r1, r2, #24
 80089d8:	d505      	bpl.n	80089e6 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089da:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80089de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80089e2:	f000 fb1d 	bl	8009020 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	0652      	lsls	r2, r2, #25
 80089ec:	d508      	bpl.n	8008a00 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	0650      	lsls	r0, r2, #25
 80089f2:	d505      	bpl.n	8008a00 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80089f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80089fc:	f7ff ff77 	bl	80088ee <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	0691      	lsls	r1, r2, #26
 8008a06:	d522      	bpl.n	8008a4e <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	0692      	lsls	r2, r2, #26
 8008a0c:	d51f      	bpl.n	8008a4e <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a0e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008a12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a14:	611a      	str	r2, [r3, #16]
}
 8008a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008a1a:	f000 baff 	b.w	800901c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1e:	f7ff ff63 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff ff62 	bl	80088ec <HAL_TIM_PWM_PulseFinishedCallback>
 8008a28:	e776      	b.n	8008918 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a2a:	f7ff ff5d 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7ff ff5c 	bl	80088ec <HAL_TIM_PWM_PulseFinishedCallback>
 8008a34:	e785      	b.n	8008942 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	f7ff ff57 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff ff56 	bl	80088ec <HAL_TIM_PWM_PulseFinishedCallback>
 8008a40:	e793      	b.n	800896a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a42:	f7ff ff51 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7ff ff50 	bl	80088ec <HAL_TIM_PWM_PulseFinishedCallback>
 8008a4c:	e7a2      	b.n	8008994 <HAL_TIM_IRQHandler+0xa4>
}
 8008a4e:	bd10      	pop	{r4, pc}

08008a50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a50:	4a34      	ldr	r2, [pc, #208]	; (8008b24 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8008a52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a54:	4290      	cmp	r0, r2
 8008a56:	d012      	beq.n	8008a7e <TIM_Base_SetConfig+0x2e>
 8008a58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a5c:	d00f      	beq.n	8008a7e <TIM_Base_SetConfig+0x2e>
 8008a5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008a62:	4290      	cmp	r0, r2
 8008a64:	d00b      	beq.n	8008a7e <TIM_Base_SetConfig+0x2e>
 8008a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a6a:	4290      	cmp	r0, r2
 8008a6c:	d007      	beq.n	8008a7e <TIM_Base_SetConfig+0x2e>
 8008a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a72:	4290      	cmp	r0, r2
 8008a74:	d003      	beq.n	8008a7e <TIM_Base_SetConfig+0x2e>
 8008a76:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008a7a:	4290      	cmp	r0, r2
 8008a7c:	d119      	bne.n	8008ab2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8008a7e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a84:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a86:	4a27      	ldr	r2, [pc, #156]	; (8008b24 <TIM_Base_SetConfig+0xd4>)
 8008a88:	4290      	cmp	r0, r2
 8008a8a:	d025      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008a8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a90:	d022      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008a92:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008a96:	4290      	cmp	r0, r2
 8008a98:	d01e      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a9e:	4290      	cmp	r0, r2
 8008aa0:	d01a      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008aa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aa6:	4290      	cmp	r0, r2
 8008aa8:	d016      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008aaa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008aae:	4290      	cmp	r0, r2
 8008ab0:	d012      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008ab2:	4a1d      	ldr	r2, [pc, #116]	; (8008b28 <TIM_Base_SetConfig+0xd8>)
 8008ab4:	4290      	cmp	r0, r2
 8008ab6:	d00f      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008ab8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008abc:	4290      	cmp	r0, r2
 8008abe:	d00b      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008ac0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ac4:	4290      	cmp	r0, r2
 8008ac6:	d007      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008ac8:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8008acc:	4290      	cmp	r0, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_Base_SetConfig+0x88>
 8008ad0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ad4:	4290      	cmp	r0, r2
 8008ad6:	d103      	bne.n	8008ae0 <TIM_Base_SetConfig+0x90>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008adc:	68ca      	ldr	r2, [r1, #12]
 8008ade:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ae0:	694a      	ldr	r2, [r1, #20]
 8008ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ae8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aea:	688b      	ldr	r3, [r1, #8]
 8008aec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008aee:	680b      	ldr	r3, [r1, #0]
 8008af0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008af2:	4b0c      	ldr	r3, [pc, #48]	; (8008b24 <TIM_Base_SetConfig+0xd4>)
 8008af4:	4298      	cmp	r0, r3
 8008af6:	d00f      	beq.n	8008b18 <TIM_Base_SetConfig+0xc8>
 8008af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008afc:	4298      	cmp	r0, r3
 8008afe:	d00b      	beq.n	8008b18 <TIM_Base_SetConfig+0xc8>
 8008b00:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8008b04:	4298      	cmp	r0, r3
 8008b06:	d007      	beq.n	8008b18 <TIM_Base_SetConfig+0xc8>
 8008b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b0c:	4298      	cmp	r0, r3
 8008b0e:	d003      	beq.n	8008b18 <TIM_Base_SetConfig+0xc8>
 8008b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b14:	4298      	cmp	r0, r3
 8008b16:	d101      	bne.n	8008b1c <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8008b18:	690b      	ldr	r3, [r1, #16]
 8008b1a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	6143      	str	r3, [r0, #20]
}
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40010000 	.word	0x40010000
 8008b28:	40014000 	.word	0x40014000

08008b2c <HAL_TIM_Base_Init>:
{
 8008b2c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008b2e:	4604      	mov	r4, r0
 8008b30:	b350      	cbz	r0, 8008b88 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b3a:	b91b      	cbnz	r3, 8008b44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008b3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008b40:	f7f8 fd9c 	bl	800167c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008b44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b46:	6820      	ldr	r0, [r4, #0]
 8008b48:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8008b4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b4e:	f7ff ff7f 	bl	8008a50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b52:	2301      	movs	r3, #1
  return HAL_OK;
 8008b54:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b56:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008b5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008b62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008b66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008b7e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008b82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008b86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b88:	2001      	movs	r0, #1
 8008b8a:	e7fc      	b.n	8008b86 <HAL_TIM_Base_Init+0x5a>

08008b8c <HAL_TIM_PWM_Init>:
{
 8008b8c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008b8e:	4604      	mov	r4, r0
 8008b90:	b350      	cbz	r0, 8008be8 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b9a:	b91b      	cbnz	r3, 8008ba4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008b9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008ba0:	f7f8 fd2e 	bl	8001600 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8008baa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bae:	f7ff ff4f 	bl	8008a50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb2:	2301      	movs	r3, #1
  return HAL_OK;
 8008bb4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008bbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008bc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008bc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008bca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bda:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008bde:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008be2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008be6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008be8:	2001      	movs	r0, #1
 8008bea:	e7fc      	b.n	8008be6 <HAL_TIM_PWM_Init+0x5a>

08008bec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bec:	6a03      	ldr	r3, [r0, #32]
 8008bee:	f023 0310 	bic.w	r3, r3, #16
{
 8008bf2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008bf6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008bf8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008bfa:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8008bfc:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c02:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008c06:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c0e:	688d      	ldr	r5, [r1, #8]
 8008c10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c14:	4d16      	ldr	r5, [pc, #88]	; (8008c70 <TIM_OC2_SetConfig+0x84>)
 8008c16:	42a8      	cmp	r0, r5
 8008c18:	d003      	beq.n	8008c22 <TIM_OC2_SetConfig+0x36>
 8008c1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c1e:	42a8      	cmp	r0, r5
 8008c20:	d10d      	bne.n	8008c3e <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c22:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2c:	4d10      	ldr	r5, [pc, #64]	; (8008c70 <TIM_OC2_SetConfig+0x84>)
 8008c2e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c34:	d00e      	beq.n	8008c54 <TIM_OC2_SetConfig+0x68>
 8008c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c3a:	42a8      	cmp	r0, r5
 8008c3c:	d00a      	beq.n	8008c54 <TIM_OC2_SetConfig+0x68>
 8008c3e:	4d0d      	ldr	r5, [pc, #52]	; (8008c74 <TIM_OC2_SetConfig+0x88>)
 8008c40:	42a8      	cmp	r0, r5
 8008c42:	d007      	beq.n	8008c54 <TIM_OC2_SetConfig+0x68>
 8008c44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c48:	42a8      	cmp	r0, r5
 8008c4a:	d003      	beq.n	8008c54 <TIM_OC2_SetConfig+0x68>
 8008c4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c50:	42a8      	cmp	r0, r5
 8008c52:	d106      	bne.n	8008c62 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c54:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c58:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008c5c:	4334      	orrs	r4, r6
 8008c5e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8008c62:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008c64:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008c66:	684a      	ldr	r2, [r1, #4]
 8008c68:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008c6a:	6203      	str	r3, [r0, #32]
}
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	bf00      	nop
 8008c70:	40010000 	.word	0x40010000
 8008c74:	40014000 	.word	0x40014000

08008c78 <HAL_TIM_PWM_ConfigChannel>:
{
 8008c78:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8008c7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8008c7e:	4605      	mov	r5, r0
 8008c80:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d07a      	beq.n	8008d7c <HAL_TIM_PWM_ConfigChannel+0x104>
 8008c86:	2201      	movs	r2, #1
  switch (Channel)
 8008c88:	2c0c      	cmp	r4, #12
  __HAL_LOCK(htim);
 8008c8a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 8008c8e:	d053      	beq.n	8008d38 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8008c90:	d809      	bhi.n	8008ca6 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8008c92:	2c04      	cmp	r4, #4
 8008c94:	d02e      	beq.n	8008cf4 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8008c96:	2c08      	cmp	r4, #8
 8008c98:	d03d      	beq.n	8008d16 <HAL_TIM_PWM_ConfigChannel+0x9e>
 8008c9a:	b1cc      	cbz	r4, 8008cd0 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_UNLOCK(htim);
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8008ca6:	2c10      	cmp	r4, #16
 8008ca8:	d057      	beq.n	8008d5a <HAL_TIM_PWM_ConfigChannel+0xe2>
 8008caa:	2c14      	cmp	r4, #20
 8008cac:	d1f6      	bne.n	8008c9c <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	f7ff fda0 	bl	80087f4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008cb4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cb6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008cce:	e053      	b.n	8008d78 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cd0:	6800      	ldr	r0, [r0, #0]
 8008cd2:	f7ff fc97 	bl	8008604 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cd6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cd8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cda:	699a      	ldr	r2, [r3, #24]
 8008cdc:	f042 0208 	orr.w	r2, r2, #8
 8008ce0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	f022 0204 	bic.w	r2, r2, #4
 8008ce8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cea:	699a      	ldr	r2, [r3, #24]
 8008cec:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cee:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf0:	2200      	movs	r2, #0
      break;
 8008cf2:	e7d3      	b.n	8008c9c <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cf4:	6800      	ldr	r0, [r0, #0]
 8008cf6:	f7ff ff79 	bl	8008bec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cfa:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cfc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cfe:	699a      	ldr	r2, [r3, #24]
 8008d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d06:	699a      	ldr	r2, [r3, #24]
 8008d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008d14:	e7eb      	b.n	8008cee <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	f7ff fcc0 	bl	800869c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d1c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d1e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d20:	69da      	ldr	r2, [r3, #28]
 8008d22:	f042 0208 	orr.w	r2, r2, #8
 8008d26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d28:	69da      	ldr	r2, [r3, #28]
 8008d2a:	f022 0204 	bic.w	r2, r2, #4
 8008d2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d30:	69da      	ldr	r2, [r3, #28]
 8008d32:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d34:	61da      	str	r2, [r3, #28]
      break;
 8008d36:	e7db      	b.n	8008cf0 <HAL_TIM_PWM_ConfigChannel+0x78>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d38:	6800      	ldr	r0, [r0, #0]
 8008d3a:	f7ff fcf3 	bl	8008724 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d3e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d40:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d42:	69da      	ldr	r2, [r3, #28]
 8008d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d4a:	69da      	ldr	r2, [r3, #28]
 8008d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d52:	69da      	ldr	r2, [r3, #28]
 8008d54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008d58:	e7ec      	b.n	8008d34 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	f7ff fd16 	bl	800878c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d60:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d62:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d66:	f042 0208 	orr.w	r2, r2, #8
 8008d6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d6e:	f022 0204 	bic.w	r2, r2, #4
 8008d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d76:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d78:	655a      	str	r2, [r3, #84]	; 0x54
 8008d7a:	e7b9      	b.n	8008cf0 <HAL_TIM_PWM_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	e790      	b.n	8008ca2 <HAL_TIM_PWM_ConfigChannel+0x2a>

08008d80 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d80:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d84:	6a03      	ldr	r3, [r0, #32]
{
 8008d86:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d88:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d8a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d8c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8008d8e:	ea23 0304 	bic.w	r3, r3, r4
 8008d92:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d94:	6a03      	ldr	r3, [r0, #32]
 8008d96:	431a      	orrs	r2, r3
 8008d98:	6202      	str	r2, [r0, #32]
}
 8008d9a:	bd10      	pop	{r4, pc}

08008d9c <HAL_TIM_OC_Start>:
{
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008da0:	b929      	cbnz	r1, 8008dae <HAL_TIM_OC_Start+0x12>
 8008da2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d031      	beq.n	8008e0e <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8008daa:	2001      	movs	r0, #1
}
 8008dac:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dae:	2904      	cmp	r1, #4
 8008db0:	d107      	bne.n	8008dc2 <HAL_TIM_OC_Start+0x26>
 8008db2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d1f7      	bne.n	8008daa <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dba:	2302      	movs	r3, #2
 8008dbc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008dc0:	e028      	b.n	8008e14 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dc2:	2908      	cmp	r1, #8
 8008dc4:	d107      	bne.n	8008dd6 <HAL_TIM_OC_Start+0x3a>
 8008dc6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d1ed      	bne.n	8008daa <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dce:	2302      	movs	r3, #2
 8008dd0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008dd4:	e01e      	b.n	8008e14 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dd6:	290c      	cmp	r1, #12
 8008dd8:	d107      	bne.n	8008dea <HAL_TIM_OC_Start+0x4e>
 8008dda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d1e3      	bne.n	8008daa <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de2:	2302      	movs	r3, #2
 8008de4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008de8:	e014      	b.n	8008e14 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dea:	2910      	cmp	r1, #16
 8008dec:	d107      	bne.n	8008dfe <HAL_TIM_OC_Start+0x62>
 8008dee:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d1d9      	bne.n	8008daa <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008df6:	2302      	movs	r3, #2
 8008df8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008dfc:	e00a      	b.n	8008e14 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dfe:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d1d1      	bne.n	8008daa <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e06:	2302      	movs	r3, #2
 8008e08:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008e0c:	e002      	b.n	8008e14 <HAL_TIM_OC_Start+0x78>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e14:	2201      	movs	r2, #1
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	f7ff ffb2 	bl	8008d80 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	4a26      	ldr	r2, [pc, #152]	; (8008eb8 <HAL_TIM_OC_Start+0x11c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d019      	beq.n	8008e58 <HAL_TIM_OC_Start+0xbc>
 8008e24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d015      	beq.n	8008e58 <HAL_TIM_OC_Start+0xbc>
 8008e2c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d011      	beq.n	8008e58 <HAL_TIM_OC_Start+0xbc>
 8008e34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00d      	beq.n	8008e58 <HAL_TIM_OC_Start+0xbc>
 8008e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d009      	beq.n	8008e58 <HAL_TIM_OC_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e48:	d10e      	bne.n	8008e68 <HAL_TIM_OC_Start+0xcc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e4a:	6899      	ldr	r1, [r3, #8]
 8008e4c:	4a1b      	ldr	r2, [pc, #108]	; (8008ebc <HAL_TIM_OC_Start+0x120>)
 8008e4e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e50:	2a06      	cmp	r2, #6
 8008e52:	d12d      	bne.n	8008eb0 <HAL_TIM_OC_Start+0x114>
  return HAL_OK;
 8008e54:	2000      	movs	r0, #0
 8008e56:	e7a9      	b.n	8008dac <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8008e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e60:	4a15      	ldr	r2, [pc, #84]	; (8008eb8 <HAL_TIM_OC_Start+0x11c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d1ee      	bne.n	8008e44 <HAL_TIM_OC_Start+0xa8>
 8008e66:	e7f0      	b.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e68:	4a15      	ldr	r2, [pc, #84]	; (8008ec0 <HAL_TIM_OC_Start+0x124>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d0ed      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d0e9      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d0e5      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e7e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d0e1      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e86:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d0dd      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e8e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d0d9      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e96:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d0d5      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
 8008e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d0d1      	beq.n	8008e4a <HAL_TIM_OC_Start+0xae>
    __HAL_TIM_ENABLE(htim);
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	f042 0201 	orr.w	r2, r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e7d1      	b.n	8008e54 <HAL_TIM_OC_Start+0xb8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008eb4:	d1f7      	bne.n	8008ea6 <HAL_TIM_OC_Start+0x10a>
 8008eb6:	e7cd      	b.n	8008e54 <HAL_TIM_OC_Start+0xb8>
 8008eb8:	40010000 	.word	0x40010000
 8008ebc:	00010007 	.word	0x00010007
 8008ec0:	40000400 	.word	0x40000400

08008ec4 <HAL_TIM_PWM_Start>:
 8008ec4:	f7ff bf6a 	b.w	8008d9c <HAL_TIM_OC_Start>

08008ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ec8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	f04f 0302 	mov.w	r3, #2
 8008ed4:	d045      	beq.n	8008f62 <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008eda:	4d23      	ldr	r5, [pc, #140]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 8008edc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ede:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8008ee0:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008ee2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ee4:	d003      	beq.n	8008eee <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8008ee6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008eea:	42ab      	cmp	r3, r5
 8008eec:	d103      	bne.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008eee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ef2:	684d      	ldr	r5, [r1, #4]
 8008ef4:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ef6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ef8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008efc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008efe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f00:	4a19      	ldr	r2, [pc, #100]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d022      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0a:	d01f      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f0c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d01b      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d017      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d013      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f24:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00f      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f2c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f34:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f3c:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d104      	bne.n	8008f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f4c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f4e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f52:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8008f62:	4618      	mov	r0, r3

  return HAL_OK;
}
 8008f64:	bd30      	pop	{r4, r5, pc}
 8008f66:	bf00      	nop
 8008f68:	40010000 	.word	0x40010000

08008f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f6c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d04c      	beq.n	8009010 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f76:	68cb      	ldr	r3, [r1, #12]
 8008f78:	688a      	ldr	r2, [r1, #8]
 8008f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f7e:	4c25      	ldr	r4, [pc, #148]	; (8009014 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f82:	684a      	ldr	r2, [r1, #4]
 8008f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f8a:	680a      	ldr	r2, [r1, #0]
 8008f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f92:	690a      	ldr	r2, [r1, #16]
 8008f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f9a:	694a      	ldr	r2, [r1, #20]
 8008f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fa0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fa2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fa8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008faa:	698a      	ldr	r2, [r1, #24]
 8008fac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8008fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008fb4:	6802      	ldr	r2, [r0, #0]
 8008fb6:	42a2      	cmp	r2, r4
 8008fb8:	d002      	beq.n	8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8008fba:	4d17      	ldr	r5, [pc, #92]	; (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008fbc:	42aa      	cmp	r2, r5
 8008fbe:	d121      	bne.n	8009004 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fc4:	69cd      	ldr	r5, [r1, #28]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fc6:	42a2      	cmp	r2, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fc8:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fcc:	d002      	beq.n	8008fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8008fce:	4c12      	ldr	r4, [pc, #72]	; (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008fd0:	42a2      	cmp	r2, r4
 8008fd2:	d117      	bne.n	8009004 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fd4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008fd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fda:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fde:	6a0c      	ldr	r4, [r1, #32]
 8008fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fe4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fe6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008fe8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008fec:	4323      	orrs	r3, r4
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008fee:	4c09      	ldr	r4, [pc, #36]	; (8009014 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008ff0:	42a2      	cmp	r2, r4
 8008ff2:	d003      	beq.n	8008ffc <HAL_TIMEx_ConfigBreakDeadTime+0x90>
 8008ff4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ff8:	42a2      	cmp	r2, r4
 8008ffa:	d103      	bne.n	8009004 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ffc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009000:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009002:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009004:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009006:	2300      	movs	r3, #0
 8009008:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800900c:	4618      	mov	r0, r3
}
 800900e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8009010:	2002      	movs	r0, #2
 8009012:	e7fc      	b.n	800900e <HAL_TIMEx_ConfigBreakDeadTime+0xa2>
 8009014:	40010000 	.word	0x40010000
 8009018:	40010400 	.word	0x40010400

0800901c <HAL_TIMEx_CommutCallback>:
 800901c:	4770      	bx	lr

0800901e <HAL_TIMEx_BreakCallback>:
 800901e:	4770      	bx	lr

08009020 <HAL_TIMEx_Break2Callback>:
 8009020:	4770      	bx	lr
	...

08009024 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009024:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <SysTick_Handler+0x18>)
 8009028:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800902a:	f001 fe47 	bl	800acbc <xTaskGetSchedulerState>
 800902e:	2801      	cmp	r0, #1
 8009030:	d003      	beq.n	800903a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8009032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8009036:	f000 bbdd 	b.w	80097f4 <xPortSysTickHandler>
}
 800903a:	bd08      	pop	{r3, pc}
 800903c:	e000e010 	.word	0xe000e010

08009040 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009040:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009044:	b92b      	cbnz	r3, 8009052 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <osKernelInitialize+0x20>)
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	b928      	cbnz	r0, 8009058 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800904c:	2201      	movs	r2, #1
 800904e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009050:	4770      	bx	lr
    stat = osErrorISR;
 8009052:	f06f 0005 	mvn.w	r0, #5
 8009056:	4770      	bx	lr
    } else {
      stat = osError;
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	240024fc 	.word	0x240024fc

08009064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009064:	b510      	push	{r4, lr}
 8009066:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800906a:	b95c      	cbnz	r4, 8009084 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800906c:	4b08      	ldr	r3, [pc, #32]	; (8009090 <osKernelStart+0x2c>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	2a01      	cmp	r2, #1
 8009072:	d10a      	bne.n	800908a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009074:	4a07      	ldr	r2, [pc, #28]	; (8009094 <osKernelStart+0x30>)
 8009076:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009078:	2202      	movs	r2, #2
 800907a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800907c:	f001 fcc4 	bl	800aa08 <vTaskStartScheduler>
      stat = osOK;
 8009080:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009082:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009084:	f06f 0005 	mvn.w	r0, #5
 8009088:	e7fb      	b.n	8009082 <osKernelStart+0x1e>
      stat = osError;
 800908a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800908e:	e7f8      	b.n	8009082 <osKernelStart+0x1e>
 8009090:	240024fc 	.word	0x240024fc
 8009094:	e000ed00 	.word	0xe000ed00

08009098 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800909a:	4614      	mov	r4, r2
 800909c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800909e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80090a0:	460b      	mov	r3, r1
  hTask = NULL;
 80090a2:	9205      	str	r2, [sp, #20]
 80090a4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80090a8:	b9d2      	cbnz	r2, 80090e0 <osThreadNew+0x48>
 80090aa:	b1c8      	cbz	r0, 80090e0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	d02f      	beq.n	8009110 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80090b0:	69a5      	ldr	r5, [r4, #24]
 80090b2:	2d00      	cmp	r5, #0
 80090b4:	bf08      	it	eq
 80090b6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090b8:	1e69      	subs	r1, r5, #1
 80090ba:	46ac      	mov	ip, r5
 80090bc:	2937      	cmp	r1, #55	; 0x37
 80090be:	d82b      	bhi.n	8009118 <osThreadNew+0x80>
 80090c0:	6861      	ldr	r1, [r4, #4]
 80090c2:	07c9      	lsls	r1, r1, #31
 80090c4:	d428      	bmi.n	8009118 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80090c6:	6966      	ldr	r6, [r4, #20]
 80090c8:	b16e      	cbz	r6, 80090e6 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090ca:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80090cc:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090ce:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80090d2:	b157      	cbz	r7, 80090ea <osThreadNew+0x52>
 80090d4:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80090d8:	d902      	bls.n	80090e0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090da:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090dc:	b104      	cbz	r4, 80090e0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090de:	b9ee      	cbnz	r6, 800911c <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090e0:	9805      	ldr	r0, [sp, #20]
}
 80090e2:	b007      	add	sp, #28
 80090e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80090e6:	2280      	movs	r2, #128	; 0x80
 80090e8:	e7f0      	b.n	80090cc <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090ea:	f1be 0f00 	cmp.w	lr, #0
 80090ee:	d1f7      	bne.n	80090e0 <osThreadNew+0x48>
      if (mem == 0) {
 80090f0:	6924      	ldr	r4, [r4, #16]
 80090f2:	2c00      	cmp	r4, #0
 80090f4:	d1f4      	bne.n	80090e0 <osThreadNew+0x48>
 80090f6:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090f8:	a905      	add	r1, sp, #20
 80090fa:	b292      	uxth	r2, r2
 80090fc:	e9cd c100 	strd	ip, r1, [sp]
 8009100:	4621      	mov	r1, r4
 8009102:	f001 fafb 	bl	800a6fc <xTaskCreate>
 8009106:	2801      	cmp	r0, #1
            hTask = NULL;
 8009108:	bf1c      	itt	ne
 800910a:	2300      	movne	r3, #0
 800910c:	9305      	strne	r3, [sp, #20]
 800910e:	e7e7      	b.n	80090e0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 8009110:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8009114:	2280      	movs	r2, #128	; 0x80
 8009116:	e7ef      	b.n	80090f8 <osThreadNew+0x60>
        return (NULL);
 8009118:	4610      	mov	r0, r2
 800911a:	e7e2      	b.n	80090e2 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800911c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8009120:	9500      	str	r5, [sp, #0]
 8009122:	f001 fab3 	bl	800a68c <xTaskCreateStatic>
 8009126:	9005      	str	r0, [sp, #20]
 8009128:	e7da      	b.n	80090e0 <osThreadNew+0x48>

0800912a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800912a:	b510      	push	{r4, lr}
 800912c:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009130:	b924      	cbnz	r4, 800913c <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009132:	b110      	cbz	r0, 800913a <osDelay+0x10>
      vTaskDelay(ticks);
 8009134:	f001 fc28 	bl	800a988 <vTaskDelay>
    stat = osOK;
 8009138:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800913a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800913c:	f06f 0005 	mvn.w	r0, #5
 8009140:	e7fb      	b.n	800913a <osDelay+0x10>

08009142 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009144:	4604      	mov	r4, r0
 8009146:	460e      	mov	r6, r1
 8009148:	4615      	mov	r5, r2
 800914a:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800914e:	b11a      	cbz	r2, 8009158 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8009150:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8009152:	4620      	mov	r0, r4
 8009154:	b003      	add	sp, #12
 8009156:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009158:	2800      	cmp	r0, #0
 800915a:	d0f9      	beq.n	8009150 <osSemaphoreNew+0xe>
 800915c:	4288      	cmp	r0, r1
 800915e:	d3f7      	bcc.n	8009150 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8009160:	b1e5      	cbz	r5, 800919c <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009162:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8009166:	b1bb      	cbz	r3, 8009198 <osSemaphoreNew+0x56>
 8009168:	2f4f      	cmp	r7, #79	; 0x4f
 800916a:	d9f1      	bls.n	8009150 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800916c:	2801      	cmp	r0, #1
 800916e:	d12a      	bne.n	80091c6 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009170:	2103      	movs	r1, #3
 8009172:	9100      	str	r1, [sp, #0]
 8009174:	4611      	mov	r1, r2
 8009176:	f000 fceb 	bl	8009b50 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800917a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800917c:	2800      	cmp	r0, #0
 800917e:	d0e7      	beq.n	8009150 <osSemaphoreNew+0xe>
 8009180:	b1de      	cbz	r6, 80091ba <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009182:	2300      	movs	r3, #0
 8009184:	461a      	mov	r2, r3
 8009186:	4619      	mov	r1, r3
 8009188:	f000 fd98 	bl	8009cbc <xQueueGenericSend>
 800918c:	2801      	cmp	r0, #1
 800918e:	d014      	beq.n	80091ba <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8009190:	4620      	mov	r0, r4
 8009192:	f001 f8d9 	bl	800a348 <vQueueDelete>
 8009196:	e7db      	b.n	8009150 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009198:	2f00      	cmp	r7, #0
 800919a:	d1d9      	bne.n	8009150 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800919c:	2c01      	cmp	r4, #1
 800919e:	d105      	bne.n	80091ac <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 80091a0:	2203      	movs	r2, #3
 80091a2:	2100      	movs	r1, #0
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fd21 	bl	8009bec <xQueueGenericCreate>
 80091aa:	e7e6      	b.n	800917a <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80091ac:	4620      	mov	r0, r4
 80091ae:	4631      	mov	r1, r6
 80091b0:	f000 fd65 	bl	8009c7e <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80091b4:	4604      	mov	r4, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0ca      	beq.n	8009150 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 80091ba:	b955      	cbnz	r5, 80091d2 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 80091bc:	4629      	mov	r1, r5
 80091be:	4620      	mov	r0, r4
 80091c0:	f001 f898 	bl	800a2f4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80091c4:	e7c5      	b.n	8009152 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80091c6:	461a      	mov	r2, r3
 80091c8:	f000 fd37 	bl	8009c3a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80091cc:	4604      	mov	r4, r0
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d0be      	beq.n	8009150 <osSemaphoreNew+0xe>
          name = attr->name;
 80091d2:	682d      	ldr	r5, [r5, #0]
 80091d4:	e7f2      	b.n	80091bc <osSemaphoreNew+0x7a>
	...

080091d8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80091d8:	b513      	push	{r0, r1, r4, lr}
 80091da:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80091dc:	b1f8      	cbz	r0, 800921e <osSemaphoreAcquire+0x46>
 80091de:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80091e2:	b1a3      	cbz	r3, 800920e <osSemaphoreAcquire+0x36>
    if (timeout != 0U) {
 80091e4:	b9d9      	cbnz	r1, 800921e <osSemaphoreAcquire+0x46>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80091e6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80091e8:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80091ea:	f001 f833 	bl	800a254 <xQueueReceiveFromISR>
 80091ee:	2801      	cmp	r0, #1
 80091f0:	d112      	bne.n	8009218 <osSemaphoreAcquire+0x40>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80091f2:	9b01      	ldr	r3, [sp, #4]
 80091f4:	b913      	cbnz	r3, 80091fc <osSemaphoreAcquire+0x24>
  stat = osOK;
 80091f6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80091f8:	b002      	add	sp, #8
 80091fa:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <osSemaphoreAcquire+0x54>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	e7f3      	b.n	80091f6 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800920e:	f000 ff5d 	bl	800a0cc <xQueueSemaphoreTake>
 8009212:	2801      	cmp	r0, #1
 8009214:	d0ef      	beq.n	80091f6 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 8009216:	b92c      	cbnz	r4, 8009224 <osSemaphoreAcquire+0x4c>
        stat = osErrorResource;
 8009218:	f06f 0002 	mvn.w	r0, #2
 800921c:	e7ec      	b.n	80091f8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800921e:	f06f 0003 	mvn.w	r0, #3
 8009222:	e7e9      	b.n	80091f8 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 8009224:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009228:	e7e6      	b.n	80091f8 <osSemaphoreAcquire+0x20>
 800922a:	bf00      	nop
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009230:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009232:	b300      	cbz	r0, 8009276 <osSemaphoreRelease+0x46>
 8009234:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009238:	b1a3      	cbz	r3, 8009264 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 800923a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800923c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800923e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009240:	f000 fe50 	bl	8009ee4 <xQueueGiveFromISR>
 8009244:	2801      	cmp	r0, #1
 8009246:	d113      	bne.n	8009270 <osSemaphoreRelease+0x40>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8009248:	9b01      	ldr	r3, [sp, #4]
 800924a:	b913      	cbnz	r3, 8009252 <osSemaphoreRelease+0x22>
  stat = osOK;
 800924c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800924e:	b002      	add	sp, #8
 8009250:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8009252:	4b0a      	ldr	r3, [pc, #40]	; (800927c <osSemaphoreRelease+0x4c>)
 8009254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	e7f3      	b.n	800924c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009264:	461a      	mov	r2, r3
 8009266:	4619      	mov	r1, r3
 8009268:	f000 fd28 	bl	8009cbc <xQueueGenericSend>
 800926c:	2801      	cmp	r0, #1
 800926e:	d0ed      	beq.n	800924c <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8009270:	f06f 0002 	mvn.w	r0, #2
 8009274:	e7eb      	b.n	800924e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009276:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800927a:	e7e8      	b.n	800924e <osSemaphoreRelease+0x1e>
 800927c:	e000ed04 	.word	0xe000ed04

08009280 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009282:	4606      	mov	r6, r0
 8009284:	460d      	mov	r5, r1
 8009286:	4614      	mov	r4, r2
 8009288:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800928c:	b11f      	cbz	r7, 8009296 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800928e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009290:	4628      	mov	r0, r5
 8009292:	b003      	add	sp, #12
 8009294:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009296:	2800      	cmp	r0, #0
 8009298:	d0f9      	beq.n	800928e <osMessageQueueNew+0xe>
 800929a:	2900      	cmp	r1, #0
 800929c:	d0f7      	beq.n	800928e <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800929e:	b1da      	cbz	r2, 80092d8 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092a0:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80092a4:	b183      	cbz	r3, 80092c8 <osMessageQueueNew+0x48>
 80092a6:	2a4f      	cmp	r2, #79	; 0x4f
 80092a8:	d9f1      	bls.n	800928e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092aa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d0ee      	beq.n	800928e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092b0:	4345      	muls	r5, r0
 80092b2:	6966      	ldr	r6, [r4, #20]
 80092b4:	42ae      	cmp	r6, r5
 80092b6:	d3ea      	bcc.n	800928e <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092b8:	9700      	str	r7, [sp, #0]
 80092ba:	f000 fc49 	bl	8009b50 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80092be:	4605      	mov	r5, r0
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d0e4      	beq.n	800928e <osMessageQueueNew+0xe>
        name = attr->name;
 80092c4:	6824      	ldr	r4, [r4, #0]
 80092c6:	e011      	b.n	80092ec <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d1e0      	bne.n	800928e <osMessageQueueNew+0xe>
 80092cc:	6923      	ldr	r3, [r4, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1dd      	bne.n	800928e <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092d2:	6963      	ldr	r3, [r4, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1da      	bne.n	800928e <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80092d8:	4629      	mov	r1, r5
 80092da:	2200      	movs	r2, #0
 80092dc:	4630      	mov	r0, r6
 80092de:	f000 fc85 	bl	8009bec <xQueueGenericCreate>
    if (hQueue != NULL) {
 80092e2:	4605      	mov	r5, r0
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d0d2      	beq.n	800928e <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80092e8:	2c00      	cmp	r4, #0
 80092ea:	d1eb      	bne.n	80092c4 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80092ec:	4621      	mov	r1, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	f001 f800 	bl	800a2f4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80092f4:	e7cc      	b.n	8009290 <osMessageQueueNew+0x10>
	...

080092f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80092f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092fa:	461c      	mov	r4, r3
 80092fc:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009300:	b1b6      	cbz	r6, 8009330 <osMessageQueuePut+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009302:	b308      	cbz	r0, 8009348 <osMessageQueuePut+0x50>
 8009304:	b301      	cbz	r1, 8009348 <osMessageQueuePut+0x50>
 8009306:	b9fb      	cbnz	r3, 8009348 <osMessageQueuePut+0x50>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009308:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800930a:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800930c:	f000 fd88 	bl	8009e20 <xQueueGenericSendFromISR>
 8009310:	2801      	cmp	r0, #1
 8009312:	d116      	bne.n	8009342 <osMessageQueuePut+0x4a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	b913      	cbnz	r3, 800931e <osMessageQueuePut+0x26>
  stat = osOK;
 8009318:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800931a:	b002      	add	sp, #8
 800931c:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <osMessageQueuePut+0x5c>)
 8009320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	e7f3      	b.n	8009318 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009330:	b150      	cbz	r0, 8009348 <osMessageQueuePut+0x50>
 8009332:	b149      	cbz	r1, 8009348 <osMessageQueuePut+0x50>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009334:	4633      	mov	r3, r6
 8009336:	4622      	mov	r2, r4
 8009338:	f000 fcc0 	bl	8009cbc <xQueueGenericSend>
 800933c:	2801      	cmp	r0, #1
 800933e:	d0eb      	beq.n	8009318 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8009340:	b92c      	cbnz	r4, 800934e <osMessageQueuePut+0x56>
          stat = osErrorResource;
 8009342:	f06f 0002 	mvn.w	r0, #2
 8009346:	e7e8      	b.n	800931a <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 8009348:	f06f 0003 	mvn.w	r0, #3
 800934c:	e7e5      	b.n	800931a <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800934e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009352:	e7e2      	b.n	800931a <osMessageQueuePut+0x22>
 8009354:	e000ed04 	.word	0xe000ed04

08009358 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800935a:	461c      	mov	r4, r3
 800935c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009360:	b1b3      	cbz	r3, 8009390 <osMessageQueueGet+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009362:	b300      	cbz	r0, 80093a6 <osMessageQueueGet+0x4e>
 8009364:	b1f9      	cbz	r1, 80093a6 <osMessageQueueGet+0x4e>
 8009366:	b9f4      	cbnz	r4, 80093a6 <osMessageQueueGet+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009368:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800936a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800936c:	f000 ff72 	bl	800a254 <xQueueReceiveFromISR>
 8009370:	2801      	cmp	r0, #1
 8009372:	d115      	bne.n	80093a0 <osMessageQueueGet+0x48>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	b913      	cbnz	r3, 800937e <osMessageQueueGet+0x26>
  stat = osOK;
 8009378:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800937a:	b003      	add	sp, #12
 800937c:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800937e:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <osMessageQueueGet+0x5c>)
 8009380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	e7f3      	b.n	8009378 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009390:	b148      	cbz	r0, 80093a6 <osMessageQueueGet+0x4e>
 8009392:	b141      	cbz	r1, 80093a6 <osMessageQueueGet+0x4e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009394:	4622      	mov	r2, r4
 8009396:	f000 fdf9 	bl	8009f8c <xQueueReceive>
 800939a:	2801      	cmp	r0, #1
 800939c:	d0ec      	beq.n	8009378 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800939e:	b92c      	cbnz	r4, 80093ac <osMessageQueueGet+0x54>
          stat = osErrorResource;
 80093a0:	f06f 0002 	mvn.w	r0, #2
 80093a4:	e7e9      	b.n	800937a <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 80093a6:	f06f 0003 	mvn.w	r0, #3
 80093aa:	e7e6      	b.n	800937a <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 80093ac:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80093b0:	e7e3      	b.n	800937a <osMessageQueueGet+0x22>
 80093b2:	bf00      	nop
 80093b4:	e000ed04 	.word	0xe000ed04

080093b8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093b8:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <vApplicationGetIdleTaskMemory+0x10>)
 80093ba:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093bc:	4b03      	ldr	r3, [pc, #12]	; (80093cc <vApplicationGetIdleTaskMemory+0x14>)
 80093be:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	6013      	str	r3, [r2, #0]
}
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	2400249c 	.word	0x2400249c
 80093cc:	2400229c 	.word	0x2400229c

080093d0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093d0:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <vApplicationGetTimerTaskMemory+0x10>)
 80093d2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <vApplicationGetTimerTaskMemory+0x14>)
 80093d6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093dc:	6013      	str	r3, [r2, #0]
}
 80093de:	4770      	bx	lr
 80093e0:	24002900 	.word	0x24002900
 80093e4:	24002500 	.word	0x24002500

080093e8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <prvInsertBlockIntoFreeList+0x40>)
{
 80093ea:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093ec:	461a      	mov	r2, r3
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4283      	cmp	r3, r0
 80093f2:	d3fb      	bcc.n	80093ec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093f4:	6854      	ldr	r4, [r2, #4]
 80093f6:	1911      	adds	r1, r2, r4
 80093f8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093fa:	bf01      	itttt	eq
 80093fc:	6841      	ldreq	r1, [r0, #4]
 80093fe:	4610      	moveq	r0, r2
 8009400:	1909      	addeq	r1, r1, r4
 8009402:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009404:	6844      	ldr	r4, [r0, #4]
 8009406:	1901      	adds	r1, r0, r4
 8009408:	428b      	cmp	r3, r1
 800940a:	d107      	bne.n	800941c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800940c:	4907      	ldr	r1, [pc, #28]	; (800942c <prvInsertBlockIntoFreeList+0x44>)
 800940e:	6809      	ldr	r1, [r1, #0]
 8009410:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009412:	bf1f      	itttt	ne
 8009414:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009416:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009418:	1909      	addne	r1, r1, r4
 800941a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800941c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800941e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009420:	bf18      	it	ne
 8009422:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009424:	bd10      	pop	{r4, pc}
 8009426:	bf00      	nop
 8009428:	24006578 	.word	0x24006578
 800942c:	24002960 	.word	0x24002960

08009430 <pvPortMalloc>:
{
 8009430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009434:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009436:	f001 f98f 	bl	800a758 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800943a:	4b3e      	ldr	r3, [pc, #248]	; (8009534 <pvPortMalloc+0x104>)
 800943c:	483e      	ldr	r0, [pc, #248]	; (8009538 <pvPortMalloc+0x108>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	469c      	mov	ip, r3
 8009442:	b9d2      	cbnz	r2, 800947a <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 8009444:	4a3d      	ldr	r2, [pc, #244]	; (800953c <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 8009446:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009448:	4b3d      	ldr	r3, [pc, #244]	; (8009540 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800944a:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 800944c:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800944e:	bf1c      	itt	ne
 8009450:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009452:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009456:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 8009458:	4b3a      	ldr	r3, [pc, #232]	; (8009544 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800945a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800945e:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009462:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 8009464:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009468:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800946c:	4b36      	ldr	r3, [pc, #216]	; (8009548 <pvPortMalloc+0x118>)
 800946e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009470:	4b36      	ldr	r3, [pc, #216]	; (800954c <pvPortMalloc+0x11c>)
 8009472:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009478:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800947a:	6807      	ldr	r7, [r0, #0]
 800947c:	4227      	tst	r7, r4
 800947e:	d153      	bne.n	8009528 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 8009480:	2c00      	cmp	r4, #0
 8009482:	d044      	beq.n	800950e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8009484:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009488:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800948a:	bf1c      	itt	ne
 800948c:	f023 0307 	bicne.w	r3, r3, #7
 8009490:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009492:	2b00      	cmp	r3, #0
 8009494:	d048      	beq.n	8009528 <pvPortMalloc+0xf8>
 8009496:	4a2d      	ldr	r2, [pc, #180]	; (800954c <pvPortMalloc+0x11c>)
 8009498:	6816      	ldr	r6, [r2, #0]
 800949a:	4690      	mov	r8, r2
 800949c:	429e      	cmp	r6, r3
 800949e:	d343      	bcc.n	8009528 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 80094a0:	4a27      	ldr	r2, [pc, #156]	; (8009540 <pvPortMalloc+0x110>)
 80094a2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094a4:	6869      	ldr	r1, [r5, #4]
 80094a6:	4299      	cmp	r1, r3
 80094a8:	d201      	bcs.n	80094ae <pvPortMalloc+0x7e>
 80094aa:	6828      	ldr	r0, [r5, #0]
 80094ac:	b9a8      	cbnz	r0, 80094da <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 80094ae:	f8dc 0000 	ldr.w	r0, [ip]
 80094b2:	42a8      	cmp	r0, r5
 80094b4:	d038      	beq.n	8009528 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094b6:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094b8:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094ba:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094bc:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094be:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094c0:	d912      	bls.n	80094e8 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094c2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094c4:	0742      	lsls	r2, r0, #29
 80094c6:	d00b      	beq.n	80094e0 <pvPortMalloc+0xb0>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	e7fe      	b.n	80094d8 <pvPortMalloc+0xa8>
 80094da:	462a      	mov	r2, r5
 80094dc:	4605      	mov	r5, r0
 80094de:	e7e1      	b.n	80094a4 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094e0:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094e2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094e4:	f7ff ff80 	bl	80093e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094e8:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094ea:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094ec:	4916      	ldr	r1, [pc, #88]	; (8009548 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094ee:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094f0:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 80094f2:	4a17      	ldr	r2, [pc, #92]	; (8009550 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 80094f4:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094f6:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80094f8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80094fa:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094fc:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094fe:	f8c8 6000 	str.w	r6, [r8]
					xNumberOfSuccessfulAllocations++;
 8009502:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009506:	bf38      	it	cc
 8009508:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800950a:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800950c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800950e:	f001 f9c7 	bl	800a8a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009512:	0763      	lsls	r3, r4, #29
 8009514:	d00a      	beq.n	800952c <pvPortMalloc+0xfc>
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	e7fe      	b.n	8009526 <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 8009528:	2400      	movs	r4, #0
 800952a:	e7f0      	b.n	800950e <pvPortMalloc+0xde>
}
 800952c:	4620      	mov	r0, r4
 800952e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009532:	bf00      	nop
 8009534:	24002960 	.word	0x24002960
 8009538:	24006564 	.word	0x24006564
 800953c:	24002964 	.word	0x24002964
 8009540:	24006578 	.word	0x24006578
 8009544:	2400655c 	.word	0x2400655c
 8009548:	2400656c 	.word	0x2400656c
 800954c:	24006568 	.word	0x24006568
 8009550:	24006570 	.word	0x24006570

08009554 <vPortFree>:
{
 8009554:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009556:	4604      	mov	r4, r0
 8009558:	b390      	cbz	r0, 80095c0 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800955a:	4a1a      	ldr	r2, [pc, #104]	; (80095c4 <vPortFree+0x70>)
 800955c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	4213      	tst	r3, r2
 8009564:	d108      	bne.n	8009578 <vPortFree+0x24>
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	e7fe      	b.n	8009576 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009578:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800957c:	b141      	cbz	r1, 8009590 <vPortFree+0x3c>
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	e7fe      	b.n	800958e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009590:	ea23 0302 	bic.w	r3, r3, r2
 8009594:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009598:	f001 f8de 	bl	800a758 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800959c:	4a0a      	ldr	r2, [pc, #40]	; (80095c8 <vPortFree+0x74>)
 800959e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095a2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095a6:	6811      	ldr	r1, [r2, #0]
 80095a8:	440b      	add	r3, r1
 80095aa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095ac:	f7ff ff1c 	bl	80093e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095b0:	4a06      	ldr	r2, [pc, #24]	; (80095cc <vPortFree+0x78>)
 80095b2:	6813      	ldr	r3, [r2, #0]
 80095b4:	3301      	adds	r3, #1
}
 80095b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80095ba:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80095bc:	f001 b970 	b.w	800a8a0 <xTaskResumeAll>
}
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	24006564 	.word	0x24006564
 80095c8:	24006568 	.word	0x24006568
 80095cc:	24006574 	.word	0x24006574

080095d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095d0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095d4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095d8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095da:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095dc:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095e4:	4770      	bx	lr

080095e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095ea:	4770      	bx	lr

080095ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80095ec:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095ee:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80095f0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095f2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095f8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80095fa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80095fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80095fe:	3301      	adds	r3, #1
 8009600:	6003      	str	r3, [r0, #0]
}
 8009602:	4770      	bx	lr

08009604 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009604:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009606:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009608:	1c63      	adds	r3, r4, #1
 800960a:	d10a      	bne.n	8009622 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800960c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009612:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009614:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009616:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009618:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800961a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800961c:	3301      	adds	r3, #1
 800961e:	6003      	str	r3, [r0, #0]
}
 8009620:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009622:	f100 0208 	add.w	r2, r0, #8
 8009626:	4613      	mov	r3, r2
 8009628:	6852      	ldr	r2, [r2, #4]
 800962a:	6815      	ldr	r5, [r2, #0]
 800962c:	42a5      	cmp	r5, r4
 800962e:	d9fa      	bls.n	8009626 <vListInsert+0x22>
 8009630:	e7ed      	b.n	800960e <vListInsert+0xa>

08009632 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009632:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009634:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009638:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800963a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800963c:	6859      	ldr	r1, [r3, #4]
 800963e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009640:	bf08      	it	eq
 8009642:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009644:	2200      	movs	r2, #0
 8009646:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	3a01      	subs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800964e:	6818      	ldr	r0, [r3, #0]
}
 8009650:	4770      	bx	lr
	...

08009654 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009654:	4808      	ldr	r0, [pc, #32]	; (8009678 <prvPortStartFirstTask+0x24>)
 8009656:	6800      	ldr	r0, [r0, #0]
 8009658:	6800      	ldr	r0, [r0, #0]
 800965a:	f380 8808 	msr	MSP, r0
 800965e:	f04f 0000 	mov.w	r0, #0
 8009662:	f380 8814 	msr	CONTROL, r0
 8009666:	b662      	cpsie	i
 8009668:	b661      	cpsie	f
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	df00      	svc	0
 8009674:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009676:	0000      	.short	0x0000
 8009678:	e000ed08 	.word	0xe000ed08

0800967c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800967c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800968c <vPortEnableVFP+0x10>
 8009680:	6801      	ldr	r1, [r0, #0]
 8009682:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009686:	6001      	str	r1, [r0, #0]
 8009688:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800968a:	0000      	.short	0x0000
 800968c:	e000ed88 	.word	0xe000ed88

08009690 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8009690:	2300      	movs	r3, #0
{
 8009692:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009694:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009696:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <prvTaskExitError+0x3c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	d008      	beq.n	80096b0 <prvTaskExitError+0x20>
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	e7fe      	b.n	80096ae <prvTaskExitError+0x1e>
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0fc      	beq.n	80096c0 <prvTaskExitError+0x30>
}
 80096c6:	b002      	add	sp, #8
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	24000060 	.word	0x24000060

080096d0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096d4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096d8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80096dc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096de:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096e0:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096e2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096e4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096e6:	f06f 0302 	mvn.w	r3, #2
 80096ea:	6203      	str	r3, [r0, #32]
}
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	08009691 	.word	0x08009691
	...

08009700 <SVC_Handler>:
	__asm volatile (
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <pxCurrentTCBConst2>)
 8009702:	6819      	ldr	r1, [r3, #0]
 8009704:	6808      	ldr	r0, [r1, #0]
 8009706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	f380 8809 	msr	PSP, r0
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f04f 0000 	mov.w	r0, #0
 8009716:	f380 8811 	msr	BASEPRI, r0
 800971a:	4770      	bx	lr
 800971c:	f3af 8000 	nop.w

08009720 <pxCurrentTCBConst2>:
 8009720:	24006588 	.word	0x24006588

08009724 <vPortEnterCritical>:
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009734:	4a0a      	ldr	r2, [pc, #40]	; (8009760 <vPortEnterCritical+0x3c>)
 8009736:	6813      	ldr	r3, [r2, #0]
 8009738:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800973a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800973c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800973e:	d10d      	bne.n	800975c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009740:	4b08      	ldr	r3, [pc, #32]	; (8009764 <vPortEnterCritical+0x40>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009748:	d008      	beq.n	800975c <vPortEnterCritical+0x38>
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	e7fe      	b.n	800975a <vPortEnterCritical+0x36>
}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	24000060 	.word	0x24000060
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009768:	4a08      	ldr	r2, [pc, #32]	; (800978c <vPortExitCritical+0x24>)
 800976a:	6813      	ldr	r3, [r2, #0]
 800976c:	b943      	cbnz	r3, 8009780 <vPortExitCritical+0x18>
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	e7fe      	b.n	800977e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009780:	3b01      	subs	r3, #1
 8009782:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009784:	b90b      	cbnz	r3, 800978a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009786:	f383 8811 	msr	BASEPRI, r3
}
 800978a:	4770      	bx	lr
 800978c:	24000060 	.word	0x24000060

08009790 <PendSV_Handler>:
	__asm volatile
 8009790:	f3ef 8009 	mrs	r0, PSP
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <pxCurrentTCBConst>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	f01e 0f10 	tst.w	lr, #16
 80097a0:	bf08      	it	eq
 80097a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	6010      	str	r0, [r2, #0]
 80097ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097b4:	f380 8811 	msr	BASEPRI, r0
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f001 f96c 	bl	800aa9c <vTaskSwitchContext>
 80097c4:	f04f 0000 	mov.w	r0, #0
 80097c8:	f380 8811 	msr	BASEPRI, r0
 80097cc:	bc09      	pop	{r0, r3}
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	6808      	ldr	r0, [r1, #0]
 80097d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d6:	f01e 0f10 	tst.w	lr, #16
 80097da:	bf08      	it	eq
 80097dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097e0:	f380 8809 	msr	PSP, r0
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst>:
 80097f0:	24006588 	.word	0x24006588

080097f4 <xPortSysTickHandler>:
{
 80097f4:	b508      	push	{r3, lr}
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009806:	f000 ffb5 	bl	800a774 <xTaskIncrementTick>
 800980a:	b118      	cbz	r0, 8009814 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800980c:	4b03      	ldr	r3, [pc, #12]	; (800981c <xPortSysTickHandler+0x28>)
 800980e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009812:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009814:	2300      	movs	r3, #0
 8009816:	f383 8811 	msr	BASEPRI, r3
}
 800981a:	bd08      	pop	{r3, pc}
 800981c:	e000ed04 	.word	0xe000ed04

08009820 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009820:	2300      	movs	r3, #0
 8009822:	4a08      	ldr	r2, [pc, #32]	; (8009844 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009824:	4908      	ldr	r1, [pc, #32]	; (8009848 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009828:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800982a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <vPortSetupTimerInterrupt+0x2c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	fbb3 f3f1 	udiv	r3, r3, r1
 8009836:	4906      	ldr	r1, [pc, #24]	; (8009850 <vPortSetupTimerInterrupt+0x30>)
 8009838:	3b01      	subs	r3, #1
 800983a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800983c:	2307      	movs	r3, #7
 800983e:	6013      	str	r3, [r2, #0]
}
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	e000e010 	.word	0xe000e010
 8009848:	e000e018 	.word	0xe000e018
 800984c:	24000050 	.word	0x24000050
 8009850:	e000e014 	.word	0xe000e014

08009854 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009854:	4b37      	ldr	r3, [pc, #220]	; (8009934 <xPortStartScheduler+0xe0>)
 8009856:	4a38      	ldr	r2, [pc, #224]	; (8009938 <xPortStartScheduler+0xe4>)
{
 8009858:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800985a:	6819      	ldr	r1, [r3, #0]
 800985c:	4291      	cmp	r1, r2
 800985e:	d108      	bne.n	8009872 <xPortStartScheduler+0x1e>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	e7fe      	b.n	8009870 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	4b31      	ldr	r3, [pc, #196]	; (800993c <xPortStartScheduler+0xe8>)
 8009876:	429a      	cmp	r2, r3
 8009878:	d108      	bne.n	800988c <xPortStartScheduler+0x38>
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	e7fe      	b.n	800988a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800988c:	4b2c      	ldr	r3, [pc, #176]	; (8009940 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800988e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009890:	781a      	ldrb	r2, [r3, #0]
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009896:	22ff      	movs	r2, #255	; 0xff
 8009898:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800989a:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800989c:	4a29      	ldr	r2, [pc, #164]	; (8009944 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80098a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098ac:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098ae:	2307      	movs	r3, #7
 80098b0:	4a25      	ldr	r2, [pc, #148]	; (8009948 <xPortStartScheduler+0xf4>)
 80098b2:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098b4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80098b8:	1e5c      	subs	r4, r3, #1
 80098ba:	0600      	lsls	r0, r0, #24
 80098bc:	d40c      	bmi.n	80098d8 <xPortStartScheduler+0x84>
 80098be:	b111      	cbz	r1, 80098c6 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	d011      	beq.n	80098ea <xPortStartScheduler+0x96>
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	e7fe      	b.n	80098d6 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80098dc:	2101      	movs	r1, #1
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	f88d 3003 	strb.w	r3, [sp, #3]
 80098e6:	4623      	mov	r3, r4
 80098e8:	e7e4      	b.n	80098b4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098ea:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 80098ee:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098f0:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098f2:	9b01      	ldr	r3, [sp, #4]
 80098f4:	4a12      	ldr	r2, [pc, #72]	; (8009940 <xPortStartScheduler+0xec>)
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098fa:	4b14      	ldr	r3, [pc, #80]	; (800994c <xPortStartScheduler+0xf8>)
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009902:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800990a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800990c:	f7ff ff88 	bl	8009820 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <xPortStartScheduler+0xfc>)
 8009912:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8009914:	f7ff feb2 	bl	800967c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009918:	4a0e      	ldr	r2, [pc, #56]	; (8009954 <xPortStartScheduler+0x100>)
 800991a:	6813      	ldr	r3, [r2, #0]
 800991c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009920:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8009922:	f7ff fe97 	bl	8009654 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009926:	f001 f8b9 	bl	800aa9c <vTaskSwitchContext>
	prvTaskExitError();
 800992a:	f7ff feb1 	bl	8009690 <prvTaskExitError>
}
 800992e:	4620      	mov	r0, r4
 8009930:	b002      	add	sp, #8
 8009932:	bd10      	pop	{r4, pc}
 8009934:	e000ed00 	.word	0xe000ed00
 8009938:	410fc271 	.word	0x410fc271
 800993c:	410fc270 	.word	0x410fc270
 8009940:	e000e400 	.word	0xe000e400
 8009944:	24006580 	.word	0x24006580
 8009948:	24006584 	.word	0x24006584
 800994c:	e000ed20 	.word	0xe000ed20
 8009950:	24000060 	.word	0x24000060
 8009954:	e000ef34 	.word	0xe000ef34

08009958 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009958:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800995c:	2b0f      	cmp	r3, #15
 800995e:	d90e      	bls.n	800997e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009960:	4a10      	ldr	r2, [pc, #64]	; (80099a4 <vPortValidateInterruptPriority+0x4c>)
 8009962:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009964:	4a10      	ldr	r2, [pc, #64]	; (80099a8 <vPortValidateInterruptPriority+0x50>)
 8009966:	7812      	ldrb	r2, [r2, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d908      	bls.n	800997e <vPortValidateInterruptPriority+0x26>
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	e7fe      	b.n	800997c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800997e:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <vPortValidateInterruptPriority+0x54>)
 8009980:	4a0b      	ldr	r2, [pc, #44]	; (80099b0 <vPortValidateInterruptPriority+0x58>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6812      	ldr	r2, [r2, #0]
 8009986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800998a:	4293      	cmp	r3, r2
 800998c:	d908      	bls.n	80099a0 <vPortValidateInterruptPriority+0x48>
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	e7fe      	b.n	800999e <vPortValidateInterruptPriority+0x46>
	}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	e000e3f0 	.word	0xe000e3f0
 80099a8:	24006580 	.word	0x24006580
 80099ac:	e000ed0c 	.word	0xe000ed0c
 80099b0:	24006584 	.word	0x24006584

080099b4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099b4:	b510      	push	{r4, lr}
 80099b6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099b8:	f7ff feb4 	bl	8009724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80099be:	f7ff fed3 	bl	8009768 <vPortExitCritical>

	return xReturn;
}
 80099c2:	fab4 f084 	clz	r0, r4
 80099c6:	0940      	lsrs	r0, r0, #5
 80099c8:	bd10      	pop	{r4, pc}

080099ca <prvCopyDataToQueue>:
{
 80099ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099cc:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80099d0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099d2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099d4:	b952      	cbnz	r2, 80099ec <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099d6:	6807      	ldr	r7, [r0, #0]
 80099d8:	bb47      	cbnz	r7, 8009a2c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099da:	6880      	ldr	r0, [r0, #8]
 80099dc:	f001 f9c0 	bl	800ad60 <xTaskPriorityDisinherit>
 80099e0:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099e2:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099e4:	3601      	adds	r6, #1
}
 80099e6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099e8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80099ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80099ec:	b965      	cbnz	r5, 8009a08 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099ee:	6840      	ldr	r0, [r0, #4]
 80099f0:	f011 fbd2 	bl	801b198 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099f4:	6863      	ldr	r3, [r4, #4]
 80099f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80099f8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099fa:	68a2      	ldr	r2, [r4, #8]
 80099fc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099fe:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a00:	d3f0      	bcc.n	80099e4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	6063      	str	r3, [r4, #4]
 8009a06:	e7ed      	b.n	80099e4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a08:	68c0      	ldr	r0, [r0, #12]
 8009a0a:	f011 fbc5 	bl	801b198 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009a10:	68e3      	ldr	r3, [r4, #12]
 8009a12:	4251      	negs	r1, r2
 8009a14:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a16:	6822      	ldr	r2, [r4, #0]
 8009a18:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a1a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a1c:	bf3e      	ittt	cc
 8009a1e:	68a3      	ldrcc	r3, [r4, #8]
 8009a20:	185b      	addcc	r3, r3, r1
 8009a22:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009a24:	2d02      	cmp	r5, #2
 8009a26:	d101      	bne.n	8009a2c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a28:	b116      	cbz	r6, 8009a30 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8009a2a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	e7d9      	b.n	80099e4 <prvCopyDataToQueue+0x1a>
 8009a30:	4635      	mov	r5, r6
 8009a32:	e7d7      	b.n	80099e4 <prvCopyDataToQueue+0x1a>

08009a34 <prvCopyDataFromQueue>:
{
 8009a34:	4603      	mov	r3, r0
 8009a36:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009a3a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a3c:	b162      	cbz	r2, 8009a58 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a3e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a40:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a42:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a44:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a46:	60dc      	str	r4, [r3, #12]
}
 8009a48:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a4c:	bf24      	itt	cs
 8009a4e:	6819      	ldrcs	r1, [r3, #0]
 8009a50:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a52:	68d9      	ldr	r1, [r3, #12]
 8009a54:	f011 bba0 	b.w	801b198 <memcpy>
}
 8009a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <prvUnlockQueue>:
{
 8009a5e:	b570      	push	{r4, r5, r6, lr}
 8009a60:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009a62:	f7ff fe5f 	bl	8009724 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009a66:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a6a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8009a6e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a70:	2d00      	cmp	r5, #0
 8009a72:	dc14      	bgt.n	8009a9e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8009a74:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a76:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009a7e:	f7ff fe73 	bl	8009768 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009a82:	f7ff fe4f 	bl	8009724 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009a86:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009a8a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	dc12      	bgt.n	8009ab6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8009a90:	23ff      	movs	r3, #255	; 0xff
 8009a92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009a9a:	f7ff be65 	b.w	8009768 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0e7      	beq.n	8009a74 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f001 f877 	bl	800ab98 <xTaskRemoveFromEventList>
 8009aaa:	b108      	cbz	r0, 8009ab0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009aac:	f001 f900 	bl	800acb0 <vTaskMissedYield>
			--cTxLock;
 8009ab0:	3d01      	subs	r5, #1
 8009ab2:	b26d      	sxtb	r5, r5
 8009ab4:	e7dc      	b.n	8009a70 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0e9      	beq.n	8009a90 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009abc:	4630      	mov	r0, r6
 8009abe:	f001 f86b 	bl	800ab98 <xTaskRemoveFromEventList>
 8009ac2:	b108      	cbz	r0, 8009ac8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009ac4:	f001 f8f4 	bl	800acb0 <vTaskMissedYield>
				--cRxLock;
 8009ac8:	3d01      	subs	r5, #1
 8009aca:	b26d      	sxtb	r5, r5
 8009acc:	e7de      	b.n	8009a8c <prvUnlockQueue+0x2e>
	...

08009ad0 <xQueueGenericReset>:
{
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	b940      	cbnz	r0, 8009aea <xQueueGenericReset+0x1a>
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009aea:	f7ff fe1b 	bl	8009724 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009af4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009af6:	434b      	muls	r3, r1
 8009af8:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009afa:	1a5b      	subs	r3, r3, r1
 8009afc:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009afe:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b00:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b02:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b04:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b06:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009b08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009b10:	b995      	cbnz	r5, 8009b38 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	b163      	cbz	r3, 8009b30 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b16:	f104 0010 	add.w	r0, r4, #16
 8009b1a:	f001 f83d 	bl	800ab98 <xTaskRemoveFromEventList>
 8009b1e:	b138      	cbz	r0, 8009b30 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8009b20:	4b0a      	ldr	r3, [pc, #40]	; (8009b4c <xQueueGenericReset+0x7c>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8009b30:	f7ff fe1a 	bl	8009768 <vPortExitCritical>
}
 8009b34:	2001      	movs	r0, #1
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b38:	f104 0010 	add.w	r0, r4, #16
 8009b3c:	f7ff fd48 	bl	80095d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b44:	f7ff fd44 	bl	80095d0 <vListInitialise>
 8009b48:	e7f2      	b.n	8009b30 <xQueueGenericReset+0x60>
 8009b4a:	bf00      	nop
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <xQueueGenericCreateStatic>:
	{
 8009b50:	b513      	push	{r0, r1, r4, lr}
 8009b52:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b54:	b940      	cbnz	r0, 8009b68 <xQueueGenericCreateStatic+0x18>
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	e7fe      	b.n	8009b66 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8009b68:	b943      	cbnz	r3, 8009b7c <xQueueGenericCreateStatic+0x2c>
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	e7fe      	b.n	8009b7a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b7c:	b14a      	cbz	r2, 8009b92 <xQueueGenericCreateStatic+0x42>
 8009b7e:	b991      	cbnz	r1, 8009ba6 <xQueueGenericCreateStatic+0x56>
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	e7fe      	b.n	8009b90 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b92:	b141      	cbz	r1, 8009ba6 <xQueueGenericCreateStatic+0x56>
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	e7fe      	b.n	8009ba4 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ba6:	2350      	movs	r3, #80	; 0x50
 8009ba8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009baa:	9b01      	ldr	r3, [sp, #4]
 8009bac:	2b50      	cmp	r3, #80	; 0x50
 8009bae:	d008      	beq.n	8009bc2 <xQueueGenericCreateStatic+0x72>
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bc2:	2900      	cmp	r1, #0
 8009bc4:	bf08      	it	eq
 8009bc6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bc8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	6022      	str	r2, [r4, #0]
 8009bce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009bd2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff ff79 	bl	8009ad0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009bde:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8009be2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009be4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8009be8:	b002      	add	sp, #8
 8009bea:	bd10      	pop	{r4, pc}

08009bec <xQueueGenericCreate>:
	{
 8009bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bee:	460d      	mov	r5, r1
 8009bf0:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	b940      	cbnz	r0, 8009c08 <xQueueGenericCreate+0x1c>
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	e7fe      	b.n	8009c06 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c08:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c0a:	3050      	adds	r0, #80	; 0x50
 8009c0c:	f7ff fc10 	bl	8009430 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009c10:	4604      	mov	r4, r0
 8009c12:	b170      	cbz	r0, 8009c32 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c1a:	b165      	cbz	r5, 8009c36 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c1c:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c20:	2101      	movs	r1, #1
 8009c22:	4620      	mov	r0, r4
 8009c24:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8009c26:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c2a:	f7ff ff51 	bl	8009ad0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009c2e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8009c32:	4620      	mov	r0, r4
 8009c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c36:	4603      	mov	r3, r0
 8009c38:	e7f2      	b.n	8009c20 <xQueueGenericCreate+0x34>

08009c3a <xQueueCreateCountingSemaphoreStatic>:
	{
 8009c3a:	b513      	push	{r0, r1, r4, lr}
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009c40:	b940      	cbnz	r0, 8009c54 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	e7fe      	b.n	8009c52 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c54:	4288      	cmp	r0, r1
 8009c56:	d208      	bcs.n	8009c6a <xQueueCreateCountingSemaphoreStatic+0x30>
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	e7fe      	b.n	8009c68 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	9200      	str	r2, [sp, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4611      	mov	r1, r2
 8009c72:	f7ff ff6d 	bl	8009b50 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8009c76:	b100      	cbz	r0, 8009c7a <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c78:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009c7a:	b002      	add	sp, #8
 8009c7c:	bd10      	pop	{r4, pc}

08009c7e <xQueueCreateCountingSemaphore>:
	{
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009c82:	b940      	cbnz	r0, 8009c96 <xQueueCreateCountingSemaphore+0x18>
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	e7fe      	b.n	8009c94 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c96:	4288      	cmp	r0, r1
 8009c98:	d208      	bcs.n	8009cac <xQueueCreateCountingSemaphore+0x2e>
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	e7fe      	b.n	8009caa <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009cac:	2202      	movs	r2, #2
 8009cae:	2100      	movs	r1, #0
 8009cb0:	f7ff ff9c 	bl	8009bec <xQueueGenericCreate>
		if( xHandle != NULL )
 8009cb4:	b100      	cbz	r0, 8009cb8 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009cb6:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009cb8:	bd10      	pop	{r4, pc}
	...

08009cbc <xQueueGenericSend>:
{
 8009cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc0:	4688      	mov	r8, r1
 8009cc2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009cc4:	4604      	mov	r4, r0
{
 8009cc6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009cc8:	b940      	cbnz	r0, 8009cdc <xQueueGenericSend+0x20>
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	e7fe      	b.n	8009cda <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cdc:	b951      	cbnz	r1, 8009cf4 <xQueueGenericSend+0x38>
 8009cde:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009ce0:	b143      	cbz	r3, 8009cf4 <xQueueGenericSend+0x38>
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	e7fe      	b.n	8009cf2 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cf4:	2f02      	cmp	r7, #2
 8009cf6:	d10b      	bne.n	8009d10 <xQueueGenericSend+0x54>
 8009cf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d008      	beq.n	8009d10 <xQueueGenericSend+0x54>
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	e7fe      	b.n	8009d0e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d10:	f000 ffd4 	bl	800acbc <xTaskGetSchedulerState>
 8009d14:	4606      	mov	r6, r0
 8009d16:	b950      	cbnz	r0, 8009d2e <xQueueGenericSend+0x72>
 8009d18:	9b01      	ldr	r3, [sp, #4]
 8009d1a:	b14b      	cbz	r3, 8009d30 <xQueueGenericSend+0x74>
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	e7fe      	b.n	8009d2c <xQueueGenericSend+0x70>
 8009d2e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009d30:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8009d34:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e1c <xQueueGenericSend+0x160>
 8009d38:	e037      	b.n	8009daa <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d3a:	9d01      	ldr	r5, [sp, #4]
 8009d3c:	b91d      	cbnz	r5, 8009d46 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 8009d3e:	f7ff fd13 	bl	8009768 <vPortExitCritical>
			return errQUEUE_FULL;
 8009d42:	2000      	movs	r0, #0
 8009d44:	e050      	b.n	8009de8 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 8009d46:	b916      	cbnz	r6, 8009d4e <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d48:	a802      	add	r0, sp, #8
 8009d4a:	f000 ff69 	bl	800ac20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009d4e:	f7ff fd0b 	bl	8009768 <vPortExitCritical>
		vTaskSuspendAll();
 8009d52:	f000 fd01 	bl	800a758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d56:	f7ff fce5 	bl	8009724 <vPortEnterCritical>
 8009d5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d5e:	2bff      	cmp	r3, #255	; 0xff
 8009d60:	d101      	bne.n	8009d66 <xQueueGenericSend+0xaa>
 8009d62:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8009d66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d6a:	2bff      	cmp	r3, #255	; 0xff
 8009d6c:	d101      	bne.n	8009d72 <xQueueGenericSend+0xb6>
 8009d6e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8009d72:	f7ff fcf9 	bl	8009768 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d76:	a901      	add	r1, sp, #4
 8009d78:	a802      	add	r0, sp, #8
 8009d7a:	f000 ff5d 	bl	800ac38 <xTaskCheckForTimeOut>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d146      	bne.n	8009e10 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d82:	f7ff fccf 	bl	8009724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009d88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d12f      	bne.n	8009dee <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009d8e:	f7ff fceb 	bl	8009768 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d92:	9901      	ldr	r1, [sp, #4]
 8009d94:	f104 0010 	add.w	r0, r4, #16
 8009d98:	f000 fec6 	bl	800ab28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff fe5e 	bl	8009a5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009da2:	f000 fd7d 	bl	800a8a0 <xTaskResumeAll>
 8009da6:	b350      	cbz	r0, 8009dfe <xQueueGenericSend+0x142>
 8009da8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009daa:	f7ff fcbb 	bl	8009724 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009db0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d301      	bcc.n	8009dba <xQueueGenericSend+0xfe>
 8009db6:	2f02      	cmp	r7, #2
 8009db8:	d1bf      	bne.n	8009d3a <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dba:	463a      	mov	r2, r7
 8009dbc:	4641      	mov	r1, r8
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f7ff fe03 	bl	80099ca <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dc6:	b11b      	cbz	r3, 8009dd0 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dcc:	f000 fee4 	bl	800ab98 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009dd0:	b138      	cbz	r0, 8009de2 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8009dd2:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <xQueueGenericSend+0x160>)
 8009dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009de2:	f7ff fcc1 	bl	8009768 <vPortExitCritical>
				return pdPASS;
 8009de6:	2001      	movs	r0, #1
}
 8009de8:	b004      	add	sp, #16
 8009dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8009dee:	f7ff fcbb 	bl	8009768 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7ff fe33 	bl	8009a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009df8:	f000 fd52 	bl	800a8a0 <xTaskResumeAll>
 8009dfc:	e7d4      	b.n	8009da8 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 8009dfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e02:	f8ca 3000 	str.w	r3, [sl]
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	e7cb      	b.n	8009da8 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 8009e10:	4620      	mov	r0, r4
 8009e12:	f7ff fe24 	bl	8009a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e16:	f000 fd43 	bl	800a8a0 <xTaskResumeAll>
 8009e1a:	e792      	b.n	8009d42 <xQueueGenericSend+0x86>
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <xQueueGenericSendFromISR>:
{
 8009e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e24:	4689      	mov	r9, r1
 8009e26:	4690      	mov	r8, r2
 8009e28:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	b940      	cbnz	r0, 8009e40 <xQueueGenericSendFromISR+0x20>
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	e7fe      	b.n	8009e3e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e40:	b951      	cbnz	r1, 8009e58 <xQueueGenericSendFromISR+0x38>
 8009e42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009e44:	b143      	cbz	r3, 8009e58 <xQueueGenericSendFromISR+0x38>
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	e7fe      	b.n	8009e56 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e58:	2f02      	cmp	r7, #2
 8009e5a:	d10b      	bne.n	8009e74 <xQueueGenericSendFromISR+0x54>
 8009e5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d008      	beq.n	8009e74 <xQueueGenericSendFromISR+0x54>
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	e7fe      	b.n	8009e72 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e74:	f7ff fd70 	bl	8009958 <vPortValidateInterruptPriority>
	__asm volatile
 8009e78:	f3ef 8611 	mrs	r6, BASEPRI
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d301      	bcc.n	8009e98 <xQueueGenericSendFromISR+0x78>
 8009e94:	2f02      	cmp	r7, #2
 8009e96:	d123      	bne.n	8009ee0 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e98:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e9c:	463a      	mov	r2, r7
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ea2:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ea6:	f7ff fd90 	bl	80099ca <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009eaa:	1c6b      	adds	r3, r5, #1
 8009eac:	d113      	bne.n	8009ed6 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb0:	b90b      	cbnz	r3, 8009eb6 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	e00b      	b.n	8009ece <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009eba:	f000 fe6d 	bl	800ab98 <xTaskRemoveFromEventList>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d0f7      	beq.n	8009eb2 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8009ec2:	f1b8 0f00 	cmp.w	r8, #0
 8009ec6:	d0f4      	beq.n	8009eb2 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ec8:	2001      	movs	r0, #1
 8009eca:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8009ece:	f386 8811 	msr	BASEPRI, r6
}
 8009ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ed6:	3501      	adds	r5, #1
 8009ed8:	b26d      	sxtb	r5, r5
 8009eda:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8009ede:	e7e8      	b.n	8009eb2 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e7f4      	b.n	8009ece <xQueueGenericSendFromISR+0xae>

08009ee4 <xQueueGiveFromISR>:
{
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009ee8:	4604      	mov	r4, r0
 8009eea:	b940      	cbnz	r0, 8009efe <xQueueGiveFromISR+0x1a>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	e7fe      	b.n	8009efc <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009efe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009f00:	b143      	cbz	r3, 8009f14 <xQueueGiveFromISR+0x30>
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	e7fe      	b.n	8009f12 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f14:	6803      	ldr	r3, [r0, #0]
 8009f16:	b953      	cbnz	r3, 8009f2e <xQueueGiveFromISR+0x4a>
 8009f18:	6883      	ldr	r3, [r0, #8]
 8009f1a:	b143      	cbz	r3, 8009f2e <xQueueGiveFromISR+0x4a>
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	e7fe      	b.n	8009f2c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f2e:	f7ff fd13 	bl	8009958 <vPortValidateInterruptPriority>
	__asm volatile
 8009f32:	f3ef 8611 	mrs	r6, BASEPRI
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d91c      	bls.n	8009f88 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f52:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8009f54:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f56:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f58:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009f5a:	d110      	bne.n	8009f7e <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f5e:	b90b      	cbnz	r3, 8009f64 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8009f60:	2001      	movs	r0, #1
 8009f62:	e009      	b.n	8009f78 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f68:	f000 fe16 	bl	800ab98 <xTaskRemoveFromEventList>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d0f7      	beq.n	8009f60 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009f70:	2d00      	cmp	r5, #0
 8009f72:	d0f5      	beq.n	8009f60 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f74:	2001      	movs	r0, #1
 8009f76:	6028      	str	r0, [r5, #0]
	__asm volatile
 8009f78:	f386 8811 	msr	BASEPRI, r6
}
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f7e:	3301      	adds	r3, #1
 8009f80:	b25b      	sxtb	r3, r3
 8009f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f86:	e7eb      	b.n	8009f60 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7f5      	b.n	8009f78 <xQueueGiveFromISR+0x94>

08009f8c <xQueueReceive>:
{
 8009f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f90:	b085      	sub	sp, #20
 8009f92:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8009f94:	4604      	mov	r4, r0
{
 8009f96:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009f98:	b940      	cbnz	r0, 8009fac <xQueueReceive+0x20>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	e7fe      	b.n	8009faa <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fac:	b951      	cbnz	r1, 8009fc4 <xQueueReceive+0x38>
 8009fae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009fb0:	b143      	cbz	r3, 8009fc4 <xQueueReceive+0x38>
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	e7fe      	b.n	8009fc2 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fc4:	f000 fe7a 	bl	800acbc <xTaskGetSchedulerState>
 8009fc8:	4606      	mov	r6, r0
 8009fca:	b950      	cbnz	r0, 8009fe2 <xQueueReceive+0x56>
 8009fcc:	9b01      	ldr	r3, [sp, #4]
 8009fce:	b14b      	cbz	r3, 8009fe4 <xQueueReceive+0x58>
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueReceive+0x54>
 8009fe2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009fe4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8009fe8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800a0c8 <xQueueReceive+0x13c>
 8009fec:	e03b      	b.n	800a066 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fee:	9d01      	ldr	r5, [sp, #4]
 8009ff0:	b91d      	cbnz	r5, 8009ffa <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8009ff2:	f7ff fbb9 	bl	8009768 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e052      	b.n	800a0a0 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 8009ffa:	b916      	cbnz	r6, 800a002 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ffc:	a802      	add	r0, sp, #8
 8009ffe:	f000 fe0f 	bl	800ac20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a002:	f7ff fbb1 	bl	8009768 <vPortExitCritical>
		vTaskSuspendAll();
 800a006:	f000 fba7 	bl	800a758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a00a:	f7ff fb8b 	bl	8009724 <vPortEnterCritical>
 800a00e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a012:	2bff      	cmp	r3, #255	; 0xff
 800a014:	d101      	bne.n	800a01a <xQueueReceive+0x8e>
 800a016:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800a01a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a01e:	2bff      	cmp	r3, #255	; 0xff
 800a020:	d101      	bne.n	800a026 <xQueueReceive+0x9a>
 800a022:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800a026:	f7ff fb9f 	bl	8009768 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a02a:	a901      	add	r1, sp, #4
 800a02c:	a802      	add	r0, sp, #8
 800a02e:	f000 fe03 	bl	800ac38 <xTaskCheckForTimeOut>
 800a032:	2800      	cmp	r0, #0
 800a034:	d13d      	bne.n	800a0b2 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a036:	4620      	mov	r0, r4
 800a038:	f7ff fcbc 	bl	80099b4 <prvIsQueueEmpty>
 800a03c:	b398      	cbz	r0, 800a0a6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a03e:	9901      	ldr	r1, [sp, #4]
 800a040:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a044:	f000 fd70 	bl	800ab28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a048:	4620      	mov	r0, r4
 800a04a:	f7ff fd08 	bl	8009a5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a04e:	f000 fc27 	bl	800a8a0 <xTaskResumeAll>
 800a052:	b938      	cbnz	r0, 800a064 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 800a054:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a058:	f8c9 3000 	str.w	r3, [r9]
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a066:	f7ff fb5d 	bl	8009724 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a06a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a06c:	2d00      	cmp	r5, #0
 800a06e:	d0be      	beq.n	8009fee <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a070:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a072:	4639      	mov	r1, r7
 800a074:	4620      	mov	r0, r4
 800a076:	f7ff fcdd 	bl	8009a34 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a07a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	b163      	cbz	r3, 800a09a <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a080:	f104 0010 	add.w	r0, r4, #16
 800a084:	f000 fd88 	bl	800ab98 <xTaskRemoveFromEventList>
 800a088:	b138      	cbz	r0, 800a09a <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800a08a:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <xQueueReceive+0x13c>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a09a:	f7ff fb65 	bl	8009768 <vPortExitCritical>
				return pdPASS;
 800a09e:	2001      	movs	r0, #1
}
 800a0a0:	b005      	add	sp, #20
 800a0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff fcd9 	bl	8009a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0ac:	f000 fbf8 	bl	800a8a0 <xTaskResumeAll>
 800a0b0:	e7d8      	b.n	800a064 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f7ff fcd3 	bl	8009a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0b8:	f000 fbf2 	bl	800a8a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f7ff fc79 	bl	80099b4 <prvIsQueueEmpty>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d0ce      	beq.n	800a064 <xQueueReceive+0xd8>
 800a0c6:	e796      	b.n	8009ff6 <xQueueReceive+0x6a>
 800a0c8:	e000ed04 	.word	0xe000ed04

0800a0cc <xQueueSemaphoreTake>:
{
 800a0cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800a0d0:	4604      	mov	r4, r0
{
 800a0d2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a0d4:	b940      	cbnz	r0, 800a0e8 <xQueueSemaphoreTake+0x1c>
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	e7fe      	b.n	800a0e6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a0e8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800a0ea:	b145      	cbz	r5, 800a0fe <xQueueSemaphoreTake+0x32>
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	e7fe      	b.n	800a0fc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0fe:	f000 fddd 	bl	800acbc <xTaskGetSchedulerState>
 800a102:	4606      	mov	r6, r0
 800a104:	b950      	cbnz	r0, 800a11c <xQueueSemaphoreTake+0x50>
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	b16b      	cbz	r3, 800a126 <xQueueSemaphoreTake+0x5a>
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	e7fe      	b.n	800a11a <xQueueSemaphoreTake+0x4e>
 800a11c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800a11e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800a120:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800a250 <xQueueSemaphoreTake+0x184>
 800a124:	e051      	b.n	800a1ca <xQueueSemaphoreTake+0xfe>
 800a126:	4605      	mov	r5, r0
 800a128:	e7f9      	b.n	800a11e <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	b963      	cbnz	r3, 800a148 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a12e:	b145      	cbz	r5, 800a142 <xQueueSemaphoreTake+0x76>
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	e7fe      	b.n	800a140 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 800a142:	f7ff fb11 	bl	8009768 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a146:	e05e      	b.n	800a206 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800a148:	b916      	cbnz	r6, 800a150 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a14a:	a802      	add	r0, sp, #8
 800a14c:	f000 fd68 	bl	800ac20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a150:	f7ff fb0a 	bl	8009768 <vPortExitCritical>
		vTaskSuspendAll();
 800a154:	f000 fb00 	bl	800a758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a158:	f7ff fae4 	bl	8009724 <vPortEnterCritical>
 800a15c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a160:	2bff      	cmp	r3, #255	; 0xff
 800a162:	d101      	bne.n	800a168 <xQueueSemaphoreTake+0x9c>
 800a164:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a168:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a16c:	2bff      	cmp	r3, #255	; 0xff
 800a16e:	d101      	bne.n	800a174 <xQueueSemaphoreTake+0xa8>
 800a170:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a174:	f7ff faf8 	bl	8009768 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a178:	a901      	add	r1, sp, #4
 800a17a:	a802      	add	r0, sp, #8
 800a17c:	f000 fd5c 	bl	800ac38 <xTaskCheckForTimeOut>
 800a180:	2800      	cmp	r0, #0
 800a182:	d14a      	bne.n	800a21a <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a184:	4620      	mov	r0, r4
 800a186:	f7ff fc15 	bl	80099b4 <prvIsQueueEmpty>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d03f      	beq.n	800a20e <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	b93b      	cbnz	r3, 800a1a2 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 800a192:	f7ff fac7 	bl	8009724 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a196:	68a0      	ldr	r0, [r4, #8]
 800a198:	f000 fda0 	bl	800acdc <xTaskPriorityInherit>
 800a19c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a19e:	f7ff fae3 	bl	8009768 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1a2:	9901      	ldr	r1, [sp, #4]
 800a1a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1a8:	f000 fcbe 	bl	800ab28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f7ff fc56 	bl	8009a5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1b2:	f000 fb75 	bl	800a8a0 <xTaskResumeAll>
 800a1b6:	b938      	cbnz	r0, 800a1c8 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800a1b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1bc:	f8c8 3000 	str.w	r3, [r8]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a1ca:	f7ff faab 	bl	8009724 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a1ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0aa      	beq.n	800a12a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	b913      	cbnz	r3, 800a1e2 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a1dc:	f000 fe56 	bl	800ae8c <pvTaskIncrementMutexHeldCount>
 800a1e0:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	b163      	cbz	r3, 800a200 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1e6:	f104 0010 	add.w	r0, r4, #16
 800a1ea:	f000 fcd5 	bl	800ab98 <xTaskRemoveFromEventList>
 800a1ee:	b138      	cbz	r0, 800a200 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800a1f0:	4b17      	ldr	r3, [pc, #92]	; (800a250 <xQueueSemaphoreTake+0x184>)
 800a1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800a200:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800a202:	f7ff fab1 	bl	8009768 <vPortExitCritical>
}
 800a206:	4628      	mov	r0, r5
 800a208:	b004      	add	sp, #16
 800a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800a20e:	4620      	mov	r0, r4
 800a210:	f7ff fc25 	bl	8009a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a214:	f000 fb44 	bl	800a8a0 <xTaskResumeAll>
 800a218:	e7d6      	b.n	800a1c8 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800a21a:	4620      	mov	r0, r4
 800a21c:	f7ff fc1f 	bl	8009a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a220:	f000 fb3e 	bl	800a8a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a224:	4620      	mov	r0, r4
 800a226:	f7ff fbc5 	bl	80099b4 <prvIsQueueEmpty>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d0cc      	beq.n	800a1c8 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800a22e:	2d00      	cmp	r5, #0
 800a230:	d0e9      	beq.n	800a206 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800a232:	f7ff fa77 	bl	8009724 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a236:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a238:	b119      	cbz	r1, 800a242 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a23a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a23c:	6819      	ldr	r1, [r3, #0]
 800a23e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a242:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800a244:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a246:	f000 fdcf 	bl	800ade8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a24a:	f7ff fa8d 	bl	8009768 <vPortExitCritical>
 800a24e:	e7da      	b.n	800a206 <xQueueSemaphoreTake+0x13a>
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <xQueueReceiveFromISR>:
{
 800a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a258:	4689      	mov	r9, r1
 800a25a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800a25c:	4605      	mov	r5, r0
 800a25e:	b940      	cbnz	r0, 800a272 <xQueueReceiveFromISR+0x1e>
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	e7fe      	b.n	800a270 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a272:	b951      	cbnz	r1, 800a28a <xQueueReceiveFromISR+0x36>
 800a274:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a276:	b143      	cbz	r3, 800a28a <xQueueReceiveFromISR+0x36>
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	e7fe      	b.n	800a288 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a28a:	f7ff fb65 	bl	8009958 <vPortValidateInterruptPriority>
	__asm volatile
 800a28e:	f3ef 8711 	mrs	r7, BASEPRI
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2a2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2a4:	b31c      	cbz	r4, 800a2ee <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2a6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2ae:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2b0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2b2:	f7ff fbbf 	bl	8009a34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2b6:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a2b8:	1c73      	adds	r3, r6, #1
 800a2ba:	d113      	bne.n	800a2e4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2bc:	692b      	ldr	r3, [r5, #16]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	e00b      	b.n	800a2dc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2c4:	f105 0010 	add.w	r0, r5, #16
 800a2c8:	f000 fc66 	bl	800ab98 <xTaskRemoveFromEventList>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d0f7      	beq.n	800a2c0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800a2d0:	f1b8 0f00 	cmp.w	r8, #0
 800a2d4:	d0f4      	beq.n	800a2c0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a2dc:	f387 8811 	msr	BASEPRI, r7
}
 800a2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a2e4:	3601      	adds	r6, #1
 800a2e6:	b276      	sxtb	r6, r6
 800a2e8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800a2ec:	e7e8      	b.n	800a2c0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	e7f4      	b.n	800a2dc <xQueueReceiveFromISR+0x88>
	...

0800a2f4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2f4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2f6:	4a07      	ldr	r2, [pc, #28]	; (800a314 <vQueueAddToRegistry+0x20>)
	{
 800a2f8:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2fa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800a2fe:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800a302:	b91d      	cbnz	r5, 800a30c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a304:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a308:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a30a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a30c:	3301      	adds	r3, #1
 800a30e:	2b08      	cmp	r3, #8
 800a310:	d1f3      	bne.n	800a2fa <vQueueAddToRegistry+0x6>
 800a312:	e7fa      	b.n	800a30a <vQueueAddToRegistry+0x16>
 800a314:	24007200 	.word	0x24007200

0800a318 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a318:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a31a:	4909      	ldr	r1, [pc, #36]	; (800a340 <vQueueUnregisterQueue+0x28>)
	{
 800a31c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a31e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800a322:	00dc      	lsls	r4, r3, #3
 800a324:	4282      	cmp	r2, r0
 800a326:	d106      	bne.n	800a336 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a328:	4a06      	ldr	r2, [pc, #24]	; (800a344 <vQueueUnregisterQueue+0x2c>)
 800a32a:	2100      	movs	r1, #0
 800a32c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a330:	4422      	add	r2, r4
 800a332:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a334:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a336:	3301      	adds	r3, #1
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d1f0      	bne.n	800a31e <vQueueUnregisterQueue+0x6>
 800a33c:	e7fa      	b.n	800a334 <vQueueUnregisterQueue+0x1c>
 800a33e:	bf00      	nop
 800a340:	24007204 	.word	0x24007204
 800a344:	24007200 	.word	0x24007200

0800a348 <vQueueDelete>:
{
 800a348:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800a34a:	b940      	cbnz	r0, 800a35e <vQueueDelete+0x16>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	e7fe      	b.n	800a35c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800a35e:	f7ff ffdb 	bl	800a318 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a362:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800a366:	b91b      	cbnz	r3, 800a370 <vQueueDelete+0x28>
}
 800a368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800a36c:	f7ff b8f2 	b.w	8009554 <vPortFree>
}
 800a370:	bd10      	pop	{r4, pc}

0800a372 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a372:	b570      	push	{r4, r5, r6, lr}
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a37a:	f7ff f9d3 	bl	8009724 <vPortEnterCritical>
 800a37e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a382:	2bff      	cmp	r3, #255	; 0xff
 800a384:	d102      	bne.n	800a38c <vQueueWaitForMessageRestricted+0x1a>
 800a386:	2300      	movs	r3, #0
 800a388:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a38c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a390:	2bff      	cmp	r3, #255	; 0xff
 800a392:	d102      	bne.n	800a39a <vQueueWaitForMessageRestricted+0x28>
 800a394:	2300      	movs	r3, #0
 800a396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a39a:	f7ff f9e5 	bl	8009768 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a39e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3a0:	b92b      	cbnz	r3, 800a3ae <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3a2:	4632      	mov	r2, r6
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a3aa:	f000 fbd7 	bl	800ab5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3ae:	4620      	mov	r0, r4
	}
 800a3b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800a3b4:	f7ff bb53 	b.w	8009a5e <prvUnlockQueue>

0800a3b8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3bc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3be:	f7ff f9b1 	bl	8009724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3c2:	4b2e      	ldr	r3, [pc, #184]	; (800a47c <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800a3c4:	4d2e      	ldr	r5, [pc, #184]	; (800a480 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	4f2e      	ldr	r7, [pc, #184]	; (800a484 <prvAddNewTaskToReadyList+0xcc>)
 800a3ca:	3201      	adds	r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a3ce:	682e      	ldr	r6, [r5, #0]
 800a3d0:	2e00      	cmp	r6, #0
 800a3d2:	d148      	bne.n	800a466 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3d4:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d11f      	bne.n	800a41c <prvAddNewTaskToReadyList+0x64>
 800a3dc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3de:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	f7ff f8f5 	bl	80095d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3e6:	f108 0814 	add.w	r8, r8, #20
 800a3ea:	2e38      	cmp	r6, #56	; 0x38
 800a3ec:	d1f7      	bne.n	800a3de <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3ee:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a4b0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800a3f2:	4e25      	ldr	r6, [pc, #148]	; (800a488 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	f7ff f8eb 	bl	80095d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff f8e8 	bl	80095d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a400:	4822      	ldr	r0, [pc, #136]	; (800a48c <prvAddNewTaskToReadyList+0xd4>)
 800a402:	f7ff f8e5 	bl	80095d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a406:	4822      	ldr	r0, [pc, #136]	; (800a490 <prvAddNewTaskToReadyList+0xd8>)
 800a408:	f7ff f8e2 	bl	80095d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a40c:	4821      	ldr	r0, [pc, #132]	; (800a494 <prvAddNewTaskToReadyList+0xdc>)
 800a40e:	f7ff f8df 	bl	80095d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a412:	4b21      	ldr	r3, [pc, #132]	; (800a498 <prvAddNewTaskToReadyList+0xe0>)
 800a414:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a418:	4b20      	ldr	r3, [pc, #128]	; (800a49c <prvAddNewTaskToReadyList+0xe4>)
 800a41a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800a41c:	4a20      	ldr	r2, [pc, #128]	; (800a4a0 <prvAddNewTaskToReadyList+0xe8>)
 800a41e:	6813      	ldr	r3, [r2, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a424:	4a1f      	ldr	r2, [pc, #124]	; (800a4a4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a426:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a428:	6811      	ldr	r1, [r2, #0]
 800a42a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a42c:	428b      	cmp	r3, r1
 800a42e:	d900      	bls.n	800a432 <prvAddNewTaskToReadyList+0x7a>
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	2014      	movs	r0, #20
 800a434:	1d21      	adds	r1, r4, #4
 800a436:	fb00 7003 	mla	r0, r0, r3, r7
 800a43a:	f7ff f8d7 	bl	80095ec <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a43e:	f7ff f993 	bl	8009768 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a442:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <prvAddNewTaskToReadyList+0xf0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	b163      	cbz	r3, 800a462 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a44e:	429a      	cmp	r2, r3
 800a450:	d207      	bcs.n	800a462 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800a452:	4b16      	ldr	r3, [pc, #88]	; (800a4ac <prvAddNewTaskToReadyList+0xf4>)
 800a454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	f3bf 8f6f 	isb	sy
}
 800a462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800a466:	4b10      	ldr	r3, [pc, #64]	; (800a4a8 <prvAddNewTaskToReadyList+0xf0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1d6      	bne.n	800a41c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a474:	429a      	cmp	r2, r3
 800a476:	d8d1      	bhi.n	800a41c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800a478:	602c      	str	r4, [r5, #0]
 800a47a:	e7cf      	b.n	800a41c <prvAddNewTaskToReadyList+0x64>
 800a47c:	240069f4 	.word	0x240069f4
 800a480:	24006588 	.word	0x24006588
 800a484:	24006594 	.word	0x24006594
 800a488:	24006a1c 	.word	0x24006a1c
 800a48c:	24006a3c 	.word	0x24006a3c
 800a490:	24006a68 	.word	0x24006a68
 800a494:	24006a54 	.word	0x24006a54
 800a498:	2400658c 	.word	0x2400658c
 800a49c:	24006590 	.word	0x24006590
 800a4a0:	24006a00 	.word	0x24006a00
 800a4a4:	24006a04 	.word	0x24006a04
 800a4a8:	24006a50 	.word	0x24006a50
 800a4ac:	e000ed04 	.word	0xe000ed04
 800a4b0:	24006a08 	.word	0x24006a08

0800a4b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4b4:	4a06      	ldr	r2, [pc, #24]	; (800a4d0 <prvResetNextTaskUnblockTime+0x1c>)
 800a4b6:	6813      	ldr	r3, [r2, #0]
 800a4b8:	6819      	ldr	r1, [r3, #0]
 800a4ba:	4b06      	ldr	r3, [pc, #24]	; (800a4d4 <prvResetNextTaskUnblockTime+0x20>)
 800a4bc:	b919      	cbnz	r1, 800a4c6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4c2:	601a      	str	r2, [r3, #0]
	}
}
 800a4c4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4ca:	68d2      	ldr	r2, [r2, #12]
 800a4cc:	6852      	ldr	r2, [r2, #4]
 800a4ce:	e7f8      	b.n	800a4c2 <prvResetNextTaskUnblockTime+0xe>
 800a4d0:	2400658c 	.word	0x2400658c
 800a4d4:	24006a30 	.word	0x24006a30

0800a4d8 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4dc:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4e4:	21a5      	movs	r1, #165	; 0xa5
 800a4e6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4e8:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4ea:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4ee:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a4f4:	f010 fe5e 	bl	801b1b4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a4fa:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4fc:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800a500:	2d00      	cmp	r5, #0
 800a502:	d037      	beq.n	800a574 <prvInitialiseNewTask.isra.0+0x9c>
 800a504:	1e6b      	subs	r3, r5, #1
 800a506:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800a50a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a50c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a510:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800a514:	7819      	ldrb	r1, [r3, #0]
 800a516:	b109      	cbz	r1, 800a51c <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a518:	42ab      	cmp	r3, r5
 800a51a:	d1f7      	bne.n	800a50c <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a51c:	2300      	movs	r3, #0
 800a51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a522:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800a524:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a528:	1d20      	adds	r0, r4, #4
 800a52a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800a52c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800a530:	bf28      	it	cs
 800a532:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a534:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a536:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a538:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a53c:	f7ff f853 	bl	80095e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a540:	f104 0018 	add.w	r0, r4, #24
 800a544:	f7ff f84f 	bl	80095e6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800a548:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a54c:	463a      	mov	r2, r7
 800a54e:	4631      	mov	r1, r6
 800a550:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a552:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a554:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a556:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800a558:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a55c:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a560:	f7ff f8b6 	bl	80096d0 <pxPortInitialiseStack>
 800a564:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a566:	f1b8 0f00 	cmp.w	r8, #0
 800a56a:	d001      	beq.n	800a570 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a56c:	f8c8 4000 	str.w	r4, [r8]
}
 800a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a574:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800a578:	e7d3      	b.n	800a522 <prvInitialiseNewTask.isra.0+0x4a>

0800a57a <prvDeleteTCB>:
	{
 800a57a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a57c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800a580:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a582:	b93b      	cbnz	r3, 800a594 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800a584:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a586:	f7fe ffe5 	bl	8009554 <vPortFree>
				vPortFree( pxTCB );
 800a58a:	4620      	mov	r0, r4
	}
 800a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800a590:	f7fe bfe0 	b.w	8009554 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a594:	2b01      	cmp	r3, #1
 800a596:	d0f9      	beq.n	800a58c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d008      	beq.n	800a5ae <prvDeleteTCB+0x34>
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	e7fe      	b.n	800a5ac <prvDeleteTCB+0x32>
	}
 800a5ae:	bd10      	pop	{r4, pc}

0800a5b0 <prvIdleTask>:
{
 800a5b0:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b2:	4e14      	ldr	r6, [pc, #80]	; (800a604 <prvIdleTask+0x54>)
				taskYIELD();
 800a5b4:	4f14      	ldr	r7, [pc, #80]	; (800a608 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5b6:	4c15      	ldr	r4, [pc, #84]	; (800a60c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800a5b8:	4d15      	ldr	r5, [pc, #84]	; (800a610 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	b96b      	cbnz	r3, 800a5da <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5be:	4b15      	ldr	r3, [pc, #84]	; (800a614 <prvIdleTask+0x64>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d906      	bls.n	800a5d4 <prvIdleTask+0x24>
				taskYIELD();
 800a5c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800a5d4:	f7f6 f8a8 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a5d8:	e7ed      	b.n	800a5b6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800a5da:	f7ff f8a3 	bl	8009724 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5de:	68f3      	ldr	r3, [r6, #12]
 800a5e0:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5e4:	f108 0004 	add.w	r0, r8, #4
 800a5e8:	f7ff f823 	bl	8009632 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a5f8:	f7ff f8b6 	bl	8009768 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	f7ff ffbc 	bl	800a57a <prvDeleteTCB>
 800a602:	e7da      	b.n	800a5ba <prvIdleTask+0xa>
 800a604:	24006a68 	.word	0x24006a68
 800a608:	e000ed04 	.word	0xe000ed04
 800a60c:	240069f8 	.word	0x240069f8
 800a610:	240069f4 	.word	0x240069f4
 800a614:	24006594 	.word	0x24006594

0800a618 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a61a:	4b16      	ldr	r3, [pc, #88]	; (800a674 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800a61c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a61e:	4e16      	ldr	r6, [pc, #88]	; (800a678 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800a620:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800a622:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a624:	6830      	ldr	r0, [r6, #0]
 800a626:	3004      	adds	r0, #4
 800a628:	f7ff f803 	bl	8009632 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a62c:	1c63      	adds	r3, r4, #1
 800a62e:	4633      	mov	r3, r6
 800a630:	d107      	bne.n	800a642 <prvAddCurrentTaskToDelayedList+0x2a>
 800a632:	b137      	cbz	r7, 800a642 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a634:	6831      	ldr	r1, [r6, #0]
 800a636:	4811      	ldr	r0, [pc, #68]	; (800a67c <prvAddCurrentTaskToDelayedList+0x64>)
 800a638:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a63a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a63e:	f7fe bfd5 	b.w	80095ec <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a642:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800a648:	d307      	bcc.n	800a65a <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a64a:	4a0d      	ldr	r2, [pc, #52]	; (800a680 <prvAddCurrentTaskToDelayedList+0x68>)
 800a64c:	6810      	ldr	r0, [r2, #0]
 800a64e:	6819      	ldr	r1, [r3, #0]
}
 800a650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a654:	3104      	adds	r1, #4
 800a656:	f7fe bfd5 	b.w	8009604 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a65a:	4a0a      	ldr	r2, [pc, #40]	; (800a684 <prvAddCurrentTaskToDelayedList+0x6c>)
 800a65c:	6810      	ldr	r0, [r2, #0]
 800a65e:	6819      	ldr	r1, [r3, #0]
 800a660:	3104      	adds	r1, #4
 800a662:	f7fe ffcf 	bl	8009604 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a666:	4b08      	ldr	r3, [pc, #32]	; (800a688 <prvAddCurrentTaskToDelayedList+0x70>)
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	42a2      	cmp	r2, r4
 800a66c:	d900      	bls.n	800a670 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800a66e:	601c      	str	r4, [r3, #0]
}
 800a670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a672:	bf00      	nop
 800a674:	24006a7c 	.word	0x24006a7c
 800a678:	24006588 	.word	0x24006588
 800a67c:	24006a54 	.word	0x24006a54
 800a680:	24006590 	.word	0x24006590
 800a684:	2400658c 	.word	0x2400658c
 800a688:	24006a30 	.word	0x24006a30

0800a68c <xTaskCreateStatic>:
	{
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a694:	b945      	cbnz	r5, 800a6a8 <xTaskCreateStatic+0x1c>
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	e7fe      	b.n	800a6a6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a6a8:	b944      	cbnz	r4, 800a6bc <xTaskCreateStatic+0x30>
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	e7fe      	b.n	800a6ba <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6bc:	2660      	movs	r6, #96	; 0x60
 800a6be:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6c0:	9e05      	ldr	r6, [sp, #20]
 800a6c2:	2e60      	cmp	r6, #96	; 0x60
 800a6c4:	d008      	beq.n	800a6d8 <xTaskCreateStatic+0x4c>
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	e7fe      	b.n	800a6d6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6d8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6da:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6dc:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6de:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6e2:	ad04      	add	r5, sp, #16
 800a6e4:	9402      	str	r4, [sp, #8]
 800a6e6:	9501      	str	r5, [sp, #4]
 800a6e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a6ea:	9500      	str	r5, [sp, #0]
 800a6ec:	f7ff fef4 	bl	800a4d8 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7ff fe61 	bl	800a3b8 <prvAddNewTaskToReadyList>
	}
 800a6f6:	9804      	ldr	r0, [sp, #16]
 800a6f8:	b006      	add	sp, #24
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}

0800a6fc <xTaskCreate>:
	{
 800a6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a700:	4607      	mov	r7, r0
 800a702:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a704:	0090      	lsls	r0, r2, #2
	{
 800a706:	4688      	mov	r8, r1
 800a708:	4616      	mov	r6, r2
 800a70a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a70c:	f7fe fe90 	bl	8009430 <pvPortMalloc>
			if( pxStack != NULL )
 800a710:	4605      	mov	r5, r0
 800a712:	b1e8      	cbz	r0, 800a750 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a714:	2060      	movs	r0, #96	; 0x60
 800a716:	f7fe fe8b 	bl	8009430 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a71a:	4604      	mov	r4, r0
 800a71c:	b1a8      	cbz	r0, 800a74a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a71e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800a720:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a722:	4632      	mov	r2, r6
 800a724:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a726:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a72c:	9002      	str	r0, [sp, #8]
 800a72e:	4638      	mov	r0, r7
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	464b      	mov	r3, r9
 800a738:	f7ff fece 	bl	800a4d8 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a73c:	4620      	mov	r0, r4
 800a73e:	f7ff fe3b 	bl	800a3b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a742:	2001      	movs	r0, #1
	}
 800a744:	b005      	add	sp, #20
 800a746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a74a:	4628      	mov	r0, r5
 800a74c:	f7fe ff02 	bl	8009554 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a754:	e7f6      	b.n	800a744 <xTaskCreate+0x48>
	...

0800a758 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a758:	4a02      	ldr	r2, [pc, #8]	; (800a764 <vTaskSuspendAll+0xc>)
 800a75a:	6813      	ldr	r3, [r2, #0]
 800a75c:	3301      	adds	r3, #1
 800a75e:	6013      	str	r3, [r2, #0]
}
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	240069fc 	.word	0x240069fc

0800a768 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a768:	4b01      	ldr	r3, [pc, #4]	; (800a770 <xTaskGetTickCount+0x8>)
 800a76a:	6818      	ldr	r0, [r3, #0]
}
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	24006a7c 	.word	0x24006a7c

0800a774 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a774:	4b3f      	ldr	r3, [pc, #252]	; (800a874 <xTaskIncrementTick+0x100>)
 800a776:	681b      	ldr	r3, [r3, #0]
{
 800a778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d172      	bne.n	800a866 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a780:	4b3d      	ldr	r3, [pc, #244]	; (800a878 <xTaskIncrementTick+0x104>)
 800a782:	681d      	ldr	r5, [r3, #0]
 800a784:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a786:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a788:	b9bd      	cbnz	r5, 800a7ba <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a78a:	4b3c      	ldr	r3, [pc, #240]	; (800a87c <xTaskIncrementTick+0x108>)
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	6812      	ldr	r2, [r2, #0]
 800a790:	b142      	cbz	r2, 800a7a4 <xTaskIncrementTick+0x30>
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	e7fe      	b.n	800a7a2 <xTaskIncrementTick+0x2e>
 800a7a4:	4a36      	ldr	r2, [pc, #216]	; (800a880 <xTaskIncrementTick+0x10c>)
 800a7a6:	6819      	ldr	r1, [r3, #0]
 800a7a8:	6810      	ldr	r0, [r2, #0]
 800a7aa:	6018      	str	r0, [r3, #0]
 800a7ac:	6011      	str	r1, [r2, #0]
 800a7ae:	4a35      	ldr	r2, [pc, #212]	; (800a884 <xTaskIncrementTick+0x110>)
 800a7b0:	6813      	ldr	r3, [r2, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	f7ff fe7d 	bl	800a4b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7ba:	4e33      	ldr	r6, [pc, #204]	; (800a888 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800a7bc:	2400      	movs	r4, #0
 800a7be:	4f33      	ldr	r7, [pc, #204]	; (800a88c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7c0:	6833      	ldr	r3, [r6, #0]
 800a7c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a898 <xTaskIncrementTick+0x124>
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	d211      	bcs.n	800a7ee <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d0:	2314      	movs	r3, #20
 800a7d2:	4353      	muls	r3, r2
 800a7d4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800a7d6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800a7d8:	4b2d      	ldr	r3, [pc, #180]	; (800a890 <xTaskIncrementTick+0x11c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800a7dc:	bf28      	it	cs
 800a7de:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	bf18      	it	ne
 800a7e4:	2401      	movne	r4, #1
}
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	b003      	add	sp, #12
 800a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a87c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800a7f2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a89c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7f6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	b91b      	cbnz	r3, 800a806 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a802:	6033      	str	r3, [r6, #0]
					break;
 800a804:	e7e1      	b.n	800a7ca <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a806:	f8d9 3000 	ldr.w	r3, [r9]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a810:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800a814:	4295      	cmp	r5, r2
 800a816:	d201      	bcs.n	800a81c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800a818:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a81a:	e7d6      	b.n	800a7ca <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a81c:	f10b 0104 	add.w	r1, fp, #4
 800a820:	4608      	mov	r0, r1
 800a822:	9101      	str	r1, [sp, #4]
 800a824:	f7fe ff05 	bl	8009632 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a828:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800a82c:	9901      	ldr	r1, [sp, #4]
 800a82e:	b122      	cbz	r2, 800a83a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a830:	f10b 0018 	add.w	r0, fp, #24
 800a834:	f7fe fefd 	bl	8009632 <uxListRemove>
 800a838:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800a83a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800a83e:	f8da 2000 	ldr.w	r2, [sl]
 800a842:	4290      	cmp	r0, r2
 800a844:	d901      	bls.n	800a84a <xTaskIncrementTick+0xd6>
 800a846:	f8ca 0000 	str.w	r0, [sl]
 800a84a:	2314      	movs	r3, #20
 800a84c:	fb03 7000 	mla	r0, r3, r0, r7
 800a850:	f7fe fecc 	bl	80095ec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a854:	f8d8 1000 	ldr.w	r1, [r8]
 800a858:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a85c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800a85e:	429a      	cmp	r2, r3
 800a860:	bf28      	it	cs
 800a862:	2401      	movcs	r4, #1
 800a864:	e7c7      	b.n	800a7f6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800a866:	4a0b      	ldr	r2, [pc, #44]	; (800a894 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800a868:	2400      	movs	r4, #0
		++xPendedTicks;
 800a86a:	6813      	ldr	r3, [r2, #0]
 800a86c:	3301      	adds	r3, #1
 800a86e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800a870:	e7b9      	b.n	800a7e6 <xTaskIncrementTick+0x72>
 800a872:	bf00      	nop
 800a874:	240069fc 	.word	0x240069fc
 800a878:	24006a7c 	.word	0x24006a7c
 800a87c:	2400658c 	.word	0x2400658c
 800a880:	24006590 	.word	0x24006590
 800a884:	24006a34 	.word	0x24006a34
 800a888:	24006a30 	.word	0x24006a30
 800a88c:	24006594 	.word	0x24006594
 800a890:	24006a80 	.word	0x24006a80
 800a894:	24006a38 	.word	0x24006a38
 800a898:	24006588 	.word	0x24006588
 800a89c:	24006a04 	.word	0x24006a04

0800a8a0 <xTaskResumeAll>:
{
 800a8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800a8a2:	4c30      	ldr	r4, [pc, #192]	; (800a964 <xTaskResumeAll+0xc4>)
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	b943      	cbnz	r3, 800a8ba <xTaskResumeAll+0x1a>
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	e7fe      	b.n	800a8b8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a8ba:	f7fe ff33 	bl	8009724 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c4:	6824      	ldr	r4, [r4, #0]
 800a8c6:	b12c      	cbz	r4, 800a8d4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800a8c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a8ca:	f7fe ff4d 	bl	8009768 <vPortExitCritical>
}
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	b003      	add	sp, #12
 800a8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8d4:	4b24      	ldr	r3, [pc, #144]	; (800a968 <xTaskResumeAll+0xc8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d0f5      	beq.n	800a8c8 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8dc:	4d23      	ldr	r5, [pc, #140]	; (800a96c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800a8de:	4e24      	ldr	r6, [pc, #144]	; (800a970 <xTaskResumeAll+0xd0>)
 800a8e0:	4f24      	ldr	r7, [pc, #144]	; (800a974 <xTaskResumeAll+0xd4>)
 800a8e2:	e01e      	b.n	800a922 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e4:	68eb      	ldr	r3, [r5, #12]
 800a8e6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8e8:	f104 0018 	add.w	r0, r4, #24
 800a8ec:	f7fe fea1 	bl	8009632 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8f0:	1d21      	adds	r1, r4, #4
 800a8f2:	4608      	mov	r0, r1
 800a8f4:	9101      	str	r1, [sp, #4]
 800a8f6:	f7fe fe9c 	bl	8009632 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8fc:	6832      	ldr	r2, [r6, #0]
 800a8fe:	9901      	ldr	r1, [sp, #4]
 800a900:	4293      	cmp	r3, r2
 800a902:	d900      	bls.n	800a906 <xTaskResumeAll+0x66>
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	2014      	movs	r0, #20
 800a908:	fb00 7003 	mla	r0, r0, r3, r7
 800a90c:	f7fe fe6e 	bl	80095ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a910:	4b19      	ldr	r3, [pc, #100]	; (800a978 <xTaskResumeAll+0xd8>)
 800a912:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	429a      	cmp	r2, r3
 800a91a:	d302      	bcc.n	800a922 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800a91c:	4b17      	ldr	r3, [pc, #92]	; (800a97c <xTaskResumeAll+0xdc>)
 800a91e:	2201      	movs	r2, #1
 800a920:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1dd      	bne.n	800a8e4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800a928:	b10c      	cbz	r4, 800a92e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800a92a:	f7ff fdc3 	bl	800a4b4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a92e:	4d14      	ldr	r5, [pc, #80]	; (800a980 <xTaskResumeAll+0xe0>)
 800a930:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a932:	b144      	cbz	r4, 800a946 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800a934:	4e11      	ldr	r6, [pc, #68]	; (800a97c <xTaskResumeAll+0xdc>)
 800a936:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a938:	f7ff ff1c 	bl	800a774 <xTaskIncrementTick>
 800a93c:	b100      	cbz	r0, 800a940 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800a93e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a940:	3c01      	subs	r4, #1
 800a942:	d1f9      	bne.n	800a938 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800a944:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a946:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <xTaskResumeAll+0xdc>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0bc      	beq.n	800a8c8 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800a94e:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <xTaskResumeAll+0xe4>)
 800a950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a95e:	2401      	movs	r4, #1
 800a960:	e7b3      	b.n	800a8ca <xTaskResumeAll+0x2a>
 800a962:	bf00      	nop
 800a964:	240069fc 	.word	0x240069fc
 800a968:	240069f4 	.word	0x240069f4
 800a96c:	24006a3c 	.word	0x24006a3c
 800a970:	24006a04 	.word	0x24006a04
 800a974:	24006594 	.word	0x24006594
 800a978:	24006588 	.word	0x24006588
 800a97c:	24006a80 	.word	0x24006a80
 800a980:	24006a38 	.word	0x24006a38
 800a984:	e000ed04 	.word	0xe000ed04

0800a988 <vTaskDelay>:
	{
 800a988:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a98a:	b940      	cbnz	r0, 800a99e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800a98c:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <vTaskDelay+0x40>)
 800a98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	f3bf 8f6f 	isb	sy
	}
 800a99c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a99e:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <vTaskDelay+0x44>)
 800a9a0:	6819      	ldr	r1, [r3, #0]
 800a9a2:	b141      	cbz	r1, 800a9b6 <vTaskDelay+0x2e>
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	e7fe      	b.n	800a9b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a9b6:	f7ff fecf 	bl	800a758 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9ba:	f7ff fe2d 	bl	800a618 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a9be:	f7ff ff6f 	bl	800a8a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d0e2      	beq.n	800a98c <vTaskDelay+0x4>
 800a9c6:	e7e9      	b.n	800a99c <vTaskDelay+0x14>
 800a9c8:	e000ed04 	.word	0xe000ed04
 800a9cc:	240069fc 	.word	0x240069fc

0800a9d0 <vTaskSetApplicationTaskTag>:
	{
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	460d      	mov	r5, r1
		if( xTask == NULL )
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	b908      	cbnz	r0, 800a9dc <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800a9d8:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <vTaskSetApplicationTaskTag+0x1c>)
 800a9da:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800a9dc:	f7fe fea2 	bl	8009724 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800a9e0:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800a9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800a9e6:	f7fe bebf 	b.w	8009768 <vPortExitCritical>
 800a9ea:	bf00      	nop
 800a9ec:	24006588 	.word	0x24006588

0800a9f0 <xTaskCallApplicationTaskHook>:
	{
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	4608      	mov	r0, r1
		if( xTask == NULL )
 800a9f4:	b90b      	cbnz	r3, 800a9fa <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800a9f6:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <xTaskCallApplicationTaskHook+0x14>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800a9fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fc:	b103      	cbz	r3, 800aa00 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800a9fe:	4718      	bx	r3
	}
 800aa00:	4618      	mov	r0, r3
 800aa02:	4770      	bx	lr
 800aa04:	24006588 	.word	0x24006588

0800aa08 <vTaskStartScheduler>:
{
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa0c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa0e:	aa07      	add	r2, sp, #28
 800aa10:	a906      	add	r1, sp, #24
 800aa12:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa14:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa18:	f7fe fcce 	bl	80093b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa1c:	9b05      	ldr	r3, [sp, #20]
 800aa1e:	9a07      	ldr	r2, [sp, #28]
 800aa20:	9302      	str	r3, [sp, #8]
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	4917      	ldr	r1, [pc, #92]	; (800aa84 <vTaskStartScheduler+0x7c>)
 800aa26:	4818      	ldr	r0, [pc, #96]	; (800aa88 <vTaskStartScheduler+0x80>)
 800aa28:	e9cd 4300 	strd	r4, r3, [sp]
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	f7ff fe2d 	bl	800a68c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800aa32:	b1d0      	cbz	r0, 800aa6a <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800aa34:	f000 fa88 	bl	800af48 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800aa38:	2801      	cmp	r0, #1
 800aa3a:	d118      	bne.n	800aa6e <vTaskStartScheduler+0x66>
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa4c:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <vTaskStartScheduler+0x84>)
 800aa4e:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 800aa52:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa56:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <vTaskStartScheduler+0x88>)
 800aa58:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa5a:	4b0e      	ldr	r3, [pc, #56]	; (800aa94 <vTaskStartScheduler+0x8c>)
 800aa5c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <vTaskStartScheduler+0x90>)
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	f7ff ffc5 	bl	800a9f0 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800aa66:	f7fe fef5 	bl	8009854 <xPortStartScheduler>
}
 800aa6a:	b008      	add	sp, #32
 800aa6c:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d1fb      	bne.n	800aa6a <vTaskStartScheduler+0x62>
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	e7fe      	b.n	800aa82 <vTaskStartScheduler+0x7a>
 800aa84:	0801d1b0 	.word	0x0801d1b0
 800aa88:	0800a5b1 	.word	0x0800a5b1
 800aa8c:	24006a30 	.word	0x24006a30
 800aa90:	24006a50 	.word	0x24006a50
 800aa94:	24006a7c 	.word	0x24006a7c
 800aa98:	24006588 	.word	0x24006588

0800aa9c <vTaskSwitchContext>:
{
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa9e:	4b1d      	ldr	r3, [pc, #116]	; (800ab14 <vTaskSwitchContext+0x78>)
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4b1d      	ldr	r3, [pc, #116]	; (800ab18 <vTaskSwitchContext+0x7c>)
 800aaa4:	b112      	cbz	r2, 800aaac <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
}
 800aaaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800aaac:	4e1b      	ldr	r6, [pc, #108]	; (800ab1c <vTaskSwitchContext+0x80>)
 800aaae:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 800aab0:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800aab2:	6830      	ldr	r0, [r6, #0]
 800aab4:	f7ff ff9c 	bl	800a9f0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab8:	4d19      	ldr	r5, [pc, #100]	; (800ab20 <vTaskSwitchContext+0x84>)
 800aaba:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <vTaskSwitchContext+0x88>)
 800aabc:	f04f 0c14 	mov.w	ip, #20
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	4617      	mov	r7, r2
 800aac4:	fb0c f103 	mul.w	r1, ip, r3
 800aac8:	5854      	ldr	r4, [r2, r1]
 800aaca:	1850      	adds	r0, r2, r1
 800aacc:	b1ac      	cbz	r4, 800aafa <vTaskSwitchContext+0x5e>
 800aace:	6844      	ldr	r4, [r0, #4]
 800aad0:	3108      	adds	r1, #8
 800aad2:	6864      	ldr	r4, [r4, #4]
 800aad4:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800aad6:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad8:	4294      	cmp	r4, r2
 800aada:	6044      	str	r4, [r0, #4]
 800aadc:	bf04      	itt	eq
 800aade:	6862      	ldreq	r2, [r4, #4]
 800aae0:	6042      	streq	r2, [r0, #4]
 800aae2:	2214      	movs	r2, #20
 800aae4:	fb02 7203 	mla	r2, r2, r3, r7
 800aae8:	6852      	ldr	r2, [r2, #4]
 800aaea:	68d2      	ldr	r2, [r2, #12]
 800aaec:	6032      	str	r2, [r6, #0]
 800aaee:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 800aaf0:	6830      	ldr	r0, [r6, #0]
}
 800aaf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800aaf6:	f7ff bf7b 	b.w	800a9f0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aafa:	b943      	cbnz	r3, 800ab0e <vTaskSwitchContext+0x72>
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	e7fe      	b.n	800ab0c <vTaskSwitchContext+0x70>
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	e7d8      	b.n	800aac4 <vTaskSwitchContext+0x28>
 800ab12:	bf00      	nop
 800ab14:	240069fc 	.word	0x240069fc
 800ab18:	24006a80 	.word	0x24006a80
 800ab1c:	24006588 	.word	0x24006588
 800ab20:	24006a04 	.word	0x24006a04
 800ab24:	24006594 	.word	0x24006594

0800ab28 <vTaskPlaceOnEventList>:
{
 800ab28:	b510      	push	{r4, lr}
 800ab2a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ab2c:	b940      	cbnz	r0, 800ab40 <vTaskPlaceOnEventList+0x18>
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	e7fe      	b.n	800ab3e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab40:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <vTaskPlaceOnEventList+0x30>)
 800ab42:	6819      	ldr	r1, [r3, #0]
 800ab44:	3118      	adds	r1, #24
 800ab46:	f7fe fd5d 	bl	8009604 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	2101      	movs	r1, #1
}
 800ab4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab52:	f7ff bd61 	b.w	800a618 <prvAddCurrentTaskToDelayedList>
 800ab56:	bf00      	nop
 800ab58:	24006588 	.word	0x24006588

0800ab5c <vTaskPlaceOnEventListRestricted>:
	{
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	460d      	mov	r5, r1
 800ab60:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800ab62:	b940      	cbnz	r0, 800ab76 <vTaskPlaceOnEventListRestricted+0x1a>
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	e7fe      	b.n	800ab74 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab76:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <vTaskPlaceOnEventListRestricted+0x38>)
 800ab78:	6819      	ldr	r1, [r3, #0]
 800ab7a:	3118      	adds	r1, #24
 800ab7c:	f7fe fd36 	bl	80095ec <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ab80:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab82:	4621      	mov	r1, r4
 800ab84:	bf0c      	ite	eq
 800ab86:	4628      	moveq	r0, r5
 800ab88:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ab8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab90:	f7ff bd42 	b.w	800a618 <prvAddCurrentTaskToDelayedList>
 800ab94:	24006588 	.word	0x24006588

0800ab98 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab98:	68c3      	ldr	r3, [r0, #12]
{
 800ab9a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ab9e:	b944      	cbnz	r4, 800abb2 <xTaskRemoveFromEventList+0x1a>
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	e7fe      	b.n	800abb0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abb2:	f104 0118 	add.w	r1, r4, #24
 800abb6:	4608      	mov	r0, r1
 800abb8:	9101      	str	r1, [sp, #4]
 800abba:	f7fe fd3a 	bl	8009632 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abbe:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <xTaskRemoveFromEventList+0x70>)
 800abc0:	9901      	ldr	r1, [sp, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	b9e3      	cbnz	r3, 800ac00 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abc6:	1d21      	adds	r1, r4, #4
 800abc8:	4608      	mov	r0, r1
 800abca:	9101      	str	r1, [sp, #4]
 800abcc:	f7fe fd31 	bl	8009632 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abd0:	4a0e      	ldr	r2, [pc, #56]	; (800ac0c <xTaskRemoveFromEventList+0x74>)
 800abd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800abd4:	6810      	ldr	r0, [r2, #0]
 800abd6:	9901      	ldr	r1, [sp, #4]
 800abd8:	4283      	cmp	r3, r0
 800abda:	d900      	bls.n	800abde <xTaskRemoveFromEventList+0x46>
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	4a0c      	ldr	r2, [pc, #48]	; (800ac10 <xTaskRemoveFromEventList+0x78>)
 800abe0:	2014      	movs	r0, #20
 800abe2:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abe6:	f7fe fd01 	bl	80095ec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abea:	4b0a      	ldr	r3, [pc, #40]	; (800ac14 <xTaskRemoveFromEventList+0x7c>)
 800abec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d906      	bls.n	800ac04 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800abf6:	2001      	movs	r0, #1
 800abf8:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <xTaskRemoveFromEventList+0x80>)
 800abfa:	6018      	str	r0, [r3, #0]
}
 800abfc:	b002      	add	sp, #8
 800abfe:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac00:	4806      	ldr	r0, [pc, #24]	; (800ac1c <xTaskRemoveFromEventList+0x84>)
 800ac02:	e7f0      	b.n	800abe6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800ac04:	2000      	movs	r0, #0
	return xReturn;
 800ac06:	e7f9      	b.n	800abfc <xTaskRemoveFromEventList+0x64>
 800ac08:	240069fc 	.word	0x240069fc
 800ac0c:	24006a04 	.word	0x24006a04
 800ac10:	24006594 	.word	0x24006594
 800ac14:	24006588 	.word	0x24006588
 800ac18:	24006a80 	.word	0x24006a80
 800ac1c:	24006a3c 	.word	0x24006a3c

0800ac20 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac20:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <vTaskInternalSetTimeOutState+0x10>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac26:	4b03      	ldr	r3, [pc, #12]	; (800ac34 <vTaskInternalSetTimeOutState+0x14>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6043      	str	r3, [r0, #4]
}
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	24006a34 	.word	0x24006a34
 800ac34:	24006a7c 	.word	0x24006a7c

0800ac38 <xTaskCheckForTimeOut>:
{
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	b940      	cbnz	r0, 800ac52 <xTaskCheckForTimeOut+0x1a>
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	e7fe      	b.n	800ac50 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ac52:	b941      	cbnz	r1, 800ac66 <xTaskCheckForTimeOut+0x2e>
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	e7fe      	b.n	800ac64 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ac66:	f7fe fd5d 	bl	8009724 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ac6a:	4b0f      	ldr	r3, [pc, #60]	; (800aca8 <xTaskCheckForTimeOut+0x70>)
 800ac6c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	d010      	beq.n	800ac96 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac74:	480d      	ldr	r0, [pc, #52]	; (800acac <xTaskCheckForTimeOut+0x74>)
 800ac76:	682e      	ldr	r6, [r5, #0]
 800ac78:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac7a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac7c:	4286      	cmp	r6, r0
 800ac7e:	d001      	beq.n	800ac84 <xTaskCheckForTimeOut+0x4c>
 800ac80:	428a      	cmp	r2, r1
 800ac82:	d90f      	bls.n	800aca4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac84:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac86:	4283      	cmp	r3, r0
 800ac88:	d90a      	bls.n	800aca0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ac8a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac8c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ac8e:	4413      	add	r3, r2
 800ac90:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac92:	f7ff ffc5 	bl	800ac20 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ac96:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ac98:	f7fe fd66 	bl	8009768 <vPortExitCritical>
}
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800aca4:	2401      	movs	r4, #1
 800aca6:	e7f7      	b.n	800ac98 <xTaskCheckForTimeOut+0x60>
 800aca8:	24006a7c 	.word	0x24006a7c
 800acac:	24006a34 	.word	0x24006a34

0800acb0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800acb0:	4b01      	ldr	r3, [pc, #4]	; (800acb8 <vTaskMissedYield+0x8>)
 800acb2:	2201      	movs	r2, #1
 800acb4:	601a      	str	r2, [r3, #0]
}
 800acb6:	4770      	bx	lr
 800acb8:	24006a80 	.word	0x24006a80

0800acbc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <xTaskGetSchedulerState+0x18>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	b133      	cbz	r3, 800acd0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <xTaskGetSchedulerState+0x1c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800acc8:	bf0c      	ite	eq
 800acca:	2002      	moveq	r0, #2
 800accc:	2000      	movne	r0, #0
 800acce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800acd0:	2001      	movs	r0, #1
	}
 800acd2:	4770      	bx	lr
 800acd4:	24006a50 	.word	0x24006a50
 800acd8:	240069fc 	.word	0x240069fc

0800acdc <xTaskPriorityInherit>:
	{
 800acdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800acde:	4604      	mov	r4, r0
 800ace0:	b348      	cbz	r0, 800ad36 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ace2:	4a1c      	ldr	r2, [pc, #112]	; (800ad54 <xTaskPriorityInherit+0x78>)
 800ace4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ace6:	6811      	ldr	r1, [r2, #0]
 800ace8:	4616      	mov	r6, r2
 800acea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800acec:	428b      	cmp	r3, r1
 800acee:	d228      	bcs.n	800ad42 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800acf0:	6982      	ldr	r2, [r0, #24]
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	db04      	blt.n	800ad00 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf6:	6832      	ldr	r2, [r6, #0]
 800acf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acfa:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800acfe:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ad00:	2214      	movs	r2, #20
 800ad02:	4d15      	ldr	r5, [pc, #84]	; (800ad58 <xTaskPriorityInherit+0x7c>)
 800ad04:	fb02 5303 	mla	r3, r2, r3, r5
 800ad08:	6962      	ldr	r2, [r4, #20]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d115      	bne.n	800ad3a <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad0e:	1d21      	adds	r1, r4, #4
 800ad10:	4608      	mov	r0, r1
 800ad12:	9101      	str	r1, [sp, #4]
 800ad14:	f7fe fc8d 	bl	8009632 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad18:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad1a:	4a10      	ldr	r2, [pc, #64]	; (800ad5c <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad1e:	6810      	ldr	r0, [r2, #0]
 800ad20:	9901      	ldr	r1, [sp, #4]
 800ad22:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad24:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad26:	d900      	bls.n	800ad2a <xTaskPriorityInherit+0x4e>
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	2014      	movs	r0, #20
 800ad2c:	fb00 5003 	mla	r0, r0, r3, r5
 800ad30:	f7fe fc5c 	bl	80095ec <vListInsertEnd>
				xReturn = pdTRUE;
 800ad34:	2001      	movs	r0, #1
	}
 800ad36:	b002      	add	sp, #8
 800ad38:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad3a:	6833      	ldr	r3, [r6, #0]
 800ad3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad40:	e7f8      	b.n	800ad34 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ad42:	6813      	ldr	r3, [r2, #0]
 800ad44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ad46:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ad48:	42a0      	cmp	r0, r4
 800ad4a:	bf2c      	ite	cs
 800ad4c:	2000      	movcs	r0, #0
 800ad4e:	2001      	movcc	r0, #1
 800ad50:	e7f1      	b.n	800ad36 <xTaskPriorityInherit+0x5a>
 800ad52:	bf00      	nop
 800ad54:	24006588 	.word	0x24006588
 800ad58:	24006594 	.word	0x24006594
 800ad5c:	24006a04 	.word	0x24006a04

0800ad60 <xTaskPriorityDisinherit>:
	{
 800ad60:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800ad62:	b910      	cbnz	r0, 800ad6a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800ad64:	2000      	movs	r0, #0
	}
 800ad66:	b002      	add	sp, #8
 800ad68:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ad6a:	4b1c      	ldr	r3, [pc, #112]	; (800addc <xTaskPriorityDisinherit+0x7c>)
 800ad6c:	681c      	ldr	r4, [r3, #0]
 800ad6e:	4284      	cmp	r4, r0
 800ad70:	d008      	beq.n	800ad84 <xTaskPriorityDisinherit+0x24>
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	e7fe      	b.n	800ad82 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad86:	b943      	cbnz	r3, 800ad9a <xTaskPriorityDisinherit+0x3a>
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	e7fe      	b.n	800ad98 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ad9c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad9e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ada0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ada2:	4291      	cmp	r1, r2
 800ada4:	d0de      	beq.n	800ad64 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1dc      	bne.n	800ad64 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adaa:	1d21      	adds	r1, r4, #4
 800adac:	4608      	mov	r0, r1
 800adae:	9101      	str	r1, [sp, #4]
 800adb0:	f7fe fc3f 	bl	8009632 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800adb6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adbc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adbe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800adc0:	4a07      	ldr	r2, [pc, #28]	; (800ade0 <xTaskPriorityDisinherit+0x80>)
 800adc2:	6810      	ldr	r0, [r2, #0]
 800adc4:	4283      	cmp	r3, r0
 800adc6:	d900      	bls.n	800adca <xTaskPriorityDisinherit+0x6a>
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	4a06      	ldr	r2, [pc, #24]	; (800ade4 <xTaskPriorityDisinherit+0x84>)
 800adcc:	2014      	movs	r0, #20
 800adce:	fb00 2003 	mla	r0, r0, r3, r2
 800add2:	f7fe fc0b 	bl	80095ec <vListInsertEnd>
					xReturn = pdTRUE;
 800add6:	2001      	movs	r0, #1
		return xReturn;
 800add8:	e7c5      	b.n	800ad66 <xTaskPriorityDisinherit+0x6>
 800adda:	bf00      	nop
 800addc:	24006588 	.word	0x24006588
 800ade0:	24006a04 	.word	0x24006a04
 800ade4:	24006594 	.word	0x24006594

0800ade8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800ade8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800adea:	4604      	mov	r4, r0
 800adec:	2800      	cmp	r0, #0
 800adee:	d044      	beq.n	800ae7a <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800adf0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800adf2:	b942      	cbnz	r2, 800ae06 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	e7fe      	b.n	800ae04 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ae06:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ae08:	4299      	cmp	r1, r3
 800ae0a:	bf38      	it	cc
 800ae0c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ae0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ae10:	428b      	cmp	r3, r1
 800ae12:	d032      	beq.n	800ae7a <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae14:	2a01      	cmp	r2, #1
 800ae16:	d130      	bne.n	800ae7a <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800ae18:	4a19      	ldr	r2, [pc, #100]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ae1a:	6812      	ldr	r2, [r2, #0]
 800ae1c:	4282      	cmp	r2, r0
 800ae1e:	d108      	bne.n	800ae32 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	e7fe      	b.n	800ae30 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae32:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae34:	4d13      	ldr	r5, [pc, #76]	; (800ae84 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae36:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae38:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ae3c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae3e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae42:	bfa8      	it	ge
 800ae44:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae48:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae4a:	bfa8      	it	ge
 800ae4c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d113      	bne.n	800ae7a <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae52:	1d01      	adds	r1, r0, #4
 800ae54:	4608      	mov	r0, r1
 800ae56:	9101      	str	r1, [sp, #4]
 800ae58:	f7fe fbeb 	bl	8009632 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ae5c:	4a0a      	ldr	r2, [pc, #40]	; (800ae88 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800ae5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae60:	6810      	ldr	r0, [r2, #0]
 800ae62:	9901      	ldr	r1, [sp, #4]
 800ae64:	4283      	cmp	r3, r0
 800ae66:	d900      	bls.n	800ae6a <vTaskPriorityDisinheritAfterTimeout+0x82>
 800ae68:	6013      	str	r3, [r2, #0]
 800ae6a:	2014      	movs	r0, #20
 800ae6c:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ae70:	b003      	add	sp, #12
 800ae72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800ae76:	f7fe bbb9 	b.w	80095ec <vListInsertEnd>
	}
 800ae7a:	b003      	add	sp, #12
 800ae7c:	bd30      	pop	{r4, r5, pc}
 800ae7e:	bf00      	nop
 800ae80:	24006588 	.word	0x24006588
 800ae84:	24006594 	.word	0x24006594
 800ae88:	24006a04 	.word	0x24006a04

0800ae8c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ae8c:	4b04      	ldr	r3, [pc, #16]	; (800aea0 <pvTaskIncrementMutexHeldCount+0x14>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	b11a      	cbz	r2, 800ae9a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae92:	6819      	ldr	r1, [r3, #0]
 800ae94:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ae96:	3201      	adds	r2, #1
 800ae98:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800ae9a:	6818      	ldr	r0, [r3, #0]
	}
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	24006588 	.word	0x24006588

0800aea4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800aea6:	4c11      	ldr	r4, [pc, #68]	; (800aeec <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800aea8:	f7fe fc3c 	bl	8009724 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800aeac:	6825      	ldr	r5, [r4, #0]
 800aeae:	b9bd      	cbnz	r5, 800aee0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800aeb0:	4f0f      	ldr	r7, [pc, #60]	; (800aef0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800aeb2:	4e10      	ldr	r6, [pc, #64]	; (800aef4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7fe fb8b 	bl	80095d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aeba:	4630      	mov	r0, r6
 800aebc:	f7fe fb88 	bl	80095d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aec0:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aec2:	4a0e      	ldr	r2, [pc, #56]	; (800aefc <prvCheckForValidListAndQueue+0x58>)
 800aec4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800aec6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aec8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800aeca:	4b0d      	ldr	r3, [pc, #52]	; (800af00 <prvCheckForValidListAndQueue+0x5c>)
 800aecc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aece:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <prvCheckForValidListAndQueue+0x60>)
 800aed0:	9500      	str	r5, [sp, #0]
 800aed2:	f7fe fe3d 	bl	8009b50 <xQueueGenericCreateStatic>
 800aed6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aed8:	b110      	cbz	r0, 800aee0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aeda:	490b      	ldr	r1, [pc, #44]	; (800af08 <prvCheckForValidListAndQueue+0x64>)
 800aedc:	f7ff fa0a 	bl	800a2f4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800aee0:	b003      	add	sp, #12
 800aee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800aee6:	f7fe bc3f 	b.w	8009768 <vPortExitCritical>
 800aeea:	bf00      	nop
 800aeec:	24006ba8 	.word	0x24006ba8
 800aef0:	24006b2c 	.word	0x24006b2c
 800aef4:	24006b40 	.word	0x24006b40
 800aef8:	24006a84 	.word	0x24006a84
 800aefc:	24006a8c 	.word	0x24006a8c
 800af00:	24006a88 	.word	0x24006a88
 800af04:	24006b58 	.word	0x24006b58
 800af08:	0801d1b5 	.word	0x0801d1b5

0800af0c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800af0c:	4291      	cmp	r1, r2
{
 800af0e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af10:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af12:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800af14:	d80a      	bhi.n	800af2c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af16:	1ad2      	subs	r2, r2, r3
 800af18:	6983      	ldr	r3, [r0, #24]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d20d      	bcs.n	800af3a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af1e:	1d01      	adds	r1, r0, #4
 800af20:	4b07      	ldr	r3, [pc, #28]	; (800af40 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	f7fe fb6e 	bl	8009604 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800af28:	2000      	movs	r0, #0
}
 800af2a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d201      	bcs.n	800af34 <prvInsertTimerInActiveList+0x28>
 800af30:	4299      	cmp	r1, r3
 800af32:	d202      	bcs.n	800af3a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af34:	1d01      	adds	r1, r0, #4
 800af36:	4b03      	ldr	r3, [pc, #12]	; (800af44 <prvInsertTimerInActiveList+0x38>)
 800af38:	e7f3      	b.n	800af22 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800af3a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800af3c:	e7f5      	b.n	800af2a <prvInsertTimerInActiveList+0x1e>
 800af3e:	bf00      	nop
 800af40:	24006a88 	.word	0x24006a88
 800af44:	24006a84 	.word	0x24006a84

0800af48 <xTimerCreateTimerTask>:
{
 800af48:	b510      	push	{r4, lr}
 800af4a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800af4c:	f7ff ffaa 	bl	800aea4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800af50:	4b12      	ldr	r3, [pc, #72]	; (800af9c <xTimerCreateTimerTask+0x54>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	b1b3      	cbz	r3, 800af84 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af56:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af58:	aa07      	add	r2, sp, #28
 800af5a:	a906      	add	r1, sp, #24
 800af5c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af5e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af62:	f7fe fa35 	bl	80093d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	9a07      	ldr	r2, [sp, #28]
 800af6a:	9302      	str	r3, [sp, #8]
 800af6c:	9b06      	ldr	r3, [sp, #24]
 800af6e:	490c      	ldr	r1, [pc, #48]	; (800afa0 <xTimerCreateTimerTask+0x58>)
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	2302      	movs	r3, #2
 800af74:	480b      	ldr	r0, [pc, #44]	; (800afa4 <xTimerCreateTimerTask+0x5c>)
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	4623      	mov	r3, r4
 800af7a:	f7ff fb87 	bl	800a68c <xTaskCreateStatic>
 800af7e:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <xTimerCreateTimerTask+0x60>)
 800af80:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800af82:	b940      	cbnz	r0, 800af96 <xTimerCreateTimerTask+0x4e>
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800af94:	e7fe      	b.n	800af94 <xTimerCreateTimerTask+0x4c>
}
 800af96:	2001      	movs	r0, #1
 800af98:	b008      	add	sp, #32
 800af9a:	bd10      	pop	{r4, pc}
 800af9c:	24006ba8 	.word	0x24006ba8
 800afa0:	0801d1ba 	.word	0x0801d1ba
 800afa4:	0800b07d 	.word	0x0800b07d
 800afa8:	24006bac 	.word	0x24006bac

0800afac <xTimerGenericCommand>:
{
 800afac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800afae:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800afb0:	4604      	mov	r4, r0
{
 800afb2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800afb4:	b940      	cbnz	r0, 800afc8 <xTimerGenericCommand+0x1c>
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	e7fe      	b.n	800afc6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800afc8:	4d0c      	ldr	r5, [pc, #48]	; (800affc <xTimerGenericCommand+0x50>)
 800afca:	6828      	ldr	r0, [r5, #0]
 800afcc:	b178      	cbz	r0, 800afee <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afce:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afd0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afd2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afd6:	dc0c      	bgt.n	800aff2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afd8:	f7ff fe70 	bl	800acbc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afdc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afde:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afe0:	4669      	mov	r1, sp
 800afe2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afe4:	bf0c      	ite	eq
 800afe6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afe8:	461a      	movne	r2, r3
 800afea:	f7fe fe67 	bl	8009cbc <xQueueGenericSend>
}
 800afee:	b004      	add	sp, #16
 800aff0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aff2:	2300      	movs	r3, #0
 800aff4:	4669      	mov	r1, sp
 800aff6:	f7fe ff13 	bl	8009e20 <xQueueGenericSendFromISR>
 800affa:	e7f8      	b.n	800afee <xTimerGenericCommand+0x42>
 800affc:	24006ba8 	.word	0x24006ba8

0800b000 <prvSwitchTimerLists>:
{
 800b000:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b002:	4d1c      	ldr	r5, [pc, #112]	; (800b074 <prvSwitchTimerLists+0x74>)
{
 800b004:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b006:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	b92a      	cbnz	r2, 800b01a <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 800b00e:	4a1a      	ldr	r2, [pc, #104]	; (800b078 <prvSwitchTimerLists+0x78>)
 800b010:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b012:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800b014:	6029      	str	r1, [r5, #0]
}
 800b016:	b005      	add	sp, #20
 800b018:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b01a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b01e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b020:	1d21      	adds	r1, r4, #4
 800b022:	4608      	mov	r0, r1
 800b024:	9103      	str	r1, [sp, #12]
 800b026:	f7fe fb04 	bl	8009632 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b02a:	6a23      	ldr	r3, [r4, #32]
 800b02c:	4620      	mov	r0, r4
 800b02e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b030:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b034:	9903      	ldr	r1, [sp, #12]
 800b036:	f013 0f04 	tst.w	r3, #4
 800b03a:	d0e5      	beq.n	800b008 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b03c:	69a3      	ldr	r3, [r4, #24]
 800b03e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800b040:	429e      	cmp	r6, r3
 800b042:	d205      	bcs.n	800b050 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b044:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b046:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b048:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b04a:	f7fe fadb 	bl	8009604 <vListInsert>
 800b04e:	e7db      	b.n	800b008 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b050:	2300      	movs	r3, #0
 800b052:	4632      	mov	r2, r6
 800b054:	4620      	mov	r0, r4
 800b056:	9700      	str	r7, [sp, #0]
 800b058:	4619      	mov	r1, r3
 800b05a:	f7ff ffa7 	bl	800afac <xTimerGenericCommand>
				configASSERT( xResult );
 800b05e:	2800      	cmp	r0, #0
 800b060:	d1d2      	bne.n	800b008 <prvSwitchTimerLists+0x8>
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	e7fe      	b.n	800b072 <prvSwitchTimerLists+0x72>
 800b074:	24006a84 	.word	0x24006a84
 800b078:	24006a88 	.word	0x24006a88

0800b07c <prvTimerTask>:
{
 800b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b080:	4f77      	ldr	r7, [pc, #476]	; (800b260 <prvTimerTask+0x1e4>)
{
 800b082:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800b084:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800b270 <prvTimerTask+0x1f4>
 800b088:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	f8d3 b000 	ldr.w	fp, [r3]
 800b090:	f1bb 0f00 	cmp.w	fp, #0
 800b094:	d028      	beq.n	800b0e8 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b096:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b098:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b09a:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 800b09e:	4e71      	ldr	r6, [pc, #452]	; (800b264 <prvTimerTask+0x1e8>)
	vTaskSuspendAll();
 800b0a0:	f7ff fb5a 	bl	800a758 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800b0a4:	f7ff fb60 	bl	800a768 <xTaskGetTickCount>
 800b0a8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800b0aa:	6833      	ldr	r3, [r6, #0]
 800b0ac:	46b0      	mov	r8, r6
 800b0ae:	4298      	cmp	r0, r3
 800b0b0:	d31c      	bcc.n	800b0ec <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800b0b2:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b0b4:	b31c      	cbz	r4, 800b0fe <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0b6:	4b6c      	ldr	r3, [pc, #432]	; (800b268 <prvTimerTask+0x1ec>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681c      	ldr	r4, [r3, #0]
 800b0bc:	fab4 f484 	clz	r4, r4
 800b0c0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b0c2:	4b6a      	ldr	r3, [pc, #424]	; (800b26c <prvTimerTask+0x1f0>)
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	ebab 0105 	sub.w	r1, fp, r5
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	f7ff f951 	bl	800a372 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b0d0:	f7ff fbe6 	bl	800a8a0 <xTaskResumeAll>
 800b0d4:	b978      	cbnz	r0, 800b0f6 <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800b0d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0da:	f8ca 3000 	str.w	r3, [sl]
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	e006      	b.n	800b0f6 <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0e8:	2401      	movs	r4, #1
 800b0ea:	e7d8      	b.n	800b09e <prvTimerTask+0x22>
		prvSwitchTimerLists();
 800b0ec:	f7ff ff88 	bl	800b000 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800b0f0:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800b0f2:	f7ff fbd5 	bl	800a8a0 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0f6:	4e5d      	ldr	r6, [pc, #372]	; (800b26c <prvTimerTask+0x1f0>)
 800b0f8:	f04f 0b00 	mov.w	fp, #0
 800b0fc:	e035      	b.n	800b16a <prvTimerTask+0xee>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b0fe:	4583      	cmp	fp, r0
 800b100:	d8df      	bhi.n	800b0c2 <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 800b102:	f7ff fbcd 	bl	800a8a0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b106:	f8d9 3000 	ldr.w	r3, [r9]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b10e:	1d30      	adds	r0, r6, #4
 800b110:	f7fe fa8f 	bl	8009632 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b114:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800b118:	0758      	lsls	r0, r3, #29
 800b11a:	d518      	bpl.n	800b14e <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b11c:	69b1      	ldr	r1, [r6, #24]
 800b11e:	465b      	mov	r3, fp
 800b120:	462a      	mov	r2, r5
 800b122:	4630      	mov	r0, r6
 800b124:	4459      	add	r1, fp
 800b126:	f7ff fef1 	bl	800af0c <prvInsertTimerInActiveList>
 800b12a:	b1a0      	cbz	r0, 800b156 <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b12c:	4623      	mov	r3, r4
 800b12e:	465a      	mov	r2, fp
 800b130:	4621      	mov	r1, r4
 800b132:	4630      	mov	r0, r6
 800b134:	9400      	str	r4, [sp, #0]
 800b136:	f7ff ff39 	bl	800afac <xTimerGenericCommand>
			configASSERT( xResult );
 800b13a:	b960      	cbnz	r0, 800b156 <prvTimerTask+0xda>
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	e7fe      	b.n	800b14c <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b14e:	f023 0301 	bic.w	r3, r3, #1
 800b152:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b156:	6a33      	ldr	r3, [r6, #32]
 800b158:	4630      	mov	r0, r6
 800b15a:	4798      	blx	r3
}
 800b15c:	e7cb      	b.n	800b0f6 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	9905      	ldr	r1, [sp, #20]
 800b162:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b164:	9b02      	ldr	r3, [sp, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	da0a      	bge.n	800b180 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b16a:	2200      	movs	r2, #0
 800b16c:	a902      	add	r1, sp, #8
 800b16e:	6830      	ldr	r0, [r6, #0]
 800b170:	f7fe ff0c 	bl	8009f8c <xQueueReceive>
 800b174:	2800      	cmp	r0, #0
 800b176:	d088      	beq.n	800b08a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	9804      	ldr	r0, [sp, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dbee      	blt.n	800b15e <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b180:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b182:	6963      	ldr	r3, [r4, #20]
 800b184:	b9a3      	cbnz	r3, 800b1b0 <prvTimerTask+0x134>
	xTimeNow = xTaskGetTickCount();
 800b186:	f7ff faef 	bl	800a768 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b18a:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800b18e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800b190:	4298      	cmp	r0, r3
 800b192:	d201      	bcs.n	800b198 <prvTimerTask+0x11c>
		prvSwitchTimerLists();
 800b194:	f7ff ff34 	bl	800b000 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800b19e:	2b09      	cmp	r3, #9
 800b1a0:	d8e3      	bhi.n	800b16a <prvTimerTask+0xee>
 800b1a2:	e8df f003 	tbb	[pc, r3]
 800b1a6:	0909      	.short	0x0909
 800b1a8:	543b3409 	.word	0x543b3409
 800b1ac:	3b340909 	.word	0x3b340909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1b0:	1d20      	adds	r0, r4, #4
 800b1b2:	f7fe fa3e 	bl	8009632 <uxListRemove>
 800b1b6:	e7e6      	b.n	800b186 <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1b8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1bc:	462a      	mov	r2, r5
 800b1be:	69a1      	ldr	r1, [r4, #24]
 800b1c0:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1c2:	f043 0301 	orr.w	r3, r3, #1
 800b1c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	4419      	add	r1, r3
 800b1ce:	f7ff fe9d 	bl	800af0c <prvInsertTimerInActiveList>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d0c9      	beq.n	800b16a <prvTimerTask+0xee>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1d6:	6a23      	ldr	r3, [r4, #32]
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b1e0:	0759      	lsls	r1, r3, #29
 800b1e2:	d5c2      	bpl.n	800b16a <prvTimerTask+0xee>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1e4:	69a2      	ldr	r2, [r4, #24]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9903      	ldr	r1, [sp, #12]
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f8cd b000 	str.w	fp, [sp]
 800b1f0:	440a      	add	r2, r1
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	f7ff feda 	bl	800afac <xTimerGenericCommand>
							configASSERT( xResult );
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1b6      	bne.n	800b16a <prvTimerTask+0xee>
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	e7fe      	b.n	800b20c <prvTimerTask+0x190>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b20e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b212:	f023 0301 	bic.w	r3, r3, #1
 800b216:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b21a:	e7a6      	b.n	800b16a <prvTimerTask+0xee>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b21c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b220:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b222:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b226:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b228:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b22c:	b941      	cbnz	r1, 800b240 <prvTimerTask+0x1c4>
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	e7fe      	b.n	800b23e <prvTimerTask+0x1c2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b240:	462b      	mov	r3, r5
 800b242:	462a      	mov	r2, r5
 800b244:	4429      	add	r1, r5
 800b246:	4620      	mov	r0, r4
 800b248:	f7ff fe60 	bl	800af0c <prvInsertTimerInActiveList>
					break;
 800b24c:	e78d      	b.n	800b16a <prvTimerTask+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b24e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b252:	079a      	lsls	r2, r3, #30
 800b254:	d4dd      	bmi.n	800b212 <prvTimerTask+0x196>
							vPortFree( pxTimer );
 800b256:	4620      	mov	r0, r4
 800b258:	f7fe f97c 	bl	8009554 <vPortFree>
 800b25c:	e785      	b.n	800b16a <prvTimerTask+0xee>
 800b25e:	bf00      	nop
 800b260:	24006a84 	.word	0x24006a84
 800b264:	24006b54 	.word	0x24006b54
 800b268:	24006a88 	.word	0x24006a88
 800b26c:	24006ba8 	.word	0x24006ba8
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800b274:	8880      	ldrh	r0, [r0, #4]
 800b276:	4770      	bx	lr

0800b278 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800b278:	2300      	movs	r3, #0
 800b27a:	8083      	strh	r3, [r0, #4]
 800b27c:	4770      	bx	lr
	...

0800b280 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b282:	6803      	ldr	r3, [r0, #0]
 800b284:	460e      	mov	r6, r1
 800b286:	2100      	movs	r1, #0
 800b288:	4605      	mov	r5, r0
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	4798      	blx	r3
 800b28e:	4604      	mov	r4, r0
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	4628      	mov	r0, r5
 800b294:	1b34      	subs	r4, r6, r4
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	b2a4      	uxth	r4, r4
 800b29a:	4798      	blx	r3
 800b29c:	88ab      	ldrh	r3, [r5, #4]
 800b29e:	fbb4 f4f0 	udiv	r4, r4, r0
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	d805      	bhi.n	800b2b2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800b2a6:	4b0e      	ldr	r3, [pc, #56]	; (800b2e0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800b2a8:	211e      	movs	r1, #30
 800b2aa:	4a0e      	ldr	r2, [pc, #56]	; (800b2e4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800b2ac:	480e      	ldr	r0, [pc, #56]	; (800b2e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800b2ae:	f00f fef5 	bl	801b09c <__assert_func>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	4798      	blx	r3
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	4607      	mov	r7, r0
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	4798      	blx	r3
 800b2c6:	1bf3      	subs	r3, r6, r7
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	fbb3 f2f0 	udiv	r2, r3, r0
 800b2ce:	fb02 3010 	mls	r0, r2, r0, r3
 800b2d2:	b118      	cbz	r0, 800b2dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800b2d4:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800b2d6:	211f      	movs	r1, #31
 800b2d8:	4a02      	ldr	r2, [pc, #8]	; (800b2e4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800b2da:	e7e7      	b.n	800b2ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800b2dc:	4620      	mov	r0, r4
 800b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e0:	0801d1c2 	.word	0x0801d1c2
 800b2e4:	0801d32e 	.word	0x0801d32e
 800b2e8:	0801d1d7 	.word	0x0801d1d7
 800b2ec:	0801d205 	.word	0x0801d205

0800b2f0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	6803      	ldr	r3, [r0, #0]
 800b2f4:	460d      	mov	r5, r1
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	4798      	blx	r3
 800b2fc:	4285      	cmp	r5, r0
 800b2fe:	d905      	bls.n	800b30c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800b300:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800b302:	2130      	movs	r1, #48	; 0x30
 800b304:	4a0c      	ldr	r2, [pc, #48]	; (800b338 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800b306:	480d      	ldr	r0, [pc, #52]	; (800b33c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800b308:	f00f fec8 	bl	801b09c <__assert_func>
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	4620      	mov	r0, r4
 800b310:	88a5      	ldrh	r5, [r4, #4]
 800b312:	69db      	ldr	r3, [r3, #28]
 800b314:	4798      	blx	r3
 800b316:	4285      	cmp	r5, r0
 800b318:	d303      	bcc.n	800b322 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800b31a:	4b09      	ldr	r3, [pc, #36]	; (800b340 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800b31c:	2131      	movs	r1, #49	; 0x31
 800b31e:	4a06      	ldr	r2, [pc, #24]	; (800b338 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800b320:	e7f1      	b.n	800b306 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	4620      	mov	r0, r4
 800b326:	88a1      	ldrh	r1, [r4, #4]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	4798      	blx	r3
 800b32c:	88a3      	ldrh	r3, [r4, #4]
 800b32e:	3301      	adds	r3, #1
 800b330:	80a3      	strh	r3, [r4, #4]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	0801d27f 	.word	0x0801d27f
 800b338:	0801d371 	.word	0x0801d371
 800b33c:	0801d1d7 	.word	0x0801d1d7
 800b340:	0801d296 	.word	0x0801d296

0800b344 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	6803      	ldr	r3, [r0, #0]
 800b348:	4616      	mov	r6, r2
 800b34a:	4604      	mov	r4, r0
 800b34c:	460d      	mov	r5, r1
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	4798      	blx	r3
 800b352:	4286      	cmp	r6, r0
 800b354:	d905      	bls.n	800b362 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800b358:	213a      	movs	r1, #58	; 0x3a
 800b35a:	4a06      	ldr	r2, [pc, #24]	; (800b374 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800b35c:	4806      	ldr	r0, [pc, #24]	; (800b378 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800b35e:	f00f fe9d 	bl	801b09c <__assert_func>
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	4629      	mov	r1, r5
 800b366:	4620      	mov	r0, r4
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b36e:	4718      	bx	r3
 800b370:	0801d27f 	.word	0x0801d27f
 800b374:	0801d2e4 	.word	0x0801d2e4
 800b378:	0801d1d7 	.word	0x0801d1d7

0800b37c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800b37c:	4770      	bx	lr
	...

0800b380 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800b380:	4a02      	ldr	r2, [pc, #8]	; (800b38c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800b382:	6002      	str	r2, [r0, #0]
 800b384:	2200      	movs	r2, #0
 800b386:	8082      	strh	r2, [r0, #4]
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	0801d2b8 	.word	0x0801d2b8

0800b390 <_ZN8touchgfx9Container13getFirstChildEv>:
 800b390:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b392:	4770      	bx	lr

0800b394 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800b394:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b396:	2000      	movs	r0, #0
 800b398:	b12b      	cbz	r3, 800b3a6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800b39a:	b920      	cbnz	r0, 800b3a6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800b39c:	1a5a      	subs	r2, r3, r1
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	4250      	negs	r0, r2
 800b3a2:	4150      	adcs	r0, r2
 800b3a4:	e7f8      	b.n	800b398 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800b3a6:	4770      	bx	lr

0800b3a8 <_ZN8touchgfx9Container9removeAllEv>:
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3ac:	b123      	cbz	r3, 800b3b8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800b3ae:	6999      	ldr	r1, [r3, #24]
 800b3b0:	6281      	str	r1, [r0, #40]	; 0x28
 800b3b2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800b3b6:	e7f8      	b.n	800b3aa <_ZN8touchgfx9Container9removeAllEv+0x2>
 800b3b8:	4770      	bx	lr

0800b3ba <_ZN8touchgfx9Container6unlinkEv>:
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	6283      	str	r3, [r0, #40]	; 0x28
 800b3be:	4770      	bx	lr

0800b3c0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	8002      	strh	r2, [r0, #0]
 800b3c4:	8042      	strh	r2, [r0, #2]
 800b3c6:	8082      	strh	r2, [r0, #4]
 800b3c8:	80c2      	strh	r2, [r0, #6]
 800b3ca:	4770      	bx	lr

0800b3cc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	460d      	mov	r5, r1
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b3d4:	b13c      	cbz	r4, 800b3e6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	4620      	mov	r0, r4
 800b3da:	4632      	mov	r2, r6
 800b3dc:	4629      	mov	r1, r5
 800b3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3e0:	4798      	blx	r3
 800b3e2:	69a4      	ldr	r4, [r4, #24]
 800b3e4:	e7f6      	b.n	800b3d4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}

0800b3e8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b3ee:	b134      	cbz	r4, 800b3fe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	4798      	blx	r3
 800b3fa:	69a4      	ldr	r4, [r4, #24]
 800b3fc:	e7f7      	b.n	800b3ee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}

0800b400 <_ZN8touchgfx9ContainerD1Ev>:
 800b400:	4770      	bx	lr

0800b402 <_ZN8touchgfx9ContainerD0Ev>:
 800b402:	b510      	push	{r4, lr}
 800b404:	4604      	mov	r4, r0
 800b406:	212c      	movs	r1, #44	; 0x2c
 800b408:	f00f fd32 	bl	801ae70 <_ZdlPvj>
 800b40c:	4620      	mov	r0, r4
 800b40e:	bd10      	pop	{r4, pc}

0800b410 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800b410:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b412:	b19b      	cbz	r3, 800b43c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800b414:	428b      	cmp	r3, r1
 800b416:	d109      	bne.n	800b42c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800b418:	699a      	ldr	r2, [r3, #24]
 800b41a:	2100      	movs	r1, #0
 800b41c:	6159      	str	r1, [r3, #20]
 800b41e:	6282      	str	r2, [r0, #40]	; 0x28
 800b420:	b902      	cbnz	r2, 800b424 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800b422:	4770      	bx	lr
 800b424:	6199      	str	r1, [r3, #24]
 800b426:	4770      	bx	lr
 800b428:	4613      	mov	r3, r2
 800b42a:	b13a      	cbz	r2, 800b43c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800b42c:	699a      	ldr	r2, [r3, #24]
 800b42e:	428a      	cmp	r2, r1
 800b430:	d1fa      	bne.n	800b428 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800b432:	698a      	ldr	r2, [r1, #24]
 800b434:	619a      	str	r2, [r3, #24]
 800b436:	2300      	movs	r3, #0
 800b438:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800b43c:	4770      	bx	lr

0800b43e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800b43e:	b410      	push	{r4}
 800b440:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b442:	4604      	mov	r4, r0
 800b444:	b92b      	cbnz	r3, 800b452 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800b446:	6803      	ldr	r3, [r0, #0]
 800b448:	4611      	mov	r1, r2
 800b44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b44e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b450:	4718      	bx	r3
 800b452:	b941      	cbnz	r1, 800b466 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800b454:	6193      	str	r3, [r2, #24]
 800b456:	6282      	str	r2, [r0, #40]	; 0x28
 800b458:	6154      	str	r4, [r2, #20]
 800b45a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	4603      	mov	r3, r0
 800b462:	2800      	cmp	r0, #0
 800b464:	d0f9      	beq.n	800b45a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800b466:	4299      	cmp	r1, r3
 800b468:	6998      	ldr	r0, [r3, #24]
 800b46a:	d1f9      	bne.n	800b460 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800b46c:	6190      	str	r0, [r2, #24]
 800b46e:	618a      	str	r2, [r1, #24]
 800b470:	e7f2      	b.n	800b458 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800b474 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800b474:	4288      	cmp	r0, r1
 800b476:	b508      	push	{r3, lr}
 800b478:	d105      	bne.n	800b486 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800b47a:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800b47c:	2123      	movs	r1, #35	; 0x23
 800b47e:	4a11      	ldr	r2, [pc, #68]	; (800b4c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b480:	4811      	ldr	r0, [pc, #68]	; (800b4c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800b482:	f00f fe0b 	bl	801b09c <__assert_func>
 800b486:	694b      	ldr	r3, [r1, #20]
 800b488:	b11b      	cbz	r3, 800b492 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800b48a:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800b48c:	2124      	movs	r1, #36	; 0x24
 800b48e:	4a0d      	ldr	r2, [pc, #52]	; (800b4c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b490:	e7f6      	b.n	800b480 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800b492:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800b496:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b498:	b913      	cbnz	r3, 800b4a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800b49a:	6281      	str	r1, [r0, #40]	; 0x28
 800b49c:	bd08      	pop	{r3, pc}
 800b49e:	4613      	mov	r3, r2
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	b12a      	cbz	r2, 800b4b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800b4a4:	428b      	cmp	r3, r1
 800b4a6:	d1fa      	bne.n	800b49e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800b4a8:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800b4aa:	2135      	movs	r1, #53	; 0x35
 800b4ac:	4a05      	ldr	r2, [pc, #20]	; (800b4c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b4ae:	e7e7      	b.n	800b480 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	d103      	bne.n	800b4bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800b4b4:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800b4b6:	2138      	movs	r1, #56	; 0x38
 800b4b8:	4a02      	ldr	r2, [pc, #8]	; (800b4c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b4ba:	e7e1      	b.n	800b480 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800b4bc:	6199      	str	r1, [r3, #24]
 800b4be:	e7ed      	b.n	800b49c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800b4c0:	0801d3af 	.word	0x0801d3af
 800b4c4:	0801d504 	.word	0x0801d504
 800b4c8:	0801d3db 	.word	0x0801d3db
 800b4cc:	0801d40e 	.word	0x0801d40e
 800b4d0:	0801d444 	.word	0x0801d444

0800b4d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	461f      	mov	r7, r3
 800b4da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b4de:	460d      	mov	r5, r1
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	b103      	cbz	r3, 800b4e6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800b4e4:	6038      	str	r0, [r7, #0]
 800b4e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b4e8:	b314      	cbz	r4, 800b530 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800b4ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b4ee:	b1eb      	cbz	r3, 800b52c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b4f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b4f4:	428d      	cmp	r5, r1
 800b4f6:	db19      	blt.n	800b52c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b4f8:	b289      	uxth	r1, r1
 800b4fa:	8923      	ldrh	r3, [r4, #8]
 800b4fc:	440b      	add	r3, r1
 800b4fe:	b21b      	sxth	r3, r3
 800b500:	429d      	cmp	r5, r3
 800b502:	da13      	bge.n	800b52c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b504:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800b508:	4296      	cmp	r6, r2
 800b50a:	db0f      	blt.n	800b52c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b50c:	b292      	uxth	r2, r2
 800b50e:	8963      	ldrh	r3, [r4, #10]
 800b510:	4413      	add	r3, r2
 800b512:	b21b      	sxth	r3, r3
 800b514:	429e      	cmp	r6, r3
 800b516:	da09      	bge.n	800b52c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	1ab2      	subs	r2, r6, r2
 800b51c:	1a69      	subs	r1, r5, r1
 800b51e:	4620      	mov	r0, r4
 800b520:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800b524:	b212      	sxth	r2, r2
 800b526:	463b      	mov	r3, r7
 800b528:	b209      	sxth	r1, r1
 800b52a:	47c0      	blx	r8
 800b52c:	69a4      	ldr	r4, [r4, #24]
 800b52e:	e7db      	b.n	800b4e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800b530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	4c6d      	ldr	r4, [pc, #436]	; (800b6f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800b53a:	b0a1      	sub	sp, #132	; 0x84
 800b53c:	4606      	mov	r6, r0
 800b53e:	6824      	ldr	r4, [r4, #0]
 800b540:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800b542:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800b546:	2400      	movs	r4, #0
 800b548:	9303      	str	r3, [sp, #12]
 800b54a:	802c      	strh	r4, [r5, #0]
 800b54c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800b54e:	802c      	strh	r4, [r5, #0]
 800b550:	601c      	str	r4, [r3, #0]
 800b552:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800b556:	f7ff ffbd 	bl	800b4d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800b55a:	f1b9 0f03 	cmp.w	r9, #3
 800b55e:	f340 80c1 	ble.w	800b6e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800b562:	4631      	mov	r1, r6
 800b564:	a80c      	add	r0, sp, #48	; 0x30
 800b566:	f004 fff1 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b56a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800b56e:	9306      	str	r3, [sp, #24]
 800b570:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b574:	9307      	str	r3, [sp, #28]
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	f8d3 a000 	ldr.w	sl, [r3]
 800b57c:	f1ba 0f00 	cmp.w	sl, #0
 800b580:	f000 80b3 	beq.w	800b6ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800b584:	4651      	mov	r1, sl
 800b586:	a810      	add	r0, sp, #64	; 0x40
 800b588:	f004 ffe0 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b58c:	2002      	movs	r0, #2
 800b58e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800b592:	9b01      	ldr	r3, [sp, #4]
 800b594:	9a06      	ldr	r2, [sp, #24]
 800b596:	fb91 f1f0 	sdiv	r1, r1, r0
 800b59a:	189d      	adds	r5, r3, r2
 800b59c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800b5a0:	9a07      	ldr	r2, [sp, #28]
 800b5a2:	4419      	add	r1, r3
 800b5a4:	9b02      	ldr	r3, [sp, #8]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800b5ac:	1a6d      	subs	r5, r5, r1
 800b5ae:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800b5b2:	fb92 f2f0 	sdiv	r2, r2, r0
 800b5b6:	440a      	add	r2, r1
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	435b      	muls	r3, r3
 800b5bc:	fb05 3505 	mla	r5, r5, r5, r3
 800b5c0:	4f4c      	ldr	r7, [pc, #304]	; (800b6f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800b5c2:	ac10      	add	r4, sp, #64	; 0x40
 800b5c4:	f1b9 0f0c 	cmp.w	r9, #12
 800b5c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5d4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800b5d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5dc:	f04f 0303 	mov.w	r3, #3
 800b5e0:	bfd8      	it	le
 800b5e2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800b5e6:	f04f 0400 	mov.w	r4, #0
 800b5ea:	f8cd 9000 	str.w	r9, [sp]
 800b5ee:	bfcc      	ite	gt
 800b5f0:	4698      	movgt	r8, r3
 800b5f2:	fb92 f8f3 	sdivle	r8, r2, r3
 800b5f6:	1c63      	adds	r3, r4, #1
 800b5f8:	aa10      	add	r2, sp, #64	; 0x40
 800b5fa:	f004 0401 	and.w	r4, r4, #1
 800b5fe:	f04f 0b00 	mov.w	fp, #0
 800b602:	9308      	str	r3, [sp, #32]
 800b604:	9b00      	ldr	r3, [sp, #0]
 800b606:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800b60a:	fb93 f3f8 	sdiv	r3, r3, r8
 800b60e:	3404      	adds	r4, #4
 800b610:	b29b      	uxth	r3, r3
 800b612:	9304      	str	r3, [sp, #16]
 800b614:	9a04      	ldr	r2, [sp, #16]
 800b616:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b61a:	fb13 f302 	smulbb	r3, r3, r2
 800b61e:	9a01      	ldr	r2, [sp, #4]
 800b620:	b29b      	uxth	r3, r3
 800b622:	1899      	adds	r1, r3, r2
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b62a:	b209      	sxth	r1, r1
 800b62c:	4299      	cmp	r1, r3
 800b62e:	db4d      	blt.n	800b6cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b630:	8932      	ldrh	r2, [r6, #8]
 800b632:	4413      	add	r3, r2
 800b634:	b21b      	sxth	r3, r3
 800b636:	4299      	cmp	r1, r3
 800b638:	da48      	bge.n	800b6cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b63a:	9b04      	ldr	r3, [sp, #16]
 800b63c:	6827      	ldr	r7, [r4, #0]
 800b63e:	fb17 f703 	smulbb	r7, r7, r3
 800b642:	9b02      	ldr	r3, [sp, #8]
 800b644:	b2bf      	uxth	r7, r7
 800b646:	18fa      	adds	r2, r7, r3
 800b648:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b64c:	b212      	sxth	r2, r2
 800b64e:	429a      	cmp	r2, r3
 800b650:	db3c      	blt.n	800b6cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b652:	8970      	ldrh	r0, [r6, #10]
 800b654:	4403      	add	r3, r0
 800b656:	b21b      	sxth	r3, r3
 800b658:	429a      	cmp	r2, r3
 800b65a:	da37      	bge.n	800b6cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b65c:	2300      	movs	r3, #0
 800b65e:	4630      	mov	r0, r6
 800b660:	930b      	str	r3, [sp, #44]	; 0x2c
 800b662:	ab0b      	add	r3, sp, #44	; 0x2c
 800b664:	f7ff ff36 	bl	800b4d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800b668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b66a:	b37a      	cbz	r2, 800b6cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b66c:	4552      	cmp	r2, sl
 800b66e:	d02d      	beq.n	800b6cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b670:	4611      	mov	r1, r2
 800b672:	a80e      	add	r0, sp, #56	; 0x38
 800b674:	9209      	str	r2, [sp, #36]	; 0x24
 800b676:	f004 ff69 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b67a:	f04f 0e02 	mov.w	lr, #2
 800b67e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800b682:	9a06      	ldr	r2, [sp, #24]
 800b684:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800b68e:	4413      	add	r3, r2
 800b690:	9a07      	ldr	r2, [sp, #28]
 800b692:	fb91 f1fe 	sdiv	r1, r1, lr
 800b696:	fb9c fcfe 	sdiv	ip, ip, lr
 800b69a:	4401      	add	r1, r0
 800b69c:	1a58      	subs	r0, r3, r1
 800b69e:	9b02      	ldr	r3, [sp, #8]
 800b6a0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800b6a4:	4413      	add	r3, r2
 800b6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6a8:	448c      	add	ip, r1
 800b6aa:	eba3 030c 	sub.w	r3, r3, ip
 800b6ae:	435b      	muls	r3, r3
 800b6b0:	fb00 3300 	mla	r3, r0, r0, r3
 800b6b4:	42ab      	cmp	r3, r5
 800b6b6:	d208      	bcs.n	800b6ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800b6b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	9803      	ldr	r0, [sp, #12]
 800b6be:	6001      	str	r1, [r0, #0]
 800b6c0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b6c2:	9805      	ldr	r0, [sp, #20]
 800b6c4:	8008      	strh	r0, [r1, #0]
 800b6c6:	992b      	ldr	r1, [sp, #172]	; 0xac
 800b6c8:	800f      	strh	r7, [r1, #0]
 800b6ca:	4692      	mov	sl, r2
 800b6cc:	f10b 0b01 	add.w	fp, fp, #1
 800b6d0:	3408      	adds	r4, #8
 800b6d2:	f1bb 0f04 	cmp.w	fp, #4
 800b6d6:	d19d      	bne.n	800b614 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800b6d8:	9b00      	ldr	r3, [sp, #0]
 800b6da:	9c08      	ldr	r4, [sp, #32]
 800b6dc:	444b      	add	r3, r9
 800b6de:	4544      	cmp	r4, r8
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	d188      	bne.n	800b5f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800b6e4:	b021      	add	sp, #132	; 0x84
 800b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ea:	f04f 35ff 	mov.w	r5, #4294967295
 800b6ee:	e767      	b.n	800b5c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800b6f0:	24006bbc 	.word	0x24006bbc
 800b6f4:	0801c1a8 	.word	0x0801c1a8

0800b6f8 <_ZN8touchgfx4RectaNERKS0_>:
 800b6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6fc:	f9b1 7000 	ldrsh.w	r7, [r1]
 800b700:	888c      	ldrh	r4, [r1, #4]
 800b702:	f9b0 9000 	ldrsh.w	r9, [r0]
 800b706:	443c      	add	r4, r7
 800b708:	b2a4      	uxth	r4, r4
 800b70a:	fa0f f884 	sxth.w	r8, r4
 800b70e:	45c1      	cmp	r9, r8
 800b710:	da2f      	bge.n	800b772 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b712:	8882      	ldrh	r2, [r0, #4]
 800b714:	444a      	add	r2, r9
 800b716:	b292      	uxth	r2, r2
 800b718:	fa0f fe82 	sxth.w	lr, r2
 800b71c:	4577      	cmp	r7, lr
 800b71e:	da28      	bge.n	800b772 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b720:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800b724:	88cb      	ldrh	r3, [r1, #6]
 800b726:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800b72a:	442b      	add	r3, r5
 800b72c:	b21b      	sxth	r3, r3
 800b72e:	429e      	cmp	r6, r3
 800b730:	da1f      	bge.n	800b772 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b732:	88c3      	ldrh	r3, [r0, #6]
 800b734:	4433      	add	r3, r6
 800b736:	b29b      	uxth	r3, r3
 800b738:	fa0f fc83 	sxth.w	ip, r3
 800b73c:	4565      	cmp	r5, ip
 800b73e:	da18      	bge.n	800b772 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b740:	454f      	cmp	r7, r9
 800b742:	bfb8      	it	lt
 800b744:	464f      	movlt	r7, r9
 800b746:	42b5      	cmp	r5, r6
 800b748:	bfb8      	it	lt
 800b74a:	4635      	movlt	r5, r6
 800b74c:	45f0      	cmp	r8, lr
 800b74e:	bfd8      	it	le
 800b750:	4622      	movle	r2, r4
 800b752:	1bd2      	subs	r2, r2, r7
 800b754:	8082      	strh	r2, [r0, #4]
 800b756:	884a      	ldrh	r2, [r1, #2]
 800b758:	88c9      	ldrh	r1, [r1, #6]
 800b75a:	8007      	strh	r7, [r0, #0]
 800b75c:	440a      	add	r2, r1
 800b75e:	8045      	strh	r5, [r0, #2]
 800b760:	b292      	uxth	r2, r2
 800b762:	b211      	sxth	r1, r2
 800b764:	458c      	cmp	ip, r1
 800b766:	bfa8      	it	ge
 800b768:	4613      	movge	r3, r2
 800b76a:	1b5b      	subs	r3, r3, r5
 800b76c:	80c3      	strh	r3, [r0, #6]
 800b76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b772:	2300      	movs	r3, #0
 800b774:	8003      	strh	r3, [r0, #0]
 800b776:	8043      	strh	r3, [r0, #2]
 800b778:	8083      	strh	r3, [r0, #4]
 800b77a:	80c3      	strh	r3, [r0, #6]
 800b77c:	e7f7      	b.n	800b76e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800b77e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800b77e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	dd06      	ble.n	800b794 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800b786:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b78a:	2800      	cmp	r0, #0
 800b78c:	bfcc      	ite	gt
 800b78e:	2000      	movgt	r0, #0
 800b790:	2001      	movle	r0, #1
 800b792:	4770      	bx	lr
 800b794:	2001      	movs	r0, #1
 800b796:	4770      	bx	lr

0800b798 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800b798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79c:	2300      	movs	r3, #0
 800b79e:	4604      	mov	r4, r0
 800b7a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800b7a2:	8003      	strh	r3, [r0, #0]
 800b7a4:	8043      	strh	r3, [r0, #2]
 800b7a6:	8083      	strh	r3, [r0, #4]
 800b7a8:	80c3      	strh	r3, [r0, #6]
 800b7aa:	2d00      	cmp	r5, #0
 800b7ac:	d040      	beq.n	800b830 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800b7ae:	1d28      	adds	r0, r5, #4
 800b7b0:	f7ff ffe5 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b7b4:	b988      	cbnz	r0, 800b7da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff ffe1 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b7bc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800b7c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800b7c4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800b7c8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800b7cc:	b138      	cbz	r0, 800b7de <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800b7ce:	8022      	strh	r2, [r4, #0]
 800b7d0:	8063      	strh	r3, [r4, #2]
 800b7d2:	f8a4 e004 	strh.w	lr, [r4, #4]
 800b7d6:	f8a4 c006 	strh.w	ip, [r4, #6]
 800b7da:	69ad      	ldr	r5, [r5, #24]
 800b7dc:	e7e5      	b.n	800b7aa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800b7de:	f9b4 0000 	ldrsh.w	r0, [r4]
 800b7e2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b7e6:	4290      	cmp	r0, r2
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800b7ee:	460e      	mov	r6, r1
 800b7f0:	bfa8      	it	ge
 800b7f2:	4617      	movge	r7, r2
 800b7f4:	4299      	cmp	r1, r3
 800b7f6:	4472      	add	r2, lr
 800b7f8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800b7fc:	bfa8      	it	ge
 800b7fe:	461e      	movge	r6, r3
 800b800:	4440      	add	r0, r8
 800b802:	4471      	add	r1, lr
 800b804:	4463      	add	r3, ip
 800b806:	b200      	sxth	r0, r0
 800b808:	8027      	strh	r7, [r4, #0]
 800b80a:	b212      	sxth	r2, r2
 800b80c:	8066      	strh	r6, [r4, #2]
 800b80e:	b209      	sxth	r1, r1
 800b810:	b21b      	sxth	r3, r3
 800b812:	4290      	cmp	r0, r2
 800b814:	bfac      	ite	ge
 800b816:	ebc7 0200 	rsbge	r2, r7, r0
 800b81a:	ebc7 0202 	rsblt	r2, r7, r2
 800b81e:	4299      	cmp	r1, r3
 800b820:	bfac      	ite	ge
 800b822:	ebc6 0301 	rsbge	r3, r6, r1
 800b826:	ebc6 0303 	rsblt	r3, r6, r3
 800b82a:	80a2      	strh	r2, [r4, #4]
 800b82c:	80e3      	strh	r3, [r4, #6]
 800b82e:	e7d4      	b.n	800b7da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800b830:	4620      	mov	r0, r4
 800b832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b836 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800b836:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b83a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b83e:	b383      	cbz	r3, 800b8a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800b840:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b842:	b374      	cbz	r4, 800b8a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800b844:	f9b1 5000 	ldrsh.w	r5, [r1]
 800b848:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800b84c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800b850:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800b854:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b858:	b303      	cbz	r3, 800b89c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800b85a:	4668      	mov	r0, sp
 800b85c:	1d21      	adds	r1, r4, #4
 800b85e:	f8ad 5000 	strh.w	r5, [sp]
 800b862:	f8ad 6002 	strh.w	r6, [sp, #2]
 800b866:	f8ad 7004 	strh.w	r7, [sp, #4]
 800b86a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800b86e:	f7ff ff43 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800b872:	4668      	mov	r0, sp
 800b874:	f7ff ff83 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b878:	b980      	cbnz	r0, 800b89c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800b87a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b87e:	4669      	mov	r1, sp
 800b880:	88a2      	ldrh	r2, [r4, #4]
 800b882:	4620      	mov	r0, r4
 800b884:	1a9b      	subs	r3, r3, r2
 800b886:	88e2      	ldrh	r2, [r4, #6]
 800b888:	f8ad 3000 	strh.w	r3, [sp]
 800b88c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	4798      	blx	r3
 800b89c:	69a4      	ldr	r4, [r4, #24]
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	d1d8      	bne.n	800b854 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800b8a2:	b002      	add	sp, #8
 800b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800b8a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b8ae:	460d      	mov	r5, r1
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	b323      	cbz	r3, 800b8fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b8b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b8b6:	b314      	cbz	r4, 800b8fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b8b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b8bc:	b1eb      	cbz	r3, 800b8fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b8be:	6828      	ldr	r0, [r5, #0]
 800b8c0:	466b      	mov	r3, sp
 800b8c2:	6869      	ldr	r1, [r5, #4]
 800b8c4:	c303      	stmia	r3!, {r0, r1}
 800b8c6:	4668      	mov	r0, sp
 800b8c8:	1d21      	adds	r1, r4, #4
 800b8ca:	f7ff ff15 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800b8ce:	4668      	mov	r0, sp
 800b8d0:	f7ff ff55 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b8d4:	b988      	cbnz	r0, 800b8fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b8d6:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8da:	4669      	mov	r1, sp
 800b8dc:	88a2      	ldrh	r2, [r4, #4]
 800b8de:	4620      	mov	r0, r4
 800b8e0:	1a9b      	subs	r3, r3, r2
 800b8e2:	88e2      	ldrh	r2, [r4, #6]
 800b8e4:	f8ad 3000 	strh.w	r3, [sp]
 800b8e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b8ec:	1a9b      	subs	r3, r3, r2
 800b8ee:	4632      	mov	r2, r6
 800b8f0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b8f4:	6823      	ldr	r3, [r4, #0]
 800b8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f8:	4798      	blx	r3
 800b8fa:	69a4      	ldr	r4, [r4, #24]
 800b8fc:	e7db      	b.n	800b8b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800b8fe:	b002      	add	sp, #8
 800b900:	bd70      	pop	{r4, r5, r6, pc}

0800b902 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800b902:	6803      	ldr	r3, [r0, #0]
 800b904:	b513      	push	{r0, r1, r4, lr}
 800b906:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800b90a:	2300      	movs	r3, #0
 800b90c:	e9cd 3300 	strd	r3, r3, [sp]
 800b910:	466b      	mov	r3, sp
 800b912:	47a0      	blx	r4
 800b914:	b002      	add	sp, #8
 800b916:	bd10      	pop	{r4, pc}

0800b918 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800b918:	2301      	movs	r3, #1
 800b91a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b91e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b922:	4770      	bx	lr

0800b924 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800b924:	2301      	movs	r3, #1
 800b926:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b92a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b92e:	4770      	bx	lr

0800b930 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800b930:	6843      	ldr	r3, [r0, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	725a      	strb	r2, [r3, #9]
 800b936:	6840      	ldr	r0, [r0, #4]
 800b938:	6803      	ldr	r3, [r0, #0]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	4718      	bx	r3

0800b93e <_ZN8touchgfx3HAL8flushDMAEv>:
 800b93e:	6840      	ldr	r0, [r0, #4]
 800b940:	6803      	ldr	r3, [r0, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	4718      	bx	r3

0800b946 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800b946:	b530      	push	{r4, r5, lr}
 800b948:	b08b      	sub	sp, #44	; 0x2c
 800b94a:	6804      	ldr	r4, [r0, #0]
 800b94c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800b950:	9509      	str	r5, [sp, #36]	; 0x24
 800b952:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800b956:	9508      	str	r5, [sp, #32]
 800b958:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800b95c:	9507      	str	r5, [sp, #28]
 800b95e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800b962:	9506      	str	r5, [sp, #24]
 800b964:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800b968:	9505      	str	r5, [sp, #20]
 800b96a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800b96e:	9504      	str	r5, [sp, #16]
 800b970:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800b974:	9503      	str	r5, [sp, #12]
 800b976:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800b97a:	9502      	str	r5, [sp, #8]
 800b97c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800b980:	e9cd 3500 	strd	r3, r5, [sp]
 800b984:	4613      	mov	r3, r2
 800b986:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800b988:	2200      	movs	r2, #0
 800b98a:	47a0      	blx	r4
 800b98c:	b00b      	add	sp, #44	; 0x2c
 800b98e:	bd30      	pop	{r4, r5, pc}

0800b990 <_ZN8touchgfx3HAL10beginFrameEv>:
 800b990:	4b04      	ldr	r3, [pc, #16]	; (800b9a4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	b123      	cbz	r3, 800b9a0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800b996:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800b99a:	f080 0001 	eor.w	r0, r0, #1
 800b99e:	4770      	bx	lr
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	4770      	bx	lr
 800b9a4:	24006bba 	.word	0x24006bba

0800b9a8 <_ZN8touchgfx3HAL8endFrameEv>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	6840      	ldr	r0, [r0, #4]
 800b9ae:	6803      	ldr	r3, [r0, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	4798      	blx	r3
 800b9b4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800b9b8:	b113      	cbz	r3, 800b9c0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b9c0:	bd10      	pop	{r4, pc}

0800b9c2 <_ZN8touchgfx3HAL10initializeEv>:
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	f7f6 f9d7 	bl	8001d78 <_ZN8touchgfx10OSWrappers10initializeEv>
 800b9ca:	6860      	ldr	r0, [r4, #4]
 800b9cc:	6803      	ldr	r3, [r0, #0]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	4798      	blx	r3
 800b9d2:	68e0      	ldr	r0, [r4, #12]
 800b9d4:	6803      	ldr	r3, [r0, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	4798      	blx	r3
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	4620      	mov	r0, r4
 800b9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9e4:	4718      	bx	r3
	...

0800b9e8 <_ZN8touchgfx3HAL4tickEv>:
 800b9e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b9ea:	6803      	ldr	r3, [r0, #0]
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	4d5c      	ldr	r5, [pc, #368]	; (800bb60 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800b9f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9f4:	4798      	blx	r3
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	f000 8097 	beq.w	800bb2a <_ZN8touchgfx3HAL4tickEv+0x142>
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	2600      	movs	r6, #0
 800ba00:	f7f6 f838 	bl	8001a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ba04:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800ba08:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800ba0c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ba10:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800ba14:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800ba18:	b133      	cbz	r3, 800ba28 <_ZN8touchgfx3HAL4tickEv+0x40>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba22:	4798      	blx	r3
 800ba24:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800ba28:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800ba2c:	2601      	movs	r6, #1
 800ba2e:	6862      	ldr	r2, [r4, #4]
 800ba30:	f083 0301 	eor.w	r3, r3, #1
 800ba34:	702e      	strb	r6, [r5, #0]
 800ba36:	7253      	strb	r3, [r2, #9]
 800ba38:	f003 fd6e 	bl	800f518 <_ZN8touchgfx11Application11getInstanceEv>
 800ba3c:	6803      	ldr	r3, [r0, #0]
 800ba3e:	4631      	mov	r1, r6
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	4798      	blx	r3
 800ba44:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800ba48:	b90b      	cbnz	r3, 800ba4e <_ZN8touchgfx3HAL4tickEv+0x66>
 800ba4a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800ba4e:	f003 fd63 	bl	800f518 <_ZN8touchgfx11Application11getInstanceEv>
 800ba52:	6803      	ldr	r3, [r0, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	4798      	blx	r3
 800ba58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba5a:	6803      	ldr	r3, [r0, #0]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	4798      	blx	r3
 800ba60:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800ba64:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ba70:	b10a      	cbz	r2, 800ba76 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1eb      	bne.n	800ba4e <_ZN8touchgfx3HAL4tickEv+0x66>
 800ba76:	4a3b      	ldr	r2, [pc, #236]	; (800bb64 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ba78:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800ba7c:	7813      	ldrb	r3, [r2, #0]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	b25b      	sxtb	r3, r3
 800ba82:	4299      	cmp	r1, r3
 800ba84:	7013      	strb	r3, [r2, #0]
 800ba86:	dc10      	bgt.n	800baaa <_ZN8touchgfx3HAL4tickEv+0xc2>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	68e0      	ldr	r0, [r4, #12]
 800ba8c:	a902      	add	r1, sp, #8
 800ba8e:	7013      	strb	r3, [r2, #0]
 800ba90:	aa03      	add	r2, sp, #12
 800ba92:	6803      	ldr	r3, [r0, #0]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	4798      	blx	r3
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d051      	beq.n	800bb42 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800ba9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800baa2:	4620      	mov	r0, r4
 800baa4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800baa8:	4798      	blx	r3
 800baaa:	2300      	movs	r3, #0
 800baac:	6960      	ldr	r0, [r4, #20]
 800baae:	f88d 3007 	strb.w	r3, [sp, #7]
 800bab2:	b158      	cbz	r0, 800bacc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800bab4:	6803      	ldr	r3, [r0, #0]
 800bab6:	f10d 0107 	add.w	r1, sp, #7
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	4798      	blx	r3
 800babe:	b128      	cbz	r0, 800bacc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800bac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bac2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800bac6:	6803      	ldr	r3, [r0, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	4798      	blx	r3
 800bacc:	f104 001c 	add.w	r0, r4, #28
 800bad0:	f00f f8f6 	bl	801acc0 <_ZN8touchgfx8Gestures4tickEv>
 800bad4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800bad8:	b30b      	cbz	r3, 800bb1e <_ZN8touchgfx3HAL4tickEv+0x136>
 800bada:	6920      	ldr	r0, [r4, #16]
 800badc:	6803      	ldr	r3, [r0, #0]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	4798      	blx	r3
 800bae2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bae4:	4606      	mov	r6, r0
 800bae6:	b903      	cbnz	r3, 800baea <_ZN8touchgfx3HAL4tickEv+0x102>
 800bae8:	6720      	str	r0, [r4, #112]	; 0x70
 800baea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800baec:	4a1e      	ldr	r2, [pc, #120]	; (800bb68 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800baee:	1af3      	subs	r3, r6, r3
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d914      	bls.n	800bb1e <_ZN8touchgfx3HAL4tickEv+0x136>
 800baf4:	6920      	ldr	r0, [r4, #16]
 800baf6:	6803      	ldr	r3, [r0, #0]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	4798      	blx	r3
 800bafc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bafe:	2264      	movs	r2, #100	; 0x64
 800bb00:	1af3      	subs	r3, r6, r3
 800bb02:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb06:	fbb0 f0f3 	udiv	r0, r0, r3
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	dc1e      	bgt.n	800bb4c <_ZN8touchgfx3HAL4tickEv+0x164>
 800bb0e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800bb12:	6920      	ldr	r0, [r4, #16]
 800bb14:	2100      	movs	r1, #0
 800bb16:	6803      	ldr	r3, [r0, #0]
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	4798      	blx	r3
 800bb1c:	6726      	str	r6, [r4, #112]	; 0x70
 800bb1e:	f003 fcfb 	bl	800f518 <_ZN8touchgfx11Application11getInstanceEv>
 800bb22:	6803      	ldr	r3, [r0, #0]
 800bb24:	2100      	movs	r1, #0
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	4798      	blx	r3
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb32:	4798      	blx	r3
 800bb34:	2001      	movs	r0, #1
 800bb36:	f7f5 ffb5 	bl	8001aa4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	702b      	strb	r3, [r5, #0]
 800bb3e:	b004      	add	sp, #16
 800bb40:	bd70      	pop	{r4, r5, r6, pc}
 800bb42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb46:	4620      	mov	r0, r4
 800bb48:	4798      	blx	r3
 800bb4a:	e7ae      	b.n	800baaa <_ZN8touchgfx3HAL4tickEv+0xc2>
 800bb4c:	2863      	cmp	r0, #99	; 0x63
 800bb4e:	bfcb      	itete	gt
 800bb50:	2300      	movgt	r3, #0
 800bb52:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800bb56:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800bb5a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800bb5e:	e7d8      	b.n	800bb12 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800bb60:	24006bc0 	.word	0x24006bc0
 800bb64:	24006bc1 	.word	0x24006bc1
 800bb68:	05f5e100 	.word	0x05f5e100

0800bb6c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800bb6c:	f7f6 b934 	b.w	8001dd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800bb70 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800bb70:	6581      	str	r1, [r0, #88]	; 0x58
 800bb72:	301c      	adds	r0, #28
 800bb74:	f00f b8a2 	b.w	801acbc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800bb78 <_ZN8touchgfx3HAL5touchEll>:
 800bb78:	b530      	push	{r4, r5, lr}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	a804      	add	r0, sp, #16
 800bb80:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800bb84:	f003 fa62 	bl	800f04c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800bb88:	9b04      	ldr	r3, [sp, #16]
 800bb8a:	a906      	add	r1, sp, #24
 800bb8c:	a803      	add	r0, sp, #12
 800bb8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bb92:	9b05      	ldr	r3, [sp, #20]
 800bb94:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800bb98:	f003 faaa 	bl	800f0f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800bb9c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800bba0:	f104 001c 	add.w	r0, r4, #28
 800bba4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800bba8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800bbac:	b189      	cbz	r1, 800bbd2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800bbae:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800bbba:	462a      	mov	r2, r5
 800bbbc:	f00f f88e 	bl	801acdc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800bbc0:	b128      	cbz	r0, 800bbce <_ZN8touchgfx3HAL5touchEll+0x56>
 800bbc2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800bbc6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800bbc8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800bbcc:	6623      	str	r3, [r4, #96]	; 0x60
 800bbce:	b007      	add	sp, #28
 800bbd0:	bd30      	pop	{r4, r5, pc}
 800bbd2:	f00f f8c7 	bl	801ad64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800bbdc:	e7f1      	b.n	800bbc2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800bbde <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d046      	beq.n	800bc72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800bbe4:	ea81 0002 	eor.w	r0, r1, r2
 800bbe8:	07c4      	lsls	r4, r0, #31
 800bbea:	d508      	bpl.n	800bbfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800bbec:	440b      	add	r3, r1
 800bbee:	3a01      	subs	r2, #1
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	d93e      	bls.n	800bc72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800bbf4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800bbf8:	f801 0b01 	strb.w	r0, [r1], #1
 800bbfc:	e7f8      	b.n	800bbf0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800bbfe:	07d0      	lsls	r0, r2, #31
 800bc00:	bf42      	ittt	mi
 800bc02:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800bc06:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800bc0a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d911      	bls.n	800bc36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800bc12:	ea81 0402 	eor.w	r4, r1, r2
 800bc16:	4610      	mov	r0, r2
 800bc18:	07a4      	lsls	r4, r4, #30
 800bc1a:	d022      	beq.n	800bc62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800bc1c:	f023 0401 	bic.w	r4, r3, #1
 800bc20:	440c      	add	r4, r1
 800bc22:	428c      	cmp	r4, r1
 800bc24:	4602      	mov	r2, r0
 800bc26:	d904      	bls.n	800bc32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800bc28:	8812      	ldrh	r2, [r2, #0]
 800bc2a:	3002      	adds	r0, #2
 800bc2c:	f821 2b02 	strh.w	r2, [r1], #2
 800bc30:	e7f7      	b.n	800bc22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	f023 0003 	bic.w	r0, r3, #3
 800bc3a:	4408      	add	r0, r1
 800bc3c:	4288      	cmp	r0, r1
 800bc3e:	4614      	mov	r4, r2
 800bc40:	d904      	bls.n	800bc4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800bc42:	6824      	ldr	r4, [r4, #0]
 800bc44:	3204      	adds	r2, #4
 800bc46:	f841 4b04 	str.w	r4, [r1], #4
 800bc4a:	e7f7      	b.n	800bc3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800bc4c:	f003 0303 	and.w	r3, r3, #3
 800bc50:	3a01      	subs	r2, #1
 800bc52:	440b      	add	r3, r1
 800bc54:	428b      	cmp	r3, r1
 800bc56:	d90c      	bls.n	800bc72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800bc58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800bc5c:	f801 0b01 	strb.w	r0, [r1], #1
 800bc60:	e7f8      	b.n	800bc54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800bc62:	0790      	lsls	r0, r2, #30
 800bc64:	d0e7      	beq.n	800bc36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800bc66:	f832 0b02 	ldrh.w	r0, [r2], #2
 800bc6a:	3b02      	subs	r3, #2
 800bc6c:	f821 0b02 	strh.w	r0, [r1], #2
 800bc70:	e7e1      	b.n	800bc36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800bc72:	2001      	movs	r0, #1
 800bc74:	bd10      	pop	{r4, pc}

0800bc76 <_ZN8touchgfx3HAL7noTouchEv>:
 800bc76:	b510      	push	{r4, lr}
 800bc78:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	b153      	cbz	r3, 800bc96 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800bc80:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800bc84:	2101      	movs	r1, #1
 800bc86:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800bc8a:	301c      	adds	r0, #28
 800bc8c:	f00f f86a 	bl	801ad64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800bc90:	2300      	movs	r3, #0
 800bc92:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800bc96:	bd10      	pop	{r4, pc}

0800bc98 <_ZN8touchgfx3HAL3lcdEv>:
 800bc98:	4b04      	ldr	r3, [pc, #16]	; (800bcac <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bca0:	b10a      	cbz	r2, 800bca6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800bca2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bca4:	b900      	cbnz	r0, 800bca8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800bca6:	6898      	ldr	r0, [r3, #8]
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	24006bbc 	.word	0x24006bbc

0800bcb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800bcb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	6980      	ldr	r0, [r0, #24]
 800bcb8:	b085      	sub	sp, #20
 800bcba:	460f      	mov	r7, r1
 800bcbc:	4690      	mov	r8, r2
 800bcbe:	4699      	mov	r9, r3
 800bcc0:	b930      	cbnz	r0, 800bcd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800bcc2:	4b1c      	ldr	r3, [pc, #112]	; (800bd34 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800bcc4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800bcc8:	4a1b      	ldr	r2, [pc, #108]	; (800bd38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800bcca:	481c      	ldr	r0, [pc, #112]	; (800bd3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800bccc:	f00f f9e6 	bl	801b09c <__assert_func>
 800bcd0:	ad04      	add	r5, sp, #16
 800bcd2:	2600      	movs	r6, #0
 800bcd4:	f845 6d04 	str.w	r6, [r5, #-4]!
 800bcd8:	6806      	ldr	r6, [r0, #0]
 800bcda:	9501      	str	r5, [sp, #4]
 800bcdc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800bce0:	9500      	str	r5, [sp, #0]
 800bce2:	6835      	ldr	r5, [r6, #0]
 800bce4:	47a8      	blx	r5
 800bce6:	4d16      	ldr	r5, [pc, #88]	; (800bd40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800bce8:	4606      	mov	r6, r0
 800bcea:	f8a5 9000 	strh.w	r9, [r5]
 800bcee:	f7ff ffd3 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800bcf2:	6803      	ldr	r3, [r0, #0]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	4798      	blx	r3
 800bcf8:	2801      	cmp	r0, #1
 800bcfa:	d012      	beq.n	800bd22 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800bcfc:	d306      	bcc.n	800bd0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800bcfe:	280d      	cmp	r0, #13
 800bd00:	d80b      	bhi.n	800bd1a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800bd02:	4b10      	ldr	r3, [pc, #64]	; (800bd44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800bd04:	f240 1167 	movw	r1, #359	; 0x167
 800bd08:	4a0b      	ldr	r2, [pc, #44]	; (800bd38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800bd0a:	e7de      	b.n	800bcca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800bd0c:	882b      	ldrh	r3, [r5, #0]
 800bd0e:	fb08 7203 	mla	r2, r8, r3, r7
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800bd18:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	b005      	add	sp, #20
 800bd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd22:	882a      	ldrh	r2, [r5, #0]
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	fb08 7202 	mla	r2, r8, r2, r7
 800bd2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800bd2e:	1a9a      	subs	r2, r3, r2
 800bd30:	63e2      	str	r2, [r4, #60]	; 0x3c
 800bd32:	e7f2      	b.n	800bd1a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800bd34:	0801d6ac 	.word	0x0801d6ac
 800bd38:	0801d96a 	.word	0x0801d96a
 800bd3c:	0801d6f1 	.word	0x0801d6f1
 800bd40:	24006bb6 	.word	0x24006bb6
 800bd44:	0801d717 	.word	0x0801d717

0800bd48 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800bd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4a:	b08b      	sub	sp, #44	; 0x2c
 800bd4c:	4617      	mov	r7, r2
 800bd4e:	4604      	mov	r4, r0
 800bd50:	460e      	mov	r6, r1
 800bd52:	461d      	mov	r5, r3
 800bd54:	f7ff ffa0 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800bd58:	6803      	ldr	r3, [r0, #0]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	4798      	blx	r3
 800bd5e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800bd62:	9007      	str	r0, [sp, #28]
 800bd64:	4631      	mov	r1, r6
 800bd66:	6822      	ldr	r2, [r4, #0]
 800bd68:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800bd6c:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800bd6e:	4620      	mov	r0, r4
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	9306      	str	r3, [sp, #24]
 800bd74:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800bd7e:	9304      	str	r3, [sp, #16]
 800bd80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800bd84:	9303      	str	r3, [sp, #12]
 800bd86:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800bd8a:	9302      	str	r3, [sp, #8]
 800bd8c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800bd90:	e9cd 5300 	strd	r5, r3, [sp]
 800bd94:	463b      	mov	r3, r7
 800bd96:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800bd98:	2200      	movs	r2, #0
 800bd9a:	47a8      	blx	r5
 800bd9c:	b00b      	add	sp, #44	; 0x2c
 800bd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bda0:	24006bb6 	.word	0x24006bb6

0800bda4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800bda4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bda8:	4698      	mov	r8, r3
 800bdaa:	6803      	ldr	r3, [r0, #0]
 800bdac:	b08b      	sub	sp, #44	; 0x2c
 800bdae:	4617      	mov	r7, r2
 800bdb0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800bdb2:	460e      	mov	r6, r1
 800bdb4:	4b13      	ldr	r3, [pc, #76]	; (800be04 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	f8b3 9000 	ldrh.w	r9, [r3]
 800bdbc:	f7ff ff6c 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800bdc0:	6803      	ldr	r3, [r0, #0]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc4:	4798      	blx	r3
 800bdc6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bdca:	2200      	movs	r2, #0
 800bdcc:	4631      	mov	r1, r6
 800bdce:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800bdda:	2301      	movs	r3, #1
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800bdee:	9302      	str	r3, [sp, #8]
 800bdf0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800bdf4:	e9cd 8300 	strd	r8, r3, [sp]
 800bdf8:	463b      	mov	r3, r7
 800bdfa:	47a8      	blx	r5
 800bdfc:	b00b      	add	sp, #44	; 0x2c
 800bdfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be02:	bf00      	nop
 800be04:	24006bb6 	.word	0x24006bb6

0800be08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800be08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4698      	mov	r8, r3
 800be0e:	6803      	ldr	r3, [r0, #0]
 800be10:	b087      	sub	sp, #28
 800be12:	460e      	mov	r6, r1
 800be14:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800be16:	4617      	mov	r7, r2
 800be18:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800be1a:	4604      	mov	r4, r0
 800be1c:	f8b3 9000 	ldrh.w	r9, [r3]
 800be20:	f7ff ff3a 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800be24:	6803      	ldr	r3, [r0, #0]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	4798      	blx	r3
 800be2a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800be2e:	463a      	mov	r2, r7
 800be30:	4631      	mov	r1, r6
 800be32:	f8cd 900c 	str.w	r9, [sp, #12]
 800be36:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800be3a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800be3e:	4620      	mov	r0, r4
 800be40:	9302      	str	r3, [sp, #8]
 800be42:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	4643      	mov	r3, r8
 800be50:	47a8      	blx	r5
 800be52:	b007      	add	sp, #28
 800be54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be58:	24006bb6 	.word	0x24006bb6

0800be5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	4604      	mov	r4, r0
 800be62:	b08f      	sub	sp, #60	; 0x3c
 800be64:	4610      	mov	r0, r2
 800be66:	460d      	mov	r5, r1
 800be68:	4691      	mov	r9, r2
 800be6a:	461e      	mov	r6, r3
 800be6c:	f006 fc4a 	bl	8012704 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800be70:	2800      	cmp	r0, #0
 800be72:	f000 809c 	beq.w	800bfae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	4620      	mov	r0, r4
 800be7a:	f8df b194 	ldr.w	fp, [pc, #404]	; 800c010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800be7e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800be82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be84:	4798      	blx	r3
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	4620      	mov	r0, r4
 800be8a:	f8df a188 	ldr.w	sl, [pc, #392]	; 800c014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be90:	4798      	blx	r3
 800be92:	f8bb 3000 	ldrh.w	r3, [fp]
 800be96:	4f5b      	ldr	r7, [pc, #364]	; (800c004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800be98:	9301      	str	r3, [sp, #4]
 800be9a:	f8ba 3000 	ldrh.w	r3, [sl]
 800be9e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800bea2:	4640      	mov	r0, r8
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	883b      	ldrh	r3, [r7, #0]
 800bea8:	9303      	str	r3, [sp, #12]
 800beaa:	4b57      	ldr	r3, [pc, #348]	; (800c008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800beac:	881a      	ldrh	r2, [r3, #0]
 800beae:	9305      	str	r3, [sp, #20]
 800beb0:	9204      	str	r2, [sp, #16]
 800beb2:	f006 fce1 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800beb6:	8038      	strh	r0, [r7, #0]
 800beb8:	4640      	mov	r0, r8
 800beba:	f006 fd17 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bebe:	9b05      	ldr	r3, [sp, #20]
 800bec0:	8018      	strh	r0, [r3, #0]
 800bec2:	4b52      	ldr	r3, [pc, #328]	; (800c00c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d174      	bne.n	800bfb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800beca:	883b      	ldrh	r3, [r7, #0]
 800becc:	f8aa 0000 	strh.w	r0, [sl]
 800bed0:	f8ab 3000 	strh.w	r3, [fp]
 800bed4:	4648      	mov	r0, r9
 800bed6:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800beda:	f006 fc13 	bl	8012704 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800bede:	2200      	movs	r2, #0
 800bee0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800bee4:	4611      	mov	r1, r2
 800bee6:	4628      	mov	r0, r5
 800bee8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800beec:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800bef0:	f7f6 fe9a 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 800bef4:	2301      	movs	r3, #1
 800bef6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800befa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800befe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	dd5c      	ble.n	800bfc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800bf06:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dd58      	ble.n	800bfc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800bf0e:	462a      	mov	r2, r5
 800bf10:	ab0a      	add	r3, sp, #40	; 0x28
 800bf12:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800bf16:	6851      	ldr	r1, [r2, #4]
 800bf18:	c303      	stmia	r3!, {r0, r1}
 800bf1a:	4631      	mov	r1, r6
 800bf1c:	a80a      	add	r0, sp, #40	; 0x28
 800bf1e:	f7ff fbeb 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800bf22:	4b38      	ldr	r3, [pc, #224]	; (800c004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800bf24:	2100      	movs	r1, #0
 800bf26:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bf2a:	4b37      	ldr	r3, [pc, #220]	; (800c008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800bf2c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800bf30:	aa0a      	add	r2, sp, #40	; 0x28
 800bf32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf36:	910c      	str	r1, [sp, #48]	; 0x30
 800bf38:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800bf3c:	ab08      	add	r3, sp, #32
 800bf3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf42:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf46:	4618      	mov	r0, r3
 800bf48:	a90c      	add	r1, sp, #48	; 0x30
 800bf4a:	f7ff fbd5 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800bf4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d13c      	bne.n	800bfce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800bf54:	2000      	movs	r0, #0
 800bf56:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	696b      	ldr	r3, [r5, #20]
 800bf5e:	a908      	add	r1, sp, #32
 800bf60:	682a      	ldr	r2, [r5, #0]
 800bf62:	4628      	mov	r0, r5
 800bf64:	9305      	str	r3, [sp, #20]
 800bf66:	616e      	str	r6, [r5, #20]
 800bf68:	6892      	ldr	r2, [r2, #8]
 800bf6a:	4790      	blx	r2
 800bf6c:	9b05      	ldr	r3, [sp, #20]
 800bf6e:	4652      	mov	r2, sl
 800bf70:	4649      	mov	r1, r9
 800bf72:	616b      	str	r3, [r5, #20]
 800bf74:	4628      	mov	r0, r5
 800bf76:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800bf7a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800bf7e:	f7f6 fe53 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 800bf82:	9a01      	ldr	r2, [sp, #4]
 800bf84:	4b22      	ldr	r3, [pc, #136]	; (800c010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800bf86:	4620      	mov	r0, r4
 800bf88:	801a      	strh	r2, [r3, #0]
 800bf8a:	9a02      	ldr	r2, [sp, #8]
 800bf8c:	4b21      	ldr	r3, [pc, #132]	; (800c014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800bf8e:	801a      	strh	r2, [r3, #0]
 800bf90:	9a03      	ldr	r2, [sp, #12]
 800bf92:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800bf94:	801a      	strh	r2, [r3, #0]
 800bf96:	4b1c      	ldr	r3, [pc, #112]	; (800c008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800bf98:	9a04      	ldr	r2, [sp, #16]
 800bf9a:	801a      	strh	r2, [r3, #0]
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa4:	4798      	blx	r3
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfac:	4798      	blx	r3
 800bfae:	b00f      	add	sp, #60	; 0x3c
 800bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb4:	883b      	ldrh	r3, [r7, #0]
 800bfb6:	f8ab 0000 	strh.w	r0, [fp]
 800bfba:	f8aa 3000 	strh.w	r3, [sl]
 800bfbe:	e789      	b.n	800bed4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800bfc0:	462a      	mov	r2, r5
 800bfc2:	ab0a      	add	r3, sp, #40	; 0x28
 800bfc4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800bfc8:	6851      	ldr	r1, [r2, #4]
 800bfca:	c303      	stmia	r3!, {r0, r1}
 800bfcc:	e7a9      	b.n	800bf22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800bfce:	a807      	add	r0, sp, #28
 800bfd0:	f006 fde4 	bl	8012b9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bfd8:	6803      	ldr	r3, [r0, #0]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfdc:	4798      	blx	r3
 800bfde:	4286      	cmp	r6, r0
 800bfe0:	d1b8      	bne.n	800bf54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800bfe2:	f7ff fe59 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800bfe6:	6803      	ldr	r3, [r0, #0]
 800bfe8:	4606      	mov	r6, r0
 800bfea:	a807      	add	r0, sp, #28
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	9305      	str	r3, [sp, #20]
 800bff0:	f006 fdd4 	bl	8012b9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800bff4:	9b05      	ldr	r3, [sp, #20]
 800bff6:	4601      	mov	r1, r0
 800bff8:	4630      	mov	r0, r6
 800bffa:	4798      	blx	r3
 800bffc:	f080 0001 	eor.w	r0, r0, #1
 800c000:	b2c0      	uxtb	r0, r0
 800c002:	e7a8      	b.n	800bf56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800c004:	24006bb0 	.word	0x24006bb0
 800c008:	24006bb2 	.word	0x24006bb2
 800c00c:	24006bb4 	.word	0x24006bb4
 800c010:	24006bb6 	.word	0x24006bb6
 800c014:	24006bb8 	.word	0x24006bb8

0800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800c018:	4b07      	ldr	r3, [pc, #28]	; (800c038 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800c01a:	b510      	push	{r4, lr}
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	4604      	mov	r4, r0
 800c020:	b13b      	cbz	r3, 800c032 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c022:	6803      	ldr	r3, [r0, #0]
 800c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c026:	4798      	blx	r3
 800c028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c02a:	4283      	cmp	r3, r0
 800c02c:	d101      	bne.n	800c032 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c02e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c030:	bd10      	pop	{r4, pc}
 800c032:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c034:	e7fc      	b.n	800c030 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800c036:	bf00      	nop
 800c038:	24006bba 	.word	0x24006bba

0800c03c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800c03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c040:	b088      	sub	sp, #32
 800c042:	4692      	mov	sl, r2
 800c044:	461d      	mov	r5, r3
 800c046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c04a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800c04e:	2400      	movs	r4, #0
 800c050:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800c054:	4606      	mov	r6, r0
 800c056:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800c05a:	fb09 a505 	mla	r5, r9, r5, sl
 800c05e:	9403      	str	r4, [sp, #12]
 800c060:	f8ad 8014 	strh.w	r8, [sp, #20]
 800c064:	f8ad 7016 	strh.w	r7, [sp, #22]
 800c068:	f88d 401c 	strb.w	r4, [sp, #28]
 800c06c:	e9cd 3100 	strd	r3, r1, [sp]
 800c070:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c074:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c078:	f7ff ffce 	bl	800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c07c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c080:	f8ad 901a 	strh.w	r9, [sp, #26]
 800c084:	f88d 401e 	strb.w	r4, [sp, #30]
 800c088:	9504      	str	r5, [sp, #16]
 800c08a:	f88d 401d 	strb.w	r4, [sp, #29]
 800c08e:	f88d 401f 	strb.w	r4, [sp, #31]
 800c092:	f1b8 0f00 	cmp.w	r8, #0
 800c096:	d000      	beq.n	800c09a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800c098:	b937      	cbnz	r7, 800c0a8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800c09a:	4b0d      	ldr	r3, [pc, #52]	; (800c0d0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800c09c:	f240 210b 	movw	r1, #523	; 0x20b
 800c0a0:	4a0c      	ldr	r2, [pc, #48]	; (800c0d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800c0a2:	480d      	ldr	r0, [pc, #52]	; (800c0d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800c0a4:	f00e fffa 	bl	801b09c <__assert_func>
 800c0a8:	6833      	ldr	r3, [r6, #0]
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	9c00      	ldr	r4, [sp, #0]
 800c0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b0:	4798      	blx	r3
 800c0b2:	4220      	tst	r0, r4
 800c0b4:	d104      	bne.n	800c0c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800c0b6:	4b09      	ldr	r3, [pc, #36]	; (800c0dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800c0b8:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800c0bc:	4a05      	ldr	r2, [pc, #20]	; (800c0d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800c0be:	e7f0      	b.n	800c0a2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800c0c0:	6870      	ldr	r0, [r6, #4]
 800c0c2:	4669      	mov	r1, sp
 800c0c4:	6803      	ldr	r3, [r0, #0]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	4798      	blx	r3
 800c0ca:	b008      	add	sp, #32
 800c0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d0:	0801d53f 	.word	0x0801d53f
 800c0d4:	0801d79f 	.word	0x0801d79f
 800c0d8:	0801d6f1 	.word	0x0801d6f1
 800c0dc:	0801d577 	.word	0x0801d577

0800c0e0 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800c0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e4:	b089      	sub	sp, #36	; 0x24
 800c0e6:	4693      	mov	fp, r2
 800c0e8:	461d      	mov	r5, r3
 800c0ea:	2400      	movs	r4, #0
 800c0ec:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800c0f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0f4:	468a      	mov	sl, r1
 800c0f6:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800c0fa:	fb09 b505 	mla	r5, r9, r5, fp
 800c0fe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800c102:	4606      	mov	r6, r0
 800c104:	9403      	str	r4, [sp, #12]
 800c106:	e9cd 3400 	strd	r3, r4, [sp]
 800c10a:	f7ff ff85 	bl	800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c10e:	f8ad 8014 	strh.w	r8, [sp, #20]
 800c112:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c116:	f8ad 7016 	strh.w	r7, [sp, #22]
 800c11a:	f8ad 4018 	strh.w	r4, [sp, #24]
 800c11e:	9504      	str	r5, [sp, #16]
 800c120:	f8ad 901a 	strh.w	r9, [sp, #26]
 800c124:	f8cd a00c 	str.w	sl, [sp, #12]
 800c128:	f8ad 401c 	strh.w	r4, [sp, #28]
 800c12c:	f88d 401e 	strb.w	r4, [sp, #30]
 800c130:	f88d 401f 	strb.w	r4, [sp, #31]
 800c134:	f1b8 0f00 	cmp.w	r8, #0
 800c138:	d000      	beq.n	800c13c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800c13a:	b937      	cbnz	r7, 800c14a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800c13c:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800c13e:	f240 2121 	movw	r1, #545	; 0x221
 800c142:	4a0d      	ldr	r2, [pc, #52]	; (800c178 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800c144:	480d      	ldr	r0, [pc, #52]	; (800c17c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800c146:	f00e ffa9 	bl	801b09c <__assert_func>
 800c14a:	6833      	ldr	r3, [r6, #0]
 800c14c:	4630      	mov	r0, r6
 800c14e:	9c00      	ldr	r4, [sp, #0]
 800c150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c152:	4798      	blx	r3
 800c154:	4220      	tst	r0, r4
 800c156:	d104      	bne.n	800c162 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800c158:	4b09      	ldr	r3, [pc, #36]	; (800c180 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800c15a:	f240 2122 	movw	r1, #546	; 0x222
 800c15e:	4a06      	ldr	r2, [pc, #24]	; (800c178 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800c160:	e7f0      	b.n	800c144 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800c162:	6870      	ldr	r0, [r6, #4]
 800c164:	4669      	mov	r1, sp
 800c166:	6803      	ldr	r3, [r0, #0]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	4798      	blx	r3
 800c16c:	b009      	add	sp, #36	; 0x24
 800c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c172:	bf00      	nop
 800c174:	0801d5bc 	.word	0x0801d5bc
 800c178:	0801d815 	.word	0x0801d815
 800c17c:	0801d6f1 	.word	0x0801d6f1
 800c180:	0801d5f4 	.word	0x0801d5f4

0800c184 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800c184:	b508      	push	{r3, lr}
 800c186:	290d      	cmp	r1, #13
 800c188:	d817      	bhi.n	800c1ba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800c18a:	e8df f001 	tbb	[pc, r1]
 800c18e:	090b      	.short	0x090b
 800c190:	0d0d0d07 	.word	0x0d0d0d07
 800c194:	1414140d 	.word	0x1414140d
 800c198:	0d0d1414 	.word	0x0d0d1414
 800c19c:	2020      	movs	r0, #32
 800c19e:	bd08      	pop	{r3, pc}
 800c1a0:	2018      	movs	r0, #24
 800c1a2:	e7fc      	b.n	800c19e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c1a4:	2010      	movs	r0, #16
 800c1a6:	e7fa      	b.n	800c19e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c1a8:	4b05      	ldr	r3, [pc, #20]	; (800c1c0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800c1aa:	f240 2182 	movw	r1, #642	; 0x282
 800c1ae:	4a05      	ldr	r2, [pc, #20]	; (800c1c4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800c1b0:	4805      	ldr	r0, [pc, #20]	; (800c1c8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800c1b2:	f00e ff73 	bl	801b09c <__assert_func>
 800c1b6:	2008      	movs	r0, #8
 800c1b8:	e7f1      	b.n	800c19e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e7ef      	b.n	800c19e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c1be:	bf00      	nop
 800c1c0:	0801d76d 	.word	0x0801d76d
 800c1c4:	0801db40 	.word	0x0801db40
 800c1c8:	0801d6f1 	.word	0x0801d6f1

0800c1cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	460d      	mov	r5, r1
 800c1d0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800c1d4:	4616      	mov	r6, r2
 800c1d6:	461c      	mov	r4, r3
 800c1d8:	f7ff ffd4 	bl	800c184 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800c1dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c1e0:	10c0      	asrs	r0, r0, #3
 800c1e2:	fb06 5101 	mla	r1, r6, r1, r5
 800c1e6:	fb00 4001 	mla	r0, r0, r1, r4
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}

0800c1ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800c1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f0:	b08a      	sub	sp, #40	; 0x28
 800c1f2:	f04f 0c00 	mov.w	ip, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	469a      	mov	sl, r3
 800c1fa:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800c1fe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800c202:	2d0b      	cmp	r5, #11
 800c204:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800c208:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c20c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800c210:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800c214:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800c218:	f8cd c014 	str.w	ip, [sp, #20]
 800c21c:	d12d      	bne.n	800c27a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800c21e:	2080      	movs	r0, #128	; 0x80
 800c220:	9204      	str	r2, [sp, #16]
 800c222:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800c226:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c22a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800c22e:	f8ad 701c 	strh.w	r7, [sp, #28]
 800c232:	f8ad 601e 	strh.w	r6, [sp, #30]
 800c236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c23a:	4620      	mov	r0, r4
 800c23c:	f7ff feec 	bl	800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c240:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800c244:	4603      	mov	r3, r0
 800c246:	4651      	mov	r1, sl
 800c248:	4620      	mov	r0, r4
 800c24a:	e9cd 9800 	strd	r9, r8, [sp]
 800c24e:	f7ff ffbd 	bl	800c1cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c252:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800c256:	9006      	str	r0, [sp, #24]
 800c258:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800c25c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800c260:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800c264:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800c268:	b107      	cbz	r7, 800c26c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800c26a:	b9d6      	cbnz	r6, 800c2a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800c26c:	4b17      	ldr	r3, [pc, #92]	; (800c2cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800c26e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800c272:	4a17      	ldr	r2, [pc, #92]	; (800c2d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800c274:	4817      	ldr	r0, [pc, #92]	; (800c2d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800c276:	f00e ff11 	bl	801b09c <__assert_func>
 800c27a:	2d02      	cmp	r5, #2
 800c27c:	d108      	bne.n	800c290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800c27e:	2bff      	cmp	r3, #255	; 0xff
 800c280:	d104      	bne.n	800c28c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800c282:	2800      	cmp	r0, #0
 800c284:	bf14      	ite	ne
 800c286:	2040      	movne	r0, #64	; 0x40
 800c288:	2020      	moveq	r0, #32
 800c28a:	e7c9      	b.n	800c220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c28c:	2040      	movs	r0, #64	; 0x40
 800c28e:	e7c7      	b.n	800c220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c290:	2bff      	cmp	r3, #255	; 0xff
 800c292:	d104      	bne.n	800c29e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800c294:	2800      	cmp	r0, #0
 800c296:	bf14      	ite	ne
 800c298:	2004      	movne	r0, #4
 800c29a:	2001      	moveq	r0, #1
 800c29c:	e7c0      	b.n	800c220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c29e:	2004      	movs	r0, #4
 800c2a0:	e7be      	b.n	800c220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	9d02      	ldr	r5, [sp, #8]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	4798      	blx	r3
 800c2ac:	4228      	tst	r0, r5
 800c2ae:	d104      	bne.n	800c2ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800c2b0:	4b09      	ldr	r3, [pc, #36]	; (800c2d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800c2b2:	f240 11d5 	movw	r1, #469	; 0x1d5
 800c2b6:	4a06      	ldr	r2, [pc, #24]	; (800c2d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800c2b8:	e7dc      	b.n	800c274 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800c2ba:	6860      	ldr	r0, [r4, #4]
 800c2bc:	a902      	add	r1, sp, #8
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	4798      	blx	r3
 800c2c4:	b00a      	add	sp, #40	; 0x28
 800c2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ca:	bf00      	nop
 800c2cc:	0801d53f 	.word	0x0801d53f
 800c2d0:	0801d9ce 	.word	0x0801d9ce
 800c2d4:	0801d6f1 	.word	0x0801d6f1
 800c2d8:	0801d577 	.word	0x0801d577

0800c2dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800c2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	b08b      	sub	sp, #44	; 0x2c
 800c2e2:	469b      	mov	fp, r3
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	4692      	mov	sl, r2
 800c2e8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800c2ec:	2600      	movs	r6, #0
 800c2ee:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800c2f2:	4689      	mov	r9, r1
 800c2f4:	2fff      	cmp	r7, #255	; 0xff
 800c2f6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800c2fa:	9605      	str	r6, [sp, #20]
 800c2fc:	bf14      	ite	ne
 800c2fe:	2308      	movne	r3, #8
 800c300:	2302      	moveq	r3, #2
 800c302:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800c306:	f7ff fe87 	bl	800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c30a:	465a      	mov	r2, fp
 800c30c:	4603      	mov	r3, r0
 800c30e:	4651      	mov	r1, sl
 800c310:	4620      	mov	r0, r4
 800c312:	e9cd 8500 	strd	r8, r5, [sp]
 800c316:	f7ff ff59 	bl	800c1cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c31a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c31e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800c322:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c326:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800c32a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800c32e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c332:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800c336:	9d02      	ldr	r5, [sp, #8]
 800c338:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800c33c:	6823      	ldr	r3, [r4, #0]
 800c33e:	9006      	str	r0, [sp, #24]
 800c340:	4620      	mov	r0, r4
 800c342:	f8ad 6020 	strh.w	r6, [sp, #32]
 800c346:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800c34a:	f8cd 9014 	str.w	r9, [sp, #20]
 800c34e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800c352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c354:	4798      	blx	r3
 800c356:	4228      	tst	r0, r5
 800c358:	d106      	bne.n	800c368 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800c35a:	4b07      	ldr	r3, [pc, #28]	; (800c378 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800c35c:	f240 2137 	movw	r1, #567	; 0x237
 800c360:	4a06      	ldr	r2, [pc, #24]	; (800c37c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800c362:	4807      	ldr	r0, [pc, #28]	; (800c380 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800c364:	f00e fe9a 	bl	801b09c <__assert_func>
 800c368:	6860      	ldr	r0, [r4, #4]
 800c36a:	a902      	add	r1, sp, #8
 800c36c:	6803      	ldr	r3, [r0, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	4798      	blx	r3
 800c372:	b00b      	add	sp, #44	; 0x2c
 800c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c378:	0801d577 	.word	0x0801d577
 800c37c:	0801daa5 	.word	0x0801daa5
 800c380:	0801d6f1 	.word	0x0801d6f1

0800c384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800c384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c388:	461f      	mov	r7, r3
 800c38a:	4b0b      	ldr	r3, [pc, #44]	; (800c3b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800c38c:	460d      	mov	r5, r1
 800c38e:	4616      	mov	r6, r2
 800c390:	f8b3 8000 	ldrh.w	r8, [r3]
 800c394:	4604      	mov	r4, r0
 800c396:	f7ff fc7f 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800c39a:	6803      	ldr	r3, [r0, #0]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39e:	4798      	blx	r3
 800c3a0:	463b      	mov	r3, r7
 800c3a2:	4632      	mov	r2, r6
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	e9cd 8000 	strd	r8, r0, [sp]
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f7ff ff0e 	bl	800c1cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c3b0:	b002      	add	sp, #8
 800c3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b6:	bf00      	nop
 800c3b8:	24006bb6 	.word	0x24006bb6

0800c3bc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800c3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c0:	4698      	mov	r8, r3
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4617      	mov	r7, r2
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800c3ce:	9303      	str	r3, [sp, #12]
 800c3d0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800c3d4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800c3d8:	f8ad 6014 	strh.w	r6, [sp, #20]
 800c3dc:	f8ad 5016 	strh.w	r5, [sp, #22]
 800c3e0:	e9cd 3100 	strd	r3, r1, [sp]
 800c3e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c3e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c3ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800c3f0:	f88d 301c 	strb.w	r3, [sp, #28]
 800c3f4:	f7ff fe10 	bl	800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c3f8:	4642      	mov	r2, r8
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	4620      	mov	r0, r4
 800c400:	f7ff ffc0 	bl	800c384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c404:	4b18      	ldr	r3, [pc, #96]	; (800c468 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800c406:	9004      	str	r0, [sp, #16]
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c40e:	f7ff fc43 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800c412:	6803      	ldr	r3, [r0, #0]
 800c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c416:	4798      	blx	r3
 800c418:	f88d 001e 	strb.w	r0, [sp, #30]
 800c41c:	f88d 001d 	strb.w	r0, [sp, #29]
 800c420:	b106      	cbz	r6, 800c424 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800c422:	b935      	cbnz	r5, 800c432 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800c424:	4b11      	ldr	r3, [pc, #68]	; (800c46c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800c426:	f240 11f1 	movw	r1, #497	; 0x1f1
 800c42a:	4a11      	ldr	r2, [pc, #68]	; (800c470 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800c42c:	4811      	ldr	r0, [pc, #68]	; (800c474 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800c42e:	f00e fe35 	bl	801b09c <__assert_func>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	4620      	mov	r0, r4
 800c436:	9d00      	ldr	r5, [sp, #0]
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	4798      	blx	r3
 800c43c:	4228      	tst	r0, r5
 800c43e:	d104      	bne.n	800c44a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800c440:	4b0d      	ldr	r3, [pc, #52]	; (800c478 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800c442:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800c446:	4a0a      	ldr	r2, [pc, #40]	; (800c470 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800c448:	e7f0      	b.n	800c42c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800c44a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c44c:	4669      	mov	r1, sp
 800c44e:	6860      	ldr	r0, [r4, #4]
 800c450:	9303      	str	r3, [sp, #12]
 800c452:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800c456:	f88d 301f 	strb.w	r3, [sp, #31]
 800c45a:	6803      	ldr	r3, [r0, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	4798      	blx	r3
 800c460:	b008      	add	sp, #32
 800c462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c466:	bf00      	nop
 800c468:	24006bb6 	.word	0x24006bb6
 800c46c:	0801d53f 	.word	0x0801d53f
 800c470:	0801d87a 	.word	0x0801d87a
 800c474:	0801d6f1 	.word	0x0801d6f1
 800c478:	0801d577 	.word	0x0801d577

0800c47c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800c47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c47e:	b08b      	sub	sp, #44	; 0x2c
 800c480:	4604      	mov	r4, r0
 800c482:	466b      	mov	r3, sp
 800c484:	e883 0006 	stmia.w	r3, {r1, r2}
 800c488:	4b20      	ldr	r3, [pc, #128]	; (800c50c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	b933      	cbnz	r3, 800c49c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800c48e:	4b20      	ldr	r3, [pc, #128]	; (800c510 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800c490:	f44f 7112 	mov.w	r1, #584	; 0x248
 800c494:	4a1f      	ldr	r2, [pc, #124]	; (800c514 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800c496:	4820      	ldr	r0, [pc, #128]	; (800c518 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800c498:	f00e fe00 	bl	801b09c <__assert_func>
 800c49c:	2301      	movs	r3, #1
 800c49e:	2500      	movs	r5, #0
 800c4a0:	f8bd 6000 	ldrh.w	r6, [sp]
 800c4a4:	9302      	str	r3, [sp, #8]
 800c4a6:	6803      	ldr	r3, [r0, #0]
 800c4a8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800c4ac:	9505      	str	r5, [sp, #20]
 800c4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b0:	4798      	blx	r3
 800c4b2:	463a      	mov	r2, r7
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f7ff ff63 	bl	800c384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c4be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c4c0:	9003      	str	r0, [sp, #12]
 800c4c2:	9306      	str	r3, [sp, #24]
 800c4c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c4c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c4cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c4d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c4d4:	4b11      	ldr	r3, [pc, #68]	; (800c51c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c4dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c4e0:	f7ff fbda 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800c4e4:	6803      	ldr	r3, [r0, #0]
 800c4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e8:	4798      	blx	r3
 800c4ea:	23ff      	movs	r3, #255	; 0xff
 800c4ec:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800c4f0:	a902      	add	r1, sp, #8
 800c4f2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800c4f6:	6860      	ldr	r0, [r4, #4]
 800c4f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c4fc:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800c500:	6803      	ldr	r3, [r0, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	4798      	blx	r3
 800c506:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c508:	b00b      	add	sp, #44	; 0x2c
 800c50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c50c:	24006bbb 	.word	0x24006bbb
 800c510:	0801d63e 	.word	0x0801d63e
 800c514:	0801d924 	.word	0x0801d924
 800c518:	0801d6f1 	.word	0x0801d6f1
 800c51c:	24006bb6 	.word	0x24006bb6

0800c520 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	b08a      	sub	sp, #40	; 0x28
 800c526:	2600      	movs	r6, #0
 800c528:	4604      	mov	r4, r0
 800c52a:	466d      	mov	r5, sp
 800c52c:	9605      	str	r6, [sp, #20]
 800c52e:	e885 0006 	stmia.w	r5, {r1, r2}
 800c532:	461d      	mov	r5, r3
 800c534:	2301      	movs	r3, #1
 800c536:	f8bd 7000 	ldrh.w	r7, [sp]
 800c53a:	9302      	str	r3, [sp, #8]
 800c53c:	6803      	ldr	r3, [r0, #0]
 800c53e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800c542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c544:	4798      	blx	r3
 800c546:	4642      	mov	r2, r8
 800c548:	4639      	mov	r1, r7
 800c54a:	4603      	mov	r3, r0
 800c54c:	4620      	mov	r0, r4
 800c54e:	f7ff ff19 	bl	800c384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c552:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c556:	9003      	str	r0, [sp, #12]
 800c558:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c55c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c560:	9506      	str	r5, [sp, #24]
 800c562:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c566:	4b0f      	ldr	r3, [pc, #60]	; (800c5a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c56e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c570:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c574:	f7ff fb90 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800c578:	6803      	ldr	r3, [r0, #0]
 800c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57c:	4798      	blx	r3
 800c57e:	23ff      	movs	r3, #255	; 0xff
 800c580:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800c584:	a902      	add	r1, sp, #8
 800c586:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800c58a:	6860      	ldr	r0, [r4, #4]
 800c58c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c590:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800c594:	6803      	ldr	r3, [r0, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	4798      	blx	r3
 800c59a:	4628      	mov	r0, r5
 800c59c:	b00a      	add	sp, #40	; 0x28
 800c59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a2:	bf00      	nop
 800c5a4:	24006bb6 	.word	0x24006bb6

0800c5a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	b19b      	cbz	r3, 800c5da <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800c5b2:	2002      	movs	r0, #2
 800c5b4:	f7f5 fa8e 	bl	8001ad4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c5c0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800c5ca:	f7ff fd25 	bl	800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c5ce:	4601      	mov	r1, r0
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5d8:	4718      	bx	r3
 800c5da:	bd70      	pop	{r4, r5, r6, pc}

0800c5dc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	4605      	mov	r5, r0
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	2003      	movs	r0, #3
 800c5e4:	b149      	cbz	r1, 800c5fa <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800c5e6:	f7f5 fa45 	bl	8001a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c5ea:	6928      	ldr	r0, [r5, #16]
 800c5ec:	b168      	cbz	r0, 800c60a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800c5ee:	6803      	ldr	r3, [r0, #0]
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	695b      	ldr	r3, [r3, #20]
 800c5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5f8:	4718      	bx	r3
 800c5fa:	f7f5 fa53 	bl	8001aa4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c5fe:	6928      	ldr	r0, [r5, #16]
 800c600:	b118      	cbz	r0, 800c60a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800c602:	6803      	ldr	r3, [r0, #0]
 800c604:	4621      	mov	r1, r4
 800c606:	695b      	ldr	r3, [r3, #20]
 800c608:	e7f4      	b.n	800c5f4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800c60a:	bd70      	pop	{r4, r5, r6, pc}

0800c60c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800c612:	4604      	mov	r4, r0
 800c614:	460d      	mov	r5, r1
 800c616:	428a      	cmp	r2, r1
 800c618:	d008      	beq.n	800c62c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800c61a:	2a01      	cmp	r2, #1
 800c61c:	6803      	ldr	r3, [r0, #0]
 800c61e:	d106      	bne.n	800c62e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800c620:	b929      	cbnz	r1, 800c62e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800c622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c626:	4798      	blx	r3
 800c628:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800c62c:	bd38      	pop	{r3, r4, r5, pc}
 800c62e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c632:	4620      	mov	r0, r4
 800c634:	e7f7      	b.n	800c626 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800c638 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800c638:	4b0d      	ldr	r3, [pc, #52]	; (800c670 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800c63a:	b510      	push	{r4, lr}
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	4604      	mov	r4, r0
 800c640:	b95b      	cbnz	r3, 800c65a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c642:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800c646:	2b02      	cmp	r3, #2
 800c648:	d007      	beq.n	800c65a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c64a:	6840      	ldr	r0, [r0, #4]
 800c64c:	f000 f93a 	bl	800c8c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800c650:	b118      	cbz	r0, 800c65a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c652:	6862      	ldr	r2, [r4, #4]
 800c654:	7a53      	ldrb	r3, [r2, #9]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0fc      	beq.n	800c654 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800c65a:	f7f5 fbb5 	bl	8001dc8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c65e:	4620      	mov	r0, r4
 800c660:	2100      	movs	r1, #0
 800c662:	f7ff ffd3 	bl	800c60c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800c666:	4620      	mov	r0, r4
 800c668:	f7ff fcd6 	bl	800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c66c:	bd10      	pop	{r4, pc}
 800c66e:	bf00      	nop
 800c670:	24006bba 	.word	0x24006bba

0800c674 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800c674:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800c678:	1a13      	subs	r3, r2, r0
 800c67a:	4258      	negs	r0, r3
 800c67c:	4158      	adcs	r0, r3
 800c67e:	4770      	bx	lr

0800c680 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800c680:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800c684:	1a9b      	subs	r3, r3, r2
 800c686:	2b00      	cmp	r3, #0
 800c688:	bfdc      	itt	le
 800c68a:	6882      	ldrle	r2, [r0, #8]
 800c68c:	189b      	addle	r3, r3, r2
 800c68e:	2b01      	cmp	r3, #1
 800c690:	bfcc      	ite	gt
 800c692:	2000      	movgt	r0, #0
 800c694:	2001      	movle	r0, #1
 800c696:	4770      	bx	lr

0800c698 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800c698:	6902      	ldr	r2, [r0, #16]
 800c69a:	6840      	ldr	r0, [r0, #4]
 800c69c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800c6a0:	4770      	bx	lr

0800c6a2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800c6a2:	6803      	ldr	r3, [r0, #0]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	4718      	bx	r3

0800c6a8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800c6a8:	4770      	bx	lr

0800c6aa <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800c6aa:	4770      	bx	lr

0800c6ac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800c6ac:	4770      	bx	lr
	...

0800c6b0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	b570      	push	{r4, r5, r6, lr}
 800c6b4:	7203      	strb	r3, [r0, #8]
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	6840      	ldr	r0, [r0, #4]
 800c6ba:	6803      	ldr	r3, [r0, #0]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	4798      	blx	r3
 800c6c0:	6803      	ldr	r3, [r0, #0]
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	2b40      	cmp	r3, #64	; 0x40
 800c6c6:	d039      	beq.n	800c73c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6c8:	d815      	bhi.n	800c6f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	d022      	beq.n	800c714 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800c6ce:	d808      	bhi.n	800c6e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d033      	beq.n	800c73c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d108      	bne.n	800c6ea <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	4620      	mov	r0, r4
 800c6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6de:	4798      	blx	r3
 800c6e0:	e025      	b.n	800c72e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800c6e2:	2b08      	cmp	r3, #8
 800c6e4:	d01e      	beq.n	800c724 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800c6e6:	2b20      	cmp	r3, #32
 800c6e8:	d028      	beq.n	800c73c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6ea:	4b17      	ldr	r3, [pc, #92]	; (800c748 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800c6ec:	218b      	movs	r1, #139	; 0x8b
 800c6ee:	4a17      	ldr	r2, [pc, #92]	; (800c74c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800c6f0:	4817      	ldr	r0, [pc, #92]	; (800c750 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800c6f2:	f00e fcd3 	bl	801b09c <__assert_func>
 800c6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6fa:	d01f      	beq.n	800c73c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6fc:	d804      	bhi.n	800c708 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800c6fe:	2b80      	cmp	r3, #128	; 0x80
 800c700:	d01c      	beq.n	800c73c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c706:	e7ef      	b.n	800c6e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800c708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c70c:	d016      	beq.n	800c73c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c70e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c712:	e7e0      	b.n	800c6d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800c714:	6823      	ldr	r3, [r4, #0]
 800c716:	7f01      	ldrb	r1, [r0, #28]
 800c718:	4620      	mov	r0, r4
 800c71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71c:	4798      	blx	r3
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c722:	e006      	b.n	800c732 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	7f01      	ldrb	r1, [r0, #28]
 800c728:	4620      	mov	r0, r4
 800c72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72c:	4798      	blx	r3
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c732:	4629      	mov	r1, r5
 800c734:	4620      	mov	r0, r4
 800c736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c73a:	4718      	bx	r3
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	4620      	mov	r0, r4
 800c740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c742:	4798      	blx	r3
 800c744:	e7eb      	b.n	800c71e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800c746:	bf00      	nop
 800c748:	0801db89 	.word	0x0801db89
 800c74c:	0801dc48 	.word	0x0801dc48
 800c750:	0801dbae 	.word	0x0801dbae

0800c754 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	4604      	mov	r4, r0
 800c758:	460e      	mov	r6, r1
 800c75a:	6860      	ldr	r0, [r4, #4]
 800c75c:	6803      	ldr	r3, [r0, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	4798      	blx	r3
 800c762:	2800      	cmp	r0, #0
 800c764:	d1f9      	bne.n	800c75a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800c766:	4d0d      	ldr	r5, [pc, #52]	; (800c79c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800c768:	6828      	ldr	r0, [r5, #0]
 800c76a:	6803      	ldr	r3, [r0, #0]
 800c76c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c76e:	4798      	blx	r3
 800c770:	f7f5 fb38 	bl	8001de4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800c774:	6828      	ldr	r0, [r5, #0]
 800c776:	2101      	movs	r1, #1
 800c778:	f7ff ff48 	bl	800c60c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800c77c:	6860      	ldr	r0, [r4, #4]
 800c77e:	4631      	mov	r1, r6
 800c780:	6803      	ldr	r3, [r0, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	4798      	blx	r3
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	4620      	mov	r0, r4
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	4798      	blx	r3
 800c78e:	6828      	ldr	r0, [r5, #0]
 800c790:	6803      	ldr	r3, [r0, #0]
 800c792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c798:	4718      	bx	r3
 800c79a:	bf00      	nop
 800c79c:	24006bbc 	.word	0x24006bbc

0800c7a0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800c7a0:	b508      	push	{r3, lr}
 800c7a2:	f7f5 fb11 	bl	8001dc8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c7a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c7aa:	f7f5 bb15 	b.w	8001dd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c7ae <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800c7ae:	b510      	push	{r4, lr}
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	2114      	movs	r1, #20
 800c7b4:	f00e fb5c 	bl	801ae70 <_ZdlPvj>
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	bd10      	pop	{r4, pc}

0800c7bc <_ZN8touchgfx13DMA_Interface5startEv>:
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	4604      	mov	r4, r0
 800c7c0:	6840      	ldr	r0, [r0, #4]
 800c7c2:	6803      	ldr	r3, [r0, #0]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4798      	blx	r3
 800c7c8:	b948      	cbnz	r0, 800c7de <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c7ca:	7a63      	ldrb	r3, [r4, #9]
 800c7cc:	b13b      	cbz	r3, 800c7de <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c7ce:	7a23      	ldrb	r3, [r4, #8]
 800c7d0:	b92b      	cbnz	r3, 800c7de <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7dc:	4718      	bx	r3
 800c7de:	bd10      	pop	{r4, pc}

0800c7e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800c7e0:	b570      	push	{r4, r5, r6, lr}
 800c7e2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	1a9b      	subs	r3, r3, r2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	bfdc      	itt	le
 800c7ee:	6880      	ldrle	r0, [r0, #8]
 800c7f0:	181b      	addle	r3, r3, r0
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	dd13      	ble.n	800c81e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800c7f6:	6874      	ldr	r4, [r6, #4]
 800c7f8:	460d      	mov	r5, r1
 800c7fa:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800c7fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c802:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c80a:	68f3      	ldr	r3, [r6, #12]
 800c80c:	68b2      	ldr	r2, [r6, #8]
 800c80e:	f3bf 8f5b 	dmb	ish
 800c812:	3301      	adds	r3, #1
 800c814:	429a      	cmp	r2, r3
 800c816:	bfd8      	it	le
 800c818:	1a9b      	suble	r3, r3, r2
 800c81a:	60f3      	str	r3, [r6, #12]
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	4b03      	ldr	r3, [pc, #12]	; (800c82c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800c820:	2139      	movs	r1, #57	; 0x39
 800c822:	4a03      	ldr	r2, [pc, #12]	; (800c830 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800c824:	4803      	ldr	r0, [pc, #12]	; (800c834 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800c826:	f00e fc39 	bl	801b09c <__assert_func>
 800c82a:	bf00      	nop
 800c82c:	0801dbd4 	.word	0x0801dbd4
 800c830:	0801dc78 	.word	0x0801dc78
 800c834:	0801dbae 	.word	0x0801dbae

0800c838 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800c838:	b510      	push	{r4, lr}
 800c83a:	6803      	ldr	r3, [r0, #0]
 800c83c:	4604      	mov	r4, r0
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4798      	blx	r3
 800c842:	b128      	cbz	r0, 800c850 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800c844:	4b07      	ldr	r3, [pc, #28]	; (800c864 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800c846:	213f      	movs	r1, #63	; 0x3f
 800c848:	4a07      	ldr	r2, [pc, #28]	; (800c868 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800c84a:	4808      	ldr	r0, [pc, #32]	; (800c86c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800c84c:	f00e fc26 	bl	801b09c <__assert_func>
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	68a2      	ldr	r2, [r4, #8]
 800c854:	f3bf 8f5b 	dmb	ish
 800c858:	3301      	adds	r3, #1
 800c85a:	429a      	cmp	r2, r3
 800c85c:	bfd8      	it	le
 800c85e:	1a9b      	suble	r3, r3, r2
 800c860:	6123      	str	r3, [r4, #16]
 800c862:	bd10      	pop	{r4, pc}
 800c864:	0801dbf7 	.word	0x0801dbf7
 800c868:	0801dcc6 	.word	0x0801dcc6
 800c86c:	0801dbae 	.word	0x0801dbae

0800c870 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800c870:	b570      	push	{r4, r5, r6, lr}
 800c872:	4604      	mov	r4, r0
 800c874:	6840      	ldr	r0, [r0, #4]
 800c876:	6803      	ldr	r3, [r0, #0]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4798      	blx	r3
 800c87c:	4605      	mov	r5, r0
 800c87e:	b930      	cbnz	r0, 800c88e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800c880:	7a23      	ldrb	r3, [r4, #8]
 800c882:	b123      	cbz	r3, 800c88e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800c884:	6860      	ldr	r0, [r4, #4]
 800c886:	6803      	ldr	r3, [r0, #0]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	4798      	blx	r3
 800c88c:	7225      	strb	r5, [r4, #8]
 800c88e:	6860      	ldr	r0, [r4, #4]
 800c890:	6803      	ldr	r3, [r0, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4798      	blx	r3
 800c896:	b928      	cbnz	r0, 800c8a4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	4620      	mov	r0, r4
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8a2:	4718      	bx	r3
 800c8a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8a8:	f7f5 baa4 	b.w	8001df4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800c8ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800c8ac:	b510      	push	{r4, lr}
 800c8ae:	6082      	str	r2, [r0, #8]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	4c03      	ldr	r4, [pc, #12]	; (800c8c0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800c8b4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800c8b8:	e9c0 4100 	strd	r4, r1, [r0]
 800c8bc:	bd10      	pop	{r4, pc}
 800c8be:	bf00      	nop
 800c8c0:	0801dc2c 	.word	0x0801dc2c

0800c8c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800c8c4:	6840      	ldr	r0, [r0, #4]
 800c8c6:	6803      	ldr	r3, [r0, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4718      	bx	r3

0800c8cc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800c8cc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800c8d0:	4770      	bx	lr

0800c8d2 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800c8d2:	4770      	bx	lr

0800c8d4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800c8d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c8d8:	b133      	cbz	r3, 800c8e8 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800c8da:	790b      	ldrb	r3, [r1, #4]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	bf01      	itttt	eq
 800c8e0:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800c8e2:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800c8e4:	8603      	strheq	r3, [r0, #48]	; 0x30
 800c8e6:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800c8e8:	f00e ba9e 	b.w	801ae28 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800c8ec <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800c8ec:	8813      	ldrh	r3, [r2, #0]
 800c8ee:	8683      	strh	r3, [r0, #52]	; 0x34
 800c8f0:	f000 bcb2 	b.w	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800c8f4 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800c8f4:	b510      	push	{r4, lr}
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	2138      	movs	r1, #56	; 0x38
 800c8fa:	f00e fab9 	bl	801ae70 <_ZdlPvj>
 800c8fe:	4620      	mov	r0, r4
 800c900:	bd10      	pop	{r4, pc}

0800c902 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800c902:	b510      	push	{r4, lr}
 800c904:	4604      	mov	r4, r0
 800c906:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c908:	b150      	cbz	r0, 800c920 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800c90a:	6803      	ldr	r3, [r0, #0]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	4798      	blx	r3
 800c910:	b130      	cbz	r0, 800c920 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800c912:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c914:	4621      	mov	r1, r4
 800c916:	6803      	ldr	r3, [r0, #0]
 800c918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	4718      	bx	r3
 800c920:	bd10      	pop	{r4, pc}
	...

0800c924 <_ZNK8touchgfx6Bitmap5getIdEv>:
 800c924:	b508      	push	{r3, lr}
 800c926:	4b05      	ldr	r3, [pc, #20]	; (800c93c <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	b92b      	cbnz	r3, 800c938 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 800c92c:	4b04      	ldr	r3, [pc, #16]	; (800c940 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 800c92e:	2187      	movs	r1, #135	; 0x87
 800c930:	4a04      	ldr	r2, [pc, #16]	; (800c944 <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 800c932:	4805      	ldr	r0, [pc, #20]	; (800c948 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 800c934:	f00e fbb2 	bl	801b09c <__assert_func>
 800c938:	8800      	ldrh	r0, [r0, #0]
 800c93a:	bd08      	pop	{r3, pc}
 800c93c:	24006c44 	.word	0x24006c44
 800c940:	0801dcf6 	.word	0x0801dcf6
 800c944:	0801ddc8 	.word	0x0801ddc8
 800c948:	0801dd32 	.word	0x0801dd32

0800c94c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	4604      	mov	r4, r0
 800c950:	f100 0534 	add.w	r5, r0, #52	; 0x34
 800c954:	b169      	cbz	r1, 800c972 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 800c956:	302e      	adds	r0, #46	; 0x2e
 800c958:	f7ff ffe4 	bl	800c924 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c95c:	4606      	mov	r6, r0
 800c95e:	4628      	mov	r0, r5
 800c960:	f7ff ffe0 	bl	800c924 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c964:	4286      	cmp	r6, r0
 800c966:	d003      	beq.n	800c970 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 800c968:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800c96a:	8623      	strh	r3, [r4, #48]	; 0x30
 800c96c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800c96e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800c970:	bd70      	pop	{r4, r5, r6, pc}
 800c972:	3030      	adds	r0, #48	; 0x30
 800c974:	f7ff ffd6 	bl	800c924 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c978:	4606      	mov	r6, r0
 800c97a:	4628      	mov	r0, r5
 800c97c:	f7ff ffd2 	bl	800c924 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c980:	4286      	cmp	r6, r0
 800c982:	bf1f      	itttt	ne
 800c984:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 800c986:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 800c988:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 800c98a:	8623      	strhne	r3, [r4, #48]	; 0x30
 800c98c:	e7f0      	b.n	800c970 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0800c98e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 800c98e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800c992:	4770      	bx	lr

0800c994 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 800c994:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800c998:	4770      	bx	lr

0800c99a <_ZN8touchgfx13ScalableImageD1Ev>:
 800c99a:	4770      	bx	lr

0800c99c <_ZN8touchgfx13ScalableImageD0Ev>:
 800c99c:	b510      	push	{r4, lr}
 800c99e:	4604      	mov	r4, r0
 800c9a0:	212c      	movs	r1, #44	; 0x2c
 800c9a2:	f00e fa65 	bl	801ae70 <_ZdlPvj>
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	bd10      	pop	{r4, pc}

0800c9aa <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 800c9aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c9ac:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800c9b0:	4605      	mov	r5, r0
 800c9b2:	2bff      	cmp	r3, #255	; 0xff
 800c9b4:	d007      	beq.n	800c9c6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	802b      	strh	r3, [r5, #0]
 800c9ba:	806b      	strh	r3, [r5, #2]
 800c9bc:	80ab      	strh	r3, [r5, #4]
 800c9be:	80eb      	strh	r3, [r5, #6]
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	b004      	add	sp, #16
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	f101 0426 	add.w	r4, r1, #38	; 0x26
 800c9ca:	4668      	mov	r0, sp
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	f005 ffc7 	bl	8012960 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800c9d2:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f005 ff4e 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c9dc:	4286      	cmp	r6, r0
 800c9de:	d1ea      	bne.n	800c9b6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	a802      	add	r0, sp, #8
 800c9e4:	f005 ffbc 	bl	8012960 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800c9e8:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f005 ff7d 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c9f2:	4286      	cmp	r6, r0
 800c9f4:	d1df      	bne.n	800c9b6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	f005 ffb1 	bl	8012960 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800c9fe:	e7df      	b.n	800c9c0 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>

0800ca00 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	2300      	movs	r3, #0
 800ca04:	2501      	movs	r5, #1
 800ca06:	4604      	mov	r4, r0
 800ca08:	8083      	strh	r3, [r0, #4]
 800ca0a:	80c3      	strh	r3, [r0, #6]
 800ca0c:	8103      	strh	r3, [r0, #8]
 800ca0e:	8143      	strh	r3, [r0, #10]
 800ca10:	8183      	strh	r3, [r0, #12]
 800ca12:	81c3      	strh	r3, [r0, #14]
 800ca14:	8203      	strh	r3, [r0, #16]
 800ca16:	8243      	strh	r3, [r0, #18]
 800ca18:	61c3      	str	r3, [r0, #28]
 800ca1a:	8403      	strh	r3, [r0, #32]
 800ca1c:	8443      	strh	r3, [r0, #34]	; 0x22
 800ca1e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800ca22:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 800ca26:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800ca2a:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 800ca2c:	6003      	str	r3, [r0, #0]
 800ca2e:	880b      	ldrh	r3, [r1, #0]
 800ca30:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ca32:	23ff      	movs	r3, #255	; 0xff
 800ca34:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800ca38:	f000 ff35 	bl	800d8a6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ca3c:	4b03      	ldr	r3, [pc, #12]	; (800ca4c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 800ca3e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800ca42:	4620      	mov	r0, r4
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	0801e168 	.word	0x0801e168
 800ca4c:	0801de04 	.word	0x0801de04

0800ca50 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 800ca50:	4603      	mov	r3, r0
 800ca52:	3026      	adds	r0, #38	; 0x26
 800ca54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ca58:	b90b      	cbnz	r3, 800ca5e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 800ca5a:	f003 be15 	b.w	8010688 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800ca5e:	f003 be23 	b.w	80106a8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0800ca64 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 800ca64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca68:	4604      	mov	r4, r0
 800ca6a:	469b      	mov	fp, r3
 800ca6c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800ca70:	b0b3      	sub	sp, #204	; 0xcc
 800ca72:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ca76:	f9b1 6000 	ldrsh.w	r6, [r1]
 800ca7a:	8888      	ldrh	r0, [r1, #4]
 800ca7c:	9206      	str	r2, [sp, #24]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	4430      	add	r0, r6
 800ca82:	9211      	str	r2, [sp, #68]	; 0x44
 800ca84:	b280      	uxth	r0, r0
 800ca86:	fa0f fe80 	sxth.w	lr, r0
 800ca8a:	4596      	cmp	lr, r2
 800ca8c:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 800ca90:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 800ca94:	f340 811a 	ble.w	800cccc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800ca98:	45b4      	cmp	ip, r6
 800ca9a:	f340 8117 	ble.w	800cccc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800ca9e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800caa2:	88ca      	ldrh	r2, [r1, #6]
 800caa4:	442a      	add	r2, r5
 800caa6:	b292      	uxth	r2, r2
 800caa8:	b211      	sxth	r1, r2
 800caaa:	2900      	cmp	r1, #0
 800caac:	f340 810e 	ble.w	800cccc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800cab0:	42ab      	cmp	r3, r5
 800cab2:	f340 810b 	ble.w	800cccc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800cab6:	45f4      	cmp	ip, lr
 800cab8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800cabc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800cac0:	bfb8      	it	lt
 800cac2:	fa1f f08c 	uxthlt.w	r0, ip
 800cac6:	428b      	cmp	r3, r1
 800cac8:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 800cacc:	bfb8      	it	lt
 800cace:	b29a      	uxthlt	r2, r3
 800cad0:	1b80      	subs	r0, r0, r6
 800cad2:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 800cad6:	1b52      	subs	r2, r2, r5
 800cad8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800cadc:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800cae0:	ab11      	add	r3, sp, #68	; 0x44
 800cae2:	ad13      	add	r5, sp, #76	; 0x4c
 800cae4:	6822      	ldr	r2, [r4, #0]
 800cae6:	1d26      	adds	r6, r4, #4
 800cae8:	9307      	str	r3, [sp, #28]
 800caea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800caec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800caf0:	e885 0003 	stmia.w	r5, {r0, r1}
 800caf4:	4629      	mov	r1, r5
 800caf6:	4620      	mov	r0, r4
 800caf8:	4790      	blx	r2
 800cafa:	4621      	mov	r1, r4
 800cafc:	a815      	add	r0, sp, #84	; 0x54
 800cafe:	f003 fd25 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cb02:	a815      	add	r0, sp, #84	; 0x54
 800cb04:	f002 fb22 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800cb08:	9b07      	ldr	r3, [sp, #28]
 800cb0a:	4631      	mov	r1, r6
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f002 fb61 	bl	800f1d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800cb12:	4628      	mov	r0, r5
 800cb14:	f104 0526 	add.w	r5, r4, #38	; 0x26
 800cb18:	f002 fb18 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	f005 ffb3 	bl	8012a88 <_ZNK8touchgfx6Bitmap7getDataEv>
 800cb22:	9007      	str	r0, [sp, #28]
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f000 80ce 	beq.w	800ccc6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 800cb2a:	f8db 2000 	ldr.w	r2, [fp]
 800cb2e:	a90d      	add	r1, sp, #52	; 0x34
 800cb30:	a809      	add	r0, sp, #36	; 0x24
 800cb32:	9209      	str	r2, [sp, #36]	; 0x24
 800cb34:	f8db 2004 	ldr.w	r2, [fp, #4]
 800cb38:	920a      	str	r2, [sp, #40]	; 0x28
 800cb3a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800cb3e:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb40:	f8db 200c 	ldr.w	r2, [fp, #12]
 800cb44:	920c      	str	r2, [sp, #48]	; 0x30
 800cb46:	f8da 2000 	ldr.w	r2, [sl]
 800cb4a:	920d      	str	r2, [sp, #52]	; 0x34
 800cb4c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800cb50:	920e      	str	r2, [sp, #56]	; 0x38
 800cb52:	f8da 2008 	ldr.w	r2, [sl, #8]
 800cb56:	920f      	str	r2, [sp, #60]	; 0x3c
 800cb58:	f8da 200c 	ldr.w	r2, [sl, #12]
 800cb5c:	9210      	str	r2, [sp, #64]	; 0x40
 800cb5e:	4632      	mov	r2, r6
 800cb60:	f002 fb1c 	bl	800f19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb64:	4632      	mov	r2, r6
 800cb66:	a90e      	add	r1, sp, #56	; 0x38
 800cb68:	a80a      	add	r0, sp, #40	; 0x28
 800cb6a:	f002 fb17 	bl	800f19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb6e:	4632      	mov	r2, r6
 800cb70:	a90f      	add	r1, sp, #60	; 0x3c
 800cb72:	a80b      	add	r0, sp, #44	; 0x2c
 800cb74:	f002 fb12 	bl	800f19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb78:	4632      	mov	r2, r6
 800cb7a:	a910      	add	r1, sp, #64	; 0x40
 800cb7c:	a80c      	add	r0, sp, #48	; 0x30
 800cb7e:	f002 fb0d 	bl	800f19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb82:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800cb86:	edd7 3a00 	vldr	s7, [r7]
 800cb8a:	eef0 6a67 	vmov.f32	s13, s15
 800cb8e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800cb92:	ed97 5a01 	vldr	s10, [r7, #4]
 800cb96:	eeb0 7a67 	vmov.f32	s14, s15
 800cb9a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800cb9e:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 800cba2:	edd9 2a00 	vldr	s5, [r9]
 800cba6:	eeb0 6a67 	vmov.f32	s12, s15
 800cbaa:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800cbae:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800cbb2:	ed98 3a00 	vldr	s6, [r8]
 800cbb6:	ed99 4a01 	vldr	s8, [r9, #4]
 800cbba:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cbbe:	edd8 4a01 	vldr	s9, [r8, #4]
 800cbc2:	edd9 5a02 	vldr	s11, [r9, #8]
 800cbc6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800cbca:	ee16 6a10 	vmov	r6, s12
 800cbce:	eeb0 6a67 	vmov.f32	s12, s15
 800cbd2:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800cbd6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 800cbda:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cbde:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 800cbe2:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 800cbe6:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 800cbea:	ee16 0a10 	vmov	r0, s12
 800cbee:	eeb0 6a67 	vmov.f32	s12, s15
 800cbf2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800cbf6:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 800cbfa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cbfe:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800cc02:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 800cc06:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800cc0a:	ee16 1a10 	vmov	r1, s12
 800cc0e:	eeb0 6a67 	vmov.f32	s12, s15
 800cc12:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800cc16:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 800cc1a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cc1e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800cc22:	f8d8 b008 	ldr.w	fp, [r8, #8]
 800cc26:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800cc2a:	68ff      	ldr	r7, [r7, #12]
 800cc2c:	ee16 2a10 	vmov	r2, s12
 800cc30:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 800cc34:	9624      	str	r6, [sp, #144]	; 0x90
 800cc36:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cc3a:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800cc3e:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 800cc42:	4628      	mov	r0, r5
 800cc44:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 800cc48:	9b06      	ldr	r3, [sp, #24]
 800cc4a:	922d      	str	r2, [sp, #180]	; 0xb4
 800cc4c:	4a21      	ldr	r2, [pc, #132]	; (800ccd4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 800cc4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc50:	8812      	ldrh	r2, [r2, #0]
 800cc52:	9b07      	ldr	r3, [sp, #28]
 800cc54:	9218      	str	r2, [sp, #96]	; 0x60
 800cc56:	9319      	str	r3, [sp, #100]	; 0x64
 800cc58:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 800cc5c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 800cc60:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800cc64:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 800cc68:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 800cc6c:	9731      	str	r7, [sp, #196]	; 0xc4
 800cc6e:	f005 ff3d 	bl	8012aec <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800cc72:	901a      	str	r0, [sp, #104]	; 0x68
 800cc74:	4628      	mov	r0, r5
 800cc76:	f005 fdff 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cc7a:	901b      	str	r0, [sp, #108]	; 0x6c
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f005 fe35 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cc82:	901c      	str	r0, [sp, #112]	; 0x70
 800cc84:	4628      	mov	r0, r5
 800cc86:	f005 fdf7 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cc8a:	4b13      	ldr	r3, [pc, #76]	; (800ccd8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 800cc8c:	901d      	str	r0, [sp, #116]	; 0x74
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cc94:	b10a      	cbz	r2, 800cc9a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 800cc96:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800cc98:	b905      	cbnz	r5, 800cc9c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 800cc9a:	689d      	ldr	r5, [r3, #8]
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	4620      	mov	r0, r4
 800cca0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800cca2:	f7ff fed5 	bl	800ca50 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 800cca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccaa:	aa1e      	add	r2, sp, #120	; 0x78
 800ccac:	a917      	add	r1, sp, #92	; 0x5c
 800ccae:	9304      	str	r3, [sp, #16]
 800ccb0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ccb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ccb8:	ab13      	add	r3, sp, #76	; 0x4c
 800ccba:	4628      	mov	r0, r5
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	ab15      	add	r3, sp, #84	; 0x54
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	ab19      	add	r3, sp, #100	; 0x64
 800ccc4:	47b0      	blx	r6
 800ccc6:	b033      	add	sp, #204	; 0xcc
 800ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cccc:	2300      	movs	r3, #0
 800ccce:	9312      	str	r3, [sp, #72]	; 0x48
 800ccd0:	e706      	b.n	800cae0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 800ccd2:	bf00      	nop
 800ccd4:	24006bb6 	.word	0x24006bb6
 800ccd8:	24006bbc 	.word	0x24006bbc

0800ccdc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	ed2d 8b04 	vpush	{d8-d9}
 800cce2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800cce6:	b098      	sub	sp, #96	; 0x60
 800cce8:	4604      	mov	r4, r0
 800ccea:	460e      	mov	r6, r1
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d065      	beq.n	800cdbc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 800ccf0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800ccf4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800ccf8:	ed9f 8a37 	vldr	s16, [pc, #220]	; 800cdd8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 800ccfc:	ee09 3a10 	vmov	s18, r3
 800cd00:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800cd04:	4628      	mov	r0, r5
 800cd06:	ee08 3a90 	vmov	s17, r3
 800cd0a:	4b34      	ldr	r3, [pc, #208]	; (800cddc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 800cd0c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800cd10:	930c      	str	r3, [sp, #48]	; 0x30
 800cd12:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800cd16:	930d      	str	r3, [sp, #52]	; 0x34
 800cd18:	930e      	str	r3, [sp, #56]	; 0x38
 800cd1a:	ee39 9a08 	vadd.f32	s18, s18, s16
 800cd1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd20:	f005 fdaa 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cd24:	ee07 0a90 	vmov	s15, r0
 800cd28:	4628      	mov	r0, r5
 800cd2a:	ee78 8a88 	vadd.f32	s17, s17, s16
 800cd2e:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800cd32:	f005 fddb 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cd36:	4b2a      	ldr	r3, [pc, #168]	; (800cde0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 800cd38:	ee07 0a90 	vmov	s15, r0
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd42:	eef0 7a48 	vmov.f32	s15, s16
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d13c      	bne.n	800cdc4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 800cd4a:	eef0 6a69 	vmov.f32	s13, s19
 800cd4e:	ee19 3a90 	vmov	r3, s19
 800cd52:	eeb0 6a47 	vmov.f32	s12, s14
 800cd56:	eef0 5a47 	vmov.f32	s11, s14
 800cd5a:	eef0 9a48 	vmov.f32	s19, s16
 800cd5e:	eeb0 7a48 	vmov.f32	s14, s16
 800cd62:	9314      	str	r3, [sp, #80]	; 0x50
 800cd64:	ab14      	add	r3, sp, #80	; 0x50
 800cd66:	2200      	movs	r2, #0
 800cd68:	4631      	mov	r1, r6
 800cd6a:	9303      	str	r3, [sp, #12]
 800cd6c:	ab10      	add	r3, sp, #64	; 0x40
 800cd6e:	4620      	mov	r0, r4
 800cd70:	edcd 7a04 	vstr	s15, [sp, #16]
 800cd74:	9302      	str	r3, [sp, #8]
 800cd76:	ab0c      	add	r3, sp, #48	; 0x30
 800cd78:	ed8d 9a05 	vstr	s18, [sp, #20]
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	ab08      	add	r3, sp, #32
 800cd80:	ed8d 9a06 	vstr	s18, [sp, #24]
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	ab04      	add	r3, sp, #16
 800cd88:	edcd 7a07 	vstr	s15, [sp, #28]
 800cd8c:	edcd 7a08 	vstr	s15, [sp, #32]
 800cd90:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 800cd94:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800cd98:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 800cd9c:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800cda0:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 800cda4:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800cda8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800cdac:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 800cdb0:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 800cdb4:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 800cdb8:	f7ff fe54 	bl	800ca64 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800cdbc:	b018      	add	sp, #96	; 0x60
 800cdbe:	ecbd 8b04 	vpop	{d8-d9}
 800cdc2:	bd70      	pop	{r4, r5, r6, pc}
 800cdc4:	eef0 6a47 	vmov.f32	s13, s14
 800cdc8:	ee18 3a10 	vmov	r3, s16
 800cdcc:	eef0 5a69 	vmov.f32	s11, s19
 800cdd0:	eeb0 6a48 	vmov.f32	s12, s16
 800cdd4:	e7c5      	b.n	800cd62 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 800cdd6:	bf00      	nop
 800cdd8:	00000000 	.word	0x00000000
 800cddc:	42c80000 	.word	0x42c80000
 800cde0:	24006bb4 	.word	0x24006bb4

0800cde4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800cde4:	2200      	movs	r2, #0
 800cde6:	8002      	strh	r2, [r0, #0]
 800cde8:	8042      	strh	r2, [r0, #2]
 800cdea:	8082      	strh	r2, [r0, #4]
 800cdec:	80c2      	strh	r2, [r0, #6]
 800cdee:	4770      	bx	lr

0800cdf0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	6803      	ldr	r3, [r0, #0]
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4615      	mov	r5, r2
 800cdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfa:	4798      	blx	r3
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	4629      	mov	r1, r5
 800ce00:	4620      	mov	r0, r4
 800ce02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce08:	4718      	bx	r3

0800ce0a <_ZN8touchgfx8TextAreaD1Ev>:
 800ce0a:	4770      	bx	lr

0800ce0c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800ce0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800ce14:	4299      	cmp	r1, r3
 800ce16:	d029      	beq.n	800ce6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800ce18:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	b92b      	cbnz	r3, 800ce2a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800ce1e:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800ce20:	21ae      	movs	r1, #174	; 0xae
 800ce22:	4a15      	ldr	r2, [pc, #84]	; (800ce78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800ce24:	4815      	ldr	r0, [pc, #84]	; (800ce7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800ce26:	f00e f939 	bl	801b09c <__assert_func>
 800ce2a:	4a15      	ldr	r2, [pc, #84]	; (800ce80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800ce2c:	8812      	ldrh	r2, [r2, #0]
 800ce2e:	428a      	cmp	r2, r1
 800ce30:	d803      	bhi.n	800ce3a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800ce32:	4b14      	ldr	r3, [pc, #80]	; (800ce84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800ce34:	21af      	movs	r1, #175	; 0xaf
 800ce36:	4a10      	ldr	r2, [pc, #64]	; (800ce78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800ce38:	e7f4      	b.n	800ce24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800ce3a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800ce3e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800ce42:	4b11      	ldr	r3, [pc, #68]	; (800ce88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800ce44:	7854      	ldrb	r4, [r2, #1]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800ce4c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	69de      	ldr	r6, [r3, #28]
 800ce54:	4b0d      	ldr	r3, [pc, #52]	; (800ce8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800ce56:	6818      	ldr	r0, [r3, #0]
 800ce58:	f7f6 fd7e 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4602      	mov	r2, r0
 800ce60:	4621      	mov	r1, r4
 800ce62:	9300      	str	r3, [sp, #0]
 800ce64:	4628      	mov	r0, r5
 800ce66:	47b0      	blx	r6
 800ce68:	b002      	add	sp, #8
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e7fb      	b.n	800ce68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800ce70:	24006c0c 	.word	0x24006c0c
 800ce74:	0801cd30 	.word	0x0801cd30
 800ce78:	0801dee4 	.word	0x0801dee4
 800ce7c:	0801cdbe 	.word	0x0801cdbe
 800ce80:	24006c10 	.word	0x24006c10
 800ce84:	0801cde7 	.word	0x0801cde7
 800ce88:	24006c14 	.word	0x24006c14
 800ce8c:	24006c18 	.word	0x24006c18

0800ce90 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	6803      	ldr	r3, [r0, #0]
 800ce94:	4604      	mov	r4, r0
 800ce96:	b28d      	uxth	r5, r1
 800ce98:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800ce9a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800ce9c:	4b10      	ldr	r3, [pc, #64]	; (800cee0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	b92b      	cbnz	r3, 800ceae <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800cea2:	4b10      	ldr	r3, [pc, #64]	; (800cee4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800cea4:	21ae      	movs	r1, #174	; 0xae
 800cea6:	4a10      	ldr	r2, [pc, #64]	; (800cee8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800cea8:	4810      	ldr	r0, [pc, #64]	; (800ceec <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800ceaa:	f00e f8f7 	bl	801b09c <__assert_func>
 800ceae:	4910      	ldr	r1, [pc, #64]	; (800cef0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800ceb0:	8809      	ldrh	r1, [r1, #0]
 800ceb2:	4291      	cmp	r1, r2
 800ceb4:	d803      	bhi.n	800cebe <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800ceb8:	21af      	movs	r1, #175	; 0xaf
 800ceba:	4a0b      	ldr	r2, [pc, #44]	; (800cee8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800cebc:	e7f4      	b.n	800cea8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800cebe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800cec2:	4b0d      	ldr	r3, [pc, #52]	; (800cef8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ceca:	6803      	ldr	r3, [r0, #0]
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	4798      	blx	r3
 800ced0:	1a29      	subs	r1, r5, r0
 800ced2:	4633      	mov	r3, r6
 800ced4:	4620      	mov	r0, r4
 800ced6:	b209      	sxth	r1, r1
 800ced8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cedc:	4718      	bx	r3
 800cede:	bf00      	nop
 800cee0:	24006c0c 	.word	0x24006c0c
 800cee4:	0801cd30 	.word	0x0801cd30
 800cee8:	0801dee4 	.word	0x0801dee4
 800ceec:	0801cdbe 	.word	0x0801cdbe
 800cef0:	24006c10 	.word	0x24006c10
 800cef4:	0801cde7 	.word	0x0801cde7
 800cef8:	24006c14 	.word	0x24006c14

0800cefc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800cefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf04:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800cf06:	b08c      	sub	sp, #48	; 0x30
 800cf08:	4604      	mov	r4, r0
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	4688      	mov	r8, r1
 800cf0e:	d05f      	beq.n	800cfd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800cf10:	4e31      	ldr	r6, [pc, #196]	; (800cfd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800cf12:	6832      	ldr	r2, [r6, #0]
 800cf14:	b92a      	cbnz	r2, 800cf22 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800cf16:	4b31      	ldr	r3, [pc, #196]	; (800cfdc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800cf18:	21ae      	movs	r1, #174	; 0xae
 800cf1a:	4a31      	ldr	r2, [pc, #196]	; (800cfe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800cf1c:	4831      	ldr	r0, [pc, #196]	; (800cfe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800cf1e:	f00e f8bd 	bl	801b09c <__assert_func>
 800cf22:	4d31      	ldr	r5, [pc, #196]	; (800cfe8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800cf24:	8829      	ldrh	r1, [r5, #0]
 800cf26:	4299      	cmp	r1, r3
 800cf28:	d803      	bhi.n	800cf32 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800cf2a:	4b30      	ldr	r3, [pc, #192]	; (800cfec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800cf2c:	21af      	movs	r1, #175	; 0xaf
 800cf2e:	4a2c      	ldr	r2, [pc, #176]	; (800cfe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800cf30:	e7f4      	b.n	800cf1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800cf32:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800cf36:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800cf3a:	4b2d      	ldr	r3, [pc, #180]	; (800cff0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf42:	2a00      	cmp	r2, #0
 800cf44:	d044      	beq.n	800cfd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800cf46:	784b      	ldrb	r3, [r1, #1]
 800cf48:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800cf4c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800cf50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800cf54:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800cf58:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800cf5c:	4b25      	ldr	r3, [pc, #148]	; (800cff4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800cf5e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800cf68:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800cf6c:	9207      	str	r2, [sp, #28]
 800cf6e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800cf70:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cf74:	f88d a020 	strb.w	sl, [sp, #32]
 800cf78:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800cf7c:	9009      	str	r0, [sp, #36]	; 0x24
 800cf7e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800cf82:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800cf86:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800cf8a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800cf8e:	b10a      	cbz	r2, 800cf94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800cf90:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800cf92:	b907      	cbnz	r7, 800cf96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800cf94:	689f      	ldr	r7, [r3, #8]
 800cf96:	f10d 0914 	add.w	r9, sp, #20
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4648      	mov	r0, r9
 800cf9e:	f003 fad5 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cfa2:	6833      	ldr	r3, [r6, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d0b6      	beq.n	800cf16 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800cfa8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800cfaa:	882b      	ldrh	r3, [r5, #0]
 800cfac:	428b      	cmp	r3, r1
 800cfae:	d9bc      	bls.n	800cf2a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800cfb0:	4b11      	ldr	r3, [pc, #68]	; (800cff8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800cfb2:	6818      	ldr	r0, [r3, #0]
 800cfb4:	f7f6 fcd0 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9001      	str	r0, [sp, #4]
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cfc2:	ab07      	add	r3, sp, #28
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	4643      	mov	r3, r8
 800cfc8:	e899 0006 	ldmia.w	r9, {r1, r2}
 800cfcc:	f7f6 fc76 	bl	80038bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800cfd0:	b00c      	add	sp, #48	; 0x30
 800cfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd6:	bf00      	nop
 800cfd8:	24006c0c 	.word	0x24006c0c
 800cfdc:	0801cd30 	.word	0x0801cd30
 800cfe0:	0801dee4 	.word	0x0801dee4
 800cfe4:	0801cdbe 	.word	0x0801cdbe
 800cfe8:	24006c10 	.word	0x24006c10
 800cfec:	0801cde7 	.word	0x0801cde7
 800cff0:	24006c14 	.word	0x24006c14
 800cff4:	24006bbc 	.word	0x24006bbc
 800cff8:	24006c18 	.word	0x24006c18

0800cffc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800cffc:	b40e      	push	{r1, r2, r3}
 800cffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d006:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800d008:	b09c      	sub	sp, #112	; 0x70
 800d00a:	4604      	mov	r4, r0
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d06b      	beq.n	800d0e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800d010:	aa26      	add	r2, sp, #152	; 0x98
 800d012:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800d0fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800d016:	9202      	str	r2, [sp, #8]
 800d018:	f8da 2000 	ldr.w	r2, [sl]
 800d01c:	b92a      	cbnz	r2, 800d02a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800d01e:	4b33      	ldr	r3, [pc, #204]	; (800d0ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800d020:	21ae      	movs	r1, #174	; 0xae
 800d022:	4a33      	ldr	r2, [pc, #204]	; (800d0f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800d024:	4833      	ldr	r0, [pc, #204]	; (800d0f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800d026:	f00e f839 	bl	801b09c <__assert_func>
 800d02a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800d100 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800d02e:	f8b8 1000 	ldrh.w	r1, [r8]
 800d032:	4299      	cmp	r1, r3
 800d034:	d803      	bhi.n	800d03e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800d036:	4b30      	ldr	r3, [pc, #192]	; (800d0f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800d038:	21af      	movs	r1, #175	; 0xaf
 800d03a:	4a2d      	ldr	r2, [pc, #180]	; (800d0f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800d03c:	e7f2      	b.n	800d024 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800d03e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800d104 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800d042:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d046:	f8d9 3000 	ldr.w	r3, [r9]
 800d04a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d04e:	682b      	ldr	r3, [r5, #0]
 800d050:	4628      	mov	r0, r5
 800d052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d054:	4798      	blx	r3
 800d056:	4606      	mov	r6, r0
 800d058:	b207      	sxth	r7, r0
 800d05a:	a803      	add	r0, sp, #12
 800d05c:	f003 fe50 	bl	8010d00 <_ZN8touchgfx12TextProviderC1Ev>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	4628      	mov	r0, r5
 800d064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d066:	4798      	blx	r3
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	4683      	mov	fp, r0
 800d06c:	4628      	mov	r0, r5
 800d06e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d070:	4798      	blx	r3
 800d072:	465b      	mov	r3, fp
 800d074:	9000      	str	r0, [sp, #0]
 800d076:	a803      	add	r0, sp, #12
 800d078:	9925      	ldr	r1, [sp, #148]	; 0x94
 800d07a:	9a02      	ldr	r2, [sp, #8]
 800d07c:	f003 fe93 	bl	8010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d080:	f8da 3000 	ldr.w	r3, [sl]
 800d084:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0c8      	beq.n	800d01e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800d08c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800d08e:	f8b8 0000 	ldrh.w	r0, [r8]
 800d092:	4290      	cmp	r0, r2
 800d094:	d9cf      	bls.n	800d036 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800d096:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800d09a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800d09e:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800d0a2:	786a      	ldrb	r2, [r5, #1]
 800d0a4:	8925      	ldrh	r5, [r4, #8]
 800d0a6:	f8d9 3000 	ldr.w	r3, [r9]
 800d0aa:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800d0ae:	eba5 050c 	sub.w	r5, r5, ip
 800d0b2:	b22d      	sxth	r5, r5
 800d0b4:	9500      	str	r5, [sp, #0]
 800d0b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d0ba:	a803      	add	r0, sp, #12
 800d0bc:	f001 fd61 	bl	800eb82 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800d0c0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800d0c4:	b203      	sxth	r3, r0
 800d0c6:	18b9      	adds	r1, r7, r2
 800d0c8:	2900      	cmp	r1, #0
 800d0ca:	dd0b      	ble.n	800d0e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	fb13 f302 	smulbb	r3, r3, r2
 800d0d2:	fb16 3300 	smlabb	r3, r6, r0, r3
 800d0d6:	b21f      	sxth	r7, r3
 800d0d8:	4638      	mov	r0, r7
 800d0da:	b01c      	add	sp, #112	; 0x70
 800d0dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e0:	b003      	add	sp, #12
 800d0e2:	4770      	bx	lr
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	dcf7      	bgt.n	800d0d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800d0e8:	2700      	movs	r7, #0
 800d0ea:	e7f5      	b.n	800d0d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800d0ec:	0801cd30 	.word	0x0801cd30
 800d0f0:	0801dee4 	.word	0x0801dee4
 800d0f4:	0801cdbe 	.word	0x0801cdbe
 800d0f8:	0801cde7 	.word	0x0801cde7
 800d0fc:	24006c0c 	.word	0x24006c0c
 800d100:	24006c10 	.word	0x24006c10
 800d104:	24006c14 	.word	0x24006c14

0800d108 <_ZN8touchgfx8TextAreaD0Ev>:
 800d108:	b510      	push	{r4, lr}
 800d10a:	4604      	mov	r4, r0
 800d10c:	213c      	movs	r1, #60	; 0x3c
 800d10e:	f00d feaf 	bl	801ae70 <_ZdlPvj>
 800d112:	4620      	mov	r0, r4
 800d114:	bd10      	pop	{r4, pc}
	...

0800d118 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d11e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d120:	4604      	mov	r4, r0
 800d122:	4299      	cmp	r1, r3
 800d124:	d01e      	beq.n	800d164 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800d126:	6803      	ldr	r3, [r0, #0]
 800d128:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800d12a:	4b0f      	ldr	r3, [pc, #60]	; (800d168 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	b92b      	cbnz	r3, 800d13c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800d130:	4b0e      	ldr	r3, [pc, #56]	; (800d16c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800d132:	21ae      	movs	r1, #174	; 0xae
 800d134:	4a0e      	ldr	r2, [pc, #56]	; (800d170 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800d136:	480f      	ldr	r0, [pc, #60]	; (800d174 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800d138:	f00d ffb0 	bl	801b09c <__assert_func>
 800d13c:	4b0e      	ldr	r3, [pc, #56]	; (800d178 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800d13e:	881b      	ldrh	r3, [r3, #0]
 800d140:	428b      	cmp	r3, r1
 800d142:	d803      	bhi.n	800d14c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800d144:	4b0d      	ldr	r3, [pc, #52]	; (800d17c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800d146:	21af      	movs	r1, #175	; 0xaf
 800d148:	4a09      	ldr	r2, [pc, #36]	; (800d170 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800d14a:	e7f4      	b.n	800d136 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800d14c:	4b0c      	ldr	r3, [pc, #48]	; (800d180 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800d14e:	6818      	ldr	r0, [r3, #0]
 800d150:	f7f6 fc02 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 800d154:	2300      	movs	r3, #0
 800d156:	4601      	mov	r1, r0
 800d158:	46ac      	mov	ip, r5
 800d15a:	4620      	mov	r0, r4
 800d15c:	461a      	mov	r2, r3
 800d15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d162:	4760      	bx	ip
 800d164:	2000      	movs	r0, #0
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	24006c0c 	.word	0x24006c0c
 800d16c:	0801cd30 	.word	0x0801cd30
 800d170:	0801dee4 	.word	0x0801dee4
 800d174:	0801cdbe 	.word	0x0801cdbe
 800d178:	24006c10 	.word	0x24006c10
 800d17c:	0801cde7 	.word	0x0801cde7
 800d180:	24006c18 	.word	0x24006c18

0800d184 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	6803      	ldr	r3, [r0, #0]
 800d188:	4604      	mov	r4, r0
 800d18a:	4615      	mov	r5, r2
 800d18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18e:	4798      	blx	r3
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	4629      	mov	r1, r5
 800d194:	4620      	mov	r0, r4
 800d196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d19c:	4718      	bx	r3

0800d19e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800d19e:	b538      	push	{r3, r4, r5, lr}
 800d1a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1a4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d014      	beq.n	800d1d6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800d1ac:	6803      	ldr	r3, [r0, #0]
 800d1ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1b0:	4798      	blx	r3
 800d1b2:	6823      	ldr	r3, [r4, #0]
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ba:	4798      	blx	r3
 800d1bc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d1c0:	b22d      	sxth	r5, r5
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800d1c8:	bf06      	itte	eq
 800d1ca:	4602      	moveq	r2, r0
 800d1cc:	4629      	moveq	r1, r5
 800d1ce:	462a      	movne	r2, r5
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f7ff ffd7 	bl	800d184 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}

0800d1d8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800d1d8:	888a      	ldrh	r2, [r1, #4]
 800d1da:	8582      	strh	r2, [r0, #44]	; 0x2c
 800d1dc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800d1e0:	b922      	cbnz	r2, 800d1ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800d1e2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d1e6:	b90b      	cbnz	r3, 800d1ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800d1e8:	f7ff bfd9 	b.w	800d19e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800d1ec:	4770      	bx	lr

0800d1ee <_ZNK8touchgfx3Box12getSolidRectEv>:
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	8083      	strh	r3, [r0, #4]
 800d1f2:	80c3      	strh	r3, [r0, #6]
 800d1f4:	8003      	strh	r3, [r0, #0]
 800d1f6:	8043      	strh	r3, [r0, #2]
 800d1f8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800d1fc:	2bff      	cmp	r3, #255	; 0xff
 800d1fe:	bf01      	itttt	eq
 800d200:	890b      	ldrheq	r3, [r1, #8]
 800d202:	8083      	strheq	r3, [r0, #4]
 800d204:	894b      	ldrheq	r3, [r1, #10]
 800d206:	80c3      	strheq	r3, [r0, #6]
 800d208:	4770      	bx	lr
	...

0800d20c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800d20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d20e:	4604      	mov	r4, r0
 800d210:	466b      	mov	r3, sp
 800d212:	6808      	ldr	r0, [r1, #0]
 800d214:	6849      	ldr	r1, [r1, #4]
 800d216:	c303      	stmia	r3!, {r0, r1}
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	4669      	mov	r1, sp
 800d21c:	4620      	mov	r0, r4
 800d21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d220:	4798      	blx	r3
 800d222:	4b08      	ldr	r3, [pc, #32]	; (800d244 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d22a:	b10a      	cbz	r2, 800d230 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800d22c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d22e:	b900      	cbnz	r0, 800d232 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800d230:	6898      	ldr	r0, [r3, #8]
 800d232:	6803      	ldr	r3, [r0, #0]
 800d234:	4669      	mov	r1, sp
 800d236:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d238:	699d      	ldr	r5, [r3, #24]
 800d23a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d23e:	47a8      	blx	r5
 800d240:	b003      	add	sp, #12
 800d242:	bd30      	pop	{r4, r5, pc}
 800d244:	24006bbc 	.word	0x24006bbc

0800d248 <_ZN8touchgfx3BoxD1Ev>:
 800d248:	4770      	bx	lr

0800d24a <_ZN8touchgfx3BoxD0Ev>:
 800d24a:	b510      	push	{r4, lr}
 800d24c:	4604      	mov	r4, r0
 800d24e:	212c      	movs	r1, #44	; 0x2c
 800d250:	f00d fe0e 	bl	801ae70 <_ZdlPvj>
 800d254:	4620      	mov	r0, r4
 800d256:	bd10      	pop	{r4, pc}

0800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800d258:	b570      	push	{r4, r5, r6, lr}
 800d25a:	880b      	ldrh	r3, [r1, #0]
 800d25c:	4605      	mov	r5, r0
 800d25e:	4604      	mov	r4, r0
 800d260:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800d262:	8813      	ldrh	r3, [r2, #0]
 800d264:	f825 3f30 	strh.w	r3, [r5, #48]!
 800d268:	4628      	mov	r0, r5
 800d26a:	f005 fb05 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d26e:	4606      	mov	r6, r0
 800d270:	4628      	mov	r0, r5
 800d272:	f005 fb3b 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	4605      	mov	r5, r0
 800d27a:	b231      	sxth	r1, r6
 800d27c:	4620      	mov	r0, r4
 800d27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d280:	4798      	blx	r3
 800d282:	6823      	ldr	r3, [r4, #0]
 800d284:	b229      	sxth	r1, r5
 800d286:	4620      	mov	r0, r4
 800d288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d28e:	4718      	bx	r3

0800d290 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800d290:	b510      	push	{r4, lr}
 800d292:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800d296:	4604      	mov	r4, r0
 800d298:	2bff      	cmp	r3, #255	; 0xff
 800d29a:	d006      	beq.n	800d2aa <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800d29c:	2300      	movs	r3, #0
 800d29e:	8003      	strh	r3, [r0, #0]
 800d2a0:	8043      	strh	r3, [r0, #2]
 800d2a2:	8083      	strh	r3, [r0, #4]
 800d2a4:	80c3      	strh	r3, [r0, #6]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	bd10      	pop	{r4, pc}
 800d2aa:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800d2ae:	b11b      	cbz	r3, 800d2b8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800d2b0:	3130      	adds	r1, #48	; 0x30
 800d2b2:	f005 fb55 	bl	8012960 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d2b6:	e7f6      	b.n	800d2a6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800d2b8:	312e      	adds	r1, #46	; 0x2e
 800d2ba:	e7fa      	b.n	800d2b2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800d2bc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800d2c4:	b08a      	sub	sp, #40	; 0x28
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	4688      	mov	r8, r1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d044      	beq.n	800d358 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800d2ce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800d2d0:	a805      	add	r0, sp, #20
 800d2d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d2d6:	f005 facf 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d2da:	4605      	mov	r5, r0
 800d2dc:	b206      	sxth	r6, r0
 800d2de:	a805      	add	r0, sp, #20
 800d2e0:	f005 fb04 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d2e4:	f9b8 2000 	ldrsh.w	r2, [r8]
 800d2e8:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	fa0f fc80 	sxth.w	ip, r0
 800d2f2:	4417      	add	r7, r2
 800d2f4:	9306      	str	r3, [sp, #24]
 800d2f6:	b2bf      	uxth	r7, r7
 800d2f8:	fa0f fe87 	sxth.w	lr, r7
 800d2fc:	459e      	cmp	lr, r3
 800d2fe:	dd2d      	ble.n	800d35c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d300:	4296      	cmp	r6, r2
 800d302:	dd2b      	ble.n	800d35c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d304:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800d308:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800d30c:	4419      	add	r1, r3
 800d30e:	b289      	uxth	r1, r1
 800d310:	fa0f f881 	sxth.w	r8, r1
 800d314:	f1b8 0f00 	cmp.w	r8, #0
 800d318:	dd20      	ble.n	800d35c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d31a:	459c      	cmp	ip, r3
 800d31c:	dd1e      	ble.n	800d35c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d31e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800d322:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d326:	4576      	cmp	r6, lr
 800d328:	bfa8      	it	ge
 800d32a:	463d      	movge	r5, r7
 800d32c:	45c4      	cmp	ip, r8
 800d32e:	bfa8      	it	ge
 800d330:	4608      	movge	r0, r1
 800d332:	f8ad 2018 	strh.w	r2, [sp, #24]
 800d336:	1aad      	subs	r5, r5, r2
 800d338:	1ac0      	subs	r0, r0, r3
 800d33a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d33e:	f8ad 501c 	strh.w	r5, [sp, #28]
 800d342:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d346:	4b1f      	ldr	r3, [pc, #124]	; (800d3c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	b953      	cbnz	r3, 800d362 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800d34c:	4b1e      	ldr	r3, [pc, #120]	; (800d3c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800d34e:	2187      	movs	r1, #135	; 0x87
 800d350:	4a1e      	ldr	r2, [pc, #120]	; (800d3cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800d352:	481f      	ldr	r0, [pc, #124]	; (800d3d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800d354:	f00d fea2 	bl	801b09c <__assert_func>
 800d358:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800d35a:	e7b9      	b.n	800d2d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800d35c:	2300      	movs	r3, #0
 800d35e:	9307      	str	r3, [sp, #28]
 800d360:	e7f1      	b.n	800d346 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800d362:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d026      	beq.n	800d3bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800d36e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d372:	2b00      	cmp	r3, #0
 800d374:	dd22      	ble.n	800d3bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800d376:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	dd1e      	ble.n	800d3bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800d37e:	2300      	movs	r3, #0
 800d380:	a908      	add	r1, sp, #32
 800d382:	4620      	mov	r0, r4
 800d384:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38c:	4798      	blx	r3
 800d38e:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d396:	b10a      	cbz	r2, 800d39c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800d398:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d39a:	b900      	cbnz	r0, 800d39e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800d39c:	6898      	ldr	r0, [r3, #8]
 800d39e:	2501      	movs	r5, #1
 800d3a0:	6801      	ldr	r1, [r0, #0]
 800d3a2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800d3a6:	9502      	str	r5, [sp, #8]
 800d3a8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800d3ac:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800d3b0:	9401      	str	r4, [sp, #4]
 800d3b2:	ac06      	add	r4, sp, #24
 800d3b4:	9400      	str	r4, [sp, #0]
 800d3b6:	688c      	ldr	r4, [r1, #8]
 800d3b8:	a905      	add	r1, sp, #20
 800d3ba:	47a0      	blx	r4
 800d3bc:	b00a      	add	sp, #40	; 0x28
 800d3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c2:	bf00      	nop
 800d3c4:	24006c44 	.word	0x24006c44
 800d3c8:	0801dcf6 	.word	0x0801dcf6
 800d3cc:	0801df78 	.word	0x0801df78
 800d3d0:	0801dd32 	.word	0x0801dd32
 800d3d4:	24006bbc 	.word	0x24006bbc

0800d3d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 800d3d8:	4770      	bx	lr
	...

0800d3dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800d3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3e2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	d02a      	beq.n	800d440 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800d3ea:	4b16      	ldr	r3, [pc, #88]	; (800d444 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	b92b      	cbnz	r3, 800d3fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800d3f0:	4b15      	ldr	r3, [pc, #84]	; (800d448 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800d3f2:	21ae      	movs	r1, #174	; 0xae
 800d3f4:	4a15      	ldr	r2, [pc, #84]	; (800d44c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800d3f6:	4816      	ldr	r0, [pc, #88]	; (800d450 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800d3f8:	f00d fe50 	bl	801b09c <__assert_func>
 800d3fc:	4a15      	ldr	r2, [pc, #84]	; (800d454 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800d3fe:	8812      	ldrh	r2, [r2, #0]
 800d400:	428a      	cmp	r2, r1
 800d402:	d803      	bhi.n	800d40c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800d404:	4b14      	ldr	r3, [pc, #80]	; (800d458 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800d406:	21af      	movs	r1, #175	; 0xaf
 800d408:	4a10      	ldr	r2, [pc, #64]	; (800d44c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800d40a:	e7f4      	b.n	800d3f6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800d40c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800d410:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800d414:	4b11      	ldr	r3, [pc, #68]	; (800d45c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800d416:	7854      	ldrb	r4, [r2, #1]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800d41e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800d422:	682b      	ldr	r3, [r5, #0]
 800d424:	69df      	ldr	r7, [r3, #28]
 800d426:	4b0e      	ldr	r3, [pc, #56]	; (800d460 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800d428:	6818      	ldr	r0, [r3, #0]
 800d42a:	f7f6 fa95 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 800d42e:	2300      	movs	r3, #0
 800d430:	4602      	mov	r2, r0
 800d432:	4621      	mov	r1, r4
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	4628      	mov	r0, r5
 800d438:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800d43a:	47b8      	blx	r7
 800d43c:	b003      	add	sp, #12
 800d43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d440:	2000      	movs	r0, #0
 800d442:	e7fb      	b.n	800d43c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800d444:	24006c0c 	.word	0x24006c0c
 800d448:	0801cd30 	.word	0x0801cd30
 800d44c:	0801e024 	.word	0x0801e024
 800d450:	0801cdbe 	.word	0x0801cdbe
 800d454:	24006c10 	.word	0x24006c10
 800d458:	0801cde7 	.word	0x0801cde7
 800d45c:	24006c14 	.word	0x24006c14
 800d460:	24006c18 	.word	0x24006c18

0800d464 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d46a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d46c:	4604      	mov	r4, r0
 800d46e:	4299      	cmp	r1, r3
 800d470:	d01e      	beq.n	800d4b0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800d472:	6803      	ldr	r3, [r0, #0]
 800d474:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800d476:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	b92b      	cbnz	r3, 800d488 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 800d47c:	4b0e      	ldr	r3, [pc, #56]	; (800d4b8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800d47e:	21ae      	movs	r1, #174	; 0xae
 800d480:	4a0e      	ldr	r2, [pc, #56]	; (800d4bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800d482:	480f      	ldr	r0, [pc, #60]	; (800d4c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800d484:	f00d fe0a 	bl	801b09c <__assert_func>
 800d488:	4b0e      	ldr	r3, [pc, #56]	; (800d4c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800d48a:	881b      	ldrh	r3, [r3, #0]
 800d48c:	428b      	cmp	r3, r1
 800d48e:	d803      	bhi.n	800d498 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 800d490:	4b0d      	ldr	r3, [pc, #52]	; (800d4c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 800d492:	21af      	movs	r1, #175	; 0xaf
 800d494:	4a09      	ldr	r2, [pc, #36]	; (800d4bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800d496:	e7f4      	b.n	800d482 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 800d498:	4b0c      	ldr	r3, [pc, #48]	; (800d4cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	f7f6 fa5c 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 800d4a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	46ac      	mov	ip, r5
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4ae:	4760      	bx	ip
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
 800d4b4:	24006c0c 	.word	0x24006c0c
 800d4b8:	0801cd30 	.word	0x0801cd30
 800d4bc:	0801e024 	.word	0x0801e024
 800d4c0:	0801cdbe 	.word	0x0801cdbe
 800d4c4:	24006c10 	.word	0x24006c10
 800d4c8:	0801cde7 	.word	0x0801cde7
 800d4cc:	24006c18 	.word	0x24006c18

0800d4d0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	2140      	movs	r1, #64	; 0x40
 800d4d6:	f00d fccb 	bl	801ae70 <_ZdlPvj>
 800d4da:	4620      	mov	r0, r4
 800d4dc:	bd10      	pop	{r4, pc}
	...

0800d4e0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800d4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4e8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800d4ea:	b08c      	sub	sp, #48	; 0x30
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	460e      	mov	r6, r1
 800d4f2:	d05d      	beq.n	800d5b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800d4f4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800d5d4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 800d4f8:	f8d8 2000 	ldr.w	r2, [r8]
 800d4fc:	b92a      	cbnz	r2, 800d50a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 800d4fe:	4b2e      	ldr	r3, [pc, #184]	; (800d5b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 800d500:	21ae      	movs	r1, #174	; 0xae
 800d502:	4a2e      	ldr	r2, [pc, #184]	; (800d5bc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800d504:	482e      	ldr	r0, [pc, #184]	; (800d5c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 800d506:	f00d fdc9 	bl	801b09c <__assert_func>
 800d50a:	4f2e      	ldr	r7, [pc, #184]	; (800d5c4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 800d50c:	8839      	ldrh	r1, [r7, #0]
 800d50e:	4299      	cmp	r1, r3
 800d510:	d803      	bhi.n	800d51a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 800d512:	4b2d      	ldr	r3, [pc, #180]	; (800d5c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 800d514:	21af      	movs	r1, #175	; 0xaf
 800d516:	4a29      	ldr	r2, [pc, #164]	; (800d5bc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800d518:	e7f4      	b.n	800d504 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 800d51a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800d51e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d522:	4b2a      	ldr	r3, [pc, #168]	; (800d5cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d040      	beq.n	800d5b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800d52e:	784b      	ldrb	r3, [r1, #1]
 800d530:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 800d534:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800d538:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800d53c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800d540:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d544:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800d548:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800d54c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800d550:	ad05      	add	r5, sp, #20
 800d552:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d554:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800d558:	9207      	str	r2, [sp, #28]
 800d55a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800d55e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800d562:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800d566:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800d56a:	f88d a020 	strb.w	sl, [sp, #32]
 800d56e:	9009      	str	r0, [sp, #36]	; 0x24
 800d570:	f7fe fb92 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800d574:	4621      	mov	r1, r4
 800d576:	4681      	mov	r9, r0
 800d578:	4628      	mov	r0, r5
 800d57a:	f002 ffe7 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d57e:	f8d8 3000 	ldr.w	r3, [r8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d0bb      	beq.n	800d4fe <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 800d586:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800d588:	883b      	ldrh	r3, [r7, #0]
 800d58a:	428b      	cmp	r3, r1
 800d58c:	d9c1      	bls.n	800d512 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 800d58e:	4b10      	ldr	r3, [pc, #64]	; (800d5d0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 800d590:	6818      	ldr	r0, [r3, #0]
 800d592:	f7f6 f9e1 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 800d596:	2300      	movs	r3, #0
 800d598:	9303      	str	r3, [sp, #12]
 800d59a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d59c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800d5a0:	ab07      	add	r3, sp, #28
 800d5a2:	4648      	mov	r0, r9
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	4633      	mov	r3, r6
 800d5a8:	e895 0006 	ldmia.w	r5, {r1, r2}
 800d5ac:	f7f6 f986 	bl	80038bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800d5b0:	b00c      	add	sp, #48	; 0x30
 800d5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5b6:	bf00      	nop
 800d5b8:	0801cd30 	.word	0x0801cd30
 800d5bc:	0801e024 	.word	0x0801e024
 800d5c0:	0801cdbe 	.word	0x0801cdbe
 800d5c4:	24006c10 	.word	0x24006c10
 800d5c8:	0801cde7 	.word	0x0801cde7
 800d5cc:	24006c14 	.word	0x24006c14
 800d5d0:	24006c18 	.word	0x24006c18
 800d5d4:	24006c0c 	.word	0x24006c0c

0800d5d8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800d5d8:	4770      	bx	lr

0800d5da <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800d5da:	b510      	push	{r4, lr}
 800d5dc:	4604      	mov	r4, r0
 800d5de:	2134      	movs	r1, #52	; 0x34
 800d5e0:	f00d fc46 	bl	801ae70 <_ZdlPvj>
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	bd10      	pop	{r4, pc}

0800d5e8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800d5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	460e      	mov	r6, r1
 800d5f2:	b08e      	sub	sp, #56	; 0x38
 800d5f4:	b218      	sxth	r0, r3
 800d5f6:	8921      	ldrh	r1, [r4, #8]
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	8962      	ldrh	r2, [r4, #10]
 800d5fc:	f8ad 0000 	strh.w	r0, [sp]
 800d600:	b29b      	uxth	r3, r3
 800d602:	f8ad 0002 	strh.w	r0, [sp, #2]
 800d606:	1ac9      	subs	r1, r1, r3
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	b209      	sxth	r1, r1
 800d60c:	b21b      	sxth	r3, r3
 800d60e:	2900      	cmp	r1, #0
 800d610:	f8ad 1004 	strh.w	r1, [sp, #4]
 800d614:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d618:	dd5e      	ble.n	800d6d8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	dd5c      	ble.n	800d6d8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800d61e:	6830      	ldr	r0, [r6, #0]
 800d620:	ab02      	add	r3, sp, #8
 800d622:	6871      	ldr	r1, [r6, #4]
 800d624:	c303      	stmia	r3!, {r0, r1}
 800d626:	4669      	mov	r1, sp
 800d628:	a802      	add	r0, sp, #8
 800d62a:	f7fe f865 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800d62e:	4620      	mov	r0, r4
 800d630:	a902      	add	r1, sp, #8
 800d632:	f7ff fdeb 	bl	800d20c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800d636:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800d638:	2800      	cmp	r0, #0
 800d63a:	d05f      	beq.n	800d6fc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800d63c:	8963      	ldrh	r3, [r4, #10]
 800d63e:	b202      	sxth	r2, r0
 800d640:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d644:	2500      	movs	r5, #0
 800d646:	1a1f      	subs	r7, r3, r0
 800d648:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800d64c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d650:	b21b      	sxth	r3, r3
 800d652:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800d656:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800d65a:	af04      	add	r7, sp, #16
 800d65c:	1a09      	subs	r1, r1, r0
 800d65e:	9506      	str	r5, [sp, #24]
 800d660:	f8ad 201e 	strh.w	r2, [sp, #30]
 800d664:	f8ad 5020 	strh.w	r5, [sp, #32]
 800d668:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800d66c:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800d670:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800d674:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800d678:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800d67c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800d680:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800d684:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d688:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d68c:	ab06      	add	r3, sp, #24
 800d68e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d692:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d696:	e887 0003 	stmia.w	r7, {r0, r1}
 800d69a:	4631      	mov	r1, r6
 800d69c:	4638      	mov	r0, r7
 800d69e:	f7fe f82b 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800d6a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	dd12      	ble.n	800d6d0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800d6aa:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	dd0e      	ble.n	800d6d0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ba:	4798      	blx	r3
 800d6bc:	f7fe faec 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800d6c0:	6803      	ldr	r3, [r0, #0]
 800d6c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800d6ca:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d6ce:	47c0      	blx	r8
 800d6d0:	3501      	adds	r5, #1
 800d6d2:	2d04      	cmp	r5, #4
 800d6d4:	d1da      	bne.n	800d68c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800d6d6:	e011      	b.n	800d6fc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800d6d8:	6830      	ldr	r0, [r6, #0]
 800d6da:	ab06      	add	r3, sp, #24
 800d6dc:	6871      	ldr	r1, [r6, #4]
 800d6de:	c303      	stmia	r3!, {r0, r1}
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	a906      	add	r1, sp, #24
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e8:	4798      	blx	r3
 800d6ea:	f7fe fad5 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 800d6ee:	6803      	ldr	r3, [r0, #0]
 800d6f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d6f2:	a906      	add	r1, sp, #24
 800d6f4:	699d      	ldr	r5, [r3, #24]
 800d6f6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d6fa:	47a8      	blx	r5
 800d6fc:	b00e      	add	sp, #56	; 0x38
 800d6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d702 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 800d702:	4770      	bx	lr

0800d704 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800d704:	b510      	push	{r4, lr}
 800d706:	4604      	mov	r4, r0
 800d708:	213c      	movs	r1, #60	; 0x3c
 800d70a:	f00d fbb1 	bl	801ae70 <_ZdlPvj>
 800d70e:	4620      	mov	r0, r4
 800d710:	bd10      	pop	{r4, pc}

0800d712 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 800d712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d716:	461c      	mov	r4, r3
 800d718:	4606      	mov	r6, r0
 800d71a:	9f06      	ldr	r7, [sp, #24]
 800d71c:	f7ff fd9c 	bl	800d258 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800d720:	8823      	ldrh	r3, [r4, #0]
 800d722:	f04f 0802 	mov.w	r8, #2
 800d726:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 800d72a:	4638      	mov	r0, r7
 800d72c:	86b3      	strh	r3, [r6, #52]	; 0x34
 800d72e:	883b      	ldrh	r3, [r7, #0]
 800d730:	fb95 f5f8 	sdiv	r5, r5, r8
 800d734:	86f3      	strh	r3, [r6, #54]	; 0x36
 800d736:	b2ad      	uxth	r5, r5
 800d738:	f005 f89e 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d73c:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 800d740:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 800d744:	fb94 f4f8 	sdiv	r4, r4, r8
 800d748:	b2a4      	uxth	r4, r4
 800d74a:	8730      	strh	r0, [r6, #56]	; 0x38
 800d74c:	4638      	mov	r0, r7
 800d74e:	f005 f8cd 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d752:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 800d756:	8770      	strh	r0, [r6, #58]	; 0x3a
 800d758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d75c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 800d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d760:	4604      	mov	r4, r0
 800d762:	b08c      	sub	sp, #48	; 0x30
 800d764:	460d      	mov	r5, r1
 800d766:	f7ff fda9 	bl	800d2bc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800d76a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d76e:	b33b      	cbz	r3, 800d7c0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 800d770:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800d772:	a805      	add	r0, sp, #20
 800d774:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d778:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 800d77c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 800d780:	f005 f87a 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d784:	4606      	mov	r6, r0
 800d786:	a805      	add	r0, sp, #20
 800d788:	f005 f8b0 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d78c:	6869      	ldr	r1, [r5, #4]
 800d78e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d792:	ab08      	add	r3, sp, #32
 800d794:	6828      	ldr	r0, [r5, #0]
 800d796:	ad08      	add	r5, sp, #32
 800d798:	f8ad 8018 	strh.w	r8, [sp, #24]
 800d79c:	f8ad 701a 	strh.w	r7, [sp, #26]
 800d7a0:	f8ad 601c 	strh.w	r6, [sp, #28]
 800d7a4:	c303      	stmia	r3!, {r0, r1}
 800d7a6:	a906      	add	r1, sp, #24
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f7fd ffa5 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800d7ae:	4b25      	ldr	r3, [pc, #148]	; (800d844 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	b93b      	cbnz	r3, 800d7c4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 800d7b4:	4b24      	ldr	r3, [pc, #144]	; (800d848 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 800d7b6:	2187      	movs	r1, #135	; 0x87
 800d7b8:	4a24      	ldr	r2, [pc, #144]	; (800d84c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 800d7ba:	4825      	ldr	r0, [pc, #148]	; (800d850 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 800d7bc:	f00d fc6e 	bl	801b09c <__assert_func>
 800d7c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800d7c2:	e7d6      	b.n	800d772 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 800d7c4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d7c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d035      	beq.n	800d83c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800d7d0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	dd31      	ble.n	800d83c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800d7d8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	dd2d      	ble.n	800d83c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	a90a      	add	r1, sp, #40	; 0x28
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ee:	4798      	blx	r3
 800d7f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d7f4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800d7f6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d7fa:	1a9b      	subs	r3, r3, r2
 800d7fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d800:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d802:	1ac9      	subs	r1, r1, r3
 800d804:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800d808:	4912      	ldr	r1, [pc, #72]	; (800d854 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 800d80a:	6809      	ldr	r1, [r1, #0]
 800d80c:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 800d810:	b108      	cbz	r0, 800d816 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 800d812:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800d814:	b900      	cbnz	r0, 800d818 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 800d816:	6888      	ldr	r0, [r1, #8]
 800d818:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800d81c:	2601      	movs	r6, #1
 800d81e:	440b      	add	r3, r1
 800d820:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800d824:	440a      	add	r2, r1
 800d826:	6801      	ldr	r1, [r0, #0]
 800d828:	9602      	str	r6, [sp, #8]
 800d82a:	b21b      	sxth	r3, r3
 800d82c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800d830:	b212      	sxth	r2, r2
 800d832:	e9cd 5400 	strd	r5, r4, [sp]
 800d836:	688c      	ldr	r4, [r1, #8]
 800d838:	a905      	add	r1, sp, #20
 800d83a:	47a0      	blx	r4
 800d83c:	b00c      	add	sp, #48	; 0x30
 800d83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d842:	bf00      	nop
 800d844:	24006c44 	.word	0x24006c44
 800d848:	0801dcf6 	.word	0x0801dcf6
 800d84c:	0801e12c 	.word	0x0801e12c
 800d850:	0801dd32 	.word	0x0801dd32
 800d854:	24006bbc 	.word	0x24006bbc

0800d858 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 800d858:	2101      	movs	r1, #1
 800d85a:	2200      	movs	r2, #0
 800d85c:	b510      	push	{r4, lr}
 800d85e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800d862:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800d866:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d86a:	4c0d      	ldr	r4, [pc, #52]	; (800d8a0 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 800d86c:	8082      	strh	r2, [r0, #4]
 800d86e:	80c2      	strh	r2, [r0, #6]
 800d870:	8102      	strh	r2, [r0, #8]
 800d872:	8142      	strh	r2, [r0, #10]
 800d874:	8182      	strh	r2, [r0, #12]
 800d876:	81c2      	strh	r2, [r0, #14]
 800d878:	8202      	strh	r2, [r0, #16]
 800d87a:	8242      	strh	r2, [r0, #18]
 800d87c:	61c2      	str	r2, [r0, #28]
 800d87e:	8402      	strh	r2, [r0, #32]
 800d880:	8442      	strh	r2, [r0, #34]	; 0x22
 800d882:	6282      	str	r2, [r0, #40]	; 0x28
 800d884:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800d888:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800d88a:	8601      	strh	r1, [r0, #48]	; 0x30
 800d88c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800d890:	6004      	str	r4, [r0, #0]
 800d892:	8681      	strh	r1, [r0, #52]	; 0x34
 800d894:	86c1      	strh	r1, [r0, #54]	; 0x36
 800d896:	8702      	strh	r2, [r0, #56]	; 0x38
 800d898:	8742      	strh	r2, [r0, #58]	; 0x3a
 800d89a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800d89e:	bd10      	pop	{r4, pc}
 800d8a0:	0801e0c0 	.word	0x0801e0c0

0800d8a4 <_ZN8touchgfx5ImageD1Ev>:
 800d8a4:	4770      	bx	lr

0800d8a6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800d8a6:	b570      	push	{r4, r5, r6, lr}
 800d8a8:	880b      	ldrh	r3, [r1, #0]
 800d8aa:	460d      	mov	r5, r1
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	84c3      	strh	r3, [r0, #38]	; 0x26
 800d8b0:	4608      	mov	r0, r1
 800d8b2:	f004 ffe1 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f005 f817 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	b231      	sxth	r1, r6
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c8:	4798      	blx	r3
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	b229      	sxth	r1, r5
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8d6:	4718      	bx	r3

0800d8d8 <_ZN8touchgfx5ImageD0Ev>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	4604      	mov	r4, r0
 800d8dc:	212c      	movs	r1, #44	; 0x2c
 800d8de:	f00d fac7 	bl	801ae70 <_ZdlPvj>
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	bd10      	pop	{r4, pc}

0800d8e6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800d8e6:	b510      	push	{r4, lr}
 800d8e8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	2bff      	cmp	r3, #255	; 0xff
 800d8f0:	d006      	beq.n	800d900 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	8003      	strh	r3, [r0, #0]
 800d8f6:	8043      	strh	r3, [r0, #2]
 800d8f8:	8083      	strh	r3, [r0, #4]
 800d8fa:	80c3      	strh	r3, [r0, #6]
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	bd10      	pop	{r4, pc}
 800d900:	3126      	adds	r1, #38	; 0x26
 800d902:	f005 f82d 	bl	8012960 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d906:	e7f9      	b.n	800d8fc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800d908 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800d908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90c:	4604      	mov	r4, r0
 800d90e:	b088      	sub	sp, #32
 800d910:	2500      	movs	r5, #0
 800d912:	460f      	mov	r7, r1
 800d914:	f854 3b26 	ldr.w	r3, [r4], #38
 800d918:	a904      	add	r1, sp, #16
 800d91a:	4606      	mov	r6, r0
 800d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d922:	4798      	blx	r3
 800d924:	4620      	mov	r0, r4
 800d926:	f004 ffa7 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d92a:	4680      	mov	r8, r0
 800d92c:	4620      	mov	r0, r4
 800d92e:	f004 ffdd 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d932:	9506      	str	r5, [sp, #24]
 800d934:	ad06      	add	r5, sp, #24
 800d936:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d93a:	4639      	mov	r1, r7
 800d93c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800d940:	4628      	mov	r0, r5
 800d942:	f7fd fed9 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800d946:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	dd19      	ble.n	800d982 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d94e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d952:	2b00      	cmp	r3, #0
 800d954:	dd15      	ble.n	800d982 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d956:	4b0c      	ldr	r3, [pc, #48]	; (800d988 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d95e:	b10a      	cbz	r2, 800d964 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800d960:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d962:	b900      	cbnz	r0, 800d966 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800d964:	6898      	ldr	r0, [r3, #8]
 800d966:	2701      	movs	r7, #1
 800d968:	6801      	ldr	r1, [r0, #0]
 800d96a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d96e:	9702      	str	r7, [sp, #8]
 800d970:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800d974:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d978:	e9cd 5600 	strd	r5, r6, [sp]
 800d97c:	688d      	ldr	r5, [r1, #8]
 800d97e:	4621      	mov	r1, r4
 800d980:	47a8      	blx	r5
 800d982:	b008      	add	sp, #32
 800d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d988:	24006bbc 	.word	0x24006bbc

0800d98c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 800d98c:	4770      	bx	lr

0800d98e <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800d98e:	b510      	push	{r4, lr}
 800d990:	4604      	mov	r4, r0
 800d992:	2148      	movs	r1, #72	; 0x48
 800d994:	f00d fa6c 	bl	801ae70 <_ZdlPvj>
 800d998:	4620      	mov	r0, r4
 800d99a:	bd10      	pop	{r4, pc}

0800d99c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 800d99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	b08c      	sub	sp, #48	; 0x30
 800d9a4:	4688      	mov	r8, r1
 800d9a6:	f7ff fc89 	bl	800d2bc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800d9aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800d9ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	f000 809a 	beq.w	800daea <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800d9b6:	4e55      	ldr	r6, [pc, #340]	; (800db0c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 800d9b8:	6832      	ldr	r2, [r6, #0]
 800d9ba:	b92a      	cbnz	r2, 800d9c8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 800d9bc:	4b54      	ldr	r3, [pc, #336]	; (800db10 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 800d9be:	21ae      	movs	r1, #174	; 0xae
 800d9c0:	4a54      	ldr	r2, [pc, #336]	; (800db14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800d9c2:	4855      	ldr	r0, [pc, #340]	; (800db18 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 800d9c4:	f00d fb6a 	bl	801b09c <__assert_func>
 800d9c8:	4d54      	ldr	r5, [pc, #336]	; (800db1c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 800d9ca:	8829      	ldrh	r1, [r5, #0]
 800d9cc:	4299      	cmp	r1, r3
 800d9ce:	d803      	bhi.n	800d9d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 800d9d0:	4b53      	ldr	r3, [pc, #332]	; (800db20 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 800d9d2:	21af      	movs	r1, #175	; 0xaf
 800d9d4:	4a4f      	ldr	r2, [pc, #316]	; (800db14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800d9d6:	e7f4      	b.n	800d9c2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 800d9d8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d9dc:	f04f 0c02 	mov.w	ip, #2
 800d9e0:	4b50      	ldr	r3, [pc, #320]	; (800db24 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 800d9e2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9ec:	f1be 0f01 	cmp.w	lr, #1
 800d9f0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800d9f4:	f04f 0300 	mov.w	r3, #0
 800d9f8:	b208      	sxth	r0, r1
 800d9fa:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800da04:	d074      	beq.n	800daf0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800da06:	f1be 0f03 	cmp.w	lr, #3
 800da0a:	d071      	beq.n	800daf0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800da0c:	1a52      	subs	r2, r2, r1
 800da0e:	f8ad 3010 	strh.w	r3, [sp, #16]
 800da12:	f8ad 0012 	strh.w	r0, [sp, #18]
 800da16:	fb92 f2fc 	sdiv	r2, r2, ip
 800da1a:	f8ad 200e 	strh.w	r2, [sp, #14]
 800da1e:	f10d 090c 	add.w	r9, sp, #12
 800da22:	f10d 0a14 	add.w	sl, sp, #20
 800da26:	e899 0003 	ldmia.w	r9, {r0, r1}
 800da2a:	e88a 0003 	stmia.w	sl, {r0, r1}
 800da2e:	4641      	mov	r1, r8
 800da30:	4650      	mov	r0, sl
 800da32:	f7fd fe61 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800da36:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	dd55      	ble.n	800daea <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800da3e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800da42:	2b00      	cmp	r3, #0
 800da44:	dd51      	ble.n	800daea <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800da46:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800da4a:	4649      	mov	r1, r9
 800da4c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800da50:	4620      	mov	r0, r4
 800da52:	1a9b      	subs	r3, r3, r2
 800da54:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800da58:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800da60:	1a9b      	subs	r3, r3, r2
 800da62:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6a:	4798      	blx	r3
 800da6c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800da70:	2b00      	cmp	r3, #0
 800da72:	d047      	beq.n	800db04 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 800da74:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800da78:	6833      	ldr	r3, [r6, #0]
 800da7a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d09c      	beq.n	800d9bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 800da82:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800da84:	882d      	ldrh	r5, [r5, #0]
 800da86:	428d      	cmp	r5, r1
 800da88:	d9a2      	bls.n	800d9d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 800da8a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800da8e:	6812      	ldr	r2, [r2, #0]
 800da90:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 800da94:	785b      	ldrb	r3, [r3, #1]
 800da96:	9209      	str	r2, [sp, #36]	; 0x24
 800da98:	f3c3 0501 	ubfx	r5, r3, #0, #2
 800da9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800daa0:	9707      	str	r7, [sp, #28]
 800daa2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800daa6:	2300      	movs	r3, #0
 800daa8:	f88d 5020 	strb.w	r5, [sp, #32]
 800daac:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800dab0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800dab4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800dab8:	4b1b      	ldr	r3, [pc, #108]	; (800db28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 800daba:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800dac4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800dac8:	b10a      	cbz	r2, 800dace <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 800daca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dacc:	b904      	cbnz	r4, 800dad0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 800dace:	689c      	ldr	r4, [r3, #8]
 800dad0:	4b16      	ldr	r3, [pc, #88]	; (800db2c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 800dad2:	6818      	ldr	r0, [r3, #0]
 800dad4:	f7f5 ff40 	bl	8003958 <_ZNK8touchgfx5Texts7getTextEt>
 800dad8:	ab07      	add	r3, sp, #28
 800dada:	9001      	str	r0, [sp, #4]
 800dadc:	4620      	mov	r0, r4
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	4653      	mov	r3, sl
 800dae2:	e899 0006 	ldmia.w	r9, {r1, r2}
 800dae6:	f7f5 fee9 	bl	80038bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800daea:	b00c      	add	sp, #48	; 0x30
 800daec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf0:	1a5b      	subs	r3, r3, r1
 800daf2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800daf6:	f8ad 2012 	strh.w	r2, [sp, #18]
 800dafa:	fb93 f3fc 	sdiv	r3, r3, ip
 800dafe:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db02:	e78c      	b.n	800da1e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 800db04:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800db08:	e7b6      	b.n	800da78 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 800db0a:	bf00      	nop
 800db0c:	24006c0c 	.word	0x24006c0c
 800db10:	0801cd30 	.word	0x0801cd30
 800db14:	0801e238 	.word	0x0801e238
 800db18:	0801cdbe 	.word	0x0801cdbe
 800db1c:	24006c10 	.word	0x24006c10
 800db20:	0801cde7 	.word	0x0801cde7
 800db24:	24006c14 	.word	0x24006c14
 800db28:	24006bbc 	.word	0x24006bbc
 800db2c:	24006c18 	.word	0x24006c18

0800db30 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 800db30:	2101      	movs	r1, #1
 800db32:	2200      	movs	r2, #0
 800db34:	b510      	push	{r4, lr}
 800db36:	4c13      	ldr	r4, [pc, #76]	; (800db84 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 800db38:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800db3c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800db40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800db44:	6004      	str	r4, [r0, #0]
 800db46:	4c10      	ldr	r4, [pc, #64]	; (800db88 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800db48:	8082      	strh	r2, [r0, #4]
 800db4a:	80c2      	strh	r2, [r0, #6]
 800db4c:	8102      	strh	r2, [r0, #8]
 800db4e:	8142      	strh	r2, [r0, #10]
 800db50:	8182      	strh	r2, [r0, #12]
 800db52:	81c2      	strh	r2, [r0, #14]
 800db54:	8202      	strh	r2, [r0, #16]
 800db56:	8242      	strh	r2, [r0, #18]
 800db58:	61c2      	str	r2, [r0, #28]
 800db5a:	8402      	strh	r2, [r0, #32]
 800db5c:	8442      	strh	r2, [r0, #34]	; 0x22
 800db5e:	6282      	str	r2, [r0, #40]	; 0x28
 800db60:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800db64:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800db66:	8601      	strh	r1, [r0, #48]	; 0x30
 800db68:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800db6c:	6344      	str	r4, [r0, #52]	; 0x34
 800db6e:	8701      	strh	r1, [r0, #56]	; 0x38
 800db70:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800db74:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800db78:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800db7c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800db80:	bd10      	pop	{r4, pc}
 800db82:	bf00      	nop
 800db84:	0801e1d0 	.word	0x0801e1d0
 800db88:	0801c930 	.word	0x0801c930

0800db8c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800db8c:	b510      	push	{r4, lr}
 800db8e:	6803      	ldr	r3, [r0, #0]
 800db90:	460c      	mov	r4, r1
 800db92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db94:	4798      	blx	r3
 800db96:	1b03      	subs	r3, r0, r4
 800db98:	4258      	negs	r0, r3
 800db9a:	4158      	adcs	r0, r3
 800db9c:	bd10      	pop	{r4, pc}
	...

0800dba0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800dba0:	4b01      	ldr	r3, [pc, #4]	; (800dba8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800dba2:	6019      	str	r1, [r3, #0]
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	24006bc4 	.word	0x24006bc4

0800dbac <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb0:	4696      	mov	lr, r2
 800dbb2:	b097      	sub	sp, #92	; 0x5c
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	4614      	mov	r4, r2
 800dbb8:	460e      	mov	r6, r1
 800dbba:	461f      	mov	r7, r3
 800dbbc:	f10d 0c1c 	add.w	ip, sp, #28
 800dbc0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800dbc4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800dbc8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800dbcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbd4:	f8de 3000 	ldr.w	r3, [lr]
 800dbd8:	f104 0e14 	add.w	lr, r4, #20
 800dbdc:	f8cc 3000 	str.w	r3, [ip]
 800dbe0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800dbe4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbe8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbec:	f8de 3000 	ldr.w	r3, [lr]
 800dbf0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800dbf4:	f8cc 3000 	str.w	r3, [ip]
 800dbf8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800dbfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc04:	f8de 3000 	ldr.w	r3, [lr]
 800dc08:	4631      	mov	r1, r6
 800dc0a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f8cc 3000 	str.w	r3, [ip]
 800dc12:	682b      	ldr	r3, [r5, #0]
 800dc14:	9201      	str	r2, [sp, #4]
 800dc16:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc18:	f8cd 8008 	str.w	r8, [sp, #8]
 800dc1c:	9200      	str	r2, [sp, #0]
 800dc1e:	aa07      	add	r2, sp, #28
 800dc20:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800dc24:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800dc28:	463b      	mov	r3, r7
 800dc2a:	47d8      	blx	fp
 800dc2c:	46a6      	mov	lr, r4
 800dc2e:	f10d 0c1c 	add.w	ip, sp, #28
 800dc32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc3a:	f8de 3000 	ldr.w	r3, [lr]
 800dc3e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800dc42:	343c      	adds	r4, #60	; 0x3c
 800dc44:	f8cc 3000 	str.w	r3, [ip]
 800dc48:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800dc4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc54:	f8de 3000 	ldr.w	r3, [lr]
 800dc58:	f8cc 3000 	str.w	r3, [ip]
 800dc5c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800dc60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f8cc 3000 	str.w	r3, [ip]
 800dc70:	682b      	ldr	r3, [r5, #0]
 800dc72:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800dc76:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc78:	f8cd 8008 	str.w	r8, [sp, #8]
 800dc7c:	9201      	str	r2, [sp, #4]
 800dc7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc80:	9200      	str	r2, [sp, #0]
 800dc82:	aa07      	add	r2, sp, #28
 800dc84:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800dc86:	463b      	mov	r3, r7
 800dc88:	47a0      	blx	r4
 800dc8a:	b017      	add	sp, #92	; 0x5c
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc90 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	b08d      	sub	sp, #52	; 0x34
 800dc96:	4688      	mov	r8, r1
 800dc98:	f8d3 c000 	ldr.w	ip, [r3]
 800dc9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc9e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800dca2:	680f      	ldr	r7, [r1, #0]
 800dca4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800dca8:	eba7 070c 	sub.w	r7, r7, ip
 800dcac:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800dcb0:	edd3 6a07 	vldr	s13, [r3, #28]
 800dcb4:	42bc      	cmp	r4, r7
 800dcb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcb8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800dcbc:	bfa8      	it	ge
 800dcbe:	463c      	movge	r4, r7
 800dcc0:	f9b1 9000 	ldrsh.w	r9, [r1]
 800dcc4:	f9ba 1000 	ldrsh.w	r1, [sl]
 800dcc8:	ee07 4a90 	vmov	s15, r4
 800dccc:	eb09 0e0c 	add.w	lr, r9, ip
 800dcd0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800dcd4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800dcd8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800dcdc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800dce0:	4571      	cmp	r1, lr
 800dce2:	ee25 4a04 	vmul.f32	s8, s10, s8
 800dce6:	ee65 4a24 	vmul.f32	s9, s10, s9
 800dcea:	ee25 5a27 	vmul.f32	s10, s10, s15
 800dcee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dcf2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800dcf6:	ee32 1a05 	vadd.f32	s2, s4, s10
 800dcfa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dcfe:	ee36 0a84 	vadd.f32	s0, s13, s8
 800dd02:	ee61 1a87 	vmul.f32	s3, s3, s14
 800dd06:	ee22 2a07 	vmul.f32	s4, s4, s14
 800dd0a:	f340 808c 	ble.w	800de26 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800dd0e:	eba1 060e 	sub.w	r6, r1, lr
 800dd12:	fb96 f5f4 	sdiv	r5, r6, r4
 800dd16:	ee07 5a10 	vmov	s14, r5
 800dd1a:	2d00      	cmp	r5, #0
 800dd1c:	fb04 6615 	mls	r6, r4, r5, r6
 800dd20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dd24:	eea7 0a04 	vfma.f32	s0, s14, s8
 800dd28:	eee7 0a24 	vfma.f32	s1, s14, s9
 800dd2c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800dd30:	dd12      	ble.n	800dd58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800dd32:	ee70 6a44 	vsub.f32	s13, s0, s8
 800dd36:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800dd3a:	ee31 2a45 	vsub.f32	s4, s2, s10
 800dd3e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800dd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd46:	bf14      	ite	ne
 800dd48:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800dd4c:	eeb0 7a67 	vmoveq.f32	s14, s15
 800dd50:	ee61 1a87 	vmul.f32	s3, s3, s14
 800dd54:	ee22 2a07 	vmul.f32	s4, s4, s14
 800dd58:	fb05 f204 	mul.w	r2, r5, r4
 800dd5c:	1abf      	subs	r7, r7, r2
 800dd5e:	4494      	add	ip, r2
 800dd60:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800dd64:	4411      	add	r1, r2
 800dd66:	eb09 020c 	add.w	r2, r9, ip
 800dd6a:	b209      	sxth	r1, r1
 800dd6c:	443a      	add	r2, r7
 800dd6e:	428a      	cmp	r2, r1
 800dd70:	bfc4      	itt	gt
 800dd72:	eba1 0209 	subgt.w	r2, r1, r9
 800dd76:	eba2 070c 	subgt.w	r7, r2, ip
 800dd7a:	2f00      	cmp	r7, #0
 800dd7c:	dd50      	ble.n	800de20 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800dd7e:	fb97 f1f4 	sdiv	r1, r7, r4
 800dd82:	fb04 7211 	mls	r2, r4, r1, r7
 800dd86:	b90a      	cbnz	r2, 800dd8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800dd88:	3901      	subs	r1, #1
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800dd90:	6840      	ldr	r0, [r0, #4]
 800dd92:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800dd96:	44b6      	add	lr, r6
 800dd98:	f8d0 a000 	ldr.w	sl, [r0]
 800dd9c:	2900      	cmp	r1, #0
 800dd9e:	bfcc      	ite	gt
 800dda0:	46a1      	movgt	r9, r4
 800dda2:	4691      	movle	r9, r2
 800dda4:	900b      	str	r0, [sp, #44]	; 0x2c
 800dda6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dda8:	fb04 e505 	mla	r5, r4, r5, lr
 800ddac:	eef0 6a42 	vmov.f32	s13, s4
 800ddb0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800ddb4:	9008      	str	r0, [sp, #32]
 800ddb6:	eeb0 7a61 	vmov.f32	s14, s3
 800ddba:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ddc2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800ddc6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800ddca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ddcc:	445b      	add	r3, fp
 800ddce:	9307      	str	r3, [sp, #28]
 800ddd0:	ee16 3a90 	vmov	r3, s13
 800ddd4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800ddd8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800dddc:	ee21 3a23 	vmul.f32	s6, s2, s7
 800dde0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800dde4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800dde8:	ee17 7a90 	vmov	r7, s15
 800ddec:	ee73 7a42 	vsub.f32	s15, s6, s4
 800ddf0:	fb97 f7f4 	sdiv	r7, r7, r4
 800ddf4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ddf8:	ee17 ca90 	vmov	ip, s15
 800ddfc:	fb9c fcf4 	sdiv	ip, ip, r4
 800de00:	fb0c 3306 	mla	r3, ip, r6, r3
 800de04:	9302      	str	r3, [sp, #8]
 800de06:	ee17 3a10 	vmov	r3, s14
 800de0a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800de0e:	fb07 3706 	mla	r7, r7, r6, r3
 800de12:	eba9 0306 	sub.w	r3, r9, r6
 800de16:	e9cd 4700 	strd	r4, r7, [sp]
 800de1a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800de1e:	47a0      	blx	r4
 800de20:	b00d      	add	sp, #52	; 0x34
 800de22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de26:	2500      	movs	r5, #0
 800de28:	462e      	mov	r6, r5
 800de2a:	e799      	b.n	800dd60 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800de2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de30:	b0db      	sub	sp, #364	; 0x16c
 800de32:	461d      	mov	r5, r3
 800de34:	4614      	mov	r4, r2
 800de36:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800de3a:	910f      	str	r1, [sp, #60]	; 0x3c
 800de3c:	4629      	mov	r1, r5
 800de3e:	930a      	str	r3, [sp, #40]	; 0x28
 800de40:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800de44:	9009      	str	r0, [sp, #36]	; 0x24
 800de46:	930b      	str	r3, [sp, #44]	; 0x2c
 800de48:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800de4c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800de50:	9310      	str	r3, [sp, #64]	; 0x40
 800de52:	6803      	ldr	r3, [r0, #0]
 800de54:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800de56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de5a:	47b8      	blx	r7
 800de5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de5e:	6058      	str	r0, [r3, #4]
 800de60:	2800      	cmp	r0, #0
 800de62:	f000 83a1 	beq.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800de66:	682b      	ldr	r3, [r5, #0]
 800de68:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800de6c:	ed94 7a02 	vldr	s14, [r4, #8]
 800de70:	9314      	str	r3, [sp, #80]	; 0x50
 800de72:	686b      	ldr	r3, [r5, #4]
 800de74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de78:	9315      	str	r3, [sp, #84]	; 0x54
 800de7a:	4bc1      	ldr	r3, [pc, #772]	; (800e180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800de7c:	7819      	ldrb	r1, [r3, #0]
 800de7e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800de82:	2900      	cmp	r1, #0
 800de84:	bf16      	itet	ne
 800de86:	4619      	movne	r1, r3
 800de88:	4611      	moveq	r1, r2
 800de8a:	4613      	movne	r3, r2
 800de8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de90:	9116      	str	r1, [sp, #88]	; 0x58
 800de92:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800de96:	f240 8387 	bls.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800de9a:	ed94 7a07 	vldr	s14, [r4, #28]
 800de9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea6:	f240 837f 	bls.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800deaa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800deae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800deb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb6:	f240 8377 	bls.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800deba:	6822      	ldr	r2, [r4, #0]
 800debc:	4bb1      	ldr	r3, [pc, #708]	; (800e184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800debe:	429a      	cmp	r2, r3
 800dec0:	f2c0 8372 	blt.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dec4:	49b0      	ldr	r1, [pc, #704]	; (800e188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800dec6:	6963      	ldr	r3, [r4, #20]
 800dec8:	428a      	cmp	r2, r1
 800deca:	f300 836d 	bgt.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dece:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800ded2:	48ae      	ldr	r0, [pc, #696]	; (800e18c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800ded4:	33ff      	adds	r3, #255	; 0xff
 800ded6:	4283      	cmp	r3, r0
 800ded8:	f200 8366 	bhi.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dedc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dede:	4dac      	ldr	r5, [pc, #688]	; (800e190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800dee0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800dee4:	33ff      	adds	r3, #255	; 0xff
 800dee6:	42ab      	cmp	r3, r5
 800dee8:	f200 835e 	bhi.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800deec:	6862      	ldr	r2, [r4, #4]
 800deee:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800def2:	33ff      	adds	r3, #255	; 0xff
 800def4:	4283      	cmp	r3, r0
 800def6:	f200 8357 	bhi.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800defa:	69a1      	ldr	r1, [r4, #24]
 800defc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800df00:	33ff      	adds	r3, #255	; 0xff
 800df02:	4283      	cmp	r3, r0
 800df04:	f200 8350 	bhi.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800df08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800df0a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800df0e:	30ff      	adds	r0, #255	; 0xff
 800df10:	42a8      	cmp	r0, r5
 800df12:	f200 8349 	bhi.w	800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800df16:	428a      	cmp	r2, r1
 800df18:	f280 8110 	bge.w	800e13c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800df1c:	429a      	cmp	r2, r3
 800df1e:	f300 8119 	bgt.w	800e154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800df22:	4299      	cmp	r1, r3
 800df24:	f280 811d 	bge.w	800e162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800df28:	2502      	movs	r5, #2
 800df2a:	2701      	movs	r7, #1
 800df2c:	46a9      	mov	r9, r5
 800df2e:	46b8      	mov	r8, r7
 800df30:	f04f 0a00 	mov.w	sl, #0
 800df34:	4621      	mov	r1, r4
 800df36:	a849      	add	r0, sp, #292	; 0x124
 800df38:	f003 fcb2 	bl	80118a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800df3c:	4622      	mov	r2, r4
 800df3e:	4653      	mov	r3, sl
 800df40:	a949      	add	r1, sp, #292	; 0x124
 800df42:	f8cd 9000 	str.w	r9, [sp]
 800df46:	a819      	add	r0, sp, #100	; 0x64
 800df48:	f003 fdda 	bl	8011b00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df4c:	4622      	mov	r2, r4
 800df4e:	4653      	mov	r3, sl
 800df50:	a949      	add	r1, sp, #292	; 0x124
 800df52:	f8cd 8000 	str.w	r8, [sp]
 800df56:	a829      	add	r0, sp, #164	; 0xa4
 800df58:	f003 fdd2 	bl	8011b00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df5c:	4643      	mov	r3, r8
 800df5e:	4622      	mov	r2, r4
 800df60:	a949      	add	r1, sp, #292	; 0x124
 800df62:	f8cd 9000 	str.w	r9, [sp]
 800df66:	a839      	add	r0, sp, #228	; 0xe4
 800df68:	f003 fdca 	bl	8011b00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df6c:	42af      	cmp	r7, r5
 800df6e:	af12      	add	r7, sp, #72	; 0x48
 800df70:	bfb7      	itett	lt
 800df72:	2300      	movlt	r3, #0
 800df74:	2301      	movge	r3, #1
 800df76:	ad29      	addlt	r5, sp, #164	; 0xa4
 800df78:	ac19      	addlt	r4, sp, #100	; 0x64
 800df7a:	bfb1      	iteee	lt
 800df7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800df7e:	ad19      	addge	r5, sp, #100	; 0x64
 800df80:	930e      	strge	r3, [sp, #56]	; 0x38
 800df82:	ac29      	addge	r4, sp, #164	; 0xa4
 800df84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df86:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df8a:	e887 0003 	stmia.w	r7, {r0, r1}
 800df8e:	b928      	cbnz	r0, 800df9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800df90:	4b80      	ldr	r3, [pc, #512]	; (800e194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800df92:	6818      	ldr	r0, [r3, #0]
 800df94:	6803      	ldr	r3, [r0, #0]
 800df96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df98:	4798      	blx	r3
 800df9a:	6038      	str	r0, [r7, #0]
 800df9c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800df9e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800dfa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfa6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800dfa8:	930c      	str	r3, [sp, #48]	; 0x30
 800dfaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfac:	6963      	ldr	r3, [r4, #20]
 800dfae:	440b      	add	r3, r1
 800dfb0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800dfb4:	4408      	add	r0, r1
 800dfb6:	b200      	sxth	r0, r0
 800dfb8:	4283      	cmp	r3, r0
 800dfba:	900d      	str	r0, [sp, #52]	; 0x34
 800dfbc:	f280 80dd 	bge.w	800e17a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800dfc0:	428b      	cmp	r3, r1
 800dfc2:	da08      	bge.n	800dfd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dfc4:	2a00      	cmp	r2, #0
 800dfc6:	dd06      	ble.n	800dfd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dfc8:	1acb      	subs	r3, r1, r3
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	f2c0 80e4 	blt.w	800e198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f300 80e2 	bgt.w	800e19a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800dfd6:	6967      	ldr	r7, [r4, #20]
 800dfd8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800dfdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfde:	443b      	add	r3, r7
 800dfe0:	461f      	mov	r7, r3
 800dfe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfe4:	1bdf      	subs	r7, r3, r7
 800dfe6:	4297      	cmp	r7, r2
 800dfe8:	bfa8      	it	ge
 800dfea:	4617      	movge	r7, r2
 800dfec:	2f00      	cmp	r7, #0
 800dfee:	f340 8166 	ble.w	800e2be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800dff2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800dff4:	6829      	ldr	r1, [r5, #0]
 800dff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dffa:	f9bb 3000 	ldrsh.w	r3, [fp]
 800dffe:	4411      	add	r1, r2
 800e000:	6820      	ldr	r0, [r4, #0]
 800e002:	4299      	cmp	r1, r3
 800e004:	dd1a      	ble.n	800e03c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800e006:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800e00a:	4402      	add	r2, r0
 800e00c:	440b      	add	r3, r1
 800e00e:	b21b      	sxth	r3, r3
 800e010:	429a      	cmp	r2, r3
 800e012:	dc13      	bgt.n	800e03c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800e014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e016:	a912      	add	r1, sp, #72	; 0x48
 800e018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	9206      	str	r2, [sp, #24]
 800e020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e022:	9500      	str	r5, [sp, #0]
 800e024:	9205      	str	r2, [sp, #20]
 800e026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e028:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e02c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e02e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e032:	aa49      	add	r2, sp, #292	; 0x124
 800e034:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800e038:	4623      	mov	r3, r4
 800e03a:	47c8      	blx	r9
 800e03c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800e040:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e044:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800e048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e04c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e050:	68a1      	ldr	r1, [r4, #8]
 800e052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e056:	ed94 6a08 	vldr	s12, [r4, #32]
 800e05a:	edd4 6a07 	vldr	s13, [r4, #28]
 800e05e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e062:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e066:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e06a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e06e:	edc4 6a07 	vstr	s13, [r4, #28]
 800e072:	441a      	add	r2, r3
 800e074:	6963      	ldr	r3, [r4, #20]
 800e076:	3301      	adds	r3, #1
 800e078:	6022      	str	r2, [r4, #0]
 800e07a:	6163      	str	r3, [r4, #20]
 800e07c:	69a3      	ldr	r3, [r4, #24]
 800e07e:	3b01      	subs	r3, #1
 800e080:	61a3      	str	r3, [r4, #24]
 800e082:	6923      	ldr	r3, [r4, #16]
 800e084:	440b      	add	r3, r1
 800e086:	68e1      	ldr	r1, [r4, #12]
 800e088:	428b      	cmp	r3, r1
 800e08a:	6123      	str	r3, [r4, #16]
 800e08c:	db15      	blt.n	800e0ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800e08e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800e092:	3201      	adds	r2, #1
 800e094:	1a5b      	subs	r3, r3, r1
 800e096:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e09a:	6022      	str	r2, [r4, #0]
 800e09c:	6123      	str	r3, [r4, #16]
 800e09e:	edc4 6a07 	vstr	s13, [r4, #28]
 800e0a2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800e0a6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e0aa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e0ae:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e0b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0b6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e0ba:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800e0be:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800e0c2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800e0c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0ca:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800e0ce:	68a9      	ldr	r1, [r5, #8]
 800e0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0d4:	ed95 6a08 	vldr	s12, [r5, #32]
 800e0d8:	edd5 6a07 	vldr	s13, [r5, #28]
 800e0dc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e0e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e0e4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e0e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0ec:	edc5 6a07 	vstr	s13, [r5, #28]
 800e0f0:	441a      	add	r2, r3
 800e0f2:	696b      	ldr	r3, [r5, #20]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	602a      	str	r2, [r5, #0]
 800e0f8:	616b      	str	r3, [r5, #20]
 800e0fa:	69ab      	ldr	r3, [r5, #24]
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	61ab      	str	r3, [r5, #24]
 800e100:	692b      	ldr	r3, [r5, #16]
 800e102:	440b      	add	r3, r1
 800e104:	68e9      	ldr	r1, [r5, #12]
 800e106:	428b      	cmp	r3, r1
 800e108:	612b      	str	r3, [r5, #16]
 800e10a:	db15      	blt.n	800e138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800e10c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800e110:	3201      	adds	r2, #1
 800e112:	1a5b      	subs	r3, r3, r1
 800e114:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e118:	602a      	str	r2, [r5, #0]
 800e11a:	612b      	str	r3, [r5, #16]
 800e11c:	edc5 6a07 	vstr	s13, [r5, #28]
 800e120:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800e124:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e128:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e12c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800e130:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e134:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e138:	3f01      	subs	r7, #1
 800e13a:	e757      	b.n	800dfec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800e13c:	4299      	cmp	r1, r3
 800e13e:	dc13      	bgt.n	800e168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800e140:	429a      	cmp	r2, r3
 800e142:	da14      	bge.n	800e16e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800e144:	2502      	movs	r5, #2
 800e146:	2703      	movs	r7, #3
 800e148:	f04f 0800 	mov.w	r8, #0
 800e14c:	46a9      	mov	r9, r5
 800e14e:	f04f 0a01 	mov.w	sl, #1
 800e152:	e6ef      	b.n	800df34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800e154:	2501      	movs	r5, #1
 800e156:	2700      	movs	r7, #0
 800e158:	46a9      	mov	r9, r5
 800e15a:	46b8      	mov	r8, r7
 800e15c:	f04f 0a02 	mov.w	sl, #2
 800e160:	e6e8      	b.n	800df34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800e162:	2501      	movs	r5, #1
 800e164:	2702      	movs	r7, #2
 800e166:	e6e1      	b.n	800df2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800e168:	2500      	movs	r5, #0
 800e16a:	2701      	movs	r7, #1
 800e16c:	e7f4      	b.n	800e158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800e16e:	2702      	movs	r7, #2
 800e170:	2503      	movs	r5, #3
 800e172:	f04f 0900 	mov.w	r9, #0
 800e176:	46b8      	mov	r8, r7
 800e178:	e7e9      	b.n	800e14e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800e17a:	4613      	mov	r3, r2
 800e17c:	e728      	b.n	800dfd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800e17e:	bf00      	nop
 800e180:	24006bb4 	.word	0x24006bb4
 800e184:	fffd8f01 	.word	0xfffd8f01
 800e188:	00027100 	.word	0x00027100
 800e18c:	0004e1ff 	.word	0x0004e1ff
 800e190:	0004e1fe 	.word	0x0004e1fe
 800e194:	24006bbc 	.word	0x24006bbc
 800e198:	4613      	mov	r3, r2
 800e19a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800e19c:	469e      	mov	lr, r3
 800e19e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e1a0:	469c      	mov	ip, r3
 800e1a2:	9111      	str	r1, [sp, #68]	; 0x44
 800e1a4:	f04f 0900 	mov.w	r9, #0
 800e1a8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800e1ac:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800e1b0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800e1b4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800e1b8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800e1bc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e1c0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800e1c4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800e1c8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800e1cc:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800e1d0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800e1d4:	f1bc 0f00 	cmp.w	ip, #0
 800e1d8:	d147      	bne.n	800e26a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800e1da:	eb03 0c07 	add.w	ip, r3, r7
 800e1de:	1ad7      	subs	r7, r2, r3
 800e1e0:	f1b9 0f00 	cmp.w	r9, #0
 800e1e4:	d009      	beq.n	800e1fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800e1e6:	9029      	str	r0, [sp, #164]	; 0xa4
 800e1e8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800e1ec:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800e1f0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800e1f4:	912d      	str	r1, [sp, #180]	; 0xb4
 800e1f6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800e1fa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e1fc:	f04f 0800 	mov.w	r8, #0
 800e200:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800e204:	9111      	str	r1, [sp, #68]	; 0x44
 800e206:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800e20a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800e20e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800e212:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800e216:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800e21a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800e21e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800e222:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800e226:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800e22a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800e22e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800e232:	f1be 0f00 	cmp.w	lr, #0
 800e236:	d031      	beq.n	800e29c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800e238:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e23a:	4450      	add	r0, sl
 800e23c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e240:	4431      	add	r1, r6
 800e242:	ee37 7a04 	vadd.f32	s14, s14, s8
 800e246:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e24a:	4549      	cmp	r1, r9
 800e24c:	db08      	blt.n	800e260 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800e24e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e252:	3001      	adds	r0, #1
 800e254:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e258:	eba1 0109 	sub.w	r1, r1, r9
 800e25c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e260:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e264:	f04f 0801 	mov.w	r8, #1
 800e268:	e7e3      	b.n	800e232 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800e26a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e26c:	4450      	add	r0, sl
 800e26e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e272:	4431      	add	r1, r6
 800e274:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e278:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800e27c:	4541      	cmp	r1, r8
 800e27e:	db08      	blt.n	800e292 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800e280:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e284:	3001      	adds	r0, #1
 800e286:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e28a:	eba1 0108 	sub.w	r1, r1, r8
 800e28e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e292:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e296:	f04f 0901 	mov.w	r9, #1
 800e29a:	e79b      	b.n	800e1d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800e29c:	449c      	add	ip, r3
 800e29e:	1aff      	subs	r7, r7, r3
 800e2a0:	f1b8 0f00 	cmp.w	r8, #0
 800e2a4:	d009      	beq.n	800e2ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800e2a6:	9019      	str	r0, [sp, #100]	; 0x64
 800e2a8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800e2ac:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800e2b0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800e2b4:	911d      	str	r1, [sp, #116]	; 0x74
 800e2b6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800e2ba:	1ad2      	subs	r2, r2, r3
 800e2bc:	e68b      	b.n	800dfd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800e2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2c0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f000 80d1 	beq.w	800e46a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800e2c8:	ad19      	add	r5, sp, #100	; 0x64
 800e2ca:	ac39      	add	r4, sp, #228	; 0xe4
 800e2cc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e2ce:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800e2d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2da:	6963      	ldr	r3, [r4, #20]
 800e2dc:	440b      	add	r3, r1
 800e2de:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800e2e2:	4408      	add	r0, r1
 800e2e4:	b200      	sxth	r0, r0
 800e2e6:	4283      	cmp	r3, r0
 800e2e8:	900d      	str	r0, [sp, #52]	; 0x34
 800e2ea:	f280 80c1 	bge.w	800e470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800e2ee:	428b      	cmp	r3, r1
 800e2f0:	da08      	bge.n	800e304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e2f2:	2a00      	cmp	r2, #0
 800e2f4:	dd06      	ble.n	800e304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e2f6:	1acb      	subs	r3, r1, r3
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	f2c0 80bb 	blt.w	800e474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f300 80b9 	bgt.w	800e476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800e304:	6967      	ldr	r7, [r4, #20]
 800e306:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800e30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e30c:	443b      	add	r3, r7
 800e30e:	461f      	mov	r7, r3
 800e310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e312:	1bdf      	subs	r7, r3, r7
 800e314:	4297      	cmp	r7, r2
 800e316:	bfa8      	it	ge
 800e318:	4617      	movge	r7, r2
 800e31a:	2f00      	cmp	r7, #0
 800e31c:	f340 813c 	ble.w	800e598 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800e320:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e322:	6829      	ldr	r1, [r5, #0]
 800e324:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e328:	f9bb 3000 	ldrsh.w	r3, [fp]
 800e32c:	4411      	add	r1, r2
 800e32e:	6820      	ldr	r0, [r4, #0]
 800e330:	4299      	cmp	r1, r3
 800e332:	dd1a      	ble.n	800e36a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e334:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800e338:	4402      	add	r2, r0
 800e33a:	440b      	add	r3, r1
 800e33c:	b21b      	sxth	r3, r3
 800e33e:	429a      	cmp	r2, r3
 800e340:	dc13      	bgt.n	800e36a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e342:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e344:	a912      	add	r1, sp, #72	; 0x48
 800e346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	9206      	str	r2, [sp, #24]
 800e34e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e350:	9500      	str	r5, [sp, #0]
 800e352:	9205      	str	r2, [sp, #20]
 800e354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e356:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e35a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e35c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e360:	aa49      	add	r2, sp, #292	; 0x124
 800e362:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800e366:	4623      	mov	r3, r4
 800e368:	47c8      	blx	r9
 800e36a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800e36e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e372:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800e376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e37a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e37e:	68a1      	ldr	r1, [r4, #8]
 800e380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e384:	ed94 6a08 	vldr	s12, [r4, #32]
 800e388:	edd4 6a07 	vldr	s13, [r4, #28]
 800e38c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e390:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e394:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e398:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e39c:	edc4 6a07 	vstr	s13, [r4, #28]
 800e3a0:	441a      	add	r2, r3
 800e3a2:	6963      	ldr	r3, [r4, #20]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	6022      	str	r2, [r4, #0]
 800e3a8:	6163      	str	r3, [r4, #20]
 800e3aa:	69a3      	ldr	r3, [r4, #24]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	61a3      	str	r3, [r4, #24]
 800e3b0:	6923      	ldr	r3, [r4, #16]
 800e3b2:	440b      	add	r3, r1
 800e3b4:	68e1      	ldr	r1, [r4, #12]
 800e3b6:	428b      	cmp	r3, r1
 800e3b8:	6123      	str	r3, [r4, #16]
 800e3ba:	db15      	blt.n	800e3e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800e3bc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	1a5b      	subs	r3, r3, r1
 800e3c4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e3c8:	6022      	str	r2, [r4, #0]
 800e3ca:	6123      	str	r3, [r4, #16]
 800e3cc:	edc4 6a07 	vstr	s13, [r4, #28]
 800e3d0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800e3d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e3d8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e3dc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e3e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3e4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e3e8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800e3ec:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800e3f0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800e3f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3f8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800e3fc:	68a9      	ldr	r1, [r5, #8]
 800e3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e402:	ed95 6a08 	vldr	s12, [r5, #32]
 800e406:	edd5 6a07 	vldr	s13, [r5, #28]
 800e40a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e40e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e412:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e416:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e41a:	edc5 6a07 	vstr	s13, [r5, #28]
 800e41e:	441a      	add	r2, r3
 800e420:	696b      	ldr	r3, [r5, #20]
 800e422:	3301      	adds	r3, #1
 800e424:	602a      	str	r2, [r5, #0]
 800e426:	616b      	str	r3, [r5, #20]
 800e428:	69ab      	ldr	r3, [r5, #24]
 800e42a:	3b01      	subs	r3, #1
 800e42c:	61ab      	str	r3, [r5, #24]
 800e42e:	692b      	ldr	r3, [r5, #16]
 800e430:	440b      	add	r3, r1
 800e432:	68e9      	ldr	r1, [r5, #12]
 800e434:	428b      	cmp	r3, r1
 800e436:	612b      	str	r3, [r5, #16]
 800e438:	db15      	blt.n	800e466 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800e43a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800e43e:	3201      	adds	r2, #1
 800e440:	1a5b      	subs	r3, r3, r1
 800e442:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e446:	602a      	str	r2, [r5, #0]
 800e448:	612b      	str	r3, [r5, #16]
 800e44a:	edc5 6a07 	vstr	s13, [r5, #28]
 800e44e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800e452:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e456:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e45a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800e45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e462:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e466:	3f01      	subs	r7, #1
 800e468:	e757      	b.n	800e31a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800e46a:	ad39      	add	r5, sp, #228	; 0xe4
 800e46c:	ac19      	add	r4, sp, #100	; 0x64
 800e46e:	e72d      	b.n	800e2cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800e470:	4613      	mov	r3, r2
 800e472:	e744      	b.n	800e2fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800e474:	4613      	mov	r3, r2
 800e476:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800e478:	469e      	mov	lr, r3
 800e47a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800e47e:	461f      	mov	r7, r3
 800e480:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800e484:	f04f 0900 	mov.w	r9, #0
 800e488:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800e48c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800e490:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800e494:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800e498:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800e49c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800e49e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800e4a2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800e4a6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800e4aa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800e4ae:	960e      	str	r6, [sp, #56]	; 0x38
 800e4b0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800e4b4:	2f00      	cmp	r7, #0
 800e4b6:	d146      	bne.n	800e546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800e4b8:	449c      	add	ip, r3
 800e4ba:	1ad7      	subs	r7, r2, r3
 800e4bc:	f1b9 0f00 	cmp.w	r9, #0
 800e4c0:	d009      	beq.n	800e4d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800e4c2:	9039      	str	r0, [sp, #228]	; 0xe4
 800e4c4:	913d      	str	r1, [sp, #244]	; 0xf4
 800e4c6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800e4ca:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800e4ce:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800e4d2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800e4d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e4d8:	f04f 0800 	mov.w	r8, #0
 800e4dc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800e4e0:	910e      	str	r1, [sp, #56]	; 0x38
 800e4e2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800e4e6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800e4ea:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800e4ee:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800e4f2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800e4f6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800e4fa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800e4fe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800e502:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800e506:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800e50a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800e50e:	f1be 0f00 	cmp.w	lr, #0
 800e512:	d030      	beq.n	800e576 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800e514:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e516:	4450      	add	r0, sl
 800e518:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e51c:	4431      	add	r1, r6
 800e51e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800e522:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e526:	4549      	cmp	r1, r9
 800e528:	db08      	blt.n	800e53c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800e52a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e52e:	3001      	adds	r0, #1
 800e530:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e534:	eba1 0109 	sub.w	r1, r1, r9
 800e538:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e53c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e540:	f04f 0801 	mov.w	r8, #1
 800e544:	e7e3      	b.n	800e50e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800e546:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e548:	4450      	add	r0, sl
 800e54a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e54e:	4431      	add	r1, r6
 800e550:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e554:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800e558:	4541      	cmp	r1, r8
 800e55a:	db08      	blt.n	800e56e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800e55c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e560:	3001      	adds	r0, #1
 800e562:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e566:	eba1 0108 	sub.w	r1, r1, r8
 800e56a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e56e:	3f01      	subs	r7, #1
 800e570:	f04f 0901 	mov.w	r9, #1
 800e574:	e79e      	b.n	800e4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800e576:	449c      	add	ip, r3
 800e578:	1aff      	subs	r7, r7, r3
 800e57a:	f1b8 0f00 	cmp.w	r8, #0
 800e57e:	d009      	beq.n	800e594 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800e580:	9019      	str	r0, [sp, #100]	; 0x64
 800e582:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800e586:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800e58a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800e58e:	911d      	str	r1, [sp, #116]	; 0x74
 800e590:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800e594:	1ad2      	subs	r2, r2, r3
 800e596:	e6b5      	b.n	800e304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	b923      	cbnz	r3, 800e5a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e59e:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800e5a0:	6818      	ldr	r0, [r3, #0]
 800e5a2:	6803      	ldr	r3, [r0, #0]
 800e5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a6:	4798      	blx	r3
 800e5a8:	b05b      	add	sp, #364	; 0x16c
 800e5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ae:	bf00      	nop
 800e5b0:	24006bbc 	.word	0x24006bbc

0800e5b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	2500      	movs	r5, #0
 800e5ba:	9804      	ldr	r0, [sp, #16]
 800e5bc:	7223      	strb	r3, [r4, #8]
 800e5be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e5c2:	8025      	strh	r5, [r4, #0]
 800e5c4:	6061      	str	r1, [r4, #4]
 800e5c6:	7263      	strb	r3, [r4, #9]
 800e5c8:	60e0      	str	r0, [r4, #12]
 800e5ca:	8222      	strh	r2, [r4, #16]
 800e5cc:	8265      	strh	r5, [r4, #18]
 800e5ce:	82a5      	strh	r5, [r4, #20]
 800e5d0:	82e5      	strh	r5, [r4, #22]
 800e5d2:	8325      	strh	r5, [r4, #24]
 800e5d4:	8365      	strh	r5, [r4, #26]
 800e5d6:	83a5      	strh	r5, [r4, #28]
 800e5d8:	77a5      	strb	r5, [r4, #30]
 800e5da:	6803      	ldr	r3, [r0, #0]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	4798      	blx	r3
 800e5e0:	4606      	mov	r6, r0
 800e5e2:	b1f8      	cbz	r0, 800e624 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800e5e4:	68e0      	ldr	r0, [r4, #12]
 800e5e6:	4631      	mov	r1, r6
 800e5e8:	6803      	ldr	r3, [r0, #0]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	4798      	blx	r3
 800e5ee:	7b43      	ldrb	r3, [r0, #13]
 800e5f0:	7a82      	ldrb	r2, [r0, #10]
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	005b      	lsls	r3, r3, #1
 800e5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	83a3      	strh	r3, [r4, #28]
 800e5fe:	7a63      	ldrb	r3, [r4, #9]
 800e600:	2b04      	cmp	r3, #4
 800e602:	d10f      	bne.n	800e624 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800e604:	68e0      	ldr	r0, [r4, #12]
 800e606:	462a      	mov	r2, r5
 800e608:	4631      	mov	r1, r6
 800e60a:	6803      	ldr	r3, [r0, #0]
 800e60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60e:	4798      	blx	r3
 800e610:	7b6b      	ldrb	r3, [r5, #13]
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e618:	7aab      	ldrb	r3, [r5, #10]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	4418      	add	r0, r3
 800e61e:	8ba3      	ldrh	r3, [r4, #28]
 800e620:	4418      	add	r0, r3
 800e622:	83a0      	strh	r0, [r4, #28]
 800e624:	4620      	mov	r0, r4
 800e626:	bd70      	pop	{r4, r5, r6, pc}

0800e628 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800e628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	2400      	movs	r4, #0
 800e62e:	b085      	sub	sp, #20
 800e630:	4681      	mov	r9, r0
 800e632:	4688      	mov	r8, r1
 800e634:	4692      	mov	sl, r2
 800e636:	469b      	mov	fp, r3
 800e638:	4627      	mov	r7, r4
 800e63a:	4625      	mov	r5, r4
 800e63c:	4626      	mov	r6, r4
 800e63e:	4554      	cmp	r4, sl
 800e640:	da2a      	bge.n	800e698 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e642:	2300      	movs	r3, #0
 800e644:	9303      	str	r3, [sp, #12]
 800e646:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e64a:	429d      	cmp	r5, r3
 800e64c:	d004      	beq.n	800e658 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800e64e:	f242 030b 	movw	r3, #8203	; 0x200b
 800e652:	429d      	cmp	r5, r3
 800e654:	bf18      	it	ne
 800e656:	462f      	movne	r7, r5
 800e658:	ab03      	add	r3, sp, #12
 800e65a:	4642      	mov	r2, r8
 800e65c:	4659      	mov	r1, fp
 800e65e:	4648      	mov	r0, r9
 800e660:	f002 fea2 	bl	80113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e664:	4605      	mov	r5, r0
 800e666:	b1b8      	cbz	r0, 800e698 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e668:	280a      	cmp	r0, #10
 800e66a:	d015      	beq.n	800e698 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e66c:	9a03      	ldr	r2, [sp, #12]
 800e66e:	b18a      	cbz	r2, 800e694 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800e670:	7b50      	ldrb	r0, [r2, #13]
 800e672:	4639      	mov	r1, r7
 800e674:	7a93      	ldrb	r3, [r2, #10]
 800e676:	0040      	lsls	r0, r0, #1
 800e678:	8895      	ldrh	r5, [r2, #4]
 800e67a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800e67e:	4303      	orrs	r3, r0
 800e680:	4640      	mov	r0, r8
 800e682:	9301      	str	r3, [sp, #4]
 800e684:	f8d8 3000 	ldr.w	r3, [r8]
 800e688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e68a:	4798      	blx	r3
 800e68c:	9b01      	ldr	r3, [sp, #4]
 800e68e:	4418      	add	r0, r3
 800e690:	4406      	add	r6, r0
 800e692:	b2b6      	uxth	r6, r6
 800e694:	3401      	adds	r4, #1
 800e696:	e7d2      	b.n	800e63e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800e698:	4630      	mov	r0, r6
 800e69a:	b005      	add	sp, #20
 800e69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800e6a0:	2a02      	cmp	r2, #2
 800e6a2:	b530      	push	{r4, r5, lr}
 800e6a4:	d011      	beq.n	800e6ca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800e6a6:	2a03      	cmp	r2, #3
 800e6a8:	d01c      	beq.n	800e6e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800e6aa:	2a01      	cmp	r2, #1
 800e6ac:	d10c      	bne.n	800e6c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e6ae:	888b      	ldrh	r3, [r1, #4]
 800e6b0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800e6b4:	8801      	ldrh	r1, [r0, #0]
 800e6b6:	1a9b      	subs	r3, r3, r2
 800e6b8:	8844      	ldrh	r4, [r0, #2]
 800e6ba:	1a5b      	subs	r3, r3, r1
 800e6bc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e6c0:	8004      	strh	r4, [r0, #0]
 800e6c2:	8043      	strh	r3, [r0, #2]
 800e6c4:	8081      	strh	r1, [r0, #4]
 800e6c6:	80c2      	strh	r2, [r0, #6]
 800e6c8:	bd30      	pop	{r4, r5, pc}
 800e6ca:	88cb      	ldrh	r3, [r1, #6]
 800e6cc:	88c2      	ldrh	r2, [r0, #6]
 800e6ce:	1a9b      	subs	r3, r3, r2
 800e6d0:	8842      	ldrh	r2, [r0, #2]
 800e6d2:	1a9b      	subs	r3, r3, r2
 800e6d4:	888a      	ldrh	r2, [r1, #4]
 800e6d6:	8881      	ldrh	r1, [r0, #4]
 800e6d8:	8043      	strh	r3, [r0, #2]
 800e6da:	1a52      	subs	r2, r2, r1
 800e6dc:	8801      	ldrh	r1, [r0, #0]
 800e6de:	1a52      	subs	r2, r2, r1
 800e6e0:	8002      	strh	r2, [r0, #0]
 800e6e2:	e7f1      	b.n	800e6c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e6e4:	88cb      	ldrh	r3, [r1, #6]
 800e6e6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800e6ea:	8841      	ldrh	r1, [r0, #2]
 800e6ec:	1a9b      	subs	r3, r3, r2
 800e6ee:	f9b0 5000 	ldrsh.w	r5, [r0]
 800e6f2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800e6f6:	1a5b      	subs	r3, r3, r1
 800e6f8:	8045      	strh	r5, [r0, #2]
 800e6fa:	8082      	strh	r2, [r0, #4]
 800e6fc:	8003      	strh	r3, [r0, #0]
 800e6fe:	80c4      	strh	r4, [r0, #6]
 800e700:	e7e2      	b.n	800e6c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800e702 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800e702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e706:	b09f      	sub	sp, #124	; 0x7c
 800e708:	9116      	str	r1, [sp, #88]	; 0x58
 800e70a:	9317      	str	r3, [sp, #92]	; 0x5c
 800e70c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e70e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e710:	8809      	ldrh	r1, [r1, #0]
 800e712:	889b      	ldrh	r3, [r3, #4]
 800e714:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800e718:	440b      	add	r3, r1
 800e71a:	9212      	str	r2, [sp, #72]	; 0x48
 800e71c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800e720:	b21b      	sxth	r3, r3
 800e722:	9011      	str	r0, [sp, #68]	; 0x44
 800e724:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800e728:	9310      	str	r3, [sp, #64]	; 0x40
 800e72a:	f8d8 3000 	ldr.w	r3, [r8]
 800e72e:	7a59      	ldrb	r1, [r3, #9]
 800e730:	7a1b      	ldrb	r3, [r3, #8]
 800e732:	9114      	str	r1, [sp, #80]	; 0x50
 800e734:	9315      	str	r3, [sp, #84]	; 0x54
 800e736:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e73c:	2a00      	cmp	r2, #0
 800e73e:	d067      	beq.n	800e810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800e740:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e744:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e746:	2b04      	cmp	r3, #4
 800e748:	bf14      	ite	ne
 800e74a:	2301      	movne	r3, #1
 800e74c:	2302      	moveq	r3, #2
 800e74e:	4413      	add	r3, r2
 800e750:	f04f 0900 	mov.w	r9, #0
 800e754:	930f      	str	r3, [sp, #60]	; 0x3c
 800e756:	464c      	mov	r4, r9
 800e758:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e75c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800e760:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800e764:	4293      	cmp	r3, r2
 800e766:	f280 808c 	bge.w	800e882 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800e76a:	2300      	movs	r3, #0
 800e76c:	931c      	str	r3, [sp, #112]	; 0x70
 800e76e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e772:	429c      	cmp	r4, r3
 800e774:	d006      	beq.n	800e784 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800e776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e778:	f242 020b 	movw	r2, #8203	; 0x200b
 800e77c:	4294      	cmp	r4, r2
 800e77e:	bf18      	it	ne
 800e780:	4623      	movne	r3, r4
 800e782:	930d      	str	r3, [sp, #52]	; 0x34
 800e784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e786:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e788:	f8d8 2000 	ldr.w	r2, [r8]
 800e78c:	428b      	cmp	r3, r1
 800e78e:	db41      	blt.n	800e814 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800e790:	6813      	ldr	r3, [r2, #0]
 800e792:	4610      	mov	r0, r2
 800e794:	695b      	ldr	r3, [r3, #20]
 800e796:	4798      	blx	r3
 800e798:	4604      	mov	r4, r0
 800e79a:	f8d8 0000 	ldr.w	r0, [r8]
 800e79e:	aa1d      	add	r2, sp, #116	; 0x74
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	6803      	ldr	r3, [r0, #0]
 800e7a4:	689e      	ldr	r6, [r3, #8]
 800e7a6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800e7aa:	47b0      	blx	r6
 800e7ac:	901c      	str	r0, [sp, #112]	; 0x70
 800e7ae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e7b2:	429c      	cmp	r4, r3
 800e7b4:	f000 80ea 	beq.w	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e7b8:	f242 030b 	movw	r3, #8203	; 0x200b
 800e7bc:	429c      	cmp	r4, r3
 800e7be:	f000 80e5 	beq.w	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e7c2:	2c00      	cmp	r4, #0
 800e7c4:	f000 80f7 	beq.w	800e9b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e7c8:	2c0a      	cmp	r4, #10
 800e7ca:	d060      	beq.n	800e88e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800e7cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e7ce:	b36a      	cbz	r2, 800e82c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800e7d0:	8894      	ldrh	r4, [r2, #4]
 800e7d2:	f1bb 0f00 	cmp.w	fp, #0
 800e7d6:	d03b      	beq.n	800e850 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800e7d8:	f892 900d 	ldrb.w	r9, [r2, #13]
 800e7dc:	f1bb 0f01 	cmp.w	fp, #1
 800e7e0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800e7e4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800e7e8:	f892 900a 	ldrb.w	r9, [r2, #10]
 800e7ec:	ea49 0903 	orr.w	r9, r9, r3
 800e7f0:	d134      	bne.n	800e85c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800e7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7f4:	eba5 0509 	sub.w	r5, r5, r9
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d14f      	bne.n	800e89c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800e7fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e7fe:	eb09 0305 	add.w	r3, r9, r5
 800e802:	4413      	add	r3, r2
 800e804:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e806:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e80a:	4293      	cmp	r3, r2
 800e80c:	da51      	bge.n	800e8b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800e80e:	e038      	b.n	800e882 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800e810:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e812:	e79d      	b.n	800e750 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800e814:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800e818:	4659      	mov	r1, fp
 800e81a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e81c:	9301      	str	r3, [sp, #4]
 800e81e:	ab1d      	add	r3, sp, #116	; 0x74
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	ab1c      	add	r3, sp, #112	; 0x70
 800e824:	f002 fe18 	bl	8011458 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800e828:	4604      	mov	r4, r0
 800e82a:	e7c0      	b.n	800e7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800e82c:	f8d8 0000 	ldr.w	r0, [r8]
 800e830:	6803      	ldr	r3, [r0, #0]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	4798      	blx	r3
 800e836:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e83a:	4298      	cmp	r0, r3
 800e83c:	f000 80a6 	beq.w	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e840:	f242 030b 	movw	r3, #8203	; 0x200b
 800e844:	4298      	cmp	r0, r3
 800e846:	f000 80a1 	beq.w	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e84a:	f1bb 0f00 	cmp.w	fp, #0
 800e84e:	d100      	bne.n	800e852 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800e850:	444d      	add	r5, r9
 800e852:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e854:	2a00      	cmp	r2, #0
 800e856:	d1bf      	bne.n	800e7d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800e858:	4691      	mov	r9, r2
 800e85a:	e097      	b.n	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f000 80ab 	beq.w	800e9ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800e864:	f1bb 0f00 	cmp.w	fp, #0
 800e868:	d118      	bne.n	800e89c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800e86a:	f8d8 0000 	ldr.w	r0, [r8]
 800e86e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e870:	6803      	ldr	r3, [r0, #0]
 800e872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e874:	4798      	blx	r3
 800e876:	4405      	add	r5, r0
 800e878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e87a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e87c:	1aeb      	subs	r3, r5, r3
 800e87e:	4293      	cmp	r3, r2
 800e880:	dd17      	ble.n	800e8b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800e882:	2c00      	cmp	r4, #0
 800e884:	f000 8097 	beq.w	800e9b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e888:	2c0a      	cmp	r4, #10
 800e88a:	f040 8085 	bne.w	800e998 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800e88e:	240a      	movs	r4, #10
 800e890:	fab4 f084 	clz	r0, r4
 800e894:	0940      	lsrs	r0, r0, #5
 800e896:	b01f      	add	sp, #124	; 0x7c
 800e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89c:	f8d8 0000 	ldr.w	r0, [r8]
 800e8a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e8a2:	6803      	ldr	r3, [r0, #0]
 800e8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a6:	4798      	blx	r3
 800e8a8:	f1bb 0f01 	cmp.w	fp, #1
 800e8ac:	eba5 0500 	sub.w	r5, r5, r0
 800e8b0:	d0a4      	beq.n	800e7fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800e8b2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800e8b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e8b6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800e8ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e8be:	7b43      	ldrb	r3, [r0, #13]
 800e8c0:	4429      	add	r1, r5
 800e8c2:	015b      	lsls	r3, r3, #5
 800e8c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e8c8:	7983      	ldrb	r3, [r0, #6]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	440b      	add	r3, r1
 800e8ce:	42b3      	cmp	r3, r6
 800e8d0:	db5c      	blt.n	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e8d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8d4:	4299      	cmp	r1, r3
 800e8d6:	da59      	bge.n	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e8d8:	f8d8 0000 	ldr.w	r0, [r8]
 800e8dc:	42ae      	cmp	r6, r5
 800e8de:	6803      	ldr	r3, [r0, #0]
 800e8e0:	bfcc      	ite	gt
 800e8e2:	1b76      	subgt	r6, r6, r5
 800e8e4:	2600      	movle	r6, #0
 800e8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e8:	bfc8      	it	gt
 800e8ea:	b2b6      	uxthgt	r6, r6
 800e8ec:	4798      	blx	r3
 800e8ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e8f0:	7b5a      	ldrb	r2, [r3, #13]
 800e8f2:	00d1      	lsls	r1, r2, #3
 800e8f4:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800e8f8:	7a19      	ldrb	r1, [r3, #8]
 800e8fa:	4339      	orrs	r1, r7
 800e8fc:	0657      	lsls	r7, r2, #25
 800e8fe:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800e900:	bf48      	it	mi
 800e902:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800e906:	4407      	add	r7, r0
 800e908:	bf48      	it	mi
 800e90a:	b209      	sxthmi	r1, r1
 800e90c:	1a7f      	subs	r7, r7, r1
 800e90e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e910:	b2bf      	uxth	r7, r7
 800e912:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800e916:	fa0f fa87 	sxth.w	sl, r7
 800e91a:	4551      	cmp	r1, sl
 800e91c:	dd3a      	ble.n	800e994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800e91e:	0112      	lsls	r2, r2, #4
 800e920:	79d8      	ldrb	r0, [r3, #7]
 800e922:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800e926:	4302      	orrs	r2, r0
 800e928:	4492      	add	sl, r2
 800e92a:	4551      	cmp	r1, sl
 800e92c:	dc2e      	bgt.n	800e98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e92e:	1bcf      	subs	r7, r1, r7
 800e930:	468a      	mov	sl, r1
 800e932:	b2bf      	uxth	r7, r7
 800e934:	9319      	str	r3, [sp, #100]	; 0x64
 800e936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e938:	f8d8 0000 	ldr.w	r0, [r8]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	6801      	ldr	r1, [r0, #0]
 800e940:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e942:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e944:	9313      	str	r3, [sp, #76]	; 0x4c
 800e946:	9218      	str	r2, [sp, #96]	; 0x60
 800e948:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800e94a:	4788      	blx	r1
 800e94c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e950:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e952:	910b      	str	r1, [sp, #44]	; 0x2c
 800e954:	f898 100e 	ldrb.w	r1, [r8, #14]
 800e958:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e95a:	910a      	str	r1, [sp, #40]	; 0x28
 800e95c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800e960:	9109      	str	r1, [sp, #36]	; 0x24
 800e962:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e966:	9305      	str	r3, [sp, #20]
 800e968:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e96a:	9206      	str	r2, [sp, #24]
 800e96c:	e9cd a601 	strd	sl, r6, [sp, #4]
 800e970:	442e      	add	r6, r5
 800e972:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800e976:	b236      	sxth	r6, r6
 800e978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e97a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800e97e:	9600      	str	r6, [sp, #0]
 800e980:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e98a:	47b0      	blx	r6
 800e98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e98e:	3301      	adds	r3, #1
 800e990:	930e      	str	r3, [sp, #56]	; 0x38
 800e992:	e6e5      	b.n	800e760 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800e994:	2700      	movs	r7, #0
 800e996:	e7cd      	b.n	800e934 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800e998:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e99a:	3501      	adds	r5, #1
 800e99c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e99e:	429d      	cmp	r5, r3
 800e9a0:	f6bf af76 	bge.w	800e890 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800e9a4:	4659      	mov	r1, fp
 800e9a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e9a8:	f7f4 ff44 	bl	8003834 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	b110      	cbz	r0, 800e9b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e9b0:	280a      	cmp	r0, #10
 800e9b2:	d1f2      	bne.n	800e99a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800e9b4:	e76b      	b.n	800e88e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800e9b6:	2400      	movs	r4, #0
 800e9b8:	e76a      	b.n	800e890 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800e9ba:	f1bb 0f00 	cmp.w	fp, #0
 800e9be:	f43f af5b 	beq.w	800e878 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800e9c2:	e776      	b.n	800e8b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800e9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800e9c4:	b530      	push	{r4, r5, lr}
 800e9c6:	8a44      	ldrh	r4, [r0, #18]
 800e9c8:	8ac5      	ldrh	r5, [r0, #22]
 800e9ca:	82c3      	strh	r3, [r0, #22]
 800e9cc:	442c      	add	r4, r5
 800e9ce:	1ae4      	subs	r4, r4, r3
 800e9d0:	8b03      	ldrh	r3, [r0, #24]
 800e9d2:	8244      	strh	r4, [r0, #18]
 800e9d4:	8a84      	ldrh	r4, [r0, #20]
 800e9d6:	4422      	add	r2, r4
 800e9d8:	440c      	add	r4, r1
 800e9da:	1a59      	subs	r1, r3, r1
 800e9dc:	8342      	strh	r2, [r0, #26]
 800e9de:	8284      	strh	r4, [r0, #20]
 800e9e0:	8301      	strh	r1, [r0, #24]
 800e9e2:	bd30      	pop	{r4, r5, pc}

0800e9e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e8:	7a43      	ldrb	r3, [r0, #9]
 800e9ea:	b087      	sub	sp, #28
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	460f      	mov	r7, r1
 800e9f0:	1eda      	subs	r2, r3, #3
 800e9f2:	b2d2      	uxtb	r2, r2
 800e9f4:	2900      	cmp	r1, #0
 800e9f6:	d036      	beq.n	800ea66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800e9f8:	2a01      	cmp	r2, #1
 800e9fa:	d932      	bls.n	800ea62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800e9fc:	1e58      	subs	r0, r3, #1
 800e9fe:	f1d0 0b00 	rsbs	fp, r0, #0
 800ea02:	eb4b 0b00 	adc.w	fp, fp, r0
 800ea06:	1e99      	subs	r1, r3, #2
 800ea08:	424b      	negs	r3, r1
 800ea0a:	414b      	adcs	r3, r1
 800ea0c:	9303      	str	r3, [sp, #12]
 800ea0e:	2300      	movs	r3, #0
 800ea10:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800ea14:	2500      	movs	r5, #0
 800ea16:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800ea1a:	46a9      	mov	r9, r5
 800ea1c:	8265      	strh	r5, [r4, #18]
 800ea1e:	82a5      	strh	r5, [r4, #20]
 800ea20:	2300      	movs	r3, #0
 800ea22:	9305      	str	r3, [sp, #20]
 800ea24:	8823      	ldrh	r3, [r4, #0]
 800ea26:	2b20      	cmp	r3, #32
 800ea28:	d02b      	beq.n	800ea82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800ea2a:	eba3 020a 	sub.w	r2, r3, sl
 800ea2e:	4256      	negs	r6, r2
 800ea30:	4156      	adcs	r6, r2
 800ea32:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d004      	beq.n	800ea44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800ea3a:	4553      	cmp	r3, sl
 800ea3c:	bf16      	itet	ne
 800ea3e:	4699      	movne	r9, r3
 800ea40:	2601      	moveq	r6, #1
 800ea42:	2600      	movne	r6, #0
 800ea44:	ab05      	add	r3, sp, #20
 800ea46:	68e2      	ldr	r2, [r4, #12]
 800ea48:	7a21      	ldrb	r1, [r4, #8]
 800ea4a:	6860      	ldr	r0, [r4, #4]
 800ea4c:	f002 fcac 	bl	80113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ea50:	8020      	strh	r0, [r4, #0]
 800ea52:	b9c8      	cbnz	r0, 800ea88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800ea54:	8b22      	ldrh	r2, [r4, #24]
 800ea56:	2300      	movs	r3, #0
 800ea58:	4611      	mov	r1, r2
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f7ff ffb2 	bl	800e9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800ea60:	e066      	b.n	800eb30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800ea62:	468b      	mov	fp, r1
 800ea64:	e7cf      	b.n	800ea06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800ea66:	3b01      	subs	r3, #1
 800ea68:	2a01      	cmp	r2, #1
 800ea6a:	9103      	str	r1, [sp, #12]
 800ea6c:	468b      	mov	fp, r1
 800ea6e:	bf8c      	ite	hi
 800ea70:	2200      	movhi	r2, #0
 800ea72:	2201      	movls	r2, #1
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	9202      	str	r2, [sp, #8]
 800ea78:	bf8c      	ite	hi
 800ea7a:	2300      	movhi	r3, #0
 800ea7c:	2301      	movls	r3, #1
 800ea7e:	9301      	str	r3, [sp, #4]
 800ea80:	e7c8      	b.n	800ea14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800ea82:	4699      	mov	r9, r3
 800ea84:	2601      	movs	r6, #1
 800ea86:	e7dd      	b.n	800ea44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800ea88:	8ae3      	ldrh	r3, [r4, #22]
 800ea8a:	280a      	cmp	r0, #10
 800ea8c:	f103 0301 	add.w	r3, r3, #1
 800ea90:	82e3      	strh	r3, [r4, #22]
 800ea92:	d0df      	beq.n	800ea54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800ea94:	9a05      	ldr	r2, [sp, #20]
 800ea96:	bb42      	cbnz	r2, 800eaea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800ea98:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ea9c:	4298      	cmp	r0, r3
 800ea9e:	d001      	beq.n	800eaa4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800eaa0:	4550      	cmp	r0, sl
 800eaa2:	d1bd      	bne.n	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eaa4:	8823      	ldrh	r3, [r4, #0]
 800eaa6:	8b21      	ldrh	r1, [r4, #24]
 800eaa8:	2b20      	cmp	r3, #32
 800eaaa:	d001      	beq.n	800eab0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800eaac:	4553      	cmp	r3, sl
 800eaae:	d131      	bne.n	800eb14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800eab0:	2e00      	cmp	r6, #0
 800eab2:	bf0a      	itet	eq
 800eab4:	460d      	moveq	r5, r1
 800eab6:	4630      	movne	r0, r6
 800eab8:	2001      	moveq	r0, #1
 800eaba:	440a      	add	r2, r1
 800eabc:	8aa3      	ldrh	r3, [r4, #20]
 800eabe:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800eac2:	b292      	uxth	r2, r2
 800eac4:	8322      	strh	r2, [r4, #24]
 800eac6:	4413      	add	r3, r2
 800eac8:	2f00      	cmp	r7, #0
 800eaca:	d03a      	beq.n	800eb42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800eacc:	f1bb 0f00 	cmp.w	fp, #0
 800ead0:	d102      	bne.n	800ead8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800ead2:	9903      	ldr	r1, [sp, #12]
 800ead4:	b301      	cbz	r1, 800eb18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800ead6:	b1f8      	cbz	r0, 800eb18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800ead8:	8ba1      	ldrh	r1, [r4, #28]
 800eada:	4419      	add	r1, r3
 800eadc:	458c      	cmp	ip, r1
 800eade:	da2a      	bge.n	800eb36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800eae0:	8a61      	ldrh	r1, [r4, #18]
 800eae2:	b341      	cbz	r1, 800eb36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800eae4:	4563      	cmp	r3, ip
 800eae6:	dd9b      	ble.n	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eae8:	e01c      	b.n	800eb24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800eaea:	8893      	ldrh	r3, [r2, #4]
 800eaec:	4649      	mov	r1, r9
 800eaee:	8023      	strh	r3, [r4, #0]
 800eaf0:	f892 800d 	ldrb.w	r8, [r2, #13]
 800eaf4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800eaf8:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800eafc:	f892 800a 	ldrb.w	r8, [r2, #10]
 800eb00:	ea48 0800 	orr.w	r8, r8, r0
 800eb04:	68e0      	ldr	r0, [r4, #12]
 800eb06:	6803      	ldr	r3, [r0, #0]
 800eb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb0a:	4798      	blx	r3
 800eb0c:	eb08 0200 	add.w	r2, r8, r0
 800eb10:	b292      	uxth	r2, r2
 800eb12:	e7c7      	b.n	800eaa4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800eb14:	2000      	movs	r0, #0
 800eb16:	e7d0      	b.n	800eaba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800eb18:	4563      	cmp	r3, ip
 800eb1a:	dd81      	ble.n	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb1c:	8a63      	ldrh	r3, [r4, #18]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f43f af7e 	beq.w	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb24:	2301      	movs	r3, #1
 800eb26:	8ba2      	ldrh	r2, [r4, #28]
 800eb28:	77a3      	strb	r3, [r4, #30]
 800eb2a:	8b63      	ldrh	r3, [r4, #26]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	8363      	strh	r3, [r4, #26]
 800eb30:	b007      	add	sp, #28
 800eb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb36:	2300      	movs	r3, #0
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f7ff ff42 	bl	800e9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800eb40:	e76e      	b.n	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb42:	4563      	cmp	r3, ip
 800eb44:	dd14      	ble.n	800eb70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800eb46:	9b02      	ldr	r3, [sp, #8]
 800eb48:	b113      	cbz	r3, 800eb50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	460a      	mov	r2, r1
 800eb4e:	e783      	b.n	800ea58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800eb50:	9b01      	ldr	r3, [sp, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f43f af64 	beq.w	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	f47f af61 	bne.w	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb5e:	b116      	cbz	r6, 800eb66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800eb60:	2301      	movs	r3, #1
 800eb62:	462a      	mov	r2, r5
 800eb64:	e779      	b.n	800ea5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800eb66:	8a63      	ldrh	r3, [r4, #18]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f43f af59 	beq.w	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb6e:	e7df      	b.n	800eb30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	f47f af55 	bne.w	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb76:	2e00      	cmp	r6, #0
 800eb78:	f43f af52 	beq.w	800ea20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	462a      	mov	r2, r5
 800eb80:	e7db      	b.n	800eb3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800eb82 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800eb82:	b530      	push	{r4, r5, lr}
 800eb84:	4605      	mov	r5, r0
 800eb86:	b08b      	sub	sp, #44	; 0x2c
 800eb88:	b191      	cbz	r1, 800ebb0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800eb8a:	2401      	movs	r4, #1
 800eb8c:	e9cd 3100 	strd	r3, r1, [sp]
 800eb90:	4613      	mov	r3, r2
 800eb92:	4601      	mov	r1, r0
 800eb94:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800eb98:	a802      	add	r0, sp, #8
 800eb9a:	f7ff fd0b 	bl	800e5b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800eb9e:	2100      	movs	r1, #0
 800eba0:	a802      	add	r0, sp, #8
 800eba2:	f7ff ff1f 	bl	800e9e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800eba6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ebaa:	b163      	cbz	r3, 800ebc6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800ebac:	3401      	adds	r4, #1
 800ebae:	e7f6      	b.n	800eb9e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800ebb0:	2401      	movs	r4, #1
 800ebb2:	f002 fcf3 	bl	801159c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ebb6:	280a      	cmp	r0, #10
 800ebb8:	4628      	mov	r0, r5
 800ebba:	bf08      	it	eq
 800ebbc:	3401      	addeq	r4, #1
 800ebbe:	f002 fced 	bl	801159c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	d1f7      	bne.n	800ebb6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800ebc6:	b2a0      	uxth	r0, r4
 800ebc8:	b00b      	add	sp, #44	; 0x2c
 800ebca:	bd30      	pop	{r4, r5, pc}

0800ebcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800ebcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd0:	b0e5      	sub	sp, #404	; 0x194
 800ebd2:	4689      	mov	r9, r1
 800ebd4:	461c      	mov	r4, r3
 800ebd6:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800ebda:	900a      	str	r0, [sp, #40]	; 0x28
 800ebdc:	f1ba 0f00 	cmp.w	sl, #0
 800ebe0:	f000 80b4 	beq.w	800ed4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f000 80b0 	beq.w	800ed4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ebec:	7ba3      	ldrb	r3, [r4, #14]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f000 80ac 	beq.w	800ed4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ebf4:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800ebf8:	6810      	ldr	r0, [r2, #0]
 800ebfa:	6851      	ldr	r1, [r2, #4]
 800ebfc:	2500      	movs	r5, #0
 800ebfe:	4643      	mov	r3, r8
 800ec00:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800ec04:	950f      	str	r5, [sp, #60]	; 0x3c
 800ec06:	af19      	add	r7, sp, #100	; 0x64
 800ec08:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ec0c:	79a2      	ldrb	r2, [r4, #6]
 800ec0e:	c303      	stmia	r3!, {r0, r1}
 800ec10:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800ec14:	a90f      	add	r1, sp, #60	; 0x3c
 800ec16:	4640      	mov	r0, r8
 800ec18:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ec1c:	f7ff fd40 	bl	800e6a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800ec20:	a90f      	add	r1, sp, #60	; 0x3c
 800ec22:	79a2      	ldrb	r2, [r4, #6]
 800ec24:	4608      	mov	r0, r1
 800ec26:	f7ff fd3b 	bl	800e6a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	f002 f868 	bl	8010d00 <_ZN8touchgfx12TextProviderC1Ev>
 800ec30:	6820      	ldr	r0, [r4, #0]
 800ec32:	6803      	ldr	r3, [r0, #0]
 800ec34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec36:	4798      	blx	r3
 800ec38:	4606      	mov	r6, r0
 800ec3a:	6820      	ldr	r0, [r4, #0]
 800ec3c:	6803      	ldr	r3, [r0, #0]
 800ec3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec40:	4798      	blx	r3
 800ec42:	4633      	mov	r3, r6
 800ec44:	9000      	str	r0, [sp, #0]
 800ec46:	4651      	mov	r1, sl
 800ec48:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	f002 f8ab 	bl	8010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec50:	7923      	ldrb	r3, [r4, #4]
 800ec52:	6820      	ldr	r0, [r4, #0]
 800ec54:	9308      	str	r3, [sp, #32]
 800ec56:	6803      	ldr	r3, [r0, #0]
 800ec58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec5a:	4798      	blx	r3
 800ec5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec60:	181e      	adds	r6, r3, r0
 800ec62:	42ae      	cmp	r6, r5
 800ec64:	dd06      	ble.n	800ec74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800ec66:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800ec6a:	4282      	cmp	r2, r0
 800ec6c:	bfa4      	itt	ge
 800ec6e:	189d      	addge	r5, r3, r2
 800ec70:	fb95 f5f6 	sdivge	r5, r5, r6
 800ec74:	a832      	add	r0, sp, #200	; 0xc8
 800ec76:	f002 f843 	bl	8010d00 <_ZN8touchgfx12TextProviderC1Ev>
 800ec7a:	7c23      	ldrb	r3, [r4, #16]
 800ec7c:	b17b      	cbz	r3, 800ec9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800ec7e:	6820      	ldr	r0, [r4, #0]
 800ec80:	6803      	ldr	r3, [r0, #0]
 800ec82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec84:	4798      	blx	r3
 800ec86:	4683      	mov	fp, r0
 800ec88:	6820      	ldr	r0, [r4, #0]
 800ec8a:	6803      	ldr	r3, [r0, #0]
 800ec8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec8e:	4798      	blx	r3
 800ec90:	465b      	mov	r3, fp
 800ec92:	9000      	str	r0, [sp, #0]
 800ec94:	4651      	mov	r1, sl
 800ec96:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800ec98:	a832      	add	r0, sp, #200	; 0xc8
 800ec9a:	f002 f884 	bl	8010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec9e:	7be1      	ldrb	r1, [r4, #15]
 800eca0:	a811      	add	r0, sp, #68	; 0x44
 800eca2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800eca6:	7963      	ldrb	r3, [r4, #5]
 800eca8:	1a52      	subs	r2, r2, r1
 800ecaa:	7c21      	ldrb	r1, [r4, #16]
 800ecac:	9101      	str	r1, [sp, #4]
 800ecae:	b292      	uxth	r2, r2
 800ecb0:	6821      	ldr	r1, [r4, #0]
 800ecb2:	9100      	str	r1, [sp, #0]
 800ecb4:	a932      	add	r1, sp, #200	; 0xc8
 800ecb6:	f7ff fc7d 	bl	800e5b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800ecba:	7c23      	ldrb	r3, [r4, #16]
 800ecbc:	b9bb      	cbnz	r3, 800ecee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800ecbe:	fa1f fa86 	uxth.w	sl, r6
 800ecc2:	2d00      	cmp	r5, #0
 800ecc4:	dd45      	ble.n	800ed52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ecc6:	4638      	mov	r0, r7
 800ecc8:	f002 fc68 	bl	801159c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d03d      	beq.n	800ed4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ecd0:	280a      	cmp	r0, #10
 800ecd2:	d1f6      	bne.n	800ecc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ecd4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ecd8:	3d01      	subs	r5, #1
 800ecda:	4453      	add	r3, sl
 800ecdc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ece0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ece4:	eba3 030a 	sub.w	r3, r3, sl
 800ece8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ecec:	e7e9      	b.n	800ecc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ecee:	0073      	lsls	r3, r6, #1
 800ecf0:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800ecf4:	fa1f fa86 	uxth.w	sl, r6
 800ecf8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecfa:	2d00      	cmp	r5, #0
 800ecfc:	dd29      	ble.n	800ed52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ecfe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ed02:	a811      	add	r0, sp, #68	; 0x44
 800ed04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed06:	428b      	cmp	r3, r1
 800ed08:	bfd4      	ite	le
 800ed0a:	2100      	movle	r1, #0
 800ed0c:	2101      	movgt	r1, #1
 800ed0e:	f7ff fe69 	bl	800e9e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ed12:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800ed16:	3b01      	subs	r3, #1
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	455b      	cmp	r3, fp
 800ed1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed1e:	d005      	beq.n	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800ed20:	7961      	ldrb	r1, [r4, #5]
 800ed22:	4638      	mov	r0, r7
 800ed24:	f7f4 fd86 	bl	8003834 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ed28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed2a:	e7f4      	b.n	800ed16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800ed2c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ed30:	3d01      	subs	r5, #1
 800ed32:	4453      	add	r3, sl
 800ed34:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ed38:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ed3c:	eba3 030a 	sub.w	r3, r3, sl
 800ed40:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ed44:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1d6      	bne.n	800ecfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800ed4c:	b065      	add	sp, #404	; 0x194
 800ed4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed52:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800ed56:	ad4b      	add	r5, sp, #300	; 0x12c
 800ed58:	f04f 0b00 	mov.w	fp, #0
 800ed5c:	7c23      	ldrb	r3, [r4, #16]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d067      	beq.n	800ee32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800ed62:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ed66:	a811      	add	r0, sp, #68	; 0x44
 800ed68:	458a      	cmp	sl, r1
 800ed6a:	bfd4      	ite	le
 800ed6c:	2100      	movle	r1, #0
 800ed6e:	2101      	movgt	r1, #1
 800ed70:	f7ff fe38 	bl	800e9e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ed74:	9b08      	ldr	r3, [sp, #32]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d056      	beq.n	800ee28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800ed7a:	7c23      	ldrb	r3, [r4, #16]
 800ed7c:	2264      	movs	r2, #100	; 0x64
 800ed7e:	4639      	mov	r1, r7
 800ed80:	4628      	mov	r0, r5
 800ed82:	9309      	str	r3, [sp, #36]	; 0x24
 800ed84:	f00c fa08 	bl	801b198 <memcpy>
 800ed88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d059      	beq.n	800ee42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 800ed8e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800ed92:	7922      	ldrb	r2, [r4, #4]
 800ed94:	2a01      	cmp	r2, #1
 800ed96:	d13d      	bne.n	800ee14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800ed98:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800ed9c:	1ac0      	subs	r0, r0, r3
 800ed9e:	2302      	movs	r3, #2
 800eda0:	fb90 f0f3 	sdiv	r0, r0, r3
 800eda4:	b200      	sxth	r0, r0
 800eda6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800edaa:	4418      	add	r0, r3
 800edac:	7c23      	ldrb	r3, [r4, #16]
 800edae:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d03a      	beq.n	800ee2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800edb6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800edba:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800edbe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800edc2:	9500      	str	r5, [sp, #0]
 800edc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800edc6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800edca:	e9cd b703 	strd	fp, r7, [sp, #12]
 800edce:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800edd2:	464a      	mov	r2, r9
 800edd4:	2100      	movs	r1, #0
 800edd6:	f7ff fc94 	bl	800e702 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800edda:	2800      	cmp	r0, #0
 800eddc:	d1b6      	bne.n	800ed4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800edde:	b2b2      	uxth	r2, r6
 800ede0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ede4:	4611      	mov	r1, r2
 800ede6:	4413      	add	r3, r2
 800ede8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800edec:	b21b      	sxth	r3, r3
 800edee:	1a52      	subs	r2, r2, r1
 800edf0:	7c21      	ldrb	r1, [r4, #16]
 800edf2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800edf6:	b212      	sxth	r2, r2
 800edf8:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 800edfc:	b109      	cbz	r1, 800ee02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 800edfe:	42b2      	cmp	r2, r6
 800ee00:	dba4      	blt.n	800ed4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ee02:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800ee06:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800ee0a:	440a      	add	r2, r1
 800ee0c:	b212      	sxth	r2, r2
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	dda4      	ble.n	800ed5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 800ee12:	e79b      	b.n	800ed4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ee14:	2a02      	cmp	r2, #2
 800ee16:	d105      	bne.n	800ee24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 800ee18:	7be2      	ldrb	r2, [r4, #15]
 800ee1a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800ee1e:	1a80      	subs	r0, r0, r2
 800ee20:	1ac0      	subs	r0, r0, r3
 800ee22:	e7bf      	b.n	800eda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 800ee24:	2000      	movs	r0, #0
 800ee26:	e7be      	b.n	800eda6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800ee28:	7be0      	ldrb	r0, [r4, #15]
 800ee2a:	e7bc      	b.n	800eda6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800ee2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ee30:	e7c3      	b.n	800edba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 800ee32:	9b08      	ldr	r3, [sp, #32]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d0f7      	beq.n	800ee28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800ee38:	2264      	movs	r2, #100	; 0x64
 800ee3a:	4639      	mov	r1, r7
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f00c f9ab 	bl	801b198 <memcpy>
 800ee42:	2300      	movs	r3, #0
 800ee44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ee48:	6821      	ldr	r1, [r4, #0]
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f7ff fbec 	bl	800e628 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800ee50:	b203      	sxth	r3, r0
 800ee52:	e79e      	b.n	800ed92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0800ee54 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	b510      	push	{r4, lr}
 800ee58:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ee5c:	d00b      	beq.n	800ee76 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d00e      	beq.n	800ee80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d001      	beq.n	800ee6a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800ee66:	1860      	adds	r0, r4, r1
 800ee68:	bd10      	pop	{r4, pc}
 800ee6a:	8880      	ldrh	r0, [r0, #4]
 800ee6c:	4420      	add	r0, r4
 800ee6e:	b200      	sxth	r0, r0
 800ee70:	1a80      	subs	r0, r0, r2
 800ee72:	3801      	subs	r0, #1
 800ee74:	e7f8      	b.n	800ee68 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800ee76:	8880      	ldrh	r0, [r0, #4]
 800ee78:	4420      	add	r0, r4
 800ee7a:	b200      	sxth	r0, r0
 800ee7c:	1a40      	subs	r0, r0, r1
 800ee7e:	e7f8      	b.n	800ee72 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ee80:	18a0      	adds	r0, r4, r2
 800ee82:	e7f1      	b.n	800ee68 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800ee84 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	b510      	push	{r4, lr}
 800ee88:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800ee8c:	d006      	beq.n	800ee9c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d00a      	beq.n	800eea8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	bf14      	ite	ne
 800ee96:	18a0      	addne	r0, r4, r2
 800ee98:	1860      	addeq	r0, r4, r1
 800ee9a:	bd10      	pop	{r4, pc}
 800ee9c:	88c0      	ldrh	r0, [r0, #6]
 800ee9e:	4420      	add	r0, r4
 800eea0:	b200      	sxth	r0, r0
 800eea2:	1a80      	subs	r0, r0, r2
 800eea4:	3801      	subs	r0, #1
 800eea6:	e7f8      	b.n	800ee9a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800eea8:	88c0      	ldrh	r0, [r0, #6]
 800eeaa:	4420      	add	r0, r4
 800eeac:	b200      	sxth	r0, r0
 800eeae:	1a40      	subs	r0, r0, r1
 800eeb0:	e7f8      	b.n	800eea4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800eeb4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800eeb4:	4b01      	ldr	r3, [pc, #4]	; (800eebc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	4770      	bx	lr
 800eebc:	24006bc4 	.word	0x24006bc4

0800eec0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800eec0:	4603      	mov	r3, r0
 800eec2:	b1c8      	cbz	r0, 800eef8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800eec4:	0c02      	lsrs	r2, r0, #16
 800eec6:	0412      	lsls	r2, r2, #16
 800eec8:	b9a2      	cbnz	r2, 800eef4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800eeca:	0403      	lsls	r3, r0, #16
 800eecc:	2010      	movs	r0, #16
 800eece:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800eed2:	bf04      	itt	eq
 800eed4:	021b      	lsleq	r3, r3, #8
 800eed6:	3008      	addeq	r0, #8
 800eed8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800eedc:	bf04      	itt	eq
 800eede:	011b      	lsleq	r3, r3, #4
 800eee0:	3004      	addeq	r0, #4
 800eee2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800eee6:	bf04      	itt	eq
 800eee8:	009b      	lsleq	r3, r3, #2
 800eeea:	3002      	addeq	r0, #2
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	db04      	blt.n	800eefa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800eef0:	3001      	adds	r0, #1
 800eef2:	4770      	bx	lr
 800eef4:	2000      	movs	r0, #0
 800eef6:	e7ea      	b.n	800eece <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800eef8:	2020      	movs	r0, #32
 800eefa:	4770      	bx	lr

0800eefc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	b087      	sub	sp, #28
 800ef02:	4681      	mov	r9, r0
 800ef04:	4698      	mov	r8, r3
 800ef06:	4610      	mov	r0, r2
 800ef08:	460d      	mov	r5, r1
 800ef0a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800ef0e:	b981      	cbnz	r1, 800ef32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800ef10:	b14b      	cbz	r3, 800ef26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800ef12:	460b      	mov	r3, r1
 800ef14:	464a      	mov	r2, r9
 800ef16:	4641      	mov	r1, r8
 800ef18:	e9cd 4700 	strd	r4, r7, [sp]
 800ef1c:	f7ff ffee 	bl	800eefc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ef20:	b007      	add	sp, #28
 800ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef26:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	e7f6      	b.n	800ef20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ef32:	fa32 fa01 	lsrs.w	sl, r2, r1
 800ef36:	d107      	bne.n	800ef48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800ef38:	fb09 f602 	mul.w	r6, r9, r2
 800ef3c:	fbb6 f0f4 	udiv	r0, r6, r4
 800ef40:	fb04 6610 	mls	r6, r4, r0, r6
 800ef44:	603e      	str	r6, [r7, #0]
 800ef46:	e7eb      	b.n	800ef20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ef48:	2601      	movs	r6, #1
 800ef4a:	fa09 fb01 	lsl.w	fp, r9, r1
 800ef4e:	408e      	lsls	r6, r1
 800ef50:	fbbb f3f4 	udiv	r3, fp, r4
 800ef54:	3e01      	subs	r6, #1
 800ef56:	9302      	str	r3, [sp, #8]
 800ef58:	fb0a f303 	mul.w	r3, sl, r3
 800ef5c:	4016      	ands	r6, r2
 800ef5e:	9303      	str	r3, [sp, #12]
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7ff ffad 	bl	800eec0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ef66:	464a      	mov	r2, r9
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	e9cd 4700 	strd	r4, r7, [sp]
 800ef72:	f7ff ffc3 	bl	800eefc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ef76:	9b02      	ldr	r3, [sp, #8]
 800ef78:	4606      	mov	r6, r0
 800ef7a:	eb05 0108 	add.w	r1, r5, r8
 800ef7e:	fb04 bb13 	mls	fp, r4, r3, fp
 800ef82:	4658      	mov	r0, fp
 800ef84:	f7ff ff9c 	bl	800eec0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ef88:	ab05      	add	r3, sp, #20
 800ef8a:	465a      	mov	r2, fp
 800ef8c:	e9cd 4300 	strd	r4, r3, [sp]
 800ef90:	4603      	mov	r3, r0
 800ef92:	4650      	mov	r0, sl
 800ef94:	f7ff ffb2 	bl	800eefc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ef98:	6839      	ldr	r1, [r7, #0]
 800ef9a:	9a05      	ldr	r2, [sp, #20]
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	4411      	add	r1, r2
 800efa0:	fbb1 f2f4 	udiv	r2, r1, r4
 800efa4:	18d3      	adds	r3, r2, r3
 800efa6:	fb04 1412 	mls	r4, r4, r2, r1
 800efaa:	441e      	add	r6, r3
 800efac:	603c      	str	r4, [r7, #0]
 800efae:	4430      	add	r0, r6
 800efb0:	e7b6      	b.n	800ef20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800efb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800efb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efb6:	b085      	sub	sp, #20
 800efb8:	f1b0 0900 	subs.w	r9, r0, #0
 800efbc:	461d      	mov	r5, r3
 800efbe:	4617      	mov	r7, r2
 800efc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800efc2:	bfbb      	ittet	lt
 800efc4:	f1c9 0900 	rsblt	r9, r9, #0
 800efc8:	f04f 36ff 	movlt.w	r6, #4294967295
 800efcc:	2601      	movge	r6, #1
 800efce:	6823      	ldrlt	r3, [r4, #0]
 800efd0:	bfbc      	itt	lt
 800efd2:	425b      	neglt	r3, r3
 800efd4:	6023      	strlt	r3, [r4, #0]
 800efd6:	2a00      	cmp	r2, #0
 800efd8:	da04      	bge.n	800efe4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800efda:	6823      	ldr	r3, [r4, #0]
 800efdc:	4257      	negs	r7, r2
 800efde:	4276      	negs	r6, r6
 800efe0:	425b      	negs	r3, r3
 800efe2:	6023      	str	r3, [r4, #0]
 800efe4:	2d00      	cmp	r5, #0
 800efe6:	4638      	mov	r0, r7
 800efe8:	bfba      	itte	lt
 800efea:	426d      	neglt	r5, r5
 800efec:	f04f 38ff 	movlt.w	r8, #4294967295
 800eff0:	f04f 0801 	movge.w	r8, #1
 800eff4:	f7ff ff64 	bl	800eec0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800eff8:	ab03      	add	r3, sp, #12
 800effa:	463a      	mov	r2, r7
 800effc:	e9cd 5300 	strd	r5, r3, [sp]
 800f000:	4603      	mov	r3, r0
 800f002:	4648      	mov	r0, r9
 800f004:	f7ff ff7a 	bl	800eefc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f008:	6823      	ldr	r3, [r4, #0]
 800f00a:	9a03      	ldr	r2, [sp, #12]
 800f00c:	4546      	cmp	r6, r8
 800f00e:	441a      	add	r2, r3
 800f010:	fb92 f3f5 	sdiv	r3, r2, r5
 800f014:	4418      	add	r0, r3
 800f016:	fb05 2313 	mls	r3, r5, r3, r2
 800f01a:	bf18      	it	ne
 800f01c:	4240      	negne	r0, r0
 800f01e:	1c72      	adds	r2, r6, #1
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	d105      	bne.n	800f030 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800f024:	2b00      	cmp	r3, #0
 800f026:	f1c3 0200 	rsb	r2, r3, #0
 800f02a:	db0b      	blt.n	800f044 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800f02c:	6022      	str	r2, [r4, #0]
 800f02e:	e006      	b.n	800f03e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f030:	2e01      	cmp	r6, #1
 800f032:	d104      	bne.n	800f03e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f034:	2b00      	cmp	r3, #0
 800f036:	da02      	bge.n	800f03e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f038:	442b      	add	r3, r5
 800f03a:	3801      	subs	r0, #1
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	b005      	add	sp, #20
 800f040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f044:	3801      	subs	r0, #1
 800f046:	1b52      	subs	r2, r2, r5
 800f048:	e7f0      	b.n	800f02c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800f04c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800f04c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f050:	4c1c      	ldr	r4, [pc, #112]	; (800f0c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800f052:	4605      	mov	r5, r0
 800f054:	6807      	ldr	r7, [r0, #0]
 800f056:	69a3      	ldr	r3, [r4, #24]
 800f058:	b92b      	cbnz	r3, 800f066 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800f05a:	6840      	ldr	r0, [r0, #4]
 800f05c:	e9c5 7000 	strd	r7, r0, [r5]
 800f060:	b004      	add	sp, #16
 800f062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f066:	f04f 0802 	mov.w	r8, #2
 800f06a:	68a2      	ldr	r2, [r4, #8]
 800f06c:	ae04      	add	r6, sp, #16
 800f06e:	6820      	ldr	r0, [r4, #0]
 800f070:	fb93 f1f8 	sdiv	r1, r3, r8
 800f074:	440a      	add	r2, r1
 800f076:	69e1      	ldr	r1, [r4, #28]
 800f078:	f846 2d04 	str.w	r2, [r6, #-4]!
 800f07c:	463a      	mov	r2, r7
 800f07e:	9600      	str	r6, [sp, #0]
 800f080:	f7ff ff97 	bl	800efb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f084:	69a3      	ldr	r3, [r4, #24]
 800f086:	4607      	mov	r7, r0
 800f088:	686a      	ldr	r2, [r5, #4]
 800f08a:	6a21      	ldr	r1, [r4, #32]
 800f08c:	9600      	str	r6, [sp, #0]
 800f08e:	6860      	ldr	r0, [r4, #4]
 800f090:	f7ff ff8f 	bl	800efb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f094:	69a3      	ldr	r3, [r4, #24]
 800f096:	6962      	ldr	r2, [r4, #20]
 800f098:	4407      	add	r7, r0
 800f09a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f09c:	9600      	str	r6, [sp, #0]
 800f09e:	68e0      	ldr	r0, [r4, #12]
 800f0a0:	fb93 f8f8 	sdiv	r8, r3, r8
 800f0a4:	4442      	add	r2, r8
 800f0a6:	9203      	str	r2, [sp, #12]
 800f0a8:	682a      	ldr	r2, [r5, #0]
 800f0aa:	f7ff ff82 	bl	800efb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f0ae:	4680      	mov	r8, r0
 800f0b0:	9600      	str	r6, [sp, #0]
 800f0b2:	69a3      	ldr	r3, [r4, #24]
 800f0b4:	686a      	ldr	r2, [r5, #4]
 800f0b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f0b8:	6920      	ldr	r0, [r4, #16]
 800f0ba:	f7ff ff7a 	bl	800efb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f0be:	4440      	add	r0, r8
 800f0c0:	e7cc      	b.n	800f05c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800f0c2:	bf00      	nop
 800f0c4:	24006bc8 	.word	0x24006bc8

0800f0c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800f0c8:	4b07      	ldr	r3, [pc, #28]	; (800f0e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d109      	bne.n	800f0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800f0d0:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f0d4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f0d8:	8003      	strh	r3, [r0, #0]
 800f0da:	4b04      	ldr	r3, [pc, #16]	; (800f0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	1a9b      	subs	r3, r3, r2
 800f0e2:	800b      	strh	r3, [r1, #0]
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	24006bb4 	.word	0x24006bb4
 800f0ec:	24006bb8 	.word	0x24006bb8

0800f0f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800f0f0:	4b07      	ldr	r3, [pc, #28]	; (800f110 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d108      	bne.n	800f10c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800f0fa:	4b06      	ldr	r3, [pc, #24]	; (800f114 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800f0fc:	880c      	ldrh	r4, [r1, #0]
 800f0fe:	881b      	ldrh	r3, [r3, #0]
 800f100:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f104:	3b01      	subs	r3, #1
 800f106:	1b1b      	subs	r3, r3, r4
 800f108:	8003      	strh	r3, [r0, #0]
 800f10a:	800a      	strh	r2, [r1, #0]
 800f10c:	bd10      	pop	{r4, pc}
 800f10e:	bf00      	nop
 800f110:	24006bb4 	.word	0x24006bb4
 800f114:	24006bb8 	.word	0x24006bb8

0800f118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800f118:	4b0a      	ldr	r3, [pc, #40]	; (800f144 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800f11a:	b510      	push	{r4, lr}
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d10e      	bne.n	800f140 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800f122:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f126:	8843      	ldrh	r3, [r0, #2]
 800f128:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f12c:	18ca      	adds	r2, r1, r3
 800f12e:	4b06      	ldr	r3, [pc, #24]	; (800f148 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800f130:	8044      	strh	r4, [r0, #2]
 800f132:	881b      	ldrh	r3, [r3, #0]
 800f134:	1a9b      	subs	r3, r3, r2
 800f136:	8003      	strh	r3, [r0, #0]
 800f138:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f13c:	8081      	strh	r1, [r0, #4]
 800f13e:	80c3      	strh	r3, [r0, #6]
 800f140:	bd10      	pop	{r4, pc}
 800f142:	bf00      	nop
 800f144:	24006bb4 	.word	0x24006bb4
 800f148:	24006bb8 	.word	0x24006bb8

0800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800f14c:	4b08      	ldr	r3, [pc, #32]	; (800f170 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d10c      	bne.n	800f16e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800f154:	8803      	ldrh	r3, [r0, #0]
 800f156:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800f15a:	8842      	ldrh	r2, [r0, #2]
 800f15c:	8002      	strh	r2, [r0, #0]
 800f15e:	185a      	adds	r2, r3, r1
 800f160:	4b04      	ldr	r3, [pc, #16]	; (800f174 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800f162:	881b      	ldrh	r3, [r3, #0]
 800f164:	1a9b      	subs	r3, r3, r2
 800f166:	8043      	strh	r3, [r0, #2]
 800f168:	88c3      	ldrh	r3, [r0, #6]
 800f16a:	80c1      	strh	r1, [r0, #6]
 800f16c:	8083      	strh	r3, [r0, #4]
 800f16e:	4770      	bx	lr
 800f170:	24006bb4 	.word	0x24006bb4
 800f174:	24006bb8 	.word	0x24006bb8

0800f178 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800f178:	4b07      	ldr	r3, [pc, #28]	; (800f198 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800f17a:	b510      	push	{r4, lr}
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d108      	bne.n	800f194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800f182:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f186:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f18a:	8003      	strh	r3, [r0, #0]
 800f18c:	8893      	ldrh	r3, [r2, #4]
 800f18e:	3b01      	subs	r3, #1
 800f190:	1b1b      	subs	r3, r3, r4
 800f192:	800b      	strh	r3, [r1, #0]
 800f194:	bd10      	pop	{r4, pc}
 800f196:	bf00      	nop
 800f198:	24006bb4 	.word	0x24006bb4

0800f19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 800f19c:	4b0b      	ldr	r3, [pc, #44]	; (800f1cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d111      	bne.n	800f1c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 800f1a4:	680b      	ldr	r3, [r1, #0]
 800f1a6:	ed90 7a00 	vldr	s14, [r0]
 800f1aa:	6003      	str	r3, [r0, #0]
 800f1ac:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800f1b0:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f1d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 800f1b4:	ee07 3a90 	vmov	s15, r3
 800f1b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f1c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1c4:	edc1 7a00 	vstr	s15, [r1]
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	24006bb4 	.word	0x24006bb4
 800f1d0:	38d1b717 	.word	0x38d1b717

0800f1d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800f1d4:	4b0a      	ldr	r3, [pc, #40]	; (800f200 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800f1d6:	460a      	mov	r2, r1
 800f1d8:	b510      	push	{r4, lr}
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d10d      	bne.n	800f1fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800f1e0:	8881      	ldrh	r1, [r0, #4]
 800f1e2:	8803      	ldrh	r3, [r0, #0]
 800f1e4:	440b      	add	r3, r1
 800f1e6:	4601      	mov	r1, r0
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	f821 3b02 	strh.w	r3, [r1], #2
 800f1ee:	f7ff ffc3 	bl	800f178 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800f1f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f1f6:	88c2      	ldrh	r2, [r0, #6]
 800f1f8:	80c3      	strh	r3, [r0, #6]
 800f1fa:	8082      	strh	r2, [r0, #4]
 800f1fc:	bd10      	pop	{r4, pc}
 800f1fe:	bf00      	nop
 800f200:	24006bb4 	.word	0x24006bb4

0800f204 <_ZN8touchgfx11Application13requestRedrawEv>:
 800f204:	4b06      	ldr	r3, [pc, #24]	; (800f220 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800f206:	2100      	movs	r1, #0
 800f208:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f20c:	4b05      	ldr	r3, [pc, #20]	; (800f224 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800f20e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800f212:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f216:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800f21a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800f21e:	4770      	bx	lr
 800f220:	24006bb0 	.word	0x24006bb0
 800f224:	24006bb2 	.word	0x24006bb2

0800f228 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800f228:	4b03      	ldr	r3, [pc, #12]	; (800f238 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800f22a:	6818      	ldr	r0, [r3, #0]
 800f22c:	b110      	cbz	r0, 800f234 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800f22e:	6803      	ldr	r3, [r0, #0]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	4718      	bx	r3
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	24006bf8 	.word	0x24006bf8

0800f23c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800f23c:	4770      	bx	lr
	...

0800f240 <_ZN8touchgfx11Application4drawEv>:
 800f240:	4b09      	ldr	r3, [pc, #36]	; (800f268 <_ZN8touchgfx11Application4drawEv+0x28>)
 800f242:	b507      	push	{r0, r1, r2, lr}
 800f244:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f248:	2100      	movs	r1, #0
 800f24a:	4b08      	ldr	r3, [pc, #32]	; (800f26c <_ZN8touchgfx11Application4drawEv+0x2c>)
 800f24c:	9100      	str	r1, [sp, #0]
 800f24e:	4669      	mov	r1, sp
 800f250:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f254:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f258:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f25c:	6803      	ldr	r3, [r0, #0]
 800f25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f260:	4798      	blx	r3
 800f262:	b003      	add	sp, #12
 800f264:	f85d fb04 	ldr.w	pc, [sp], #4
 800f268:	24006bb0 	.word	0x24006bb0
 800f26c:	24006bb2 	.word	0x24006bb2

0800f270 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800f270:	4b03      	ldr	r3, [pc, #12]	; (800f280 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800f272:	6818      	ldr	r0, [r3, #0]
 800f274:	b110      	cbz	r0, 800f27c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800f276:	6803      	ldr	r3, [r0, #0]
 800f278:	69db      	ldr	r3, [r3, #28]
 800f27a:	4718      	bx	r3
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	24006bf8 	.word	0x24006bf8

0800f284 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800f284:	4b03      	ldr	r3, [pc, #12]	; (800f294 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800f286:	6818      	ldr	r0, [r3, #0]
 800f288:	b110      	cbz	r0, 800f290 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800f28a:	6803      	ldr	r3, [r0, #0]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	4718      	bx	r3
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	24006bf8 	.word	0x24006bf8

0800f298 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800f298:	4b03      	ldr	r3, [pc, #12]	; (800f2a8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800f29a:	6818      	ldr	r0, [r3, #0]
 800f29c:	b110      	cbz	r0, 800f2a4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800f29e:	6803      	ldr	r3, [r0, #0]
 800f2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a2:	4718      	bx	r3
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	24006bf8 	.word	0x24006bf8

0800f2ac <_ZN8touchgfx11ApplicationD1Ev>:
 800f2ac:	4770      	bx	lr

0800f2ae <_ZN8touchgfx11ApplicationD0Ev>:
 800f2ae:	b510      	push	{r4, lr}
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f2b6:	f00b fddb 	bl	801ae70 <_ZdlPvj>
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	bd10      	pop	{r4, pc}
	...

0800f2c0 <_ZN8touchgfx11Application15handleTickEventEv>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	4d38      	ldr	r5, [pc, #224]	; (800f3a4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	6828      	ldr	r0, [r5, #0]
 800f2c8:	b140      	cbz	r0, 800f2dc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f2ca:	7a03      	ldrb	r3, [r0, #8]
 800f2cc:	b933      	cbnz	r3, 800f2dc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f2ce:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800f2d2:	6803      	ldr	r3, [r0, #0]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2da:	4718      	bx	r3
 800f2dc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800f2e0:	b97b      	cbnz	r3, 800f302 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2e2:	b170      	cbz	r0, 800f302 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2e4:	7a03      	ldrb	r3, [r0, #8]
 800f2e6:	b163      	cbz	r3, 800f302 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2e8:	4b2f      	ldr	r3, [pc, #188]	; (800f3a8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800f2ea:	6818      	ldr	r0, [r3, #0]
 800f2ec:	b110      	cbz	r0, 800f2f4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800f2ee:	6803      	ldr	r3, [r0, #0]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	4798      	blx	r3
 800f2f4:	6828      	ldr	r0, [r5, #0]
 800f2f6:	6803      	ldr	r3, [r0, #0]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	4798      	blx	r3
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800f302:	2500      	movs	r5, #0
 800f304:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800f308:	42a8      	cmp	r0, r5
 800f30a:	dd0c      	ble.n	800f326 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800f30c:	1963      	adds	r3, r4, r5
 800f30e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800f312:	b132      	cbz	r2, 800f322 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800f314:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800f318:	4413      	add	r3, r2
 800f31a:	6858      	ldr	r0, [r3, #4]
 800f31c:	6803      	ldr	r3, [r0, #0]
 800f31e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f320:	4798      	blx	r3
 800f322:	3501      	adds	r5, #1
 800f324:	e7ee      	b.n	800f304 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800f326:	2300      	movs	r3, #0
 800f328:	461a      	mov	r2, r3
 800f32a:	4298      	cmp	r0, r3
 800f32c:	d10f      	bne.n	800f34e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 800f32e:	1d25      	adds	r5, r4, #4
 800f330:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800f334:	4291      	cmp	r1, r2
 800f336:	dd2d      	ble.n	800f394 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 800f338:	1e48      	subs	r0, r1, #1
 800f33a:	b280      	uxth	r0, r0
 800f33c:	4288      	cmp	r0, r1
 800f33e:	d31a      	bcc.n	800f376 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800f340:	4b1a      	ldr	r3, [pc, #104]	; (800f3ac <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800f342:	f240 11a9 	movw	r1, #425	; 0x1a9
 800f346:	4a1a      	ldr	r2, [pc, #104]	; (800f3b0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800f348:	481a      	ldr	r0, [pc, #104]	; (800f3b4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800f34a:	f00b fea7 	bl	801b09c <__assert_func>
 800f34e:	18e1      	adds	r1, r4, r3
 800f350:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800f354:	b16d      	cbz	r5, 800f372 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800f356:	429a      	cmp	r2, r3
 800f358:	d00a      	beq.n	800f370 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800f35a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800f35e:	4431      	add	r1, r6
 800f360:	684e      	ldr	r6, [r1, #4]
 800f362:	b291      	uxth	r1, r2
 800f364:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f368:	604e      	str	r6, [r1, #4]
 800f36a:	18a1      	adds	r1, r4, r2
 800f36c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800f370:	3201      	adds	r2, #1
 800f372:	3301      	adds	r3, #1
 800f374:	e7d9      	b.n	800f32a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800f376:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800f37a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800f37e:	3304      	adds	r3, #4
 800f380:	428b      	cmp	r3, r1
 800f382:	d004      	beq.n	800f38e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 800f384:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800f388:	f843 6c04 	str.w	r6, [r3, #-4]
 800f38c:	e7f8      	b.n	800f380 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800f38e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800f392:	e7cd      	b.n	800f330 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800f394:	4b04      	ldr	r3, [pc, #16]	; (800f3a8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800f396:	6818      	ldr	r0, [r3, #0]
 800f398:	b110      	cbz	r0, 800f3a0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800f39a:	6803      	ldr	r3, [r0, #0]
 800f39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39e:	e79a      	b.n	800f2d6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800f3a0:	bd70      	pop	{r4, r5, r6, pc}
 800f3a2:	bf00      	nop
 800f3a4:	24006bfc 	.word	0x24006bfc
 800f3a8:	24006bf8 	.word	0x24006bf8
 800f3ac:	0801e29a 	.word	0x0801e29a
 800f3b0:	0801e484 	.word	0x0801e484
 800f3b4:	0801e2a8 	.word	0x0801e2a8

0800f3b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800f3b8:	b570      	push	{r4, r5, r6, lr}
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	460c      	mov	r4, r1
 800f3be:	b929      	cbnz	r1, 800f3cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800f3c0:	4b0c      	ldr	r3, [pc, #48]	; (800f3f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800f3c2:	2167      	movs	r1, #103	; 0x67
 800f3c4:	4a0c      	ldr	r2, [pc, #48]	; (800f3f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800f3c6:	480d      	ldr	r0, [pc, #52]	; (800f3fc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800f3c8:	f00b fe68 	bl	801b09c <__assert_func>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4d0c      	ldr	r5, [pc, #48]	; (800f400 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800f3d0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800f3d4:	6828      	ldr	r0, [r5, #0]
 800f3d6:	b110      	cbz	r0, 800f3de <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800f3d8:	6803      	ldr	r3, [r0, #0]
 800f3da:	695b      	ldr	r3, [r3, #20]
 800f3dc:	4798      	blx	r3
 800f3de:	602c      	str	r4, [r5, #0]
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	6823      	ldr	r3, [r4, #0]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	4798      	blx	r3
 800f3e8:	6833      	ldr	r3, [r6, #0]
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3f2:	4718      	bx	r3
 800f3f4:	0801e266 	.word	0x0801e266
 800f3f8:	0801e344 	.word	0x0801e344
 800f3fc:	0801e270 	.word	0x0801e270
 800f400:	24006bf8 	.word	0x24006bf8

0800f404 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800f404:	b510      	push	{r4, lr}
 800f406:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f40a:	888a      	ldrh	r2, [r1, #4]
 800f40c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f410:	4422      	add	r2, r4
 800f412:	b212      	sxth	r2, r2
 800f414:	4293      	cmp	r3, r2
 800f416:	da15      	bge.n	800f444 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f418:	8882      	ldrh	r2, [r0, #4]
 800f41a:	4413      	add	r3, r2
 800f41c:	b21b      	sxth	r3, r3
 800f41e:	429c      	cmp	r4, r3
 800f420:	da10      	bge.n	800f444 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f422:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f426:	88c9      	ldrh	r1, [r1, #6]
 800f428:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f42c:	4419      	add	r1, r3
 800f42e:	b209      	sxth	r1, r1
 800f430:	428a      	cmp	r2, r1
 800f432:	da07      	bge.n	800f444 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f434:	88c0      	ldrh	r0, [r0, #6]
 800f436:	4410      	add	r0, r2
 800f438:	b200      	sxth	r0, r0
 800f43a:	4283      	cmp	r3, r0
 800f43c:	bfac      	ite	ge
 800f43e:	2000      	movge	r0, #0
 800f440:	2001      	movlt	r0, #1
 800f442:	bd10      	pop	{r4, pc}
 800f444:	2000      	movs	r0, #0
 800f446:	e7fc      	b.n	800f442 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800f448 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800f448:	b570      	push	{r4, r5, r6, lr}
 800f44a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f44e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f452:	42ac      	cmp	r4, r5
 800f454:	db18      	blt.n	800f488 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f456:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800f45a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f45e:	429a      	cmp	r2, r3
 800f460:	db12      	blt.n	800f488 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f462:	8886      	ldrh	r6, [r0, #4]
 800f464:	4435      	add	r5, r6
 800f466:	888e      	ldrh	r6, [r1, #4]
 800f468:	4434      	add	r4, r6
 800f46a:	b22d      	sxth	r5, r5
 800f46c:	b224      	sxth	r4, r4
 800f46e:	42a5      	cmp	r5, r4
 800f470:	db0a      	blt.n	800f488 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f472:	88c0      	ldrh	r0, [r0, #6]
 800f474:	4418      	add	r0, r3
 800f476:	88cb      	ldrh	r3, [r1, #6]
 800f478:	441a      	add	r2, r3
 800f47a:	b200      	sxth	r0, r0
 800f47c:	b212      	sxth	r2, r2
 800f47e:	4290      	cmp	r0, r2
 800f480:	bfb4      	ite	lt
 800f482:	2000      	movlt	r0, #0
 800f484:	2001      	movge	r0, #1
 800f486:	bd70      	pop	{r4, r5, r6, pc}
 800f488:	2000      	movs	r0, #0
 800f48a:	e7fc      	b.n	800f486 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800f48c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48e:	4604      	mov	r4, r0
 800f490:	4608      	mov	r0, r1
 800f492:	460d      	mov	r5, r1
 800f494:	f7fc f973 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f498:	b978      	cbnz	r0, 800f4ba <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800f49a:	4620      	mov	r0, r4
 800f49c:	f7fc f96f 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f4a0:	f9b5 6000 	ldrsh.w	r6, [r5]
 800f4a4:	b150      	cbz	r0, 800f4bc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800f4a6:	8026      	strh	r6, [r4, #0]
 800f4a8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800f4ac:	8063      	strh	r3, [r4, #2]
 800f4ae:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f4b2:	80a3      	strh	r3, [r4, #4]
 800f4b4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f4b8:	80e3      	strh	r3, [r4, #6]
 800f4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4bc:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f4c0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f4c4:	42b1      	cmp	r1, r6
 800f4c6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f4ca:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800f4ce:	460f      	mov	r7, r1
 800f4d0:	88ed      	ldrh	r5, [r5, #6]
 800f4d2:	bfa8      	it	ge
 800f4d4:	4637      	movge	r7, r6
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	4618      	mov	r0, r3
 800f4da:	4466      	add	r6, ip
 800f4dc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f4e0:	bfa8      	it	ge
 800f4e2:	4610      	movge	r0, r2
 800f4e4:	442a      	add	r2, r5
 800f4e6:	88e5      	ldrh	r5, [r4, #6]
 800f4e8:	4461      	add	r1, ip
 800f4ea:	b236      	sxth	r6, r6
 800f4ec:	8027      	strh	r7, [r4, #0]
 800f4ee:	442b      	add	r3, r5
 800f4f0:	b209      	sxth	r1, r1
 800f4f2:	b212      	sxth	r2, r2
 800f4f4:	8060      	strh	r0, [r4, #2]
 800f4f6:	b21b      	sxth	r3, r3
 800f4f8:	428e      	cmp	r6, r1
 800f4fa:	bfac      	ite	ge
 800f4fc:	ebc7 0106 	rsbge	r1, r7, r6
 800f500:	ebc7 0101 	rsblt	r1, r7, r1
 800f504:	429a      	cmp	r2, r3
 800f506:	bfac      	ite	ge
 800f508:	ebc0 0202 	rsbge	r2, r0, r2
 800f50c:	ebc0 0203 	rsblt	r2, r0, r3
 800f510:	80a1      	strh	r1, [r4, #4]
 800f512:	80e2      	strh	r2, [r4, #6]
 800f514:	e7d1      	b.n	800f4ba <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800f518 <_ZN8touchgfx11Application11getInstanceEv>:
 800f518:	4b01      	ldr	r3, [pc, #4]	; (800f520 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800f51a:	6818      	ldr	r0, [r3, #0]
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	24006c08 	.word	0x24006c08

0800f524 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800f524:	2300      	movs	r3, #0
 800f526:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800f52a:	30a8      	adds	r0, #168	; 0xa8
 800f52c:	f820 3c24 	strh.w	r3, [r0, #-36]
 800f530:	f802 3b01 	strb.w	r3, [r2], #1
 800f534:	4282      	cmp	r2, r0
 800f536:	d1fb      	bne.n	800f530 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800f538:	4770      	bx	lr

0800f53a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800f53a:	4603      	mov	r3, r0
 800f53c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800f540:	2200      	movs	r2, #0
 800f542:	801a      	strh	r2, [r3, #0]
 800f544:	3308      	adds	r3, #8
 800f546:	f823 2c06 	strh.w	r2, [r3, #-6]
 800f54a:	f823 2c04 	strh.w	r2, [r3, #-4]
 800f54e:	f823 2c02 	strh.w	r2, [r3, #-2]
 800f552:	428b      	cmp	r3, r1
 800f554:	d1f5      	bne.n	800f542 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800f556:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800f55a:	4770      	bx	lr

0800f55c <_ZN8touchgfx11ApplicationC1Ev>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	4b1a      	ldr	r3, [pc, #104]	; (800f5c8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800f560:	2500      	movs	r5, #0
 800f562:	4604      	mov	r4, r0
 800f564:	30a8      	adds	r0, #168	; 0xa8
 800f566:	f840 3ca8 	str.w	r3, [r0, #-168]
 800f56a:	f820 5c24 	strh.w	r5, [r0, #-36]
 800f56e:	f7ff ffe4 	bl	800f53a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f572:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800f576:	f7ff ffe0 	bl	800f53a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f57a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800f57e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800f582:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800f586:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800f58a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800f58e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 800f592:	490e      	ldr	r1, [pc, #56]	; (800f5cc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800f594:	480e      	ldr	r0, [pc, #56]	; (800f5d0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800f596:	f00b fb3f 	bl	801ac18 <CRC_Lock>
 800f59a:	4e0e      	ldr	r6, [pc, #56]	; (800f5d4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800f59c:	4b0e      	ldr	r3, [pc, #56]	; (800f5d8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800f59e:	b158      	cbz	r0, 800f5b8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 800f5a0:	801d      	strh	r5, [r3, #0]
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	4a0d      	ldr	r2, [pc, #52]	; (800f5dc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	6013      	str	r3, [r2, #0]
 800f5aa:	4a0d      	ldr	r2, [pc, #52]	; (800f5e0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800f5ac:	6033      	str	r3, [r6, #0]
 800f5ae:	6013      	str	r3, [r2, #0]
 800f5b0:	f7ff ffb8 	bl	800f524 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	bd70      	pop	{r4, r5, r6, pc}
 800f5b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5bc:	2002      	movs	r0, #2
 800f5be:	801a      	strh	r2, [r3, #0]
 800f5c0:	6030      	str	r0, [r6, #0]
 800f5c2:	f001 fa23 	bl	8010a0c <_ZN8touchgfx6Screen4drawEv>
 800f5c6:	e7ec      	b.n	800f5a2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 800f5c8:	0801e308 	.word	0x0801e308
 800f5cc:	b5e8b5cd 	.word	0xb5e8b5cd
 800f5d0:	f407a5c2 	.word	0xf407a5c2
 800f5d4:	24006bf8 	.word	0x24006bf8
 800f5d8:	24000064 	.word	0x24000064
 800f5dc:	24006c08 	.word	0x24006c08
 800f5e0:	24006bfc 	.word	0x24006bfc

0800f5e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800f5ea:	428b      	cmp	r3, r1
 800f5ec:	d806      	bhi.n	800f5fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 800f5ee:	4b0b      	ldr	r3, [pc, #44]	; (800f61c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 800f5f0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800f5f4:	4a0a      	ldr	r2, [pc, #40]	; (800f620 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 800f5f6:	480b      	ldr	r0, [pc, #44]	; (800f624 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 800f5f8:	f00b fd50 	bl	801b09c <__assert_func>
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	428b      	cmp	r3, r1
 800f602:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800f606:	d908      	bls.n	800f61a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 800f608:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f60c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800f616:	685a      	ldr	r2, [r3, #4]
 800f618:	6062      	str	r2, [r4, #4]
 800f61a:	bd10      	pop	{r4, pc}
 800f61c:	0801e29a 	.word	0x0801e29a
 800f620:	0801e388 	.word	0x0801e388
 800f624:	0801e2a8 	.word	0x0801e2a8

0800f628 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800f628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f62a:	466b      	mov	r3, sp
 800f62c:	4604      	mov	r4, r0
 800f62e:	e883 0006 	stmia.w	r3, {r1, r2}
 800f632:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800f636:	2a07      	cmp	r2, #7
 800f638:	d906      	bls.n	800f648 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800f63a:	4b09      	ldr	r3, [pc, #36]	; (800f660 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800f63c:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800f640:	4a08      	ldr	r2, [pc, #32]	; (800f664 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800f642:	4809      	ldr	r0, [pc, #36]	; (800f668 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800f644:	f00b fd2a 	bl	801b09c <__assert_func>
 800f648:	1c51      	adds	r1, r2, #1
 800f64a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800f64e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800f652:	cb03      	ldmia	r3!, {r0, r1}
 800f654:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800f658:	6069      	str	r1, [r5, #4]
 800f65a:	b003      	add	sp, #12
 800f65c:	bd30      	pop	{r4, r5, pc}
 800f65e:	bf00      	nop
 800f660:	0801e2d1 	.word	0x0801e2d1
 800f664:	0801e41e 	.word	0x0801e41e
 800f668:	0801e2a8 	.word	0x0801e2a8

0800f66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	b08d      	sub	sp, #52	; 0x34
 800f672:	4683      	mov	fp, r0
 800f674:	ac08      	add	r4, sp, #32
 800f676:	4620      	mov	r0, r4
 800f678:	e884 0006 	stmia.w	r4, {r1, r2}
 800f67c:	f7fc f87f 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f680:	2800      	cmp	r0, #0
 800f682:	d16a      	bne.n	800f75a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f684:	9402      	str	r4, [sp, #8]
 800f686:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800f68a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800f68e:	2400      	movs	r4, #0
 800f690:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	36a0      	adds	r6, #160	; 0xa0
 800f698:	42a5      	cmp	r5, r4
 800f69a:	d00d      	beq.n	800f6b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 800f69c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800f6a0:	9802      	ldr	r0, [sp, #8]
 800f6a2:	f7ff fed1 	bl	800f448 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f6a6:	b128      	cbz	r0, 800f6b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800f6a8:	1e69      	subs	r1, r5, #1
 800f6aa:	9801      	ldr	r0, [sp, #4]
 800f6ac:	1b09      	subs	r1, r1, r4
 800f6ae:	b289      	uxth	r1, r1
 800f6b0:	f7ff ff98 	bl	800f5e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f6b4:	3401      	adds	r4, #1
 800f6b6:	e7ef      	b.n	800f698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f6b8:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800f6bc:	1e7b      	subs	r3, r7, #1
 800f6be:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800f6c2:	9703      	str	r7, [sp, #12]
 800f6c4:	9300      	str	r3, [sp, #0]
 800f6c6:	2400      	movs	r4, #0
 800f6c8:	4655      	mov	r5, sl
 800f6ca:	9704      	str	r7, [sp, #16]
 800f6cc:	4626      	mov	r6, r4
 800f6ce:	9b04      	ldr	r3, [sp, #16]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d078      	beq.n	800f7c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 800f6d4:	9902      	ldr	r1, [sp, #8]
 800f6d6:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800f6da:	f7ff fe93 	bl	800f404 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f6de:	b360      	cbz	r0, 800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800f6e0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800f6e4:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800f6e8:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800f6ec:	45e6      	cmp	lr, ip
 800f6ee:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800f6f2:	db35      	blt.n	800f760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800f6f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f6f8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800f6fc:	4472      	add	r2, lr
 800f6fe:	4463      	add	r3, ip
 800f700:	b212      	sxth	r2, r2
 800f702:	b21b      	sxth	r3, r3
 800f704:	429a      	cmp	r2, r3
 800f706:	dc2b      	bgt.n	800f760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800f708:	fa1f f288 	uxth.w	r2, r8
 800f70c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800f710:	45c1      	cmp	r9, r8
 800f712:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f716:	4413      	add	r3, r2
 800f718:	fa1f fc89 	uxth.w	ip, r9
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	fa0f fe83 	sxth.w	lr, r3
 800f722:	db0f      	blt.n	800f744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 800f724:	eba3 030c 	sub.w	r3, r3, ip
 800f728:	1ac9      	subs	r1, r1, r3
 800f72a:	b209      	sxth	r1, r1
 800f72c:	2900      	cmp	r1, #0
 800f72e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800f732:	dd12      	ble.n	800f75a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f734:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800f738:	4604      	mov	r4, r0
 800f73a:	9b04      	ldr	r3, [sp, #16]
 800f73c:	3d08      	subs	r5, #8
 800f73e:	3b01      	subs	r3, #1
 800f740:	9304      	str	r3, [sp, #16]
 800f742:	e7c4      	b.n	800f6ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800f744:	4461      	add	r1, ip
 800f746:	b209      	sxth	r1, r1
 800f748:	4571      	cmp	r1, lr
 800f74a:	dc3a      	bgt.n	800f7c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f74c:	eba2 020c 	sub.w	r2, r2, ip
 800f750:	b212      	sxth	r2, r2
 800f752:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800f756:	2a00      	cmp	r2, #0
 800f758:	dcee      	bgt.n	800f738 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800f75a:	b00d      	add	sp, #52	; 0x34
 800f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f760:	45c1      	cmp	r9, r8
 800f762:	db2e      	blt.n	800f7c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f764:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f768:	4499      	add	r9, r3
 800f76a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800f76e:	4498      	add	r8, r3
 800f770:	fa0f f989 	sxth.w	r9, r9
 800f774:	fa0f f888 	sxth.w	r8, r8
 800f778:	45c1      	cmp	r9, r8
 800f77a:	dc22      	bgt.n	800f7c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f77c:	fa1f f28c 	uxth.w	r2, ip
 800f780:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800f784:	45e6      	cmp	lr, ip
 800f786:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800f78a:	4413      	add	r3, r2
 800f78c:	fa1f f88e 	uxth.w	r8, lr
 800f790:	b29b      	uxth	r3, r3
 800f792:	fa0f f983 	sxth.w	r9, r3
 800f796:	db0a      	blt.n	800f7ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 800f798:	eba3 0308 	sub.w	r3, r3, r8
 800f79c:	1ac9      	subs	r1, r1, r3
 800f79e:	b209      	sxth	r1, r1
 800f7a0:	2900      	cmp	r1, #0
 800f7a2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800f7a6:	ddd8      	ble.n	800f75a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f7a8:	f8ad 9020 	strh.w	r9, [sp, #32]
 800f7ac:	e7c4      	b.n	800f738 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800f7ae:	4441      	add	r1, r8
 800f7b0:	b209      	sxth	r1, r1
 800f7b2:	4549      	cmp	r1, r9
 800f7b4:	dc05      	bgt.n	800f7c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f7b6:	eba2 0208 	sub.w	r2, r2, r8
 800f7ba:	b212      	sxth	r2, r2
 800f7bc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800f7c0:	e7c9      	b.n	800f756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800f7c2:	4606      	mov	r6, r0
 800f7c4:	e7b9      	b.n	800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800f7c6:	2c00      	cmp	r4, #0
 800f7c8:	f47f af7d 	bne.w	800f6c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800f7cc:	2e00      	cmp	r6, #0
 800f7ce:	f000 81dc 	beq.w	800fb8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f7d2:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800f7d6:	4655      	mov	r5, sl
 800f7d8:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800f7dc:	b2b9      	uxth	r1, r7
 800f7de:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f7e2:	b2b3      	uxth	r3, r6
 800f7e4:	9104      	str	r1, [sp, #16]
 800f7e6:	9804      	ldr	r0, [sp, #16]
 800f7e8:	441a      	add	r2, r3
 800f7ea:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f7ee:	b292      	uxth	r2, r2
 800f7f0:	4401      	add	r1, r0
 800f7f2:	fa0f f882 	sxth.w	r8, r2
 800f7f6:	b289      	uxth	r1, r1
 800f7f8:	9105      	str	r1, [sp, #20]
 800f7fa:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800f7fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f802:	9b03      	ldr	r3, [sp, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d054      	beq.n	800f8b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800f808:	9902      	ldr	r1, [sp, #8]
 800f80a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800f80e:	f7ff fdf9 	bl	800f404 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f816:	b1d8      	cbz	r0, 800f850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f818:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800f81c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800f820:	4576      	cmp	r6, lr
 800f822:	dc26      	bgt.n	800f872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f824:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800f828:	44f4      	add	ip, lr
 800f82a:	fa0f fc8c 	sxth.w	ip, ip
 800f82e:	45e0      	cmp	r8, ip
 800f830:	db1f      	blt.n	800f872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f832:	428f      	cmp	r7, r1
 800f834:	fa1f fc81 	uxth.w	ip, r1
 800f838:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800f83c:	dc0f      	bgt.n	800f85e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800f83e:	9805      	ldr	r0, [sp, #20]
 800f840:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800f844:	eba0 0c0c 	sub.w	ip, r0, ip
 800f848:	eba1 010c 	sub.w	r1, r1, ip
 800f84c:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800f850:	4620      	mov	r0, r4
 800f852:	9903      	ldr	r1, [sp, #12]
 800f854:	3d08      	subs	r5, #8
 800f856:	4604      	mov	r4, r0
 800f858:	3901      	subs	r1, #1
 800f85a:	9103      	str	r1, [sp, #12]
 800f85c:	e7cf      	b.n	800f7fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 800f85e:	4461      	add	r1, ip
 800f860:	b209      	sxth	r1, r1
 800f862:	4549      	cmp	r1, r9
 800f864:	dcf5      	bgt.n	800f852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f866:	9904      	ldr	r1, [sp, #16]
 800f868:	eba1 0c0c 	sub.w	ip, r1, ip
 800f86c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800f870:	e7ee      	b.n	800f850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f872:	428f      	cmp	r7, r1
 800f874:	dced      	bgt.n	800f852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f876:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800f87a:	4461      	add	r1, ip
 800f87c:	b209      	sxth	r1, r1
 800f87e:	4589      	cmp	r9, r1
 800f880:	dbe7      	blt.n	800f852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f882:	4576      	cmp	r6, lr
 800f884:	fa1f fc8e 	uxth.w	ip, lr
 800f888:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800f88c:	dc08      	bgt.n	800f8a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 800f88e:	eba2 0c0c 	sub.w	ip, r2, ip
 800f892:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800f896:	eba1 010c 	sub.w	r1, r1, ip
 800f89a:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800f89e:	e7d7      	b.n	800f850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f8a0:	4461      	add	r1, ip
 800f8a2:	b209      	sxth	r1, r1
 800f8a4:	4588      	cmp	r8, r1
 800f8a6:	dbd4      	blt.n	800f852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f8a8:	eba3 0c0c 	sub.w	ip, r3, ip
 800f8ac:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800f8b0:	e7ce      	b.n	800f850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f8b2:	2c00      	cmp	r4, #0
 800f8b4:	f000 8169 	beq.w	800fb8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f8b8:	9b00      	ldr	r3, [sp, #0]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	f000 8165 	beq.w	800fb8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f8c0:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800f8c4:	9802      	ldr	r0, [sp, #8]
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	f7ff fdbe 	bl	800f448 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f8cc:	b120      	cbz	r0, 800f8d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 800f8ce:	f8bd 1000 	ldrh.w	r1, [sp]
 800f8d2:	9801      	ldr	r0, [sp, #4]
 800f8d4:	f7ff fe86 	bl	800f5e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f8d8:	9902      	ldr	r1, [sp, #8]
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7ff fd92 	bl	800f404 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	f000 809b 	beq.w	800fa1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 800f8e6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800f8ea:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800f8ee:	fa1f f288 	uxth.w	r2, r8
 800f8f2:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800f8f6:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800f8fa:	19d5      	adds	r5, r2, r7
 800f8fc:	b2a1      	uxth	r1, r4
 800f8fe:	45a0      	cmp	r8, r4
 800f900:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800f904:	fa1f f985 	uxth.w	r9, r5
 800f908:	440b      	add	r3, r1
 800f90a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800f90e:	fa0f f589 	sxth.w	r5, r9
 800f912:	b29b      	uxth	r3, r3
 800f914:	9503      	str	r5, [sp, #12]
 800f916:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800f91a:	9507      	str	r5, [sp, #28]
 800f91c:	f340 809d 	ble.w	800fa5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800f920:	1a52      	subs	r2, r2, r1
 800f922:	4584      	cmp	ip, r0
 800f924:	fa0f fe83 	sxth.w	lr, r3
 800f928:	b292      	uxth	r2, r2
 800f92a:	b215      	sxth	r5, r2
 800f92c:	dd2f      	ble.n	800f98e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800f92e:	9e00      	ldr	r6, [sp, #0]
 800f930:	fa1f fc8c 	uxth.w	ip, ip
 800f934:	b280      	uxth	r0, r0
 800f936:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f93a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800f93e:	9e03      	ldr	r6, [sp, #12]
 800f940:	ebac 0300 	sub.w	r3, ip, r0
 800f944:	448c      	add	ip, r1
 800f946:	eba6 060e 	sub.w	r6, r6, lr
 800f94a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800f94e:	b29b      	uxth	r3, r3
 800f950:	4470      	add	r0, lr
 800f952:	fa0f fc8c 	sxth.w	ip, ip
 800f956:	b21c      	sxth	r4, r3
 800f958:	b200      	sxth	r0, r0
 800f95a:	4366      	muls	r6, r4
 800f95c:	ebac 0000 	sub.w	r0, ip, r0
 800f960:	4368      	muls	r0, r5
 800f962:	4286      	cmp	r6, r0
 800f964:	db09      	blt.n	800f97a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 800f966:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800f96a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800f96e:	4417      	add	r7, r2
 800f970:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f974:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800f978:	e685      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f97a:	440b      	add	r3, r1
 800f97c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800f980:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f984:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800f988:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f98c:	e67b      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f98e:	9e03      	ldr	r6, [sp, #12]
 800f990:	45b6      	cmp	lr, r6
 800f992:	da28      	bge.n	800f9e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 800f994:	9b00      	ldr	r3, [sp, #0]
 800f996:	eba6 060e 	sub.w	r6, r6, lr
 800f99a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800f99e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800f9a2:	eb04 030c 	add.w	r3, r4, ip
 800f9a6:	fa1f f883 	uxth.w	r8, r3
 800f9aa:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800f9ae:	4403      	add	r3, r0
 800f9b0:	fa0f f988 	sxth.w	r9, r8
 800f9b4:	eba0 000c 	sub.w	r0, r0, ip
 800f9b8:	eba3 0308 	sub.w	r3, r3, r8
 800f9bc:	4368      	muls	r0, r5
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	fa0f f883 	sxth.w	r8, r3
 800f9c4:	fb08 f606 	mul.w	r6, r8, r6
 800f9c8:	42b0      	cmp	r0, r6
 800f9ca:	dc06      	bgt.n	800f9da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 800f9cc:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800f9d0:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800f9d4:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800f9d8:	e7c9      	b.n	800f96e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 800f9da:	4423      	add	r3, r4
 800f9dc:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800f9e0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f9e4:	e64f      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f9e6:	eba3 0309 	sub.w	r3, r3, r9
 800f9ea:	9807      	ldr	r0, [sp, #28]
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	2806      	cmp	r0, #6
 800f9f0:	fa0f fc83 	sxth.w	ip, r3
 800f9f4:	d818      	bhi.n	800fa28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 800f9f6:	4652      	mov	r2, sl
 800f9f8:	ab0a      	add	r3, sp, #40	; 0x28
 800f9fa:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800f9fe:	6851      	ldr	r1, [r2, #4]
 800fa00:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800fa04:	c303      	stmia	r3!, {r0, r1}
 800fa06:	9b03      	ldr	r3, [sp, #12]
 800fa08:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800fa0c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800fa10:	ab0a      	add	r3, sp, #40	; 0x28
 800fa12:	9801      	ldr	r0, [sp, #4]
 800fa14:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fa18:	f7ff fe06 	bl	800f628 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fa1c:	9b00      	ldr	r3, [sp, #0]
 800fa1e:	f1aa 0a08 	sub.w	sl, sl, #8
 800fa22:	3b01      	subs	r3, #1
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	e747      	b.n	800f8b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800fa28:	9800      	ldr	r0, [sp, #0]
 800fa2a:	45ac      	cmp	ip, r5
 800fa2c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800fa30:	db0c      	blt.n	800fa4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 800fa32:	4417      	add	r7, r2
 800fa34:	4458      	add	r0, fp
 800fa36:	f8ad 4020 	strh.w	r4, [sp, #32]
 800fa3a:	b2bf      	uxth	r7, r7
 800fa3c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800fa40:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800fa44:	440f      	add	r7, r1
 800fa46:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800fa4a:	e61c      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fa4c:	4458      	add	r0, fp
 800fa4e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800fa52:	443b      	add	r3, r7
 800fa54:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800fa58:	e615      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fa5a:	fa1f f18c 	uxth.w	r1, ip
 800fa5e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800fa62:	b282      	uxth	r2, r0
 800fa64:	4584      	cmp	ip, r0
 800fa66:	eb01 0e05 	add.w	lr, r1, r5
 800fa6a:	9204      	str	r2, [sp, #16]
 800fa6c:	fa1f fe8e 	uxth.w	lr, lr
 800fa70:	9e04      	ldr	r6, [sp, #16]
 800fa72:	fa0f f28e 	sxth.w	r2, lr
 800fa76:	9205      	str	r2, [sp, #20]
 800fa78:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800fa7c:	4432      	add	r2, r6
 800fa7e:	b292      	uxth	r2, r2
 800fa80:	9206      	str	r2, [sp, #24]
 800fa82:	da26      	bge.n	800fad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800fa84:	eba3 0309 	sub.w	r3, r3, r9
 800fa88:	eba2 020e 	sub.w	r2, r2, lr
 800fa8c:	eba0 000c 	sub.w	r0, r0, ip
 800fa90:	eba4 0408 	sub.w	r4, r4, r8
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	b292      	uxth	r2, r2
 800fa98:	fa0f fa83 	sxth.w	sl, r3
 800fa9c:	b211      	sxth	r1, r2
 800fa9e:	fb0a f000 	mul.w	r0, sl, r0
 800faa2:	434c      	muls	r4, r1
 800faa4:	42a0      	cmp	r0, r4
 800faa6:	9800      	ldr	r0, [sp, #0]
 800faa8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800faac:	dc06      	bgt.n	800fabc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 800faae:	4458      	add	r0, fp
 800fab0:	9a05      	ldr	r2, [sp, #20]
 800fab2:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800fab6:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800faba:	e7ca      	b.n	800fa52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800fabc:	eb0b 0300 	add.w	r3, fp, r0
 800fac0:	9903      	ldr	r1, [sp, #12]
 800fac2:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800fac6:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800faca:	442a      	add	r2, r5
 800facc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800fad0:	e5d9      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fad2:	9e04      	ldr	r6, [sp, #16]
 800fad4:	9a03      	ldr	r2, [sp, #12]
 800fad6:	1b89      	subs	r1, r1, r6
 800fad8:	b21e      	sxth	r6, r3
 800fada:	b289      	uxth	r1, r1
 800fadc:	4296      	cmp	r6, r2
 800fade:	fa0f fc81 	sxth.w	ip, r1
 800fae2:	dd25      	ble.n	800fb30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 800fae4:	eba3 0309 	sub.w	r3, r3, r9
 800fae8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800faec:	9e05      	ldr	r6, [sp, #20]
 800faee:	eba4 0408 	sub.w	r4, r4, r8
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	eba6 0902 	sub.w	r9, r6, r2
 800faf8:	fb0c f404 	mul.w	r4, ip, r4
 800fafc:	b218      	sxth	r0, r3
 800fafe:	9a00      	ldr	r2, [sp, #0]
 800fb00:	fb00 f909 	mul.w	r9, r0, r9
 800fb04:	00d2      	lsls	r2, r2, #3
 800fb06:	454c      	cmp	r4, r9
 800fb08:	db03      	blt.n	800fb12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 800fb0a:	445a      	add	r2, fp
 800fb0c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800fb10:	e79f      	b.n	800fa52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800fb12:	eb0b 0302 	add.w	r3, fp, r2
 800fb16:	9a03      	ldr	r2, [sp, #12]
 800fb18:	4429      	add	r1, r5
 800fb1a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800fb1e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800fb22:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800fb26:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800fb2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fb2e:	e5aa      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fb30:	9b06      	ldr	r3, [sp, #24]
 800fb32:	9c07      	ldr	r4, [sp, #28]
 800fb34:	eba3 020e 	sub.w	r2, r3, lr
 800fb38:	2c06      	cmp	r4, #6
 800fb3a:	b292      	uxth	r2, r2
 800fb3c:	b213      	sxth	r3, r2
 800fb3e:	d80d      	bhi.n	800fb5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 800fb40:	4651      	mov	r1, sl
 800fb42:	aa0a      	add	r2, sp, #40	; 0x28
 800fb44:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800fb48:	6849      	ldr	r1, [r1, #4]
 800fb4a:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800fb4e:	9b05      	ldr	r3, [sp, #20]
 800fb50:	c203      	stmia	r2!, {r0, r1}
 800fb52:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800fb56:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800fb5a:	e759      	b.n	800fa10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 800fb5c:	9c00      	ldr	r4, [sp, #0]
 800fb5e:	4563      	cmp	r3, ip
 800fb60:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800fb64:	db0d      	blt.n	800fb82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 800fb66:	4429      	add	r1, r5
 800fb68:	9a04      	ldr	r2, [sp, #16]
 800fb6a:	445c      	add	r4, fp
 800fb6c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800fb70:	b289      	uxth	r1, r1
 800fb72:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800fb76:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800fb7a:	4411      	add	r1, r2
 800fb7c:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800fb80:	e581      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fb82:	445c      	add	r4, fp
 800fb84:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800fb88:	e79f      	b.n	800faca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 800fb8a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800fb8e:	2f07      	cmp	r7, #7
 800fb90:	d806      	bhi.n	800fba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800fb92:	ab08      	add	r3, sp, #32
 800fb94:	9801      	ldr	r0, [sp, #4]
 800fb96:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fb9a:	f7ff fd45 	bl	800f628 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fb9e:	e5dc      	b.n	800f75a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800fba0:	f107 39ff 	add.w	r9, r7, #4294967295
 800fba4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800fba8:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800fbac:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800fbb0:	f04f 35ff 	mov.w	r5, #4294967295
 800fbb4:	2400      	movs	r4, #0
 800fbb6:	9304      	str	r3, [sp, #16]
 800fbb8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800fbbc:	f109 32ff 	add.w	r2, r9, #4294967295
 800fbc0:	9300      	str	r3, [sp, #0]
 800fbc2:	4690      	mov	r8, r2
 800fbc4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800fbc8:	9303      	str	r3, [sp, #12]
 800fbca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800fbce:	f1b8 3fff 	cmp.w	r8, #4294967295
 800fbd2:	6818      	ldr	r0, [r3, #0]
 800fbd4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fbd8:	9206      	str	r2, [sp, #24]
 800fbda:	bf16      	itet	ne
 800fbdc:	9904      	ldrne	r1, [sp, #16]
 800fbde:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800fbe2:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800fbe6:	9305      	str	r3, [sp, #20]
 800fbe8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800fbec:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800fbf0:	fb16 f601 	smulbb	r6, r6, r1
 800fbf4:	6859      	ldr	r1, [r3, #4]
 800fbf6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800fbfa:	4671      	mov	r1, lr
 800fbfc:	a80a      	add	r0, sp, #40	; 0x28
 800fbfe:	f7ff fc45 	bl	800f48c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fc02:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800fc06:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800fc0a:	9b03      	ldr	r3, [sp, #12]
 800fc0c:	9a00      	ldr	r2, [sp, #0]
 800fc0e:	fb11 f100 	smulbb	r1, r1, r0
 800fc12:	2008      	movs	r0, #8
 800fc14:	fb02 6603 	mla	r6, r2, r3, r6
 800fc18:	1b8e      	subs	r6, r1, r6
 800fc1a:	fb91 f1f0 	sdiv	r1, r1, r0
 800fc1e:	42b1      	cmp	r1, r6
 800fc20:	dc21      	bgt.n	800fc66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800fc22:	4556      	cmp	r6, sl
 800fc24:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800fc28:	da03      	bge.n	800fc32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 800fc2a:	b1e6      	cbz	r6, 800fc66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800fc2c:	46b2      	mov	sl, r6
 800fc2e:	4645      	mov	r5, r8
 800fc30:	464c      	mov	r4, r9
 800fc32:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc36:	f118 0f02 	cmn.w	r8, #2
 800fc3a:	d1c8      	bne.n	800fbce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 800fc3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fc40:	f1a7 0708 	sub.w	r7, r7, #8
 800fc44:	4691      	mov	r9, r2
 800fc46:	d1b7      	bne.n	800fbb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800fc48:	9b01      	ldr	r3, [sp, #4]
 800fc4a:	b2a6      	uxth	r6, r4
 800fc4c:	00e4      	lsls	r4, r4, #3
 800fc4e:	1918      	adds	r0, r3, r4
 800fc50:	1c6b      	adds	r3, r5, #1
 800fc52:	d10b      	bne.n	800fc6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 800fc54:	4601      	mov	r1, r0
 800fc56:	9802      	ldr	r0, [sp, #8]
 800fc58:	f7ff fc18 	bl	800f48c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fc5c:	4631      	mov	r1, r6
 800fc5e:	9801      	ldr	r0, [sp, #4]
 800fc60:	f7ff fcc0 	bl	800f5e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fc64:	e50f      	b.n	800f686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fc66:	4645      	mov	r5, r8
 800fc68:	464c      	mov	r4, r9
 800fc6a:	e7ed      	b.n	800fc48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 800fc6c:	9b01      	ldr	r3, [sp, #4]
 800fc6e:	00ed      	lsls	r5, r5, #3
 800fc70:	445c      	add	r4, fp
 800fc72:	1959      	adds	r1, r3, r5
 800fc74:	445d      	add	r5, fp
 800fc76:	f7ff fc09 	bl	800f48c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fc7a:	9b02      	ldr	r3, [sp, #8]
 800fc7c:	cb03      	ldmia	r3!, {r0, r1}
 800fc7e:	9b02      	ldr	r3, [sp, #8]
 800fc80:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800fc84:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800fc88:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800fc8c:	6861      	ldr	r1, [r4, #4]
 800fc8e:	c303      	stmia	r3!, {r0, r1}
 800fc90:	e7e4      	b.n	800fc5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0800fc94 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800fc94:	4b1d      	ldr	r3, [pc, #116]	; (800fd0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800fc96:	b530      	push	{r4, r5, lr}
 800fc98:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fc9c:	b085      	sub	sp, #20
 800fc9e:	4b1c      	ldr	r3, [pc, #112]	; (800fd10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800fca0:	460c      	mov	r4, r1
 800fca2:	2100      	movs	r1, #0
 800fca4:	4605      	mov	r5, r0
 800fca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcaa:	6820      	ldr	r0, [r4, #0]
 800fcac:	9100      	str	r1, [sp, #0]
 800fcae:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fcb2:	ab02      	add	r3, sp, #8
 800fcb4:	6861      	ldr	r1, [r4, #4]
 800fcb6:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fcba:	c303      	stmia	r3!, {r0, r1}
 800fcbc:	4669      	mov	r1, sp
 800fcbe:	a802      	add	r0, sp, #8
 800fcc0:	f7fb fd1a 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800fcc4:	ab02      	add	r3, sp, #8
 800fcc6:	cb03      	ldmia	r3!, {r0, r1}
 800fcc8:	4b12      	ldr	r3, [pc, #72]	; (800fd14 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800fcca:	6020      	str	r0, [r4, #0]
 800fccc:	6818      	ldr	r0, [r3, #0]
 800fcce:	6061      	str	r1, [r4, #4]
 800fcd0:	b138      	cbz	r0, 800fce2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800fcd2:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 800fcd6:	b133      	cbz	r3, 800fce6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800fcd8:	6821      	ldr	r1, [r4, #0]
 800fcda:	4628      	mov	r0, r5
 800fcdc:	6862      	ldr	r2, [r4, #4]
 800fcde:	f7ff fcc5 	bl	800f66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fce2:	b005      	add	sp, #20
 800fce4:	bd30      	pop	{r4, r5, pc}
 800fce6:	6803      	ldr	r3, [r0, #0]
 800fce8:	4621      	mov	r1, r4
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	4798      	blx	r3
 800fcee:	4b0a      	ldr	r3, [pc, #40]	; (800fd18 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800fcf0:	6818      	ldr	r0, [r3, #0]
 800fcf2:	b118      	cbz	r0, 800fcfc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800fcf4:	6803      	ldr	r3, [r0, #0]
 800fcf6:	4621      	mov	r1, r4
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	4798      	blx	r3
 800fcfc:	4b07      	ldr	r3, [pc, #28]	; (800fd1c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800fcfe:	4621      	mov	r1, r4
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	6803      	ldr	r3, [r0, #0]
 800fd04:	69db      	ldr	r3, [r3, #28]
 800fd06:	4798      	blx	r3
 800fd08:	e7eb      	b.n	800fce2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800fd0a:	bf00      	nop
 800fd0c:	24006bb0 	.word	0x24006bb0
 800fd10:	24006bb2 	.word	0x24006bb2
 800fd14:	24006bf8 	.word	0x24006bf8
 800fd18:	24006bf4 	.word	0x24006bf4
 800fd1c:	24006bbc 	.word	0x24006bbc

0800fd20 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800fd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd24:	4604      	mov	r4, r0
 800fd26:	b09b      	sub	sp, #108	; 0x6c
 800fd28:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 800fd2c:	b129      	cbz	r1, 800fd3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800fd34:	b01b      	add	sp, #108	; 0x6c
 800fd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f7fb fd1d 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd44:	4605      	mov	r5, r0
 800fd46:	b940      	cbnz	r0, 800fd5a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 800fd48:	4620      	mov	r0, r4
 800fd4a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800fd4e:	f7ff fc8d 	bl	800f66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fd52:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800fd56:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800fd5a:	4ba6      	ldr	r3, [pc, #664]	; (800fff4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	b33b      	cbz	r3, 800fdb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800fd60:	4da5      	ldr	r5, [pc, #660]	; (800fff8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800fd62:	4628      	mov	r0, r5
 800fd64:	f7fb fd0b 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd68:	4606      	mov	r6, r0
 800fd6a:	bb08      	cbnz	r0, 800fdb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f7ff f9d3 	bl	800f118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fd72:	6829      	ldr	r1, [r5, #0]
 800fd74:	686a      	ldr	r2, [r5, #4]
 800fd76:	4620      	mov	r0, r4
 800fd78:	f7ff fc78 	bl	800f66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fd7c:	802e      	strh	r6, [r5, #0]
 800fd7e:	806e      	strh	r6, [r5, #2]
 800fd80:	80ae      	strh	r6, [r5, #4]
 800fd82:	80ee      	strh	r6, [r5, #6]
 800fd84:	4f9d      	ldr	r7, [pc, #628]	; (800fffc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800fd86:	a809      	add	r0, sp, #36	; 0x24
 800fd88:	f7ff fbd7 	bl	800f53a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800fd8c:	883d      	ldrh	r5, [r7, #0]
 800fd8e:	462e      	mov	r6, r5
 800fd90:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fd94:	42b3      	cmp	r3, r6
 800fd96:	d910      	bls.n	800fdba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 800fd98:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800fd9c:	3601      	adds	r6, #1
 800fd9e:	a809      	add	r0, sp, #36	; 0x24
 800fda0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800fda4:	b2b6      	uxth	r6, r6
 800fda6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800fdaa:	f7ff fc3d 	bl	800f628 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fdae:	e7ef      	b.n	800fd90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800fdb0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1e5      	bne.n	800fd84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 800fdb8:	e7bc      	b.n	800fd34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fdba:	462e      	mov	r6, r5
 800fdbc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800fdc0:	42b3      	cmp	r3, r6
 800fdc2:	d90b      	bls.n	800fddc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 800fdc4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800fdc8:	3601      	adds	r6, #1
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800fdd0:	b2b6      	uxth	r6, r6
 800fdd2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800fdd6:	f7ff fc49 	bl	800f66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fdda:	e7ef      	b.n	800fdbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800fddc:	4a88      	ldr	r2, [pc, #544]	; (8010000 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800fdde:	6813      	ldr	r3, [r2, #0]
 800fde0:	4690      	mov	r8, r2
 800fde2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	f040 8094 	bne.w	800ff14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 800fdec:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800fdf0:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800fdf4:	f04f 0900 	mov.w	r9, #0
 800fdf8:	33aa      	adds	r3, #170	; 0xaa
 800fdfa:	42a8      	cmp	r0, r5
 800fdfc:	f103 0308 	add.w	r3, r3, #8
 800fe00:	dd0a      	ble.n	800fe18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 800fe02:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800fe06:	3501      	adds	r5, #1
 800fe08:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800fe0c:	440a      	add	r2, r1
 800fe0e:	b212      	sxth	r2, r2
 800fe10:	4591      	cmp	r9, r2
 800fe12:	bfb8      	it	lt
 800fe14:	4691      	movlt	r9, r2
 800fe16:	e7f0      	b.n	800fdfa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 800fe18:	4b7a      	ldr	r3, [pc, #488]	; (8010004 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800fe1a:	4e7b      	ldr	r6, [pc, #492]	; (8010008 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800fe1c:	881d      	ldrh	r5, [r3, #0]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	2d0f      	cmp	r5, #15
 800fe22:	bf8c      	ite	hi
 800fe24:	08ed      	lsrhi	r5, r5, #3
 800fe26:	2501      	movls	r5, #1
 800fe28:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fe2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fe30:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800fe34:	f8d8 0000 	ldr.w	r0, [r8]
 800fe38:	440b      	add	r3, r1
 800fe3a:	6802      	ldr	r2, [r0, #0]
 800fe3c:	b21b      	sxth	r3, r3
 800fe3e:	4599      	cmp	r9, r3
 800fe40:	dd4b      	ble.n	800feda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 800fe42:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800fe46:	4798      	blx	r3
 800fe48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800fe4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fe50:	4413      	add	r3, r2
 800fe52:	b21b      	sxth	r3, r3
 800fe54:	195a      	adds	r2, r3, r5
 800fe56:	4290      	cmp	r0, r2
 800fe58:	da07      	bge.n	800fe6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800fe5a:	4581      	cmp	r9, r0
 800fe5c:	dd05      	ble.n	800fe6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800fe5e:	4298      	cmp	r0, r3
 800fe60:	da33      	bge.n	800feca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	dd31      	ble.n	800feca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800fe66:	4648      	mov	r0, r9
 800fe68:	e004      	b.n	800fe74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 800fe6a:	4298      	cmp	r0, r3
 800fe6c:	dbfb      	blt.n	800fe66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 800fe6e:	4548      	cmp	r0, r9
 800fe70:	bfa8      	it	ge
 800fe72:	4648      	movge	r0, r9
 800fe74:	f9b6 2000 	ldrsh.w	r2, [r6]
 800fe78:	2100      	movs	r1, #0
 800fe7a:	1ac0      	subs	r0, r0, r3
 800fe7c:	f8b7 a000 	ldrh.w	sl, [r7]
 800fe80:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fe84:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe88:	f8ad 2018 	strh.w	r2, [sp, #24]
 800fe8c:	f8ad 001a 	strh.w	r0, [sp, #26]
 800fe90:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fe94:	4553      	cmp	r3, sl
 800fe96:	d9c9      	bls.n	800fe2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800fe98:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800fe9c:	ab07      	add	r3, sp, #28
 800fe9e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800fea2:	6851      	ldr	r1, [r2, #4]
 800fea4:	c303      	stmia	r3!, {r0, r1}
 800fea6:	a807      	add	r0, sp, #28
 800fea8:	a905      	add	r1, sp, #20
 800feaa:	f7fb fc25 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 800feae:	a807      	add	r0, sp, #28
 800feb0:	f7fb fc65 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 800feb4:	b920      	cbnz	r0, 800fec0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	a907      	add	r1, sp, #28
 800feba:	4620      	mov	r0, r4
 800febc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800febe:	4798      	blx	r3
 800fec0:	f10a 0a01 	add.w	sl, sl, #1
 800fec4:	fa1f fa8a 	uxth.w	sl, sl
 800fec8:	e7e2      	b.n	800fe90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 800feca:	f8d8 0000 	ldr.w	r0, [r8]
 800fece:	2101      	movs	r1, #1
 800fed0:	6803      	ldr	r3, [r0, #0]
 800fed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fed6:	4798      	blx	r3
 800fed8:	e7a8      	b.n	800fe2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800feda:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fedc:	4798      	blx	r3
 800fede:	4b4b      	ldr	r3, [pc, #300]	; (801000c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f43f af26 	beq.w	800fd34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fee8:	2300      	movs	r3, #0
 800feea:	883d      	ldrh	r5, [r7, #0]
 800feec:	34ea      	adds	r4, #234	; 0xea
 800feee:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800fef2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800fef6:	42ab      	cmp	r3, r5
 800fef8:	f67f af1c 	bls.w	800fd34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fefc:	ab1a      	add	r3, sp, #104	; 0x68
 800fefe:	4620      	mov	r0, r4
 800ff00:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ff04:	3501      	adds	r5, #1
 800ff06:	3b44      	subs	r3, #68	; 0x44
 800ff08:	b2ad      	uxth	r5, r5
 800ff0a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ff0e:	f7ff fb8b 	bl	800f628 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800ff12:	e7ee      	b.n	800fef2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 800ff14:	2b02      	cmp	r3, #2
 800ff16:	f040 813d 	bne.w	8010194 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 800ff1a:	4b3d      	ldr	r3, [pc, #244]	; (8010010 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d02c      	beq.n	800ff7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 800ff22:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 800ff26:	883a      	ldrh	r2, [r7, #0]
 800ff28:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800ff2c:	3201      	adds	r2, #1
 800ff2e:	b292      	uxth	r2, r2
 800ff30:	2900      	cmp	r1, #0
 800ff32:	d0d4      	beq.n	800fede <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800ff34:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800ff38:	4610      	mov	r0, r2
 800ff3a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800ff3e:	f04f 0a00 	mov.w	sl, #0
 800ff42:	441d      	add	r5, r3
 800ff44:	b22d      	sxth	r5, r5
 800ff46:	b283      	uxth	r3, r0
 800ff48:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 800ff4c:	4299      	cmp	r1, r3
 800ff4e:	f240 80c3 	bls.w	80100d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 800ff52:	4426      	add	r6, r4
 800ff54:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 800ff58:	4684      	mov	ip, r0
 800ff5a:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 800ff5e:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 800ff62:	4573      	cmp	r3, lr
 800ff64:	f340 80a5 	ble.w	80100b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 800ff68:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 800ff6c:	4475      	add	r5, lr
 800ff6e:	b22d      	sxth	r5, r5
 800ff70:	429d      	cmp	r5, r3
 800ff72:	bfa8      	it	ge
 800ff74:	461d      	movge	r5, r3
 800ff76:	3001      	adds	r0, #1
 800ff78:	46e2      	mov	sl, ip
 800ff7a:	e7e4      	b.n	800ff46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 800ff7c:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800ff80:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800ff84:	f1bb 0f00 	cmp.w	fp, #0
 800ff88:	d0a9      	beq.n	800fede <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800ff8a:	883b      	ldrh	r3, [r7, #0]
 800ff8c:	2600      	movs	r6, #0
 800ff8e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800ff92:	3301      	adds	r3, #1
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	b299      	uxth	r1, r3
 800ff98:	00f5      	lsls	r5, r6, #3
 800ff9a:	458b      	cmp	fp, r1
 800ff9c:	d93a      	bls.n	8010014 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 800ff9e:	4425      	add	r5, r4
 800ffa0:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800ffa4:	469c      	mov	ip, r3
 800ffa6:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800ffaa:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800ffae:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800ffb2:	4408      	add	r0, r1
 800ffb4:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800ffb8:	4471      	add	r1, lr
 800ffba:	b200      	sxth	r0, r0
 800ffbc:	b209      	sxth	r1, r1
 800ffbe:	4288      	cmp	r0, r1
 800ffc0:	da06      	bge.n	800ffd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 800ffc2:	4586      	cmp	lr, r0
 800ffc4:	4672      	mov	r2, lr
 800ffc6:	bfb8      	it	lt
 800ffc8:	4602      	movlt	r2, r0
 800ffca:	3301      	adds	r3, #1
 800ffcc:	4666      	mov	r6, ip
 800ffce:	e7e2      	b.n	800ff96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 800ffd0:	d10b      	bne.n	800ffea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 800ffd2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800ffd6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800ffda:	458c      	cmp	ip, r1
 800ffdc:	bfb4      	ite	lt
 800ffde:	469c      	movlt	ip, r3
 800ffe0:	46b4      	movge	ip, r6
 800ffe2:	4572      	cmp	r2, lr
 800ffe4:	bfb8      	it	lt
 800ffe6:	4672      	movlt	r2, lr
 800ffe8:	e7ef      	b.n	800ffca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800ffea:	428a      	cmp	r2, r1
 800ffec:	46b4      	mov	ip, r6
 800ffee:	bfb8      	it	lt
 800fff0:	460a      	movlt	r2, r1
 800fff2:	e7ea      	b.n	800ffca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800fff4:	24006bf4 	.word	0x24006bf4
 800fff8:	24006c00 	.word	0x24006c00
 800fffc:	24000064 	.word	0x24000064
 8010000:	24006bbc 	.word	0x24006bbc
 8010004:	24006bb2 	.word	0x24006bb2
 8010008:	24006bb0 	.word	0x24006bb0
 801000c:	24006bba 	.word	0x24006bba
 8010010:	24006bb4 	.word	0x24006bb4
 8010014:	1961      	adds	r1, r4, r5
 8010016:	ab07      	add	r3, sp, #28
 8010018:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801001c:	6849      	ldr	r1, [r1, #4]
 801001e:	c303      	stmia	r3!, {r0, r1}
 8010020:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010024:	a807      	add	r0, sp, #28
 8010026:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801002a:	2b13      	cmp	r3, #19
 801002c:	440b      	add	r3, r1
 801002e:	bfd8      	it	le
 8010030:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8010034:	1a9b      	subs	r3, r3, r2
 8010036:	f8ad 201c 	strh.w	r2, [sp, #28]
 801003a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801003e:	f7ff f885 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010042:	a807      	add	r0, sp, #28
 8010044:	f7fb fb9b 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010048:	2800      	cmp	r0, #0
 801004a:	d199      	bne.n	800ff80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801004c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010050:	4425      	add	r5, r4
 8010052:	f8d8 0000 	ldr.w	r0, [r8]
 8010056:	f1bc 0f14 	cmp.w	ip, #20
 801005a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801005e:	f8d0 e000 	ldr.w	lr, [r0]
 8010062:	bfa8      	it	ge
 8010064:	f04f 0c14 	movge.w	ip, #20
 8010068:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801006c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010070:	fa1f fc8c 	uxth.w	ip, ip
 8010074:	f8cd c000 	str.w	ip, [sp]
 8010078:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801007c:	47d0      	blx	sl
 801007e:	4682      	mov	sl, r0
 8010080:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010084:	a807      	add	r0, sp, #28
 8010086:	f7ff f847 	bl	800f118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801008a:	6823      	ldr	r3, [r4, #0]
 801008c:	4620      	mov	r0, r4
 801008e:	a907      	add	r1, sp, #28
 8010090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010092:	4798      	blx	r3
 8010094:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8010098:	eba0 000a 	sub.w	r0, r0, sl
 801009c:	b200      	sxth	r0, r0
 801009e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80100a2:	2800      	cmp	r0, #0
 80100a4:	f47f af6c 	bne.w	800ff80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80100a8:	b2b1      	uxth	r1, r6
 80100aa:	4648      	mov	r0, r9
 80100ac:	f7ff fa9a 	bl	800f5e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80100b0:	e766      	b.n	800ff80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80100b2:	d10c      	bne.n	80100ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 80100b4:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 80100b8:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 80100bc:	45b4      	cmp	ip, r6
 80100be:	bfb4      	ite	lt
 80100c0:	4684      	movlt	ip, r0
 80100c2:	46d4      	movge	ip, sl
 80100c4:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 80100c8:	4433      	add	r3, r6
 80100ca:	b21b      	sxth	r3, r3
 80100cc:	e750      	b.n	800ff70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 80100ce:	4575      	cmp	r5, lr
 80100d0:	46d4      	mov	ip, sl
 80100d2:	bfa8      	it	ge
 80100d4:	4675      	movge	r5, lr
 80100d6:	e74e      	b.n	800ff76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 80100d8:	eb0b 0006 	add.w	r0, fp, r6
 80100dc:	4426      	add	r6, r4
 80100de:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 80100e2:	f1b9 0f13 	cmp.w	r9, #19
 80100e6:	bfdc      	itt	le
 80100e8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 80100ec:	444d      	addle	r5, r9
 80100ee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80100f2:	bfd8      	it	le
 80100f4:	b22d      	sxthle	r5, r5
 80100f6:	f7fb fb42 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 80100fa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80100fe:	2800      	cmp	r0, #0
 8010100:	f47f af16 	bne.w	800ff30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8010104:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8010108:	fa1f f989 	uxth.w	r9, r9
 801010c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010110:	eba5 050c 	sub.w	r5, r5, ip
 8010114:	fa1f f28c 	uxth.w	r2, ip
 8010118:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801011c:	eb02 0009 	add.w	r0, r2, r9
 8010120:	2d14      	cmp	r5, #20
 8010122:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8010126:	bfa8      	it	ge
 8010128:	2514      	movge	r5, #20
 801012a:	b200      	sxth	r0, r0
 801012c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010130:	b289      	uxth	r1, r1
 8010132:	fa1f fe85 	uxth.w	lr, r5
 8010136:	eba0 000c 	sub.w	r0, r0, ip
 801013a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801013e:	4586      	cmp	lr, r0
 8010140:	f8d8 0000 	ldr.w	r0, [r8]
 8010144:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010148:	b29b      	uxth	r3, r3
 801014a:	bfb8      	it	lt
 801014c:	46f1      	movlt	r9, lr
 801014e:	6805      	ldr	r5, [r0, #0]
 8010150:	f8cd 9000 	str.w	r9, [sp]
 8010154:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8010158:	47a8      	blx	r5
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010160:	a907      	add	r1, sp, #28
 8010162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010164:	4620      	mov	r0, r4
 8010166:	4798      	blx	r3
 8010168:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801016c:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8010170:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8010174:	1a5b      	subs	r3, r3, r1
 8010176:	440a      	add	r2, r1
 8010178:	b21b      	sxth	r3, r3
 801017a:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801017e:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8010182:	2b00      	cmp	r3, #0
 8010184:	f47f aecf 	bne.w	800ff26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8010188:	fa1f f18a 	uxth.w	r1, sl
 801018c:	4658      	mov	r0, fp
 801018e:	f7ff fa29 	bl	800f5e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010192:	e6c8      	b.n	800ff26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8010194:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010198:	42ab      	cmp	r3, r5
 801019a:	f67f aea0 	bls.w	800fede <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801019e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80101a2:	ab07      	add	r3, sp, #28
 80101a4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80101a8:	6851      	ldr	r1, [r2, #4]
 80101aa:	c303      	stmia	r3!, {r0, r1}
 80101ac:	a807      	add	r0, sp, #28
 80101ae:	f7fb fae6 	bl	800b77e <_ZNK8touchgfx4Rect7isEmptyEv>
 80101b2:	b920      	cbnz	r0, 80101be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	a907      	add	r1, sp, #28
 80101b8:	4620      	mov	r0, r4
 80101ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101bc:	4798      	blx	r3
 80101be:	3501      	adds	r5, #1
 80101c0:	b2ad      	uxth	r5, r5
 80101c2:	e7e7      	b.n	8010194 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

080101c4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80101c4:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	801a      	strh	r2, [r3, #0]
 80101ca:	805a      	strh	r2, [r3, #2]
 80101cc:	809a      	strh	r2, [r3, #4]
 80101ce:	80da      	strh	r2, [r3, #6]
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	24006c00 	.word	0x24006c00

080101d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80101d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101dc:	b09d      	sub	sp, #116	; 0x74
 80101de:	4606      	mov	r6, r0
 80101e0:	4614      	mov	r4, r2
 80101e2:	468a      	mov	sl, r1
 80101e4:	a803      	add	r0, sp, #12
 80101e6:	461d      	mov	r5, r3
 80101e8:	f000 fd8a 	bl	8010d00 <_ZN8touchgfx12TextProviderC1Ev>
 80101ec:	6833      	ldr	r3, [r6, #0]
 80101ee:	4630      	mov	r0, r6
 80101f0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80101f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101f6:	4798      	blx	r3
 80101f8:	6833      	ldr	r3, [r6, #0]
 80101fa:	4607      	mov	r7, r0
 80101fc:	4630      	mov	r0, r6
 80101fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010200:	4798      	blx	r3
 8010202:	462a      	mov	r2, r5
 8010204:	2500      	movs	r5, #0
 8010206:	4621      	mov	r1, r4
 8010208:	9000      	str	r0, [sp, #0]
 801020a:	463b      	mov	r3, r7
 801020c:	462c      	mov	r4, r5
 801020e:	46a9      	mov	r9, r5
 8010210:	46a8      	mov	r8, r5
 8010212:	a803      	add	r0, sp, #12
 8010214:	f000 fdc7 	bl	8010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010218:	2300      	movs	r3, #0
 801021a:	9302      	str	r3, [sp, #8]
 801021c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010220:	429c      	cmp	r4, r3
 8010222:	d002      	beq.n	801022a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8010224:	455c      	cmp	r4, fp
 8010226:	bf18      	it	ne
 8010228:	4625      	movne	r5, r4
 801022a:	ab02      	add	r3, sp, #8
 801022c:	4632      	mov	r2, r6
 801022e:	4651      	mov	r1, sl
 8010230:	a803      	add	r0, sp, #12
 8010232:	f001 f8b9 	bl	80113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010236:	4604      	mov	r4, r0
 8010238:	b108      	cbz	r0, 801023e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801023a:	280a      	cmp	r0, #10
 801023c:	d10a      	bne.n	8010254 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801023e:	45c1      	cmp	r9, r8
 8010240:	bf38      	it	cc
 8010242:	46c1      	movcc	r9, r8
 8010244:	f04f 0800 	mov.w	r8, #0
 8010248:	2c00      	cmp	r4, #0
 801024a:	d1e5      	bne.n	8010218 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801024c:	4648      	mov	r0, r9
 801024e:	b01d      	add	sp, #116	; 0x74
 8010250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010254:	9a02      	ldr	r2, [sp, #8]
 8010256:	2a00      	cmp	r2, #0
 8010258:	d0de      	beq.n	8010218 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801025a:	7b57      	ldrb	r7, [r2, #13]
 801025c:	4629      	mov	r1, r5
 801025e:	6833      	ldr	r3, [r6, #0]
 8010260:	007f      	lsls	r7, r7, #1
 8010262:	8894      	ldrh	r4, [r2, #4]
 8010264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010266:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801026a:	7a97      	ldrb	r7, [r2, #10]
 801026c:	4307      	orrs	r7, r0
 801026e:	4630      	mov	r0, r6
 8010270:	4798      	blx	r3
 8010272:	4438      	add	r0, r7
 8010274:	4480      	add	r8, r0
 8010276:	fa1f f888 	uxth.w	r8, r8
 801027a:	e7e5      	b.n	8010248 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801027c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801027c:	b508      	push	{r3, lr}
 801027e:	6803      	ldr	r3, [r0, #0]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	4798      	blx	r3
 8010284:	b128      	cbz	r0, 8010292 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8010286:	7b43      	ldrb	r3, [r0, #13]
 8010288:	7a80      	ldrb	r0, [r0, #10]
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010290:	4318      	orrs	r0, r3
 8010292:	bd08      	pop	{r3, pc}

08010294 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8010294:	b40e      	push	{r1, r2, r3}
 8010296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010298:	b09e      	sub	sp, #120	; 0x78
 801029a:	4605      	mov	r5, r0
 801029c:	ab23      	add	r3, sp, #140	; 0x8c
 801029e:	a805      	add	r0, sp, #20
 80102a0:	f853 4b04 	ldr.w	r4, [r3], #4
 80102a4:	9303      	str	r3, [sp, #12]
 80102a6:	f000 fd2b 	bl	8010d00 <_ZN8touchgfx12TextProviderC1Ev>
 80102aa:	682b      	ldr	r3, [r5, #0]
 80102ac:	4628      	mov	r0, r5
 80102ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b0:	4798      	blx	r3
 80102b2:	682b      	ldr	r3, [r5, #0]
 80102b4:	4606      	mov	r6, r0
 80102b6:	4628      	mov	r0, r5
 80102b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102ba:	4798      	blx	r3
 80102bc:	4633      	mov	r3, r6
 80102be:	4621      	mov	r1, r4
 80102c0:	ae1e      	add	r6, sp, #120	; 0x78
 80102c2:	2400      	movs	r4, #0
 80102c4:	9000      	str	r0, [sp, #0]
 80102c6:	9a03      	ldr	r2, [sp, #12]
 80102c8:	a805      	add	r0, sp, #20
 80102ca:	f000 fd6c 	bl	8010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80102ce:	f846 4d68 	str.w	r4, [r6, #-104]!
 80102d2:	462a      	mov	r2, r5
 80102d4:	4633      	mov	r3, r6
 80102d6:	4621      	mov	r1, r4
 80102d8:	a805      	add	r0, sp, #20
 80102da:	f001 f865 	bl	80113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80102de:	b300      	cbz	r0, 8010322 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80102e0:	280a      	cmp	r0, #10
 80102e2:	d01a      	beq.n	801031a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80102e4:	9f04      	ldr	r7, [sp, #16]
 80102e6:	b1c7      	cbz	r7, 801031a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80102e8:	7b78      	ldrb	r0, [r7, #13]
 80102ea:	7a3b      	ldrb	r3, [r7, #8]
 80102ec:	00c1      	lsls	r1, r0, #3
 80102ee:	88aa      	ldrh	r2, [r5, #4]
 80102f0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80102f4:	4319      	orrs	r1, r3
 80102f6:	0643      	lsls	r3, r0, #25
 80102f8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80102fc:	bf48      	it	mi
 80102fe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8010302:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8010306:	bf48      	it	mi
 8010308:	b219      	sxthmi	r1, r3
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	4303      	orrs	r3, r0
 801030e:	4413      	add	r3, r2
 8010310:	1a5b      	subs	r3, r3, r1
 8010312:	b29b      	uxth	r3, r3
 8010314:	42a3      	cmp	r3, r4
 8010316:	bfc8      	it	gt
 8010318:	b21c      	sxthgt	r4, r3
 801031a:	4633      	mov	r3, r6
 801031c:	462a      	mov	r2, r5
 801031e:	2100      	movs	r1, #0
 8010320:	e7da      	b.n	80102d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8010322:	b2a0      	uxth	r0, r4
 8010324:	b01e      	add	sp, #120	; 0x78
 8010326:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801032a:	b003      	add	sp, #12
 801032c:	4770      	bx	lr

0801032e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801032e:	b40e      	push	{r1, r2, r3}
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	b09d      	sub	sp, #116	; 0x74
 8010334:	4604      	mov	r4, r0
 8010336:	ab21      	add	r3, sp, #132	; 0x84
 8010338:	a803      	add	r0, sp, #12
 801033a:	f853 5b04 	ldr.w	r5, [r3], #4
 801033e:	9302      	str	r3, [sp, #8]
 8010340:	f000 fcde 	bl	8010d00 <_ZN8touchgfx12TextProviderC1Ev>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	4620      	mov	r0, r4
 8010348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801034a:	4798      	blx	r3
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	4606      	mov	r6, r0
 8010350:	4620      	mov	r0, r4
 8010352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010354:	2401      	movs	r4, #1
 8010356:	4798      	blx	r3
 8010358:	4633      	mov	r3, r6
 801035a:	9000      	str	r0, [sp, #0]
 801035c:	4629      	mov	r1, r5
 801035e:	9a02      	ldr	r2, [sp, #8]
 8010360:	a803      	add	r0, sp, #12
 8010362:	f000 fd20 	bl	8010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010366:	a803      	add	r0, sp, #12
 8010368:	f001 f918 	bl	801159c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801036c:	b2a3      	uxth	r3, r4
 801036e:	b138      	cbz	r0, 8010380 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8010370:	280a      	cmp	r0, #10
 8010372:	a803      	add	r0, sp, #12
 8010374:	bf04      	itt	eq
 8010376:	3301      	addeq	r3, #1
 8010378:	b21c      	sxtheq	r4, r3
 801037a:	f001 f90f 	bl	801159c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801037e:	e7f5      	b.n	801036c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8010380:	4618      	mov	r0, r3
 8010382:	b01d      	add	sp, #116	; 0x74
 8010384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010388:	b003      	add	sp, #12
 801038a:	4770      	bx	lr

0801038c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801038c:	b40e      	push	{r1, r2, r3}
 801038e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010390:	b09e      	sub	sp, #120	; 0x78
 8010392:	4604      	mov	r4, r0
 8010394:	ab23      	add	r3, sp, #140	; 0x8c
 8010396:	a805      	add	r0, sp, #20
 8010398:	f853 5b04 	ldr.w	r5, [r3], #4
 801039c:	9303      	str	r3, [sp, #12]
 801039e:	f000 fcaf 	bl	8010d00 <_ZN8touchgfx12TextProviderC1Ev>
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	4620      	mov	r0, r4
 80103a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103a8:	4798      	blx	r3
 80103aa:	6823      	ldr	r3, [r4, #0]
 80103ac:	4606      	mov	r6, r0
 80103ae:	4620      	mov	r0, r4
 80103b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103b2:	4798      	blx	r3
 80103b4:	4633      	mov	r3, r6
 80103b6:	4629      	mov	r1, r5
 80103b8:	9000      	str	r0, [sp, #0]
 80103ba:	9a03      	ldr	r2, [sp, #12]
 80103bc:	a805      	add	r0, sp, #20
 80103be:	f000 fcf2 	bl	8010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80103c2:	ad1e      	add	r5, sp, #120	; 0x78
 80103c4:	2100      	movs	r1, #0
 80103c6:	26ff      	movs	r6, #255	; 0xff
 80103c8:	4622      	mov	r2, r4
 80103ca:	a805      	add	r0, sp, #20
 80103cc:	f845 1d68 	str.w	r1, [r5, #-104]!
 80103d0:	462b      	mov	r3, r5
 80103d2:	f000 ffe9 	bl	80113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80103d6:	b1d8      	cbz	r0, 8010410 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80103d8:	280a      	cmp	r0, #10
 80103da:	d012      	beq.n	8010402 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80103dc:	9804      	ldr	r0, [sp, #16]
 80103de:	b180      	cbz	r0, 8010402 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80103e0:	7b47      	ldrb	r7, [r0, #13]
 80103e2:	7922      	ldrb	r2, [r4, #4]
 80103e4:	00fb      	lsls	r3, r7, #3
 80103e6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80103ea:	7a03      	ldrb	r3, [r0, #8]
 80103ec:	430b      	orrs	r3, r1
 80103ee:	0679      	lsls	r1, r7, #25
 80103f0:	bf44      	itt	mi
 80103f2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80103f6:	b21b      	sxthmi	r3, r3
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	429e      	cmp	r6, r3
 80103fe:	bf28      	it	cs
 8010400:	461e      	movcs	r6, r3
 8010402:	462b      	mov	r3, r5
 8010404:	4622      	mov	r2, r4
 8010406:	2100      	movs	r1, #0
 8010408:	a805      	add	r0, sp, #20
 801040a:	f000 ffcd 	bl	80113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801040e:	e7e2      	b.n	80103d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8010410:	4630      	mov	r0, r6
 8010412:	b01e      	add	sp, #120	; 0x78
 8010414:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010418:	b003      	add	sp, #12
 801041a:	4770      	bx	lr

0801041c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801041c:	b513      	push	{r0, r1, r4, lr}
 801041e:	6803      	ldr	r3, [r0, #0]
 8010420:	2400      	movs	r4, #0
 8010422:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010426:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801042a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801042e:	4669      	mov	r1, sp
 8010430:	691b      	ldr	r3, [r3, #16]
 8010432:	9400      	str	r4, [sp, #0]
 8010434:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010438:	4798      	blx	r3
 801043a:	b002      	add	sp, #8
 801043c:	bd10      	pop	{r4, pc}

0801043e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801043e:	b538      	push	{r3, r4, r5, lr}
 8010440:	680b      	ldr	r3, [r1, #0]
 8010442:	460c      	mov	r4, r1
 8010444:	4605      	mov	r5, r0
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	4798      	blx	r3
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	4620      	mov	r0, r4
 801044e:	4629      	mov	r1, r5
 8010450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010452:	4798      	blx	r3
 8010454:	4628      	mov	r0, r5
 8010456:	bd38      	pop	{r3, r4, r5, pc}

08010458 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8010458:	b410      	push	{r4}
 801045a:	880a      	ldrh	r2, [r1, #0]
 801045c:	8884      	ldrh	r4, [r0, #4]
 801045e:	4422      	add	r2, r4
 8010460:	800a      	strh	r2, [r1, #0]
 8010462:	884a      	ldrh	r2, [r1, #2]
 8010464:	88c4      	ldrh	r4, [r0, #6]
 8010466:	4422      	add	r2, r4
 8010468:	804a      	strh	r2, [r1, #2]
 801046a:	6940      	ldr	r0, [r0, #20]
 801046c:	b120      	cbz	r0, 8010478 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801046e:	6803      	ldr	r3, [r0, #0]
 8010470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010476:	4718      	bx	r3
 8010478:	f85d 4b04 	ldr.w	r4, [sp], #4
 801047c:	4770      	bx	lr

0801047e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801047e:	b570      	push	{r4, r5, r6, lr}
 8010480:	8882      	ldrh	r2, [r0, #4]
 8010482:	460c      	mov	r4, r1
 8010484:	880b      	ldrh	r3, [r1, #0]
 8010486:	4605      	mov	r5, r0
 8010488:	4413      	add	r3, r2
 801048a:	800b      	strh	r3, [r1, #0]
 801048c:	884b      	ldrh	r3, [r1, #2]
 801048e:	88c2      	ldrh	r2, [r0, #6]
 8010490:	4413      	add	r3, r2
 8010492:	804b      	strh	r3, [r1, #2]
 8010494:	1d01      	adds	r1, r0, #4
 8010496:	4620      	mov	r0, r4
 8010498:	f7fb f92e 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 801049c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	dd0b      	ble.n	80104bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80104a4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	dd07      	ble.n	80104bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80104ac:	6968      	ldr	r0, [r5, #20]
 80104ae:	b128      	cbz	r0, 80104bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80104b0:	6803      	ldr	r3, [r0, #0]
 80104b2:	4621      	mov	r1, r4
 80104b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ba:	4718      	bx	r3
 80104bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080104c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80104c0:	b570      	push	{r4, r5, r6, lr}
 80104c2:	8882      	ldrh	r2, [r0, #4]
 80104c4:	460c      	mov	r4, r1
 80104c6:	880b      	ldrh	r3, [r1, #0]
 80104c8:	4605      	mov	r5, r0
 80104ca:	4413      	add	r3, r2
 80104cc:	800b      	strh	r3, [r1, #0]
 80104ce:	884b      	ldrh	r3, [r1, #2]
 80104d0:	88c2      	ldrh	r2, [r0, #6]
 80104d2:	4413      	add	r3, r2
 80104d4:	804b      	strh	r3, [r1, #2]
 80104d6:	1d01      	adds	r1, r0, #4
 80104d8:	4620      	mov	r0, r4
 80104da:	f7fb f90d 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 80104de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	dd15      	ble.n	8010512 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80104e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	dd11      	ble.n	8010512 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80104ee:	6968      	ldr	r0, [r5, #20]
 80104f0:	b128      	cbz	r0, 80104fe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80104f2:	6803      	ldr	r3, [r0, #0]
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	4621      	mov	r1, r4
 80104f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104fc:	4718      	bx	r3
 80104fe:	4b05      	ldr	r3, [pc, #20]	; (8010514 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	3304      	adds	r3, #4
 8010504:	429d      	cmp	r5, r3
 8010506:	d104      	bne.n	8010512 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8010508:	f7ff f806 	bl	800f518 <_ZN8touchgfx11Application11getInstanceEv>
 801050c:	6803      	ldr	r3, [r0, #0]
 801050e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010510:	e7f1      	b.n	80104f6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	24006bf8 	.word	0x24006bf8

08010518 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8010518:	b570      	push	{r4, r5, r6, lr}
 801051a:	4604      	mov	r4, r0
 801051c:	4616      	mov	r6, r2
 801051e:	460d      	mov	r5, r1
 8010520:	b901      	cbnz	r1, 8010524 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8010522:	b192      	cbz	r2, 801054a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	4620      	mov	r0, r4
 8010528:	695b      	ldr	r3, [r3, #20]
 801052a:	4798      	blx	r3
 801052c:	88e2      	ldrh	r2, [r4, #6]
 801052e:	88a1      	ldrh	r1, [r4, #4]
 8010530:	4620      	mov	r0, r4
 8010532:	4432      	add	r2, r6
 8010534:	4429      	add	r1, r5
 8010536:	b212      	sxth	r2, r2
 8010538:	b209      	sxth	r1, r1
 801053a:	f7f2 fb75 	bl	8002c28 <_ZN8touchgfx8Drawable5setXYEss>
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	4620      	mov	r0, r4
 8010542:	695b      	ldr	r3, [r3, #20]
 8010544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010548:	4718      	bx	r3
 801054a:	bd70      	pop	{r4, r5, r6, pc}

0801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801054c:	b510      	push	{r4, lr}
 801054e:	2300      	movs	r3, #0
 8010550:	4604      	mov	r4, r0
 8010552:	4608      	mov	r0, r1
 8010554:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8010558:	8023      	strh	r3, [r4, #0]
 801055a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801055e:	8063      	strh	r3, [r4, #2]
 8010560:	6803      	ldr	r3, [r0, #0]
 8010562:	80a1      	strh	r1, [r4, #4]
 8010564:	4621      	mov	r1, r4
 8010566:	80e2      	strh	r2, [r4, #6]
 8010568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801056a:	4798      	blx	r3
 801056c:	4620      	mov	r0, r4
 801056e:	bd10      	pop	{r4, pc}

08010570 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8010570:	b530      	push	{r4, r5, lr}
 8010572:	8083      	strh	r3, [r0, #4]
 8010574:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010578:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801057c:	7183      	strb	r3, [r0, #6]
 801057e:	79c3      	ldrb	r3, [r0, #7]
 8010580:	6101      	str	r1, [r0, #16]
 8010582:	f365 0306 	bfi	r3, r5, #0, #7
 8010586:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801058a:	8282      	strh	r2, [r0, #20]
 801058c:	f365 13c7 	bfi	r3, r5, #7, #1
 8010590:	71c3      	strb	r3, [r0, #7]
 8010592:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8010596:	7203      	strb	r3, [r0, #8]
 8010598:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801059c:	7243      	strb	r3, [r0, #9]
 801059e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80105a2:	8143      	strh	r3, [r0, #10]
 80105a4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80105a8:	8183      	strh	r3, [r0, #12]
 80105aa:	4b01      	ldr	r3, [pc, #4]	; (80105b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80105ac:	6003      	str	r3, [r0, #0]
 80105ae:	bd30      	pop	{r4, r5, pc}
 80105b0:	0801e584 	.word	0x0801e584

080105b4 <_ZNK8touchgfx9ConstFont4findEt>:
 80105b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b6:	6904      	ldr	r4, [r0, #16]
 80105b8:	b3bc      	cbz	r4, 801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105ba:	88a3      	ldrh	r3, [r4, #4]
 80105bc:	8a82      	ldrh	r2, [r0, #20]
 80105be:	1acb      	subs	r3, r1, r3
 80105c0:	f102 32ff 	add.w	r2, r2, #4294967295
 80105c4:	d431      	bmi.n	801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105c6:	4293      	cmp	r3, r2
 80105c8:	dd0c      	ble.n	80105e4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80105ca:	230e      	movs	r3, #14
 80105cc:	fb03 4302 	mla	r3, r3, r2, r4
 80105d0:	889b      	ldrh	r3, [r3, #4]
 80105d2:	1a5b      	subs	r3, r3, r1
 80105d4:	1ad3      	subs	r3, r2, r3
 80105d6:	429a      	cmp	r2, r3
 80105d8:	db27      	blt.n	801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105da:	2b00      	cmp	r3, #0
 80105dc:	bfbc      	itt	lt
 80105de:	2302      	movlt	r3, #2
 80105e0:	fb92 f3f3 	sdivlt	r3, r2, r3
 80105e4:	2500      	movs	r5, #0
 80105e6:	260e      	movs	r6, #14
 80105e8:	4295      	cmp	r5, r2
 80105ea:	dc1e      	bgt.n	801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105ec:	fb06 4003 	mla	r0, r6, r3, r4
 80105f0:	8887      	ldrh	r7, [r0, #4]
 80105f2:	42b9      	cmp	r1, r7
 80105f4:	d01a      	beq.n	801062c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80105f6:	d20d      	bcs.n	8010614 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80105f8:	1e5a      	subs	r2, r3, #1
 80105fa:	4295      	cmp	r5, r2
 80105fc:	dc15      	bgt.n	801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105fe:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8010602:	1a5b      	subs	r3, r3, r1
 8010604:	1ad3      	subs	r3, r2, r3
 8010606:	429a      	cmp	r2, r3
 8010608:	db0f      	blt.n	801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801060a:	429d      	cmp	r5, r3
 801060c:	ddec      	ble.n	80105e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801060e:	1953      	adds	r3, r2, r5
 8010610:	105b      	asrs	r3, r3, #1
 8010612:	e7e9      	b.n	80105e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8010614:	1c5d      	adds	r5, r3, #1
 8010616:	42aa      	cmp	r2, r5
 8010618:	db07      	blt.n	801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801061a:	8a43      	ldrh	r3, [r0, #18]
 801061c:	1acb      	subs	r3, r1, r3
 801061e:	442b      	add	r3, r5
 8010620:	429d      	cmp	r5, r3
 8010622:	dc02      	bgt.n	801062a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8010624:	429a      	cmp	r2, r3
 8010626:	dadf      	bge.n	80105e8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8010628:	e7f1      	b.n	801060e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801062a:	2000      	movs	r0, #0
 801062c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801062e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801062e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010630:	4604      	mov	r4, r0
 8010632:	4617      	mov	r7, r2
 8010634:	461e      	mov	r6, r3
 8010636:	b911      	cbnz	r1, 801063e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8010638:	2500      	movs	r5, #0
 801063a:	4628      	mov	r0, r5
 801063c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801063e:	290a      	cmp	r1, #10
 8010640:	d0fa      	beq.n	8010638 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010642:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8010646:	4291      	cmp	r1, r2
 8010648:	d0f6      	beq.n	8010638 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801064a:	f242 020b 	movw	r2, #8203	; 0x200b
 801064e:	4291      	cmp	r1, r2
 8010650:	d0f2      	beq.n	8010638 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010652:	f7ff ffaf 	bl	80105b4 <_ZNK8touchgfx9ConstFont4findEt>
 8010656:	4605      	mov	r5, r0
 8010658:	b950      	cbnz	r0, 8010670 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	4620      	mov	r0, r4
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	4798      	blx	r3
 8010662:	4601      	mov	r1, r0
 8010664:	4620      	mov	r0, r4
 8010666:	f7ff ffa5 	bl	80105b4 <_ZNK8touchgfx9ConstFont4findEt>
 801066a:	4605      	mov	r5, r0
 801066c:	2800      	cmp	r0, #0
 801066e:	d0e3      	beq.n	8010638 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010670:	6823      	ldr	r3, [r4, #0]
 8010672:	4629      	mov	r1, r5
 8010674:	4620      	mov	r0, r4
 8010676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010678:	4798      	blx	r3
 801067a:	6038      	str	r0, [r7, #0]
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	4620      	mov	r0, r4
 8010680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010682:	4798      	blx	r3
 8010684:	7030      	strb	r0, [r6, #0]
 8010686:	e7d8      	b.n	801063a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08010688 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8010688:	b538      	push	{r3, r4, r5, lr}
 801068a:	4605      	mov	r5, r0
 801068c:	f002 fa86 	bl	8012b9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010690:	4604      	mov	r4, r0
 8010692:	4628      	mov	r0, r5
 8010694:	f002 f9be 	bl	8012a14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8010698:	2800      	cmp	r0, #0
 801069a:	bf14      	ite	ne
 801069c:	2002      	movne	r0, #2
 801069e:	2000      	moveq	r0, #0
 80106a0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80106a4:	b280      	uxth	r0, r0
 80106a6:	bd38      	pop	{r3, r4, r5, pc}

080106a8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4605      	mov	r5, r0
 80106ac:	f002 fa76 	bl	8012b9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80106b0:	4604      	mov	r4, r0
 80106b2:	4628      	mov	r0, r5
 80106b4:	f002 f9ae 	bl	8012a14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	bf14      	ite	ne
 80106bc:	2002      	movne	r0, #2
 80106be:	2000      	moveq	r0, #0
 80106c0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80106c4:	f040 0001 	orr.w	r0, r0, #1
 80106c8:	b280      	uxth	r0, r0
 80106ca:	bd38      	pop	{r3, r4, r5, pc}

080106cc <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80106cc:	2000      	movs	r0, #0
 80106ce:	4770      	bx	lr

080106d0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80106d0:	2001      	movs	r0, #1
 80106d2:	4770      	bx	lr

080106d4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80106d4:	2002      	movs	r0, #2
 80106d6:	4770      	bx	lr

080106d8 <_ZN8touchgfx6ScreenD1Ev>:
 80106d8:	4770      	bx	lr

080106da <_ZN8touchgfx12GestureEventD1Ev>:
 80106da:	4770      	bx	lr

080106dc <_ZN8touchgfx9DragEventD1Ev>:
 80106dc:	4770      	bx	lr

080106de <_ZN8touchgfx10ClickEventD1Ev>:
 80106de:	4770      	bx	lr

080106e0 <_ZN8touchgfx10ClickEventD0Ev>:
 80106e0:	b510      	push	{r4, lr}
 80106e2:	4604      	mov	r4, r0
 80106e4:	210c      	movs	r1, #12
 80106e6:	f00a fbc3 	bl	801ae70 <_ZdlPvj>
 80106ea:	4620      	mov	r0, r4
 80106ec:	bd10      	pop	{r4, pc}

080106ee <_ZN8touchgfx9DragEventD0Ev>:
 80106ee:	b510      	push	{r4, lr}
 80106f0:	4604      	mov	r4, r0
 80106f2:	2110      	movs	r1, #16
 80106f4:	f00a fbbc 	bl	801ae70 <_ZdlPvj>
 80106f8:	4620      	mov	r0, r4
 80106fa:	bd10      	pop	{r4, pc}

080106fc <_ZN8touchgfx12GestureEventD0Ev>:
 80106fc:	b510      	push	{r4, lr}
 80106fe:	4604      	mov	r4, r0
 8010700:	210c      	movs	r1, #12
 8010702:	f00a fbb5 	bl	801ae70 <_ZdlPvj>
 8010706:	4620      	mov	r0, r4
 8010708:	bd10      	pop	{r4, pc}

0801070a <_ZN8touchgfx6ScreenD0Ev>:
 801070a:	b510      	push	{r4, lr}
 801070c:	4604      	mov	r4, r0
 801070e:	213c      	movs	r1, #60	; 0x3c
 8010710:	f00a fbae 	bl	801ae70 <_ZdlPvj>
 8010714:	4620      	mov	r0, r4
 8010716:	bd10      	pop	{r4, pc}

08010718 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8010718:	b530      	push	{r4, r5, lr}
 801071a:	460d      	mov	r5, r1
 801071c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801071e:	b087      	sub	sp, #28
 8010720:	4604      	mov	r4, r0
 8010722:	b301      	cbz	r1, 8010766 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8010724:	a801      	add	r0, sp, #4
 8010726:	f7ff ff11 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801072a:	892a      	ldrh	r2, [r5, #8]
 801072c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010730:	7928      	ldrb	r0, [r5, #4]
 8010732:	1ad2      	subs	r2, r2, r3
 8010734:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010736:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801073a:	441a      	add	r2, r3
 801073c:	896b      	ldrh	r3, [r5, #10]
 801073e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8010742:	f88d 0010 	strb.w	r0, [sp, #16]
 8010746:	1b5b      	subs	r3, r3, r5
 8010748:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801074a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801074c:	442b      	add	r3, r5
 801074e:	4d07      	ldr	r5, [pc, #28]	; (801076c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8010750:	f8ad 1012 	strh.w	r1, [sp, #18]
 8010754:	a903      	add	r1, sp, #12
 8010756:	9503      	str	r5, [sp, #12]
 8010758:	f8ad 2014 	strh.w	r2, [sp, #20]
 801075c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010760:	6803      	ldr	r3, [r0, #0]
 8010762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010764:	4798      	blx	r3
 8010766:	b007      	add	sp, #28
 8010768:	bd30      	pop	{r4, r5, pc}
 801076a:	bf00      	nop
 801076c:	0801e604 	.word	0x0801e604

08010770 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8010770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010774:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010776:	b08a      	sub	sp, #40	; 0x28
 8010778:	4604      	mov	r4, r0
 801077a:	460d      	mov	r5, r1
 801077c:	b113      	cbz	r3, 8010784 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801077e:	790b      	ldrb	r3, [r1, #4]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d044      	beq.n	801080e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8010784:	f104 0804 	add.w	r8, r4, #4
 8010788:	a803      	add	r0, sp, #12
 801078a:	4641      	mov	r1, r8
 801078c:	f7ff fede 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010790:	792b      	ldrb	r3, [r5, #4]
 8010792:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8010796:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801079a:	b983      	cbnz	r3, 80107be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801079c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80107a0:	892a      	ldrh	r2, [r5, #8]
 80107a2:	88e9      	ldrh	r1, [r5, #6]
 80107a4:	4640      	mov	r0, r8
 80107a6:	1b92      	subs	r2, r2, r6
 80107a8:	9301      	str	r3, [sp, #4]
 80107aa:	1bc9      	subs	r1, r1, r7
 80107ac:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80107b0:	b212      	sxth	r2, r2
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	b209      	sxth	r1, r1
 80107b6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80107ba:	f7fa febb 	bl	800b534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80107be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80107c0:	b329      	cbz	r1, 801080e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80107c2:	a805      	add	r0, sp, #20
 80107c4:	f7ff fec2 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80107c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80107cc:	792b      	ldrb	r3, [r5, #4]
 80107ce:	a907      	add	r1, sp, #28
 80107d0:	1abf      	subs	r7, r7, r2
 80107d2:	88ea      	ldrh	r2, [r5, #6]
 80107d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80107d6:	4417      	add	r7, r2
 80107d8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80107da:	f88d 3020 	strb.w	r3, [sp, #32]
 80107de:	4417      	add	r7, r2
 80107e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80107e4:	1ab6      	subs	r6, r6, r2
 80107e6:	892a      	ldrh	r2, [r5, #8]
 80107e8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80107ec:	4416      	add	r6, r2
 80107ee:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80107f0:	4416      	add	r6, r2
 80107f2:	4a08      	ldr	r2, [pc, #32]	; (8010814 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80107f4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80107f8:	2600      	movs	r6, #0
 80107fa:	9207      	str	r2, [sp, #28]
 80107fc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8010800:	6803      	ldr	r3, [r0, #0]
 8010802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010804:	4798      	blx	r3
 8010806:	792b      	ldrb	r3, [r5, #4]
 8010808:	b10b      	cbz	r3, 801080e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801080a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801080e:	b00a      	add	sp, #40	; 0x28
 8010810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010814:	0801e5dc 	.word	0x0801e5dc

08010818 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8010818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801081c:	460c      	mov	r4, r1
 801081e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010820:	b088      	sub	sp, #32
 8010822:	4605      	mov	r5, r0
 8010824:	2900      	cmp	r1, #0
 8010826:	d06d      	beq.n	8010904 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8010828:	4668      	mov	r0, sp
 801082a:	f7ff fe8f 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801082e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8010830:	88e3      	ldrh	r3, [r4, #6]
 8010832:	f9bd 8000 	ldrsh.w	r8, [sp]
 8010836:	440b      	add	r3, r1
 8010838:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801083c:	b21b      	sxth	r3, r3
 801083e:	4543      	cmp	r3, r8
 8010840:	db31      	blt.n	80108a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010842:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8010846:	44c4      	add	ip, r8
 8010848:	fa0f fc8c 	sxth.w	ip, ip
 801084c:	4563      	cmp	r3, ip
 801084e:	da2a      	bge.n	80108a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010850:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8010852:	8926      	ldrh	r6, [r4, #8]
 8010854:	4416      	add	r6, r2
 8010856:	b236      	sxth	r6, r6
 8010858:	42be      	cmp	r6, r7
 801085a:	db24      	blt.n	80108a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801085c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010860:	4438      	add	r0, r7
 8010862:	b200      	sxth	r0, r0
 8010864:	4286      	cmp	r6, r0
 8010866:	da1e      	bge.n	80108a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010868:	8963      	ldrh	r3, [r4, #10]
 801086a:	4419      	add	r1, r3
 801086c:	b209      	sxth	r1, r1
 801086e:	4541      	cmp	r1, r8
 8010870:	db08      	blt.n	8010884 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010872:	4561      	cmp	r1, ip
 8010874:	da06      	bge.n	8010884 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010876:	89a3      	ldrh	r3, [r4, #12]
 8010878:	441a      	add	r2, r3
 801087a:	b212      	sxth	r2, r2
 801087c:	42ba      	cmp	r2, r7
 801087e:	db01      	blt.n	8010884 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010880:	4282      	cmp	r2, r0
 8010882:	db10      	blt.n	80108a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010884:	4b21      	ldr	r3, [pc, #132]	; (801090c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8010886:	a904      	add	r1, sp, #16
 8010888:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801088a:	9304      	str	r3, [sp, #16]
 801088c:	2302      	movs	r3, #2
 801088e:	f88d 3014 	strb.w	r3, [sp, #20]
 8010892:	2300      	movs	r3, #0
 8010894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010898:	f8ad 3018 	strh.w	r3, [sp, #24]
 801089c:	f8ad 301a 	strh.w	r3, [sp, #26]
 80108a0:	6803      	ldr	r3, [r0, #0]
 80108a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108a4:	4798      	blx	r3
 80108a6:	1d29      	adds	r1, r5, #4
 80108a8:	a802      	add	r0, sp, #8
 80108aa:	f7ff fe4f 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80108ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80108b2:	88e0      	ldrh	r0, [r4, #6]
 80108b4:	eba3 0808 	sub.w	r8, r3, r8
 80108b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80108bc:	7921      	ldrb	r1, [r4, #4]
 80108be:	fa1f f888 	uxth.w	r8, r8
 80108c2:	1bdf      	subs	r7, r3, r7
 80108c4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80108c8:	b2bb      	uxth	r3, r7
 80108ca:	4440      	add	r0, r8
 80108cc:	8922      	ldrh	r2, [r4, #8]
 80108ce:	8967      	ldrh	r7, [r4, #10]
 80108d0:	4460      	add	r0, ip
 80108d2:	89a4      	ldrh	r4, [r4, #12]
 80108d4:	441a      	add	r2, r3
 80108d6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80108d8:	44b8      	add	r8, r7
 80108da:	4423      	add	r3, r4
 80108dc:	f8ad 0016 	strh.w	r0, [sp, #22]
 80108e0:	4432      	add	r2, r6
 80108e2:	44e0      	add	r8, ip
 80108e4:	4433      	add	r3, r6
 80108e6:	4c0a      	ldr	r4, [pc, #40]	; (8010910 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80108e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80108ea:	f88d 1014 	strb.w	r1, [sp, #20]
 80108ee:	a904      	add	r1, sp, #16
 80108f0:	9404      	str	r4, [sp, #16]
 80108f2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80108f6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80108fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80108fe:	6803      	ldr	r3, [r0, #0]
 8010900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010902:	4798      	blx	r3
 8010904:	b008      	add	sp, #32
 8010906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801090a:	bf00      	nop
 801090c:	0801e5dc 	.word	0x0801e5dc
 8010910:	0801e5f0 	.word	0x0801e5f0

08010914 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8010914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010916:	4604      	mov	r4, r0
 8010918:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801091c:	3201      	adds	r2, #1
 801091e:	d112      	bne.n	8010946 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8010920:	2500      	movs	r5, #0
 8010922:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010926:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801092a:	6803      	ldr	r3, [r0, #0]
 801092c:	9500      	str	r5, [sp, #0]
 801092e:	466d      	mov	r5, sp
 8010930:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010934:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010938:	4629      	mov	r1, r5
 801093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093c:	4798      	blx	r3
 801093e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010942:	e884 0003 	stmia.w	r4, {r0, r1}
 8010946:	4620      	mov	r0, r4
 8010948:	b003      	add	sp, #12
 801094a:	bd30      	pop	{r4, r5, pc}

0801094c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801094c:	b513      	push	{r0, r1, r4, lr}
 801094e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8010952:	4604      	mov	r4, r0
 8010954:	3301      	adds	r3, #1
 8010956:	d109      	bne.n	801096c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8010958:	4601      	mov	r1, r0
 801095a:	4668      	mov	r0, sp
 801095c:	f7ff fdf6 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010960:	f8bd 3000 	ldrh.w	r3, [sp]
 8010964:	8423      	strh	r3, [r4, #32]
 8010966:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801096a:	8463      	strh	r3, [r4, #34]	; 0x22
 801096c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8010970:	b002      	add	sp, #8
 8010972:	bd10      	pop	{r4, pc}

08010974 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8010974:	b513      	push	{r0, r1, r4, lr}
 8010976:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801097a:	4604      	mov	r4, r0
 801097c:	3301      	adds	r3, #1
 801097e:	d109      	bne.n	8010994 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8010980:	4601      	mov	r1, r0
 8010982:	4668      	mov	r0, sp
 8010984:	f7ff fde2 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010988:	f8bd 3000 	ldrh.w	r3, [sp]
 801098c:	8423      	strh	r3, [r4, #32]
 801098e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010992:	8463      	strh	r3, [r4, #34]	; 0x22
 8010994:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8010998:	b002      	add	sp, #8
 801099a:	bd10      	pop	{r4, pc}

0801099c <_ZN8touchgfx6ScreenC1Ev>:
 801099c:	b570      	push	{r4, r5, r6, lr}
 801099e:	4b17      	ldr	r3, [pc, #92]	; (80109fc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80109a0:	4605      	mov	r5, r0
 80109a2:	4a17      	ldr	r2, [pc, #92]	; (8010a00 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80109a4:	2101      	movs	r1, #1
 80109a6:	f845 3b04 	str.w	r3, [r5], #4
 80109aa:	2300      	movs	r3, #0
 80109ac:	6042      	str	r2, [r0, #4]
 80109ae:	4604      	mov	r4, r0
 80109b0:	8103      	strh	r3, [r0, #8]
 80109b2:	8143      	strh	r3, [r0, #10]
 80109b4:	8183      	strh	r3, [r0, #12]
 80109b6:	81c3      	strh	r3, [r0, #14]
 80109b8:	8203      	strh	r3, [r0, #16]
 80109ba:	8243      	strh	r3, [r0, #18]
 80109bc:	8283      	strh	r3, [r0, #20]
 80109be:	82c3      	strh	r3, [r0, #22]
 80109c0:	6203      	str	r3, [r0, #32]
 80109c2:	8483      	strh	r3, [r0, #36]	; 0x24
 80109c4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80109c6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80109ca:	6343      	str	r3, [r0, #52]	; 0x34
 80109cc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80109d0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80109d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80109d8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80109dc:	4b09      	ldr	r3, [pc, #36]	; (8010a04 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80109de:	4628      	mov	r0, r5
 80109e0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80109e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80109e6:	4a08      	ldr	r2, [pc, #32]	; (8010a08 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80109e8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80109ec:	4798      	blx	r3
 80109ee:	6863      	ldr	r3, [r4, #4]
 80109f0:	4628      	mov	r0, r5
 80109f2:	4631      	mov	r1, r6
 80109f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f6:	4798      	blx	r3
 80109f8:	4620      	mov	r0, r4
 80109fa:	bd70      	pop	{r4, r5, r6, pc}
 80109fc:	0801e618 	.word	0x0801e618
 8010a00:	0801d480 	.word	0x0801d480
 8010a04:	24006bb2 	.word	0x24006bb2
 8010a08:	24006bb0 	.word	0x24006bb0

08010a0c <_ZN8touchgfx6Screen4drawEv>:
 8010a0c:	4b09      	ldr	r3, [pc, #36]	; (8010a34 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8010a0e:	b507      	push	{r0, r1, r2, lr}
 8010a10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010a14:	2100      	movs	r1, #0
 8010a16:	4b08      	ldr	r3, [pc, #32]	; (8010a38 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8010a18:	9100      	str	r1, [sp, #0]
 8010a1a:	4669      	mov	r1, sp
 8010a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a20:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010a24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010a28:	6803      	ldr	r3, [r0, #0]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	4798      	blx	r3
 8010a2e:	b003      	add	sp, #12
 8010a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a34:	24006bb0 	.word	0x24006bb0
 8010a38:	24006bb2 	.word	0x24006bb2

08010a3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8010a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a40:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010a44:	b089      	sub	sp, #36	; 0x24
 8010a46:	4680      	mov	r8, r0
 8010a48:	460c      	mov	r4, r1
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	4615      	mov	r5, r2
 8010a4e:	dd0e      	ble.n	8010a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010a50:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	dd0a      	ble.n	8010a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010a58:	4628      	mov	r0, r5
 8010a5a:	f7ff ff5b 	bl	8010914 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010a5e:	4621      	mov	r1, r4
 8010a60:	f7fe fcd0 	bl	800f404 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010a64:	69eb      	ldr	r3, [r5, #28]
 8010a66:	b928      	cbnz	r0, 8010a74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8010a68:	461d      	mov	r5, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1f4      	bne.n	8010a58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8010a6e:	b009      	add	sp, #36	; 0x24
 8010a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a74:	ae04      	add	r6, sp, #16
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f000 80b5 	beq.w	8010be6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010a7c:	682b      	ldr	r3, [r5, #0]
 8010a7e:	4629      	mov	r1, r5
 8010a80:	a802      	add	r0, sp, #8
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	4798      	blx	r3
 8010a86:	4628      	mov	r0, r5
 8010a88:	f7ff ff60 	bl	801094c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010a8c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8010a90:	4407      	add	r7, r0
 8010a92:	4628      	mov	r0, r5
 8010a94:	f7ff ff6e 	bl	8010974 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010a98:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010a9c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010aa0:	b23f      	sxth	r7, r7
 8010aa2:	4418      	add	r0, r3
 8010aa4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010aa8:	4621      	mov	r1, r4
 8010aaa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010aae:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010ab8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8010abc:	f7fa fe1c 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	f7ff ff27 	bl	8010914 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010ac6:	ab06      	add	r3, sp, #24
 8010ac8:	4602      	mov	r2, r0
 8010aca:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010ace:	e883 0003 	stmia.w	r3, {r0, r1}
 8010ad2:	4611      	mov	r1, r2
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fa fe0f 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 8010ada:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010ade:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010ae2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8010ae6:	4299      	cmp	r1, r3
 8010ae8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8010aec:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8010af0:	d10b      	bne.n	8010b0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010af2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010af6:	4552      	cmp	r2, sl
 8010af8:	d107      	bne.n	8010b0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010afa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010afe:	455a      	cmp	r2, fp
 8010b00:	d103      	bne.n	8010b0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010b02:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010b06:	454a      	cmp	r2, r9
 8010b08:	d06d      	beq.n	8010be6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010b0a:	f1bb 0f00 	cmp.w	fp, #0
 8010b0e:	dd65      	ble.n	8010bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8010b10:	f1b9 0f00 	cmp.w	r9, #0
 8010b14:	dd62      	ble.n	8010bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8010b16:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010b1a:	fa1f f08a 	uxth.w	r0, sl
 8010b1e:	4552      	cmp	r2, sl
 8010b20:	9000      	str	r0, [sp, #0]
 8010b22:	da12      	bge.n	8010b4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8010b24:	9301      	str	r3, [sp, #4]
 8010b26:	9b00      	ldr	r3, [sp, #0]
 8010b28:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010b2c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010b30:	1a9a      	subs	r2, r3, r2
 8010b32:	f8ad 1010 	strh.w	r1, [sp, #16]
 8010b36:	4631      	mov	r1, r6
 8010b38:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010b3c:	4640      	mov	r0, r8
 8010b3e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8010b42:	69ea      	ldr	r2, [r5, #28]
 8010b44:	f7ff ff7a 	bl	8010a3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010b48:	9b01      	ldr	r3, [sp, #4]
 8010b4a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010b4e:	b29f      	uxth	r7, r3
 8010b50:	429a      	cmp	r2, r3
 8010b52:	da0d      	bge.n	8010b70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8010b54:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010b58:	1aba      	subs	r2, r7, r2
 8010b5a:	f8ad a012 	strh.w	sl, [sp, #18]
 8010b5e:	4631      	mov	r1, r6
 8010b60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010b64:	4640      	mov	r0, r8
 8010b66:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010b6a:	69ea      	ldr	r2, [r5, #28]
 8010b6c:	f7ff ff66 	bl	8010a3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010b70:	8822      	ldrh	r2, [r4, #0]
 8010b72:	445f      	add	r7, fp
 8010b74:	88a3      	ldrh	r3, [r4, #4]
 8010b76:	b2bf      	uxth	r7, r7
 8010b78:	4413      	add	r3, r2
 8010b7a:	b23a      	sxth	r2, r7
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	b219      	sxth	r1, r3
 8010b80:	4291      	cmp	r1, r2
 8010b82:	dd0d      	ble.n	8010ba0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8010b84:	1bdb      	subs	r3, r3, r7
 8010b86:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010b8a:	f8ad a012 	strh.w	sl, [sp, #18]
 8010b8e:	4631      	mov	r1, r6
 8010b90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010b94:	4640      	mov	r0, r8
 8010b96:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010b9a:	69ea      	ldr	r2, [r5, #28]
 8010b9c:	f7ff ff4e 	bl	8010a3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010ba0:	88e2      	ldrh	r2, [r4, #6]
 8010ba2:	8863      	ldrh	r3, [r4, #2]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	9a00      	ldr	r2, [sp, #0]
 8010ba8:	444a      	add	r2, r9
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	fa1f f982 	uxth.w	r9, r2
 8010bb0:	b219      	sxth	r1, r3
 8010bb2:	fa0f f289 	sxth.w	r2, r9
 8010bb6:	428a      	cmp	r2, r1
 8010bb8:	da15      	bge.n	8010be6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010bba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010bbe:	eba3 0309 	sub.w	r3, r3, r9
 8010bc2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010bc6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010bca:	4631      	mov	r1, r6
 8010bcc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010bd0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010bd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010bd8:	69ea      	ldr	r2, [r5, #28]
 8010bda:	e001      	b.n	8010be0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8010bdc:	69ea      	ldr	r2, [r5, #28]
 8010bde:	4621      	mov	r1, r4
 8010be0:	4640      	mov	r0, r8
 8010be2:	f7ff ff2b 	bl	8010a3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010be6:	4628      	mov	r0, r5
 8010be8:	f7ff fe94 	bl	8010914 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010bec:	6861      	ldr	r1, [r4, #4]
 8010bee:	4602      	mov	r2, r0
 8010bf0:	4633      	mov	r3, r6
 8010bf2:	6820      	ldr	r0, [r4, #0]
 8010bf4:	c303      	stmia	r3!, {r0, r1}
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	f7fa fd7d 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 8010bfe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f77f af33 	ble.w	8010a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010c08:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	f77f af2e 	ble.w	8010a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010c12:	4628      	mov	r0, r5
 8010c14:	f7ff fe9a 	bl	801094c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010c18:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010c1c:	1a18      	subs	r0, r3, r0
 8010c1e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010c22:	4628      	mov	r0, r5
 8010c24:	f7ff fea6 	bl	8010974 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010c28:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	1a18      	subs	r0, r3, r0
 8010c30:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010c34:	4628      	mov	r0, r5
 8010c36:	682b      	ldr	r3, [r5, #0]
 8010c38:	689b      	ldr	r3, [r3, #8]
 8010c3a:	4798      	blx	r3
 8010c3c:	e717      	b.n	8010a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08010c3e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8010c3e:	b570      	push	{r4, r5, r6, lr}
 8010c40:	1d06      	adds	r6, r0, #4
 8010c42:	b086      	sub	sp, #24
 8010c44:	460c      	mov	r4, r1
 8010c46:	2300      	movs	r3, #0
 8010c48:	4631      	mov	r1, r6
 8010c4a:	4605      	mov	r5, r0
 8010c4c:	a802      	add	r0, sp, #8
 8010c4e:	9301      	str	r3, [sp, #4]
 8010c50:	f7ff fc7c 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010c54:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010c58:	8822      	ldrh	r2, [r4, #0]
 8010c5a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8010c5e:	1ad2      	subs	r2, r2, r3
 8010c60:	8863      	ldrh	r3, [r4, #2]
 8010c62:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010c66:	1a5b      	subs	r3, r3, r1
 8010c68:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8010c6c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010c70:	aa01      	add	r2, sp, #4
 8010c72:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010c76:	4630      	mov	r0, r6
 8010c78:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010c7c:	a904      	add	r1, sp, #16
 8010c7e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010c82:	f7fa fe11 	bl	800b8a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8010c86:	9a01      	ldr	r2, [sp, #4]
 8010c88:	b11a      	cbz	r2, 8010c92 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8010c8a:	4621      	mov	r1, r4
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f7ff fed5 	bl	8010a3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010c92:	b006      	add	sp, #24
 8010c94:	bd70      	pop	{r4, r5, r6, pc}

08010c96 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010c96:	4602      	mov	r2, r0
 8010c98:	b530      	push	{r4, r5, lr}
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	b085      	sub	sp, #20
 8010c9e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8010ca2:	460d      	mov	r5, r1
 8010ca4:	466b      	mov	r3, sp
 8010ca6:	6851      	ldr	r1, [r2, #4]
 8010ca8:	c303      	stmia	r3!, {r0, r1}
 8010caa:	4629      	mov	r1, r5
 8010cac:	4668      	mov	r0, sp
 8010cae:	f7fa fd23 	bl	800b6f8 <_ZN8touchgfx4RectaNERKS0_>
 8010cb2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010cb6:	b12b      	cbz	r3, 8010cc4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8010cb8:	4669      	mov	r1, sp
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f7ff ffbf 	bl	8010c3e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8010cc0:	b005      	add	sp, #20
 8010cc2:	bd30      	pop	{r4, r5, pc}
 8010cc4:	3404      	adds	r4, #4
 8010cc6:	a802      	add	r0, sp, #8
 8010cc8:	4621      	mov	r1, r4
 8010cca:	f7ff fc3f 	bl	801054c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010cce:	f8bd 3000 	ldrh.w	r3, [sp]
 8010cd2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010cd6:	4669      	mov	r1, sp
 8010cd8:	4620      	mov	r0, r4
 8010cda:	1a9b      	subs	r3, r3, r2
 8010cdc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010ce0:	f8ad 3000 	strh.w	r3, [sp]
 8010ce4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010ce8:	1a9b      	subs	r3, r3, r2
 8010cea:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010cee:	f7fa fda2 	bl	800b836 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8010cf2:	e7e5      	b.n	8010cc0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08010cf4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	680a      	ldr	r2, [r1, #0]
 8010cf8:	1d01      	adds	r1, r0, #4
 8010cfa:	6992      	ldr	r2, [r2, #24]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	4710      	bx	r2

08010d00 <_ZN8touchgfx12TextProviderC1Ev>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	2500      	movs	r5, #0
 8010d04:	2302      	movs	r3, #2
 8010d06:	4604      	mov	r4, r0
 8010d08:	220e      	movs	r2, #14
 8010d0a:	7403      	strb	r3, [r0, #16]
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	6145      	str	r5, [r0, #20]
 8010d10:	7605      	strb	r5, [r0, #24]
 8010d12:	83c5      	strh	r5, [r0, #30]
 8010d14:	8405      	strh	r5, [r0, #32]
 8010d16:	86c5      	strh	r5, [r0, #54]	; 0x36
 8010d18:	8705      	strh	r5, [r0, #56]	; 0x38
 8010d1a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8010d1c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8010d20:	e9c0 5500 	strd	r5, r5, [r0]
 8010d24:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8010d28:	304c      	adds	r0, #76	; 0x4c
 8010d2a:	f00a fa43 	bl	801b1b4 <memset>
 8010d2e:	2301      	movs	r3, #1
 8010d30:	4620      	mov	r0, r4
 8010d32:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8010d36:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8010d3a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8010d3e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8010d42:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8010d46:	f7f2 fdb7 	bl	80038b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	bd38      	pop	{r3, r4, r5, pc}

08010d4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010d4e:	b530      	push	{r4, r5, lr}
 8010d50:	2500      	movs	r5, #0
 8010d52:	2401      	movs	r4, #1
 8010d54:	6843      	ldr	r3, [r0, #4]
 8010d56:	b913      	cbnz	r3, 8010d5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8010d58:	6803      	ldr	r3, [r0, #0]
 8010d5a:	b313      	cbz	r3, 8010da2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010d5c:	6043      	str	r3, [r0, #4]
 8010d5e:	7e03      	ldrb	r3, [r0, #24]
 8010d60:	b143      	cbz	r3, 8010d74 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8010d62:	6943      	ldr	r3, [r0, #20]
 8010d64:	b12b      	cbz	r3, 8010d72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010d66:	881a      	ldrh	r2, [r3, #0]
 8010d68:	b11a      	cbz	r2, 8010d72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010d6a:	1c9a      	adds	r2, r3, #2
 8010d6c:	6142      	str	r2, [r0, #20]
 8010d6e:	8818      	ldrh	r0, [r3, #0]
 8010d70:	bd30      	pop	{r4, r5, pc}
 8010d72:	7605      	strb	r5, [r0, #24]
 8010d74:	6843      	ldr	r3, [r0, #4]
 8010d76:	8819      	ldrh	r1, [r3, #0]
 8010d78:	b199      	cbz	r1, 8010da2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010d7a:	1c9a      	adds	r2, r3, #2
 8010d7c:	2902      	cmp	r1, #2
 8010d7e:	6042      	str	r2, [r0, #4]
 8010d80:	d1f5      	bne.n	8010d6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8010d82:	7c03      	ldrb	r3, [r0, #16]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	d8e5      	bhi.n	8010d54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010d88:	1c5a      	adds	r2, r3, #1
 8010d8a:	3302      	adds	r3, #2
 8010d8c:	7402      	strb	r2, [r0, #16]
 8010d8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010d92:	6143      	str	r3, [r0, #20]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d0dd      	beq.n	8010d54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010d98:	881b      	ldrh	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d0da      	beq.n	8010d54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010d9e:	7604      	strb	r4, [r0, #24]
 8010da0:	e7d8      	b.n	8010d54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010da2:	2000      	movs	r0, #0
 8010da4:	e7e4      	b.n	8010d70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08010da6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8010da6:	b430      	push	{r4, r5}
 8010da8:	6815      	ldr	r5, [r2, #0]
 8010daa:	6085      	str	r5, [r0, #8]
 8010dac:	6852      	ldr	r2, [r2, #4]
 8010dae:	6443      	str	r3, [r0, #68]	; 0x44
 8010db0:	60c2      	str	r2, [r0, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	9b02      	ldr	r3, [sp, #8]
 8010db6:	7402      	strb	r2, [r0, #16]
 8010db8:	6001      	str	r1, [r0, #0]
 8010dba:	6483      	str	r3, [r0, #72]	; 0x48
 8010dbc:	6042      	str	r2, [r0, #4]
 8010dbe:	6142      	str	r2, [r0, #20]
 8010dc0:	7602      	strb	r2, [r0, #24]
 8010dc2:	8702      	strh	r2, [r0, #56]	; 0x38
 8010dc4:	8402      	strh	r2, [r0, #32]
 8010dc6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8010dca:	bc30      	pop	{r4, r5}
 8010dcc:	f7f2 bd74 	b.w	80038b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08010dd0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dd2:	4605      	mov	r5, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	b1f1      	cbz	r1, 8010e16 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8010dd8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8010ddc:	460b      	mov	r3, r1
 8010dde:	f101 0708 	add.w	r7, r1, #8
 8010de2:	4622      	mov	r2, r4
 8010de4:	6818      	ldr	r0, [r3, #0]
 8010de6:	3308      	adds	r3, #8
 8010de8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010dec:	4626      	mov	r6, r4
 8010dee:	42bb      	cmp	r3, r7
 8010df0:	c603      	stmia	r6!, {r0, r1}
 8010df2:	4634      	mov	r4, r6
 8010df4:	d1f6      	bne.n	8010de4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8010df6:	6818      	ldr	r0, [r3, #0]
 8010df8:	6030      	str	r0, [r6, #0]
 8010dfa:	4610      	mov	r0, r2
 8010dfc:	889b      	ldrh	r3, [r3, #4]
 8010dfe:	80b3      	strh	r3, [r6, #4]
 8010e00:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8010e04:	015b      	lsls	r3, r3, #5
 8010e06:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010e0a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8010e0e:	430b      	orrs	r3, r1
 8010e10:	425b      	negs	r3, r3
 8010e12:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8010e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e18 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010e18:	b538      	push	{r3, r4, r5, lr}
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	6811      	ldr	r1, [r2, #0]
 8010e1e:	4610      	mov	r0, r2
 8010e20:	68cd      	ldr	r5, [r1, #12]
 8010e22:	4619      	mov	r1, r3
 8010e24:	47a8      	blx	r5
 8010e26:	2800      	cmp	r0, #0
 8010e28:	bf08      	it	eq
 8010e2a:	4620      	moveq	r0, r4
 8010e2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010e30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8010e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e32:	4604      	mov	r4, r0
 8010e34:	4615      	mov	r5, r2
 8010e36:	4608      	mov	r0, r1
 8010e38:	b93a      	cbnz	r2, 8010e4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8010e3a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8010e3e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8010e42:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8010e46:	4628      	mov	r0, r5
 8010e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e4a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8010e4e:	8893      	ldrh	r3, [r2, #4]
 8010e50:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8010e54:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8010e58:	79ee      	ldrb	r6, [r5, #7]
 8010e5a:	4316      	orrs	r6, r2
 8010e5c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8010e60:	189a      	adds	r2, r3, r2
 8010e62:	b2b7      	uxth	r7, r6
 8010e64:	b291      	uxth	r1, r2
 8010e66:	291d      	cmp	r1, #29
 8010e68:	f200 8084 	bhi.w	8010f74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	10f6      	asrs	r6, r6, #3
 8010e70:	408a      	lsls	r2, r1
 8010e72:	4978      	ldr	r1, [pc, #480]	; (8011054 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8010e74:	420a      	tst	r2, r1
 8010e76:	d12e      	bne.n	8010ed6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8010e78:	f412 7f60 	tst.w	r2, #896	; 0x380
 8010e7c:	d07a      	beq.n	8010f74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010e7e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8010e82:	462b      	mov	r3, r5
 8010e84:	f105 0e08 	add.w	lr, r5, #8
 8010e88:	4615      	mov	r5, r2
 8010e8a:	6818      	ldr	r0, [r3, #0]
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010e92:	4694      	mov	ip, r2
 8010e94:	4573      	cmp	r3, lr
 8010e96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010e9a:	4662      	mov	r2, ip
 8010e9c:	d1f5      	bne.n	8010e8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8010e9e:	6818      	ldr	r0, [r3, #0]
 8010ea0:	f8cc 0000 	str.w	r0, [ip]
 8010ea4:	889b      	ldrh	r3, [r3, #4]
 8010ea6:	f8ac 3004 	strh.w	r3, [ip, #4]
 8010eaa:	b2b3      	uxth	r3, r6
 8010eac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010eb0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8010eb4:	1aca      	subs	r2, r1, r3
 8010eb6:	1bcf      	subs	r7, r1, r7
 8010eb8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8010ebc:	b292      	uxth	r2, r2
 8010ebe:	1afb      	subs	r3, r7, r3
 8010ec0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8010ec4:	10d2      	asrs	r2, r2, #3
 8010ec6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8010eca:	4302      	orrs	r2, r0
 8010ecc:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8010ed0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8010ed4:	e7b7      	b.n	8010e46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010ed6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010ed8:	b92b      	cbnz	r3, 8010ee6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8010eda:	4b5f      	ldr	r3, [pc, #380]	; (8011058 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8010edc:	21c0      	movs	r1, #192	; 0xc0
 8010ede:	4a5f      	ldr	r2, [pc, #380]	; (801105c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8010ee0:	485f      	ldr	r0, [pc, #380]	; (8011060 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8010ee2:	f00a f8db 	bl	801b09c <__assert_func>
 8010ee6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010ee8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010eec:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8010eee:	f640 6333 	movw	r3, #3635	; 0xe33
 8010ef2:	4299      	cmp	r1, r3
 8010ef4:	d110      	bne.n	8010f18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8010ef6:	6803      	ldr	r3, [r0, #0]
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	4798      	blx	r3
 8010efc:	7b41      	ldrb	r1, [r0, #13]
 8010efe:	00cb      	lsls	r3, r1, #3
 8010f00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010f04:	7a03      	ldrb	r3, [r0, #8]
 8010f06:	0648      	lsls	r0, r1, #25
 8010f08:	ea43 0302 	orr.w	r3, r3, r2
 8010f0c:	bf44      	itt	mi
 8010f0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010f12:	b21b      	sxthmi	r3, r3
 8010f14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010f18:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010f1c:	462a      	mov	r2, r5
 8010f1e:	f105 0c08 	add.w	ip, r5, #8
 8010f22:	443b      	add	r3, r7
 8010f24:	4433      	add	r3, r6
 8010f26:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	4635      	mov	r5, r6
 8010f2e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010f32:	6810      	ldr	r0, [r2, #0]
 8010f34:	3208      	adds	r2, #8
 8010f36:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010f3a:	4637      	mov	r7, r6
 8010f3c:	4562      	cmp	r2, ip
 8010f3e:	c703      	stmia	r7!, {r0, r1}
 8010f40:	463e      	mov	r6, r7
 8010f42:	d1f6      	bne.n	8010f32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8010f44:	6810      	ldr	r0, [r2, #0]
 8010f46:	6038      	str	r0, [r7, #0]
 8010f48:	8892      	ldrh	r2, [r2, #4]
 8010f4a:	80ba      	strh	r2, [r7, #4]
 8010f4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010f50:	10db      	asrs	r3, r3, #3
 8010f52:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8010f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010f5e:	4313      	orrs	r3, r2
 8010f60:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8010f64:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8010f68:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8010f6c:	1a9b      	subs	r3, r3, r2
 8010f6e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8010f72:	e768      	b.n	8010e46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010f74:	f023 0204 	bic.w	r2, r3, #4
 8010f78:	f640 611b 	movw	r1, #3611	; 0xe1b
 8010f7c:	428a      	cmp	r2, r1
 8010f7e:	d003      	beq.n	8010f88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8010f80:	f640 621d 	movw	r2, #3613	; 0xe1d
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d120      	bne.n	8010fca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8010f88:	3b01      	subs	r3, #1
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	4620      	mov	r0, r4
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	f7ff ff41 	bl	8010e18 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010f96:	7b41      	ldrb	r1, [r0, #13]
 8010f98:	00cb      	lsls	r3, r1, #3
 8010f9a:	0649      	lsls	r1, r1, #25
 8010f9c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010fa0:	7a03      	ldrb	r3, [r0, #8]
 8010fa2:	ea43 0302 	orr.w	r3, r3, r2
 8010fa6:	bf44      	itt	mi
 8010fa8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010fac:	b21b      	sxthmi	r3, r3
 8010fae:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010fb2:	7b6b      	ldrb	r3, [r5, #13]
 8010fb4:	7aaa      	ldrb	r2, [r5, #10]
 8010fb6:	005b      	lsls	r3, r3, #1
 8010fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	115a      	asrs	r2, r3, #5
 8010fc0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8010fc4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8010fc8:	e035      	b.n	8011036 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8010fca:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8010fce:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8010fd2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8010fd6:	7a2a      	ldrb	r2, [r5, #8]
 8010fd8:	ea42 0201 	orr.w	r2, r2, r1
 8010fdc:	f640 6109 	movw	r1, #3593	; 0xe09
 8010fe0:	bf1c      	itt	ne
 8010fe2:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8010fe6:	b212      	sxthne	r2, r2
 8010fe8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8010fec:	f023 0210 	bic.w	r2, r3, #16
 8010ff0:	428a      	cmp	r2, r1
 8010ff2:	d003      	beq.n	8010ffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8010ff4:	f640 6213 	movw	r2, #3603	; 0xe13
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d129      	bne.n	8011050 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8010ffc:	7b6e      	ldrb	r6, [r5, #13]
 8010ffe:	4629      	mov	r1, r5
 8011000:	0076      	lsls	r6, r6, #1
 8011002:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8011006:	7aae      	ldrb	r6, [r5, #10]
 8011008:	4316      	orrs	r6, r2
 801100a:	f640 6213 	movw	r2, #3603	; 0xe13
 801100e:	4293      	cmp	r3, r2
 8011010:	4602      	mov	r2, r0
 8011012:	4620      	mov	r0, r4
 8011014:	bf16      	itet	ne
 8011016:	f103 33ff 	addne.w	r3, r3, #4294967295
 801101a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801101e:	b29b      	uxthne	r3, r3
 8011020:	f7ff fefa 	bl	8010e18 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011024:	7b43      	ldrb	r3, [r0, #13]
 8011026:	7a82      	ldrb	r2, [r0, #10]
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801102e:	4313      	orrs	r3, r2
 8011030:	1af6      	subs	r6, r6, r3
 8011032:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8011036:	7b69      	ldrb	r1, [r5, #13]
 8011038:	00cb      	lsls	r3, r1, #3
 801103a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801103e:	7a2b      	ldrb	r3, [r5, #8]
 8011040:	4313      	orrs	r3, r2
 8011042:	064a      	lsls	r2, r1, #25
 8011044:	bf44      	itt	mi
 8011046:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801104a:	b21b      	sxthmi	r3, r3
 801104c:	1bdb      	subs	r3, r3, r7
 801104e:	e73f      	b.n	8010ed0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8011050:	2300      	movs	r3, #0
 8011052:	e7b7      	b.n	8010fc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8011054:	3fc00079 	.word	0x3fc00079
 8011058:	0801cecc 	.word	0x0801cecc
 801105c:	0801e873 	.word	0x0801e873
 8011060:	0801cf9e 	.word	0x0801cf9e

08011064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8011064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011068:	4604      	mov	r4, r0
 801106a:	b942      	cbnz	r2, 801107e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801106c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011070:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8011074:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011078:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801107c:	e046      	b.n	801110c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801107e:	7b51      	ldrb	r1, [r2, #13]
 8011080:	8893      	ldrh	r3, [r2, #4]
 8011082:	010f      	lsls	r7, r1, #4
 8011084:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8011088:	79d7      	ldrb	r7, [r2, #7]
 801108a:	4307      	orrs	r7, r0
 801108c:	2f04      	cmp	r7, #4
 801108e:	b2bd      	uxth	r5, r7
 8011090:	bfcc      	ite	gt
 8011092:	08bf      	lsrgt	r7, r7, #2
 8011094:	2701      	movle	r7, #1
 8011096:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801109a:	f200 80ab 	bhi.w	80111f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801109e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80110a2:	4283      	cmp	r3, r0
 80110a4:	d216      	bcs.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80110a6:	f240 605b 	movw	r0, #1627	; 0x65b
 80110aa:	4283      	cmp	r3, r0
 80110ac:	d859      	bhi.n	8011162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80110ae:	f240 6057 	movw	r0, #1623	; 0x657
 80110b2:	4283      	cmp	r3, r0
 80110b4:	d20e      	bcs.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80110b6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80110ba:	d24a      	bcs.n	8011152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80110bc:	f240 604e 	movw	r0, #1614	; 0x64e
 80110c0:	4283      	cmp	r3, r0
 80110c2:	d207      	bcs.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80110c4:	f240 601a 	movw	r0, #1562	; 0x61a
 80110c8:	4283      	cmp	r3, r0
 80110ca:	d02a      	beq.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80110cc:	d821      	bhi.n	8011112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80110ce:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80110d2:	d35b      	bcc.n	801118c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80110d4:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80110d8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80110dc:	f040 80d0 	bne.w	8011280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80110e0:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80110e4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80110e8:	f040 80ca 	bne.w	8011280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80110ec:	00cb      	lsls	r3, r1, #3
 80110ee:	0649      	lsls	r1, r1, #25
 80110f0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80110f4:	7a13      	ldrb	r3, [r2, #8]
 80110f6:	ea43 0300 	orr.w	r3, r3, r0
 80110fa:	bf44      	itt	mi
 80110fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011100:	b21b      	sxthmi	r3, r3
 8011102:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011106:	1b5d      	subs	r5, r3, r5
 8011108:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801110c:	4610      	mov	r0, r2
 801110e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011112:	f240 604b 	movw	r0, #1611	; 0x64b
 8011116:	4283      	cmp	r3, r0
 8011118:	d338      	bcc.n	801118c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801111a:	f240 604c 	movw	r0, #1612	; 0x64c
 801111e:	4283      	cmp	r3, r0
 8011120:	d9d8      	bls.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011122:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8011126:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801112a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801112e:	f040 80f2 	bne.w	8011316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8011132:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011136:	f040 80ee 	bne.w	8011316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801113a:	00cb      	lsls	r3, r1, #3
 801113c:	064e      	lsls	r6, r1, #25
 801113e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011142:	7a13      	ldrb	r3, [r2, #8]
 8011144:	ea43 0300 	orr.w	r3, r3, r0
 8011148:	bf44      	itt	mi
 801114a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801114e:	b21b      	sxthmi	r3, r3
 8011150:	e7d9      	b.n	8011106 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8011152:	f240 6054 	movw	r0, #1620	; 0x654
 8011156:	4283      	cmp	r3, r0
 8011158:	d8e3      	bhi.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801115a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801115e:	d9e0      	bls.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011160:	e7b8      	b.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011162:	f240 6074 	movw	r0, #1652	; 0x674
 8011166:	4283      	cmp	r3, r0
 8011168:	d0b4      	beq.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801116a:	d82d      	bhi.n	80111c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801116c:	f240 605e 	movw	r0, #1630	; 0x65e
 8011170:	4283      	cmp	r3, r0
 8011172:	d804      	bhi.n	801117e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8011174:	f240 605d 	movw	r0, #1629	; 0x65d
 8011178:	4283      	cmp	r3, r0
 801117a:	d3d2      	bcc.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801117c:	e7aa      	b.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801117e:	f240 605f 	movw	r0, #1631	; 0x65f
 8011182:	4283      	cmp	r3, r0
 8011184:	d0cd      	beq.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011186:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801118a:	d0a3      	beq.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801118c:	00cb      	lsls	r3, r1, #3
 801118e:	0649      	lsls	r1, r1, #25
 8011190:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011194:	7a13      	ldrb	r3, [r2, #8]
 8011196:	ea43 0300 	orr.w	r3, r3, r0
 801119a:	bf44      	itt	mi
 801119c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80111a0:	b21b      	sxthmi	r3, r3
 80111a2:	1b5d      	subs	r5, r3, r5
 80111a4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80111a8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80111ac:	7b53      	ldrb	r3, [r2, #13]
 80111ae:	015b      	lsls	r3, r3, #5
 80111b0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80111b4:	7993      	ldrb	r3, [r2, #6]
 80111b6:	430b      	orrs	r3, r1
 80111b8:	2105      	movs	r1, #5
 80111ba:	005b      	lsls	r3, r3, #1
 80111bc:	fb93 f3f1 	sdiv	r3, r3, r1
 80111c0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80111c4:	440b      	add	r3, r1
 80111c6:	e757      	b.n	8011078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80111c8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80111cc:	4283      	cmp	r3, r0
 80111ce:	d809      	bhi.n	80111e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80111d0:	f240 60df 	movw	r0, #1759	; 0x6df
 80111d4:	4283      	cmp	r3, r0
 80111d6:	f4bf af7d 	bcs.w	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80111da:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80111de:	2b05      	cmp	r3, #5
 80111e0:	d8d4      	bhi.n	801118c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80111e2:	e777      	b.n	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80111e4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80111e8:	4283      	cmp	r3, r0
 80111ea:	d09a      	beq.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80111ec:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80111f0:	4283      	cmp	r3, r0
 80111f2:	e7ca      	b.n	801118a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 80111f4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80111f8:	d22b      	bcs.n	8011252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 80111fa:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80111fe:	4283      	cmp	r3, r0
 8011200:	d28f      	bcs.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011202:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011206:	4283      	cmp	r3, r0
 8011208:	d816      	bhi.n	8011238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801120a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801120e:	4283      	cmp	r3, r0
 8011210:	f4bf af60 	bcs.w	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011214:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8011218:	4283      	cmp	r3, r0
 801121a:	d80a      	bhi.n	8011232 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801121c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8011220:	4283      	cmp	r3, r0
 8011222:	f4bf af57 	bcs.w	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011226:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801122a:	4283      	cmp	r3, r0
 801122c:	f43f af79 	beq.w	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011230:	e7ac      	b.n	801118c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8011232:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8011236:	e7f8      	b.n	801122a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8011238:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801123c:	4283      	cmp	r3, r0
 801123e:	d802      	bhi.n	8011246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8011240:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011244:	e798      	b.n	8011178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8011246:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801124a:	4283      	cmp	r3, r0
 801124c:	f47f af42 	bne.w	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011250:	e767      	b.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011252:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8011256:	4283      	cmp	r3, r0
 8011258:	f43f af63 	beq.w	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801125c:	d802      	bhi.n	8011264 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801125e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8011262:	e7f2      	b.n	801124a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8011264:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8011268:	4283      	cmp	r3, r0
 801126a:	d805      	bhi.n	8011278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801126c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8011270:	4283      	cmp	r3, r0
 8011272:	f4ff af2f 	bcc.w	80110d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011276:	e754      	b.n	8011122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011278:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801127c:	4283      	cmp	r3, r0
 801127e:	e7af      	b.n	80111e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8011280:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8011284:	4617      	mov	r7, r2
 8011286:	f102 0808 	add.w	r8, r2, #8
 801128a:	4666      	mov	r6, ip
 801128c:	6838      	ldr	r0, [r7, #0]
 801128e:	3708      	adds	r7, #8
 8011290:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8011294:	46e6      	mov	lr, ip
 8011296:	4547      	cmp	r7, r8
 8011298:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801129c:	46f4      	mov	ip, lr
 801129e:	d1f5      	bne.n	801128c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80112a0:	6838      	ldr	r0, [r7, #0]
 80112a2:	f8ce 0000 	str.w	r0, [lr]
 80112a6:	88b9      	ldrh	r1, [r7, #4]
 80112a8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80112ac:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80112b0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80112b4:	d009      	beq.n	80112ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80112b6:	7b51      	ldrb	r1, [r2, #13]
 80112b8:	7992      	ldrb	r2, [r2, #6]
 80112ba:	0149      	lsls	r1, r1, #5
 80112bc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80112c0:	4311      	orrs	r1, r2
 80112c2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80112c6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80112ca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80112ce:	d00d      	beq.n	80112ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80112d0:	442b      	add	r3, r5
 80112d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80112dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80112e0:	10db      	asrs	r3, r3, #3
 80112e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112e6:	4313      	orrs	r3, r2
 80112e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80112ec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80112f0:	00cb      	lsls	r3, r1, #3
 80112f2:	064f      	lsls	r7, r1, #25
 80112f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80112f8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80112fc:	ea43 0302 	orr.w	r3, r3, r2
 8011300:	bf44      	itt	mi
 8011302:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011306:	b21b      	sxthmi	r3, r3
 8011308:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801130c:	1b5d      	subs	r5, r3, r5
 801130e:	4632      	mov	r2, r6
 8011310:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011314:	e6fa      	b.n	801110c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8011316:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801131a:	4694      	mov	ip, r2
 801131c:	f102 0908 	add.w	r9, r2, #8
 8011320:	4676      	mov	r6, lr
 8011322:	f8dc 0000 	ldr.w	r0, [ip]
 8011326:	f10c 0c08 	add.w	ip, ip, #8
 801132a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801132e:	46f0      	mov	r8, lr
 8011330:	45cc      	cmp	ip, r9
 8011332:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8011336:	46c6      	mov	lr, r8
 8011338:	d1f3      	bne.n	8011322 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801133a:	f8dc 0000 	ldr.w	r0, [ip]
 801133e:	f8c8 0000 	str.w	r0, [r8]
 8011342:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8011346:	f8a8 1004 	strh.w	r1, [r8, #4]
 801134a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801134e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011352:	d009      	beq.n	8011368 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8011354:	7b51      	ldrb	r1, [r2, #13]
 8011356:	7992      	ldrb	r2, [r2, #6]
 8011358:	0149      	lsls	r1, r1, #5
 801135a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801135e:	4311      	orrs	r1, r2
 8011360:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011364:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8011368:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801136c:	d00d      	beq.n	801138a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801136e:	1bdb      	subs	r3, r3, r7
 8011370:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011374:	b29b      	uxth	r3, r3
 8011376:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801137a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801137e:	10db      	asrs	r3, r3, #3
 8011380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011384:	4313      	orrs	r3, r2
 8011386:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801138a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801138e:	00cb      	lsls	r3, r1, #3
 8011390:	0648      	lsls	r0, r1, #25
 8011392:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011396:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801139a:	ea43 0302 	orr.w	r3, r3, r2
 801139e:	bf44      	itt	mi
 80113a0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80113a4:	b21b      	sxthmi	r3, r3
 80113a6:	e7b1      	b.n	801130c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080113a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80113a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ac:	461e      	mov	r6, r3
 80113ae:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80113b0:	4604      	mov	r4, r0
 80113b2:	4617      	mov	r7, r2
 80113b4:	b92b      	cbnz	r3, 80113c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80113b6:	4b25      	ldr	r3, [pc, #148]	; (801144c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80113b8:	21c0      	movs	r1, #192	; 0xc0
 80113ba:	4a25      	ldr	r2, [pc, #148]	; (8011450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80113bc:	4825      	ldr	r0, [pc, #148]	; (8011454 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80113be:	f009 fe6d 	bl	801b09c <__assert_func>
 80113c2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80113c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80113c8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80113cc:	f7f2 fa32 	bl	8003834 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80113d0:	4605      	mov	r5, r0
 80113d2:	b918      	cbnz	r0, 80113dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80113d4:	6030      	str	r0, [r6, #0]
 80113d6:	4628      	mov	r0, r5
 80113d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	4601      	mov	r1, r0
 80113e0:	4638      	mov	r0, r7
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	4798      	blx	r3
 80113e6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80113ea:	4602      	mov	r2, r0
 80113ec:	6030      	str	r0, [r6, #0]
 80113ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113f2:	d213      	bcs.n	801141c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 80113f4:	4643      	mov	r3, r8
 80113f6:	4639      	mov	r1, r7
 80113f8:	4620      	mov	r0, r4
 80113fa:	f7ff fe33 	bl	8011064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80113fe:	6030      	str	r0, [r6, #0]
 8011400:	6833      	ldr	r3, [r6, #0]
 8011402:	b143      	cbz	r3, 8011416 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8011404:	7b5a      	ldrb	r2, [r3, #13]
 8011406:	7a9b      	ldrb	r3, [r3, #10]
 8011408:	0052      	lsls	r2, r2, #1
 801140a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801140e:	4313      	orrs	r3, r2
 8011410:	bf0c      	ite	eq
 8011412:	2301      	moveq	r3, #1
 8011414:	2300      	movne	r3, #0
 8011416:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801141a:	e7dc      	b.n	80113d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801141c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8011420:	b29b      	uxth	r3, r3
 8011422:	2b7f      	cmp	r3, #127	; 0x7f
 8011424:	d804      	bhi.n	8011430 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8011426:	4639      	mov	r1, r7
 8011428:	4620      	mov	r0, r4
 801142a:	f7ff fd01 	bl	8010e30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801142e:	e7e6      	b.n	80113fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8011430:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8011434:	2b00      	cmp	r3, #0
 8011436:	d0e3      	beq.n	8011400 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011438:	f640 1302 	movw	r3, #2306	; 0x902
 801143c:	429d      	cmp	r5, r3
 801143e:	d1df      	bne.n	8011400 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011440:	4601      	mov	r1, r0
 8011442:	4620      	mov	r0, r4
 8011444:	f7ff fcc4 	bl	8010dd0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011448:	e7d9      	b.n	80113fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801144a:	bf00      	nop
 801144c:	0801cecc 	.word	0x0801cecc
 8011450:	0801e873 	.word	0x0801e873
 8011454:	0801cf9e 	.word	0x0801cf9e

08011458 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8011458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801145c:	461e      	mov	r6, r3
 801145e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8011460:	4604      	mov	r4, r0
 8011462:	4617      	mov	r7, r2
 8011464:	b92b      	cbnz	r3, 8011472 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8011466:	4b26      	ldr	r3, [pc, #152]	; (8011500 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8011468:	21c0      	movs	r1, #192	; 0xc0
 801146a:	4a26      	ldr	r2, [pc, #152]	; (8011504 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801146c:	4826      	ldr	r0, [pc, #152]	; (8011508 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801146e:	f009 fe15 	bl	801b09c <__assert_func>
 8011472:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011474:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011478:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801147c:	f7f2 f9da 	bl	8003834 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011480:	4605      	mov	r5, r0
 8011482:	b918      	cbnz	r0, 801148c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8011484:	6030      	str	r0, [r6, #0]
 8011486:	4628      	mov	r0, r5
 8011488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	4601      	mov	r1, r0
 8011490:	4638      	mov	r0, r7
 8011492:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8011496:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801149a:	47c8      	blx	r9
 801149c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80114a0:	4602      	mov	r2, r0
 80114a2:	6030      	str	r0, [r6, #0]
 80114a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80114a8:	d213      	bcs.n	80114d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80114aa:	4643      	mov	r3, r8
 80114ac:	4639      	mov	r1, r7
 80114ae:	4620      	mov	r0, r4
 80114b0:	f7ff fdd8 	bl	8011064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80114b4:	6030      	str	r0, [r6, #0]
 80114b6:	6833      	ldr	r3, [r6, #0]
 80114b8:	b143      	cbz	r3, 80114cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80114ba:	7b5a      	ldrb	r2, [r3, #13]
 80114bc:	7a9b      	ldrb	r3, [r3, #10]
 80114be:	0052      	lsls	r2, r2, #1
 80114c0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80114c4:	4313      	orrs	r3, r2
 80114c6:	bf0c      	ite	eq
 80114c8:	2301      	moveq	r3, #1
 80114ca:	2300      	movne	r3, #0
 80114cc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80114d0:	e7d9      	b.n	8011486 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80114d2:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	2b7f      	cmp	r3, #127	; 0x7f
 80114da:	d804      	bhi.n	80114e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80114dc:	4639      	mov	r1, r7
 80114de:	4620      	mov	r0, r4
 80114e0:	f7ff fca6 	bl	8010e30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80114e4:	e7e6      	b.n	80114b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80114e6:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d0e3      	beq.n	80114b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80114ee:	f640 1302 	movw	r3, #2306	; 0x902
 80114f2:	429d      	cmp	r5, r3
 80114f4:	d1df      	bne.n	80114b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80114f6:	4601      	mov	r1, r0
 80114f8:	4620      	mov	r0, r4
 80114fa:	f7ff fc69 	bl	8010dd0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80114fe:	e7d9      	b.n	80114b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8011500:	0801cecc 	.word	0x0801cecc
 8011504:	0801e873 	.word	0x0801e873
 8011508:	0801cf9e 	.word	0x0801cf9e

0801150c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801150c:	b510      	push	{r4, lr}
 801150e:	4604      	mov	r4, r0
 8011510:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8011514:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011516:	b9d9      	cbnz	r1, 8011550 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8011518:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801151a:	2b0a      	cmp	r3, #10
 801151c:	d037      	beq.n	801158e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801151e:	4620      	mov	r0, r4
 8011520:	f7ff fc15 	bl	8010d4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8011524:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011526:	2b09      	cmp	r3, #9
 8011528:	d906      	bls.n	8011538 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801152a:	4b19      	ldr	r3, [pc, #100]	; (8011590 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801152c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011530:	4a18      	ldr	r2, [pc, #96]	; (8011594 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8011532:	4819      	ldr	r0, [pc, #100]	; (8011598 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8011534:	f009 fdb2 	bl	801b09c <__assert_func>
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	8722      	strh	r2, [r4, #56]	; 0x38
 801153c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801153e:	4413      	add	r3, r2
 8011540:	b29b      	uxth	r3, r3
 8011542:	2b09      	cmp	r3, #9
 8011544:	bf88      	it	hi
 8011546:	3b0a      	subhi	r3, #10
 8011548:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801154c:	8458      	strh	r0, [r3, #34]	; 0x22
 801154e:	e7e3      	b.n	8011518 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8011550:	2b0a      	cmp	r3, #10
 8011552:	d01c      	beq.n	801158e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8011554:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8011556:	3901      	subs	r1, #1
 8011558:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801155c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801155e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8011562:	1c51      	adds	r1, r2, #1
 8011564:	b289      	uxth	r1, r1
 8011566:	2901      	cmp	r1, #1
 8011568:	bf8a      	itet	hi
 801156a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801156e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8011570:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8011572:	2b09      	cmp	r3, #9
 8011574:	d8d9      	bhi.n	801152a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8011576:	1c5a      	adds	r2, r3, #1
 8011578:	8722      	strh	r2, [r4, #56]	; 0x38
 801157a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801157c:	4413      	add	r3, r2
 801157e:	b29b      	uxth	r3, r3
 8011580:	2b09      	cmp	r3, #9
 8011582:	bf88      	it	hi
 8011584:	3b0a      	subhi	r3, #10
 8011586:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801158a:	8458      	strh	r0, [r3, #34]	; 0x22
 801158c:	e7c0      	b.n	8011510 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801158e:	bd10      	pop	{r4, pc}
 8011590:	0801e644 	.word	0x0801e644
 8011594:	0801e9c9 	.word	0x0801e9c9
 8011598:	0801cf9e 	.word	0x0801cf9e

0801159c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80115a0:	4604      	mov	r4, r0
 80115a2:	b92a      	cbnz	r2, 80115b0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80115a4:	4b13      	ldr	r3, [pc, #76]	; (80115f4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80115a6:	21d5      	movs	r1, #213	; 0xd5
 80115a8:	4a13      	ldr	r2, [pc, #76]	; (80115f8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80115aa:	4814      	ldr	r0, [pc, #80]	; (80115fc <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80115ac:	f009 fd76 	bl	801b09c <__assert_func>
 80115b0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80115b2:	3a01      	subs	r2, #1
 80115b4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80115b8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 80115ba:	8702      	strh	r2, [r0, #56]	; 0x38
 80115bc:	1c5a      	adds	r2, r3, #1
 80115be:	b292      	uxth	r2, r2
 80115c0:	2a09      	cmp	r2, #9
 80115c2:	bf8a      	itet	hi
 80115c4:	3b09      	subhi	r3, #9
 80115c6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80115c8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80115ca:	f7ff ff9f 	bl	801150c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80115ce:	8c23      	ldrh	r3, [r4, #32]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	bf9c      	itt	ls
 80115d4:	3301      	addls	r3, #1
 80115d6:	8423      	strhls	r3, [r4, #32]
 80115d8:	8be3      	ldrh	r3, [r4, #30]
 80115da:	b90b      	cbnz	r3, 80115e0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80115dc:	2302      	movs	r3, #2
 80115de:	83e3      	strh	r3, [r4, #30]
 80115e0:	8be3      	ldrh	r3, [r4, #30]
 80115e2:	4628      	mov	r0, r5
 80115e4:	3b01      	subs	r3, #1
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	83e3      	strh	r3, [r4, #30]
 80115ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80115ee:	8365      	strh	r5, [r4, #26]
 80115f0:	bd38      	pop	{r3, r4, r5, pc}
 80115f2:	bf00      	nop
 80115f4:	0801cecc 	.word	0x0801cecc
 80115f8:	0801e91e 	.word	0x0801e91e
 80115fc:	0801cf9e 	.word	0x0801cf9e

08011600 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8011600:	428a      	cmp	r2, r1
 8011602:	b538      	push	{r3, r4, r5, lr}
 8011604:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8011606:	d90c      	bls.n	8011622 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8011608:	b92c      	cbnz	r4, 8011616 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801160a:	4b1c      	ldr	r3, [pc, #112]	; (801167c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801160c:	21e1      	movs	r1, #225	; 0xe1
 801160e:	4a1c      	ldr	r2, [pc, #112]	; (8011680 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8011610:	481c      	ldr	r0, [pc, #112]	; (8011684 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8011612:	f009 fd43 	bl	801b09c <__assert_func>
 8011616:	3c01      	subs	r4, #1
 8011618:	4b1b      	ldr	r3, [pc, #108]	; (8011688 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801161a:	4a1c      	ldr	r2, [pc, #112]	; (801168c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801161c:	21c5      	movs	r1, #197	; 0xc5
 801161e:	8704      	strh	r4, [r0, #56]	; 0x38
 8011620:	e7f6      	b.n	8011610 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8011622:	428c      	cmp	r4, r1
 8011624:	d203      	bcs.n	801162e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8011626:	4b1a      	ldr	r3, [pc, #104]	; (8011690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8011628:	21cb      	movs	r1, #203	; 0xcb
 801162a:	4a1a      	ldr	r2, [pc, #104]	; (8011694 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801162c:	e7f0      	b.n	8011610 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801162e:	1a64      	subs	r4, r4, r1
 8011630:	250a      	movs	r5, #10
 8011632:	8704      	strh	r4, [r0, #56]	; 0x38
 8011634:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8011636:	4421      	add	r1, r4
 8011638:	b289      	uxth	r1, r1
 801163a:	2909      	cmp	r1, #9
 801163c:	bf88      	it	hi
 801163e:	390a      	subhi	r1, #10
 8011640:	86c1      	strh	r1, [r0, #54]	; 0x36
 8011642:	b1ba      	cbz	r2, 8011674 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8011644:	3a01      	subs	r2, #1
 8011646:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8011648:	b292      	uxth	r2, r2
 801164a:	2909      	cmp	r1, #9
 801164c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8011650:	d903      	bls.n	801165a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8011652:	4b11      	ldr	r3, [pc, #68]	; (8011698 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8011654:	21e6      	movs	r1, #230	; 0xe6
 8011656:	4a11      	ldr	r2, [pc, #68]	; (801169c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8011658:	e7da      	b.n	8011610 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801165a:	3101      	adds	r1, #1
 801165c:	8701      	strh	r1, [r0, #56]	; 0x38
 801165e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8011660:	b901      	cbnz	r1, 8011664 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8011662:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011664:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8011666:	3901      	subs	r1, #1
 8011668:	b289      	uxth	r1, r1
 801166a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801166c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011670:	844c      	strh	r4, [r1, #34]	; 0x22
 8011672:	e7e6      	b.n	8011642 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8011674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011678:	f7ff bf48 	b.w	801150c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801167c:	0801cecc 	.word	0x0801cecc
 8011680:	0801e6f7 	.word	0x0801e6f7
 8011684:	0801cf9e 	.word	0x0801cf9e
 8011688:	0801cfca 	.word	0x0801cfca
 801168c:	0801e7a1 	.word	0x0801e7a1
 8011690:	0801e650 	.word	0x0801e650
 8011694:	0801ea78 	.word	0x0801ea78
 8011698:	0801e65c 	.word	0x0801e65c
 801169c:	0801e66f 	.word	0x0801e66f

080116a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80116a0:	3a01      	subs	r2, #1
 80116a2:	b570      	push	{r4, r5, r6, lr}
 80116a4:	b292      	uxth	r2, r2
 80116a6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80116aa:	42b2      	cmp	r2, r6
 80116ac:	d019      	beq.n	80116e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80116ae:	8c04      	ldrh	r4, [r0, #32]
 80116b0:	f831 5b02 	ldrh.w	r5, [r1], #2
 80116b4:	4294      	cmp	r4, r2
 80116b6:	d805      	bhi.n	80116c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80116b8:	4b19      	ldr	r3, [pc, #100]	; (8011720 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80116ba:	4a1a      	ldr	r2, [pc, #104]	; (8011724 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80116bc:	21c5      	movs	r1, #197	; 0xc5
 80116be:	481a      	ldr	r0, [pc, #104]	; (8011728 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80116c0:	f009 fcec 	bl	801b09c <__assert_func>
 80116c4:	8bc4      	ldrh	r4, [r0, #30]
 80116c6:	4414      	add	r4, r2
 80116c8:	3a01      	subs	r2, #1
 80116ca:	b2a4      	uxth	r4, r4
 80116cc:	b292      	uxth	r2, r2
 80116ce:	2c01      	cmp	r4, #1
 80116d0:	bf88      	it	hi
 80116d2:	3c02      	subhi	r4, #2
 80116d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80116d8:	8b64      	ldrh	r4, [r4, #26]
 80116da:	42ac      	cmp	r4, r5
 80116dc:	d0e5      	beq.n	80116aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80116de:	2000      	movs	r0, #0
 80116e0:	bd70      	pop	{r4, r5, r6, pc}
 80116e2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80116e6:	2400      	movs	r4, #0
 80116e8:	4413      	add	r3, r2
 80116ea:	b2a2      	uxth	r2, r4
 80116ec:	429a      	cmp	r2, r3
 80116ee:	da14      	bge.n	801171a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80116f0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80116f2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80116f6:	4296      	cmp	r6, r2
 80116f8:	d802      	bhi.n	8011700 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80116fa:	4b09      	ldr	r3, [pc, #36]	; (8011720 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80116fc:	4a0b      	ldr	r2, [pc, #44]	; (801172c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80116fe:	e7dd      	b.n	80116bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8011700:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8011702:	3401      	adds	r4, #1
 8011704:	4432      	add	r2, r6
 8011706:	b292      	uxth	r2, r2
 8011708:	2a09      	cmp	r2, #9
 801170a:	bf88      	it	hi
 801170c:	3a0a      	subhi	r2, #10
 801170e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011712:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8011714:	42aa      	cmp	r2, r5
 8011716:	d0e8      	beq.n	80116ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8011718:	e7e1      	b.n	80116de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801171a:	2001      	movs	r0, #1
 801171c:	e7e0      	b.n	80116e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801171e:	bf00      	nop
 8011720:	0801cfca 	.word	0x0801cfca
 8011724:	0801eafc 	.word	0x0801eafc
 8011728:	0801cf9e 	.word	0x0801cf9e
 801172c:	0801e7a1 	.word	0x0801e7a1

08011730 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8011730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011734:	4605      	mov	r5, r0
 8011736:	4616      	mov	r6, r2
 8011738:	1c8c      	adds	r4, r1, #2
 801173a:	8809      	ldrh	r1, [r1, #0]
 801173c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8011740:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8011744:	42b3      	cmp	r3, r6
 8011746:	d124      	bne.n	8011792 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8011748:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801174c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8011750:	f001 070f 	and.w	r7, r1, #15
 8011754:	4652      	mov	r2, sl
 8011756:	f8cd 8000 	str.w	r8, [sp]
 801175a:	464b      	mov	r3, r9
 801175c:	4621      	mov	r1, r4
 801175e:	4628      	mov	r0, r5
 8011760:	f7ff ff9e 	bl	80116a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8011764:	4683      	mov	fp, r0
 8011766:	b168      	cbz	r0, 8011784 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8011768:	eb0a 0109 	add.w	r1, sl, r9
 801176c:	463a      	mov	r2, r7
 801176e:	4628      	mov	r0, r5
 8011770:	4441      	add	r1, r8
 8011772:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8011776:	4649      	mov	r1, r9
 8011778:	f7ff ff42 	bl	8011600 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801177c:	4658      	mov	r0, fp
 801177e:	b003      	add	sp, #12
 8011780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011784:	eb07 010a 	add.w	r1, r7, sl
 8011788:	4449      	add	r1, r9
 801178a:	4441      	add	r1, r8
 801178c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8011790:	e7d2      	b.n	8011738 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8011792:	f04f 0b00 	mov.w	fp, #0
 8011796:	e7f1      	b.n	801177c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08011798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	8810      	ldrh	r0, [r2, #0]
 801179c:	4298      	cmp	r0, r3
 801179e:	d817      	bhi.n	80117d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80117a0:	1e48      	subs	r0, r1, #1
 80117a2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80117a6:	4298      	cmp	r0, r3
 80117a8:	d312      	bcc.n	80117d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80117aa:	2400      	movs	r4, #0
 80117ac:	428c      	cmp	r4, r1
 80117ae:	d20f      	bcs.n	80117d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80117b0:	1860      	adds	r0, r4, r1
 80117b2:	1040      	asrs	r0, r0, #1
 80117b4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80117b8:	0085      	lsls	r5, r0, #2
 80117ba:	42b3      	cmp	r3, r6
 80117bc:	d902      	bls.n	80117c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80117be:	3001      	adds	r0, #1
 80117c0:	b284      	uxth	r4, r0
 80117c2:	e7f3      	b.n	80117ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80117c4:	d201      	bcs.n	80117ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80117c6:	b281      	uxth	r1, r0
 80117c8:	e7f0      	b.n	80117ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80117ca:	442a      	add	r2, r5
 80117cc:	8850      	ldrh	r0, [r2, #2]
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	2000      	movs	r0, #0
 80117d2:	e7fc      	b.n	80117ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080117d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80117d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80117da:	4604      	mov	r4, r0
 80117dc:	260b      	movs	r6, #11
 80117de:	886f      	ldrh	r7, [r5, #2]
 80117e0:	087f      	lsrs	r7, r7, #1
 80117e2:	3e01      	subs	r6, #1
 80117e4:	d01b      	beq.n	801181e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80117e6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80117e8:	b92b      	cbnz	r3, 80117f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80117ea:	4b0e      	ldr	r3, [pc, #56]	; (8011824 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80117ec:	21c0      	movs	r1, #192	; 0xc0
 80117ee:	4a0e      	ldr	r2, [pc, #56]	; (8011828 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80117f0:	480e      	ldr	r0, [pc, #56]	; (801182c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80117f2:	f009 fc53 	bl	801b09c <__assert_func>
 80117f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80117f8:	462a      	mov	r2, r5
 80117fa:	4639      	mov	r1, r7
 80117fc:	4620      	mov	r0, r4
 80117fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011802:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8011806:	4643      	mov	r3, r8
 8011808:	f7ff ffc6 	bl	8011798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801180c:	b138      	cbz	r0, 801181e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801180e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8011812:	4642      	mov	r2, r8
 8011814:	4620      	mov	r0, r4
 8011816:	f7ff ff8b 	bl	8011730 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801181a:	2800      	cmp	r0, #0
 801181c:	d1e1      	bne.n	80117e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801181e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011822:	bf00      	nop
 8011824:	0801cecc 	.word	0x0801cecc
 8011828:	0801e873 	.word	0x0801e873
 801182c:	0801cf9e 	.word	0x0801cf9e

08011830 <_ZN8touchgfx8ceil28_4El>:
 8011830:	f110 030f 	adds.w	r3, r0, #15
 8011834:	d401      	bmi.n	801183a <_ZN8touchgfx8ceil28_4El+0xa>
 8011836:	1118      	asrs	r0, r3, #4
 8011838:	4770      	bx	lr
 801183a:	2210      	movs	r2, #16
 801183c:	f1c0 0001 	rsb	r0, r0, #1
 8011840:	fb93 f3f2 	sdiv	r3, r3, r2
 8011844:	f010 000f 	ands.w	r0, r0, #15
 8011848:	bf18      	it	ne
 801184a:	2001      	movne	r0, #1
 801184c:	1a18      	subs	r0, r3, r0
 801184e:	4770      	bx	lr

08011850 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8011850:	2900      	cmp	r1, #0
 8011852:	b538      	push	{r3, r4, r5, lr}
 8011854:	dc05      	bgt.n	8011862 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8011856:	4b0f      	ldr	r3, [pc, #60]	; (8011894 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8011858:	21f7      	movs	r1, #247	; 0xf7
 801185a:	4a0f      	ldr	r2, [pc, #60]	; (8011898 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801185c:	480f      	ldr	r0, [pc, #60]	; (801189c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801185e:	f009 fc1d 	bl	801b09c <__assert_func>
 8011862:	2800      	cmp	r0, #0
 8011864:	db06      	blt.n	8011874 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8011866:	fb90 f4f1 	sdiv	r4, r0, r1
 801186a:	fb01 0114 	mls	r1, r1, r4, r0
 801186e:	6014      	str	r4, [r2, #0]
 8011870:	6019      	str	r1, [r3, #0]
 8011872:	bd38      	pop	{r3, r4, r5, pc}
 8011874:	4240      	negs	r0, r0
 8011876:	fb90 f4f1 	sdiv	r4, r0, r1
 801187a:	4265      	negs	r5, r4
 801187c:	fb01 0014 	mls	r0, r1, r4, r0
 8011880:	6015      	str	r5, [r2, #0]
 8011882:	6018      	str	r0, [r3, #0]
 8011884:	2800      	cmp	r0, #0
 8011886:	d0f4      	beq.n	8011872 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8011888:	6810      	ldr	r0, [r2, #0]
 801188a:	3801      	subs	r0, #1
 801188c:	6010      	str	r0, [r2, #0]
 801188e:	6818      	ldr	r0, [r3, #0]
 8011890:	1a09      	subs	r1, r1, r0
 8011892:	e7ed      	b.n	8011870 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8011894:	0801ebcd 	.word	0x0801ebcd
 8011898:	0801ec0c 	.word	0x0801ec0c
 801189c:	0801ebdd 	.word	0x0801ebdd

080118a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80118a0:	b570      	push	{r4, r5, r6, lr}
 80118a2:	694a      	ldr	r2, [r1, #20]
 80118a4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80118a6:	684b      	ldr	r3, [r1, #4]
 80118a8:	1b54      	subs	r4, r2, r5
 80118aa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80118ac:	f000 8106 	beq.w	8011abc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80118b0:	1b9b      	subs	r3, r3, r6
 80118b2:	d003      	beq.n	80118bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80118b4:	4363      	muls	r3, r4
 80118b6:	2210      	movs	r2, #16
 80118b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80118bc:	680c      	ldr	r4, [r1, #0]
 80118be:	698a      	ldr	r2, [r1, #24]
 80118c0:	1b65      	subs	r5, r4, r5
 80118c2:	f000 80fd 	beq.w	8011ac0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80118c6:	1b92      	subs	r2, r2, r6
 80118c8:	d003      	beq.n	80118d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80118ca:	436a      	muls	r2, r5
 80118cc:	2410      	movs	r4, #16
 80118ce:	fb92 f2f4 	sdiv	r2, r2, r4
 80118d2:	1a9b      	subs	r3, r3, r2
 80118d4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8011afc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80118d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118dc:	460a      	mov	r2, r1
 80118de:	ee07 3a90 	vmov	s15, r3
 80118e2:	f100 040c 	add.w	r4, r0, #12
 80118e6:	4603      	mov	r3, r0
 80118e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118ec:	ee67 7a84 	vmul.f32	s15, s15, s8
 80118f0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80118f4:	eeb1 6a43 	vneg.f32	s12, s6
 80118f8:	edd2 7a02 	vldr	s15, [r2, #8]
 80118fc:	3214      	adds	r2, #20
 80118fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011902:	ece3 6a01 	vstmia	r3!, {s13}
 8011906:	429c      	cmp	r4, r3
 8011908:	ed52 7a02 	vldr	s15, [r2, #-8]
 801190c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011910:	edc3 7a02 	vstr	s15, [r3, #8]
 8011914:	ed52 7a01 	vldr	s15, [r2, #-4]
 8011918:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801191c:	edc3 7a05 	vstr	s15, [r3, #20]
 8011920:	d1ea      	bne.n	80118f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8011922:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011924:	698b      	ldr	r3, [r1, #24]
 8011926:	edd0 4a02 	vldr	s9, [r0, #8]
 801192a:	1a9b      	subs	r3, r3, r2
 801192c:	edd0 3a00 	vldr	s7, [r0]
 8011930:	edd0 6a01 	vldr	s13, [r0, #4]
 8011934:	ee07 3a90 	vmov	s15, r3
 8011938:	684b      	ldr	r3, [r1, #4]
 801193a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801193e:	ed90 5a05 	vldr	s10, [r0, #20]
 8011942:	1a9b      	subs	r3, r3, r2
 8011944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011948:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801194c:	ed90 2a03 	vldr	s4, [r0, #12]
 8011950:	ee07 3a10 	vmov	s14, r3
 8011954:	edd0 5a04 	vldr	s11, [r0, #16]
 8011958:	ee67 7a84 	vmul.f32	s15, s15, s8
 801195c:	ed90 1a07 	vldr	s2, [r0, #28]
 8011960:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011964:	edd0 2a06 	vldr	s5, [r0, #24]
 8011968:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801196c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8011970:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011974:	ee32 5a45 	vsub.f32	s10, s4, s10
 8011978:	eee6 7a87 	vfma.f32	s15, s13, s14
 801197c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8011980:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8011984:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8011986:	694a      	ldr	r2, [r1, #20]
 8011988:	1b13      	subs	r3, r2, r4
 801198a:	ee07 3a10 	vmov	s14, r3
 801198e:	680b      	ldr	r3, [r1, #0]
 8011990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011994:	1b1b      	subs	r3, r3, r4
 8011996:	ee27 7a04 	vmul.f32	s14, s14, s8
 801199a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801199e:	ee07 3a10 	vmov	s14, r3
 80119a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119aa:	eee6 4a87 	vfma.f32	s9, s13, s14
 80119ae:	ee64 4a86 	vmul.f32	s9, s9, s12
 80119b2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80119b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80119b8:	698b      	ldr	r3, [r1, #24]
 80119ba:	1a9b      	subs	r3, r3, r2
 80119bc:	ee06 3a90 	vmov	s13, r3
 80119c0:	684b      	ldr	r3, [r1, #4]
 80119c2:	1a9b      	subs	r3, r3, r2
 80119c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80119c8:	ee07 3a10 	vmov	s14, r3
 80119cc:	ee66 6a84 	vmul.f32	s13, s13, s8
 80119d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119d4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80119d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119dc:	eee5 6a87 	vfma.f32	s13, s11, s14
 80119e0:	ee66 6a83 	vmul.f32	s13, s13, s6
 80119e4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80119e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80119ea:	694a      	ldr	r2, [r1, #20]
 80119ec:	1b13      	subs	r3, r2, r4
 80119ee:	ee07 3a10 	vmov	s14, r3
 80119f2:	680b      	ldr	r3, [r1, #0]
 80119f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119f8:	1b1b      	subs	r3, r3, r4
 80119fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119fe:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8011a02:	ee07 3a10 	vmov	s14, r3
 8011a06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a0a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011a0e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8011a12:	edd0 5a08 	vldr	s11, [r0, #32]
 8011a16:	ee31 1a65 	vsub.f32	s2, s2, s11
 8011a1a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8011a1e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8011a22:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8011a26:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011a28:	698b      	ldr	r3, [r1, #24]
 8011a2a:	1a9b      	subs	r3, r3, r2
 8011a2c:	ee07 3a10 	vmov	s14, r3
 8011a30:	684b      	ldr	r3, [r1, #4]
 8011a32:	1a9b      	subs	r3, r3, r2
 8011a34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a38:	ee01 3a90 	vmov	s3, r3
 8011a3c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011a40:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011a44:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8011a48:	ee61 1a84 	vmul.f32	s3, s3, s8
 8011a4c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8011a50:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011a54:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8011a58:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8011a5a:	694a      	ldr	r2, [r1, #20]
 8011a5c:	1b13      	subs	r3, r2, r4
 8011a5e:	ee03 3a10 	vmov	s6, r3
 8011a62:	680b      	ldr	r3, [r1, #0]
 8011a64:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8011a68:	1b1b      	subs	r3, r3, r4
 8011a6a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011a6e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8011a72:	ee03 3a10 	vmov	s6, r3
 8011a76:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8011a7a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8011a7e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8011a82:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011a86:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8011a8a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8011a8e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8011a92:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9a:	dd13      	ble.n	8011ac4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8011a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011aa0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8011aa4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8011aa6:	eee3 7a87 	vfma.f32	s15, s7, s14
 8011aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab2:	dd15      	ble.n	8011ae0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8011ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ab8:	6403      	str	r3, [r0, #64]	; 0x40
 8011aba:	bd70      	pop	{r4, r5, r6, pc}
 8011abc:	4623      	mov	r3, r4
 8011abe:	e6fd      	b.n	80118bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8011ac0:	462a      	mov	r2, r5
 8011ac2:	e706      	b.n	80118d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8011ac4:	d502      	bpl.n	8011acc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8011ac6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011aca:	e7e9      	b.n	8011aa0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8011acc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8011ad0:	eea3 2a85 	vfma.f32	s4, s7, s10
 8011ad4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8011ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011adc:	dade      	bge.n	8011a9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8011ade:	e7f2      	b.n	8011ac6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8011ae0:	d502      	bpl.n	8011ae8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8011ae2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011ae6:	e7e7      	b.n	8011ab8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8011ae8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8011aec:	eee3 4a86 	vfma.f32	s9, s7, s12
 8011af0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8011af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af8:	dadc      	bge.n	8011ab4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8011afa:	e7f2      	b.n	8011ae2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8011afc:	3d800000 	.word	0x3d800000

08011b00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8011b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	f04f 0814 	mov.w	r8, #20
 8011b08:	4604      	mov	r4, r0
 8011b0a:	4617      	mov	r7, r2
 8011b0c:	460d      	mov	r5, r1
 8011b0e:	fb08 f903 	mul.w	r9, r8, r3
 8011b12:	461e      	mov	r6, r3
 8011b14:	eb02 0a09 	add.w	sl, r2, r9
 8011b18:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011b1c:	f7ff fe88 	bl	8011830 <_ZN8touchgfx8ceil28_4El>
 8011b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b22:	6160      	str	r0, [r4, #20]
 8011b24:	fb08 f803 	mul.w	r8, r8, r3
 8011b28:	9001      	str	r0, [sp, #4]
 8011b2a:	eb07 0b08 	add.w	fp, r7, r8
 8011b2e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8011b32:	f7ff fe7d 	bl	8011830 <_ZN8touchgfx8ceil28_4El>
 8011b36:	9a01      	ldr	r2, [sp, #4]
 8011b38:	1a80      	subs	r0, r0, r2
 8011b3a:	61a0      	str	r0, [r4, #24]
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	f000 8088 	beq.w	8011c52 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8011b42:	f857 3009 	ldr.w	r3, [r7, r9]
 8011b46:	f857 c008 	ldr.w	ip, [r7, r8]
 8011b4a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8011b4e:	ebac 0c03 	sub.w	ip, ip, r3
 8011b52:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011b56:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8011b5a:	1a40      	subs	r0, r0, r1
 8011b5c:	fb0b f202 	mul.w	r2, fp, r2
 8011b60:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8011b64:	fb0c 2211 	mls	r2, ip, r1, r2
 8011b68:	4641      	mov	r1, r8
 8011b6a:	fb00 2003 	mla	r0, r0, r3, r2
 8011b6e:	f104 0310 	add.w	r3, r4, #16
 8011b72:	4622      	mov	r2, r4
 8011b74:	3801      	subs	r0, #1
 8011b76:	4440      	add	r0, r8
 8011b78:	f7ff fe6a 	bl	8011850 <_ZN8touchgfx11floorDivModEllRlS0_>
 8011b7c:	f104 0308 	add.w	r3, r4, #8
 8011b80:	1d22      	adds	r2, r4, #4
 8011b82:	4641      	mov	r1, r8
 8011b84:	4658      	mov	r0, fp
 8011b86:	f7ff fe63 	bl	8011850 <_ZN8touchgfx11floorDivModEllRlS0_>
 8011b8a:	f8c4 800c 	str.w	r8, [r4, #12]
 8011b8e:	6962      	ldr	r2, [r4, #20]
 8011b90:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011b94:	eddf 6a31 	vldr	s13, [pc, #196]	; 8011c5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8011b98:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8011b9c:	6822      	ldr	r2, [r4, #0]
 8011b9e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8011ba2:	ee07 3a10 	vmov	s14, r3
 8011ba6:	f857 3009 	ldr.w	r3, [r7, r9]
 8011baa:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8011bae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011bb2:	ee07 3a90 	vmov	s15, r3
 8011bb6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8011bba:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bc6:	edd3 6a00 	vldr	s13, [r3]
 8011bca:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011bce:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011bd2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011bd6:	edc4 6a07 	vstr	s13, [r4, #28]
 8011bda:	edd4 6a01 	vldr	s13, [r4, #4]
 8011bde:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8011be2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011be6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8011bea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011bee:	ed84 6a08 	vstr	s12, [r4, #32]
 8011bf2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011bf4:	6262      	str	r2, [r4, #36]	; 0x24
 8011bf6:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8011bfa:	ed93 6a03 	vldr	s12, [r3, #12]
 8011bfe:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011c02:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8011c06:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011c0a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8011c0e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8011c12:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8011c16:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011c1a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8011c1e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8011c20:	6322      	str	r2, [r4, #48]	; 0x30
 8011c22:	ed93 6a06 	vldr	s12, [r3, #24]
 8011c26:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8011c2a:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011c2e:	eeb0 7a46 	vmov.f32	s14, s12
 8011c32:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8011c36:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011c3a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8011c3e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8011c42:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8011c46:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c4a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8011c4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011c50:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011c52:	4620      	mov	r0, r4
 8011c54:	b003      	add	sp, #12
 8011c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5a:	bf00      	nop
 8011c5c:	3d800000 	.word	0x3d800000

08011c60 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8011c60:	4602      	mov	r2, r0
 8011c62:	b148      	cbz	r0, 8011c78 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8011c64:	2300      	movs	r3, #0
 8011c66:	b298      	uxth	r0, r3
 8011c68:	3301      	adds	r3, #1
 8011c6a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8011c6e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8011c72:	2900      	cmp	r1, #0
 8011c74:	d1f7      	bne.n	8011c66 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8011c76:	4770      	bx	lr
 8011c78:	4770      	bx	lr

08011c7a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8011c7a:	b530      	push	{r4, r5, lr}
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	b159      	cbz	r1, 8011c98 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8011c80:	b148      	cbz	r0, 8011c96 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8011c82:	2300      	movs	r3, #0
 8011c84:	b298      	uxth	r0, r3
 8011c86:	4282      	cmp	r2, r0
 8011c88:	d905      	bls.n	8011c96 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8011c8a:	5ccd      	ldrb	r5, [r1, r3]
 8011c8c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8011c90:	3301      	adds	r3, #1
 8011c92:	2d00      	cmp	r5, #0
 8011c94:	d1f6      	bne.n	8011c84 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8011c96:	bd30      	pop	{r4, r5, pc}
 8011c98:	4608      	mov	r0, r1
 8011c9a:	e7fc      	b.n	8011c96 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08011c9c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8011c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c9e:	468c      	mov	ip, r1
 8011ca0:	b08b      	sub	sp, #44	; 0x2c
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	ae01      	add	r6, sp, #4
 8011ca6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011caa:	211f      	movs	r1, #31
 8011cac:	fbb0 f7f3 	udiv	r7, r0, r3
 8011cb0:	fb03 0517 	mls	r5, r3, r7, r0
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	b2ec      	uxtb	r4, r5
 8011cb8:	2d09      	cmp	r5, #9
 8011cba:	bfd4      	ite	le
 8011cbc:	3430      	addle	r4, #48	; 0x30
 8011cbe:	3457      	addgt	r4, #87	; 0x57
 8011cc0:	b2e4      	uxtb	r4, r4
 8011cc2:	558c      	strb	r4, [r1, r6]
 8011cc4:	1e4c      	subs	r4, r1, #1
 8011cc6:	b92f      	cbnz	r7, 8011cd4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8011cc8:	4431      	add	r1, r6
 8011cca:	4660      	mov	r0, ip
 8011ccc:	f7ff ffd5 	bl	8011c7a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8011cd0:	b00b      	add	sp, #44	; 0x2c
 8011cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	e7e9      	b.n	8011cac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08011cd8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8011cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cda:	4607      	mov	r7, r0
 8011cdc:	b08b      	sub	sp, #44	; 0x2c
 8011cde:	4608      	mov	r0, r1
 8011ce0:	b341      	cbz	r1, 8011d34 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8011ce2:	1e99      	subs	r1, r3, #2
 8011ce4:	2922      	cmp	r1, #34	; 0x22
 8011ce6:	d825      	bhi.n	8011d34 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8011ce8:	2100      	movs	r1, #0
 8011cea:	463c      	mov	r4, r7
 8011cec:	261f      	movs	r6, #31
 8011cee:	f10d 0c04 	add.w	ip, sp, #4
 8011cf2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011cf6:	1e71      	subs	r1, r6, #1
 8011cf8:	fb94 fef3 	sdiv	lr, r4, r3
 8011cfc:	fb03 441e 	mls	r4, r3, lr, r4
 8011d00:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8011d04:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8011d08:	b2ec      	uxtb	r4, r5
 8011d0a:	2d09      	cmp	r5, #9
 8011d0c:	bfd4      	ite	le
 8011d0e:	3430      	addle	r4, #48	; 0x30
 8011d10:	3457      	addgt	r4, #87	; 0x57
 8011d12:	b2e4      	uxtb	r4, r4
 8011d14:	f80c 4006 	strb.w	r4, [ip, r6]
 8011d18:	4674      	mov	r4, lr
 8011d1a:	b96c      	cbnz	r4, 8011d38 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8011d1c:	2f00      	cmp	r7, #0
 8011d1e:	da05      	bge.n	8011d2c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8011d20:	ab0a      	add	r3, sp, #40	; 0x28
 8011d22:	4419      	add	r1, r3
 8011d24:	232d      	movs	r3, #45	; 0x2d
 8011d26:	f801 3c24 	strb.w	r3, [r1, #-36]
 8011d2a:	1eb1      	subs	r1, r6, #2
 8011d2c:	3101      	adds	r1, #1
 8011d2e:	4461      	add	r1, ip
 8011d30:	f7ff ffa3 	bl	8011c7a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8011d34:	b00b      	add	sp, #44	; 0x2c
 8011d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d38:	460e      	mov	r6, r1
 8011d3a:	e7dc      	b.n	8011cf6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08011d3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8011d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d40:	b085      	sub	sp, #20
 8011d42:	4691      	mov	r9, r2
 8011d44:	6802      	ldr	r2, [r0, #0]
 8011d46:	4688      	mov	r8, r1
 8011d48:	461c      	mov	r4, r3
 8011d4a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8011d4e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8011d52:	4683      	mov	fp, r0
 8011d54:	4610      	mov	r0, r2
 8011d56:	9103      	str	r1, [sp, #12]
 8011d58:	9302      	str	r3, [sp, #8]
 8011d5a:	9201      	str	r2, [sp, #4]
 8011d5c:	f7ff ff80 	bl	8011c60 <_ZN8touchgfx7Unicode6strlenEPKt>
 8011d60:	f1b8 0f00 	cmp.w	r8, #0
 8011d64:	bf0c      	ite	eq
 8011d66:	4684      	moveq	ip, r0
 8011d68:	f100 0c01 	addne.w	ip, r0, #1
 8011d6c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8011d70:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8011d74:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011d76:	fa1f fc8c 	uxth.w	ip, ip
 8011d7a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011d7c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8011d80:	9903      	ldr	r1, [sp, #12]
 8011d82:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011d86:	d041      	beq.n	8011e0c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8011d88:	d834      	bhi.n	8011df4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8011d8a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8011d8e:	d059      	beq.n	8011e44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8011d90:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8011d94:	d03a      	beq.n	8011e0c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8011d96:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8011d9a:	d034      	beq.n	8011e06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8011d9c:	2400      	movs	r4, #0
 8011d9e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8011da2:	3a01      	subs	r2, #1
 8011da4:	b169      	cbz	r1, 8011dc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011da6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011da8:	458c      	cmp	ip, r1
 8011daa:	da09      	bge.n	8011dc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8011dac:	eba1 010c 	sub.w	r1, r1, ip
 8011db0:	b289      	uxth	r1, r1
 8011db2:	b933      	cbnz	r3, 8011dc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011db4:	2e00      	cmp	r6, #0
 8011db6:	d051      	beq.n	8011e5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d04f      	beq.n	8011e5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8011dbc:	440c      	add	r4, r1
 8011dbe:	b2a4      	uxth	r4, r4
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	682b      	ldr	r3, [r5, #0]
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	da07      	bge.n	8011dd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8011dc8:	f1b8 0f00 	cmp.w	r8, #0
 8011dcc:	d004      	beq.n	8011dd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8011dce:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8011dd2:	682b      	ldr	r3, [r5, #0]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	602b      	str	r3, [r5, #0]
 8011dd8:	2730      	movs	r7, #48	; 0x30
 8011dda:	2c00      	cmp	r4, #0
 8011ddc:	d04e      	beq.n	8011e7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011dde:	682e      	ldr	r6, [r5, #0]
 8011de0:	3c01      	subs	r4, #1
 8011de2:	42b2      	cmp	r2, r6
 8011de4:	b2a4      	uxth	r4, r4
 8011de6:	dd49      	ble.n	8011e7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011de8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8011dec:	682b      	ldr	r3, [r5, #0]
 8011dee:	3301      	adds	r3, #1
 8011df0:	602b      	str	r3, [r5, #0]
 8011df2:	e7f2      	b.n	8011dda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8011df4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8011df8:	d01d      	beq.n	8011e36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8011dfa:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8011dfe:	d002      	beq.n	8011e06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8011e00:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8011e04:	e7c9      	b.n	8011d9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8011e06:	4684      	mov	ip, r0
 8011e08:	f04f 0800 	mov.w	r8, #0
 8011e0c:	2c00      	cmp	r4, #0
 8011e0e:	d0c6      	beq.n	8011d9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011e10:	b947      	cbnz	r7, 8011e24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8011e12:	2801      	cmp	r0, #1
 8011e14:	d106      	bne.n	8011e24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8011e16:	8814      	ldrh	r4, [r2, #0]
 8011e18:	2c30      	cmp	r4, #48	; 0x30
 8011e1a:	bf02      	ittt	eq
 8011e1c:	3202      	addeq	r2, #2
 8011e1e:	4638      	moveq	r0, r7
 8011e20:	f8cb 2000 	streq.w	r2, [fp]
 8011e24:	45bc      	cmp	ip, r7
 8011e26:	da14      	bge.n	8011e52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8011e28:	b2bf      	uxth	r7, r7
 8011e2a:	eba7 040c 	sub.w	r4, r7, ip
 8011e2e:	46bc      	mov	ip, r7
 8011e30:	b2a4      	uxth	r4, r4
 8011e32:	2600      	movs	r6, #0
 8011e34:	e7b3      	b.n	8011d9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011e36:	4684      	mov	ip, r0
 8011e38:	b16c      	cbz	r4, 8011e56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8011e3a:	42b8      	cmp	r0, r7
 8011e3c:	dd00      	ble.n	8011e40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8011e3e:	b2b8      	uxth	r0, r7
 8011e40:	2400      	movs	r4, #0
 8011e42:	e003      	b.n	8011e4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8011e44:	f04f 0c01 	mov.w	ip, #1
 8011e48:	2400      	movs	r4, #0
 8011e4a:	4660      	mov	r0, ip
 8011e4c:	4626      	mov	r6, r4
 8011e4e:	46a0      	mov	r8, r4
 8011e50:	e7a5      	b.n	8011d9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011e52:	2400      	movs	r4, #0
 8011e54:	e7ed      	b.n	8011e32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8011e56:	4626      	mov	r6, r4
 8011e58:	46a0      	mov	r8, r4
 8011e5a:	e7a0      	b.n	8011d9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011e5c:	2900      	cmp	r1, #0
 8011e5e:	d0b0      	beq.n	8011dc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011e60:	2720      	movs	r7, #32
 8011e62:	682e      	ldr	r6, [r5, #0]
 8011e64:	2900      	cmp	r1, #0
 8011e66:	d0ac      	beq.n	8011dc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011e68:	3901      	subs	r1, #1
 8011e6a:	4296      	cmp	r6, r2
 8011e6c:	b289      	uxth	r1, r1
 8011e6e:	daa7      	bge.n	8011dc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8011e70:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	3301      	adds	r3, #1
 8011e78:	602b      	str	r3, [r5, #0]
 8011e7a:	e7f2      	b.n	8011e62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8011e7c:	b188      	cbz	r0, 8011ea2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8011e7e:	682b      	ldr	r3, [r5, #0]
 8011e80:	3801      	subs	r0, #1
 8011e82:	429a      	cmp	r2, r3
 8011e84:	b280      	uxth	r0, r0
 8011e86:	dd0c      	ble.n	8011ea2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8011e88:	f8db 3000 	ldr.w	r3, [fp]
 8011e8c:	1c9c      	adds	r4, r3, #2
 8011e8e:	f8cb 4000 	str.w	r4, [fp]
 8011e92:	881c      	ldrh	r4, [r3, #0]
 8011e94:	682b      	ldr	r3, [r5, #0]
 8011e96:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8011e9a:	682b      	ldr	r3, [r5, #0]
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	602b      	str	r3, [r5, #0]
 8011ea0:	e7ec      	b.n	8011e7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011ea2:	2620      	movs	r6, #32
 8011ea4:	b151      	cbz	r1, 8011ebc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8011ea6:	6828      	ldr	r0, [r5, #0]
 8011ea8:	3901      	subs	r1, #1
 8011eaa:	4282      	cmp	r2, r0
 8011eac:	b289      	uxth	r1, r1
 8011eae:	dd05      	ble.n	8011ebc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8011eb0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8011eb4:	682b      	ldr	r3, [r5, #0]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	602b      	str	r3, [r5, #0]
 8011eba:	e7f3      	b.n	8011ea4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8011ebc:	b005      	add	sp, #20
 8011ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ec2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8011ec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ec6:	2400      	movs	r4, #0
 8011ec8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8011ecc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8011ed0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8011ed4:	8014      	strh	r4, [r2, #0]
 8011ed6:	701c      	strb	r4, [r3, #0]
 8011ed8:	f888 4000 	strb.w	r4, [r8]
 8011edc:	f88c 4000 	strb.w	r4, [ip]
 8011ee0:	f88e 4000 	strb.w	r4, [lr]
 8011ee4:	703c      	strb	r4, [r7, #0]
 8011ee6:	6804      	ldr	r4, [r0, #0]
 8011ee8:	b1a4      	cbz	r4, 8011f14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8011eea:	8824      	ldrh	r4, [r4, #0]
 8011eec:	f04f 0901 	mov.w	r9, #1
 8011ef0:	b314      	cbz	r4, 8011f38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011ef2:	2c2b      	cmp	r4, #43	; 0x2b
 8011ef4:	d001      	beq.n	8011efa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8011ef6:	2c20      	cmp	r4, #32
 8011ef8:	d110      	bne.n	8011f1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8011efa:	8014      	strh	r4, [r2, #0]
 8011efc:	6804      	ldr	r4, [r0, #0]
 8011efe:	b10c      	cbz	r4, 8011f04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8011f00:	3402      	adds	r4, #2
 8011f02:	6004      	str	r4, [r0, #0]
 8011f04:	680c      	ldr	r4, [r1, #0]
 8011f06:	b10c      	cbz	r4, 8011f0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8011f08:	3401      	adds	r4, #1
 8011f0a:	600c      	str	r4, [r1, #0]
 8011f0c:	6804      	ldr	r4, [r0, #0]
 8011f0e:	b17c      	cbz	r4, 8011f30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8011f10:	8824      	ldrh	r4, [r4, #0]
 8011f12:	e7ed      	b.n	8011ef0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8011f14:	680c      	ldr	r4, [r1, #0]
 8011f16:	b17c      	cbz	r4, 8011f38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011f18:	7824      	ldrb	r4, [r4, #0]
 8011f1a:	e7e7      	b.n	8011eec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8011f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8011f1e:	d102      	bne.n	8011f26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8011f20:	f883 9000 	strb.w	r9, [r3]
 8011f24:	e7ea      	b.n	8011efc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8011f26:	2c23      	cmp	r4, #35	; 0x23
 8011f28:	d107      	bne.n	8011f3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8011f2a:	f888 9000 	strb.w	r9, [r8]
 8011f2e:	e7e5      	b.n	8011efc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8011f30:	680c      	ldr	r4, [r1, #0]
 8011f32:	b10c      	cbz	r4, 8011f38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011f34:	7824      	ldrb	r4, [r4, #0]
 8011f36:	e7db      	b.n	8011ef0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8011f38:	2400      	movs	r4, #0
 8011f3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011f3e:	2b09      	cmp	r3, #9
 8011f40:	d901      	bls.n	8011f46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8011f42:	2c2a      	cmp	r4, #42	; 0x2a
 8011f44:	d122      	bne.n	8011f8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011f46:	2301      	movs	r3, #1
 8011f48:	2c30      	cmp	r4, #48	; 0x30
 8011f4a:	f88e 3000 	strb.w	r3, [lr]
 8011f4e:	d10d      	bne.n	8011f6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8011f50:	f88c 3000 	strb.w	r3, [ip]
 8011f54:	6803      	ldr	r3, [r0, #0]
 8011f56:	b10b      	cbz	r3, 8011f5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8011f58:	3302      	adds	r3, #2
 8011f5a:	6003      	str	r3, [r0, #0]
 8011f5c:	680b      	ldr	r3, [r1, #0]
 8011f5e:	b10b      	cbz	r3, 8011f64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8011f60:	3301      	adds	r3, #1
 8011f62:	600b      	str	r3, [r1, #0]
 8011f64:	6803      	ldr	r3, [r0, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d02f      	beq.n	8011fca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8011f6a:	881c      	ldrh	r4, [r3, #0]
 8011f6c:	2c2a      	cmp	r4, #42	; 0x2a
 8011f6e:	d135      	bne.n	8011fdc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8011f70:	f04f 33ff 	mov.w	r3, #4294967295
 8011f74:	6033      	str	r3, [r6, #0]
 8011f76:	6803      	ldr	r3, [r0, #0]
 8011f78:	b10b      	cbz	r3, 8011f7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8011f7a:	3302      	adds	r3, #2
 8011f7c:	6003      	str	r3, [r0, #0]
 8011f7e:	680b      	ldr	r3, [r1, #0]
 8011f80:	b10b      	cbz	r3, 8011f86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8011f82:	3301      	adds	r3, #1
 8011f84:	600b      	str	r3, [r1, #0]
 8011f86:	6803      	ldr	r3, [r0, #0]
 8011f88:	b31b      	cbz	r3, 8011fd2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8011f8a:	881c      	ldrh	r4, [r3, #0]
 8011f8c:	2c2e      	cmp	r4, #46	; 0x2e
 8011f8e:	d11a      	bne.n	8011fc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011f90:	2301      	movs	r3, #1
 8011f92:	703b      	strb	r3, [r7, #0]
 8011f94:	6803      	ldr	r3, [r0, #0]
 8011f96:	b10b      	cbz	r3, 8011f9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8011f98:	3302      	adds	r3, #2
 8011f9a:	6003      	str	r3, [r0, #0]
 8011f9c:	680b      	ldr	r3, [r1, #0]
 8011f9e:	b10b      	cbz	r3, 8011fa4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	600b      	str	r3, [r1, #0]
 8011fa4:	6803      	ldr	r3, [r0, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d036      	beq.n	8012018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8011faa:	881b      	ldrh	r3, [r3, #0]
 8011fac:	2b2a      	cmp	r3, #42	; 0x2a
 8011fae:	d137      	bne.n	8012020 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8011fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb4:	602b      	str	r3, [r5, #0]
 8011fb6:	6803      	ldr	r3, [r0, #0]
 8011fb8:	b10b      	cbz	r3, 8011fbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8011fba:	3302      	adds	r3, #2
 8011fbc:	6003      	str	r3, [r0, #0]
 8011fbe:	680b      	ldr	r3, [r1, #0]
 8011fc0:	b10b      	cbz	r3, 8011fc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	600b      	str	r3, [r1, #0]
 8011fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fca:	680c      	ldr	r4, [r1, #0]
 8011fcc:	b134      	cbz	r4, 8011fdc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8011fce:	7824      	ldrb	r4, [r4, #0]
 8011fd0:	e7cc      	b.n	8011f6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8011fd2:	680b      	ldr	r3, [r1, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d0f6      	beq.n	8011fc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011fd8:	781c      	ldrb	r4, [r3, #0]
 8011fda:	e7d7      	b.n	8011f8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	220a      	movs	r2, #10
 8011fe0:	6033      	str	r3, [r6, #0]
 8011fe2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011fe6:	fa1f f38c 	uxth.w	r3, ip
 8011fea:	2b09      	cmp	r3, #9
 8011fec:	d8ce      	bhi.n	8011f8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011fee:	6833      	ldr	r3, [r6, #0]
 8011ff0:	fb02 c303 	mla	r3, r2, r3, ip
 8011ff4:	6033      	str	r3, [r6, #0]
 8011ff6:	6803      	ldr	r3, [r0, #0]
 8011ff8:	b10b      	cbz	r3, 8011ffe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8011ffa:	3302      	adds	r3, #2
 8011ffc:	6003      	str	r3, [r0, #0]
 8011ffe:	680b      	ldr	r3, [r1, #0]
 8012000:	b10b      	cbz	r3, 8012006 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8012002:	3301      	adds	r3, #1
 8012004:	600b      	str	r3, [r1, #0]
 8012006:	6803      	ldr	r3, [r0, #0]
 8012008:	b10b      	cbz	r3, 801200e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801200a:	881c      	ldrh	r4, [r3, #0]
 801200c:	e7e9      	b.n	8011fe2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801200e:	680c      	ldr	r4, [r1, #0]
 8012010:	2c00      	cmp	r4, #0
 8012012:	d0e6      	beq.n	8011fe2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8012014:	7824      	ldrb	r4, [r4, #0]
 8012016:	e7e4      	b.n	8011fe2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8012018:	680b      	ldr	r3, [r1, #0]
 801201a:	b10b      	cbz	r3, 8012020 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	e7c5      	b.n	8011fac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8012020:	2200      	movs	r2, #0
 8012022:	240a      	movs	r4, #10
 8012024:	602a      	str	r2, [r5, #0]
 8012026:	3b30      	subs	r3, #48	; 0x30
 8012028:	682a      	ldr	r2, [r5, #0]
 801202a:	b29e      	uxth	r6, r3
 801202c:	2e09      	cmp	r6, #9
 801202e:	d813      	bhi.n	8012058 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8012030:	fb04 3302 	mla	r3, r4, r2, r3
 8012034:	602b      	str	r3, [r5, #0]
 8012036:	6803      	ldr	r3, [r0, #0]
 8012038:	b10b      	cbz	r3, 801203e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801203a:	3302      	adds	r3, #2
 801203c:	6003      	str	r3, [r0, #0]
 801203e:	680b      	ldr	r3, [r1, #0]
 8012040:	b10b      	cbz	r3, 8012046 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8012042:	3301      	adds	r3, #1
 8012044:	600b      	str	r3, [r1, #0]
 8012046:	6803      	ldr	r3, [r0, #0]
 8012048:	b10b      	cbz	r3, 801204e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801204a:	881b      	ldrh	r3, [r3, #0]
 801204c:	e7eb      	b.n	8012026 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801204e:	680b      	ldr	r3, [r1, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d0e8      	beq.n	8012026 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	e7e6      	b.n	8012026 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8012058:	2a06      	cmp	r2, #6
 801205a:	bfa8      	it	ge
 801205c:	2206      	movge	r2, #6
 801205e:	602a      	str	r2, [r5, #0]
 8012060:	e7b1      	b.n	8011fc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08012062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8012062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012066:	b0a3      	sub	sp, #140	; 0x8c
 8012068:	2600      	movs	r6, #0
 801206a:	4607      	mov	r7, r0
 801206c:	4688      	mov	r8, r1
 801206e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8012072:	4631      	mov	r1, r6
 8012074:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8012076:	4648      	mov	r0, r9
 8012078:	960d      	str	r6, [sp, #52]	; 0x34
 801207a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801207e:	2242      	movs	r2, #66	; 0x42
 8012080:	f009 f898 	bl	801b1b4 <memset>
 8012084:	b15f      	cbz	r7, 801209e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8012086:	f108 3aff 	add.w	sl, r8, #4294967295
 801208a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801208c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801208e:	b152      	cbz	r2, 80120a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8012090:	8812      	ldrh	r2, [r2, #0]
 8012092:	b10a      	cbz	r2, 8012098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8012094:	459a      	cmp	sl, r3
 8012096:	dc2e      	bgt.n	80120f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8012098:	2200      	movs	r2, #0
 801209a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801209e:	4638      	mov	r0, r7
 80120a0:	b023      	add	sp, #140	; 0x8c
 80120a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a6:	9a08      	ldr	r2, [sp, #32]
 80120a8:	2a00      	cmp	r2, #0
 80120aa:	d0f5      	beq.n	8012098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80120ac:	7812      	ldrb	r2, [r2, #0]
 80120ae:	e7f0      	b.n	8012092 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80120b0:	2d00      	cmp	r5, #0
 80120b2:	d0ea      	beq.n	801208a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80120b4:	782a      	ldrb	r2, [r5, #0]
 80120b6:	b142      	cbz	r2, 80120ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80120b8:	2a25      	cmp	r2, #37	; 0x25
 80120ba:	d001      	beq.n	80120c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80120bc:	459a      	cmp	sl, r3
 80120be:	dc08      	bgt.n	80120d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80120c0:	f1bb 0f00 	cmp.w	fp, #0
 80120c4:	d121      	bne.n	801210a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80120c6:	2d00      	cmp	r5, #0
 80120c8:	d0df      	beq.n	801208a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80120ca:	782a      	ldrb	r2, [r5, #0]
 80120cc:	f04f 0b00 	mov.w	fp, #0
 80120d0:	e01d      	b.n	801210e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80120d2:	f1bb 0f00 	cmp.w	fp, #0
 80120d6:	d077      	beq.n	80121c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 80120d8:	f8bb 2000 	ldrh.w	r2, [fp]
 80120dc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80120e0:	f1bb 0f00 	cmp.w	fp, #0
 80120e4:	d002      	beq.n	80120ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80120e6:	f10b 0202 	add.w	r2, fp, #2
 80120ea:	9209      	str	r2, [sp, #36]	; 0x24
 80120ec:	b10d      	cbz	r5, 80120f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80120ee:	3501      	adds	r5, #1
 80120f0:	9508      	str	r5, [sp, #32]
 80120f2:	3301      	adds	r3, #1
 80120f4:	930d      	str	r3, [sp, #52]	; 0x34
 80120f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120f8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80120fc:	f1bb 0f00 	cmp.w	fp, #0
 8012100:	d0d6      	beq.n	80120b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8012102:	f8bb 2000 	ldrh.w	r2, [fp]
 8012106:	2a00      	cmp	r2, #0
 8012108:	d1d6      	bne.n	80120b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801210a:	f8bb 2000 	ldrh.w	r2, [fp]
 801210e:	2a00      	cmp	r2, #0
 8012110:	d0bb      	beq.n	801208a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012112:	459a      	cmp	sl, r3
 8012114:	ddb9      	ble.n	801208a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012116:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801211a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801211e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8012122:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8012126:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801212a:	960e      	str	r6, [sp, #56]	; 0x38
 801212c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8012130:	960f      	str	r6, [sp, #60]	; 0x3c
 8012132:	f1bb 0f00 	cmp.w	fp, #0
 8012136:	d002      	beq.n	801213e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8012138:	f10b 0302 	add.w	r3, fp, #2
 801213c:	9309      	str	r3, [sp, #36]	; 0x24
 801213e:	b10d      	cbz	r5, 8012144 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8012140:	1c6b      	adds	r3, r5, #1
 8012142:	9308      	str	r3, [sp, #32]
 8012144:	ab0f      	add	r3, sp, #60	; 0x3c
 8012146:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801214a:	a908      	add	r1, sp, #32
 801214c:	a809      	add	r0, sp, #36	; 0x24
 801214e:	9305      	str	r3, [sp, #20]
 8012150:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8012154:	9304      	str	r3, [sp, #16]
 8012156:	ab0e      	add	r3, sp, #56	; 0x38
 8012158:	9303      	str	r3, [sp, #12]
 801215a:	ab0c      	add	r3, sp, #48	; 0x30
 801215c:	9302      	str	r3, [sp, #8]
 801215e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8012162:	9301      	str	r3, [sp, #4]
 8012164:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8012168:	9300      	str	r3, [sp, #0]
 801216a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801216e:	f7ff fea8 	bl	8011ec2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8012172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012174:	2b00      	cmp	r3, #0
 8012176:	bfbf      	itttt	lt
 8012178:	6823      	ldrlt	r3, [r4, #0]
 801217a:	3404      	addlt	r4, #4
 801217c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8012180:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012184:	2b00      	cmp	r3, #0
 8012186:	bfbe      	ittt	lt
 8012188:	6823      	ldrlt	r3, [r4, #0]
 801218a:	3404      	addlt	r4, #4
 801218c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8012190:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8012194:	bfb8      	it	lt
 8012196:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8012198:	b1d9      	cbz	r1, 80121d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801219a:	880b      	ldrh	r3, [r1, #0]
 801219c:	2b69      	cmp	r3, #105	; 0x69
 801219e:	d01f      	beq.n	80121e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80121a0:	d82f      	bhi.n	8012202 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80121a2:	2b58      	cmp	r3, #88	; 0x58
 80121a4:	d01c      	beq.n	80121e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80121a6:	d818      	bhi.n	80121da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80121a8:	2b25      	cmp	r3, #37	; 0x25
 80121aa:	d034      	beq.n	8012216 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80121ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121ae:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80121b2:	f1bb 0f00 	cmp.w	fp, #0
 80121b6:	f000 80b7 	beq.w	8012328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80121ba:	f8bb 5000 	ldrh.w	r5, [fp]
 80121be:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80121c2:	3301      	adds	r3, #1
 80121c4:	930d      	str	r3, [sp, #52]	; 0x34
 80121c6:	e029      	b.n	801221c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80121c8:	b10d      	cbz	r5, 80121ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80121ca:	782a      	ldrb	r2, [r5, #0]
 80121cc:	e786      	b.n	80120dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80121ce:	462a      	mov	r2, r5
 80121d0:	e784      	b.n	80120dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	d0ea      	beq.n	80121ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80121d6:	7813      	ldrb	r3, [r2, #0]
 80121d8:	e7e0      	b.n	801219c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 80121da:	3b63      	subs	r3, #99	; 0x63
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d8e5      	bhi.n	80121ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80121e0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80121e4:	b329      	cbz	r1, 8012232 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 80121e6:	880b      	ldrh	r3, [r1, #0]
 80121e8:	2b69      	cmp	r3, #105	; 0x69
 80121ea:	d063      	beq.n	80122b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80121ec:	d825      	bhi.n	801223a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 80121ee:	2b63      	cmp	r3, #99	; 0x63
 80121f0:	d038      	beq.n	8012264 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 80121f2:	2b64      	cmp	r3, #100	; 0x64
 80121f4:	d05e      	beq.n	80122b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80121f6:	2b58      	cmp	r3, #88	; 0x58
 80121f8:	d07a      	beq.n	80122f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 80121fa:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80121fe:	4625      	mov	r5, r4
 8012200:	e036      	b.n	8012270 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012202:	2b73      	cmp	r3, #115	; 0x73
 8012204:	d0ec      	beq.n	80121e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012206:	d802      	bhi.n	801220e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8012208:	2b6f      	cmp	r3, #111	; 0x6f
 801220a:	d1cf      	bne.n	80121ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801220c:	e7e8      	b.n	80121e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801220e:	2b75      	cmp	r3, #117	; 0x75
 8012210:	d0e6      	beq.n	80121e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012212:	2b78      	cmp	r3, #120	; 0x78
 8012214:	e7f9      	b.n	801220a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8012216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012218:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801221c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801221e:	b10b      	cbz	r3, 8012224 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8012220:	3302      	adds	r3, #2
 8012222:	9309      	str	r3, [sp, #36]	; 0x24
 8012224:	9b08      	ldr	r3, [sp, #32]
 8012226:	2b00      	cmp	r3, #0
 8012228:	f43f af2f 	beq.w	801208a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801222c:	3301      	adds	r3, #1
 801222e:	9308      	str	r3, [sp, #32]
 8012230:	e72b      	b.n	801208a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012232:	2a00      	cmp	r2, #0
 8012234:	d0e1      	beq.n	80121fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012236:	7813      	ldrb	r3, [r2, #0]
 8012238:	e7d6      	b.n	80121e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801223a:	2b73      	cmp	r3, #115	; 0x73
 801223c:	d036      	beq.n	80122ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801223e:	d807      	bhi.n	8012250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8012240:	2b6f      	cmp	r3, #111	; 0x6f
 8012242:	d1da      	bne.n	80121fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012246:	1d25      	adds	r5, r4, #4
 8012248:	2308      	movs	r3, #8
 801224a:	eba8 0202 	sub.w	r2, r8, r2
 801224e:	e049      	b.n	80122e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8012250:	2b75      	cmp	r3, #117	; 0x75
 8012252:	d042      	beq.n	80122da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8012254:	2b78      	cmp	r3, #120	; 0x78
 8012256:	d1d0      	bne.n	80121fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801225a:	1d25      	adds	r5, r4, #4
 801225c:	2310      	movs	r3, #16
 801225e:	eba8 0202 	sub.w	r2, r8, r2
 8012262:	e03f      	b.n	80122e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8012264:	7823      	ldrb	r3, [r4, #0]
 8012266:	1d25      	adds	r5, r4, #4
 8012268:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801226c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8012270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012272:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8012276:	2b00      	cmp	r3, #0
 8012278:	d051      	beq.n	801231e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801227a:	881a      	ldrh	r2, [r3, #0]
 801227c:	a80d      	add	r0, sp, #52	; 0x34
 801227e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8012282:	462c      	mov	r4, r5
 8012284:	9005      	str	r0, [sp, #20]
 8012286:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801228a:	9004      	str	r0, [sp, #16]
 801228c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801228e:	9003      	str	r0, [sp, #12]
 8012290:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8012294:	9002      	str	r0, [sp, #8]
 8012296:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012298:	9001      	str	r0, [sp, #4]
 801229a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801229e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80122a2:	9000      	str	r0, [sp, #0]
 80122a4:	a810      	add	r0, sp, #64	; 0x40
 80122a6:	f7ff fd49 	bl	8011d3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80122aa:	e7b7      	b.n	801221c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80122ac:	1d25      	adds	r5, r4, #4
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	9310      	str	r3, [sp, #64]	; 0x40
 80122b2:	e7dd      	b.n	8012270 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80122b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122b6:	230a      	movs	r3, #10
 80122b8:	4649      	mov	r1, r9
 80122ba:	6820      	ldr	r0, [r4, #0]
 80122bc:	eba8 0202 	sub.w	r2, r8, r2
 80122c0:	1d25      	adds	r5, r4, #4
 80122c2:	b292      	uxth	r2, r2
 80122c4:	f7ff fd08 	bl	8011cd8 <_ZN8touchgfx7Unicode4itoaElPtti>
 80122c8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80122cc:	2b2d      	cmp	r3, #45	; 0x2d
 80122ce:	d1cf      	bne.n	8012270 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80122d0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80122d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122d6:	3302      	adds	r3, #2
 80122d8:	e7ea      	b.n	80122b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80122da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122dc:	1d25      	adds	r5, r4, #4
 80122de:	230a      	movs	r3, #10
 80122e0:	eba8 0202 	sub.w	r2, r8, r2
 80122e4:	b292      	uxth	r2, r2
 80122e6:	4649      	mov	r1, r9
 80122e8:	6820      	ldr	r0, [r4, #0]
 80122ea:	f7ff fcd7 	bl	8011c9c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80122ee:	e7bf      	b.n	8012270 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80122f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122f2:	2310      	movs	r3, #16
 80122f4:	4649      	mov	r1, r9
 80122f6:	6820      	ldr	r0, [r4, #0]
 80122f8:	eba8 0202 	sub.w	r2, r8, r2
 80122fc:	1d25      	adds	r5, r4, #4
 80122fe:	b292      	uxth	r2, r2
 8012300:	f7ff fccc 	bl	8011c9c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8012304:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8012308:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801230c:	2b00      	cmp	r3, #0
 801230e:	d0af      	beq.n	8012270 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012310:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8012314:	2919      	cmp	r1, #25
 8012316:	d8f7      	bhi.n	8012308 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8012318:	3b20      	subs	r3, #32
 801231a:	8013      	strh	r3, [r2, #0]
 801231c:	e7f4      	b.n	8012308 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801231e:	9a08      	ldr	r2, [sp, #32]
 8012320:	2a00      	cmp	r2, #0
 8012322:	d0ab      	beq.n	801227c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8012324:	7812      	ldrb	r2, [r2, #0]
 8012326:	e7a9      	b.n	801227c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8012328:	2d00      	cmp	r5, #0
 801232a:	f43f af48 	beq.w	80121be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801232e:	782d      	ldrb	r5, [r5, #0]
 8012330:	e745      	b.n	80121be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08012332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8012332:	b507      	push	{r0, r1, r2, lr}
 8012334:	9300      	str	r3, [sp, #0]
 8012336:	4613      	mov	r3, r2
 8012338:	2200      	movs	r2, #0
 801233a:	f7ff fe92 	bl	8012062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801233e:	b003      	add	sp, #12
 8012340:	f85d fb04 	ldr.w	pc, [sp], #4

08012344 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8012344:	b40c      	push	{r2, r3}
 8012346:	b507      	push	{r0, r1, r2, lr}
 8012348:	ab04      	add	r3, sp, #16
 801234a:	f853 2b04 	ldr.w	r2, [r3], #4
 801234e:	9301      	str	r3, [sp, #4]
 8012350:	f7ff ffef 	bl	8012332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8012354:	b003      	add	sp, #12
 8012356:	f85d eb04 	ldr.w	lr, [sp], #4
 801235a:	b002      	add	sp, #8
 801235c:	4770      	bx	lr
	...

08012360 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	b0c3      	sub	sp, #268	; 0x10c
 8012366:	2600      	movs	r6, #0
 8012368:	4607      	mov	r7, r0
 801236a:	4689      	mov	r9, r1
 801236c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012370:	4631      	mov	r1, r6
 8012372:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 8012376:	4640      	mov	r0, r8
 8012378:	960c      	str	r6, [sp, #48]	; 0x30
 801237a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801237e:	22c8      	movs	r2, #200	; 0xc8
 8012380:	f008 ff18 	bl	801b1b4 <memset>
 8012384:	b16f      	cbz	r7, 80123a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 8012386:	f04f 0b0a 	mov.w	fp, #10
 801238a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801238c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801238e:	b162      	cbz	r2, 80123aa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 8012390:	8812      	ldrh	r2, [r2, #0]
 8012392:	b11a      	cbz	r2, 801239c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 8012394:	f109 31ff 	add.w	r1, r9, #4294967295
 8012398:	4299      	cmp	r1, r3
 801239a:	dc26      	bgt.n	80123ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801239c:	2200      	movs	r2, #0
 801239e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80123a2:	4638      	mov	r0, r7
 80123a4:	b043      	add	sp, #268	; 0x10c
 80123a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123aa:	9a08      	ldr	r2, [sp, #32]
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	d0f5      	beq.n	801239c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 80123b0:	7812      	ldrb	r2, [r2, #0]
 80123b2:	e7ee      	b.n	8012392 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 80123b4:	2c00      	cmp	r4, #0
 80123b6:	d0e8      	beq.n	801238a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80123b8:	7822      	ldrb	r2, [r4, #0]
 80123ba:	b132      	cbz	r2, 80123ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 80123bc:	2a25      	cmp	r2, #37	; 0x25
 80123be:	d001      	beq.n	80123c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 80123c0:	4299      	cmp	r1, r3
 80123c2:	dc05      	bgt.n	80123d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 80123c4:	b9cd      	cbnz	r5, 80123fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 80123c6:	2c00      	cmp	r4, #0
 80123c8:	d0df      	beq.n	801238a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80123ca:	7822      	ldrb	r2, [r4, #0]
 80123cc:	2500      	movs	r5, #0
 80123ce:	e015      	b.n	80123fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 80123d0:	2d00      	cmp	r5, #0
 80123d2:	d073      	beq.n	80124bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 80123d4:	882a      	ldrh	r2, [r5, #0]
 80123d6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80123da:	b10d      	cbz	r5, 80123e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 80123dc:	3502      	adds	r5, #2
 80123de:	9509      	str	r5, [sp, #36]	; 0x24
 80123e0:	b10c      	cbz	r4, 80123e6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 80123e2:	3401      	adds	r4, #1
 80123e4:	9408      	str	r4, [sp, #32]
 80123e6:	3301      	adds	r3, #1
 80123e8:	930c      	str	r3, [sp, #48]	; 0x30
 80123ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123ec:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80123f0:	2d00      	cmp	r5, #0
 80123f2:	d0df      	beq.n	80123b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 80123f4:	882a      	ldrh	r2, [r5, #0]
 80123f6:	2a00      	cmp	r2, #0
 80123f8:	d1e0      	bne.n	80123bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 80123fa:	882a      	ldrh	r2, [r5, #0]
 80123fc:	2a00      	cmp	r2, #0
 80123fe:	d0c4      	beq.n	801238a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8012400:	4299      	cmp	r1, r3
 8012402:	ddc2      	ble.n	801238a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8012404:	2300      	movs	r3, #0
 8012406:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801240a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801240e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012412:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8012416:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801241a:	930d      	str	r3, [sp, #52]	; 0x34
 801241c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8012420:	930e      	str	r3, [sp, #56]	; 0x38
 8012422:	b10d      	cbz	r5, 8012428 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 8012424:	1cab      	adds	r3, r5, #2
 8012426:	9309      	str	r3, [sp, #36]	; 0x24
 8012428:	b10c      	cbz	r4, 801242e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801242a:	1c63      	adds	r3, r4, #1
 801242c:	9308      	str	r3, [sp, #32]
 801242e:	ab0e      	add	r3, sp, #56	; 0x38
 8012430:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8012434:	a908      	add	r1, sp, #32
 8012436:	a809      	add	r0, sp, #36	; 0x24
 8012438:	9305      	str	r3, [sp, #20]
 801243a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801243e:	9304      	str	r3, [sp, #16]
 8012440:	ab0d      	add	r3, sp, #52	; 0x34
 8012442:	9303      	str	r3, [sp, #12]
 8012444:	ab0b      	add	r3, sp, #44	; 0x2c
 8012446:	9302      	str	r3, [sp, #8]
 8012448:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801244c:	9301      	str	r3, [sp, #4]
 801244e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8012458:	f7ff fd33 	bl	8011ec2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801245c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801245e:	2b00      	cmp	r3, #0
 8012460:	da0b      	bge.n	801247a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 8012462:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8012466:	3601      	adds	r6, #1
 8012468:	edd3 7a00 	vldr	s15, [r3]
 801246c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012470:	ee17 3a90 	vmov	r3, s15
 8012474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012478:	930d      	str	r3, [sp, #52]	; 0x34
 801247a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801247c:	2b00      	cmp	r3, #0
 801247e:	da0b      	bge.n	8012498 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 8012480:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8012484:	3601      	adds	r6, #1
 8012486:	edd3 7a00 	vldr	s15, [r3]
 801248a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801248e:	ee17 3a90 	vmov	r3, s15
 8012492:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012496:	930e      	str	r3, [sp, #56]	; 0x38
 8012498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801249a:	b1a3      	cbz	r3, 80124c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801249c:	881a      	ldrh	r2, [r3, #0]
 801249e:	2a25      	cmp	r2, #37	; 0x25
 80124a0:	d016      	beq.n	80124d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 80124a2:	2a66      	cmp	r2, #102	; 0x66
 80124a4:	d01a      	beq.n	80124dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 80124a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124a8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80124ac:	2d00      	cmp	r5, #0
 80124ae:	f000 80fc 	beq.w	80126aa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34a>
 80124b2:	882c      	ldrh	r4, [r5, #0]
 80124b4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80124b8:	3301      	adds	r3, #1
 80124ba:	e00d      	b.n	80124d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 80124bc:	b10c      	cbz	r4, 80124c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 80124be:	7822      	ldrb	r2, [r4, #0]
 80124c0:	e789      	b.n	80123d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 80124c2:	4622      	mov	r2, r4
 80124c4:	e787      	b.n	80123d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 80124c6:	9b08      	ldr	r3, [sp, #32]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d0ec      	beq.n	80124a6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 80124cc:	781a      	ldrb	r2, [r3, #0]
 80124ce:	e7e6      	b.n	801249e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 80124d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124d2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80124d6:	3302      	adds	r3, #2
 80124d8:	930c      	str	r3, [sp, #48]	; 0x30
 80124da:	e049      	b.n	8012570 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x210>
 80124dc:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80124e0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80124e4:	3601      	adds	r6, #1
 80124e6:	ed93 7a00 	vldr	s14, [r3]
 80124ea:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80124ee:	b923      	cbnz	r3, 80124fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 80124f0:	2301      	movs	r3, #1
 80124f2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80124f6:	2306      	movs	r3, #6
 80124f8:	930e      	str	r3, [sp, #56]	; 0x38
 80124fa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80124fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012506:	bf42      	ittt	mi
 8012508:	eeb1 7a47 	vnegmi.f32	s14, s14
 801250c:	232d      	movmi	r3, #45	; 0x2d
 801250e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 8012512:	ee77 6a67 	vsub.f32	s13, s14, s15
 8012516:	eef4 6a47 	vcmp.f32	s13, s14
 801251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251e:	d132      	bne.n	8012586 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 8012520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012524:	eef4 7a47 	vcmp.f32	s15, s14
 8012528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252c:	d12b      	bne.n	8012586 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 801252e:	4b61      	ldr	r3, [pc, #388]	; (80126b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x354>)
 8012530:	9310      	str	r3, [sp, #64]	; 0x40
 8012532:	2366      	movs	r3, #102	; 0x66
 8012534:	9311      	str	r3, [sp, #68]	; 0x44
 8012536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012538:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801253c:	2b00      	cmp	r3, #0
 801253e:	f000 80ae 	beq.w	801269e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33e>
 8012542:	881a      	ldrh	r2, [r3, #0]
 8012544:	a80c      	add	r0, sp, #48	; 0x30
 8012546:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801254a:	9005      	str	r0, [sp, #20]
 801254c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 8012550:	9004      	str	r0, [sp, #16]
 8012552:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012554:	9003      	str	r0, [sp, #12]
 8012556:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801255a:	9002      	str	r0, [sp, #8]
 801255c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801255e:	9001      	str	r0, [sp, #4]
 8012560:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8012564:	e9cd 9706 	strd	r9, r7, [sp, #24]
 8012568:	9000      	str	r0, [sp, #0]
 801256a:	a80f      	add	r0, sp, #60	; 0x3c
 801256c:	f7ff fbe6 	bl	8011d3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8012570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012572:	b10b      	cbz	r3, 8012578 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 8012574:	3302      	adds	r3, #2
 8012576:	9309      	str	r3, [sp, #36]	; 0x24
 8012578:	9b08      	ldr	r3, [sp, #32]
 801257a:	2b00      	cmp	r3, #0
 801257c:	f43f af05 	beq.w	801238a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8012580:	3301      	adds	r3, #1
 8012582:	9308      	str	r3, [sp, #32]
 8012584:	e701      	b.n	801238a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8012586:	eeb4 7a47 	vcmp.f32	s14, s14
 801258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258e:	d10b      	bne.n	80125a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x248>
 8012590:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8012594:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012596:	2300      	movs	r3, #0
 8012598:	eddf 7a47 	vldr	s15, [pc, #284]	; 80126b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>
 801259c:	4283      	cmp	r3, r0
 801259e:	da07      	bge.n	80125b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x250>
 80125a0:	eec7 7a86 	vdiv.f32	s15, s15, s12
 80125a4:	3301      	adds	r3, #1
 80125a6:	e7f9      	b.n	801259c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23c>
 80125a8:	4b44      	ldr	r3, [pc, #272]	; (80126bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>)
 80125aa:	9310      	str	r3, [sp, #64]	; 0x40
 80125ac:	236e      	movs	r3, #110	; 0x6e
 80125ae:	e7c1      	b.n	8012534 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d4>
 80125b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80125b8:	eeb0 7a67 	vmov.f32	s14, s15
 80125bc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80125c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c4:	da27      	bge.n	8012616 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b6>
 80125c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125c8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80125cc:	2100      	movs	r1, #0
 80125ce:	eba9 0202 	sub.w	r2, r9, r2
 80125d2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80125d6:	b28c      	uxth	r4, r1
 80125d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125dc:	db21      	blt.n	8012622 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 80125de:	1a53      	subs	r3, r2, r1
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	dd1e      	ble.n	8012622 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 80125e4:	2963      	cmp	r1, #99	; 0x63
 80125e6:	d01b      	beq.n	8012620 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 80125e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80125ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80125f0:	ee17 3a10 	vmov	r3, s14
 80125f4:	2b09      	cmp	r3, #9
 80125f6:	bfa8      	it	ge
 80125f8:	2309      	movge	r3, #9
 80125fa:	ee07 3a10 	vmov	s14, r3
 80125fe:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8012602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012606:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801260a:	3101      	adds	r1, #1
 801260c:	eee7 7a66 	vfms.f32	s15, s14, s13
 8012610:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8012614:	e7dd      	b.n	80125d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x272>
 8012616:	ee66 6a86 	vmul.f32	s13, s13, s12
 801261a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801261e:	e7cd      	b.n	80125bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x25c>
 8012620:	460c      	mov	r4, r1
 8012622:	2a63      	cmp	r2, #99	; 0x63
 8012624:	bfd4      	ite	le
 8012626:	ebc4 0202 	rsble	r2, r4, r2
 801262a:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801262e:	2a00      	cmp	r2, #0
 8012630:	dd30      	ble.n	8012694 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x334>
 8012632:	4603      	mov	r3, r0
 8012634:	2501      	movs	r5, #1
 8012636:	2b00      	cmp	r3, #0
 8012638:	dd0d      	ble.n	8012656 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2f6>
 801263a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801263e:	3b01      	subs	r3, #1
 8012640:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012644:	ee17 1a10 	vmov	r1, s14
 8012648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801264c:	fb0b 1505 	mla	r5, fp, r5, r1
 8012650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012654:	e7ef      	b.n	8012636 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d6>
 8012656:	2800      	cmp	r0, #0
 8012658:	f100 33ff 	add.w	r3, r0, #4294967295
 801265c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012660:	bfac      	ite	ge
 8012662:	1a18      	subge	r0, r3, r0
 8012664:	4618      	movlt	r0, r3
 8012666:	b292      	uxth	r2, r2
 8012668:	230a      	movs	r3, #10
 801266a:	900e      	str	r0, [sp, #56]	; 0x38
 801266c:	eb08 0104 	add.w	r1, r8, r4
 8012670:	4628      	mov	r0, r5
 8012672:	f7ff fb31 	bl	8011cd8 <_ZN8touchgfx7Unicode4itoaElPtti>
 8012676:	2d01      	cmp	r5, #1
 8012678:	dc0a      	bgt.n	8012690 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 801267a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801267e:	2b00      	cmp	r3, #0
 8012680:	bf0c      	ite	eq
 8012682:	2300      	moveq	r3, #0
 8012684:	232e      	movne	r3, #46	; 0x2e
 8012686:	aa42      	add	r2, sp, #264	; 0x108
 8012688:	4414      	add	r4, r2
 801268a:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801268e:	e752      	b.n	8012536 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 8012690:	232e      	movs	r3, #46	; 0x2e
 8012692:	e7f8      	b.n	8012686 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x326>
 8012694:	ab42      	add	r3, sp, #264	; 0x108
 8012696:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801269a:	2300      	movs	r3, #0
 801269c:	e7f5      	b.n	801268a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32a>
 801269e:	9a08      	ldr	r2, [sp, #32]
 80126a0:	2a00      	cmp	r2, #0
 80126a2:	f43f af4f 	beq.w	8012544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 80126a6:	7812      	ldrb	r2, [r2, #0]
 80126a8:	e74c      	b.n	8012544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 80126aa:	2c00      	cmp	r4, #0
 80126ac:	f43f af02 	beq.w	80124b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 80126b0:	7824      	ldrb	r4, [r4, #0]
 80126b2:	e6ff      	b.n	80124b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 80126b4:	006e0069 	.word	0x006e0069
 80126b8:	3f000002 	.word	0x3f000002
 80126bc:	0061006e 	.word	0x0061006e

080126c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 80126c0:	b507      	push	{r0, r1, r2, lr}
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	4613      	mov	r3, r2
 80126c6:	2200      	movs	r2, #0
 80126c8:	f7ff fe4a 	bl	8012360 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 80126cc:	b003      	add	sp, #12
 80126ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080126d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80126d4:	4b01      	ldr	r3, [pc, #4]	; (80126dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80126d6:	6018      	str	r0, [r3, #0]
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop
 80126dc:	24006c1c 	.word	0x24006c1c

080126e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80126e0:	4b06      	ldr	r3, [pc, #24]	; (80126fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80126e2:	881a      	ldrh	r2, [r3, #0]
 80126e4:	4282      	cmp	r2, r0
 80126e6:	d807      	bhi.n	80126f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80126e8:	4b05      	ldr	r3, [pc, #20]	; (8012700 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80126ea:	881b      	ldrh	r3, [r3, #0]
 80126ec:	4413      	add	r3, r2
 80126ee:	4298      	cmp	r0, r3
 80126f0:	bfac      	ite	ge
 80126f2:	2000      	movge	r0, #0
 80126f4:	2001      	movlt	r0, #1
 80126f6:	4770      	bx	lr
 80126f8:	2000      	movs	r0, #0
 80126fa:	4770      	bx	lr
 80126fc:	24006c3c 	.word	0x24006c3c
 8012700:	24006c40 	.word	0x24006c40

08012704 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8012704:	b508      	push	{r3, lr}
 8012706:	4601      	mov	r1, r0
 8012708:	f7ff ffea 	bl	80126e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801270c:	b118      	cbz	r0, 8012716 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801270e:	4b02      	ldr	r3, [pc, #8]	; (8012718 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8012716:	bd08      	pop	{r3, pc}
 8012718:	24006c20 	.word	0x24006c20

0801271c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012720:	4d28      	ldr	r5, [pc, #160]	; (80127c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8012722:	682b      	ldr	r3, [r5, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d04a      	beq.n	80127be <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8012728:	4a27      	ldr	r2, [pc, #156]	; (80127c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801272a:	4e28      	ldr	r6, [pc, #160]	; (80127cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801272c:	8810      	ldrh	r0, [r2, #0]
 801272e:	f8b6 8000 	ldrh.w	r8, [r6]
 8012732:	4c27      	ldr	r4, [pc, #156]	; (80127d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8012734:	4440      	add	r0, r8
 8012736:	4f27      	ldr	r7, [pc, #156]	; (80127d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8012738:	1c41      	adds	r1, r0, #1
 801273a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801273e:	f021 0101 	bic.w	r1, r1, #1
 8012742:	eb03 020e 	add.w	r2, r3, lr
 8012746:	0409      	lsls	r1, r1, #16
 8012748:	6022      	str	r2, [r4, #0]
 801274a:	0c09      	lsrs	r1, r1, #16
 801274c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012750:	eb0e 010c 	add.w	r1, lr, ip
 8012754:	185a      	adds	r2, r3, r1
 8012756:	603a      	str	r2, [r7, #0]
 8012758:	220e      	movs	r2, #14
 801275a:	fb02 f208 	mul.w	r2, r2, r8
 801275e:	3203      	adds	r2, #3
 8012760:	f022 0203 	bic.w	r2, r2, #3
 8012764:	4411      	add	r1, r2
 8012766:	440b      	add	r3, r1
 8012768:	491b      	ldr	r1, [pc, #108]	; (80127d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801276a:	600b      	str	r3, [r1, #0]
 801276c:	2300      	movs	r3, #0
 801276e:	491b      	ldr	r1, [pc, #108]	; (80127dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8012770:	800b      	strh	r3, [r1, #0]
 8012772:	491b      	ldr	r1, [pc, #108]	; (80127e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8012774:	6809      	ldr	r1, [r1, #0]
 8012776:	eba1 010e 	sub.w	r1, r1, lr
 801277a:	eba1 010c 	sub.w	r1, r1, ip
 801277e:	469c      	mov	ip, r3
 8012780:	1a8a      	subs	r2, r1, r2
 8012782:	4918      	ldr	r1, [pc, #96]	; (80127e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8012784:	600a      	str	r2, [r1, #0]
 8012786:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801278a:	4a17      	ldr	r2, [pc, #92]	; (80127e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801278c:	8013      	strh	r3, [r2, #0]
 801278e:	4283      	cmp	r3, r0
 8012790:	d10d      	bne.n	80127ae <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8012792:	8835      	ldrh	r5, [r6, #0]
 8012794:	2300      	movs	r3, #0
 8012796:	6838      	ldr	r0, [r7, #0]
 8012798:	240e      	movs	r4, #14
 801279a:	429d      	cmp	r5, r3
 801279c:	d90f      	bls.n	80127be <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801279e:	fb04 0203 	mla	r2, r4, r3, r0
 80127a2:	3301      	adds	r3, #1
 80127a4:	7b11      	ldrb	r1, [r2, #12]
 80127a6:	f36f 1145 	bfc	r1, #5, #1
 80127aa:	7311      	strb	r1, [r2, #12]
 80127ac:	e7f5      	b.n	801279a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80127ae:	682a      	ldr	r2, [r5, #0]
 80127b0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80127b4:	6822      	ldr	r2, [r4, #0]
 80127b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80127ba:	3301      	adds	r3, #1
 80127bc:	e7e7      	b.n	801278e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80127be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c2:	bf00      	nop
 80127c4:	24006c20 	.word	0x24006c20
 80127c8:	24006c3c 	.word	0x24006c3c
 80127cc:	24006c40 	.word	0x24006c40
 80127d0:	24006c34 	.word	0x24006c34
 80127d4:	24006c24 	.word	0x24006c24
 80127d8:	24006c2c 	.word	0x24006c2c
 80127dc:	24006c3e 	.word	0x24006c3e
 80127e0:	24006c28 	.word	0x24006c28
 80127e4:	24006c38 	.word	0x24006c38
 80127e8:	24006c30 	.word	0x24006c30

080127ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80127ec:	4b10      	ldr	r3, [pc, #64]	; (8012830 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80127ee:	b510      	push	{r4, lr}
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	b9db      	cbnz	r3, 801282c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80127f4:	b1d1      	cbz	r1, 801282c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80127f6:	4b0f      	ldr	r3, [pc, #60]	; (8012834 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80127f8:	240e      	movs	r4, #14
 80127fa:	801a      	strh	r2, [r3, #0]
 80127fc:	b292      	uxth	r2, r2
 80127fe:	4b0e      	ldr	r3, [pc, #56]	; (8012838 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	4413      	add	r3, r2
 8012804:	4362      	muls	r2, r4
 8012806:	2406      	movs	r4, #6
 8012808:	fb04 2203 	mla	r2, r4, r3, r2
 801280c:	428a      	cmp	r2, r1
 801280e:	d305      	bcc.n	801281c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8012810:	4b0a      	ldr	r3, [pc, #40]	; (801283c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8012812:	2135      	movs	r1, #53	; 0x35
 8012814:	4a0a      	ldr	r2, [pc, #40]	; (8012840 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8012816:	480b      	ldr	r0, [pc, #44]	; (8012844 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8012818:	f008 fc40 	bl	801b09c <__assert_func>
 801281c:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801281e:	6019      	str	r1, [r3, #0]
 8012820:	4b0a      	ldr	r3, [pc, #40]	; (801284c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8012822:	6018      	str	r0, [r3, #0]
 8012824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012828:	f7ff bf78 	b.w	801271c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801282c:	bd10      	pop	{r4, pc}
 801282e:	bf00      	nop
 8012830:	24006c2c 	.word	0x24006c2c
 8012834:	24006c40 	.word	0x24006c40
 8012838:	24006c3c 	.word	0x24006c3c
 801283c:	0801ecaa 	.word	0x0801ecaa
 8012840:	0801ed03 	.word	0x0801ed03
 8012844:	0801ec85 	.word	0x0801ec85
 8012848:	24006c28 	.word	0x24006c28
 801284c:	24006c20 	.word	0x24006c20

08012850 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8012850:	b470      	push	{r4, r5, r6}
 8012852:	4c07      	ldr	r4, [pc, #28]	; (8012870 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8012854:	4605      	mov	r5, r0
 8012856:	4610      	mov	r0, r2
 8012858:	9a03      	ldr	r2, [sp, #12]
 801285a:	6826      	ldr	r6, [r4, #0]
 801285c:	b936      	cbnz	r6, 801286c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801285e:	6025      	str	r5, [r4, #0]
 8012860:	4c04      	ldr	r4, [pc, #16]	; (8012874 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8012862:	8021      	strh	r1, [r4, #0]
 8012864:	4619      	mov	r1, r3
 8012866:	bc70      	pop	{r4, r5, r6}
 8012868:	f7ff bfc0 	b.w	80127ec <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801286c:	bc70      	pop	{r4, r5, r6}
 801286e:	4770      	bx	lr
 8012870:	24006c44 	.word	0x24006c44
 8012874:	24006c3c 	.word	0x24006c3c

08012878 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8012878:	b508      	push	{r3, lr}
 801287a:	4b14      	ldr	r3, [pc, #80]	; (80128cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801287c:	6819      	ldr	r1, [r3, #0]
 801287e:	b931      	cbnz	r1, 801288e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8012880:	4b13      	ldr	r3, [pc, #76]	; (80128d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8012882:	f240 4185 	movw	r1, #1157	; 0x485
 8012886:	4a13      	ldr	r2, [pc, #76]	; (80128d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8012888:	4813      	ldr	r0, [pc, #76]	; (80128d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801288a:	f008 fc07 	bl	801b09c <__assert_func>
 801288e:	4a13      	ldr	r2, [pc, #76]	; (80128dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8012890:	8803      	ldrh	r3, [r0, #0]
 8012892:	8812      	ldrh	r2, [r2, #0]
 8012894:	4293      	cmp	r3, r2
 8012896:	d204      	bcs.n	80128a2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8012898:	2214      	movs	r2, #20
 801289a:	fb02 1303 	mla	r3, r2, r3, r1
 801289e:	8918      	ldrh	r0, [r3, #8]
 80128a0:	bd08      	pop	{r3, pc}
 80128a2:	490f      	ldr	r1, [pc, #60]	; (80128e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80128a4:	8809      	ldrh	r1, [r1, #0]
 80128a6:	4411      	add	r1, r2
 80128a8:	428b      	cmp	r3, r1
 80128aa:	da06      	bge.n	80128ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80128ac:	1a9b      	subs	r3, r3, r2
 80128ae:	4a0d      	ldr	r2, [pc, #52]	; (80128e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80128b0:	210e      	movs	r1, #14
 80128b2:	6812      	ldr	r2, [r2, #0]
 80128b4:	fb01 2303 	mla	r3, r1, r3, r2
 80128b8:	e7f1      	b.n	801289e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80128ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80128be:	4293      	cmp	r3, r2
 80128c0:	bf0a      	itet	eq
 80128c2:	4b09      	ldreq	r3, [pc, #36]	; (80128e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80128c4:	2000      	movne	r0, #0
 80128c6:	8818      	ldrheq	r0, [r3, #0]
 80128c8:	e7ea      	b.n	80128a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80128ca:	bf00      	nop
 80128cc:	24006c44 	.word	0x24006c44
 80128d0:	0801dcf6 	.word	0x0801dcf6
 80128d4:	0801edb0 	.word	0x0801edb0
 80128d8:	0801ec85 	.word	0x0801ec85
 80128dc:	24006c3c 	.word	0x24006c3c
 80128e0:	24006c40 	.word	0x24006c40
 80128e4:	24006c24 	.word	0x24006c24
 80128e8:	24006bb0 	.word	0x24006bb0

080128ec <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80128ec:	b508      	push	{r3, lr}
 80128ee:	4b14      	ldr	r3, [pc, #80]	; (8012940 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80128f0:	6819      	ldr	r1, [r3, #0]
 80128f2:	b931      	cbnz	r1, 8012902 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80128f4:	4b13      	ldr	r3, [pc, #76]	; (8012944 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80128f6:	f240 4199 	movw	r1, #1177	; 0x499
 80128fa:	4a13      	ldr	r2, [pc, #76]	; (8012948 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80128fc:	4813      	ldr	r0, [pc, #76]	; (801294c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80128fe:	f008 fbcd 	bl	801b09c <__assert_func>
 8012902:	4a13      	ldr	r2, [pc, #76]	; (8012950 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8012904:	8803      	ldrh	r3, [r0, #0]
 8012906:	8812      	ldrh	r2, [r2, #0]
 8012908:	4293      	cmp	r3, r2
 801290a:	d204      	bcs.n	8012916 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801290c:	2214      	movs	r2, #20
 801290e:	fb02 1303 	mla	r3, r2, r3, r1
 8012912:	8958      	ldrh	r0, [r3, #10]
 8012914:	bd08      	pop	{r3, pc}
 8012916:	490f      	ldr	r1, [pc, #60]	; (8012954 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8012918:	8809      	ldrh	r1, [r1, #0]
 801291a:	4411      	add	r1, r2
 801291c:	428b      	cmp	r3, r1
 801291e:	da06      	bge.n	801292e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8012920:	1a9b      	subs	r3, r3, r2
 8012922:	4a0d      	ldr	r2, [pc, #52]	; (8012958 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8012924:	210e      	movs	r1, #14
 8012926:	6812      	ldr	r2, [r2, #0]
 8012928:	fb01 2303 	mla	r3, r1, r3, r2
 801292c:	e7f1      	b.n	8012912 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801292e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012932:	4293      	cmp	r3, r2
 8012934:	bf0a      	itet	eq
 8012936:	4b09      	ldreq	r3, [pc, #36]	; (801295c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8012938:	2000      	movne	r0, #0
 801293a:	8818      	ldrheq	r0, [r3, #0]
 801293c:	e7ea      	b.n	8012914 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801293e:	bf00      	nop
 8012940:	24006c44 	.word	0x24006c44
 8012944:	0801dcf6 	.word	0x0801dcf6
 8012948:	0801eddc 	.word	0x0801eddc
 801294c:	0801ec85 	.word	0x0801ec85
 8012950:	24006c3c 	.word	0x24006c3c
 8012954:	24006c40 	.word	0x24006c40
 8012958:	24006c24 	.word	0x24006c24
 801295c:	24006bb2 	.word	0x24006bb2

08012960 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8012960:	4b23      	ldr	r3, [pc, #140]	; (80129f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8012962:	b510      	push	{r4, lr}
 8012964:	681c      	ldr	r4, [r3, #0]
 8012966:	b934      	cbnz	r4, 8012976 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8012968:	4b22      	ldr	r3, [pc, #136]	; (80129f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801296a:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801296e:	4a22      	ldr	r2, [pc, #136]	; (80129f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8012970:	4822      	ldr	r0, [pc, #136]	; (80129fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8012972:	f008 fb93 	bl	801b09c <__assert_func>
 8012976:	4a22      	ldr	r2, [pc, #136]	; (8012a00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8012978:	880b      	ldrh	r3, [r1, #0]
 801297a:	8812      	ldrh	r2, [r2, #0]
 801297c:	4293      	cmp	r3, r2
 801297e:	d211      	bcs.n	80129a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8012980:	2214      	movs	r2, #20
 8012982:	fb02 4303 	mla	r3, r2, r3, r4
 8012986:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801298a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801298e:	8a1a      	ldrh	r2, [r3, #16]
 8012990:	8a5b      	ldrh	r3, [r3, #18]
 8012992:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012996:	8004      	strh	r4, [r0, #0]
 8012998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801299c:	8041      	strh	r1, [r0, #2]
 801299e:	8082      	strh	r2, [r0, #4]
 80129a0:	80c3      	strh	r3, [r0, #6]
 80129a2:	e00e      	b.n	80129c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80129a4:	4917      	ldr	r1, [pc, #92]	; (8012a04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80129a6:	8809      	ldrh	r1, [r1, #0]
 80129a8:	4411      	add	r1, r2
 80129aa:	428b      	cmp	r3, r1
 80129ac:	da0a      	bge.n	80129c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80129ae:	1a9b      	subs	r3, r3, r2
 80129b0:	4a15      	ldr	r2, [pc, #84]	; (8012a08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80129b2:	210e      	movs	r1, #14
 80129b4:	6812      	ldr	r2, [r2, #0]
 80129b6:	fb01 2303 	mla	r3, r1, r3, r2
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	6002      	str	r2, [r0, #0]
 80129be:	685a      	ldr	r2, [r3, #4]
 80129c0:	6042      	str	r2, [r0, #4]
 80129c2:	bd10      	pop	{r4, pc}
 80129c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d10b      	bne.n	80129e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80129cc:	4b0f      	ldr	r3, [pc, #60]	; (8012a0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80129ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80129d2:	4b0f      	ldr	r3, [pc, #60]	; (8012a10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80129d4:	8081      	strh	r1, [r0, #4]
 80129d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129da:	2300      	movs	r3, #0
 80129dc:	80c2      	strh	r2, [r0, #6]
 80129de:	8003      	strh	r3, [r0, #0]
 80129e0:	8043      	strh	r3, [r0, #2]
 80129e2:	e7ee      	b.n	80129c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80129e4:	2300      	movs	r3, #0
 80129e6:	8003      	strh	r3, [r0, #0]
 80129e8:	8043      	strh	r3, [r0, #2]
 80129ea:	8083      	strh	r3, [r0, #4]
 80129ec:	e7d8      	b.n	80129a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80129ee:	bf00      	nop
 80129f0:	24006c44 	.word	0x24006c44
 80129f4:	0801dcf6 	.word	0x0801dcf6
 80129f8:	0801ed49 	.word	0x0801ed49
 80129fc:	0801ec85 	.word	0x0801ec85
 8012a00:	24006c3c 	.word	0x24006c3c
 8012a04:	24006c40 	.word	0x24006c40
 8012a08:	24006c24 	.word	0x24006c24
 8012a0c:	24006bb0 	.word	0x24006bb0
 8012a10:	24006bb2 	.word	0x24006bb2

08012a14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8012a14:	4b18      	ldr	r3, [pc, #96]	; (8012a78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	b34b      	cbz	r3, 8012a6e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8012a1a:	4a18      	ldr	r2, [pc, #96]	; (8012a7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8012a1c:	8800      	ldrh	r0, [r0, #0]
 8012a1e:	8812      	ldrh	r2, [r2, #0]
 8012a20:	4290      	cmp	r0, r2
 8012a22:	d211      	bcs.n	8012a48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8012a24:	2214      	movs	r2, #20
 8012a26:	fb02 3300 	mla	r3, r2, r0, r3
 8012a2a:	8a1a      	ldrh	r2, [r3, #16]
 8012a2c:	8919      	ldrh	r1, [r3, #8]
 8012a2e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012a32:	428a      	cmp	r2, r1
 8012a34:	db1d      	blt.n	8012a72 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8012a36:	8a58      	ldrh	r0, [r3, #18]
 8012a38:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012a3c:	895b      	ldrh	r3, [r3, #10]
 8012a3e:	4298      	cmp	r0, r3
 8012a40:	bfac      	ite	ge
 8012a42:	2000      	movge	r0, #0
 8012a44:	2001      	movlt	r0, #1
 8012a46:	4770      	bx	lr
 8012a48:	4b0d      	ldr	r3, [pc, #52]	; (8012a80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8012a4a:	881b      	ldrh	r3, [r3, #0]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	4298      	cmp	r0, r3
 8012a50:	da0d      	bge.n	8012a6e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8012a52:	4b0c      	ldr	r3, [pc, #48]	; (8012a84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8012a54:	1a80      	subs	r0, r0, r2
 8012a56:	220e      	movs	r2, #14
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	fb02 3300 	mla	r3, r2, r0, r3
 8012a5e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8012a62:	891a      	ldrh	r2, [r3, #8]
 8012a64:	4291      	cmp	r1, r2
 8012a66:	db04      	blt.n	8012a72 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8012a68:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012a6c:	e7e6      	b.n	8012a3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8012a6e:	2000      	movs	r0, #0
 8012a70:	4770      	bx	lr
 8012a72:	2001      	movs	r0, #1
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop
 8012a78:	24006c44 	.word	0x24006c44
 8012a7c:	24006c3c 	.word	0x24006c3c
 8012a80:	24006c40 	.word	0x24006c40
 8012a84:	24006c24 	.word	0x24006c24

08012a88 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8012a88:	b508      	push	{r3, lr}
 8012a8a:	4b12      	ldr	r3, [pc, #72]	; (8012ad4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8012a8c:	6819      	ldr	r1, [r3, #0]
 8012a8e:	b931      	cbnz	r1, 8012a9e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8012a90:	4b11      	ldr	r3, [pc, #68]	; (8012ad8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012a92:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8012a96:	4a11      	ldr	r2, [pc, #68]	; (8012adc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8012a98:	4811      	ldr	r0, [pc, #68]	; (8012ae0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012a9a:	f008 faff 	bl	801b09c <__assert_func>
 8012a9e:	8803      	ldrh	r3, [r0, #0]
 8012aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d012      	beq.n	8012ace <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8012aa8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d103      	bne.n	8012ab8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8012ab0:	4b0c      	ldr	r3, [pc, #48]	; (8012ae4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8012ab6:	bd08      	pop	{r3, pc}
 8012ab8:	4a0b      	ldr	r2, [pc, #44]	; (8012ae8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8012aba:	6812      	ldr	r2, [r2, #0]
 8012abc:	b11a      	cbz	r2, 8012ac6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8012abe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	d1f7      	bne.n	8012ab6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012ac6:	2214      	movs	r2, #20
 8012ac8:	4353      	muls	r3, r2
 8012aca:	58c8      	ldr	r0, [r1, r3]
 8012acc:	e7f3      	b.n	8012ab6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012ace:	2000      	movs	r0, #0
 8012ad0:	e7f1      	b.n	8012ab6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012ad2:	bf00      	nop
 8012ad4:	24006c44 	.word	0x24006c44
 8012ad8:	0801dcf6 	.word	0x0801dcf6
 8012adc:	0801ed7f 	.word	0x0801ed7f
 8012ae0:	0801ec85 	.word	0x0801ec85
 8012ae4:	24006bbc 	.word	0x24006bbc
 8012ae8:	24006c20 	.word	0x24006c20

08012aec <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8012aec:	8802      	ldrh	r2, [r0, #0]
 8012aee:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d845      	bhi.n	8012b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8012af6:	4b24      	ldr	r3, [pc, #144]	; (8012b88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8012af8:	8818      	ldrh	r0, [r3, #0]
 8012afa:	4282      	cmp	r2, r0
 8012afc:	d221      	bcs.n	8012b42 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8012afe:	4b23      	ldr	r3, [pc, #140]	; (8012b8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8012b00:	6819      	ldr	r1, [r3, #0]
 8012b02:	2314      	movs	r3, #20
 8012b04:	fb03 1302 	mla	r3, r3, r2, r1
 8012b08:	6858      	ldr	r0, [r3, #4]
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d03a      	beq.n	8012b84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8012b0e:	4920      	ldr	r1, [pc, #128]	; (8012b90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8012b10:	6809      	ldr	r1, [r1, #0]
 8012b12:	2900      	cmp	r1, #0
 8012b14:	d036      	beq.n	8012b84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8012b16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012b1a:	2900      	cmp	r1, #0
 8012b1c:	d032      	beq.n	8012b84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8012b1e:	891a      	ldrh	r2, [r3, #8]
 8012b20:	8958      	ldrh	r0, [r3, #10]
 8012b22:	4350      	muls	r0, r2
 8012b24:	7c5a      	ldrb	r2, [r3, #17]
 8012b26:	7cdb      	ldrb	r3, [r3, #19]
 8012b28:	0952      	lsrs	r2, r2, #5
 8012b2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012b2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8012b32:	2b0b      	cmp	r3, #11
 8012b34:	bf18      	it	ne
 8012b36:	0040      	lslne	r0, r0, #1
 8012b38:	3003      	adds	r0, #3
 8012b3a:	f020 0003 	bic.w	r0, r0, #3
 8012b3e:	4408      	add	r0, r1
 8012b40:	4770      	bx	lr
 8012b42:	4b14      	ldr	r3, [pc, #80]	; (8012b94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8012b44:	881b      	ldrh	r3, [r3, #0]
 8012b46:	4403      	add	r3, r0
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	da1a      	bge.n	8012b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8012b4c:	4b12      	ldr	r3, [pc, #72]	; (8012b98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8012b4e:	1a10      	subs	r0, r2, r0
 8012b50:	210e      	movs	r1, #14
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	fb01 3000 	mla	r0, r1, r0, r3
 8012b58:	7b03      	ldrb	r3, [r0, #12]
 8012b5a:	f003 031f 	and.w	r3, r3, #31
 8012b5e:	2b0b      	cmp	r3, #11
 8012b60:	d10b      	bne.n	8012b7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012b62:	8903      	ldrh	r3, [r0, #8]
 8012b64:	8940      	ldrh	r0, [r0, #10]
 8012b66:	4358      	muls	r0, r3
 8012b68:	4b09      	ldr	r3, [pc, #36]	; (8012b90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8012b6a:	3003      	adds	r0, #3
 8012b6c:	6819      	ldr	r1, [r3, #0]
 8012b6e:	f020 0303 	bic.w	r3, r0, #3
 8012b72:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8012b76:	4418      	add	r0, r3
 8012b78:	4770      	bx	lr
 8012b7a:	2b0d      	cmp	r3, #13
 8012b7c:	d101      	bne.n	8012b82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8012b7e:	300d      	adds	r0, #13
 8012b80:	4770      	bx	lr
 8012b82:	2000      	movs	r0, #0
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	24006c3c 	.word	0x24006c3c
 8012b8c:	24006c44 	.word	0x24006c44
 8012b90:	24006c20 	.word	0x24006c20
 8012b94:	24006c40 	.word	0x24006c40
 8012b98:	24006c24 	.word	0x24006c24

08012b9c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8012b9c:	4b17      	ldr	r3, [pc, #92]	; (8012bfc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8012b9e:	b510      	push	{r4, lr}
 8012ba0:	6819      	ldr	r1, [r3, #0]
 8012ba2:	8803      	ldrh	r3, [r0, #0]
 8012ba4:	b1e9      	cbz	r1, 8012be2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8012ba6:	4a16      	ldr	r2, [pc, #88]	; (8012c00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8012ba8:	8812      	ldrh	r2, [r2, #0]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d90a      	bls.n	8012bc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8012bae:	2214      	movs	r2, #20
 8012bb0:	fb02 1303 	mla	r3, r2, r3, r1
 8012bb4:	7c58      	ldrb	r0, [r3, #17]
 8012bb6:	0942      	lsrs	r2, r0, #5
 8012bb8:	7cd8      	ldrb	r0, [r3, #19]
 8012bba:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8012bbe:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8012bc2:	bd10      	pop	{r4, pc}
 8012bc4:	490f      	ldr	r1, [pc, #60]	; (8012c04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8012bc6:	8809      	ldrh	r1, [r1, #0]
 8012bc8:	4411      	add	r1, r2
 8012bca:	428b      	cmp	r3, r1
 8012bcc:	da09      	bge.n	8012be2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8012bce:	1a9b      	subs	r3, r3, r2
 8012bd0:	4a0d      	ldr	r2, [pc, #52]	; (8012c08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8012bd2:	210e      	movs	r1, #14
 8012bd4:	6812      	ldr	r2, [r2, #0]
 8012bd6:	fb01 2303 	mla	r3, r1, r3, r2
 8012bda:	7b18      	ldrb	r0, [r3, #12]
 8012bdc:	f000 001f 	and.w	r0, r0, #31
 8012be0:	e7ef      	b.n	8012bc2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8012be2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d106      	bne.n	8012bf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8012bea:	f7f9 f855 	bl	800bc98 <_ZN8touchgfx3HAL3lcdEv>
 8012bee:	6803      	ldr	r3, [r0, #0]
 8012bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf6:	4718      	bx	r3
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	e7e2      	b.n	8012bc2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8012bfc:	24006c44 	.word	0x24006c44
 8012c00:	24006c3c 	.word	0x24006c3c
 8012c04:	24006c40 	.word	0x24006c40
 8012c08:	24006c24 	.word	0x24006c24

08012c0c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8012c0c:	2018      	movs	r0, #24
 8012c0e:	4770      	bx	lr

08012c10 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8012c10:	2001      	movs	r0, #1
 8012c12:	4770      	bx	lr

08012c14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c18:	b085      	sub	sp, #20
 8012c1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012c1c:	9203      	str	r2, [sp, #12]
 8012c1e:	6870      	ldr	r0, [r6, #4]
 8012c20:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8012c24:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012c28:	9101      	str	r1, [sp, #4]
 8012c2a:	fa1f f885 	uxth.w	r8, r5
 8012c2e:	43ed      	mvns	r5, r5
 8012c30:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012c34:	b2ed      	uxtb	r5, r5
 8012c36:	fb00 2404 	mla	r4, r0, r4, r2
 8012c3a:	6832      	ldr	r2, [r6, #0]
 8012c3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012c40:	4414      	add	r4, r2
 8012c42:	f8dc 2000 	ldr.w	r2, [ip]
 8012c46:	9202      	str	r2, [sp, #8]
 8012c48:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012c4c:	f102 0e04 	add.w	lr, r2, #4
 8012c50:	9a01      	ldr	r2, [sp, #4]
 8012c52:	2a00      	cmp	r2, #0
 8012c54:	dc03      	bgt.n	8012c5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8012c56:	9a03      	ldr	r2, [sp, #12]
 8012c58:	2a00      	cmp	r2, #0
 8012c5a:	f340 8116 	ble.w	8012e8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012c5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c60:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8012c64:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012c68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012c6a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8012c6e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	dd0e      	ble.n	8012c94 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8012c76:	1406      	asrs	r6, r0, #16
 8012c78:	d405      	bmi.n	8012c86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c7a:	4556      	cmp	r6, sl
 8012c7c:	da03      	bge.n	8012c86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c7e:	1416      	asrs	r6, r2, #16
 8012c80:	d401      	bmi.n	8012c86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c82:	454e      	cmp	r6, r9
 8012c84:	db07      	blt.n	8012c96 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8012c86:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	3403      	adds	r4, #3
 8012c8c:	4430      	add	r0, r6
 8012c8e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012c90:	4432      	add	r2, r6
 8012c92:	e7ee      	b.n	8012c72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8012c94:	d063      	beq.n	8012d5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8012c96:	1e5e      	subs	r6, r3, #1
 8012c98:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8012c9a:	fb07 0706 	mla	r7, r7, r6, r0
 8012c9e:	143f      	asrs	r7, r7, #16
 8012ca0:	d454      	bmi.n	8012d4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012ca2:	4557      	cmp	r7, sl
 8012ca4:	da52      	bge.n	8012d4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012ca6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012ca8:	fb07 2606 	mla	r6, r7, r6, r2
 8012cac:	1436      	asrs	r6, r6, #16
 8012cae:	d44d      	bmi.n	8012d4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012cb0:	454e      	cmp	r6, r9
 8012cb2:	da4b      	bge.n	8012d4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012cb4:	1ce6      	adds	r6, r4, #3
 8012cb6:	4699      	mov	r9, r3
 8012cb8:	f1b9 0f00 	cmp.w	r9, #0
 8012cbc:	f106 0603 	add.w	r6, r6, #3
 8012cc0:	dd48      	ble.n	8012d54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8012cc2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8012cc6:	1417      	asrs	r7, r2, #16
 8012cc8:	9902      	ldr	r1, [sp, #8]
 8012cca:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8012cce:	f109 39ff 	add.w	r9, r9, #4294967295
 8012cd2:	fb0b 1707 	mla	r7, fp, r7, r1
 8012cd6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8012cda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012cdc:	f817 700a 	ldrb.w	r7, [r7, sl]
 8012ce0:	fb1b fb05 	smulbb	fp, fp, r5
 8012ce4:	4408      	add	r0, r1
 8012ce6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012ce8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012cec:	440a      	add	r2, r1
 8012cee:	eb0e 0a07 	add.w	sl, lr, r7
 8012cf2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8012cf6:	fb07 b708 	mla	r7, r7, r8, fp
 8012cfa:	b2bf      	uxth	r7, r7
 8012cfc:	f107 0b01 	add.w	fp, r7, #1
 8012d00:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012d04:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8012d08:	fb1b fb05 	smulbb	fp, fp, r5
 8012d0c:	123f      	asrs	r7, r7, #8
 8012d0e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8012d12:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8012d16:	fb07 b708 	mla	r7, r7, r8, fp
 8012d1a:	b2bf      	uxth	r7, r7
 8012d1c:	f107 0b01 	add.w	fp, r7, #1
 8012d20:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012d24:	123f      	asrs	r7, r7, #8
 8012d26:	f806 7c05 	strb.w	r7, [r6, #-5]
 8012d2a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8012d2e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8012d32:	fb1a fa05 	smulbb	sl, sl, r5
 8012d36:	fb07 a708 	mla	r7, r7, r8, sl
 8012d3a:	b2bf      	uxth	r7, r7
 8012d3c:	f107 0a01 	add.w	sl, r7, #1
 8012d40:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8012d44:	123f      	asrs	r7, r7, #8
 8012d46:	f806 7c04 	strb.w	r7, [r6, #-4]
 8012d4a:	e7b5      	b.n	8012cb8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8012d4c:	2700      	movs	r7, #0
 8012d4e:	1bde      	subs	r6, r3, r7
 8012d50:	2e00      	cmp	r6, #0
 8012d52:	dc42      	bgt.n	8012dda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8012d54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012d5c:	441c      	add	r4, r3
 8012d5e:	9b01      	ldr	r3, [sp, #4]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	f340 8092 	ble.w	8012e8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012d70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012d74:	eef0 6a62 	vmov.f32	s13, s5
 8012d78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012d7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012d80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012d84:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8012d88:	eef0 6a43 	vmov.f32	s13, s6
 8012d8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012d90:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8012d94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012d98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012d9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012da0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012da4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012da8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012dac:	ee12 2a90 	vmov	r2, s5
 8012db0:	eef0 2a47 	vmov.f32	s5, s14
 8012db4:	fb92 f3f3 	sdiv	r3, r2, r3
 8012db8:	ee13 2a10 	vmov	r2, s6
 8012dbc:	9311      	str	r3, [sp, #68]	; 0x44
 8012dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dc0:	eeb0 3a67 	vmov.f32	s6, s15
 8012dc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8012dc8:	9312      	str	r3, [sp, #72]	; 0x48
 8012dca:	9b01      	ldr	r3, [sp, #4]
 8012dcc:	9a03      	ldr	r2, [sp, #12]
 8012dce:	3b01      	subs	r3, #1
 8012dd0:	9301      	str	r3, [sp, #4]
 8012dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dd4:	bf08      	it	eq
 8012dd6:	4613      	moveq	r3, r2
 8012dd8:	e73a      	b.n	8012c50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012dda:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8012dde:	d44e      	bmi.n	8012e7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012de0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8012de4:	4556      	cmp	r6, sl
 8012de6:	dd4a      	ble.n	8012e7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012de8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8012dec:	d447      	bmi.n	8012e7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012dee:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8012df2:	4559      	cmp	r1, fp
 8012df4:	dd43      	ble.n	8012e7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012df6:	fa0f f986 	sxth.w	r9, r6
 8012dfa:	9902      	ldr	r1, [sp, #8]
 8012dfc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8012e00:	fb0b 1909 	mla	r9, fp, r9, r1
 8012e04:	f814 b006 	ldrb.w	fp, [r4, r6]
 8012e08:	f819 900a 	ldrb.w	r9, [r9, sl]
 8012e0c:	fb1b fb05 	smulbb	fp, fp, r5
 8012e10:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012e14:	eb0e 0a09 	add.w	sl, lr, r9
 8012e18:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8012e1c:	fb09 b908 	mla	r9, r9, r8, fp
 8012e20:	fa1f f989 	uxth.w	r9, r9
 8012e24:	f109 0b01 	add.w	fp, r9, #1
 8012e28:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012e2c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e30:	f804 9006 	strb.w	r9, [r4, r6]
 8012e34:	4426      	add	r6, r4
 8012e36:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012e3a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8012e3e:	fb1b fb05 	smulbb	fp, fp, r5
 8012e42:	fb09 b908 	mla	r9, r9, r8, fp
 8012e46:	fa1f f989 	uxth.w	r9, r9
 8012e4a:	f109 0b01 	add.w	fp, r9, #1
 8012e4e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012e52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e56:	f886 9001 	strb.w	r9, [r6, #1]
 8012e5a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012e5e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8012e62:	fb1a fa05 	smulbb	sl, sl, r5
 8012e66:	fb09 a908 	mla	r9, r9, r8, sl
 8012e6a:	fa1f f989 	uxth.w	r9, r9
 8012e6e:	f109 0a01 	add.w	sl, r9, #1
 8012e72:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8012e76:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e7a:	f886 9002 	strb.w	r9, [r6, #2]
 8012e7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012e80:	3701      	adds	r7, #1
 8012e82:	4408      	add	r0, r1
 8012e84:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e86:	440a      	add	r2, r1
 8012e88:	e761      	b.n	8012d4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012e8a:	b005      	add	sp, #20
 8012e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e90 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e94:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012e96:	4693      	mov	fp, r2
 8012e98:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012e9e:	6868      	ldr	r0, [r5, #4]
 8012ea0:	6877      	ldr	r7, [r6, #4]
 8012ea2:	9100      	str	r1, [sp, #0]
 8012ea4:	3704      	adds	r7, #4
 8012ea6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8012eaa:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8012eae:	fb00 2404 	mla	r4, r0, r4, r2
 8012eb2:	682a      	ldr	r2, [r5, #0]
 8012eb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012eb8:	4414      	add	r4, r2
 8012eba:	6832      	ldr	r2, [r6, #0]
 8012ebc:	9201      	str	r2, [sp, #4]
 8012ebe:	9a00      	ldr	r2, [sp, #0]
 8012ec0:	2a00      	cmp	r2, #0
 8012ec2:	dc03      	bgt.n	8012ecc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012ec4:	f1bb 0f00 	cmp.w	fp, #0
 8012ec8:	f340 80bc 	ble.w	8013044 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8012ecc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ece:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8012ed2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ed8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8012edc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	dd0c      	ble.n	8012efe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012ee4:	1405      	asrs	r5, r0, #16
 8012ee6:	d405      	bmi.n	8012ef4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012ee8:	4555      	cmp	r5, sl
 8012eea:	da03      	bge.n	8012ef4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012eec:	1415      	asrs	r5, r2, #16
 8012eee:	d401      	bmi.n	8012ef4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012ef0:	454d      	cmp	r5, r9
 8012ef2:	db05      	blt.n	8012f00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012ef4:	4440      	add	r0, r8
 8012ef6:	4472      	add	r2, lr
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	3403      	adds	r4, #3
 8012efc:	e7f0      	b.n	8012ee0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8012efe:	d03f      	beq.n	8012f80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8012f00:	1e5d      	subs	r5, r3, #1
 8012f02:	fb08 0c05 	mla	ip, r8, r5, r0
 8012f06:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8012f0a:	d42e      	bmi.n	8012f6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012f0c:	45d4      	cmp	ip, sl
 8012f0e:	da2c      	bge.n	8012f6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012f10:	fb0e 2505 	mla	r5, lr, r5, r2
 8012f14:	142d      	asrs	r5, r5, #16
 8012f16:	d428      	bmi.n	8012f6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012f18:	454d      	cmp	r5, r9
 8012f1a:	da26      	bge.n	8012f6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012f1c:	1ce5      	adds	r5, r4, #3
 8012f1e:	469c      	mov	ip, r3
 8012f20:	f1bc 0f00 	cmp.w	ip, #0
 8012f24:	f105 0503 	add.w	r5, r5, #3
 8012f28:	dd25      	ble.n	8012f76 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8012f2a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012f2e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8012f32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012f36:	4472      	add	r2, lr
 8012f38:	468a      	mov	sl, r1
 8012f3a:	9901      	ldr	r1, [sp, #4]
 8012f3c:	fb0a 1909 	mla	r9, sl, r9, r1
 8012f40:	1401      	asrs	r1, r0, #16
 8012f42:	4440      	add	r0, r8
 8012f44:	f819 9001 	ldrb.w	r9, [r9, r1]
 8012f48:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012f4c:	eb07 0a09 	add.w	sl, r7, r9
 8012f50:	f817 9009 	ldrb.w	r9, [r7, r9]
 8012f54:	f805 9c06 	strb.w	r9, [r5, #-6]
 8012f58:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012f5c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8012f60:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012f64:	f805 9c04 	strb.w	r9, [r5, #-4]
 8012f68:	e7da      	b.n	8012f20 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8012f6a:	2500      	movs	r5, #0
 8012f6c:	eba3 0c05 	sub.w	ip, r3, r5
 8012f70:	f1bc 0f00 	cmp.w	ip, #0
 8012f74:	dc3b      	bgt.n	8012fee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8012f76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012f7e:	441c      	add	r4, r3
 8012f80:	9b00      	ldr	r3, [sp, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	dd5e      	ble.n	8013044 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8012f86:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012f90:	eeb0 6a62 	vmov.f32	s12, s5
 8012f94:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012f98:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012f9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012fa0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8012fa4:	eeb0 6a43 	vmov.f32	s12, s6
 8012fa8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012fac:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8012fb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012fb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012fb8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012fbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012fc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012fc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012fc8:	ee12 2a90 	vmov	r2, s5
 8012fcc:	eef0 2a47 	vmov.f32	s5, s14
 8012fd0:	fb92 f8f3 	sdiv	r8, r2, r3
 8012fd4:	ee13 2a10 	vmov	r2, s6
 8012fd8:	eeb0 3a67 	vmov.f32	s6, s15
 8012fdc:	fb92 fef3 	sdiv	lr, r2, r3
 8012fe0:	9b00      	ldr	r3, [sp, #0]
 8012fe2:	3b01      	subs	r3, #1
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fe8:	bf08      	it	eq
 8012fea:	465b      	moveq	r3, fp
 8012fec:	e767      	b.n	8012ebe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8012fee:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012ff2:	d423      	bmi.n	801303c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012ff4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8012ff8:	45cc      	cmp	ip, r9
 8012ffa:	dd1f      	ble.n	801303c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012ffc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013000:	d41c      	bmi.n	801303c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8013002:	68f1      	ldr	r1, [r6, #12]
 8013004:	4551      	cmp	r1, sl
 8013006:	dd19      	ble.n	801303c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8013008:	fa0f fc8c 	sxth.w	ip, ip
 801300c:	9901      	ldr	r1, [sp, #4]
 801300e:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8013012:	f81c c009 	ldrb.w	ip, [ip, r9]
 8013016:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801301a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801301e:	eb07 090c 	add.w	r9, r7, ip
 8013022:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8013026:	f804 a00c 	strb.w	sl, [r4, ip]
 801302a:	44a4      	add	ip, r4
 801302c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8013030:	f88c a001 	strb.w	sl, [ip, #1]
 8013034:	f899 9002 	ldrb.w	r9, [r9, #2]
 8013038:	f88c 9002 	strb.w	r9, [ip, #2]
 801303c:	4440      	add	r0, r8
 801303e:	4472      	add	r2, lr
 8013040:	3501      	adds	r5, #1
 8013042:	e793      	b.n	8012f6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8013044:	b003      	add	sp, #12
 8013046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801304a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801304a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801304e:	b085      	sub	sp, #20
 8013050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013054:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013056:	9202      	str	r2, [sp, #8]
 8013058:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801305c:	6860      	ldr	r0, [r4, #4]
 801305e:	9203      	str	r2, [sp, #12]
 8013060:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013064:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8013068:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801306c:	fb00 2505 	mla	r5, r0, r5, r2
 8013070:	6822      	ldr	r2, [r4, #0]
 8013072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013076:	4415      	add	r5, r2
 8013078:	f8dc 2000 	ldr.w	r2, [ip]
 801307c:	9200      	str	r2, [sp, #0]
 801307e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013082:	3204      	adds	r2, #4
 8013084:	9201      	str	r2, [sp, #4]
 8013086:	2900      	cmp	r1, #0
 8013088:	dc03      	bgt.n	8013092 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801308a:	9a02      	ldr	r2, [sp, #8]
 801308c:	2a00      	cmp	r2, #0
 801308e:	f340 8127 	ble.w	80132e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8013092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013094:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013098:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801309c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801309e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80130a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	dd0d      	ble.n	80130c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80130aa:	1422      	asrs	r2, r4, #16
 80130ac:	d405      	bmi.n	80130ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80130ae:	4542      	cmp	r2, r8
 80130b0:	da03      	bge.n	80130ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80130b2:	1402      	asrs	r2, r0, #16
 80130b4:	d401      	bmi.n	80130ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80130b6:	42ba      	cmp	r2, r7
 80130b8:	db06      	blt.n	80130c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80130ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130bc:	4474      	add	r4, lr
 80130be:	3b01      	subs	r3, #1
 80130c0:	3503      	adds	r5, #3
 80130c2:	4410      	add	r0, r2
 80130c4:	e7ef      	b.n	80130a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80130c6:	d075      	beq.n	80131b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80130c8:	1e5a      	subs	r2, r3, #1
 80130ca:	fb0e 4602 	mla	r6, lr, r2, r4
 80130ce:	1436      	asrs	r6, r6, #16
 80130d0:	d465      	bmi.n	801319e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130d2:	4546      	cmp	r6, r8
 80130d4:	da63      	bge.n	801319e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80130d8:	fb06 0202 	mla	r2, r6, r2, r0
 80130dc:	1412      	asrs	r2, r2, #16
 80130de:	d45e      	bmi.n	801319e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130e0:	42ba      	cmp	r2, r7
 80130e2:	da5c      	bge.n	801319e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130e4:	1cef      	adds	r7, r5, #3
 80130e6:	4699      	mov	r9, r3
 80130e8:	f1b9 0f00 	cmp.w	r9, #0
 80130ec:	dd5d      	ble.n	80131aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80130ee:	1402      	asrs	r2, r0, #16
 80130f0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80130f4:	1426      	asrs	r6, r4, #16
 80130f6:	4692      	mov	sl, r2
 80130f8:	9a00      	ldr	r2, [sp, #0]
 80130fa:	fb08 220a 	mla	r2, r8, sl, r2
 80130fe:	5d92      	ldrb	r2, [r2, r6]
 8013100:	9e01      	ldr	r6, [sp, #4]
 8013102:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8013106:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801310a:	d041      	beq.n	8013190 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801310c:	9a03      	ldr	r2, [sp, #12]
 801310e:	fa5f fb86 	uxtb.w	fp, r6
 8013112:	fb02 f808 	mul.w	r8, r2, r8
 8013116:	f108 0201 	add.w	r2, r8, #1
 801311a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801311e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013122:	1212      	asrs	r2, r2, #8
 8013124:	fa1f fa82 	uxth.w	sl, r2
 8013128:	43d2      	mvns	r2, r2
 801312a:	fb1b fb0a 	smulbb	fp, fp, sl
 801312e:	b2d2      	uxtb	r2, r2
 8013130:	fb08 b802 	mla	r8, r8, r2, fp
 8013134:	fa1f f888 	uxth.w	r8, r8
 8013138:	f108 0b01 	add.w	fp, r8, #1
 801313c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013140:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013144:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013148:	fb1b fb0a 	smulbb	fp, fp, sl
 801314c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013150:	fb16 fa0a 	smulbb	sl, r6, sl
 8013154:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013158:	f807 8c03 	strb.w	r8, [r7, #-3]
 801315c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013160:	fb06 aa02 	mla	sl, r6, r2, sl
 8013164:	fb08 b802 	mla	r8, r8, r2, fp
 8013168:	fa1f fa8a 	uxth.w	sl, sl
 801316c:	fa1f f888 	uxth.w	r8, r8
 8013170:	f10a 0601 	add.w	r6, sl, #1
 8013174:	f108 0b01 	add.w	fp, r8, #1
 8013178:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801317c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013180:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013184:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013188:	f807 ac01 	strb.w	sl, [r7, #-1]
 801318c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013190:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013192:	4474      	add	r4, lr
 8013194:	3703      	adds	r7, #3
 8013196:	f109 39ff 	add.w	r9, r9, #4294967295
 801319a:	4410      	add	r0, r2
 801319c:	e7a4      	b.n	80130e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801319e:	f04f 0800 	mov.w	r8, #0
 80131a2:	eba3 0208 	sub.w	r2, r3, r8
 80131a6:	2a00      	cmp	r2, #0
 80131a8:	dc3b      	bgt.n	8013222 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80131aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80131ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80131b2:	441d      	add	r5, r3
 80131b4:	2900      	cmp	r1, #0
 80131b6:	f340 8093 	ble.w	80132e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80131ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80131be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80131c4:	3901      	subs	r1, #1
 80131c6:	eeb0 6a62 	vmov.f32	s12, s5
 80131ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80131ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80131d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80131d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80131da:	eeb0 6a43 	vmov.f32	s12, s6
 80131de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80131e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80131e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80131ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80131ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80131f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80131f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80131fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80131fe:	ee12 2a90 	vmov	r2, s5
 8013202:	eef0 2a47 	vmov.f32	s5, s14
 8013206:	fb92 fef3 	sdiv	lr, r2, r3
 801320a:	ee13 2a10 	vmov	r2, s6
 801320e:	eeb0 3a67 	vmov.f32	s6, s15
 8013212:	fb92 f3f3 	sdiv	r3, r2, r3
 8013216:	9a02      	ldr	r2, [sp, #8]
 8013218:	9312      	str	r3, [sp, #72]	; 0x48
 801321a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801321c:	bf08      	it	eq
 801321e:	4613      	moveq	r3, r2
 8013220:	e731      	b.n	8013086 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013222:	1427      	asrs	r7, r4, #16
 8013224:	d456      	bmi.n	80132d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013226:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801322a:	42be      	cmp	r6, r7
 801322c:	dd52      	ble.n	80132d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801322e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013232:	d44f      	bmi.n	80132d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013234:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013238:	454a      	cmp	r2, r9
 801323a:	dd4b      	ble.n	80132d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801323c:	9a00      	ldr	r2, [sp, #0]
 801323e:	b236      	sxth	r6, r6
 8013240:	fb09 2606 	mla	r6, r9, r6, r2
 8013244:	5df2      	ldrb	r2, [r6, r7]
 8013246:	9e01      	ldr	r6, [sp, #4]
 8013248:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801324c:	0e3a      	lsrs	r2, r7, #24
 801324e:	d041      	beq.n	80132d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013250:	9e03      	ldr	r6, [sp, #12]
 8013252:	fa5f fb87 	uxtb.w	fp, r7
 8013256:	4372      	muls	r2, r6
 8013258:	1c56      	adds	r6, r2, #1
 801325a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801325e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013262:	1212      	asrs	r2, r2, #8
 8013264:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013268:	fa1f fa82 	uxth.w	sl, r2
 801326c:	43d2      	mvns	r2, r2
 801326e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013272:	b2d2      	uxtb	r2, r2
 8013274:	fb09 b902 	mla	r9, r9, r2, fp
 8013278:	fa1f f989 	uxth.w	r9, r9
 801327c:	f109 0b01 	add.w	fp, r9, #1
 8013280:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013284:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013288:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801328c:	fb1b fb0a 	smulbb	fp, fp, sl
 8013290:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013294:	fb17 fa0a 	smulbb	sl, r7, sl
 8013298:	f805 9006 	strb.w	r9, [r5, r6]
 801329c:	442e      	add	r6, r5
 801329e:	78b7      	ldrb	r7, [r6, #2]
 80132a0:	f896 9001 	ldrb.w	r9, [r6, #1]
 80132a4:	fb07 aa02 	mla	sl, r7, r2, sl
 80132a8:	fb09 b902 	mla	r9, r9, r2, fp
 80132ac:	fa1f fa8a 	uxth.w	sl, sl
 80132b0:	fa1f f989 	uxth.w	r9, r9
 80132b4:	f10a 0701 	add.w	r7, sl, #1
 80132b8:	f109 0b01 	add.w	fp, r9, #1
 80132bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80132c0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80132c4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80132c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80132cc:	f886 a002 	strb.w	sl, [r6, #2]
 80132d0:	f886 9001 	strb.w	r9, [r6, #1]
 80132d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132d6:	4474      	add	r4, lr
 80132d8:	f108 0801 	add.w	r8, r8, #1
 80132dc:	4410      	add	r0, r2
 80132de:	e760      	b.n	80131a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80132e0:	b005      	add	sp, #20
 80132e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80132e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ea:	b085      	sub	sp, #20
 80132ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80132f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80132f2:	9203      	str	r2, [sp, #12]
 80132f4:	6868      	ldr	r0, [r5, #4]
 80132f6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80132fa:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80132fe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013302:	fb00 2404 	mla	r4, r0, r4, r2
 8013306:	682a      	ldr	r2, [r5, #0]
 8013308:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801330c:	4414      	add	r4, r2
 801330e:	f8dc 2000 	ldr.w	r2, [ip]
 8013312:	9201      	str	r2, [sp, #4]
 8013314:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013318:	3204      	adds	r2, #4
 801331a:	9202      	str	r2, [sp, #8]
 801331c:	2900      	cmp	r1, #0
 801331e:	dc03      	bgt.n	8013328 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8013320:	9a03      	ldr	r2, [sp, #12]
 8013322:	2a00      	cmp	r2, #0
 8013324:	f340 8137 	ble.w	8013596 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801332a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801332e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013332:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013334:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013338:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801333c:	2b00      	cmp	r3, #0
 801333e:	dd0d      	ble.n	801335c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013340:	1405      	asrs	r5, r0, #16
 8013342:	d405      	bmi.n	8013350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013344:	4545      	cmp	r5, r8
 8013346:	da03      	bge.n	8013350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013348:	1415      	asrs	r5, r2, #16
 801334a:	d401      	bmi.n	8013350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801334c:	42bd      	cmp	r5, r7
 801334e:	db06      	blt.n	801335e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013350:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013352:	4470      	add	r0, lr
 8013354:	3b01      	subs	r3, #1
 8013356:	3403      	adds	r4, #3
 8013358:	442a      	add	r2, r5
 801335a:	e7ef      	b.n	801333c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801335c:	d070      	beq.n	8013440 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801335e:	1e5d      	subs	r5, r3, #1
 8013360:	fb0e 0605 	mla	r6, lr, r5, r0
 8013364:	1436      	asrs	r6, r6, #16
 8013366:	d462      	bmi.n	801342e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013368:	4546      	cmp	r6, r8
 801336a:	da60      	bge.n	801342e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801336c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801336e:	fb06 2505 	mla	r5, r6, r5, r2
 8013372:	142d      	asrs	r5, r5, #16
 8013374:	d45b      	bmi.n	801342e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013376:	42bd      	cmp	r5, r7
 8013378:	da59      	bge.n	801342e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801337a:	1ce5      	adds	r5, r4, #3
 801337c:	469a      	mov	sl, r3
 801337e:	f1ba 0f00 	cmp.w	sl, #0
 8013382:	dd58      	ble.n	8013436 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8013384:	1416      	asrs	r6, r2, #16
 8013386:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801338a:	1407      	asrs	r7, r0, #16
 801338c:	46b1      	mov	r9, r6
 801338e:	9e01      	ldr	r6, [sp, #4]
 8013390:	fb08 6609 	mla	r6, r8, r9, r6
 8013394:	5df6      	ldrb	r6, [r6, r7]
 8013396:	9f02      	ldr	r7, [sp, #8]
 8013398:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801339c:	0e37      	lsrs	r7, r6, #24
 801339e:	2fff      	cmp	r7, #255	; 0xff
 80133a0:	f000 80f0 	beq.w	8013584 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80133a4:	fa5f f887 	uxtb.w	r8, r7
 80133a8:	b3d7      	cbz	r7, 8013420 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80133aa:	fa1f f788 	uxth.w	r7, r8
 80133ae:	ea6f 0808 	mvn.w	r8, r8
 80133b2:	fa5f fb86 	uxtb.w	fp, r6
 80133b6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80133ba:	fa5f f888 	uxtb.w	r8, r8
 80133be:	fb1b fb07 	smulbb	fp, fp, r7
 80133c2:	fb09 b908 	mla	r9, r9, r8, fp
 80133c6:	fa1f f989 	uxth.w	r9, r9
 80133ca:	f109 0b01 	add.w	fp, r9, #1
 80133ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133d2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80133d6:	fb1b fb08 	smulbb	fp, fp, r8
 80133da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133de:	f805 9c03 	strb.w	r9, [r5, #-3]
 80133e2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80133e6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80133ea:	fb09 b907 	mla	r9, r9, r7, fp
 80133ee:	fa1f f989 	uxth.w	r9, r9
 80133f2:	f109 0b01 	add.w	fp, r9, #1
 80133f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133fe:	f805 9c02 	strb.w	r9, [r5, #-2]
 8013402:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8013406:	fb19 f808 	smulbb	r8, r9, r8
 801340a:	fb06 8607 	mla	r6, r6, r7, r8
 801340e:	b2b6      	uxth	r6, r6
 8013410:	f106 0801 	add.w	r8, r6, #1
 8013414:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8013418:	ea4f 2828 	mov.w	r8, r8, asr #8
 801341c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013420:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013422:	4470      	add	r0, lr
 8013424:	3503      	adds	r5, #3
 8013426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801342a:	4432      	add	r2, r6
 801342c:	e7a7      	b.n	801337e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801342e:	2600      	movs	r6, #0
 8013430:	1b9d      	subs	r5, r3, r6
 8013432:	2d00      	cmp	r5, #0
 8013434:	dc3b      	bgt.n	80134ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801343a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801343e:	441c      	add	r4, r3
 8013440:	2900      	cmp	r1, #0
 8013442:	f340 80a8 	ble.w	8013596 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013446:	ee30 0a04 	vadd.f32	s0, s0, s8
 801344a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801344c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013450:	3901      	subs	r1, #1
 8013452:	eeb0 6a62 	vmov.f32	s12, s5
 8013456:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801345a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801345e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013462:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013466:	eeb0 6a43 	vmov.f32	s12, s6
 801346a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801346e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013472:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013476:	ee61 7a27 	vmul.f32	s15, s2, s15
 801347a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801347e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013482:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013486:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801348a:	ee12 2a90 	vmov	r2, s5
 801348e:	eef0 2a47 	vmov.f32	s5, s14
 8013492:	fb92 fef3 	sdiv	lr, r2, r3
 8013496:	ee13 2a10 	vmov	r2, s6
 801349a:	eeb0 3a67 	vmov.f32	s6, s15
 801349e:	fb92 f3f3 	sdiv	r3, r2, r3
 80134a2:	9a03      	ldr	r2, [sp, #12]
 80134a4:	9312      	str	r3, [sp, #72]	; 0x48
 80134a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134a8:	bf08      	it	eq
 80134aa:	4613      	moveq	r3, r2
 80134ac:	e736      	b.n	801331c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80134ae:	ea5f 4820 	movs.w	r8, r0, asr #16
 80134b2:	d457      	bmi.n	8013564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134b4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80134b8:	4547      	cmp	r7, r8
 80134ba:	dd53      	ble.n	8013564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134bc:	ea5f 4922 	movs.w	r9, r2, asr #16
 80134c0:	d450      	bmi.n	8013564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134c2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80134c6:	454d      	cmp	r5, r9
 80134c8:	dd4c      	ble.n	8013564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134ca:	9d01      	ldr	r5, [sp, #4]
 80134cc:	b23f      	sxth	r7, r7
 80134ce:	fb09 5707 	mla	r7, r9, r7, r5
 80134d2:	f817 5008 	ldrb.w	r5, [r7, r8]
 80134d6:	9f02      	ldr	r7, [sp, #8]
 80134d8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80134dc:	0e2f      	lsrs	r7, r5, #24
 80134de:	2fff      	cmp	r7, #255	; 0xff
 80134e0:	d045      	beq.n	801356e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80134e2:	fa5f f987 	uxtb.w	r9, r7
 80134e6:	b3ef      	cbz	r7, 8013564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134e8:	fa1f f889 	uxth.w	r8, r9
 80134ec:	ea6f 0909 	mvn.w	r9, r9
 80134f0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80134f4:	fa5f fb85 	uxtb.w	fp, r5
 80134f8:	f814 a007 	ldrb.w	sl, [r4, r7]
 80134fc:	fa5f f989 	uxtb.w	r9, r9
 8013500:	fb1b fb08 	smulbb	fp, fp, r8
 8013504:	fb0a ba09 	mla	sl, sl, r9, fp
 8013508:	fa1f fa8a 	uxth.w	sl, sl
 801350c:	f10a 0b01 	add.w	fp, sl, #1
 8013510:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8013514:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013518:	f804 a007 	strb.w	sl, [r4, r7]
 801351c:	4427      	add	r7, r4
 801351e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013522:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8013526:	f897 b001 	ldrb.w	fp, [r7, #1]
 801352a:	fb1b fb09 	smulbb	fp, fp, r9
 801352e:	fb0a ba08 	mla	sl, sl, r8, fp
 8013532:	fa1f fa8a 	uxth.w	sl, sl
 8013536:	f10a 0b01 	add.w	fp, sl, #1
 801353a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801353e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013542:	f887 a001 	strb.w	sl, [r7, #1]
 8013546:	f897 a002 	ldrb.w	sl, [r7, #2]
 801354a:	fb1a f909 	smulbb	r9, sl, r9
 801354e:	fb05 9508 	mla	r5, r5, r8, r9
 8013552:	b2ad      	uxth	r5, r5
 8013554:	f105 0901 	add.w	r9, r5, #1
 8013558:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801355c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013560:	f887 9002 	strb.w	r9, [r7, #2]
 8013564:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013566:	4470      	add	r0, lr
 8013568:	3601      	adds	r6, #1
 801356a:	442a      	add	r2, r5
 801356c:	e760      	b.n	8013430 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801356e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8013572:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8013576:	55e5      	strb	r5, [r4, r7]
 8013578:	4427      	add	r7, r4
 801357a:	0c2d      	lsrs	r5, r5, #16
 801357c:	f887 8001 	strb.w	r8, [r7, #1]
 8013580:	70bd      	strb	r5, [r7, #2]
 8013582:	e7ef      	b.n	8013564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013584:	0a37      	lsrs	r7, r6, #8
 8013586:	f805 6c03 	strb.w	r6, [r5, #-3]
 801358a:	0c36      	lsrs	r6, r6, #16
 801358c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8013590:	f805 6c01 	strb.w	r6, [r5, #-1]
 8013594:	e744      	b.n	8013420 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013596:	b005      	add	sp, #20
 8013598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801359c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801359c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80135a2:	9201      	str	r2, [sp, #4]
 80135a4:	6870      	ldr	r0, [r6, #4]
 80135a6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80135aa:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80135ae:	fa1f fe85 	uxth.w	lr, r5
 80135b2:	43ed      	mvns	r5, r5
 80135b4:	f8dc 8000 	ldr.w	r8, [ip]
 80135b8:	b2ed      	uxtb	r5, r5
 80135ba:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80135be:	fb00 2404 	mla	r4, r0, r4, r2
 80135c2:	6832      	ldr	r2, [r6, #0]
 80135c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80135c8:	4414      	add	r4, r2
 80135ca:	2900      	cmp	r1, #0
 80135cc:	dc03      	bgt.n	80135d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80135ce:	9a01      	ldr	r2, [sp, #4]
 80135d0:	2a00      	cmp	r2, #0
 80135d2:	f340 810d 	ble.w	80137f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80135d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135d8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80135dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80135e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135e2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80135e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	dd0e      	ble.n	801360c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80135ee:	1406      	asrs	r6, r0, #16
 80135f0:	d405      	bmi.n	80135fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135f2:	4556      	cmp	r6, sl
 80135f4:	da03      	bge.n	80135fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135f6:	1416      	asrs	r6, r2, #16
 80135f8:	d401      	bmi.n	80135fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135fa:	454e      	cmp	r6, r9
 80135fc:	db07      	blt.n	801360e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80135fe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013600:	3b01      	subs	r3, #1
 8013602:	3403      	adds	r4, #3
 8013604:	4430      	add	r0, r6
 8013606:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013608:	4432      	add	r2, r6
 801360a:	e7ee      	b.n	80135ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801360c:	d060      	beq.n	80136d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801360e:	1e5e      	subs	r6, r3, #1
 8013610:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013612:	fb07 0706 	mla	r7, r7, r6, r0
 8013616:	143f      	asrs	r7, r7, #16
 8013618:	d451      	bmi.n	80136be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801361a:	4557      	cmp	r7, sl
 801361c:	da4f      	bge.n	80136be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801361e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013620:	fb07 2606 	mla	r6, r7, r6, r2
 8013624:	1436      	asrs	r6, r6, #16
 8013626:	d44a      	bmi.n	80136be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8013628:	454e      	cmp	r6, r9
 801362a:	da48      	bge.n	80136be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801362c:	1ce6      	adds	r6, r4, #3
 801362e:	4699      	mov	r9, r3
 8013630:	f1b9 0f00 	cmp.w	r9, #0
 8013634:	f106 0603 	add.w	r6, r6, #3
 8013638:	dd45      	ble.n	80136c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801363a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801363e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013642:	1417      	asrs	r7, r2, #16
 8013644:	f109 39ff 	add.w	r9, r9, #4294967295
 8013648:	fb0b a707 	mla	r7, fp, r7, sl
 801364c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013650:	fb1b fb05 	smulbb	fp, fp, r5
 8013654:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013658:	eb08 0a07 	add.w	sl, r8, r7
 801365c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013660:	fb07 b70e 	mla	r7, r7, lr, fp
 8013664:	b2bf      	uxth	r7, r7
 8013666:	f107 0b01 	add.w	fp, r7, #1
 801366a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801366e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013672:	fb1b fb05 	smulbb	fp, fp, r5
 8013676:	123f      	asrs	r7, r7, #8
 8013678:	f806 7c06 	strb.w	r7, [r6, #-6]
 801367c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8013680:	fb07 b70e 	mla	r7, r7, lr, fp
 8013684:	b2bf      	uxth	r7, r7
 8013686:	f107 0b01 	add.w	fp, r7, #1
 801368a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801368e:	123f      	asrs	r7, r7, #8
 8013690:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013694:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013698:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801369c:	fb1a fa05 	smulbb	sl, sl, r5
 80136a0:	fb07 a70e 	mla	r7, r7, lr, sl
 80136a4:	b2bf      	uxth	r7, r7
 80136a6:	f107 0a01 	add.w	sl, r7, #1
 80136aa:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80136ae:	123f      	asrs	r7, r7, #8
 80136b0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80136b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80136b6:	4438      	add	r0, r7
 80136b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80136ba:	443a      	add	r2, r7
 80136bc:	e7b8      	b.n	8013630 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80136be:	2700      	movs	r7, #0
 80136c0:	1bde      	subs	r6, r3, r7
 80136c2:	2e00      	cmp	r6, #0
 80136c4:	dc3f      	bgt.n	8013746 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80136c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80136ce:	441c      	add	r4, r3
 80136d0:	2900      	cmp	r1, #0
 80136d2:	f340 808d 	ble.w	80137f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80136d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80136da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80136e0:	3901      	subs	r1, #1
 80136e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80136e6:	eef0 6a62 	vmov.f32	s13, s5
 80136ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80136ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80136f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136f6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80136fa:	eef0 6a43 	vmov.f32	s13, s6
 80136fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013702:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8013706:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801370a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801370e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013712:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013716:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801371a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801371e:	ee12 2a90 	vmov	r2, s5
 8013722:	eef0 2a47 	vmov.f32	s5, s14
 8013726:	fb92 f3f3 	sdiv	r3, r2, r3
 801372a:	ee13 2a10 	vmov	r2, s6
 801372e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013732:	eeb0 3a67 	vmov.f32	s6, s15
 8013736:	fb92 f3f3 	sdiv	r3, r2, r3
 801373a:	9a01      	ldr	r2, [sp, #4]
 801373c:	9310      	str	r3, [sp, #64]	; 0x40
 801373e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013740:	bf08      	it	eq
 8013742:	4613      	moveq	r3, r2
 8013744:	e741      	b.n	80135ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8013746:	ea5f 4920 	movs.w	r9, r0, asr #16
 801374a:	d44b      	bmi.n	80137e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801374c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8013750:	45cb      	cmp	fp, r9
 8013752:	dd47      	ble.n	80137e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013754:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013758:	d444      	bmi.n	80137e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801375a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801375e:	4556      	cmp	r6, sl
 8013760:	dd40      	ble.n	80137e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013762:	fa0f f68b 	sxth.w	r6, fp
 8013766:	fb0a 9906 	mla	r9, sl, r6, r9
 801376a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801376e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013772:	f814 b006 	ldrb.w	fp, [r4, r6]
 8013776:	fb1b fb05 	smulbb	fp, fp, r5
 801377a:	eb08 0a09 	add.w	sl, r8, r9
 801377e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8013782:	fb09 b90e 	mla	r9, r9, lr, fp
 8013786:	fa1f f989 	uxth.w	r9, r9
 801378a:	f109 0b01 	add.w	fp, r9, #1
 801378e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013792:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013796:	f804 9006 	strb.w	r9, [r4, r6]
 801379a:	4426      	add	r6, r4
 801379c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80137a0:	f896 b001 	ldrb.w	fp, [r6, #1]
 80137a4:	fb1b fb05 	smulbb	fp, fp, r5
 80137a8:	fb09 b90e 	mla	r9, r9, lr, fp
 80137ac:	fa1f f989 	uxth.w	r9, r9
 80137b0:	f109 0b01 	add.w	fp, r9, #1
 80137b4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80137b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80137bc:	f886 9001 	strb.w	r9, [r6, #1]
 80137c0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80137c4:	f896 a002 	ldrb.w	sl, [r6, #2]
 80137c8:	fb1a fa05 	smulbb	sl, sl, r5
 80137cc:	fb09 a90e 	mla	r9, r9, lr, sl
 80137d0:	fa1f f989 	uxth.w	r9, r9
 80137d4:	f109 0a01 	add.w	sl, r9, #1
 80137d8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80137dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80137e0:	f886 9002 	strb.w	r9, [r6, #2]
 80137e4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80137e6:	3701      	adds	r7, #1
 80137e8:	4430      	add	r0, r6
 80137ea:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80137ec:	4432      	add	r2, r6
 80137ee:	e767      	b.n	80136c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80137f0:	b003      	add	sp, #12
 80137f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80137f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80137fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013800:	9201      	str	r2, [sp, #4]
 8013802:	6868      	ldr	r0, [r5, #4]
 8013804:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013806:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801380a:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801380e:	fb00 2404 	mla	r4, r0, r4, r2
 8013812:	682a      	ldr	r2, [r5, #0]
 8013814:	f8d7 8000 	ldr.w	r8, [r7]
 8013818:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801381c:	4414      	add	r4, r2
 801381e:	2900      	cmp	r1, #0
 8013820:	dc03      	bgt.n	801382a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013822:	9a01      	ldr	r2, [sp, #4]
 8013824:	2a00      	cmp	r2, #0
 8013826:	f340 80af 	ble.w	8013988 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801382a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801382c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8013830:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013836:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801383a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801383e:	2b00      	cmp	r3, #0
 8013840:	dd0c      	ble.n	801385c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013842:	1405      	asrs	r5, r0, #16
 8013844:	d405      	bmi.n	8013852 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013846:	4555      	cmp	r5, sl
 8013848:	da03      	bge.n	8013852 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801384a:	1415      	asrs	r5, r2, #16
 801384c:	d401      	bmi.n	8013852 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801384e:	454d      	cmp	r5, r9
 8013850:	db05      	blt.n	801385e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013852:	4470      	add	r0, lr
 8013854:	4462      	add	r2, ip
 8013856:	3b01      	subs	r3, #1
 8013858:	3403      	adds	r4, #3
 801385a:	e7f0      	b.n	801383e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801385c:	d038      	beq.n	80138d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801385e:	1e5d      	subs	r5, r3, #1
 8013860:	fb0e 0605 	mla	r6, lr, r5, r0
 8013864:	1436      	asrs	r6, r6, #16
 8013866:	d42a      	bmi.n	80138be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013868:	4556      	cmp	r6, sl
 801386a:	da28      	bge.n	80138be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801386c:	fb0c 2505 	mla	r5, ip, r5, r2
 8013870:	142d      	asrs	r5, r5, #16
 8013872:	d424      	bmi.n	80138be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013874:	454d      	cmp	r5, r9
 8013876:	da22      	bge.n	80138be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013878:	1ce6      	adds	r6, r4, #3
 801387a:	4699      	mov	r9, r3
 801387c:	f1b9 0f00 	cmp.w	r9, #0
 8013880:	f106 0603 	add.w	r6, r6, #3
 8013884:	dd1f      	ble.n	80138c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8013886:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801388a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801388e:	1415      	asrs	r5, r2, #16
 8013890:	4470      	add	r0, lr
 8013892:	4462      	add	r2, ip
 8013894:	f109 39ff 	add.w	r9, r9, #4294967295
 8013898:	fb0b a505 	mla	r5, fp, r5, sl
 801389c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138a0:	eb08 0a05 	add.w	sl, r8, r5
 80138a4:	f818 5005 	ldrb.w	r5, [r8, r5]
 80138a8:	f806 5c06 	strb.w	r5, [r6, #-6]
 80138ac:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80138b0:	f806 5c05 	strb.w	r5, [r6, #-5]
 80138b4:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80138b8:	f806 5c04 	strb.w	r5, [r6, #-4]
 80138bc:	e7de      	b.n	801387c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80138be:	2600      	movs	r6, #0
 80138c0:	1b9d      	subs	r5, r3, r6
 80138c2:	2d00      	cmp	r5, #0
 80138c4:	dc38      	bgt.n	8013938 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80138c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80138ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80138ce:	441c      	add	r4, r3
 80138d0:	2900      	cmp	r1, #0
 80138d2:	dd59      	ble.n	8013988 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80138d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80138d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80138de:	3901      	subs	r1, #1
 80138e0:	eeb0 6a62 	vmov.f32	s12, s5
 80138e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80138e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80138ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138f0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80138f4:	eeb0 6a43 	vmov.f32	s12, s6
 80138f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138fc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013900:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013904:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013908:	ee77 2a62 	vsub.f32	s5, s14, s5
 801390c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013910:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013914:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013918:	ee12 2a90 	vmov	r2, s5
 801391c:	eef0 2a47 	vmov.f32	s5, s14
 8013920:	fb92 fef3 	sdiv	lr, r2, r3
 8013924:	ee13 2a10 	vmov	r2, s6
 8013928:	eeb0 3a67 	vmov.f32	s6, s15
 801392c:	fb92 fcf3 	sdiv	ip, r2, r3
 8013930:	9a01      	ldr	r2, [sp, #4]
 8013932:	bf08      	it	eq
 8013934:	4613      	moveq	r3, r2
 8013936:	e772      	b.n	801381e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013938:	ea5f 4920 	movs.w	r9, r0, asr #16
 801393c:	d420      	bmi.n	8013980 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801393e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8013942:	45cb      	cmp	fp, r9
 8013944:	dd1c      	ble.n	8013980 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013946:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801394a:	d419      	bmi.n	8013980 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801394c:	68fd      	ldr	r5, [r7, #12]
 801394e:	4555      	cmp	r5, sl
 8013950:	dd16      	ble.n	8013980 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013952:	fa0f f58b 	sxth.w	r5, fp
 8013956:	fb0a 9505 	mla	r5, sl, r5, r9
 801395a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801395e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8013962:	eb08 0b05 	add.w	fp, r8, r5
 8013966:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801396a:	f804 9005 	strb.w	r9, [r4, r5]
 801396e:	4425      	add	r5, r4
 8013970:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8013974:	f885 9001 	strb.w	r9, [r5, #1]
 8013978:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801397c:	f885 9002 	strb.w	r9, [r5, #2]
 8013980:	4470      	add	r0, lr
 8013982:	4462      	add	r2, ip
 8013984:	3601      	adds	r6, #1
 8013986:	e79b      	b.n	80138c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8013988:	b003      	add	sp, #12
 801398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801398e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801398e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013992:	b085      	sub	sp, #20
 8013994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013998:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801399a:	9202      	str	r2, [sp, #8]
 801399c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80139a0:	6860      	ldr	r0, [r4, #4]
 80139a2:	9203      	str	r2, [sp, #12]
 80139a4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80139a8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80139ac:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80139b0:	fb00 2505 	mla	r5, r0, r5, r2
 80139b4:	6822      	ldr	r2, [r4, #0]
 80139b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139ba:	4415      	add	r5, r2
 80139bc:	f8dc 2000 	ldr.w	r2, [ip]
 80139c0:	9201      	str	r2, [sp, #4]
 80139c2:	2900      	cmp	r1, #0
 80139c4:	dc03      	bgt.n	80139ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80139c6:	9a02      	ldr	r2, [sp, #8]
 80139c8:	2a00      	cmp	r2, #0
 80139ca:	f340 8122 	ble.w	8013c12 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80139ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139d0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80139d4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80139d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80139da:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80139de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	dd0d      	ble.n	8013a02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80139e6:	1422      	asrs	r2, r4, #16
 80139e8:	d405      	bmi.n	80139f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139ea:	4542      	cmp	r2, r8
 80139ec:	da03      	bge.n	80139f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139ee:	1402      	asrs	r2, r0, #16
 80139f0:	d401      	bmi.n	80139f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139f2:	42ba      	cmp	r2, r7
 80139f4:	db06      	blt.n	8013a04 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80139f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80139f8:	4474      	add	r4, lr
 80139fa:	3b01      	subs	r3, #1
 80139fc:	3503      	adds	r5, #3
 80139fe:	4410      	add	r0, r2
 8013a00:	e7ef      	b.n	80139e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8013a02:	d072      	beq.n	8013aea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8013a04:	1e5a      	subs	r2, r3, #1
 8013a06:	fb0e 4602 	mla	r6, lr, r2, r4
 8013a0a:	1436      	asrs	r6, r6, #16
 8013a0c:	d462      	bmi.n	8013ad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013a0e:	4546      	cmp	r6, r8
 8013a10:	da60      	bge.n	8013ad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013a12:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013a14:	fb06 0202 	mla	r2, r6, r2, r0
 8013a18:	1412      	asrs	r2, r2, #16
 8013a1a:	d45b      	bmi.n	8013ad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013a1c:	42ba      	cmp	r2, r7
 8013a1e:	da59      	bge.n	8013ad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013a20:	1cef      	adds	r7, r5, #3
 8013a22:	4699      	mov	r9, r3
 8013a24:	f1b9 0f00 	cmp.w	r9, #0
 8013a28:	dd5a      	ble.n	8013ae0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8013a2a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013a2e:	1426      	asrs	r6, r4, #16
 8013a30:	1402      	asrs	r2, r0, #16
 8013a32:	fb08 6202 	mla	r2, r8, r2, r6
 8013a36:	9e01      	ldr	r6, [sp, #4]
 8013a38:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8013a3c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8013a40:	d041      	beq.n	8013ac6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013a42:	9a03      	ldr	r2, [sp, #12]
 8013a44:	fa5f fb86 	uxtb.w	fp, r6
 8013a48:	fb02 f808 	mul.w	r8, r2, r8
 8013a4c:	f108 0201 	add.w	r2, r8, #1
 8013a50:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8013a54:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013a58:	1212      	asrs	r2, r2, #8
 8013a5a:	fa1f fa82 	uxth.w	sl, r2
 8013a5e:	43d2      	mvns	r2, r2
 8013a60:	fb1b fb0a 	smulbb	fp, fp, sl
 8013a64:	b2d2      	uxtb	r2, r2
 8013a66:	fb08 b802 	mla	r8, r8, r2, fp
 8013a6a:	fa1f f888 	uxth.w	r8, r8
 8013a6e:	f108 0b01 	add.w	fp, r8, #1
 8013a72:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013a76:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013a7a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013a7e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013a82:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013a86:	fb16 fa0a 	smulbb	sl, r6, sl
 8013a8a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013a8e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8013a92:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013a96:	fb06 aa02 	mla	sl, r6, r2, sl
 8013a9a:	fb08 b802 	mla	r8, r8, r2, fp
 8013a9e:	fa1f fa8a 	uxth.w	sl, sl
 8013aa2:	fa1f f888 	uxth.w	r8, r8
 8013aa6:	f10a 0601 	add.w	r6, sl, #1
 8013aaa:	f108 0b01 	add.w	fp, r8, #1
 8013aae:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8013ab2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013ab6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013aba:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013abe:	f807 ac01 	strb.w	sl, [r7, #-1]
 8013ac2:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013ac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ac8:	4474      	add	r4, lr
 8013aca:	3703      	adds	r7, #3
 8013acc:	f109 39ff 	add.w	r9, r9, #4294967295
 8013ad0:	4410      	add	r0, r2
 8013ad2:	e7a7      	b.n	8013a24 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8013ad4:	f04f 0800 	mov.w	r8, #0
 8013ad8:	eba3 0208 	sub.w	r2, r3, r8
 8013adc:	2a00      	cmp	r2, #0
 8013ade:	dc3b      	bgt.n	8013b58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8013ae0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ae8:	441d      	add	r5, r3
 8013aea:	2900      	cmp	r1, #0
 8013aec:	f340 8091 	ble.w	8013c12 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8013af0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013af6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013afa:	3901      	subs	r1, #1
 8013afc:	eeb0 6a62 	vmov.f32	s12, s5
 8013b00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013b04:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013b08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013b0c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013b10:	eeb0 6a43 	vmov.f32	s12, s6
 8013b14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013b18:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013b1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013b20:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013b24:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013b28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013b2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013b30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013b34:	ee12 2a90 	vmov	r2, s5
 8013b38:	eef0 2a47 	vmov.f32	s5, s14
 8013b3c:	fb92 fef3 	sdiv	lr, r2, r3
 8013b40:	ee13 2a10 	vmov	r2, s6
 8013b44:	eeb0 3a67 	vmov.f32	s6, s15
 8013b48:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b4c:	9a02      	ldr	r2, [sp, #8]
 8013b4e:	9312      	str	r3, [sp, #72]	; 0x48
 8013b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b52:	bf08      	it	eq
 8013b54:	4613      	moveq	r3, r2
 8013b56:	e734      	b.n	80139c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013b58:	1427      	asrs	r7, r4, #16
 8013b5a:	d454      	bmi.n	8013c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b5c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013b60:	42be      	cmp	r6, r7
 8013b62:	dd50      	ble.n	8013c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b64:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013b68:	d44d      	bmi.n	8013c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b6a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013b6e:	454a      	cmp	r2, r9
 8013b70:	dd49      	ble.n	8013c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b72:	b236      	sxth	r6, r6
 8013b74:	9a01      	ldr	r2, [sp, #4]
 8013b76:	fb09 7606 	mla	r6, r9, r6, r7
 8013b7a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013b7e:	0e3a      	lsrs	r2, r7, #24
 8013b80:	d041      	beq.n	8013c06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b82:	9e03      	ldr	r6, [sp, #12]
 8013b84:	fa5f fb87 	uxtb.w	fp, r7
 8013b88:	4372      	muls	r2, r6
 8013b8a:	1c56      	adds	r6, r2, #1
 8013b8c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8013b90:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013b94:	1212      	asrs	r2, r2, #8
 8013b96:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013b9a:	fa1f fa82 	uxth.w	sl, r2
 8013b9e:	43d2      	mvns	r2, r2
 8013ba0:	fb1b fb0a 	smulbb	fp, fp, sl
 8013ba4:	b2d2      	uxtb	r2, r2
 8013ba6:	fb09 b902 	mla	r9, r9, r2, fp
 8013baa:	fa1f f989 	uxth.w	r9, r9
 8013bae:	f109 0b01 	add.w	fp, r9, #1
 8013bb2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013bb6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013bba:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013bbe:	fb1b fb0a 	smulbb	fp, fp, sl
 8013bc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013bc6:	fb17 fa0a 	smulbb	sl, r7, sl
 8013bca:	f805 9006 	strb.w	r9, [r5, r6]
 8013bce:	442e      	add	r6, r5
 8013bd0:	78b7      	ldrb	r7, [r6, #2]
 8013bd2:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013bd6:	fb07 aa02 	mla	sl, r7, r2, sl
 8013bda:	fb09 b902 	mla	r9, r9, r2, fp
 8013bde:	fa1f fa8a 	uxth.w	sl, sl
 8013be2:	fa1f f989 	uxth.w	r9, r9
 8013be6:	f10a 0701 	add.w	r7, sl, #1
 8013bea:	f109 0b01 	add.w	fp, r9, #1
 8013bee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013bf2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013bf6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013bfa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013bfe:	f886 a002 	strb.w	sl, [r6, #2]
 8013c02:	f886 9001 	strb.w	r9, [r6, #1]
 8013c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c08:	4474      	add	r4, lr
 8013c0a:	f108 0801 	add.w	r8, r8, #1
 8013c0e:	4410      	add	r0, r2
 8013c10:	e762      	b.n	8013ad8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013c12:	b005      	add	sp, #20
 8013c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c22:	9201      	str	r2, [sp, #4]
 8013c24:	6860      	ldr	r0, [r4, #4]
 8013c26:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8013c2a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8013c2e:	fb00 2505 	mla	r5, r0, r5, r2
 8013c32:	6822      	ldr	r2, [r4, #0]
 8013c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c38:	4415      	add	r5, r2
 8013c3a:	f8dc 2000 	ldr.w	r2, [ip]
 8013c3e:	9200      	str	r2, [sp, #0]
 8013c40:	2900      	cmp	r1, #0
 8013c42:	dc03      	bgt.n	8013c4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013c44:	9a01      	ldr	r2, [sp, #4]
 8013c46:	2a00      	cmp	r2, #0
 8013c48:	f340 812b 	ble.w	8013ea2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c4e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8013c52:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c58:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013c5c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	dd0e      	ble.n	8013c82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013c64:	1422      	asrs	r2, r4, #16
 8013c66:	d405      	bmi.n	8013c74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c68:	4572      	cmp	r2, lr
 8013c6a:	da03      	bge.n	8013c74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c6c:	1402      	asrs	r2, r0, #16
 8013c6e:	d401      	bmi.n	8013c74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c70:	42ba      	cmp	r2, r7
 8013c72:	db07      	blt.n	8013c84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8013c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c76:	3b01      	subs	r3, #1
 8013c78:	3503      	adds	r5, #3
 8013c7a:	4414      	add	r4, r2
 8013c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c7e:	4410      	add	r0, r2
 8013c80:	e7ee      	b.n	8013c60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013c82:	d06f      	beq.n	8013d64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013c84:	1e5a      	subs	r2, r3, #1
 8013c86:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013c88:	fb06 4602 	mla	r6, r6, r2, r4
 8013c8c:	1436      	asrs	r6, r6, #16
 8013c8e:	d45e      	bmi.n	8013d4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c90:	4576      	cmp	r6, lr
 8013c92:	da5c      	bge.n	8013d4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c94:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013c96:	fb06 0202 	mla	r2, r6, r2, r0
 8013c9a:	1412      	asrs	r2, r2, #16
 8013c9c:	d457      	bmi.n	8013d4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c9e:	42ba      	cmp	r2, r7
 8013ca0:	da55      	bge.n	8013d4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013ca2:	1cee      	adds	r6, r5, #3
 8013ca4:	469a      	mov	sl, r3
 8013ca6:	f1ba 0f00 	cmp.w	sl, #0
 8013caa:	dd56      	ble.n	8013d5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8013cac:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8013cb0:	1427      	asrs	r7, r4, #16
 8013cb2:	1402      	asrs	r2, r0, #16
 8013cb4:	fb0e 7202 	mla	r2, lr, r2, r7
 8013cb8:	9f00      	ldr	r7, [sp, #0]
 8013cba:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8013cbe:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8013cc2:	d03c      	beq.n	8013d3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013cc4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013cc8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013ccc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8013cd0:	fa5f f28e 	uxtb.w	r2, lr
 8013cd4:	b2ff      	uxtb	r7, r7
 8013cd6:	f000 80dd 	beq.w	8013e94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8013cda:	fa1f f882 	uxth.w	r8, r2
 8013cde:	43d2      	mvns	r2, r2
 8013ce0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8013ce4:	fb17 f708 	smulbb	r7, r7, r8
 8013ce8:	b2d2      	uxtb	r2, r2
 8013cea:	fb19 f908 	smulbb	r9, r9, r8
 8013cee:	fb0e 7702 	mla	r7, lr, r2, r7
 8013cf2:	fb1b f808 	smulbb	r8, fp, r8
 8013cf6:	b2bf      	uxth	r7, r7
 8013cf8:	f107 0e01 	add.w	lr, r7, #1
 8013cfc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8013d00:	123f      	asrs	r7, r7, #8
 8013d02:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013d06:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8013d0a:	fb07 9902 	mla	r9, r7, r2, r9
 8013d0e:	fa1f f989 	uxth.w	r9, r9
 8013d12:	f109 0701 	add.w	r7, r9, #1
 8013d16:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8013d1a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8013d1e:	fb07 8802 	mla	r8, r7, r2, r8
 8013d22:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013d26:	fa1f f888 	uxth.w	r8, r8
 8013d2a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013d2e:	f108 0201 	add.w	r2, r8, #1
 8013d32:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013d36:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013d3a:	f806 8c01 	strb.w	r8, [r6, #-1]
 8013d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d40:	3603      	adds	r6, #3
 8013d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d46:	4414      	add	r4, r2
 8013d48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d4a:	4410      	add	r0, r2
 8013d4c:	e7ab      	b.n	8013ca6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8013d4e:	f04f 0e00 	mov.w	lr, #0
 8013d52:	eba3 020e 	sub.w	r2, r3, lr
 8013d56:	2a00      	cmp	r2, #0
 8013d58:	dc3d      	bgt.n	8013dd6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8013d5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013d62:	441d      	add	r5, r3
 8013d64:	2900      	cmp	r1, #0
 8013d66:	f340 809c 	ble.w	8013ea2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013d6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013d74:	3901      	subs	r1, #1
 8013d76:	eeb0 6a62 	vmov.f32	s12, s5
 8013d7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013d7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013d82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d86:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8013d8a:	eeb0 6a43 	vmov.f32	s12, s6
 8013d8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d92:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013d96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013d9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013d9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013da2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013da6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013daa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013dae:	ee12 2a90 	vmov	r2, s5
 8013db2:	eef0 2a47 	vmov.f32	s5, s14
 8013db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8013dba:	ee13 2a10 	vmov	r2, s6
 8013dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dc2:	eeb0 3a67 	vmov.f32	s6, s15
 8013dc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8013dca:	9a01      	ldr	r2, [sp, #4]
 8013dcc:	9310      	str	r3, [sp, #64]	; 0x40
 8013dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dd0:	bf08      	it	eq
 8013dd2:	4613      	moveq	r3, r2
 8013dd4:	e734      	b.n	8013c40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013dd6:	1427      	asrs	r7, r4, #16
 8013dd8:	d44d      	bmi.n	8013e76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013dda:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013dde:	42be      	cmp	r6, r7
 8013de0:	dd49      	ble.n	8013e76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013de2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013de6:	d446      	bmi.n	8013e76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013de8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013dec:	4542      	cmp	r2, r8
 8013dee:	dd42      	ble.n	8013e76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013df0:	b236      	sxth	r6, r6
 8013df2:	9a00      	ldr	r2, [sp, #0]
 8013df4:	fb08 7606 	mla	r6, r8, r6, r7
 8013df8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013dfc:	0e3a      	lsrs	r2, r7, #24
 8013dfe:	d03a      	beq.n	8013e76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013e00:	2aff      	cmp	r2, #255	; 0xff
 8013e02:	b2d6      	uxtb	r6, r2
 8013e04:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013e08:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8013e0c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8013e10:	b2ff      	uxtb	r7, r7
 8013e12:	d037      	beq.n	8013e84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8013e14:	fa1f f986 	uxth.w	r9, r6
 8013e18:	4472      	add	r2, lr
 8013e1a:	43f6      	mvns	r6, r6
 8013e1c:	f815 8002 	ldrb.w	r8, [r5, r2]
 8013e20:	fb17 f709 	smulbb	r7, r7, r9
 8013e24:	fb1a fa09 	smulbb	sl, sl, r9
 8013e28:	b2f6      	uxtb	r6, r6
 8013e2a:	fb1b f909 	smulbb	r9, fp, r9
 8013e2e:	fb08 7706 	mla	r7, r8, r6, r7
 8013e32:	b2bf      	uxth	r7, r7
 8013e34:	f107 0801 	add.w	r8, r7, #1
 8013e38:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8013e3c:	123f      	asrs	r7, r7, #8
 8013e3e:	54af      	strb	r7, [r5, r2]
 8013e40:	442a      	add	r2, r5
 8013e42:	7857      	ldrb	r7, [r2, #1]
 8013e44:	fb07 aa06 	mla	sl, r7, r6, sl
 8013e48:	fa1f fa8a 	uxth.w	sl, sl
 8013e4c:	f10a 0701 	add.w	r7, sl, #1
 8013e50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013e54:	7897      	ldrb	r7, [r2, #2]
 8013e56:	fb07 9906 	mla	r9, r7, r6, r9
 8013e5a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013e5e:	fa1f f989 	uxth.w	r9, r9
 8013e62:	f882 a001 	strb.w	sl, [r2, #1]
 8013e66:	f109 0601 	add.w	r6, r9, #1
 8013e6a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8013e6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013e72:	f882 9002 	strb.w	r9, [r2, #2]
 8013e76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e78:	f10e 0e01 	add.w	lr, lr, #1
 8013e7c:	4414      	add	r4, r2
 8013e7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e80:	4410      	add	r0, r2
 8013e82:	e766      	b.n	8013d52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013e84:	4472      	add	r2, lr
 8013e86:	54af      	strb	r7, [r5, r2]
 8013e88:	442a      	add	r2, r5
 8013e8a:	f882 a001 	strb.w	sl, [r2, #1]
 8013e8e:	f882 b002 	strb.w	fp, [r2, #2]
 8013e92:	e7f0      	b.n	8013e76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013e94:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013e98:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013e9c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8013ea0:	e74d      	b.n	8013d3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013ea2:	b003      	add	sp, #12
 8013ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ea8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eac:	b087      	sub	sp, #28
 8013eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013eb2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013eb4:	9204      	str	r2, [sp, #16]
 8013eb6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013eba:	6860      	ldr	r0, [r4, #4]
 8013ebc:	9205      	str	r2, [sp, #20]
 8013ebe:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8013ec2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8013ec6:	9101      	str	r1, [sp, #4]
 8013ec8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8013ecc:	fb00 2505 	mla	r5, r0, r5, r2
 8013ed0:	6822      	ldr	r2, [r4, #0]
 8013ed2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ed6:	4415      	add	r5, r2
 8013ed8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8013edc:	3201      	adds	r2, #1
 8013ede:	f022 0201 	bic.w	r2, r2, #1
 8013ee2:	9202      	str	r2, [sp, #8]
 8013ee4:	f8dc 2000 	ldr.w	r2, [ip]
 8013ee8:	9203      	str	r2, [sp, #12]
 8013eea:	9a01      	ldr	r2, [sp, #4]
 8013eec:	2a00      	cmp	r2, #0
 8013eee:	dc03      	bgt.n	8013ef8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8013ef0:	9a04      	ldr	r2, [sp, #16]
 8013ef2:	2a00      	cmp	r2, #0
 8013ef4:	f340 8135 	ble.w	8014162 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8013ef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013efa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013efe:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013f02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f04:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013f08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	dd0d      	ble.n	8013f2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8013f10:	1422      	asrs	r2, r4, #16
 8013f12:	d405      	bmi.n	8013f20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013f14:	4542      	cmp	r2, r8
 8013f16:	da03      	bge.n	8013f20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013f18:	1402      	asrs	r2, r0, #16
 8013f1a:	d401      	bmi.n	8013f20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013f1c:	42ba      	cmp	r2, r7
 8013f1e:	db06      	blt.n	8013f2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8013f20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f22:	4474      	add	r4, lr
 8013f24:	3b01      	subs	r3, #1
 8013f26:	3503      	adds	r5, #3
 8013f28:	4410      	add	r0, r2
 8013f2a:	e7ef      	b.n	8013f0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013f2c:	d077      	beq.n	801401e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8013f2e:	1e5a      	subs	r2, r3, #1
 8013f30:	fb0e 4602 	mla	r6, lr, r2, r4
 8013f34:	1436      	asrs	r6, r6, #16
 8013f36:	d469      	bmi.n	801400c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f38:	4546      	cmp	r6, r8
 8013f3a:	da67      	bge.n	801400c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f3c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013f3e:	fb06 0202 	mla	r2, r6, r2, r0
 8013f42:	1412      	asrs	r2, r2, #16
 8013f44:	d462      	bmi.n	801400c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f46:	42ba      	cmp	r2, r7
 8013f48:	da60      	bge.n	801400c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f4a:	1cee      	adds	r6, r5, #3
 8013f4c:	4699      	mov	r9, r3
 8013f4e:	f1b9 0f00 	cmp.w	r9, #0
 8013f52:	dd5f      	ble.n	8014014 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8013f54:	1422      	asrs	r2, r4, #16
 8013f56:	9902      	ldr	r1, [sp, #8]
 8013f58:	1407      	asrs	r7, r0, #16
 8013f5a:	fb01 2707 	mla	r7, r1, r7, r2
 8013f5e:	9903      	ldr	r1, [sp, #12]
 8013f60:	087a      	lsrs	r2, r7, #1
 8013f62:	5c8a      	ldrb	r2, [r1, r2]
 8013f64:	07f9      	lsls	r1, r7, #31
 8013f66:	bf54      	ite	pl
 8013f68:	f002 020f 	andpl.w	r2, r2, #15
 8013f6c:	1112      	asrmi	r2, r2, #4
 8013f6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013f72:	b2d2      	uxtb	r2, r2
 8013f74:	2a00      	cmp	r2, #0
 8013f76:	d042      	beq.n	8013ffe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8013f78:	497b      	ldr	r1, [pc, #492]	; (8014168 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8013f7a:	680f      	ldr	r7, [r1, #0]
 8013f7c:	9905      	ldr	r1, [sp, #20]
 8013f7e:	fa5f fb87 	uxtb.w	fp, r7
 8013f82:	434a      	muls	r2, r1
 8013f84:	f102 0801 	add.w	r8, r2, #1
 8013f88:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8013f8c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8013f90:	1212      	asrs	r2, r2, #8
 8013f92:	fa1f fa82 	uxth.w	sl, r2
 8013f96:	43d2      	mvns	r2, r2
 8013f98:	fb1b fb0a 	smulbb	fp, fp, sl
 8013f9c:	b2d2      	uxtb	r2, r2
 8013f9e:	fb08 b802 	mla	r8, r8, r2, fp
 8013fa2:	fa1f f888 	uxth.w	r8, r8
 8013fa6:	f108 0b01 	add.w	fp, r8, #1
 8013faa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013fae:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013fb2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013fb6:	fb1b fb0a 	smulbb	fp, fp, sl
 8013fba:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013fbe:	fb17 fa0a 	smulbb	sl, r7, sl
 8013fc2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8013fc6:	f806 8c03 	strb.w	r8, [r6, #-3]
 8013fca:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8013fce:	fb07 aa02 	mla	sl, r7, r2, sl
 8013fd2:	fb08 b802 	mla	r8, r8, r2, fp
 8013fd6:	fa1f fa8a 	uxth.w	sl, sl
 8013fda:	fa1f f888 	uxth.w	r8, r8
 8013fde:	f10a 0701 	add.w	r7, sl, #1
 8013fe2:	f108 0b01 	add.w	fp, r8, #1
 8013fe6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013fea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013fee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013ff2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013ff6:	f806 ac01 	strb.w	sl, [r6, #-1]
 8013ffa:	f806 8c02 	strb.w	r8, [r6, #-2]
 8013ffe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014000:	4474      	add	r4, lr
 8014002:	3603      	adds	r6, #3
 8014004:	f109 39ff 	add.w	r9, r9, #4294967295
 8014008:	4410      	add	r0, r2
 801400a:	e7a0      	b.n	8013f4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801400c:	2700      	movs	r7, #0
 801400e:	1bda      	subs	r2, r3, r7
 8014010:	2a00      	cmp	r2, #0
 8014012:	dc3e      	bgt.n	8014092 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8014014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014018:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801401c:	441d      	add	r5, r3
 801401e:	9b01      	ldr	r3, [sp, #4]
 8014020:	2b00      	cmp	r3, #0
 8014022:	f340 809e 	ble.w	8014162 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014026:	ee30 0a04 	vadd.f32	s0, s0, s8
 801402a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801402c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014030:	eeb0 6a62 	vmov.f32	s12, s5
 8014034:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014038:	ee31 1a05 	vadd.f32	s2, s2, s10
 801403c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014040:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014044:	eeb0 6a43 	vmov.f32	s12, s6
 8014048:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801404c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014050:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014054:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014058:	ee77 2a62 	vsub.f32	s5, s14, s5
 801405c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014060:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014064:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014068:	ee12 2a90 	vmov	r2, s5
 801406c:	eef0 2a47 	vmov.f32	s5, s14
 8014070:	fb92 fef3 	sdiv	lr, r2, r3
 8014074:	ee13 2a10 	vmov	r2, s6
 8014078:	eeb0 3a67 	vmov.f32	s6, s15
 801407c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014080:	9314      	str	r3, [sp, #80]	; 0x50
 8014082:	9b01      	ldr	r3, [sp, #4]
 8014084:	9a04      	ldr	r2, [sp, #16]
 8014086:	3b01      	subs	r3, #1
 8014088:	9301      	str	r3, [sp, #4]
 801408a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801408c:	bf08      	it	eq
 801408e:	4613      	moveq	r3, r2
 8014090:	e72b      	b.n	8013eea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014092:	1426      	asrs	r6, r4, #16
 8014094:	d460      	bmi.n	8014158 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014096:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801409a:	42b2      	cmp	r2, r6
 801409c:	dd5c      	ble.n	8014158 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801409e:	ea5f 4820 	movs.w	r8, r0, asr #16
 80140a2:	d459      	bmi.n	8014158 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80140a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80140a8:	4542      	cmp	r2, r8
 80140aa:	dd55      	ble.n	8014158 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80140ac:	9a02      	ldr	r2, [sp, #8]
 80140ae:	9903      	ldr	r1, [sp, #12]
 80140b0:	fb08 6602 	mla	r6, r8, r2, r6
 80140b4:	0872      	lsrs	r2, r6, #1
 80140b6:	07f6      	lsls	r6, r6, #31
 80140b8:	5c8a      	ldrb	r2, [r1, r2]
 80140ba:	bf54      	ite	pl
 80140bc:	f002 020f 	andpl.w	r2, r2, #15
 80140c0:	1112      	asrmi	r2, r2, #4
 80140c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80140c6:	b2d2      	uxtb	r2, r2
 80140c8:	2a00      	cmp	r2, #0
 80140ca:	d045      	beq.n	8014158 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80140cc:	4926      	ldr	r1, [pc, #152]	; (8014168 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80140ce:	f8d1 8000 	ldr.w	r8, [r1]
 80140d2:	9905      	ldr	r1, [sp, #20]
 80140d4:	fa5f fb88 	uxtb.w	fp, r8
 80140d8:	434a      	muls	r2, r1
 80140da:	1c56      	adds	r6, r2, #1
 80140dc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80140e0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80140e4:	1212      	asrs	r2, r2, #8
 80140e6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80140ea:	fa1f fa82 	uxth.w	sl, r2
 80140ee:	43d2      	mvns	r2, r2
 80140f0:	fb1b fb0a 	smulbb	fp, fp, sl
 80140f4:	b2d2      	uxtb	r2, r2
 80140f6:	fb09 b902 	mla	r9, r9, r2, fp
 80140fa:	fa1f f989 	uxth.w	r9, r9
 80140fe:	f109 0b01 	add.w	fp, r9, #1
 8014102:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014106:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801410a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801410e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014112:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014116:	fb18 fa0a 	smulbb	sl, r8, sl
 801411a:	f805 9006 	strb.w	r9, [r5, r6]
 801411e:	442e      	add	r6, r5
 8014120:	f896 8002 	ldrb.w	r8, [r6, #2]
 8014124:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014128:	fb08 aa02 	mla	sl, r8, r2, sl
 801412c:	fb09 b902 	mla	r9, r9, r2, fp
 8014130:	fa1f fa8a 	uxth.w	sl, sl
 8014134:	fa1f f989 	uxth.w	r9, r9
 8014138:	f10a 0801 	add.w	r8, sl, #1
 801413c:	f109 0b01 	add.w	fp, r9, #1
 8014140:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8014144:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014148:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801414c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014150:	f886 a002 	strb.w	sl, [r6, #2]
 8014154:	f886 9001 	strb.w	r9, [r6, #1]
 8014158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801415a:	4474      	add	r4, lr
 801415c:	3701      	adds	r7, #1
 801415e:	4410      	add	r0, r2
 8014160:	e755      	b.n	801400e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8014162:	b007      	add	sp, #28
 8014164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014168:	24006bc4 	.word	0x24006bc4

0801416c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014170:	b085      	sub	sp, #20
 8014172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014176:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014178:	9203      	str	r2, [sp, #12]
 801417a:	6860      	ldr	r0, [r4, #4]
 801417c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014180:	9100      	str	r1, [sp, #0]
 8014182:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8014186:	fb00 2606 	mla	r6, r0, r6, r2
 801418a:	6822      	ldr	r2, [r4, #0]
 801418c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014190:	4416      	add	r6, r2
 8014192:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014196:	3201      	adds	r2, #1
 8014198:	f022 0201 	bic.w	r2, r2, #1
 801419c:	9201      	str	r2, [sp, #4]
 801419e:	f8dc 2000 	ldr.w	r2, [ip]
 80141a2:	9202      	str	r2, [sp, #8]
 80141a4:	9a00      	ldr	r2, [sp, #0]
 80141a6:	2a00      	cmp	r2, #0
 80141a8:	dc03      	bgt.n	80141b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80141aa:	9a03      	ldr	r2, [sp, #12]
 80141ac:	2a00      	cmp	r2, #0
 80141ae:	f340 8140 	ble.w	8014432 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80141b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141b4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80141b8:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 80141bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141be:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80141c2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	dd0e      	ble.n	80141e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80141ca:	142a      	asrs	r2, r5, #16
 80141cc:	d405      	bmi.n	80141da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141ce:	4572      	cmp	r2, lr
 80141d0:	da03      	bge.n	80141da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141d2:	1422      	asrs	r2, r4, #16
 80141d4:	d401      	bmi.n	80141da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141d6:	42ba      	cmp	r2, r7
 80141d8:	db07      	blt.n	80141ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80141da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80141dc:	3b01      	subs	r3, #1
 80141de:	3603      	adds	r6, #3
 80141e0:	4415      	add	r5, r2
 80141e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141e4:	4414      	add	r4, r2
 80141e6:	e7ee      	b.n	80141c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80141e8:	d072      	beq.n	80142d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80141ea:	1e5a      	subs	r2, r3, #1
 80141ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80141ee:	fb00 5002 	mla	r0, r0, r2, r5
 80141f2:	1400      	asrs	r0, r0, #16
 80141f4:	d463      	bmi.n	80142be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141f6:	4570      	cmp	r0, lr
 80141f8:	da61      	bge.n	80142be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80141fc:	fb00 4202 	mla	r2, r0, r2, r4
 8014200:	1412      	asrs	r2, r2, #16
 8014202:	d45c      	bmi.n	80142be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014204:	42ba      	cmp	r2, r7
 8014206:	da5a      	bge.n	80142be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014208:	1cf0      	adds	r0, r6, #3
 801420a:	469a      	mov	sl, r3
 801420c:	f1ba 0f00 	cmp.w	sl, #0
 8014210:	dd59      	ble.n	80142c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8014212:	142a      	asrs	r2, r5, #16
 8014214:	9901      	ldr	r1, [sp, #4]
 8014216:	1427      	asrs	r7, r4, #16
 8014218:	fb01 2707 	mla	r7, r1, r7, r2
 801421c:	9902      	ldr	r1, [sp, #8]
 801421e:	087a      	lsrs	r2, r7, #1
 8014220:	5c8a      	ldrb	r2, [r1, r2]
 8014222:	07f9      	lsls	r1, r7, #31
 8014224:	bf54      	ite	pl
 8014226:	f002 020f 	andpl.w	r2, r2, #15
 801422a:	1112      	asrmi	r2, r2, #4
 801422c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014230:	b2d2      	uxtb	r2, r2
 8014232:	2a00      	cmp	r2, #0
 8014234:	d03b      	beq.n	80142ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014236:	4980      	ldr	r1, [pc, #512]	; (8014438 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014238:	2aff      	cmp	r2, #255	; 0xff
 801423a:	680f      	ldr	r7, [r1, #0]
 801423c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014240:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014244:	b2ff      	uxtb	r7, r7
 8014246:	f000 80ed 	beq.w	8014424 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801424a:	fa1f f882 	uxth.w	r8, r2
 801424e:	43d2      	mvns	r2, r2
 8014250:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8014254:	fb17 f708 	smulbb	r7, r7, r8
 8014258:	b2d2      	uxtb	r2, r2
 801425a:	fb19 f908 	smulbb	r9, r9, r8
 801425e:	fb0e 7702 	mla	r7, lr, r2, r7
 8014262:	fb1b f808 	smulbb	r8, fp, r8
 8014266:	b2bf      	uxth	r7, r7
 8014268:	f107 0e01 	add.w	lr, r7, #1
 801426c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014270:	123f      	asrs	r7, r7, #8
 8014272:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014276:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801427a:	fb07 9902 	mla	r9, r7, r2, r9
 801427e:	fa1f f989 	uxth.w	r9, r9
 8014282:	f109 0701 	add.w	r7, r9, #1
 8014286:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801428a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801428e:	fb07 8802 	mla	r8, r7, r2, r8
 8014292:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014296:	fa1f f888 	uxth.w	r8, r8
 801429a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801429e:	f108 0201 	add.w	r2, r8, #1
 80142a2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80142a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80142aa:	f800 8c01 	strb.w	r8, [r0, #-1]
 80142ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80142b0:	3003      	adds	r0, #3
 80142b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80142b6:	4415      	add	r5, r2
 80142b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142ba:	4414      	add	r4, r2
 80142bc:	e7a6      	b.n	801420c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80142be:	2700      	movs	r7, #0
 80142c0:	1bda      	subs	r2, r3, r7
 80142c2:	2a00      	cmp	r2, #0
 80142c4:	dc40      	bgt.n	8014348 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80142c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80142ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80142ce:	441e      	add	r6, r3
 80142d0:	9b00      	ldr	r3, [sp, #0]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	f340 80ad 	ble.w	8014432 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80142d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80142dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80142e2:	eeb0 6a62 	vmov.f32	s12, s5
 80142e6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80142ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80142ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142f2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80142f6:	eeb0 6a43 	vmov.f32	s12, s6
 80142fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142fe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014302:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014306:	ee61 7a27 	vmul.f32	s15, s2, s15
 801430a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801430e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014312:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014316:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801431a:	ee12 2a90 	vmov	r2, s5
 801431e:	eef0 2a47 	vmov.f32	s5, s14
 8014322:	fb92 f3f3 	sdiv	r3, r2, r3
 8014326:	ee13 2a10 	vmov	r2, s6
 801432a:	9311      	str	r3, [sp, #68]	; 0x44
 801432c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801432e:	eeb0 3a67 	vmov.f32	s6, s15
 8014332:	fb92 f3f3 	sdiv	r3, r2, r3
 8014336:	9312      	str	r3, [sp, #72]	; 0x48
 8014338:	9b00      	ldr	r3, [sp, #0]
 801433a:	9a03      	ldr	r2, [sp, #12]
 801433c:	3b01      	subs	r3, #1
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014342:	bf08      	it	eq
 8014344:	4613      	moveq	r3, r2
 8014346:	e72d      	b.n	80141a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8014348:	1428      	asrs	r0, r5, #16
 801434a:	d45c      	bmi.n	8014406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801434c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014350:	4282      	cmp	r2, r0
 8014352:	dd58      	ble.n	8014406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014354:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8014358:	d455      	bmi.n	8014406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801435a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801435e:	4572      	cmp	r2, lr
 8014360:	dd51      	ble.n	8014406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014362:	9a01      	ldr	r2, [sp, #4]
 8014364:	9902      	ldr	r1, [sp, #8]
 8014366:	fb0e 0002 	mla	r0, lr, r2, r0
 801436a:	0842      	lsrs	r2, r0, #1
 801436c:	07c0      	lsls	r0, r0, #31
 801436e:	5c8a      	ldrb	r2, [r1, r2]
 8014370:	bf54      	ite	pl
 8014372:	f002 020f 	andpl.w	r2, r2, #15
 8014376:	1112      	asrmi	r2, r2, #4
 8014378:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801437c:	b2d2      	uxtb	r2, r2
 801437e:	2a00      	cmp	r2, #0
 8014380:	d041      	beq.n	8014406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014382:	492d      	ldr	r1, [pc, #180]	; (8014438 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014384:	2aff      	cmp	r2, #255	; 0xff
 8014386:	6808      	ldr	r0, [r1, #0]
 8014388:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801438c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014390:	fa5f fe80 	uxtb.w	lr, r0
 8014394:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8014398:	d03b      	beq.n	8014412 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801439a:	fa1f f982 	uxth.w	r9, r2
 801439e:	4438      	add	r0, r7
 80143a0:	43d2      	mvns	r2, r2
 80143a2:	f816 8000 	ldrb.w	r8, [r6, r0]
 80143a6:	fb1e fe09 	smulbb	lr, lr, r9
 80143aa:	fb1a fa09 	smulbb	sl, sl, r9
 80143ae:	b2d2      	uxtb	r2, r2
 80143b0:	fb1b f909 	smulbb	r9, fp, r9
 80143b4:	fb08 ee02 	mla	lr, r8, r2, lr
 80143b8:	fa1f fe8e 	uxth.w	lr, lr
 80143bc:	f10e 0801 	add.w	r8, lr, #1
 80143c0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80143c4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80143c8:	f806 e000 	strb.w	lr, [r6, r0]
 80143cc:	4430      	add	r0, r6
 80143ce:	f890 e001 	ldrb.w	lr, [r0, #1]
 80143d2:	fb0e aa02 	mla	sl, lr, r2, sl
 80143d6:	fa1f fa8a 	uxth.w	sl, sl
 80143da:	f10a 0e01 	add.w	lr, sl, #1
 80143de:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80143e2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80143e6:	fb0e 9902 	mla	r9, lr, r2, r9
 80143ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80143ee:	fa1f f989 	uxth.w	r9, r9
 80143f2:	f880 a001 	strb.w	sl, [r0, #1]
 80143f6:	f109 0201 	add.w	r2, r9, #1
 80143fa:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80143fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014402:	f880 9002 	strb.w	r9, [r0, #2]
 8014406:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014408:	3701      	adds	r7, #1
 801440a:	4415      	add	r5, r2
 801440c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801440e:	4414      	add	r4, r2
 8014410:	e756      	b.n	80142c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014412:	4438      	add	r0, r7
 8014414:	f806 e000 	strb.w	lr, [r6, r0]
 8014418:	4430      	add	r0, r6
 801441a:	f880 a001 	strb.w	sl, [r0, #1]
 801441e:	f880 b002 	strb.w	fp, [r0, #2]
 8014422:	e7f0      	b.n	8014406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014424:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014428:	f800 9c02 	strb.w	r9, [r0, #-2]
 801442c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8014430:	e73d      	b.n	80142ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014432:	b005      	add	sp, #20
 8014434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014438:	24006bc4 	.word	0x24006bc4

0801443c <_ZN8touchgfx8LCD24bppD1Ev>:
 801443c:	4770      	bx	lr

0801443e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801443e:	4770      	bx	lr

08014440 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8014440:	4770      	bx	lr

08014442 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8014442:	4770      	bx	lr

08014444 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8014444:	4770      	bx	lr

08014446 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014446:	4770      	bx	lr

08014448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014448:	4770      	bx	lr

0801444a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801444a:	4770      	bx	lr

0801444c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801444c:	4770      	bx	lr

0801444e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801444e:	4770      	bx	lr

08014450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014450:	4770      	bx	lr

08014452 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014452:	4770      	bx	lr

08014454 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014454:	4770      	bx	lr

08014456 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014456:	4770      	bx	lr

08014458 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014458:	4770      	bx	lr

0801445a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801445a:	4770      	bx	lr

0801445c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801445c:	4770      	bx	lr

0801445e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801445e:	4770      	bx	lr

08014460 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014460:	4770      	bx	lr

08014462 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014462:	4770      	bx	lr

08014464 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014464:	4770      	bx	lr
	...

08014468 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014468:	2bff      	cmp	r3, #255	; 0xff
 801446a:	b508      	push	{r3, lr}
 801446c:	d04f      	beq.n	801450e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801446e:	2a2c      	cmp	r2, #44	; 0x2c
 8014470:	d032      	beq.n	80144d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8014472:	d80f      	bhi.n	8014494 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8014474:	2a08      	cmp	r2, #8
 8014476:	d046      	beq.n	8014506 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8014478:	d805      	bhi.n	8014486 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801447a:	2a04      	cmp	r2, #4
 801447c:	d041      	beq.n	8014502 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801447e:	2a05      	cmp	r2, #5
 8014480:	d03d      	beq.n	80144fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8014482:	2000      	movs	r0, #0
 8014484:	e027      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014486:	2a0a      	cmp	r2, #10
 8014488:	d03d      	beq.n	8014506 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801448a:	d301      	bcc.n	8014490 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801448c:	2a0b      	cmp	r2, #11
 801448e:	d1f8      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014490:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014492:	e020      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014494:	2a30      	cmp	r2, #48	; 0x30
 8014496:	d038      	beq.n	801450a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014498:	d808      	bhi.n	80144ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801449a:	2a2e      	cmp	r2, #46	; 0x2e
 801449c:	684b      	ldr	r3, [r1, #4]
 801449e:	d029      	beq.n	80144f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 80144a0:	d90b      	bls.n	80144ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80144a2:	781b      	ldrb	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d1ec      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144a8:	6a00      	ldr	r0, [r0, #32]
 80144aa:	e014      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144ac:	2a32      	cmp	r2, #50	; 0x32
 80144ae:	d02c      	beq.n	801450a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80144b0:	d301      	bcc.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 80144b2:	2a33      	cmp	r2, #51	; 0x33
 80144b4:	d1e5      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144b6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80144b8:	e00d      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d009      	beq.n	80144d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80144c0:	d3f2      	bcc.n	80144a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 80144c2:	2b02      	cmp	r3, #2
 80144c4:	d1dd      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144c6:	4b39      	ldr	r3, [pc, #228]	; (80145ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80144c8:	f240 4109 	movw	r1, #1033	; 0x409
 80144cc:	4a38      	ldr	r2, [pc, #224]	; (80145b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80144ce:	4839      	ldr	r0, [pc, #228]	; (80145b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 80144d0:	f006 fde4 	bl	801b09c <__assert_func>
 80144d4:	6900      	ldr	r0, [r0, #16]
 80144d6:	bd08      	pop	{r3, pc}
 80144d8:	684b      	ldr	r3, [r1, #4]
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	2b01      	cmp	r3, #1
 80144de:	d007      	beq.n	80144f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80144e0:	d30b      	bcc.n	80144fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80144e2:	2b02      	cmp	r3, #2
 80144e4:	d1cd      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144e6:	4b31      	ldr	r3, [pc, #196]	; (80145ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80144e8:	f240 4115 	movw	r1, #1045	; 0x415
 80144ec:	4a30      	ldr	r2, [pc, #192]	; (80145b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80144ee:	e7ee      	b.n	80144ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80144f0:	6880      	ldr	r0, [r0, #8]
 80144f2:	e7f0      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144f4:	781b      	ldrb	r3, [r3, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d1c3      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144fa:	6980      	ldr	r0, [r0, #24]
 80144fc:	e7eb      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014500:	e7e9      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014502:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014504:	e7e7      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014506:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014508:	e7e5      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801450a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801450c:	e7e3      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801450e:	2a2c      	cmp	r2, #44	; 0x2c
 8014510:	d030      	beq.n	8014574 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8014512:	d80f      	bhi.n	8014534 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8014514:	2a08      	cmp	r2, #8
 8014516:	d044      	beq.n	80145a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8014518:	d805      	bhi.n	8014526 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801451a:	2a04      	cmp	r2, #4
 801451c:	d03f      	beq.n	801459e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801451e:	2a05      	cmp	r2, #5
 8014520:	d1af      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014522:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014524:	e7d7      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014526:	2a0a      	cmp	r2, #10
 8014528:	d03b      	beq.n	80145a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801452a:	d301      	bcc.n	8014530 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801452c:	2a0b      	cmp	r2, #11
 801452e:	d1a8      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014530:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014532:	e7d0      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014534:	2a30      	cmp	r2, #48	; 0x30
 8014536:	d036      	beq.n	80145a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014538:	d808      	bhi.n	801454c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801453a:	2a2e      	cmp	r2, #46	; 0x2e
 801453c:	684b      	ldr	r3, [r1, #4]
 801453e:	d028      	beq.n	8014592 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8014540:	d90b      	bls.n	801455a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d19c      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014548:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801454a:	e7c4      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801454c:	2a32      	cmp	r2, #50	; 0x32
 801454e:	d02a      	beq.n	80145a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014550:	d301      	bcc.n	8014556 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8014552:	2a33      	cmp	r2, #51	; 0x33
 8014554:	d195      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014556:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014558:	e7bd      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	2b01      	cmp	r3, #1
 801455e:	d007      	beq.n	8014570 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8014560:	d3f2      	bcc.n	8014548 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8014562:	2b02      	cmp	r3, #2
 8014564:	d18d      	bne.n	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014566:	4b11      	ldr	r3, [pc, #68]	; (80145ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014568:	f240 4146 	movw	r1, #1094	; 0x446
 801456c:	4a10      	ldr	r2, [pc, #64]	; (80145b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801456e:	e7ae      	b.n	80144ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014570:	6940      	ldr	r0, [r0, #20]
 8014572:	e7b0      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014574:	684b      	ldr	r3, [r1, #4]
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	2b01      	cmp	r3, #1
 801457a:	d008      	beq.n	801458e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801457c:	d30d      	bcc.n	801459a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801457e:	2b02      	cmp	r3, #2
 8014580:	f47f af7f 	bne.w	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014584:	4b09      	ldr	r3, [pc, #36]	; (80145ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014586:	f240 4152 	movw	r1, #1106	; 0x452
 801458a:	4a09      	ldr	r2, [pc, #36]	; (80145b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801458c:	e79f      	b.n	80144ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801458e:	68c0      	ldr	r0, [r0, #12]
 8014590:	e7a1      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	2b00      	cmp	r3, #0
 8014596:	f47f af74 	bne.w	8014482 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801459a:	69c0      	ldr	r0, [r0, #28]
 801459c:	e79b      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801459e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80145a0:	e799      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80145a2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80145a4:	e797      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80145a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80145a8:	e795      	b.n	80144d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80145aa:	bf00      	nop
 80145ac:	0801ef25 	.word	0x0801ef25
 80145b0:	0801f697 	.word	0x0801f697
 80145b4:	0801ef71 	.word	0x0801ef71

080145b8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80145b8:	b508      	push	{r3, lr}
 80145ba:	4b06      	ldr	r3, [pc, #24]	; (80145d4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 80145bc:	8818      	ldrh	r0, [r3, #0]
 80145be:	b928      	cbnz	r0, 80145cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 80145c0:	4b05      	ldr	r3, [pc, #20]	; (80145d8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 80145c2:	214d      	movs	r1, #77	; 0x4d
 80145c4:	4a05      	ldr	r2, [pc, #20]	; (80145dc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 80145c6:	4806      	ldr	r0, [pc, #24]	; (80145e0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 80145c8:	f006 fd68 	bl	801b09c <__assert_func>
 80145cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80145d0:	b280      	uxth	r0, r0
 80145d2:	bd08      	pop	{r3, pc}
 80145d4:	24006bb6 	.word	0x24006bb6
 80145d8:	0801f17d 	.word	0x0801f17d
 80145dc:	0801f65c 	.word	0x0801f65c
 80145e0:	0801f1bf 	.word	0x0801f1bf

080145e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80145e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145e8:	b08b      	sub	sp, #44	; 0x2c
 80145ea:	460d      	mov	r5, r1
 80145ec:	4616      	mov	r6, r2
 80145ee:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80145f2:	f1b8 0f00 	cmp.w	r8, #0
 80145f6:	d047      	beq.n	8014688 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80145f8:	6810      	ldr	r0, [r2, #0]
 80145fa:	ac06      	add	r4, sp, #24
 80145fc:	6851      	ldr	r1, [r2, #4]
 80145fe:	4f51      	ldr	r7, [pc, #324]	; (8014744 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8014600:	c403      	stmia	r4!, {r0, r1}
 8014602:	6818      	ldr	r0, [r3, #0]
 8014604:	ac08      	add	r4, sp, #32
 8014606:	6859      	ldr	r1, [r3, #4]
 8014608:	c403      	stmia	r4!, {r0, r1}
 801460a:	a806      	add	r0, sp, #24
 801460c:	f7fa fd9e 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014610:	4631      	mov	r1, r6
 8014612:	a808      	add	r0, sp, #32
 8014614:	f7fa fdde 	bl	800f1d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014618:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801461c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014620:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014624:	6838      	ldr	r0, [r7, #0]
 8014626:	fb11 2103 	smlabb	r1, r1, r3, r2
 801462a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801462e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8014632:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014636:	440d      	add	r5, r1
 8014638:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801463c:	440a      	add	r2, r1
 801463e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014642:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014646:	4413      	add	r3, r2
 8014648:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801464c:	6803      	ldr	r3, [r0, #0]
 801464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014650:	4798      	blx	r3
 8014652:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8014656:	d01a      	beq.n	801468e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8014658:	f010 0f04 	tst.w	r0, #4
 801465c:	6838      	ldr	r0, [r7, #0]
 801465e:	d019      	beq.n	8014694 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8014660:	2100      	movs	r1, #0
 8014662:	6807      	ldr	r7, [r0, #0]
 8014664:	b2a4      	uxth	r4, r4
 8014666:	f8cd 800c 	str.w	r8, [sp, #12]
 801466a:	b2b6      	uxth	r6, r6
 801466c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014670:	9401      	str	r4, [sp, #4]
 8014672:	9600      	str	r6, [sp, #0]
 8014674:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014678:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801467c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014680:	9102      	str	r1, [sp, #8]
 8014682:	4629      	mov	r1, r5
 8014684:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8014686:	47a0      	blx	r4
 8014688:	b00b      	add	sp, #44	; 0x2c
 801468a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801468e:	f010 0f01 	tst.w	r0, #1
 8014692:	e7e3      	b.n	801465c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8014694:	6803      	ldr	r3, [r0, #0]
 8014696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014698:	4798      	blx	r3
 801469a:	4a2b      	ldr	r2, [pc, #172]	; (8014748 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801469c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80146a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80146a4:	8813      	ldrh	r3, [r2, #0]
 80146a6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80146aa:	fb03 f404 	mul.w	r4, r3, r4
 80146ae:	fb03 c101 	mla	r1, r3, r1, ip
 80146b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80146b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80146ba:	4408      	add	r0, r1
 80146bc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80146c0:	4404      	add	r4, r0
 80146c2:	d02e      	beq.n	8014722 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80146c4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80146c8:	1b9b      	subs	r3, r3, r6
 80146ca:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80146ce:	1b96      	subs	r6, r2, r6
 80146d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80146d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80146d8:	42a0      	cmp	r0, r4
 80146da:	d22d      	bcs.n	8014738 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80146dc:	eb00 0e01 	add.w	lr, r0, r1
 80146e0:	4570      	cmp	r0, lr
 80146e2:	d210      	bcs.n	8014706 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80146e4:	f890 9000 	ldrb.w	r9, [r0]
 80146e8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80146ec:	fb19 f90c 	smulbb	r9, r9, ip
 80146f0:	fb02 9208 	mla	r2, r2, r8, r9
 80146f4:	b292      	uxth	r2, r2
 80146f6:	f102 0901 	add.w	r9, r2, #1
 80146fa:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80146fe:	1212      	asrs	r2, r2, #8
 8014700:	f800 2b01 	strb.w	r2, [r0], #1
 8014704:	e7ec      	b.n	80146e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8014706:	4418      	add	r0, r3
 8014708:	4435      	add	r5, r6
 801470a:	e7e5      	b.n	80146d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801470c:	8813      	ldrh	r3, [r2, #0]
 801470e:	1b9b      	subs	r3, r3, r6
 8014710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014714:	4418      	add	r0, r3
 8014716:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801471a:	1b9b      	subs	r3, r3, r6
 801471c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014720:	441d      	add	r5, r3
 8014722:	42a0      	cmp	r0, r4
 8014724:	d208      	bcs.n	8014738 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8014726:	eb00 0c01 	add.w	ip, r0, r1
 801472a:	4560      	cmp	r0, ip
 801472c:	d2ee      	bcs.n	801470c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801472e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014732:	f800 3b01 	strb.w	r3, [r0], #1
 8014736:	e7f8      	b.n	801472a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8014738:	6838      	ldr	r0, [r7, #0]
 801473a:	6803      	ldr	r3, [r0, #0]
 801473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801473e:	4798      	blx	r3
 8014740:	e7a2      	b.n	8014688 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8014742:	bf00      	nop
 8014744:	24006bbc 	.word	0x24006bbc
 8014748:	24006bb6 	.word	0x24006bb6

0801474c <_ZN8touchgfx8LCD24bppD0Ev>:
 801474c:	b510      	push	{r4, lr}
 801474e:	4604      	mov	r4, r0
 8014750:	2158      	movs	r1, #88	; 0x58
 8014752:	f006 fb8d 	bl	801ae70 <_ZdlPvj>
 8014756:	4620      	mov	r0, r4
 8014758:	bd10      	pop	{r4, pc}

0801475a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801475a:	b510      	push	{r4, lr}
 801475c:	4604      	mov	r4, r0
 801475e:	2104      	movs	r1, #4
 8014760:	f006 fb86 	bl	801ae70 <_ZdlPvj>
 8014764:	4620      	mov	r0, r4
 8014766:	bd10      	pop	{r4, pc}

08014768 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014768:	b510      	push	{r4, lr}
 801476a:	4604      	mov	r4, r0
 801476c:	2104      	movs	r1, #4
 801476e:	f006 fb7f 	bl	801ae70 <_ZdlPvj>
 8014772:	4620      	mov	r0, r4
 8014774:	bd10      	pop	{r4, pc}

08014776 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014776:	b510      	push	{r4, lr}
 8014778:	4604      	mov	r4, r0
 801477a:	2104      	movs	r1, #4
 801477c:	f006 fb78 	bl	801ae70 <_ZdlPvj>
 8014780:	4620      	mov	r0, r4
 8014782:	bd10      	pop	{r4, pc}

08014784 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8014784:	b510      	push	{r4, lr}
 8014786:	4604      	mov	r4, r0
 8014788:	2104      	movs	r1, #4
 801478a:	f006 fb71 	bl	801ae70 <_ZdlPvj>
 801478e:	4620      	mov	r0, r4
 8014790:	bd10      	pop	{r4, pc}

08014792 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014792:	b510      	push	{r4, lr}
 8014794:	4604      	mov	r4, r0
 8014796:	2104      	movs	r1, #4
 8014798:	f006 fb6a 	bl	801ae70 <_ZdlPvj>
 801479c:	4620      	mov	r0, r4
 801479e:	bd10      	pop	{r4, pc}

080147a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80147a0:	b510      	push	{r4, lr}
 80147a2:	4604      	mov	r4, r0
 80147a4:	2104      	movs	r1, #4
 80147a6:	f006 fb63 	bl	801ae70 <_ZdlPvj>
 80147aa:	4620      	mov	r0, r4
 80147ac:	bd10      	pop	{r4, pc}

080147ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80147ae:	b510      	push	{r4, lr}
 80147b0:	4604      	mov	r4, r0
 80147b2:	2104      	movs	r1, #4
 80147b4:	f006 fb5c 	bl	801ae70 <_ZdlPvj>
 80147b8:	4620      	mov	r0, r4
 80147ba:	bd10      	pop	{r4, pc}

080147bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80147bc:	b510      	push	{r4, lr}
 80147be:	4604      	mov	r4, r0
 80147c0:	2104      	movs	r1, #4
 80147c2:	f006 fb55 	bl	801ae70 <_ZdlPvj>
 80147c6:	4620      	mov	r0, r4
 80147c8:	bd10      	pop	{r4, pc}

080147ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80147ca:	b510      	push	{r4, lr}
 80147cc:	4604      	mov	r4, r0
 80147ce:	2104      	movs	r1, #4
 80147d0:	f006 fb4e 	bl	801ae70 <_ZdlPvj>
 80147d4:	4620      	mov	r0, r4
 80147d6:	bd10      	pop	{r4, pc}

080147d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80147d8:	b510      	push	{r4, lr}
 80147da:	4604      	mov	r4, r0
 80147dc:	2104      	movs	r1, #4
 80147de:	f006 fb47 	bl	801ae70 <_ZdlPvj>
 80147e2:	4620      	mov	r0, r4
 80147e4:	bd10      	pop	{r4, pc}

080147e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80147e6:	b510      	push	{r4, lr}
 80147e8:	4604      	mov	r4, r0
 80147ea:	2104      	movs	r1, #4
 80147ec:	f006 fb40 	bl	801ae70 <_ZdlPvj>
 80147f0:	4620      	mov	r0, r4
 80147f2:	bd10      	pop	{r4, pc}

080147f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80147f4:	b510      	push	{r4, lr}
 80147f6:	4604      	mov	r4, r0
 80147f8:	2104      	movs	r1, #4
 80147fa:	f006 fb39 	bl	801ae70 <_ZdlPvj>
 80147fe:	4620      	mov	r0, r4
 8014800:	bd10      	pop	{r4, pc}

08014802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014802:	b510      	push	{r4, lr}
 8014804:	4604      	mov	r4, r0
 8014806:	2104      	movs	r1, #4
 8014808:	f006 fb32 	bl	801ae70 <_ZdlPvj>
 801480c:	4620      	mov	r0, r4
 801480e:	bd10      	pop	{r4, pc}

08014810 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014810:	b510      	push	{r4, lr}
 8014812:	4604      	mov	r4, r0
 8014814:	2104      	movs	r1, #4
 8014816:	f006 fb2b 	bl	801ae70 <_ZdlPvj>
 801481a:	4620      	mov	r0, r4
 801481c:	bd10      	pop	{r4, pc}

0801481e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801481e:	b510      	push	{r4, lr}
 8014820:	4604      	mov	r4, r0
 8014822:	2104      	movs	r1, #4
 8014824:	f006 fb24 	bl	801ae70 <_ZdlPvj>
 8014828:	4620      	mov	r0, r4
 801482a:	bd10      	pop	{r4, pc}

0801482c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801482c:	b510      	push	{r4, lr}
 801482e:	4604      	mov	r4, r0
 8014830:	2104      	movs	r1, #4
 8014832:	f006 fb1d 	bl	801ae70 <_ZdlPvj>
 8014836:	4620      	mov	r0, r4
 8014838:	bd10      	pop	{r4, pc}

0801483a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801483a:	b510      	push	{r4, lr}
 801483c:	4604      	mov	r4, r0
 801483e:	2104      	movs	r1, #4
 8014840:	f006 fb16 	bl	801ae70 <_ZdlPvj>
 8014844:	4620      	mov	r0, r4
 8014846:	bd10      	pop	{r4, pc}

08014848 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8014848:	b510      	push	{r4, lr}
 801484a:	4604      	mov	r4, r0
 801484c:	2104      	movs	r1, #4
 801484e:	f006 fb0f 	bl	801ae70 <_ZdlPvj>
 8014852:	4620      	mov	r0, r4
 8014854:	bd10      	pop	{r4, pc}

08014856 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8014856:	b510      	push	{r4, lr}
 8014858:	4604      	mov	r4, r0
 801485a:	2104      	movs	r1, #4
 801485c:	f006 fb08 	bl	801ae70 <_ZdlPvj>
 8014860:	4620      	mov	r0, r4
 8014862:	bd10      	pop	{r4, pc}

08014864 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8014864:	b510      	push	{r4, lr}
 8014866:	4604      	mov	r4, r0
 8014868:	2104      	movs	r1, #4
 801486a:	f006 fb01 	bl	801ae70 <_ZdlPvj>
 801486e:	4620      	mov	r0, r4
 8014870:	bd10      	pop	{r4, pc}
	...

08014874 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8014874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014878:	4db4      	ldr	r5, [pc, #720]	; (8014b4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801487a:	4690      	mov	r8, r2
 801487c:	b08d      	sub	sp, #52	; 0x34
 801487e:	4604      	mov	r4, r0
 8014880:	682a      	ldr	r2, [r5, #0]
 8014882:	4689      	mov	r9, r1
 8014884:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8014888:	2a02      	cmp	r2, #2
 801488a:	d106      	bne.n	801489a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801488c:	4bb0      	ldr	r3, [pc, #704]	; (8014b50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801488e:	f240 11ed 	movw	r1, #493	; 0x1ed
 8014892:	4ab0      	ldr	r2, [pc, #704]	; (8014b54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8014894:	48b0      	ldr	r0, [pc, #704]	; (8014b58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 8014896:	f006 fc01 	bl	801b09c <__assert_func>
 801489a:	ae0c      	add	r6, sp, #48	; 0x30
 801489c:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 80148a0:	4630      	mov	r0, r6
 80148a2:	f7fe f97b 	bl	8012b9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80148a6:	6823      	ldr	r3, [r4, #0]
 80148a8:	4607      	mov	r7, r0
 80148aa:	4620      	mov	r0, r4
 80148ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ae:	4798      	blx	r3
 80148b0:	4287      	cmp	r7, r0
 80148b2:	d004      	beq.n	80148be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80148b4:	4ba9      	ldr	r3, [pc, #676]	; (8014b5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 80148b6:	f240 11ef 	movw	r1, #495	; 0x1ef
 80148ba:	4aa6      	ldr	r2, [pc, #664]	; (8014b54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80148bc:	e7ea      	b.n	8014894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80148be:	4630      	mov	r0, r6
 80148c0:	f7fe f8e2 	bl	8012a88 <_ZNK8touchgfx6Bitmap7getDataEv>
 80148c4:	4607      	mov	r7, r0
 80148c6:	b920      	cbnz	r0, 80148d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80148c8:	4ba5      	ldr	r3, [pc, #660]	; (8014b60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 80148ca:	f240 11f1 	movw	r1, #497	; 0x1f1
 80148ce:	4aa1      	ldr	r2, [pc, #644]	; (8014b54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80148d0:	e7e0      	b.n	8014894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80148d2:	f8d8 0000 	ldr.w	r0, [r8]
 80148d6:	ab06      	add	r3, sp, #24
 80148d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80148dc:	f9b8 a000 	ldrsh.w	sl, [r8]
 80148e0:	c303      	stmia	r3!, {r0, r1}
 80148e2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80148e6:	ab08      	add	r3, sp, #32
 80148e8:	f8d9 0000 	ldr.w	r0, [r9]
 80148ec:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 80148f0:	c303      	stmia	r3!, {r0, r1}
 80148f2:	4630      	mov	r0, r6
 80148f4:	f7fd ffc0 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148f8:	4680      	mov	r8, r0
 80148fa:	4630      	mov	r0, r6
 80148fc:	f7fd fff6 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014900:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8014904:	f10d 0920 	add.w	r9, sp, #32
 8014908:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801490c:	a806      	add	r0, sp, #24
 801490e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8014912:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8014916:	f7fa fc19 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801491a:	4648      	mov	r0, r9
 801491c:	f7fa fc16 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014920:	a80a      	add	r0, sp, #40	; 0x28
 8014922:	f7fa fc13 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014926:	4b8f      	ldr	r3, [pc, #572]	; (8014b64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8014928:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801492c:	881e      	ldrh	r6, [r3, #0]
 801492e:	4b8e      	ldr	r3, [pc, #568]	; (8014b68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8014930:	fa0f fb86 	sxth.w	fp, r6
 8014934:	8819      	ldrh	r1, [r3, #0]
 8014936:	4593      	cmp	fp, r2
 8014938:	dd75      	ble.n	8014a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801493a:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801493e:	4494      	add	ip, r2
 8014940:	fa1f fc8c 	uxth.w	ip, ip
 8014944:	fa0f fa8c 	sxth.w	sl, ip
 8014948:	f1ba 0f00 	cmp.w	sl, #0
 801494c:	dd6b      	ble.n	8014a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801494e:	fa0f f881 	sxth.w	r8, r1
 8014952:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014956:	4598      	cmp	r8, r3
 8014958:	dd65      	ble.n	8014a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801495a:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801495e:	4418      	add	r0, r3
 8014960:	b280      	uxth	r0, r0
 8014962:	fa0f fe80 	sxth.w	lr, r0
 8014966:	f1be 0f00 	cmp.w	lr, #0
 801496a:	dd5c      	ble.n	8014a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801496c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8014970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014974:	45d3      	cmp	fp, sl
 8014976:	bfc8      	it	gt
 8014978:	4666      	movgt	r6, ip
 801497a:	45f0      	cmp	r8, lr
 801497c:	bfc8      	it	gt
 801497e:	4601      	movgt	r1, r0
 8014980:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014984:	1ab6      	subs	r6, r6, r2
 8014986:	1ac9      	subs	r1, r1, r3
 8014988:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801498c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8014990:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8014994:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8014998:	f1bc 0f00 	cmp.w	ip, #0
 801499c:	f340 80aa 	ble.w	8014af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80149a0:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80149a4:	2e00      	cmp	r6, #0
 80149a6:	f340 80a5 	ble.w	8014af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80149aa:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80149ae:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80149b2:	4288      	cmp	r0, r1
 80149b4:	db3b      	blt.n	8014a2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80149b6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80149ba:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80149be:	429a      	cmp	r2, r3
 80149c0:	db35      	blt.n	8014a2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80149c2:	4460      	add	r0, ip
 80149c4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80149c8:	4461      	add	r1, ip
 80149ca:	b200      	sxth	r0, r0
 80149cc:	b209      	sxth	r1, r1
 80149ce:	4288      	cmp	r0, r1
 80149d0:	dc2d      	bgt.n	8014a2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80149d2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80149d6:	4432      	add	r2, r6
 80149d8:	440b      	add	r3, r1
 80149da:	b212      	sxth	r2, r2
 80149dc:	b21b      	sxth	r3, r3
 80149de:	429a      	cmp	r2, r3
 80149e0:	dc25      	bgt.n	8014a2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80149e2:	6823      	ldr	r3, [r4, #0]
 80149e4:	4620      	mov	r0, r4
 80149e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149e8:	4798      	blx	r3
 80149ea:	4682      	mov	sl, r0
 80149ec:	6828      	ldr	r0, [r5, #0]
 80149ee:	6803      	ldr	r3, [r0, #0]
 80149f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149f2:	4798      	blx	r3
 80149f4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80149f8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80149fc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8014a00:	9303      	str	r3, [sp, #12]
 8014a02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014a06:	1a9b      	subs	r3, r3, r2
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	b21c      	sxth	r4, r3
 8014a0c:	2c00      	cmp	r4, #0
 8014a0e:	dc13      	bgt.n	8014a38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 8014a10:	bf18      	it	ne
 8014a12:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8014a16:	463c      	mov	r4, r7
 8014a18:	bf1e      	ittt	ne
 8014a1a:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8014a1e:	189b      	addne	r3, r3, r2
 8014a20:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8014a24:	e00f      	b.n	8014a46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8014a26:	2300      	movs	r3, #0
 8014a28:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014a2c:	e7b2      	b.n	8014994 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8014a2e:	4b4f      	ldr	r3, [pc, #316]	; (8014b6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8014a30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8014a34:	4a47      	ldr	r2, [pc, #284]	; (8014b54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8014a36:	e72d      	b.n	8014894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014a38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014a3c:	ebab 0303 	sub.w	r3, fp, r3
 8014a40:	443c      	add	r4, r7
 8014a42:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8014a46:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8014a4a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014a4e:	1a9b      	subs	r3, r3, r2
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	b219      	sxth	r1, r3
 8014a54:	2900      	cmp	r1, #0
 8014a56:	dd51      	ble.n	8014afc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8014a58:	9a03      	ldr	r2, [sp, #12]
 8014a5a:	fb02 4401 	mla	r4, r2, r1, r4
 8014a5e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8014a62:	1ad3      	subs	r3, r2, r3
 8014a64:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014a68:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	dd41      	ble.n	8014af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014a70:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8014a74:	2e00      	cmp	r6, #0
 8014a76:	dd3d      	ble.n	8014af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014a78:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014a7c:	f04f 0803 	mov.w	r8, #3
 8014a80:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014a84:	fb0a f10c 	mul.w	r1, sl, ip
 8014a88:	fb12 1808 	smlabb	r8, r2, r8, r1
 8014a8c:	4935      	ldr	r1, [pc, #212]	; (8014b64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8014a8e:	4480      	add	r8, r0
 8014a90:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8014a94:	8809      	ldrh	r1, [r1, #0]
 8014a96:	4283      	cmp	r3, r0
 8014a98:	eba1 0202 	sub.w	r2, r1, r2
 8014a9c:	bfa8      	it	ge
 8014a9e:	4603      	movge	r3, r0
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	bfa8      	it	ge
 8014aa4:	4613      	movge	r3, r2
 8014aa6:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8014aaa:	4296      	cmp	r6, r2
 8014aac:	bfa8      	it	ge
 8014aae:	4616      	movge	r6, r2
 8014ab0:	4a2d      	ldr	r2, [pc, #180]	; (8014b68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8014ab2:	8812      	ldrh	r2, [r2, #0]
 8014ab4:	eba2 0c0c 	sub.w	ip, r2, ip
 8014ab8:	4632      	mov	r2, r6
 8014aba:	4566      	cmp	r6, ip
 8014abc:	bfa8      	it	ge
 8014abe:	4662      	movge	r2, ip
 8014ac0:	4299      	cmp	r1, r3
 8014ac2:	9202      	str	r2, [sp, #8]
 8014ac4:	d12d      	bne.n	8014b22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8014ac6:	4559      	cmp	r1, fp
 8014ac8:	d12b      	bne.n	8014b22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8014aca:	6828      	ldr	r0, [r5, #0]
 8014acc:	6803      	ldr	r3, [r0, #0]
 8014ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ad0:	4798      	blx	r3
 8014ad2:	07c3      	lsls	r3, r0, #31
 8014ad4:	d51b      	bpl.n	8014b0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8014ad6:	6828      	ldr	r0, [r5, #0]
 8014ad8:	9b02      	ldr	r3, [sp, #8]
 8014ada:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8014ade:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014ae2:	6803      	ldr	r3, [r0, #0]
 8014ae4:	f8cd b000 	str.w	fp, [sp]
 8014ae8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8014aea:	4623      	mov	r3, r4
 8014aec:	e899 0006 	ldmia.w	r9, {r1, r2}
 8014af0:	47a8      	blx	r5
 8014af2:	4607      	mov	r7, r0
 8014af4:	4638      	mov	r0, r7
 8014af6:	b00d      	add	sp, #52	; 0x34
 8014af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014afc:	bf1f      	itttt	ne
 8014afe:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8014b02:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8014b06:	189b      	addne	r3, r3, r2
 8014b08:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8014b0c:	e7ac      	b.n	8014a68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 8014b0e:	6828      	ldr	r0, [r5, #0]
 8014b10:	4642      	mov	r2, r8
 8014b12:	4621      	mov	r1, r4
 8014b14:	6803      	ldr	r3, [r0, #0]
 8014b16:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8014b18:	9b02      	ldr	r3, [sp, #8]
 8014b1a:	fb03 f30a 	mul.w	r3, r3, sl
 8014b1e:	47a8      	blx	r5
 8014b20:	e7e8      	b.n	8014af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014b22:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8014b26:	f04f 0900 	mov.w	r9, #0
 8014b2a:	9b02      	ldr	r3, [sp, #8]
 8014b2c:	454b      	cmp	r3, r9
 8014b2e:	dde1      	ble.n	8014af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014b30:	6828      	ldr	r0, [r5, #0]
 8014b32:	4642      	mov	r2, r8
 8014b34:	4621      	mov	r1, r4
 8014b36:	44d0      	add	r8, sl
 8014b38:	6803      	ldr	r3, [r0, #0]
 8014b3a:	f109 0901 	add.w	r9, r9, #1
 8014b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b40:	461e      	mov	r6, r3
 8014b42:	465b      	mov	r3, fp
 8014b44:	47b0      	blx	r6
 8014b46:	9b03      	ldr	r3, [sp, #12]
 8014b48:	441c      	add	r4, r3
 8014b4a:	e7ee      	b.n	8014b2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8014b4c:	24006bbc 	.word	0x24006bbc
 8014b50:	0801efa3 	.word	0x0801efa3
 8014b54:	0801f741 	.word	0x0801f741
 8014b58:	0801ef71 	.word	0x0801ef71
 8014b5c:	0801f055 	.word	0x0801f055
 8014b60:	0801f0aa 	.word	0x0801f0aa
 8014b64:	24006bb6 	.word	0x24006bb6
 8014b68:	24006bb8 	.word	0x24006bb8
 8014b6c:	0801f0e8 	.word	0x0801f0e8

08014b70 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8014b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b74:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014b78:	9c06      	ldr	r4, [sp, #24]
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d06e      	beq.n	8014c5c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014b7e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8014b82:	2d00      	cmp	r5, #0
 8014b84:	dd6a      	ble.n	8014c5c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014b86:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8014b8a:	f1bc 0f00 	cmp.w	ip, #0
 8014b8e:	dd65      	ble.n	8014c5c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014b90:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8014b94:	28ff      	cmp	r0, #255	; 0xff
 8014b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b9a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8014b9e:	fb02 3306 	mla	r3, r2, r6, r3
 8014ba2:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8014ba6:	b2e4      	uxtb	r4, r4
 8014ba8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014bac:	4419      	add	r1, r3
 8014bae:	fb02 f30c 	mul.w	r3, r2, ip
 8014bb2:	eba2 0205 	sub.w	r2, r2, r5
 8014bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014bbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014bc2:	440b      	add	r3, r1
 8014bc4:	d03e      	beq.n	8014c44 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8014bc6:	fa1f fc80 	uxth.w	ip, r0
 8014bca:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014bce:	fb06 f60c 	mul.w	r6, r6, ip
 8014bd2:	b280      	uxth	r0, r0
 8014bd4:	fb07 f70c 	mul.w	r7, r7, ip
 8014bd8:	fb04 f40c 	mul.w	r4, r4, ip
 8014bdc:	4299      	cmp	r1, r3
 8014bde:	d23d      	bcs.n	8014c5c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014be0:	eb01 0c05 	add.w	ip, r1, r5
 8014be4:	458c      	cmp	ip, r1
 8014be6:	f101 0e03 	add.w	lr, r1, #3
 8014bea:	d928      	bls.n	8014c3e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8014bec:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8014bf0:	fb11 f100 	smulbb	r1, r1, r0
 8014bf4:	4421      	add	r1, r4
 8014bf6:	b289      	uxth	r1, r1
 8014bf8:	f101 0801 	add.w	r8, r1, #1
 8014bfc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8014c00:	1209      	asrs	r1, r1, #8
 8014c02:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8014c06:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8014c0a:	fb11 f100 	smulbb	r1, r1, r0
 8014c0e:	4439      	add	r1, r7
 8014c10:	b289      	uxth	r1, r1
 8014c12:	f101 0801 	add.w	r8, r1, #1
 8014c16:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8014c1a:	1209      	asrs	r1, r1, #8
 8014c1c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8014c20:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8014c24:	fb11 f100 	smulbb	r1, r1, r0
 8014c28:	4431      	add	r1, r6
 8014c2a:	b289      	uxth	r1, r1
 8014c2c:	f101 0801 	add.w	r8, r1, #1
 8014c30:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8014c34:	1209      	asrs	r1, r1, #8
 8014c36:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8014c3a:	4671      	mov	r1, lr
 8014c3c:	e7d2      	b.n	8014be4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8014c3e:	4411      	add	r1, r2
 8014c40:	e7cc      	b.n	8014bdc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8014c42:	4411      	add	r1, r2
 8014c44:	4299      	cmp	r1, r3
 8014c46:	d209      	bcs.n	8014c5c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014c48:	1948      	adds	r0, r1, r5
 8014c4a:	4281      	cmp	r1, r0
 8014c4c:	d2f9      	bcs.n	8014c42 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8014c4e:	700c      	strb	r4, [r1, #0]
 8014c50:	3103      	adds	r1, #3
 8014c52:	f801 7c02 	strb.w	r7, [r1, #-2]
 8014c56:	f801 6c01 	strb.w	r6, [r1, #-1]
 8014c5a:	e7f6      	b.n	8014c4a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8014c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c60 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8014c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c62:	4606      	mov	r6, r0
 8014c64:	b087      	sub	sp, #28
 8014c66:	4615      	mov	r5, r2
 8014c68:	461f      	mov	r7, r3
 8014c6a:	b353      	cbz	r3, 8014cc2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014c6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	dd26      	ble.n	8014cc2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014c74:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	dd22      	ble.n	8014cc2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014c7c:	6808      	ldr	r0, [r1, #0]
 8014c7e:	aa04      	add	r2, sp, #16
 8014c80:	6849      	ldr	r1, [r1, #4]
 8014c82:	4c1b      	ldr	r4, [pc, #108]	; (8014cf0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8014c84:	c203      	stmia	r2!, {r0, r1}
 8014c86:	a804      	add	r0, sp, #16
 8014c88:	f7fa fa60 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014c8c:	6820      	ldr	r0, [r4, #0]
 8014c8e:	6803      	ldr	r3, [r0, #0]
 8014c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c92:	4798      	blx	r3
 8014c94:	2fff      	cmp	r7, #255	; 0xff
 8014c96:	d016      	beq.n	8014cc6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8014c98:	f010 0f08 	tst.w	r0, #8
 8014c9c:	6820      	ldr	r0, [r4, #0]
 8014c9e:	d015      	beq.n	8014ccc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8014ca0:	2400      	movs	r4, #0
 8014ca2:	6801      	ldr	r1, [r0, #0]
 8014ca4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014ca8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014cac:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8014cb0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8014cb4:	9401      	str	r4, [sp, #4]
 8014cb6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8014cba:	9400      	str	r4, [sp, #0]
 8014cbc:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	47a0      	blx	r4
 8014cc2:	b007      	add	sp, #28
 8014cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cc6:	f010 0f02 	tst.w	r0, #2
 8014cca:	e7e7      	b.n	8014c9c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8014ccc:	6803      	ldr	r3, [r0, #0]
 8014cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cd0:	4798      	blx	r3
 8014cd2:	4b08      	ldr	r3, [pc, #32]	; (8014cf4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8014cd4:	4601      	mov	r1, r0
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	881a      	ldrh	r2, [r3, #0]
 8014cda:	6833      	ldr	r3, [r6, #0]
 8014cdc:	e9cd 5700 	strd	r5, r7, [sp]
 8014ce0:	69dd      	ldr	r5, [r3, #28]
 8014ce2:	ab04      	add	r3, sp, #16
 8014ce4:	47a8      	blx	r5
 8014ce6:	6820      	ldr	r0, [r4, #0]
 8014ce8:	6803      	ldr	r3, [r0, #0]
 8014cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cec:	4798      	blx	r3
 8014cee:	e7e8      	b.n	8014cc2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014cf0:	24006bbc 	.word	0x24006bbc
 8014cf4:	24006bb6 	.word	0x24006bb6

08014cf8 <_ZN8touchgfx8LCD24bppC1Ev>:
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	490c      	ldr	r1, [pc, #48]	; (8014d2c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8014cfc:	6042      	str	r2, [r0, #4]
 8014cfe:	6001      	str	r1, [r0, #0]
 8014d00:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8014d04:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8014d08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014d0c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8014d10:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8014d14:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8014d18:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8014d1c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8014d20:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8014d24:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8014d28:	4770      	bx	lr
 8014d2a:	bf00      	nop
 8014d2c:	0801f38c 	.word	0x0801f38c

08014d30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8014d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d34:	b091      	sub	sp, #68	; 0x44
 8014d36:	880d      	ldrh	r5, [r1, #0]
 8014d38:	4607      	mov	r7, r0
 8014d3a:	4688      	mov	r8, r1
 8014d3c:	4616      	mov	r6, r2
 8014d3e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8014d42:	b12d      	cbz	r5, 8014d50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8014d44:	4b69      	ldr	r3, [pc, #420]	; (8014eec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8014d46:	2160      	movs	r1, #96	; 0x60
 8014d48:	4a69      	ldr	r2, [pc, #420]	; (8014ef0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8014d4a:	486a      	ldr	r0, [pc, #424]	; (8014ef4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8014d4c:	f006 f9a6 	bl	801b09c <__assert_func>
 8014d50:	6810      	ldr	r0, [r2, #0]
 8014d52:	ac0c      	add	r4, sp, #48	; 0x30
 8014d54:	6851      	ldr	r1, [r2, #4]
 8014d56:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8014ef8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8014d5a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8014efc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8014d5e:	c403      	stmia	r4!, {r0, r1}
 8014d60:	6818      	ldr	r0, [r3, #0]
 8014d62:	ac0e      	add	r4, sp, #56	; 0x38
 8014d64:	6859      	ldr	r1, [r3, #4]
 8014d66:	c403      	stmia	r4!, {r0, r1}
 8014d68:	a80c      	add	r0, sp, #48	; 0x30
 8014d6a:	f7fa f9ef 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014d6e:	4631      	mov	r1, r6
 8014d70:	a80e      	add	r0, sp, #56	; 0x38
 8014d72:	f7fa fa2f 	bl	800f1d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014d76:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8014d7a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014d7e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8014d82:	f8da 0000 	ldr.w	r0, [sl]
 8014d86:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014d8a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8014d8e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8014d92:	440f      	add	r7, r1
 8014d94:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8014d98:	440a      	add	r2, r1
 8014d9a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8014d9e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8014da2:	4413      	add	r3, r2
 8014da4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8014da8:	6803      	ldr	r3, [r0, #0]
 8014daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dac:	4798      	blx	r3
 8014dae:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014db2:	f8da 0000 	ldr.w	r0, [sl]
 8014db6:	d01e      	beq.n	8014df6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8014db8:	6801      	ldr	r1, [r0, #0]
 8014dba:	2201      	movs	r2, #1
 8014dbc:	9509      	str	r5, [sp, #36]	; 0x24
 8014dbe:	250b      	movs	r5, #11
 8014dc0:	b2a4      	uxth	r4, r4
 8014dc2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014dc6:	b2b6      	uxth	r6, r6
 8014dc8:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8014dcc:	f8bb 5000 	ldrh.w	r5, [fp]
 8014dd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8014dd4:	9602      	str	r6, [sp, #8]
 8014dd6:	9401      	str	r4, [sp, #4]
 8014dd8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8014ddc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014de0:	9203      	str	r2, [sp, #12]
 8014de2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014de6:	9200      	str	r2, [sp, #0]
 8014de8:	4642      	mov	r2, r8
 8014dea:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8014dec:	4639      	mov	r1, r7
 8014dee:	47a0      	blx	r4
 8014df0:	b011      	add	sp, #68	; 0x44
 8014df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df6:	6803      	ldr	r3, [r0, #0]
 8014df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dfa:	4798      	blx	r3
 8014dfc:	f8bb 5000 	ldrh.w	r5, [fp]
 8014e00:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8014e04:	f04f 0e04 	mov.w	lr, #4
 8014e08:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014e0c:	436e      	muls	r6, r5
 8014e0e:	fb05 2303 	mla	r3, r5, r3, r2
 8014e12:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014e16:	1b2d      	subs	r5, r5, r4
 8014e18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e20:	4418      	add	r0, r3
 8014e22:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8014e26:	1982      	adds	r2, r0, r6
 8014e28:	1b1b      	subs	r3, r3, r4
 8014e2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e30:	4290      	cmp	r0, r2
 8014e32:	d254      	bcs.n	8014ede <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8014e34:	eb00 0a04 	add.w	sl, r0, r4
 8014e38:	4550      	cmp	r0, sl
 8014e3a:	d24c      	bcs.n	8014ed6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8014e3c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014e40:	fb1e e101 	smlabb	r1, lr, r1, lr
 8014e44:	eb08 0c01 	add.w	ip, r8, r1
 8014e48:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8014e4c:	b173      	cbz	r3, 8014e6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8014e4e:	2bff      	cmp	r3, #255	; 0xff
 8014e50:	f818 b001 	ldrb.w	fp, [r8, r1]
 8014e54:	d10c      	bne.n	8014e70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8014e56:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014e5a:	d109      	bne.n	8014e70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8014e5c:	f880 b000 	strb.w	fp, [r0]
 8014e60:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8014e64:	7043      	strb	r3, [r0, #1]
 8014e66:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8014e6a:	7083      	strb	r3, [r0, #2]
 8014e6c:	3003      	adds	r0, #3
 8014e6e:	e7e3      	b.n	8014e38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8014e70:	fb09 f103 	mul.w	r1, r9, r3
 8014e74:	1c4b      	adds	r3, r1, #1
 8014e76:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014e7a:	7801      	ldrb	r1, [r0, #0]
 8014e7c:	121b      	asrs	r3, r3, #8
 8014e7e:	b29e      	uxth	r6, r3
 8014e80:	43db      	mvns	r3, r3
 8014e82:	fb1b fb06 	smulbb	fp, fp, r6
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	fb01 b103 	mla	r1, r1, r3, fp
 8014e8c:	b289      	uxth	r1, r1
 8014e8e:	f101 0b01 	add.w	fp, r1, #1
 8014e92:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8014e96:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014e9a:	fb1b fb03 	smulbb	fp, fp, r3
 8014e9e:	1209      	asrs	r1, r1, #8
 8014ea0:	7001      	strb	r1, [r0, #0]
 8014ea2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8014ea6:	fb01 b106 	mla	r1, r1, r6, fp
 8014eaa:	b289      	uxth	r1, r1
 8014eac:	f101 0b01 	add.w	fp, r1, #1
 8014eb0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8014eb4:	1209      	asrs	r1, r1, #8
 8014eb6:	7041      	strb	r1, [r0, #1]
 8014eb8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8014ebc:	f890 c002 	ldrb.w	ip, [r0, #2]
 8014ec0:	fb1c f303 	smulbb	r3, ip, r3
 8014ec4:	fb01 3606 	mla	r6, r1, r6, r3
 8014ec8:	b2b6      	uxth	r6, r6
 8014eca:	1c73      	adds	r3, r6, #1
 8014ecc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8014ed0:	1236      	asrs	r6, r6, #8
 8014ed2:	7086      	strb	r6, [r0, #2]
 8014ed4:	e7ca      	b.n	8014e6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8014ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ed8:	4428      	add	r0, r5
 8014eda:	441f      	add	r7, r3
 8014edc:	e7a8      	b.n	8014e30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8014ede:	4b06      	ldr	r3, [pc, #24]	; (8014ef8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8014ee0:	6818      	ldr	r0, [r3, #0]
 8014ee2:	6803      	ldr	r3, [r0, #0]
 8014ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ee6:	4798      	blx	r3
 8014ee8:	e782      	b.n	8014df0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8014eea:	bf00      	nop
 8014eec:	0801eed5 	.word	0x0801eed5
 8014ef0:	0801f563 	.word	0x0801f563
 8014ef4:	0801ef71 	.word	0x0801ef71
 8014ef8:	24006bbc 	.word	0x24006bbc
 8014efc:	24006bb6 	.word	0x24006bb6

08014f00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8014f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f04:	f8b1 9000 	ldrh.w	r9, [r1]
 8014f08:	b091      	sub	sp, #68	; 0x44
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	460e      	mov	r6, r1
 8014f0e:	f1b9 0f01 	cmp.w	r9, #1
 8014f12:	4690      	mov	r8, r2
 8014f14:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8014f18:	d005      	beq.n	8014f26 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8014f1a:	4b69      	ldr	r3, [pc, #420]	; (80150c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8014f1c:	21ae      	movs	r1, #174	; 0xae
 8014f1e:	4a69      	ldr	r2, [pc, #420]	; (80150c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8014f20:	4869      	ldr	r0, [pc, #420]	; (80150c8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8014f22:	f006 f8bb 	bl	801b09c <__assert_func>
 8014f26:	6810      	ldr	r0, [r2, #0]
 8014f28:	ad0c      	add	r5, sp, #48	; 0x30
 8014f2a:	6851      	ldr	r1, [r2, #4]
 8014f2c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80150cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8014f30:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80150d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8014f34:	c503      	stmia	r5!, {r0, r1}
 8014f36:	6818      	ldr	r0, [r3, #0]
 8014f38:	ad0e      	add	r5, sp, #56	; 0x38
 8014f3a:	6859      	ldr	r1, [r3, #4]
 8014f3c:	c503      	stmia	r5!, {r0, r1}
 8014f3e:	a80c      	add	r0, sp, #48	; 0x30
 8014f40:	f7fa f904 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014f44:	4641      	mov	r1, r8
 8014f46:	a80e      	add	r0, sp, #56	; 0x38
 8014f48:	f7fa f944 	bl	800f1d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014f4c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8014f50:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014f54:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8014f58:	f8da 0000 	ldr.w	r0, [sl]
 8014f5c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014f60:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8014f64:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8014f68:	440c      	add	r4, r1
 8014f6a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8014f6e:	440a      	add	r2, r1
 8014f70:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8014f74:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8014f78:	4413      	add	r3, r2
 8014f7a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8014f7e:	6803      	ldr	r3, [r0, #0]
 8014f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f82:	4798      	blx	r3
 8014f84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014f88:	f8da 0000 	ldr.w	r0, [sl]
 8014f8c:	d020      	beq.n	8014fd0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f04f 0c0b 	mov.w	ip, #11
 8014f94:	6801      	ldr	r1, [r0, #0]
 8014f96:	b2ad      	uxth	r5, r5
 8014f98:	f8cd c01c 	str.w	ip, [sp, #28]
 8014f9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014fa0:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8014fa4:	f8bb c000 	ldrh.w	ip, [fp]
 8014fa8:	9704      	str	r7, [sp, #16]
 8014faa:	9502      	str	r5, [sp, #8]
 8014fac:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8014fb0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014fb4:	9203      	str	r2, [sp, #12]
 8014fb6:	fa1f f288 	uxth.w	r2, r8
 8014fba:	9201      	str	r2, [sp, #4]
 8014fbc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014fc0:	9200      	str	r2, [sp, #0]
 8014fc2:	4632      	mov	r2, r6
 8014fc4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8014fc6:	4621      	mov	r1, r4
 8014fc8:	47a8      	blx	r5
 8014fca:	b011      	add	sp, #68	; 0x44
 8014fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd0:	6803      	ldr	r3, [r0, #0]
 8014fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fd4:	4798      	blx	r3
 8014fd6:	f8bb 2000 	ldrh.w	r2, [fp]
 8014fda:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014fde:	f04f 0e03 	mov.w	lr, #3
 8014fe2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8014fe6:	4355      	muls	r5, r2
 8014fe8:	fa1f fc87 	uxth.w	ip, r7
 8014fec:	fb02 1303 	mla	r3, r2, r3, r1
 8014ff0:	eba2 0208 	sub.w	r2, r2, r8
 8014ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ffc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015000:	4418      	add	r0, r3
 8015002:	920b      	str	r2, [sp, #44]	; 0x2c
 8015004:	1943      	adds	r3, r0, r5
 8015006:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801500a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801500e:	eba2 0208 	sub.w	r2, r2, r8
 8015012:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015016:	b2ad      	uxth	r5, r5
 8015018:	4298      	cmp	r0, r3
 801501a:	d24a      	bcs.n	80150b2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801501c:	eb00 0908 	add.w	r9, r0, r8
 8015020:	4621      	mov	r1, r4
 8015022:	4548      	cmp	r0, r9
 8015024:	460c      	mov	r4, r1
 8015026:	d240      	bcs.n	80150aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8015028:	f04f 0a04 	mov.w	sl, #4
 801502c:	7824      	ldrb	r4, [r4, #0]
 801502e:	2fff      	cmp	r7, #255	; 0xff
 8015030:	f101 0101 	add.w	r1, r1, #1
 8015034:	fb1e a404 	smlabb	r4, lr, r4, sl
 8015038:	eb06 0a04 	add.w	sl, r6, r4
 801503c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8015040:	d02b      	beq.n	801509a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8015042:	7804      	ldrb	r4, [r0, #0]
 8015044:	fb14 f405 	smulbb	r4, r4, r5
 8015048:	fb0b 440c 	mla	r4, fp, ip, r4
 801504c:	b2a4      	uxth	r4, r4
 801504e:	f104 0b01 	add.w	fp, r4, #1
 8015052:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015056:	f890 b001 	ldrb.w	fp, [r0, #1]
 801505a:	fb1b fb05 	smulbb	fp, fp, r5
 801505e:	1224      	asrs	r4, r4, #8
 8015060:	7004      	strb	r4, [r0, #0]
 8015062:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015066:	fb04 b40c 	mla	r4, r4, ip, fp
 801506a:	b2a4      	uxth	r4, r4
 801506c:	f104 0b01 	add.w	fp, r4, #1
 8015070:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015074:	1224      	asrs	r4, r4, #8
 8015076:	7044      	strb	r4, [r0, #1]
 8015078:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801507c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8015080:	fb1a fa05 	smulbb	sl, sl, r5
 8015084:	fb04 a40c 	mla	r4, r4, ip, sl
 8015088:	b2a4      	uxth	r4, r4
 801508a:	f104 0a01 	add.w	sl, r4, #1
 801508e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8015092:	1224      	asrs	r4, r4, #8
 8015094:	7084      	strb	r4, [r0, #2]
 8015096:	3003      	adds	r0, #3
 8015098:	e7c3      	b.n	8015022 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 801509a:	f880 b000 	strb.w	fp, [r0]
 801509e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80150a2:	7044      	strb	r4, [r0, #1]
 80150a4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80150a8:	e7f4      	b.n	8015094 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 80150aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80150ac:	4420      	add	r0, r4
 80150ae:	188c      	adds	r4, r1, r2
 80150b0:	e7b2      	b.n	8015018 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 80150b2:	4b06      	ldr	r3, [pc, #24]	; (80150cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 80150b4:	6818      	ldr	r0, [r3, #0]
 80150b6:	6803      	ldr	r3, [r0, #0]
 80150b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ba:	4798      	blx	r3
 80150bc:	e785      	b.n	8014fca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 80150be:	bf00      	nop
 80150c0:	0801ee54 	.word	0x0801ee54
 80150c4:	0801f456 	.word	0x0801f456
 80150c8:	0801ef71 	.word	0x0801ef71
 80150cc:	24006bbc 	.word	0x24006bbc
 80150d0:	24006bb6 	.word	0x24006bb6

080150d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80150d4:	b570      	push	{r4, r5, r6, lr}
 80150d6:	780d      	ldrb	r5, [r1, #0]
 80150d8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80150dc:	2d01      	cmp	r5, #1
 80150de:	d00d      	beq.n	80150fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 80150e0:	d307      	bcc.n	80150f2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 80150e2:	2d02      	cmp	r5, #2
 80150e4:	d10f      	bne.n	8015106 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 80150e6:	4b08      	ldr	r3, [pc, #32]	; (8015108 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 80150e8:	2153      	movs	r1, #83	; 0x53
 80150ea:	4a08      	ldr	r2, [pc, #32]	; (801510c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 80150ec:	4808      	ldr	r0, [pc, #32]	; (8015110 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 80150ee:	f005 ffd5 	bl	801b09c <__assert_func>
 80150f2:	9404      	str	r4, [sp, #16]
 80150f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150f8:	f7ff be1a 	b.w	8014d30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80150fc:	9404      	str	r4, [sp, #16]
 80150fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015102:	f7ff befd 	b.w	8014f00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8015106:	bd70      	pop	{r4, r5, r6, pc}
 8015108:	0801ee09 	.word	0x0801ee09
 801510c:	0801f3d4 	.word	0x0801f3d4
 8015110:	0801ef71 	.word	0x0801ef71

08015114 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8015114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015118:	4605      	mov	r5, r0
 801511a:	b08f      	sub	sp, #60	; 0x3c
 801511c:	460c      	mov	r4, r1
 801511e:	461f      	mov	r7, r3
 8015120:	2b00      	cmp	r3, #0
 8015122:	d052      	beq.n	80151ca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8015124:	6808      	ldr	r0, [r1, #0]
 8015126:	ab0a      	add	r3, sp, #40	; 0x28
 8015128:	6849      	ldr	r1, [r1, #4]
 801512a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80152f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801512e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80152f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8015132:	c303      	stmia	r3!, {r0, r1}
 8015134:	6810      	ldr	r0, [r2, #0]
 8015136:	ab0c      	add	r3, sp, #48	; 0x30
 8015138:	6851      	ldr	r1, [r2, #4]
 801513a:	c303      	stmia	r3!, {r0, r1}
 801513c:	a80a      	add	r0, sp, #40	; 0x28
 801513e:	f7fa f805 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015142:	4621      	mov	r1, r4
 8015144:	a80c      	add	r0, sp, #48	; 0x30
 8015146:	f7fa f845 	bl	800f1d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801514a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801514e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015152:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015156:	f8d8 0000 	ldr.w	r0, [r8]
 801515a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801515e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8015162:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8015166:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801516a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801516e:	440a      	add	r2, r1
 8015170:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8015174:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8015178:	4413      	add	r3, r2
 801517a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801517e:	6803      	ldr	r3, [r0, #0]
 8015180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015182:	4798      	blx	r3
 8015184:	2fff      	cmp	r7, #255	; 0xff
 8015186:	d023      	beq.n	80151d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8015188:	f010 0f04 	tst.w	r0, #4
 801518c:	f8d8 0000 	ldr.w	r0, [r8]
 8015190:	d021      	beq.n	80151d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8015192:	2100      	movs	r1, #0
 8015194:	f04f 0e01 	mov.w	lr, #1
 8015198:	f8d0 c000 	ldr.w	ip, [r0]
 801519c:	b2a4      	uxth	r4, r4
 801519e:	9106      	str	r1, [sp, #24]
 80151a0:	b2b6      	uxth	r6, r6
 80151a2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80151a6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80151aa:	e9cd e107 	strd	lr, r1, [sp, #28]
 80151ae:	f8b9 e000 	ldrh.w	lr, [r9]
 80151b2:	9703      	str	r7, [sp, #12]
 80151b4:	9401      	str	r4, [sp, #4]
 80151b6:	9600      	str	r6, [sp, #0]
 80151b8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80151bc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80151c0:	9102      	str	r1, [sp, #8]
 80151c2:	4629      	mov	r1, r5
 80151c4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80151c8:	47a0      	blx	r4
 80151ca:	b00f      	add	sp, #60	; 0x3c
 80151cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151d0:	f010 0f01 	tst.w	r0, #1
 80151d4:	e7da      	b.n	801518c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80151d6:	6803      	ldr	r3, [r0, #0]
 80151d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151da:	4798      	blx	r3
 80151dc:	f8b9 1000 	ldrh.w	r1, [r9]
 80151e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80151e4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80151e8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80151ec:	434c      	muls	r4, r1
 80151ee:	2fff      	cmp	r7, #255	; 0xff
 80151f0:	fb01 2303 	mla	r3, r1, r3, r2
 80151f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80151f8:	eba1 0106 	sub.w	r1, r1, r6
 80151fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015200:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015204:	4418      	add	r0, r3
 8015206:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801520a:	eba3 0606 	sub.w	r6, r3, r6
 801520e:	4404      	add	r4, r0
 8015210:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8015214:	d04a      	beq.n	80152ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8015216:	43fa      	mvns	r2, r7
 8015218:	b2bb      	uxth	r3, r7
 801521a:	b2d7      	uxtb	r7, r2
 801521c:	42a0      	cmp	r0, r4
 801521e:	d263      	bcs.n	80152e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8015220:	eb00 0e0c 	add.w	lr, r0, ip
 8015224:	4586      	cmp	lr, r0
 8015226:	f100 0803 	add.w	r8, r0, #3
 801522a:	d93a      	bls.n	80152a2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801522c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8015230:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8015234:	00d0      	lsls	r0, r2, #3
 8015236:	fb19 f907 	smulbb	r9, r9, r7
 801523a:	b2c0      	uxtb	r0, r0
 801523c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8015240:	fb00 9003 	mla	r0, r0, r3, r9
 8015244:	b280      	uxth	r0, r0
 8015246:	f100 0901 	add.w	r9, r0, #1
 801524a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801524e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8015252:	fb19 f907 	smulbb	r9, r9, r7
 8015256:	1200      	asrs	r0, r0, #8
 8015258:	f808 0c03 	strb.w	r0, [r8, #-3]
 801525c:	10d0      	asrs	r0, r2, #3
 801525e:	1212      	asrs	r2, r2, #8
 8015260:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015264:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8015268:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801526c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8015270:	fb00 9003 	mla	r0, r0, r3, r9
 8015274:	b280      	uxth	r0, r0
 8015276:	f100 0901 	add.w	r9, r0, #1
 801527a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801527e:	1200      	asrs	r0, r0, #8
 8015280:	f808 0c02 	strb.w	r0, [r8, #-2]
 8015284:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8015288:	fb10 f007 	smulbb	r0, r0, r7
 801528c:	fb02 0203 	mla	r2, r2, r3, r0
 8015290:	b292      	uxth	r2, r2
 8015292:	1c50      	adds	r0, r2, #1
 8015294:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015298:	4640      	mov	r0, r8
 801529a:	1212      	asrs	r2, r2, #8
 801529c:	f808 2c01 	strb.w	r2, [r8, #-1]
 80152a0:	e7c0      	b.n	8015224 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80152a2:	4408      	add	r0, r1
 80152a4:	4435      	add	r5, r6
 80152a6:	e7b9      	b.n	801521c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80152a8:	4408      	add	r0, r1
 80152aa:	4435      	add	r5, r6
 80152ac:	42a0      	cmp	r0, r4
 80152ae:	d21b      	bcs.n	80152e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80152b0:	eb00 070c 	add.w	r7, r0, ip
 80152b4:	42b8      	cmp	r0, r7
 80152b6:	d2f7      	bcs.n	80152a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80152b8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80152bc:	3003      	adds	r0, #3
 80152be:	00da      	lsls	r2, r3, #3
 80152c0:	b2d2      	uxtb	r2, r2
 80152c2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80152c6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80152ca:	10da      	asrs	r2, r3, #3
 80152cc:	121b      	asrs	r3, r3, #8
 80152ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80152d2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80152d6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80152da:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80152de:	f800 2c02 	strb.w	r2, [r0, #-2]
 80152e2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80152e6:	e7e5      	b.n	80152b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80152e8:	4b02      	ldr	r3, [pc, #8]	; (80152f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80152ea:	6818      	ldr	r0, [r3, #0]
 80152ec:	6803      	ldr	r3, [r0, #0]
 80152ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f0:	4798      	blx	r3
 80152f2:	e76a      	b.n	80151ca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80152f4:	24006bbc 	.word	0x24006bbc
 80152f8:	24006bb6 	.word	0x24006bb6

080152fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80152fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015300:	b08a      	sub	sp, #40	; 0x28
 8015302:	460d      	mov	r5, r1
 8015304:	4604      	mov	r4, r0
 8015306:	461e      	mov	r6, r3
 8015308:	6808      	ldr	r0, [r1, #0]
 801530a:	ab06      	add	r3, sp, #24
 801530c:	6849      	ldr	r1, [r1, #4]
 801530e:	4f5d      	ldr	r7, [pc, #372]	; (8015484 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8015310:	c303      	stmia	r3!, {r0, r1}
 8015312:	6810      	ldr	r0, [r2, #0]
 8015314:	ab08      	add	r3, sp, #32
 8015316:	6851      	ldr	r1, [r2, #4]
 8015318:	c303      	stmia	r3!, {r0, r1}
 801531a:	a806      	add	r0, sp, #24
 801531c:	f7f9 ff16 	bl	800f14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015320:	4629      	mov	r1, r5
 8015322:	a808      	add	r0, sp, #32
 8015324:	f7f9 ff56 	bl	800f1d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015328:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801532c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015330:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015334:	6838      	ldr	r0, [r7, #0]
 8015336:	fb11 2103 	smlabb	r1, r1, r3, r2
 801533a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801533e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8015342:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8015346:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801534a:	440a      	add	r2, r1
 801534c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015350:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015354:	4413      	add	r3, r2
 8015356:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801535a:	6803      	ldr	r3, [r0, #0]
 801535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801535e:	4798      	blx	r3
 8015360:	2eff      	cmp	r6, #255	; 0xff
 8015362:	d119      	bne.n	8015398 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8015364:	f010 0f20 	tst.w	r0, #32
 8015368:	6838      	ldr	r0, [r7, #0]
 801536a:	d018      	beq.n	801539e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801536c:	b2ad      	uxth	r5, r5
 801536e:	2700      	movs	r7, #0
 8015370:	6801      	ldr	r1, [r0, #0]
 8015372:	9501      	str	r5, [sp, #4]
 8015374:	fa1f f588 	uxth.w	r5, r8
 8015378:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801537c:	9500      	str	r5, [sp, #0]
 801537e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015382:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8015386:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801538a:	9602      	str	r6, [sp, #8]
 801538c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801538e:	4621      	mov	r1, r4
 8015390:	47a8      	blx	r5
 8015392:	b00a      	add	sp, #40	; 0x28
 8015394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015398:	f010 0f40 	tst.w	r0, #64	; 0x40
 801539c:	e7e4      	b.n	8015368 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801539e:	6803      	ldr	r3, [r0, #0]
 80153a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153a2:	4798      	blx	r3
 80153a4:	4b38      	ldr	r3, [pc, #224]	; (8015488 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80153a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80153aa:	f8b3 c000 	ldrh.w	ip, [r3]
 80153ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80153b2:	fb0c f505 	mul.w	r5, ip, r5
 80153b6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80153ba:	fb0c 2303 	mla	r3, ip, r3, r2
 80153be:	ebac 0c08 	sub.w	ip, ip, r8
 80153c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80153c6:	ebae 0e08 	sub.w	lr, lr, r8
 80153ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80153ce:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80153d2:	4418      	add	r0, r3
 80153d4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80153d8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80153dc:	4405      	add	r5, r0
 80153de:	42a8      	cmp	r0, r5
 80153e0:	d24a      	bcs.n	8015478 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80153e2:	eb00 0803 	add.w	r8, r0, r3
 80153e6:	4540      	cmp	r0, r8
 80153e8:	d243      	bcs.n	8015472 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80153ea:	78e2      	ldrb	r2, [r4, #3]
 80153ec:	b15a      	cbz	r2, 8015406 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80153ee:	2aff      	cmp	r2, #255	; 0xff
 80153f0:	f894 9000 	ldrb.w	r9, [r4]
 80153f4:	d10a      	bne.n	801540c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80153f6:	2eff      	cmp	r6, #255	; 0xff
 80153f8:	d108      	bne.n	801540c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80153fa:	f880 9000 	strb.w	r9, [r0]
 80153fe:	7862      	ldrb	r2, [r4, #1]
 8015400:	7042      	strb	r2, [r0, #1]
 8015402:	78a2      	ldrb	r2, [r4, #2]
 8015404:	7082      	strb	r2, [r0, #2]
 8015406:	3003      	adds	r0, #3
 8015408:	3404      	adds	r4, #4
 801540a:	e7ec      	b.n	80153e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801540c:	4372      	muls	r2, r6
 801540e:	1c51      	adds	r1, r2, #1
 8015410:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8015414:	1209      	asrs	r1, r1, #8
 8015416:	fa1f fa81 	uxth.w	sl, r1
 801541a:	43c9      	mvns	r1, r1
 801541c:	fb19 f90a 	smulbb	r9, r9, sl
 8015420:	b2ca      	uxtb	r2, r1
 8015422:	7801      	ldrb	r1, [r0, #0]
 8015424:	fb01 9902 	mla	r9, r1, r2, r9
 8015428:	fa1f f989 	uxth.w	r9, r9
 801542c:	f109 0101 	add.w	r1, r9, #1
 8015430:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8015434:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015438:	f880 9000 	strb.w	r9, [r0]
 801543c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8015440:	7861      	ldrb	r1, [r4, #1]
 8015442:	fb19 f902 	smulbb	r9, r9, r2
 8015446:	fb01 910a 	mla	r1, r1, sl, r9
 801544a:	b289      	uxth	r1, r1
 801544c:	f101 0901 	add.w	r9, r1, #1
 8015450:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8015454:	1209      	asrs	r1, r1, #8
 8015456:	7041      	strb	r1, [r0, #1]
 8015458:	7881      	ldrb	r1, [r0, #2]
 801545a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801545e:	fb11 f202 	smulbb	r2, r1, r2
 8015462:	fb09 220a 	mla	r2, r9, sl, r2
 8015466:	b292      	uxth	r2, r2
 8015468:	1c51      	adds	r1, r2, #1
 801546a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801546e:	1212      	asrs	r2, r2, #8
 8015470:	e7c8      	b.n	8015404 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8015472:	4460      	add	r0, ip
 8015474:	4474      	add	r4, lr
 8015476:	e7b2      	b.n	80153de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8015478:	6838      	ldr	r0, [r7, #0]
 801547a:	6803      	ldr	r3, [r0, #0]
 801547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801547e:	4798      	blx	r3
 8015480:	e787      	b.n	8015392 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8015482:	bf00      	nop
 8015484:	24006bbc 	.word	0x24006bbc
 8015488:	24006bb6 	.word	0x24006bb6

0801548c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801548c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015490:	b085      	sub	sp, #20
 8015492:	4606      	mov	r6, r0
 8015494:	460c      	mov	r4, r1
 8015496:	4691      	mov	r9, r2
 8015498:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801549c:	4698      	mov	r8, r3
 801549e:	b31d      	cbz	r5, 80154e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80154a0:	4608      	mov	r0, r1
 80154a2:	f7fd f9e9 	bl	8012878 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80154a6:	4607      	mov	r7, r0
 80154a8:	4620      	mov	r0, r4
 80154aa:	f7fd fa1f 	bl	80128ec <_ZNK8touchgfx6Bitmap9getHeightEv>
 80154ae:	f8ad 000e 	strh.w	r0, [sp, #14]
 80154b2:	4620      	mov	r0, r4
 80154b4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80154b8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80154bc:	f8ad 700c 	strh.w	r7, [sp, #12]
 80154c0:	f7fd fb6c 	bl	8012b9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80154c4:	280b      	cmp	r0, #11
 80154c6:	d838      	bhi.n	801553a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 80154c8:	e8df f000 	tbb	[pc, r0]
 80154cc:	37062920 	.word	0x37062920
 80154d0:	37373737 	.word	0x37373737
 80154d4:	11373737 	.word	0x11373737
 80154d8:	4620      	mov	r0, r4
 80154da:	f7fd fad5 	bl	8012a88 <_ZNK8touchgfx6Bitmap7getDataEv>
 80154de:	462b      	mov	r3, r5
 80154e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154e2:	a902      	add	r1, sp, #8
 80154e4:	f7ff ff0a 	bl	80152fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80154e8:	b005      	add	sp, #20
 80154ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154ee:	4620      	mov	r0, r4
 80154f0:	f7fd faca 	bl	8012a88 <_ZNK8touchgfx6Bitmap7getDataEv>
 80154f4:	4606      	mov	r6, r0
 80154f6:	4620      	mov	r0, r4
 80154f8:	f7fd faf8 	bl	8012aec <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80154fc:	9500      	str	r5, [sp, #0]
 80154fe:	4601      	mov	r1, r0
 8015500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015502:	aa02      	add	r2, sp, #8
 8015504:	4630      	mov	r0, r6
 8015506:	f7ff fde5 	bl	80150d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801550a:	e7ed      	b.n	80154e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801550c:	4620      	mov	r0, r4
 801550e:	f7fd fabb 	bl	8012a88 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015512:	462b      	mov	r3, r5
 8015514:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015516:	a902      	add	r1, sp, #8
 8015518:	f7ff fdfc 	bl	8015114 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801551c:	e7e4      	b.n	80154e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801551e:	6833      	ldr	r3, [r6, #0]
 8015520:	4620      	mov	r0, r4
 8015522:	68df      	ldr	r7, [r3, #12]
 8015524:	f7fd fab0 	bl	8012a88 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015528:	2300      	movs	r3, #0
 801552a:	4601      	mov	r1, r0
 801552c:	aa02      	add	r2, sp, #8
 801552e:	4630      	mov	r0, r6
 8015530:	e9cd 5300 	strd	r5, r3, [sp]
 8015534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015536:	47b8      	blx	r7
 8015538:	e7d6      	b.n	80154e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801553a:	4b03      	ldr	r3, [pc, #12]	; (8015548 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801553c:	2147      	movs	r1, #71	; 0x47
 801553e:	4a03      	ldr	r2, [pc, #12]	; (801554c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8015540:	4803      	ldr	r0, [pc, #12]	; (8015550 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8015542:	f005 fdab 	bl	801b09c <__assert_func>
 8015546:	bf00      	nop
 8015548:	0801eea2 	.word	0x0801eea2
 801554c:	0801f4df 	.word	0x0801f4df
 8015550:	0801ef71 	.word	0x0801ef71

08015554 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8015554:	b570      	push	{r4, r5, r6, lr}
 8015556:	9c04      	ldr	r4, [sp, #16]
 8015558:	4605      	mov	r5, r0
 801555a:	4608      	mov	r0, r1
 801555c:	4619      	mov	r1, r3
 801555e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015562:	2a0d      	cmp	r2, #13
 8015564:	d826      	bhi.n	80155b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8015566:	e8df f002 	tbb	[pc, r2]
 801556a:	1107      	.short	0x1107
 801556c:	1e1e1e0c 	.word	0x1e1e1e0c
 8015570:	1e1e1e1e 	.word	0x1e1e1e1e
 8015574:	1e1e1e1e 	.word	0x1e1e1e1e
 8015578:	4622      	mov	r2, r4
 801557a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801557e:	f7ff bdc9 	b.w	8015114 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8015582:	4622      	mov	r2, r4
 8015584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015588:	f7ff beb8 	b.w	80152fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801558c:	682a      	ldr	r2, [r5, #0]
 801558e:	2600      	movs	r6, #0
 8015590:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8015594:	68d6      	ldr	r6, [r2, #12]
 8015596:	4623      	mov	r3, r4
 8015598:	460a      	mov	r2, r1
 801559a:	4601      	mov	r1, r0
 801559c:	46b4      	mov	ip, r6
 801559e:	4628      	mov	r0, r5
 80155a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155a4:	4760      	bx	ip
 80155a6:	4b04      	ldr	r3, [pc, #16]	; (80155b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80155a8:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80155ac:	4a03      	ldr	r2, [pc, #12]	; (80155bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80155ae:	4804      	ldr	r0, [pc, #16]	; (80155c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80155b0:	f005 fd74 	bl	801b09c <__assert_func>
 80155b4:	bd70      	pop	{r4, r5, r6, pc}
 80155b6:	bf00      	nop
 80155b8:	0801f148 	.word	0x0801f148
 80155bc:	0801f7c7 	.word	0x0801f7c7
 80155c0:	0801ef71 	.word	0x0801ef71

080155c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80155c4:	b158      	cbz	r0, 80155de <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80155c6:	2902      	cmp	r1, #2
 80155c8:	d00f      	beq.n	80155ea <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80155ca:	2903      	cmp	r1, #3
 80155cc:	d010      	beq.n	80155f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80155ce:	2901      	cmp	r1, #1
 80155d0:	d101      	bne.n	80155d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80155d2:	2001      	movs	r0, #1
 80155d4:	4770      	bx	lr
 80155d6:	4b08      	ldr	r3, [pc, #32]	; (80155f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80155d8:	8819      	ldrh	r1, [r3, #0]
 80155da:	4248      	negs	r0, r1
 80155dc:	4770      	bx	lr
 80155de:	2902      	cmp	r1, #2
 80155e0:	d006      	beq.n	80155f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80155e2:	2903      	cmp	r1, #3
 80155e4:	d0f7      	beq.n	80155d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80155e6:	2901      	cmp	r1, #1
 80155e8:	d1f3      	bne.n	80155d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80155ea:	4b03      	ldr	r3, [pc, #12]	; (80155f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80155ec:	8818      	ldrh	r0, [r3, #0]
 80155ee:	4770      	bx	lr
 80155f0:	f04f 30ff 	mov.w	r0, #4294967295
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop
 80155f8:	24006bb6 	.word	0x24006bb6

080155fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80155fc:	b170      	cbz	r0, 801561c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80155fe:	2902      	cmp	r1, #2
 8015600:	d012      	beq.n	8015628 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8015602:	2903      	cmp	r1, #3
 8015604:	d006      	beq.n	8015614 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8015606:	2901      	cmp	r1, #1
 8015608:	d001      	beq.n	801560e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801560a:	2001      	movs	r0, #1
 801560c:	4770      	bx	lr
 801560e:	4b08      	ldr	r3, [pc, #32]	; (8015630 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8015610:	8818      	ldrh	r0, [r3, #0]
 8015612:	4770      	bx	lr
 8015614:	4b06      	ldr	r3, [pc, #24]	; (8015630 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8015616:	8818      	ldrh	r0, [r3, #0]
 8015618:	4240      	negs	r0, r0
 801561a:	4770      	bx	lr
 801561c:	2902      	cmp	r1, #2
 801561e:	d0f9      	beq.n	8015614 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8015620:	2903      	cmp	r1, #3
 8015622:	d0f2      	beq.n	801560a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8015624:	2901      	cmp	r1, #1
 8015626:	d1f2      	bne.n	801560e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8015628:	f04f 30ff 	mov.w	r0, #4294967295
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop
 8015630:	24006bb6 	.word	0x24006bb6

08015634 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8015634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015638:	b097      	sub	sp, #92	; 0x5c
 801563a:	910b      	str	r1, [sp, #44]	; 0x2c
 801563c:	a912      	add	r1, sp, #72	; 0x48
 801563e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8015642:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8015646:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801564a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801564e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8015652:	e881 000c 	stmia.w	r1, {r2, r3}
 8015656:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801565a:	930a      	str	r3, [sp, #40]	; 0x28
 801565c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8015660:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8015664:	9311      	str	r3, [sp, #68]	; 0x44
 8015666:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801566a:	798d      	ldrb	r5, [r1, #6]
 801566c:	930c      	str	r3, [sp, #48]	; 0x30
 801566e:	7b4b      	ldrb	r3, [r1, #13]
 8015670:	0158      	lsls	r0, r3, #5
 8015672:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015676:	4328      	orrs	r0, r5
 8015678:	9009      	str	r0, [sp, #36]	; 0x24
 801567a:	f000 817d 	beq.w	8015978 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801567e:	011b      	lsls	r3, r3, #4
 8015680:	79c8      	ldrb	r0, [r1, #7]
 8015682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015686:	4303      	orrs	r3, r0
 8015688:	930e      	str	r3, [sp, #56]	; 0x38
 801568a:	f000 8175 	beq.w	8015978 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801568e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8015692:	b29b      	uxth	r3, r3
 8015694:	2f00      	cmp	r7, #0
 8015696:	f000 8117 	beq.w	80158c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801569a:	1aff      	subs	r7, r7, r3
 801569c:	b2bf      	uxth	r7, r7
 801569e:	043b      	lsls	r3, r7, #16
 80156a0:	d502      	bpl.n	80156a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80156a2:	1bf6      	subs	r6, r6, r7
 80156a4:	2700      	movs	r7, #0
 80156a6:	b236      	sxth	r6, r6
 80156a8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80156ac:	a812      	add	r0, sp, #72	; 0x48
 80156ae:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80156b2:	428e      	cmp	r6, r1
 80156b4:	b28b      	uxth	r3, r1
 80156b6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80156ba:	bfbf      	itttt	lt
 80156bc:	18ff      	addlt	r7, r7, r3
 80156be:	1bbe      	sublt	r6, r7, r6
 80156c0:	b2b7      	uxthlt	r7, r6
 80156c2:	460e      	movlt	r6, r1
 80156c4:	8891      	ldrh	r1, [r2, #4]
 80156c6:	440b      	add	r3, r1
 80156c8:	4631      	mov	r1, r6
 80156ca:	b21b      	sxth	r3, r3
 80156cc:	9310      	str	r3, [sp, #64]	; 0x40
 80156ce:	88d3      	ldrh	r3, [r2, #6]
 80156d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156d2:	449a      	add	sl, r3
 80156d4:	fa0f f38a 	sxth.w	r3, sl
 80156d8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80156dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80156de:	4bb6      	ldr	r3, [pc, #728]	; (80159b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80156e0:	f893 b000 	ldrb.w	fp, [r3]
 80156e4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80156e8:	f1dc 0300 	rsbs	r3, ip, #0
 80156ec:	eb43 030c 	adc.w	r3, r3, ip
 80156f0:	930d      	str	r3, [sp, #52]	; 0x34
 80156f2:	464b      	mov	r3, r9
 80156f4:	f7f9 fbae 	bl	800ee54 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80156f8:	4631      	mov	r1, r6
 80156fa:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80156fe:	464b      	mov	r3, r9
 8015700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015702:	a812      	add	r0, sp, #72	; 0x48
 8015704:	f7f9 fbbe 	bl	800ee84 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8015708:	a916      	add	r1, sp, #88	; 0x58
 801570a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801570e:	a815      	add	r0, sp, #84	; 0x54
 8015710:	f7f9 fcda 	bl	800f0c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8015714:	f1b9 0f00 	cmp.w	r9, #0
 8015718:	f040 80d9 	bne.w	80158ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801571c:	f1bb 0f01 	cmp.w	fp, #1
 8015720:	f040 80dd 	bne.w	80158de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8015724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015726:	b153      	cbz	r3, 801573e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8015728:	2508      	movs	r5, #8
 801572a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801572c:	fb95 f3f8 	sdiv	r3, r5, r8
 8015730:	1e5d      	subs	r5, r3, #1
 8015732:	4415      	add	r5, r2
 8015734:	fb95 f5f3 	sdiv	r5, r5, r3
 8015738:	fb15 f503 	smulbb	r5, r5, r3
 801573c:	b2ad      	uxth	r5, r5
 801573e:	b907      	cbnz	r7, 8015742 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8015740:	b16c      	cbz	r4, 801575e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8015742:	fb04 7305 	mla	r3, r4, r5, r7
 8015746:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015748:	ebaa 0a04 	sub.w	sl, sl, r4
 801574c:	fb08 f303 	mul.w	r3, r8, r3
 8015750:	fa1f fa8a 	uxth.w	sl, sl
 8015754:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8015758:	f003 0407 	and.w	r4, r3, #7
 801575c:	9226      	str	r2, [sp, #152]	; 0x98
 801575e:	4649      	mov	r1, r9
 8015760:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015762:	f7ff ff2f 	bl	80155c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8015766:	4649      	mov	r1, r9
 8015768:	4683      	mov	fp, r0
 801576a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801576c:	f7ff ff46 	bl	80155fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8015770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015774:	4681      	mov	r9, r0
 8015776:	1a9b      	subs	r3, r3, r2
 8015778:	459a      	cmp	sl, r3
 801577a:	bfa8      	it	ge
 801577c:	469a      	movge	sl, r3
 801577e:	f1ba 0f00 	cmp.w	sl, #0
 8015782:	f340 80f9 	ble.w	8015978 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8015786:	1bf6      	subs	r6, r6, r7
 8015788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801578a:	1b9e      	subs	r6, r3, r6
 801578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578e:	429e      	cmp	r6, r3
 8015790:	bfd4      	ite	le
 8015792:	ebc7 0706 	rsble	r7, r7, r6
 8015796:	ebc7 0703 	rsbgt	r7, r7, r3
 801579a:	2f00      	cmp	r7, #0
 801579c:	f340 80ec 	ble.w	8015978 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80157a0:	1bed      	subs	r5, r5, r7
 80157a2:	fb08 f305 	mul.w	r3, r8, r5
 80157a6:	930d      	str	r3, [sp, #52]	; 0x34
 80157a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157aa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80157ae:	930e      	str	r3, [sp, #56]	; 0x38
 80157b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80157b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80157b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157ba:	b2db      	uxtb	r3, r3
 80157bc:	9310      	str	r3, [sp, #64]	; 0x40
 80157be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	f040 80de 	bne.w	8015982 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80157c6:	4b7d      	ldr	r3, [pc, #500]	; (80159bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80157c8:	6818      	ldr	r0, [r3, #0]
 80157ca:	6803      	ldr	r3, [r0, #0]
 80157cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157ce:	4798      	blx	r3
 80157d0:	2301      	movs	r3, #1
 80157d2:	4a7b      	ldr	r2, [pc, #492]	; (80159c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80157d4:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80157d8:	fb07 9b1b 	mls	fp, r7, fp, r9
 80157dc:	fa03 f308 	lsl.w	r3, r3, r8
 80157e0:	8811      	ldrh	r1, [r2, #0]
 80157e2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80157e6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80157ea:	3b01      	subs	r3, #1
 80157ec:	fb06 bb07 	mla	fp, r6, r7, fp
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	930a      	str	r3, [sp, #40]	; 0x28
 80157f4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80157f8:	fb01 2303 	mla	r3, r1, r3, r2
 80157fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015800:	18c3      	adds	r3, r0, r3
 8015802:	9309      	str	r3, [sp, #36]	; 0x24
 8015804:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015806:	781a      	ldrb	r2, [r3, #0]
 8015808:	4122      	asrs	r2, r4
 801580a:	b2d2      	uxtb	r2, r2
 801580c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8015810:	f0c0 80d8 	bcc.w	80159c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8015814:	46be      	mov	lr, r7
 8015816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015818:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801581c:	f0c0 80ba 	bcc.w	8015994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8015820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015822:	4013      	ands	r3, r2
 8015824:	d041      	beq.n	80158aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8015826:	20ff      	movs	r0, #255	; 0xff
 8015828:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801582a:	fb90 f5f5 	sdiv	r5, r0, r5
 801582e:	436b      	muls	r3, r5
 8015830:	2bfe      	cmp	r3, #254	; 0xfe
 8015832:	dd03      	ble.n	801583c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8015834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015836:	4285      	cmp	r5, r0
 8015838:	f000 80a5 	beq.w	8015986 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801583c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801583e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015840:	fb15 f303 	smulbb	r3, r5, r3
 8015844:	b29b      	uxth	r3, r3
 8015846:	1c5d      	adds	r5, r3, #1
 8015848:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801584c:	780d      	ldrb	r5, [r1, #0]
 801584e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015852:	fa1f fc83 	uxth.w	ip, r3
 8015856:	43db      	mvns	r3, r3
 8015858:	fb10 f90c 	smulbb	r9, r0, ip
 801585c:	b2db      	uxtb	r3, r3
 801585e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015860:	fb05 9503 	mla	r5, r5, r3, r9
 8015864:	b2ad      	uxth	r5, r5
 8015866:	f105 0901 	add.w	r9, r5, #1
 801586a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801586e:	fb10 f90c 	smulbb	r9, r0, ip
 8015872:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015874:	122d      	asrs	r5, r5, #8
 8015876:	fb10 fc0c 	smulbb	ip, r0, ip
 801587a:	700d      	strb	r5, [r1, #0]
 801587c:	784d      	ldrb	r5, [r1, #1]
 801587e:	fb05 9503 	mla	r5, r5, r3, r9
 8015882:	b2ad      	uxth	r5, r5
 8015884:	f105 0901 	add.w	r9, r5, #1
 8015888:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801588c:	122d      	asrs	r5, r5, #8
 801588e:	704d      	strb	r5, [r1, #1]
 8015890:	788d      	ldrb	r5, [r1, #2]
 8015892:	fb05 cc03 	mla	ip, r5, r3, ip
 8015896:	fa1f fc8c 	uxth.w	ip, ip
 801589a:	f10c 0301 	add.w	r3, ip, #1
 801589e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80158a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80158a6:	f881 c002 	strb.w	ip, [r1, #2]
 80158aa:	4444      	add	r4, r8
 80158ac:	4431      	add	r1, r6
 80158ae:	b2a4      	uxth	r4, r4
 80158b0:	2c07      	cmp	r4, #7
 80158b2:	bf89      	itett	hi
 80158b4:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80158b6:	fa42 f208 	asrls.w	r2, r2, r8
 80158ba:	2400      	movhi	r4, #0
 80158bc:	785a      	ldrbhi	r2, [r3, #1]
 80158be:	bf8a      	itet	hi
 80158c0:	3301      	addhi	r3, #1
 80158c2:	b2d2      	uxtbls	r2, r2
 80158c4:	9326      	strhi	r3, [sp, #152]	; 0x98
 80158c6:	e7a7      	b.n	8015818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 80158c8:	441e      	add	r6, r3
 80158ca:	b236      	sxth	r6, r6
 80158cc:	e6ec      	b.n	80156a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80158ce:	f1b9 0f01 	cmp.w	r9, #1
 80158d2:	f47f af27 	bne.w	8015724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80158d6:	f1bb 0f01 	cmp.w	fp, #1
 80158da:	f47f af23 	bne.w	8015724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80158de:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80159bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80158e2:	f8db 0000 	ldr.w	r0, [fp]
 80158e6:	6803      	ldr	r3, [r0, #0]
 80158e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158ea:	4798      	blx	r3
 80158ec:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80158f0:	465a      	mov	r2, fp
 80158f2:	d006      	beq.n	8015902 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80158f4:	f1b8 0f04 	cmp.w	r8, #4
 80158f8:	d141      	bne.n	801597e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 80158fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158fc:	3300      	adds	r3, #0
 80158fe:	bf18      	it	ne
 8015900:	2301      	movne	r3, #1
 8015902:	0580      	lsls	r0, r0, #22
 8015904:	d567      	bpl.n	80159d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8015906:	f1b8 0f08 	cmp.w	r8, #8
 801590a:	d164      	bne.n	80159d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801590c:	2b00      	cmp	r3, #0
 801590e:	bf0c      	ite	eq
 8015910:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8015914:	f44f 7180 	movne.w	r1, #256	; 0x100
 8015918:	2f00      	cmp	r7, #0
 801591a:	f47f af03 	bne.w	8015724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801591e:	2c00      	cmp	r4, #0
 8015920:	f47f af00 	bne.w	8015724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015926:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015928:	18f3      	adds	r3, r6, r3
 801592a:	4283      	cmp	r3, r0
 801592c:	f73f aefa 	bgt.w	8015724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015930:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015934:	4403      	add	r3, r0
 8015936:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015938:	4283      	cmp	r3, r0
 801593a:	f73f aef3 	bgt.w	8015724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801593e:	f1b8 0f08 	cmp.w	r8, #8
 8015942:	6810      	ldr	r0, [r2, #0]
 8015944:	f04f 0600 	mov.w	r6, #0
 8015948:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801594c:	bf18      	it	ne
 801594e:	3501      	addne	r5, #1
 8015950:	6804      	ldr	r4, [r0, #0]
 8015952:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015956:	bf18      	it	ne
 8015958:	f025 0501 	bicne.w	r5, r5, #1
 801595c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8015960:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015962:	bf18      	it	ne
 8015964:	b2ad      	uxthne	r5, r5
 8015966:	9104      	str	r1, [sp, #16]
 8015968:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801596a:	e9cd 5a00 	strd	r5, sl, [sp]
 801596e:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8015972:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015974:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8015976:	47a0      	blx	r4
 8015978:	b017      	add	sp, #92	; 0x5c
 801597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801597e:	2300      	movs	r3, #0
 8015980:	e7bf      	b.n	8015902 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8015982:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015984:	e724      	b.n	80157d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8015986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015988:	700b      	strb	r3, [r1, #0]
 801598a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801598c:	704b      	strb	r3, [r1, #1]
 801598e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015990:	708b      	strb	r3, [r1, #2]
 8015992:	e78a      	b.n	80158aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8015994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015996:	b153      	cbz	r3, 80159ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8015998:	441c      	add	r4, r3
 801599a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801599c:	b2a4      	uxth	r4, r4
 801599e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80159a2:	f004 0407 	and.w	r4, r4, #7
 80159a6:	781a      	ldrb	r2, [r3, #0]
 80159a8:	9326      	str	r3, [sp, #152]	; 0x98
 80159aa:	4122      	asrs	r2, r4
 80159ac:	b2d2      	uxtb	r2, r2
 80159ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159b0:	445b      	add	r3, fp
 80159b2:	9309      	str	r3, [sp, #36]	; 0x24
 80159b4:	e72a      	b.n	801580c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 80159b6:	bf00      	nop
 80159b8:	24006bb4 	.word	0x24006bb4
 80159bc:	24006bbc 	.word	0x24006bbc
 80159c0:	24006bb6 	.word	0x24006bb6
 80159c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d1d6      	bne.n	8015978 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80159ca:	4b06      	ldr	r3, [pc, #24]	; (80159e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80159cc:	6818      	ldr	r0, [r3, #0]
 80159ce:	6803      	ldr	r3, [r0, #0]
 80159d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159d2:	4798      	blx	r3
 80159d4:	e7d0      	b.n	8015978 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	f43f aea4 	beq.w	8015724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80159dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80159e0:	e79a      	b.n	8015918 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 80159e2:	bf00      	nop
 80159e4:	24006bbc 	.word	0x24006bbc

080159e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80159e8:	b538      	push	{r3, r4, r5, lr}
 80159ea:	4c15      	ldr	r4, [pc, #84]	; (8015a40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80159ec:	4605      	mov	r5, r0
 80159ee:	7823      	ldrb	r3, [r4, #0]
 80159f0:	f3bf 8f5b 	dmb	ish
 80159f4:	07da      	lsls	r2, r3, #31
 80159f6:	d40b      	bmi.n	8015a10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80159f8:	4620      	mov	r0, r4
 80159fa:	f005 fa3b 	bl	801ae74 <__cxa_guard_acquire>
 80159fe:	b138      	cbz	r0, 8015a10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8015a00:	4620      	mov	r0, r4
 8015a02:	f005 fa43 	bl	801ae8c <__cxa_guard_release>
 8015a06:	4a0f      	ldr	r2, [pc, #60]	; (8015a44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8015a08:	490f      	ldr	r1, [pc, #60]	; (8015a48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8015a0a:	4810      	ldr	r0, [pc, #64]	; (8015a4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8015a0c:	f005 fa2b 	bl	801ae66 <__aeabi_atexit>
 8015a10:	4c0f      	ldr	r4, [pc, #60]	; (8015a50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8015a12:	7823      	ldrb	r3, [r4, #0]
 8015a14:	f3bf 8f5b 	dmb	ish
 8015a18:	07db      	lsls	r3, r3, #31
 8015a1a:	d40b      	bmi.n	8015a34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f005 fa29 	bl	801ae74 <__cxa_guard_acquire>
 8015a22:	b138      	cbz	r0, 8015a34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8015a24:	4620      	mov	r0, r4
 8015a26:	f005 fa31 	bl	801ae8c <__cxa_guard_release>
 8015a2a:	4a06      	ldr	r2, [pc, #24]	; (8015a44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8015a2c:	4909      	ldr	r1, [pc, #36]	; (8015a54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8015a2e:	480a      	ldr	r0, [pc, #40]	; (8015a58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8015a30:	f005 fa19 	bl	801ae66 <__aeabi_atexit>
 8015a34:	4b05      	ldr	r3, [pc, #20]	; (8015a4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8015a36:	612b      	str	r3, [r5, #16]
 8015a38:	4b07      	ldr	r3, [pc, #28]	; (8015a58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8015a3a:	616b      	str	r3, [r5, #20]
 8015a3c:	bd38      	pop	{r3, r4, r5, pc}
 8015a3e:	bf00      	nop
 8015a40:	24006c88 	.word	0x24006c88
 8015a44:	24000000 	.word	0x24000000
 8015a48:	08014461 	.word	0x08014461
 8015a4c:	240000a8 	.word	0x240000a8
 8015a50:	24006c8c 	.word	0x24006c8c
 8015a54:	0801445f 	.word	0x0801445f
 8015a58:	240000ac 	.word	0x240000ac

08015a5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8015a5c:	b538      	push	{r3, r4, r5, lr}
 8015a5e:	4c15      	ldr	r4, [pc, #84]	; (8015ab4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8015a60:	4605      	mov	r5, r0
 8015a62:	7823      	ldrb	r3, [r4, #0]
 8015a64:	f3bf 8f5b 	dmb	ish
 8015a68:	07da      	lsls	r2, r3, #31
 8015a6a:	d40b      	bmi.n	8015a84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	f005 fa01 	bl	801ae74 <__cxa_guard_acquire>
 8015a72:	b138      	cbz	r0, 8015a84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015a74:	4620      	mov	r0, r4
 8015a76:	f005 fa09 	bl	801ae8c <__cxa_guard_release>
 8015a7a:	4a0f      	ldr	r2, [pc, #60]	; (8015ab8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8015a7c:	490f      	ldr	r1, [pc, #60]	; (8015abc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8015a7e:	4810      	ldr	r0, [pc, #64]	; (8015ac0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8015a80:	f005 f9f1 	bl	801ae66 <__aeabi_atexit>
 8015a84:	4c0f      	ldr	r4, [pc, #60]	; (8015ac4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8015a86:	7823      	ldrb	r3, [r4, #0]
 8015a88:	f3bf 8f5b 	dmb	ish
 8015a8c:	07db      	lsls	r3, r3, #31
 8015a8e:	d40b      	bmi.n	8015aa8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8015a90:	4620      	mov	r0, r4
 8015a92:	f005 f9ef 	bl	801ae74 <__cxa_guard_acquire>
 8015a96:	b138      	cbz	r0, 8015aa8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8015a98:	4620      	mov	r0, r4
 8015a9a:	f005 f9f7 	bl	801ae8c <__cxa_guard_release>
 8015a9e:	4a06      	ldr	r2, [pc, #24]	; (8015ab8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8015aa0:	4909      	ldr	r1, [pc, #36]	; (8015ac8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8015aa2:	480a      	ldr	r0, [pc, #40]	; (8015acc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8015aa4:	f005 f9df 	bl	801ae66 <__aeabi_atexit>
 8015aa8:	4b05      	ldr	r3, [pc, #20]	; (8015ac0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8015aaa:	60ab      	str	r3, [r5, #8]
 8015aac:	4b07      	ldr	r3, [pc, #28]	; (8015acc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8015aae:	60eb      	str	r3, [r5, #12]
 8015ab0:	bd38      	pop	{r3, r4, r5, pc}
 8015ab2:	bf00      	nop
 8015ab4:	24006c68 	.word	0x24006c68
 8015ab8:	24000000 	.word	0x24000000
 8015abc:	08014465 	.word	0x08014465
 8015ac0:	24000088 	.word	0x24000088
 8015ac4:	24006c6c 	.word	0x24006c6c
 8015ac8:	08014463 	.word	0x08014463
 8015acc:	2400008c 	.word	0x2400008c

08015ad0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8015ad0:	b510      	push	{r4, lr}
 8015ad2:	4604      	mov	r4, r0
 8015ad4:	f7ff ff88 	bl	80159e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8015ad8:	4620      	mov	r0, r4
 8015ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ade:	f7ff bfbd 	b.w	8015a5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08015ae4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8015ae4:	b538      	push	{r3, r4, r5, lr}
 8015ae6:	4c15      	ldr	r4, [pc, #84]	; (8015b3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8015ae8:	4605      	mov	r5, r0
 8015aea:	7823      	ldrb	r3, [r4, #0]
 8015aec:	f3bf 8f5b 	dmb	ish
 8015af0:	07da      	lsls	r2, r3, #31
 8015af2:	d40b      	bmi.n	8015b0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8015af4:	4620      	mov	r0, r4
 8015af6:	f005 f9bd 	bl	801ae74 <__cxa_guard_acquire>
 8015afa:	b138      	cbz	r0, 8015b0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8015afc:	4620      	mov	r0, r4
 8015afe:	f005 f9c5 	bl	801ae8c <__cxa_guard_release>
 8015b02:	4a0f      	ldr	r2, [pc, #60]	; (8015b40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8015b04:	490f      	ldr	r1, [pc, #60]	; (8015b44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8015b06:	4810      	ldr	r0, [pc, #64]	; (8015b48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8015b08:	f005 f9ad 	bl	801ae66 <__aeabi_atexit>
 8015b0c:	4c0f      	ldr	r4, [pc, #60]	; (8015b4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8015b0e:	7823      	ldrb	r3, [r4, #0]
 8015b10:	f3bf 8f5b 	dmb	ish
 8015b14:	07db      	lsls	r3, r3, #31
 8015b16:	d40b      	bmi.n	8015b30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f005 f9ab 	bl	801ae74 <__cxa_guard_acquire>
 8015b1e:	b138      	cbz	r0, 8015b30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8015b20:	4620      	mov	r0, r4
 8015b22:	f005 f9b3 	bl	801ae8c <__cxa_guard_release>
 8015b26:	4a06      	ldr	r2, [pc, #24]	; (8015b40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8015b28:	4909      	ldr	r1, [pc, #36]	; (8015b50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8015b2a:	480a      	ldr	r0, [pc, #40]	; (8015b54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015b2c:	f005 f99b 	bl	801ae66 <__aeabi_atexit>
 8015b30:	4b05      	ldr	r3, [pc, #20]	; (8015b48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8015b32:	622b      	str	r3, [r5, #32]
 8015b34:	4b07      	ldr	r3, [pc, #28]	; (8015b54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015b36:	626b      	str	r3, [r5, #36]	; 0x24
 8015b38:	bd38      	pop	{r3, r4, r5, pc}
 8015b3a:	bf00      	nop
 8015b3c:	24006c90 	.word	0x24006c90
 8015b40:	24000000 	.word	0x24000000
 8015b44:	08014459 	.word	0x08014459
 8015b48:	240000b0 	.word	0x240000b0
 8015b4c:	24006c94 	.word	0x24006c94
 8015b50:	08014457 	.word	0x08014457
 8015b54:	240000b4 	.word	0x240000b4

08015b58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8015b58:	b538      	push	{r3, r4, r5, lr}
 8015b5a:	4c15      	ldr	r4, [pc, #84]	; (8015bb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8015b5c:	4605      	mov	r5, r0
 8015b5e:	7823      	ldrb	r3, [r4, #0]
 8015b60:	f3bf 8f5b 	dmb	ish
 8015b64:	07da      	lsls	r2, r3, #31
 8015b66:	d40b      	bmi.n	8015b80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f005 f983 	bl	801ae74 <__cxa_guard_acquire>
 8015b6e:	b138      	cbz	r0, 8015b80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8015b70:	4620      	mov	r0, r4
 8015b72:	f005 f98b 	bl	801ae8c <__cxa_guard_release>
 8015b76:	4a0f      	ldr	r2, [pc, #60]	; (8015bb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015b78:	490f      	ldr	r1, [pc, #60]	; (8015bb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8015b7a:	4810      	ldr	r0, [pc, #64]	; (8015bbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015b7c:	f005 f973 	bl	801ae66 <__aeabi_atexit>
 8015b80:	4c0f      	ldr	r4, [pc, #60]	; (8015bc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8015b82:	7823      	ldrb	r3, [r4, #0]
 8015b84:	f3bf 8f5b 	dmb	ish
 8015b88:	07db      	lsls	r3, r3, #31
 8015b8a:	d40b      	bmi.n	8015ba4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	f005 f971 	bl	801ae74 <__cxa_guard_acquire>
 8015b92:	b138      	cbz	r0, 8015ba4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015b94:	4620      	mov	r0, r4
 8015b96:	f005 f979 	bl	801ae8c <__cxa_guard_release>
 8015b9a:	4a06      	ldr	r2, [pc, #24]	; (8015bb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015b9c:	4909      	ldr	r1, [pc, #36]	; (8015bc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8015b9e:	480a      	ldr	r0, [pc, #40]	; (8015bc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8015ba0:	f005 f961 	bl	801ae66 <__aeabi_atexit>
 8015ba4:	4b05      	ldr	r3, [pc, #20]	; (8015bbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015ba6:	61ab      	str	r3, [r5, #24]
 8015ba8:	4b07      	ldr	r3, [pc, #28]	; (8015bc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8015baa:	61eb      	str	r3, [r5, #28]
 8015bac:	bd38      	pop	{r3, r4, r5, pc}
 8015bae:	bf00      	nop
 8015bb0:	24006c70 	.word	0x24006c70
 8015bb4:	24000000 	.word	0x24000000
 8015bb8:	0801445d 	.word	0x0801445d
 8015bbc:	24000090 	.word	0x24000090
 8015bc0:	24006c74 	.word	0x24006c74
 8015bc4:	0801445b 	.word	0x0801445b
 8015bc8:	24000094 	.word	0x24000094

08015bcc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8015bcc:	b510      	push	{r4, lr}
 8015bce:	4604      	mov	r4, r0
 8015bd0:	f7ff ff88 	bl	8015ae4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bda:	f7ff bfbd 	b.w	8015b58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08015be0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8015be0:	b538      	push	{r3, r4, r5, lr}
 8015be2:	4c15      	ldr	r4, [pc, #84]	; (8015c38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8015be4:	4605      	mov	r5, r0
 8015be6:	7823      	ldrb	r3, [r4, #0]
 8015be8:	f3bf 8f5b 	dmb	ish
 8015bec:	07da      	lsls	r2, r3, #31
 8015bee:	d40b      	bmi.n	8015c08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8015bf0:	4620      	mov	r0, r4
 8015bf2:	f005 f93f 	bl	801ae74 <__cxa_guard_acquire>
 8015bf6:	b138      	cbz	r0, 8015c08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f005 f947 	bl	801ae8c <__cxa_guard_release>
 8015bfe:	4a0f      	ldr	r2, [pc, #60]	; (8015c3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8015c00:	490f      	ldr	r1, [pc, #60]	; (8015c40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8015c02:	4810      	ldr	r0, [pc, #64]	; (8015c44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8015c04:	f005 f92f 	bl	801ae66 <__aeabi_atexit>
 8015c08:	4c0f      	ldr	r4, [pc, #60]	; (8015c48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8015c0a:	7823      	ldrb	r3, [r4, #0]
 8015c0c:	f3bf 8f5b 	dmb	ish
 8015c10:	07db      	lsls	r3, r3, #31
 8015c12:	d40b      	bmi.n	8015c2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8015c14:	4620      	mov	r0, r4
 8015c16:	f005 f92d 	bl	801ae74 <__cxa_guard_acquire>
 8015c1a:	b138      	cbz	r0, 8015c2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	f005 f935 	bl	801ae8c <__cxa_guard_release>
 8015c22:	4a06      	ldr	r2, [pc, #24]	; (8015c3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8015c24:	4909      	ldr	r1, [pc, #36]	; (8015c4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8015c26:	480a      	ldr	r0, [pc, #40]	; (8015c50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8015c28:	f005 f91d 	bl	801ae66 <__aeabi_atexit>
 8015c2c:	4b05      	ldr	r3, [pc, #20]	; (8015c44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8015c2e:	632b      	str	r3, [r5, #48]	; 0x30
 8015c30:	4b07      	ldr	r3, [pc, #28]	; (8015c50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8015c32:	636b      	str	r3, [r5, #52]	; 0x34
 8015c34:	bd38      	pop	{r3, r4, r5, pc}
 8015c36:	bf00      	nop
 8015c38:	24006c78 	.word	0x24006c78
 8015c3c:	24000000 	.word	0x24000000
 8015c40:	08014451 	.word	0x08014451
 8015c44:	24000098 	.word	0x24000098
 8015c48:	24006c7c 	.word	0x24006c7c
 8015c4c:	0801444f 	.word	0x0801444f
 8015c50:	2400009c 	.word	0x2400009c

08015c54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8015c54:	b538      	push	{r3, r4, r5, lr}
 8015c56:	4c15      	ldr	r4, [pc, #84]	; (8015cac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8015c58:	4605      	mov	r5, r0
 8015c5a:	7823      	ldrb	r3, [r4, #0]
 8015c5c:	f3bf 8f5b 	dmb	ish
 8015c60:	07da      	lsls	r2, r3, #31
 8015c62:	d40b      	bmi.n	8015c7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8015c64:	4620      	mov	r0, r4
 8015c66:	f005 f905 	bl	801ae74 <__cxa_guard_acquire>
 8015c6a:	b138      	cbz	r0, 8015c7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	f005 f90d 	bl	801ae8c <__cxa_guard_release>
 8015c72:	4a0f      	ldr	r2, [pc, #60]	; (8015cb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8015c74:	490f      	ldr	r1, [pc, #60]	; (8015cb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8015c76:	4810      	ldr	r0, [pc, #64]	; (8015cb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8015c78:	f005 f8f5 	bl	801ae66 <__aeabi_atexit>
 8015c7c:	4c0f      	ldr	r4, [pc, #60]	; (8015cbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8015c7e:	7823      	ldrb	r3, [r4, #0]
 8015c80:	f3bf 8f5b 	dmb	ish
 8015c84:	07db      	lsls	r3, r3, #31
 8015c86:	d40b      	bmi.n	8015ca0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f005 f8f3 	bl	801ae74 <__cxa_guard_acquire>
 8015c8e:	b138      	cbz	r0, 8015ca0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8015c90:	4620      	mov	r0, r4
 8015c92:	f005 f8fb 	bl	801ae8c <__cxa_guard_release>
 8015c96:	4a06      	ldr	r2, [pc, #24]	; (8015cb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8015c98:	4909      	ldr	r1, [pc, #36]	; (8015cc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8015c9a:	480a      	ldr	r0, [pc, #40]	; (8015cc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8015c9c:	f005 f8e3 	bl	801ae66 <__aeabi_atexit>
 8015ca0:	4b05      	ldr	r3, [pc, #20]	; (8015cb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8015ca2:	62ab      	str	r3, [r5, #40]	; 0x28
 8015ca4:	4b07      	ldr	r3, [pc, #28]	; (8015cc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8015ca6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8015ca8:	bd38      	pop	{r3, r4, r5, pc}
 8015caa:	bf00      	nop
 8015cac:	24006c50 	.word	0x24006c50
 8015cb0:	24000000 	.word	0x24000000
 8015cb4:	08014455 	.word	0x08014455
 8015cb8:	24000070 	.word	0x24000070
 8015cbc:	24006c54 	.word	0x24006c54
 8015cc0:	08014453 	.word	0x08014453
 8015cc4:	24000074 	.word	0x24000074

08015cc8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8015cc8:	b510      	push	{r4, lr}
 8015cca:	4604      	mov	r4, r0
 8015ccc:	f7ff ff88 	bl	8015be0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cd6:	f7ff bfbd 	b.w	8015c54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08015cdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8015cdc:	b538      	push	{r3, r4, r5, lr}
 8015cde:	4c15      	ldr	r4, [pc, #84]	; (8015d34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8015ce0:	4605      	mov	r5, r0
 8015ce2:	7823      	ldrb	r3, [r4, #0]
 8015ce4:	f3bf 8f5b 	dmb	ish
 8015ce8:	07da      	lsls	r2, r3, #31
 8015cea:	d40b      	bmi.n	8015d04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8015cec:	4620      	mov	r0, r4
 8015cee:	f005 f8c1 	bl	801ae74 <__cxa_guard_acquire>
 8015cf2:	b138      	cbz	r0, 8015d04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8015cf4:	4620      	mov	r0, r4
 8015cf6:	f005 f8c9 	bl	801ae8c <__cxa_guard_release>
 8015cfa:	4a0f      	ldr	r2, [pc, #60]	; (8015d38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8015cfc:	490f      	ldr	r1, [pc, #60]	; (8015d3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8015cfe:	4810      	ldr	r0, [pc, #64]	; (8015d40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8015d00:	f005 f8b1 	bl	801ae66 <__aeabi_atexit>
 8015d04:	4c0f      	ldr	r4, [pc, #60]	; (8015d44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8015d06:	7823      	ldrb	r3, [r4, #0]
 8015d08:	f3bf 8f5b 	dmb	ish
 8015d0c:	07db      	lsls	r3, r3, #31
 8015d0e:	d40b      	bmi.n	8015d28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8015d10:	4620      	mov	r0, r4
 8015d12:	f005 f8af 	bl	801ae74 <__cxa_guard_acquire>
 8015d16:	b138      	cbz	r0, 8015d28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f005 f8b7 	bl	801ae8c <__cxa_guard_release>
 8015d1e:	4a06      	ldr	r2, [pc, #24]	; (8015d38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8015d20:	4909      	ldr	r1, [pc, #36]	; (8015d48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8015d22:	480a      	ldr	r0, [pc, #40]	; (8015d4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8015d24:	f005 f89f 	bl	801ae66 <__aeabi_atexit>
 8015d28:	4b05      	ldr	r3, [pc, #20]	; (8015d40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8015d2a:	642b      	str	r3, [r5, #64]	; 0x40
 8015d2c:	4b07      	ldr	r3, [pc, #28]	; (8015d4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8015d2e:	646b      	str	r3, [r5, #68]	; 0x44
 8015d30:	bd38      	pop	{r3, r4, r5, pc}
 8015d32:	bf00      	nop
 8015d34:	24006c80 	.word	0x24006c80
 8015d38:	24000000 	.word	0x24000000
 8015d3c:	08014449 	.word	0x08014449
 8015d40:	240000a0 	.word	0x240000a0
 8015d44:	24006c84 	.word	0x24006c84
 8015d48:	08014447 	.word	0x08014447
 8015d4c:	240000a4 	.word	0x240000a4

08015d50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8015d50:	b538      	push	{r3, r4, r5, lr}
 8015d52:	4c15      	ldr	r4, [pc, #84]	; (8015da8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8015d54:	4605      	mov	r5, r0
 8015d56:	7823      	ldrb	r3, [r4, #0]
 8015d58:	f3bf 8f5b 	dmb	ish
 8015d5c:	07da      	lsls	r2, r3, #31
 8015d5e:	d40b      	bmi.n	8015d78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015d60:	4620      	mov	r0, r4
 8015d62:	f005 f887 	bl	801ae74 <__cxa_guard_acquire>
 8015d66:	b138      	cbz	r0, 8015d78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015d68:	4620      	mov	r0, r4
 8015d6a:	f005 f88f 	bl	801ae8c <__cxa_guard_release>
 8015d6e:	4a0f      	ldr	r2, [pc, #60]	; (8015dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015d70:	490f      	ldr	r1, [pc, #60]	; (8015db0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8015d72:	4810      	ldr	r0, [pc, #64]	; (8015db4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8015d74:	f005 f877 	bl	801ae66 <__aeabi_atexit>
 8015d78:	4c0f      	ldr	r4, [pc, #60]	; (8015db8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8015d7a:	7823      	ldrb	r3, [r4, #0]
 8015d7c:	f3bf 8f5b 	dmb	ish
 8015d80:	07db      	lsls	r3, r3, #31
 8015d82:	d40b      	bmi.n	8015d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8015d84:	4620      	mov	r0, r4
 8015d86:	f005 f875 	bl	801ae74 <__cxa_guard_acquire>
 8015d8a:	b138      	cbz	r0, 8015d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	f005 f87d 	bl	801ae8c <__cxa_guard_release>
 8015d92:	4a06      	ldr	r2, [pc, #24]	; (8015dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015d94:	4909      	ldr	r1, [pc, #36]	; (8015dbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8015d96:	480a      	ldr	r0, [pc, #40]	; (8015dc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015d98:	f005 f865 	bl	801ae66 <__aeabi_atexit>
 8015d9c:	4b05      	ldr	r3, [pc, #20]	; (8015db4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8015d9e:	63ab      	str	r3, [r5, #56]	; 0x38
 8015da0:	4b07      	ldr	r3, [pc, #28]	; (8015dc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015da2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015da4:	bd38      	pop	{r3, r4, r5, pc}
 8015da6:	bf00      	nop
 8015da8:	24006c60 	.word	0x24006c60
 8015dac:	24000000 	.word	0x24000000
 8015db0:	0801444d 	.word	0x0801444d
 8015db4:	24000080 	.word	0x24000080
 8015db8:	24006c64 	.word	0x24006c64
 8015dbc:	0801444b 	.word	0x0801444b
 8015dc0:	24000084 	.word	0x24000084

08015dc4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8015dc4:	b510      	push	{r4, lr}
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	f7ff ff88 	bl	8015cdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8015dcc:	4620      	mov	r0, r4
 8015dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dd2:	f7ff bfbd 	b.w	8015d50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08015dd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8015dd8:	b538      	push	{r3, r4, r5, lr}
 8015dda:	4c15      	ldr	r4, [pc, #84]	; (8015e30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8015ddc:	4605      	mov	r5, r0
 8015dde:	7823      	ldrb	r3, [r4, #0]
 8015de0:	f3bf 8f5b 	dmb	ish
 8015de4:	07da      	lsls	r2, r3, #31
 8015de6:	d40b      	bmi.n	8015e00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8015de8:	4620      	mov	r0, r4
 8015dea:	f005 f843 	bl	801ae74 <__cxa_guard_acquire>
 8015dee:	b138      	cbz	r0, 8015e00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8015df0:	4620      	mov	r0, r4
 8015df2:	f005 f84b 	bl	801ae8c <__cxa_guard_release>
 8015df6:	4a0f      	ldr	r2, [pc, #60]	; (8015e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8015df8:	490f      	ldr	r1, [pc, #60]	; (8015e38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8015dfa:	4810      	ldr	r0, [pc, #64]	; (8015e3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8015dfc:	f005 f833 	bl	801ae66 <__aeabi_atexit>
 8015e00:	4c0f      	ldr	r4, [pc, #60]	; (8015e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8015e02:	7823      	ldrb	r3, [r4, #0]
 8015e04:	f3bf 8f5b 	dmb	ish
 8015e08:	07db      	lsls	r3, r3, #31
 8015e0a:	d40b      	bmi.n	8015e24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	f005 f831 	bl	801ae74 <__cxa_guard_acquire>
 8015e12:	b138      	cbz	r0, 8015e24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8015e14:	4620      	mov	r0, r4
 8015e16:	f005 f839 	bl	801ae8c <__cxa_guard_release>
 8015e1a:	4a06      	ldr	r2, [pc, #24]	; (8015e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8015e1c:	4909      	ldr	r1, [pc, #36]	; (8015e44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8015e1e:	480a      	ldr	r0, [pc, #40]	; (8015e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8015e20:	f005 f821 	bl	801ae66 <__aeabi_atexit>
 8015e24:	4b05      	ldr	r3, [pc, #20]	; (8015e3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8015e26:	652b      	str	r3, [r5, #80]	; 0x50
 8015e28:	4b07      	ldr	r3, [pc, #28]	; (8015e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8015e2a:	656b      	str	r3, [r5, #84]	; 0x54
 8015e2c:	bd38      	pop	{r3, r4, r5, pc}
 8015e2e:	bf00      	nop
 8015e30:	24006c58 	.word	0x24006c58
 8015e34:	24000000 	.word	0x24000000
 8015e38:	08014441 	.word	0x08014441
 8015e3c:	24000078 	.word	0x24000078
 8015e40:	24006c5c 	.word	0x24006c5c
 8015e44:	0801443f 	.word	0x0801443f
 8015e48:	2400007c 	.word	0x2400007c

08015e4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8015e4c:	b538      	push	{r3, r4, r5, lr}
 8015e4e:	4c15      	ldr	r4, [pc, #84]	; (8015ea4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8015e50:	4605      	mov	r5, r0
 8015e52:	7823      	ldrb	r3, [r4, #0]
 8015e54:	f3bf 8f5b 	dmb	ish
 8015e58:	07da      	lsls	r2, r3, #31
 8015e5a:	d40b      	bmi.n	8015e74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	f005 f809 	bl	801ae74 <__cxa_guard_acquire>
 8015e62:	b138      	cbz	r0, 8015e74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015e64:	4620      	mov	r0, r4
 8015e66:	f005 f811 	bl	801ae8c <__cxa_guard_release>
 8015e6a:	4a0f      	ldr	r2, [pc, #60]	; (8015ea8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015e6c:	490f      	ldr	r1, [pc, #60]	; (8015eac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8015e6e:	4810      	ldr	r0, [pc, #64]	; (8015eb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015e70:	f004 fff9 	bl	801ae66 <__aeabi_atexit>
 8015e74:	4c0f      	ldr	r4, [pc, #60]	; (8015eb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8015e76:	7823      	ldrb	r3, [r4, #0]
 8015e78:	f3bf 8f5b 	dmb	ish
 8015e7c:	07db      	lsls	r3, r3, #31
 8015e7e:	d40b      	bmi.n	8015e98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015e80:	4620      	mov	r0, r4
 8015e82:	f004 fff7 	bl	801ae74 <__cxa_guard_acquire>
 8015e86:	b138      	cbz	r0, 8015e98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015e88:	4620      	mov	r0, r4
 8015e8a:	f004 ffff 	bl	801ae8c <__cxa_guard_release>
 8015e8e:	4a06      	ldr	r2, [pc, #24]	; (8015ea8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015e90:	4909      	ldr	r1, [pc, #36]	; (8015eb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8015e92:	480a      	ldr	r0, [pc, #40]	; (8015ebc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015e94:	f004 ffe7 	bl	801ae66 <__aeabi_atexit>
 8015e98:	4b05      	ldr	r3, [pc, #20]	; (8015eb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015e9a:	64ab      	str	r3, [r5, #72]	; 0x48
 8015e9c:	4b07      	ldr	r3, [pc, #28]	; (8015ebc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015e9e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015ea0:	bd38      	pop	{r3, r4, r5, pc}
 8015ea2:	bf00      	nop
 8015ea4:	24006c48 	.word	0x24006c48
 8015ea8:	24000000 	.word	0x24000000
 8015eac:	08014445 	.word	0x08014445
 8015eb0:	24000068 	.word	0x24000068
 8015eb4:	24006c4c 	.word	0x24006c4c
 8015eb8:	08014443 	.word	0x08014443
 8015ebc:	2400006c 	.word	0x2400006c

08015ec0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8015ec0:	b510      	push	{r4, lr}
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	f7ff ff88 	bl	8015dd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8015ec8:	4620      	mov	r0, r4
 8015eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ece:	f7ff bfbd 	b.w	8015e4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08015ed2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8015ed2:	b510      	push	{r4, lr}
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	f7ff fff3 	bl	8015ec0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8015eda:	4620      	mov	r0, r4
 8015edc:	f7ff ff72 	bl	8015dc4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	f7ff fe73 	bl	8015bcc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8015ee6:	4620      	mov	r0, r4
 8015ee8:	f7ff fdf2 	bl	8015ad0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8015eec:	4620      	mov	r0, r4
 8015eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ef2:	f7ff bee9 	b.w	8015cc8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08015ef8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8015ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015efc:	b087      	sub	sp, #28
 8015efe:	7888      	ldrb	r0, [r1, #2]
 8015f00:	4616      	mov	r6, r2
 8015f02:	9001      	str	r0, [sp, #4]
 8015f04:	7848      	ldrb	r0, [r1, #1]
 8015f06:	9100      	str	r1, [sp, #0]
 8015f08:	9002      	str	r0, [sp, #8]
 8015f0a:	7808      	ldrb	r0, [r1, #0]
 8015f0c:	9901      	ldr	r1, [sp, #4]
 8015f0e:	9003      	str	r0, [sp, #12]
 8015f10:	9802      	ldr	r0, [sp, #8]
 8015f12:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8015f16:	0200      	lsls	r0, r0, #8
 8015f18:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8015f1c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8015f20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8015f24:	9903      	ldr	r1, [sp, #12]
 8015f26:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8015f2a:	4308      	orrs	r0, r1
 8015f2c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015f30:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8015f34:	9005      	str	r0, [sp, #20]
 8015f36:	fb05 ca0e 	mla	sl, r5, lr, ip
 8015f3a:	2d00      	cmp	r5, #0
 8015f3c:	eb06 080a 	add.w	r8, r6, sl
 8015f40:	db4a      	blt.n	8015fd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8015f42:	45a9      	cmp	r9, r5
 8015f44:	dd48      	ble.n	8015fd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8015f46:	f1bc 0f00 	cmp.w	ip, #0
 8015f4a:	db43      	blt.n	8015fd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8015f4c:	45e6      	cmp	lr, ip
 8015f4e:	dd41      	ble.n	8015fd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8015f50:	f816 600a 	ldrb.w	r6, [r6, sl]
 8015f54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015f58:	441e      	add	r6, r3
 8015f5a:	f11c 0001 	adds.w	r0, ip, #1
 8015f5e:	d43e      	bmi.n	8015fde <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8015f60:	4586      	cmp	lr, r0
 8015f62:	dd3c      	ble.n	8015fde <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8015f64:	2a00      	cmp	r2, #0
 8015f66:	d03a      	beq.n	8015fde <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8015f68:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015f6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015f70:	4418      	add	r0, r3
 8015f72:	3501      	adds	r5, #1
 8015f74:	d437      	bmi.n	8015fe6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8015f76:	45a9      	cmp	r9, r5
 8015f78:	dd35      	ble.n	8015fe6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8015f7a:	b3a4      	cbz	r4, 8015fe6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8015f7c:	f1bc 0f00 	cmp.w	ip, #0
 8015f80:	db2f      	blt.n	8015fe2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8015f82:	45e6      	cmp	lr, ip
 8015f84:	dd2d      	ble.n	8015fe2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8015f86:	f818 500e 	ldrb.w	r5, [r8, lr]
 8015f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f8e:	441d      	add	r5, r3
 8015f90:	f11c 0c01 	adds.w	ip, ip, #1
 8015f94:	d42a      	bmi.n	8015fec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8015f96:	45e6      	cmp	lr, ip
 8015f98:	dd28      	ble.n	8015fec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8015f9a:	b33a      	cbz	r2, 8015fec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8015f9c:	44c6      	add	lr, r8
 8015f9e:	f89e c001 	ldrb.w	ip, [lr, #1]
 8015fa2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015fa6:	4463      	add	r3, ip
 8015fa8:	ea6f 0c07 	mvn.w	ip, r7
 8015fac:	2a0f      	cmp	r2, #15
 8015fae:	f896 a000 	ldrb.w	sl, [r6]
 8015fb2:	fa5f fc8c 	uxtb.w	ip, ip
 8015fb6:	f890 b000 	ldrb.w	fp, [r0]
 8015fba:	f895 9000 	ldrb.w	r9, [r5]
 8015fbe:	7819      	ldrb	r1, [r3, #0]
 8015fc0:	d801      	bhi.n	8015fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8015fc2:	2c0f      	cmp	r4, #15
 8015fc4:	d914      	bls.n	8015ff0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8015fc6:	4b40      	ldr	r3, [pc, #256]	; (80160c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8015fc8:	f240 1157 	movw	r1, #343	; 0x157
 8015fcc:	4a3f      	ldr	r2, [pc, #252]	; (80160cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8015fce:	4840      	ldr	r0, [pc, #256]	; (80160d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8015fd0:	f005 f864 	bl	801b09c <__assert_func>
 8015fd4:	ae05      	add	r6, sp, #20
 8015fd6:	e7c0      	b.n	8015f5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8015fd8:	a805      	add	r0, sp, #20
 8015fda:	4606      	mov	r6, r0
 8015fdc:	e7c9      	b.n	8015f72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8015fde:	a805      	add	r0, sp, #20
 8015fe0:	e7c7      	b.n	8015f72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8015fe2:	ad05      	add	r5, sp, #20
 8015fe4:	e7d4      	b.n	8015f90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8015fe6:	ab05      	add	r3, sp, #20
 8015fe8:	461d      	mov	r5, r3
 8015fea:	e7dd      	b.n	8015fa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8015fec:	ab05      	add	r3, sp, #20
 8015fee:	e7db      	b.n	8015fa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8015ff0:	b292      	uxth	r2, r2
 8015ff2:	b2a4      	uxth	r4, r4
 8015ff4:	fa1f fc8c 	uxth.w	ip, ip
 8015ff8:	fb02 f804 	mul.w	r8, r2, r4
 8015ffc:	0112      	lsls	r2, r2, #4
 8015ffe:	b2bf      	uxth	r7, r7
 8016000:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8016004:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8016008:	eba2 0208 	sub.w	r2, r2, r8
 801600c:	b2a4      	uxth	r4, r4
 801600e:	b292      	uxth	r2, r2
 8016010:	ebae 0e04 	sub.w	lr, lr, r4
 8016014:	fb02 fb0b 	mul.w	fp, r2, fp
 8016018:	fa1f fe8e 	uxth.w	lr, lr
 801601c:	fb0e ba0a 	mla	sl, lr, sl, fp
 8016020:	fb04 aa09 	mla	sl, r4, r9, sl
 8016024:	fb08 aa01 	mla	sl, r8, r1, sl
 8016028:	9903      	ldr	r1, [sp, #12]
 801602a:	fb11 f90c 	smulbb	r9, r1, ip
 801602e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8016032:	9900      	ldr	r1, [sp, #0]
 8016034:	fb0a 9a07 	mla	sl, sl, r7, r9
 8016038:	fa1f fa8a 	uxth.w	sl, sl
 801603c:	f10a 0901 	add.w	r9, sl, #1
 8016040:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8016044:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016048:	f881 a000 	strb.w	sl, [r1]
 801604c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016050:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016054:	fb02 fa0a 	mul.w	sl, r2, sl
 8016058:	9902      	ldr	r1, [sp, #8]
 801605a:	fb0e aa09 	mla	sl, lr, r9, sl
 801605e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8016062:	fb04 aa09 	mla	sl, r4, r9, sl
 8016066:	f893 9001 	ldrb.w	r9, [r3, #1]
 801606a:	fb08 a909 	mla	r9, r8, r9, sl
 801606e:	fb11 fa0c 	smulbb	sl, r1, ip
 8016072:	9900      	ldr	r1, [sp, #0]
 8016074:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016078:	fb09 a907 	mla	r9, r9, r7, sl
 801607c:	fa1f f989 	uxth.w	r9, r9
 8016080:	f109 0a01 	add.w	sl, r9, #1
 8016084:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016088:	ea4f 2929 	mov.w	r9, r9, asr #8
 801608c:	f881 9001 	strb.w	r9, [r1, #1]
 8016090:	7880      	ldrb	r0, [r0, #2]
 8016092:	78b6      	ldrb	r6, [r6, #2]
 8016094:	4342      	muls	r2, r0
 8016096:	78a8      	ldrb	r0, [r5, #2]
 8016098:	789b      	ldrb	r3, [r3, #2]
 801609a:	fb0e 2206 	mla	r2, lr, r6, r2
 801609e:	fb04 2400 	mla	r4, r4, r0, r2
 80160a2:	fb08 4803 	mla	r8, r8, r3, r4
 80160a6:	9b01      	ldr	r3, [sp, #4]
 80160a8:	fb13 fc0c 	smulbb	ip, r3, ip
 80160ac:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80160b0:	fb08 c707 	mla	r7, r8, r7, ip
 80160b4:	b2bf      	uxth	r7, r7
 80160b6:	f107 0c01 	add.w	ip, r7, #1
 80160ba:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80160be:	123f      	asrs	r7, r7, #8
 80160c0:	708f      	strb	r7, [r1, #2]
 80160c2:	b007      	add	sp, #28
 80160c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c8:	0801f137 	.word	0x0801f137
 80160cc:	0801f5ee 	.word	0x0801f5ee
 80160d0:	0801f1bf 	.word	0x0801f1bf

080160d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80160d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d8:	ed2d 8b08 	vpush	{d8-d11}
 80160dc:	b093      	sub	sp, #76	; 0x4c
 80160de:	eeb0 aa40 	vmov.f32	s20, s0
 80160e2:	eef0 9a60 	vmov.f32	s19, s1
 80160e6:	9210      	str	r2, [sp, #64]	; 0x40
 80160e8:	eeb0 9a41 	vmov.f32	s18, s2
 80160ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80160ee:	eeb0 8a62 	vmov.f32	s16, s5
 80160f2:	9309      	str	r3, [sp, #36]	; 0x24
 80160f4:	eef0 8a43 	vmov.f32	s17, s6
 80160f8:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 80160fc:	eef0 ba44 	vmov.f32	s23, s8
 8016100:	9011      	str	r0, [sp, #68]	; 0x44
 8016102:	eeb0 ba64 	vmov.f32	s22, s9
 8016106:	930e      	str	r3, [sp, #56]	; 0x38
 8016108:	eef0 aa45 	vmov.f32	s21, s10
 801610c:	6850      	ldr	r0, [r2, #4]
 801610e:	910d      	str	r1, [sp, #52]	; 0x34
 8016110:	6812      	ldr	r2, [r2, #0]
 8016112:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8016116:	fb00 1303 	mla	r3, r0, r3, r1
 801611a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801611e:	18d3      	adds	r3, r2, r3
 8016120:	930a      	str	r3, [sp, #40]	; 0x28
 8016122:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	930c      	str	r3, [sp, #48]	; 0x30
 8016128:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801612a:	685c      	ldr	r4, [r3, #4]
 801612c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801612e:	3404      	adds	r4, #4
 8016130:	43db      	mvns	r3, r3
 8016132:	b2db      	uxtb	r3, r3
 8016134:	930b      	str	r3, [sp, #44]	; 0x2c
 8016136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016138:	2b00      	cmp	r3, #0
 801613a:	dc03      	bgt.n	8016144 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801613c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801613e:	2b00      	cmp	r3, #0
 8016140:	f340 8250 	ble.w	80165e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8016144:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016146:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801614a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801614e:	1e48      	subs	r0, r1, #1
 8016150:	1e55      	subs	r5, r2, #1
 8016152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016154:	2b00      	cmp	r3, #0
 8016156:	f340 80ee 	ble.w	8016336 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801615a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801615c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801615e:	1436      	asrs	r6, r6, #16
 8016160:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016164:	d406      	bmi.n	8016174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016166:	4286      	cmp	r6, r0
 8016168:	da04      	bge.n	8016174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801616a:	2b00      	cmp	r3, #0
 801616c:	db02      	blt.n	8016174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801616e:	42ab      	cmp	r3, r5
 8016170:	f2c0 80e2 	blt.w	8016338 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8016174:	3601      	adds	r6, #1
 8016176:	f100 80cf 	bmi.w	8016318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801617a:	42b1      	cmp	r1, r6
 801617c:	f2c0 80cc 	blt.w	8016318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016180:	3301      	adds	r3, #1
 8016182:	f100 80c9 	bmi.w	8016318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016186:	429a      	cmp	r2, r3
 8016188:	f2c0 80c6 	blt.w	8016318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801618c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8016190:	f1bb 0f00 	cmp.w	fp, #0
 8016194:	f340 80f1 	ble.w	801637a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801619a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801619c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801619e:	141d      	asrs	r5, r3, #16
 80161a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80161a2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80161a6:	68c7      	ldr	r7, [r0, #12]
 80161a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80161aa:	1418      	asrs	r0, r3, #16
 80161ac:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80161b0:	6892      	ldr	r2, [r2, #8]
 80161b2:	f100 8137 	bmi.w	8016424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80161b6:	f102 3cff 	add.w	ip, r2, #4294967295
 80161ba:	4560      	cmp	r0, ip
 80161bc:	f280 8132 	bge.w	8016424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80161c0:	2d00      	cmp	r5, #0
 80161c2:	f2c0 812f 	blt.w	8016424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80161c6:	f107 3cff 	add.w	ip, r7, #4294967295
 80161ca:	4565      	cmp	r5, ip
 80161cc:	f280 812a 	bge.w	8016424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80161d0:	b212      	sxth	r2, r2
 80161d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80161d4:	fb05 0002 	mla	r0, r5, r2, r0
 80161d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161da:	f817 c000 	ldrb.w	ip, [r7, r0]
 80161de:	4405      	add	r5, r0
 80161e0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80161e4:	eb04 0e0c 	add.w	lr, r4, ip
 80161e8:	f1b8 0f00 	cmp.w	r8, #0
 80161ec:	f000 810c 	beq.w	8016408 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80161f0:	786f      	ldrb	r7, [r5, #1]
 80161f2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80161f6:	4427      	add	r7, r4
 80161f8:	2900      	cmp	r1, #0
 80161fa:	f000 810d 	beq.w	8016418 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80161fe:	18a8      	adds	r0, r5, r2
 8016200:	5caa      	ldrb	r2, [r5, r2]
 8016202:	7840      	ldrb	r0, [r0, #1]
 8016204:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016208:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801620c:	4422      	add	r2, r4
 801620e:	4420      	add	r0, r4
 8016210:	fa1f f388 	uxth.w	r3, r8
 8016214:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8016218:	b289      	uxth	r1, r1
 801621a:	f897 c000 	ldrb.w	ip, [r7]
 801621e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016222:	fb03 f901 	mul.w	r9, r3, r1
 8016226:	011b      	lsls	r3, r3, #4
 8016228:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801622c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8016230:	eba3 0309 	sub.w	r3, r3, r9
 8016234:	b289      	uxth	r1, r1
 8016236:	b29b      	uxth	r3, r3
 8016238:	eba8 0801 	sub.w	r8, r8, r1
 801623c:	fb03 fc0c 	mul.w	ip, r3, ip
 8016240:	fa1f f888 	uxth.w	r8, r8
 8016244:	930f      	str	r3, [sp, #60]	; 0x3c
 8016246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016248:	fb08 cc0a 	mla	ip, r8, sl, ip
 801624c:	f892 a000 	ldrb.w	sl, [r2]
 8016250:	fb01 cc0a 	mla	ip, r1, sl, ip
 8016254:	f890 a000 	ldrb.w	sl, [r0]
 8016258:	fb09 cc0a 	mla	ip, r9, sl, ip
 801625c:	f896 a000 	ldrb.w	sl, [r6]
 8016260:	fb1a fa03 	smulbb	sl, sl, r3
 8016264:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801626a:	fb0c ac05 	mla	ip, ip, r5, sl
 801626e:	fa1f fc8c 	uxth.w	ip, ip
 8016272:	f10c 0a01 	add.w	sl, ip, #1
 8016276:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801627a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801627e:	f886 a000 	strb.w	sl, [r6]
 8016282:	f897 c001 	ldrb.w	ip, [r7, #1]
 8016286:	f89e a001 	ldrb.w	sl, [lr, #1]
 801628a:	fb03 fc0c 	mul.w	ip, r3, ip
 801628e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016290:	fb08 cc0a 	mla	ip, r8, sl, ip
 8016294:	f892 a001 	ldrb.w	sl, [r2, #1]
 8016298:	fb01 cc0a 	mla	ip, r1, sl, ip
 801629c:	f890 a001 	ldrb.w	sl, [r0, #1]
 80162a0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80162a4:	f896 a001 	ldrb.w	sl, [r6, #1]
 80162a8:	fb1a fa03 	smulbb	sl, sl, r3
 80162ac:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80162b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162b2:	fb0c ac05 	mla	ip, ip, r5, sl
 80162b6:	fa1f fc8c 	uxth.w	ip, ip
 80162ba:	f10c 0a01 	add.w	sl, ip, #1
 80162be:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80162c2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80162c6:	f886 c001 	strb.w	ip, [r6, #1]
 80162ca:	78bf      	ldrb	r7, [r7, #2]
 80162cc:	f89e c002 	ldrb.w	ip, [lr, #2]
 80162d0:	437b      	muls	r3, r7
 80162d2:	fb08 330c 	mla	r3, r8, ip, r3
 80162d6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80162da:	7882      	ldrb	r2, [r0, #2]
 80162dc:	fb01 310c 	mla	r1, r1, ip, r3
 80162e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162e2:	fb09 1902 	mla	r9, r9, r2, r1
 80162e6:	78b1      	ldrb	r1, [r6, #2]
 80162e8:	fb11 f103 	smulbb	r1, r1, r3
 80162ec:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80162f0:	fb09 1505 	mla	r5, r9, r5, r1
 80162f4:	b2ad      	uxth	r5, r5
 80162f6:	1c6b      	adds	r3, r5, #1
 80162f8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80162fc:	122d      	asrs	r5, r5, #8
 80162fe:	70b5      	strb	r5, [r6, #2]
 8016300:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016302:	3603      	adds	r6, #3
 8016304:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016306:	f10b 3bff 	add.w	fp, fp, #4294967295
 801630a:	4413      	add	r3, r2
 801630c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801630e:	9325      	str	r3, [sp, #148]	; 0x94
 8016310:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016312:	4413      	add	r3, r2
 8016314:	9326      	str	r3, [sp, #152]	; 0x98
 8016316:	e73b      	b.n	8016190 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8016318:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801631a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801631c:	4433      	add	r3, r6
 801631e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8016320:	9325      	str	r3, [sp, #148]	; 0x94
 8016322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016324:	4433      	add	r3, r6
 8016326:	9326      	str	r3, [sp, #152]	; 0x98
 8016328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801632a:	3b01      	subs	r3, #1
 801632c:	9309      	str	r3, [sp, #36]	; 0x24
 801632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016330:	3303      	adds	r3, #3
 8016332:	930a      	str	r3, [sp, #40]	; 0x28
 8016334:	e70d      	b.n	8016152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016336:	d028      	beq.n	801638a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8016338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801633a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801633c:	3b01      	subs	r3, #1
 801633e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8016340:	fb00 5003 	mla	r0, r0, r3, r5
 8016344:	1400      	asrs	r0, r0, #16
 8016346:	f53f af21 	bmi.w	801618c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801634a:	3901      	subs	r1, #1
 801634c:	4288      	cmp	r0, r1
 801634e:	f6bf af1d 	bge.w	801618c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016352:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016354:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016356:	fb01 0303 	mla	r3, r1, r3, r0
 801635a:	141b      	asrs	r3, r3, #16
 801635c:	f53f af16 	bmi.w	801618c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016360:	3a01      	subs	r2, #1
 8016362:	4293      	cmp	r3, r2
 8016364:	f6bf af12 	bge.w	801618c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801636a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801636e:	1cdf      	adds	r7, r3, #3
 8016370:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8016374:	f1b9 0f00 	cmp.w	r9, #0
 8016378:	dc73      	bgt.n	8016462 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801637a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801637c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801637e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016382:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016386:	441a      	add	r2, r3
 8016388:	920a      	str	r2, [sp, #40]	; 0x28
 801638a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801638c:	2b00      	cmp	r3, #0
 801638e:	f340 8129 	ble.w	80165e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8016392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016396:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016398:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801639c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80163a0:	eef0 6a48 	vmov.f32	s13, s16
 80163a4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80163a8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80163ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80163b0:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80163b4:	eef0 6a68 	vmov.f32	s13, s17
 80163b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80163bc:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80163c0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80163c4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80163c8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80163cc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80163d0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80163d4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80163d8:	ee18 2a10 	vmov	r2, s16
 80163dc:	eeb0 8a47 	vmov.f32	s16, s14
 80163e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80163e4:	ee18 2a90 	vmov	r2, s17
 80163e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80163ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80163ec:	eef0 8a67 	vmov.f32	s17, s15
 80163f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80163f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80163f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163fa:	3b01      	subs	r3, #1
 80163fc:	930d      	str	r3, [sp, #52]	; 0x34
 80163fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016400:	bf08      	it	eq
 8016402:	4613      	moveq	r3, r2
 8016404:	9309      	str	r3, [sp, #36]	; 0x24
 8016406:	e696      	b.n	8016136 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016408:	b149      	cbz	r1, 801641e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801640a:	5caa      	ldrb	r2, [r5, r2]
 801640c:	4670      	mov	r0, lr
 801640e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016412:	4422      	add	r2, r4
 8016414:	4677      	mov	r7, lr
 8016416:	e6fb      	b.n	8016210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8016418:	4670      	mov	r0, lr
 801641a:	4672      	mov	r2, lr
 801641c:	e6f8      	b.n	8016210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801641e:	4670      	mov	r0, lr
 8016420:	4672      	mov	r2, lr
 8016422:	e7f7      	b.n	8016414 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8016424:	f110 0c01 	adds.w	ip, r0, #1
 8016428:	f53f af6a 	bmi.w	8016300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801642c:	4562      	cmp	r2, ip
 801642e:	f6ff af67 	blt.w	8016300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016432:	f115 0c01 	adds.w	ip, r5, #1
 8016436:	f53f af63 	bmi.w	8016300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801643a:	4567      	cmp	r7, ip
 801643c:	f6ff af60 	blt.w	8016300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016442:	b23f      	sxth	r7, r7
 8016444:	b212      	sxth	r2, r2
 8016446:	9002      	str	r0, [sp, #8]
 8016448:	9701      	str	r7, [sp, #4]
 801644a:	9200      	str	r2, [sp, #0]
 801644c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801644e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016450:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8016454:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8016458:	4623      	mov	r3, r4
 801645a:	4631      	mov	r1, r6
 801645c:	f7ff fd4c 	bl	8015ef8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8016460:	e74e      	b.n	8016300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016462:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016464:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016466:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801646a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801646c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801646e:	1400      	asrs	r0, r0, #16
 8016470:	142d      	asrs	r5, r5, #16
 8016472:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016474:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8016478:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801647c:	fb02 5000 	mla	r0, r2, r0, r5
 8016480:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016482:	f815 e000 	ldrb.w	lr, [r5, r0]
 8016486:	eb05 0c00 	add.w	ip, r5, r0
 801648a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801648e:	eb04 060e 	add.w	r6, r4, lr
 8016492:	2b00      	cmp	r3, #0
 8016494:	f000 8097 	beq.w	80165c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8016498:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801649c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164a0:	4425      	add	r5, r4
 80164a2:	2900      	cmp	r1, #0
 80164a4:	f000 8098 	beq.w	80165d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80164a8:	eb0c 0002 	add.w	r0, ip, r2
 80164ac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80164b0:	7840      	ldrb	r0, [r0, #1]
 80164b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80164b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80164ba:	4422      	add	r2, r4
 80164bc:	4420      	add	r0, r4
 80164be:	b29b      	uxth	r3, r3
 80164c0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80164c4:	b289      	uxth	r1, r1
 80164c6:	f895 e000 	ldrb.w	lr, [r5]
 80164ca:	3703      	adds	r7, #3
 80164cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80164d0:	fb03 f801 	mul.w	r8, r3, r1
 80164d4:	011b      	lsls	r3, r3, #4
 80164d6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80164da:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80164de:	eba3 0308 	sub.w	r3, r3, r8
 80164e2:	b289      	uxth	r1, r1
 80164e4:	b29b      	uxth	r3, r3
 80164e6:	ebac 0c01 	sub.w	ip, ip, r1
 80164ea:	fb03 fe0e 	mul.w	lr, r3, lr
 80164ee:	fa1f fc8c 	uxth.w	ip, ip
 80164f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80164f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164f6:	fb0c ee0b 	mla	lr, ip, fp, lr
 80164fa:	f892 b000 	ldrb.w	fp, [r2]
 80164fe:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016502:	f890 b000 	ldrb.w	fp, [r0]
 8016506:	fb08 ee0b 	mla	lr, r8, fp, lr
 801650a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801650e:	fb1b fb03 	smulbb	fp, fp, r3
 8016512:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8016516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016518:	fb0e be0a 	mla	lr, lr, sl, fp
 801651c:	fa1f fe8e 	uxth.w	lr, lr
 8016520:	f10e 0b01 	add.w	fp, lr, #1
 8016524:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8016528:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801652c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8016530:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016534:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016538:	fb03 fe0e 	mul.w	lr, r3, lr
 801653c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801653e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016542:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016546:	fb01 ee0b 	mla	lr, r1, fp, lr
 801654a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801654e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8016552:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8016556:	fb1b fb03 	smulbb	fp, fp, r3
 801655a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801655e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016560:	fb0e be0a 	mla	lr, lr, sl, fp
 8016564:	fa1f fe8e 	uxth.w	lr, lr
 8016568:	f10e 0b01 	add.w	fp, lr, #1
 801656c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8016570:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016574:	f807 ec05 	strb.w	lr, [r7, #-5]
 8016578:	78ad      	ldrb	r5, [r5, #2]
 801657a:	78b6      	ldrb	r6, [r6, #2]
 801657c:	436b      	muls	r3, r5
 801657e:	7895      	ldrb	r5, [r2, #2]
 8016580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016582:	fb0c 3306 	mla	r3, ip, r6, r3
 8016586:	fb01 3305 	mla	r3, r1, r5, r3
 801658a:	7885      	ldrb	r5, [r0, #2]
 801658c:	fb08 3805 	mla	r8, r8, r5, r3
 8016590:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8016594:	fb13 f302 	smulbb	r3, r3, r2
 8016598:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801659c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801659e:	fb08 380a 	mla	r8, r8, sl, r3
 80165a2:	fa1f f888 	uxth.w	r8, r8
 80165a6:	f108 0301 	add.w	r3, r8, #1
 80165aa:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80165ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80165b0:	4413      	add	r3, r2
 80165b2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80165b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80165b8:	9325      	str	r3, [sp, #148]	; 0x94
 80165ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80165bc:	f807 8c04 	strb.w	r8, [r7, #-4]
 80165c0:	4413      	add	r3, r2
 80165c2:	9326      	str	r3, [sp, #152]	; 0x98
 80165c4:	e6d6      	b.n	8016374 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80165c6:	b151      	cbz	r1, 80165de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80165c8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80165cc:	4630      	mov	r0, r6
 80165ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80165d2:	4422      	add	r2, r4
 80165d4:	4635      	mov	r5, r6
 80165d6:	e772      	b.n	80164be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80165d8:	4630      	mov	r0, r6
 80165da:	4632      	mov	r2, r6
 80165dc:	e76f      	b.n	80164be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80165de:	4630      	mov	r0, r6
 80165e0:	4632      	mov	r2, r6
 80165e2:	e7f7      	b.n	80165d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80165e4:	b013      	add	sp, #76	; 0x4c
 80165e6:	ecbd 8b08 	vpop	{d8-d11}
 80165ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080165f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80165f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165f4:	784d      	ldrb	r5, [r1, #1]
 80165f6:	f891 9002 	ldrb.w	r9, [r1, #2]
 80165fa:	022d      	lsls	r5, r5, #8
 80165fc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8016600:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8016604:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8016608:	f891 9000 	ldrb.w	r9, [r1]
 801660c:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8016610:	ea45 0509 	orr.w	r5, r5, r9
 8016614:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8016618:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801661c:	9501      	str	r5, [sp, #4]
 801661e:	fb06 470c 	mla	r7, r6, ip, r4
 8016622:	2e00      	cmp	r6, #0
 8016624:	eb02 0e07 	add.w	lr, r2, r7
 8016628:	db46      	blt.n	80166b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801662a:	45b0      	cmp	r8, r6
 801662c:	dd44      	ble.n	80166b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801662e:	2c00      	cmp	r4, #0
 8016630:	db40      	blt.n	80166b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8016632:	45a4      	cmp	ip, r4
 8016634:	dd3e      	ble.n	80166b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8016636:	5dd7      	ldrb	r7, [r2, r7]
 8016638:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801663c:	441f      	add	r7, r3
 801663e:	1c62      	adds	r2, r4, #1
 8016640:	d43d      	bmi.n	80166be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8016642:	4594      	cmp	ip, r2
 8016644:	dd3b      	ble.n	80166be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8016646:	f1ba 0f00 	cmp.w	sl, #0
 801664a:	d038      	beq.n	80166be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801664c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8016650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016654:	441d      	add	r5, r3
 8016656:	3601      	adds	r6, #1
 8016658:	d435      	bmi.n	80166c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801665a:	45b0      	cmp	r8, r6
 801665c:	dd33      	ble.n	80166c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801665e:	b390      	cbz	r0, 80166c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8016660:	2c00      	cmp	r4, #0
 8016662:	db2e      	blt.n	80166c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8016664:	45a4      	cmp	ip, r4
 8016666:	dd2c      	ble.n	80166c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8016668:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801666c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016670:	441e      	add	r6, r3
 8016672:	1c62      	adds	r2, r4, #1
 8016674:	d42a      	bmi.n	80166cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8016676:	4594      	cmp	ip, r2
 8016678:	dd28      	ble.n	80166cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801667a:	f1ba 0f00 	cmp.w	sl, #0
 801667e:	d025      	beq.n	80166cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8016680:	44f4      	add	ip, lr
 8016682:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8016686:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801668a:	4413      	add	r3, r2
 801668c:	f1ba 0f0f 	cmp.w	sl, #15
 8016690:	f897 8000 	ldrb.w	r8, [r7]
 8016694:	f895 9000 	ldrb.w	r9, [r5]
 8016698:	f896 e000 	ldrb.w	lr, [r6]
 801669c:	f893 c000 	ldrb.w	ip, [r3]
 80166a0:	d801      	bhi.n	80166a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80166a2:	280f      	cmp	r0, #15
 80166a4:	d914      	bls.n	80166d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 80166a6:	4b29      	ldr	r3, [pc, #164]	; (801674c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 80166a8:	f240 1157 	movw	r1, #343	; 0x157
 80166ac:	4a28      	ldr	r2, [pc, #160]	; (8016750 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80166ae:	4829      	ldr	r0, [pc, #164]	; (8016754 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80166b0:	f004 fcf4 	bl	801b09c <__assert_func>
 80166b4:	af01      	add	r7, sp, #4
 80166b6:	e7c2      	b.n	801663e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80166b8:	ad01      	add	r5, sp, #4
 80166ba:	462f      	mov	r7, r5
 80166bc:	e7cb      	b.n	8016656 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80166be:	ad01      	add	r5, sp, #4
 80166c0:	e7c9      	b.n	8016656 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80166c2:	ae01      	add	r6, sp, #4
 80166c4:	e7d5      	b.n	8016672 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80166c6:	ab01      	add	r3, sp, #4
 80166c8:	461e      	mov	r6, r3
 80166ca:	e7df      	b.n	801668c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80166cc:	ab01      	add	r3, sp, #4
 80166ce:	e7dd      	b.n	801668c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80166d0:	fa1f f48a 	uxth.w	r4, sl
 80166d4:	b280      	uxth	r0, r0
 80166d6:	fb04 fa00 	mul.w	sl, r4, r0
 80166da:	0124      	lsls	r4, r4, #4
 80166dc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80166e0:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80166e4:	b282      	uxth	r2, r0
 80166e6:	eba4 000a 	sub.w	r0, r4, sl
 80166ea:	ebab 0b02 	sub.w	fp, fp, r2
 80166ee:	b280      	uxth	r0, r0
 80166f0:	fa1f fb8b 	uxth.w	fp, fp
 80166f4:	fb00 f909 	mul.w	r9, r0, r9
 80166f8:	fb0b 9808 	mla	r8, fp, r8, r9
 80166fc:	fb02 8e0e 	mla	lr, r2, lr, r8
 8016700:	fb0a ec0c 	mla	ip, sl, ip, lr
 8016704:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016708:	f881 c000 	strb.w	ip, [r1]
 801670c:	786c      	ldrb	r4, [r5, #1]
 801670e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8016712:	4344      	muls	r4, r0
 8016714:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8016718:	7874      	ldrb	r4, [r6, #1]
 801671a:	fb02 cc04 	mla	ip, r2, r4, ip
 801671e:	785c      	ldrb	r4, [r3, #1]
 8016720:	fb0a c404 	mla	r4, sl, r4, ip
 8016724:	1224      	asrs	r4, r4, #8
 8016726:	704c      	strb	r4, [r1, #1]
 8016728:	78ad      	ldrb	r5, [r5, #2]
 801672a:	78bc      	ldrb	r4, [r7, #2]
 801672c:	4368      	muls	r0, r5
 801672e:	fb0b 0b04 	mla	fp, fp, r4, r0
 8016732:	78b0      	ldrb	r0, [r6, #2]
 8016734:	fb02 b000 	mla	r0, r2, r0, fp
 8016738:	789a      	ldrb	r2, [r3, #2]
 801673a:	fb0a 0a02 	mla	sl, sl, r2, r0
 801673e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016742:	f881 a002 	strb.w	sl, [r1, #2]
 8016746:	b003      	add	sp, #12
 8016748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674c:	0801f137 	.word	0x0801f137
 8016750:	0801f5ee 	.word	0x0801f5ee
 8016754:	0801f1bf 	.word	0x0801f1bf

08016758 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675c:	ed2d 8b0a 	vpush	{d8-d12}
 8016760:	b08d      	sub	sp, #52	; 0x34
 8016762:	eeb0 aa40 	vmov.f32	s20, s0
 8016766:	eef0 9a60 	vmov.f32	s19, s1
 801676a:	900b      	str	r0, [sp, #44]	; 0x2c
 801676c:	eeb0 9a41 	vmov.f32	s18, s2
 8016770:	9306      	str	r3, [sp, #24]
 8016772:	eeb0 8a62 	vmov.f32	s16, s5
 8016776:	eef0 8a43 	vmov.f32	s17, s6
 801677a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801677c:	eeb0 ca44 	vmov.f32	s24, s8
 8016780:	eef0 ba64 	vmov.f32	s23, s9
 8016784:	eeb0 ba45 	vmov.f32	s22, s10
 8016788:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801678c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8016790:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016792:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8016796:	6850      	ldr	r0, [r2, #4]
 8016798:	6812      	ldr	r2, [r2, #0]
 801679a:	fb00 1303 	mla	r3, r0, r3, r1
 801679e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80167a2:	18d3      	adds	r3, r2, r3
 80167a4:	9307      	str	r3, [sp, #28]
 80167a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	9308      	str	r3, [sp, #32]
 80167ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80167ae:	685d      	ldr	r5, [r3, #4]
 80167b0:	3504      	adds	r5, #4
 80167b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	dc03      	bgt.n	80167c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80167b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	f340 81e6 	ble.w	8016b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80167c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80167c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80167c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80167ca:	1e48      	subs	r0, r1, #1
 80167cc:	1e56      	subs	r6, r2, #1
 80167ce:	9b06      	ldr	r3, [sp, #24]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	f340 80bd 	ble.w	8016950 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80167d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80167d8:	1427      	asrs	r7, r4, #16
 80167da:	ea4f 4323 	mov.w	r3, r3, asr #16
 80167de:	d406      	bmi.n	80167ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80167e0:	4287      	cmp	r7, r0
 80167e2:	da04      	bge.n	80167ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	db02      	blt.n	80167ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80167e8:	42b3      	cmp	r3, r6
 80167ea:	f2c0 80b2 	blt.w	8016952 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80167ee:	3701      	adds	r7, #1
 80167f0:	f100 80a1 	bmi.w	8016936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80167f4:	42b9      	cmp	r1, r7
 80167f6:	f2c0 809e 	blt.w	8016936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80167fa:	3301      	adds	r3, #1
 80167fc:	f100 809b 	bmi.w	8016936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8016800:	429a      	cmp	r2, r3
 8016802:	f2c0 8098 	blt.w	8016936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8016806:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801680a:	f1bb 0f00 	cmp.w	fp, #0
 801680e:	f340 80bf 	ble.w	8016990 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8016812:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016814:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8016816:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016818:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801681c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8016820:	1420      	asrs	r0, r4, #16
 8016822:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016824:	ea4f 4723 	mov.w	r7, r3, asr #16
 8016828:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801682c:	6892      	ldr	r2, [r2, #8]
 801682e:	f100 8103 	bmi.w	8016a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016832:	f102 3eff 	add.w	lr, r2, #4294967295
 8016836:	4570      	cmp	r0, lr
 8016838:	f280 80fe 	bge.w	8016a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801683c:	2f00      	cmp	r7, #0
 801683e:	f2c0 80fb 	blt.w	8016a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016842:	f10c 3eff 	add.w	lr, ip, #4294967295
 8016846:	4577      	cmp	r7, lr
 8016848:	f280 80f6 	bge.w	8016a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801684c:	b212      	sxth	r2, r2
 801684e:	fb07 0002 	mla	r0, r7, r2, r0
 8016852:	9f08      	ldr	r7, [sp, #32]
 8016854:	f817 8000 	ldrb.w	r8, [r7, r0]
 8016858:	eb07 0e00 	add.w	lr, r7, r0
 801685c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016860:	eb05 0c08 	add.w	ip, r5, r8
 8016864:	2b00      	cmp	r3, #0
 8016866:	f000 80d8 	beq.w	8016a1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801686a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801686e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016872:	442f      	add	r7, r5
 8016874:	2900      	cmp	r1, #0
 8016876:	f000 80d9 	beq.w	8016a2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801687a:	eb0e 0002 	add.w	r0, lr, r2
 801687e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8016882:	7840      	ldrb	r0, [r0, #1]
 8016884:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016888:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801688c:	442a      	add	r2, r5
 801688e:	4428      	add	r0, r5
 8016890:	b29b      	uxth	r3, r3
 8016892:	f815 a008 	ldrb.w	sl, [r5, r8]
 8016896:	b289      	uxth	r1, r1
 8016898:	f897 8000 	ldrb.w	r8, [r7]
 801689c:	fb03 f901 	mul.w	r9, r3, r1
 80168a0:	011b      	lsls	r3, r3, #4
 80168a2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80168a6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80168aa:	eba3 0309 	sub.w	r3, r3, r9
 80168ae:	b289      	uxth	r1, r1
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	ebae 0e01 	sub.w	lr, lr, r1
 80168b6:	fb03 f808 	mul.w	r8, r3, r8
 80168ba:	fa1f fe8e 	uxth.w	lr, lr
 80168be:	fb0e 880a 	mla	r8, lr, sl, r8
 80168c2:	f892 a000 	ldrb.w	sl, [r2]
 80168c6:	fb01 880a 	mla	r8, r1, sl, r8
 80168ca:	f890 a000 	ldrb.w	sl, [r0]
 80168ce:	fb09 880a 	mla	r8, r9, sl, r8
 80168d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80168d6:	f886 8000 	strb.w	r8, [r6]
 80168da:	f897 8001 	ldrb.w	r8, [r7, #1]
 80168de:	f89c a001 	ldrb.w	sl, [ip, #1]
 80168e2:	fb03 f808 	mul.w	r8, r3, r8
 80168e6:	fb0e 880a 	mla	r8, lr, sl, r8
 80168ea:	f892 a001 	ldrb.w	sl, [r2, #1]
 80168ee:	fb01 880a 	mla	r8, r1, sl, r8
 80168f2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80168f6:	fb09 880a 	mla	r8, r9, sl, r8
 80168fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80168fe:	f886 8001 	strb.w	r8, [r6, #1]
 8016902:	78bf      	ldrb	r7, [r7, #2]
 8016904:	f89c c002 	ldrb.w	ip, [ip, #2]
 8016908:	437b      	muls	r3, r7
 801690a:	7892      	ldrb	r2, [r2, #2]
 801690c:	fb0e 330c 	mla	r3, lr, ip, r3
 8016910:	fb01 3102 	mla	r1, r1, r2, r3
 8016914:	7882      	ldrb	r2, [r0, #2]
 8016916:	fb09 1902 	mla	r9, r9, r2, r1
 801691a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801691e:	f886 9002 	strb.w	r9, [r6, #2]
 8016922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016924:	3603      	adds	r6, #3
 8016926:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016928:	f10b 3bff 	add.w	fp, fp, #4294967295
 801692c:	441c      	add	r4, r3
 801692e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016930:	4413      	add	r3, r2
 8016932:	9322      	str	r3, [sp, #136]	; 0x88
 8016934:	e769      	b.n	801680a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016936:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016938:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801693a:	441c      	add	r4, r3
 801693c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801693e:	443b      	add	r3, r7
 8016940:	9322      	str	r3, [sp, #136]	; 0x88
 8016942:	9b06      	ldr	r3, [sp, #24]
 8016944:	3b01      	subs	r3, #1
 8016946:	9306      	str	r3, [sp, #24]
 8016948:	9b07      	ldr	r3, [sp, #28]
 801694a:	3303      	adds	r3, #3
 801694c:	9307      	str	r3, [sp, #28]
 801694e:	e73e      	b.n	80167ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016950:	d026      	beq.n	80169a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016952:	9b06      	ldr	r3, [sp, #24]
 8016954:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8016956:	3b01      	subs	r3, #1
 8016958:	fb00 4003 	mla	r0, r0, r3, r4
 801695c:	1400      	asrs	r0, r0, #16
 801695e:	f53f af52 	bmi.w	8016806 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8016962:	3901      	subs	r1, #1
 8016964:	4288      	cmp	r0, r1
 8016966:	f6bf af4e 	bge.w	8016806 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801696a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801696c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801696e:	fb01 0303 	mla	r3, r1, r3, r0
 8016972:	141b      	asrs	r3, r3, #16
 8016974:	f53f af47 	bmi.w	8016806 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8016978:	3a01      	subs	r2, #1
 801697a:	4293      	cmp	r3, r2
 801697c:	f6bf af43 	bge.w	8016806 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8016980:	9b07      	ldr	r3, [sp, #28]
 8016982:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016986:	f103 0803 	add.w	r8, r3, #3
 801698a:	f1ba 0f00 	cmp.w	sl, #0
 801698e:	dc71      	bgt.n	8016a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8016990:	9b06      	ldr	r3, [sp, #24]
 8016992:	9a07      	ldr	r2, [sp, #28]
 8016994:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801699c:	441a      	add	r2, r3
 801699e:	9207      	str	r2, [sp, #28]
 80169a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	f340 80f2 	ble.w	8016b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80169a8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80169ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169ae:	ee79 9aab 	vadd.f32	s19, s19, s23
 80169b2:	eef0 6a48 	vmov.f32	s13, s16
 80169b6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80169ba:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80169be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169c2:	ee16 4a90 	vmov	r4, s13
 80169c6:	eef0 6a68 	vmov.f32	s13, s17
 80169ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169ce:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80169d2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80169d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80169da:	ee37 8a48 	vsub.f32	s16, s14, s16
 80169de:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80169e2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80169e6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80169ea:	ee18 2a10 	vmov	r2, s16
 80169ee:	eeb0 8a47 	vmov.f32	s16, s14
 80169f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80169f6:	ee18 2a90 	vmov	r2, s17
 80169fa:	9323      	str	r3, [sp, #140]	; 0x8c
 80169fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169fe:	eef0 8a67 	vmov.f32	s17, s15
 8016a02:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a06:	9324      	str	r3, [sp, #144]	; 0x90
 8016a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016a12:	bf08      	it	eq
 8016a14:	4613      	moveq	r3, r2
 8016a16:	9306      	str	r3, [sp, #24]
 8016a18:	e6cb      	b.n	80167b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016a1a:	b151      	cbz	r1, 8016a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8016a1c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8016a20:	4660      	mov	r0, ip
 8016a22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016a26:	442a      	add	r2, r5
 8016a28:	4667      	mov	r7, ip
 8016a2a:	e731      	b.n	8016890 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a2c:	4660      	mov	r0, ip
 8016a2e:	4662      	mov	r2, ip
 8016a30:	e72e      	b.n	8016890 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a32:	4660      	mov	r0, ip
 8016a34:	4662      	mov	r2, ip
 8016a36:	e7f7      	b.n	8016a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8016a38:	f110 0e01 	adds.w	lr, r0, #1
 8016a3c:	f53f af71 	bmi.w	8016922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a40:	4572      	cmp	r2, lr
 8016a42:	f6ff af6e 	blt.w	8016922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a46:	f117 0e01 	adds.w	lr, r7, #1
 8016a4a:	f53f af6a 	bmi.w	8016922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a4e:	45f4      	cmp	ip, lr
 8016a50:	f6ff af67 	blt.w	8016922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a54:	b212      	sxth	r2, r2
 8016a56:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8016a5a:	fa0f f38c 	sxth.w	r3, ip
 8016a5e:	9200      	str	r2, [sp, #0]
 8016a60:	4631      	mov	r1, r6
 8016a62:	9a08      	ldr	r2, [sp, #32]
 8016a64:	9301      	str	r3, [sp, #4]
 8016a66:	462b      	mov	r3, r5
 8016a68:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8016a6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016a6e:	f7ff fdbf 	bl	80165f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8016a72:	e756      	b.n	8016922 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016a76:	1426      	asrs	r6, r4, #16
 8016a78:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016a7a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8016a7e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016a82:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016a84:	1400      	asrs	r0, r0, #16
 8016a86:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8016a8a:	fb02 6000 	mla	r0, r2, r0, r6
 8016a8e:	9e08      	ldr	r6, [sp, #32]
 8016a90:	f816 e000 	ldrb.w	lr, [r6, r0]
 8016a94:	eb06 0c00 	add.w	ip, r6, r0
 8016a98:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016a9c:	eb05 070e 	add.w	r7, r5, lr
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d064      	beq.n	8016b6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8016aa4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8016aa8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016aac:	442e      	add	r6, r5
 8016aae:	2900      	cmp	r1, #0
 8016ab0:	d066      	beq.n	8016b80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8016ab2:	eb0c 0002 	add.w	r0, ip, r2
 8016ab6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016aba:	7840      	ldrb	r0, [r0, #1]
 8016abc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016ac0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016ac4:	442a      	add	r2, r5
 8016ac6:	4428      	add	r0, r5
 8016ac8:	b29b      	uxth	r3, r3
 8016aca:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8016ace:	b289      	uxth	r1, r1
 8016ad0:	f896 e000 	ldrb.w	lr, [r6]
 8016ad4:	f108 0803 	add.w	r8, r8, #3
 8016ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016adc:	fb03 f901 	mul.w	r9, r3, r1
 8016ae0:	011b      	lsls	r3, r3, #4
 8016ae2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016ae6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8016aea:	eba3 0309 	sub.w	r3, r3, r9
 8016aee:	b289      	uxth	r1, r1
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	ebac 0c01 	sub.w	ip, ip, r1
 8016af6:	fb03 fe0e 	mul.w	lr, r3, lr
 8016afa:	fa1f fc8c 	uxth.w	ip, ip
 8016afe:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016b02:	f892 b000 	ldrb.w	fp, [r2]
 8016b06:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016b0a:	f890 b000 	ldrb.w	fp, [r0]
 8016b0e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8016b12:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016b16:	f808 ec06 	strb.w	lr, [r8, #-6]
 8016b1a:	f896 e001 	ldrb.w	lr, [r6, #1]
 8016b1e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016b22:	fb03 fe0e 	mul.w	lr, r3, lr
 8016b26:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016b2a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016b2e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016b32:	f890 b001 	ldrb.w	fp, [r0, #1]
 8016b36:	fb09 ee0b 	mla	lr, r9, fp, lr
 8016b3a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016b3e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8016b42:	78b6      	ldrb	r6, [r6, #2]
 8016b44:	78bf      	ldrb	r7, [r7, #2]
 8016b46:	4373      	muls	r3, r6
 8016b48:	7896      	ldrb	r6, [r2, #2]
 8016b4a:	7882      	ldrb	r2, [r0, #2]
 8016b4c:	fb0c 3307 	mla	r3, ip, r7, r3
 8016b50:	fb01 3306 	mla	r3, r1, r6, r3
 8016b54:	fb09 3902 	mla	r9, r9, r2, r3
 8016b58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016b5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016b5c:	441c      	add	r4, r3
 8016b5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016b60:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b64:	4413      	add	r3, r2
 8016b66:	f808 9c04 	strb.w	r9, [r8, #-4]
 8016b6a:	9322      	str	r3, [sp, #136]	; 0x88
 8016b6c:	e70d      	b.n	801698a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8016b6e:	b151      	cbz	r1, 8016b86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8016b70:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016b74:	4638      	mov	r0, r7
 8016b76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016b7a:	442a      	add	r2, r5
 8016b7c:	463e      	mov	r6, r7
 8016b7e:	e7a3      	b.n	8016ac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8016b80:	4638      	mov	r0, r7
 8016b82:	463a      	mov	r2, r7
 8016b84:	e7a0      	b.n	8016ac8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8016b86:	4638      	mov	r0, r7
 8016b88:	463a      	mov	r2, r7
 8016b8a:	e7f7      	b.n	8016b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8016b8c:	b00d      	add	sp, #52	; 0x34
 8016b8e:	ecbd 8b0a 	vpop	{d8-d12}
 8016b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016b98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8016b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b9c:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8016ba0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8016ba4:	2d00      	cmp	r5, #0
 8016ba6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8016baa:	fb05 040e 	mla	r4, r5, lr, r0
 8016bae:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8016bb2:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8016bb6:	eb02 0804 	add.w	r8, r2, r4
 8016bba:	db40      	blt.n	8016c3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8016bbc:	45a9      	cmp	r9, r5
 8016bbe:	dd3e      	ble.n	8016c3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	db3a      	blt.n	8016c3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8016bc4:	4586      	cmp	lr, r0
 8016bc6:	dd38      	ble.n	8016c3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8016bc8:	5d12      	ldrb	r2, [r2, r4]
 8016bca:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016bce:	1c42      	adds	r2, r0, #1
 8016bd0:	d438      	bmi.n	8016c44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8016bd2:	4596      	cmp	lr, r2
 8016bd4:	dd36      	ble.n	8016c44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8016bd6:	b3bf      	cbz	r7, 8016c48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8016bd8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016bdc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8016be0:	3501      	adds	r5, #1
 8016be2:	d435      	bmi.n	8016c50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8016be4:	45a9      	cmp	r9, r5
 8016be6:	dd33      	ble.n	8016c50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8016be8:	f1bc 0f00 	cmp.w	ip, #0
 8016bec:	d033      	beq.n	8016c56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	db2c      	blt.n	8016c4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8016bf2:	4586      	cmp	lr, r0
 8016bf4:	dd2a      	ble.n	8016c4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8016bf6:	f818 200e 	ldrb.w	r2, [r8, lr]
 8016bfa:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8016bfe:	3001      	adds	r0, #1
 8016c00:	d42c      	bmi.n	8016c5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8016c02:	4586      	cmp	lr, r0
 8016c04:	dd2a      	ble.n	8016c5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8016c06:	b35f      	cbz	r7, 8016c60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8016c08:	44c6      	add	lr, r8
 8016c0a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8016c0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016c12:	2f0f      	cmp	r7, #15
 8016c14:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8016c18:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8016c1c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8016c20:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8016c24:	d802      	bhi.n	8016c2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8016c26:	f1bc 0f0f 	cmp.w	ip, #15
 8016c2a:	d91b      	bls.n	8016c64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8016c2c:	4b77      	ldr	r3, [pc, #476]	; (8016e0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8016c2e:	f240 1157 	movw	r1, #343	; 0x157
 8016c32:	4a77      	ldr	r2, [pc, #476]	; (8016e10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8016c34:	4877      	ldr	r0, [pc, #476]	; (8016e14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8016c36:	f004 fa31 	bl	801b09c <__assert_func>
 8016c3a:	2600      	movs	r6, #0
 8016c3c:	e7c7      	b.n	8016bce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8016c3e:	2400      	movs	r4, #0
 8016c40:	4626      	mov	r6, r4
 8016c42:	e7cd      	b.n	8016be0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8016c44:	2400      	movs	r4, #0
 8016c46:	e7cb      	b.n	8016be0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8016c48:	463c      	mov	r4, r7
 8016c4a:	e7c9      	b.n	8016be0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8016c4c:	2500      	movs	r5, #0
 8016c4e:	e7d6      	b.n	8016bfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8016c50:	2200      	movs	r2, #0
 8016c52:	4615      	mov	r5, r2
 8016c54:	e7dd      	b.n	8016c12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c56:	4662      	mov	r2, ip
 8016c58:	4665      	mov	r5, ip
 8016c5a:	e7da      	b.n	8016c12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	e7d8      	b.n	8016c12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c60:	463a      	mov	r2, r7
 8016c62:	e7d6      	b.n	8016c12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c64:	b2bf      	uxth	r7, r7
 8016c66:	fa1f f08c 	uxth.w	r0, ip
 8016c6a:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8016c6e:	fb00 fe07 	mul.w	lr, r0, r7
 8016c72:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8016c76:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8016c7a:	ebac 070e 	sub.w	r7, ip, lr
 8016c7e:	b280      	uxth	r0, r0
 8016c80:	b2bf      	uxth	r7, r7
 8016c82:	1a1b      	subs	r3, r3, r0
 8016c84:	fb07 fc0a 	mul.w	ip, r7, sl
 8016c88:	b29b      	uxth	r3, r3
 8016c8a:	fb03 cc0b 	mla	ip, r3, fp, ip
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	fb00 cc09 	mla	ip, r0, r9, ip
 8016c94:	fb0e cc08 	mla	ip, lr, r8, ip
 8016c98:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8016c9c:	9301      	str	r3, [sp, #4]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	f000 80b0 	beq.w	8016e04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8016ca4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8016ca8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016cac:	fb0b fc0c 	mul.w	ip, fp, ip
 8016cb0:	fb0b f606 	mul.w	r6, fp, r6
 8016cb4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016cb8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016cbc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8016cc0:	44dc      	add	ip, fp
 8016cc2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016cc6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016cca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016cce:	fb0a fb0b 	mul.w	fp, sl, fp
 8016cd2:	fb0a fa04 	mul.w	sl, sl, r4
 8016cd6:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8016cda:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8016cde:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8016ce2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8016ce6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8016cea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016cee:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8016cf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016cf6:	0a36      	lsrs	r6, r6, #8
 8016cf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016cfc:	44dc      	add	ip, fp
 8016cfe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8016d02:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8016d06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016d0a:	fb09 fb0b 	mul.w	fp, r9, fp
 8016d0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016d12:	fb09 f905 	mul.w	r9, r9, r5
 8016d16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016d1a:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8016d1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016d22:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8016d26:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016d2a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016d2e:	fb0c fc07 	mul.w	ip, ip, r7
 8016d32:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8016d36:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8016d3a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016d3e:	445c      	add	r4, fp
 8016d40:	fb08 f505 	mul.w	r5, r8, r5
 8016d44:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016d48:	fb08 f802 	mul.w	r8, r8, r2
 8016d4c:	0a24      	lsrs	r4, r4, #8
 8016d4e:	0a2a      	lsrs	r2, r5, #8
 8016d50:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8016d54:	fb07 f70a 	mul.w	r7, r7, sl
 8016d58:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016d5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016d60:	4415      	add	r5, r2
 8016d62:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8016d66:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016d6a:	9a00      	ldr	r2, [sp, #0]
 8016d6c:	0a2d      	lsrs	r5, r5, #8
 8016d6e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8016d72:	fb03 cc02 	mla	ip, r3, r2, ip
 8016d76:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8016d7a:	fb02 7306 	mla	r3, r2, r6, r7
 8016d7e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8016d82:	9a01      	ldr	r2, [sp, #4]
 8016d84:	fb05 c50e 	mla	r5, r5, lr, ip
 8016d88:	fb0e 3e08 	mla	lr, lr, r8, r3
 8016d8c:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8016d90:	fb04 5400 	mla	r4, r4, r0, r5
 8016d94:	fb00 e303 	mla	r3, r0, r3, lr
 8016d98:	0a24      	lsrs	r4, r4, #8
 8016d9a:	0a1b      	lsrs	r3, r3, #8
 8016d9c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016da4:	431c      	orrs	r4, r3
 8016da6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016daa:	b29b      	uxth	r3, r3
 8016dac:	b2e0      	uxtb	r0, r4
 8016dae:	435a      	muls	r2, r3
 8016db0:	fb10 f003 	smulbb	r0, r0, r3
 8016db4:	1c55      	adds	r5, r2, #1
 8016db6:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8016dba:	780a      	ldrb	r2, [r1, #0]
 8016dbc:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8016dc0:	b2ed      	uxtb	r5, r5
 8016dc2:	fb02 0205 	mla	r2, r2, r5, r0
 8016dc6:	b292      	uxth	r2, r2
 8016dc8:	1c50      	adds	r0, r2, #1
 8016dca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016dce:	7848      	ldrb	r0, [r1, #1]
 8016dd0:	fb10 f005 	smulbb	r0, r0, r5
 8016dd4:	1212      	asrs	r2, r2, #8
 8016dd6:	700a      	strb	r2, [r1, #0]
 8016dd8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8016ddc:	0c24      	lsrs	r4, r4, #16
 8016dde:	fb02 0203 	mla	r2, r2, r3, r0
 8016de2:	b292      	uxth	r2, r2
 8016de4:	1c50      	adds	r0, r2, #1
 8016de6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016dea:	1212      	asrs	r2, r2, #8
 8016dec:	704a      	strb	r2, [r1, #1]
 8016dee:	788a      	ldrb	r2, [r1, #2]
 8016df0:	fb12 f505 	smulbb	r5, r2, r5
 8016df4:	fb04 5303 	mla	r3, r4, r3, r5
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	1c5a      	adds	r2, r3, #1
 8016dfc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016e00:	121b      	asrs	r3, r3, #8
 8016e02:	708b      	strb	r3, [r1, #2]
 8016e04:	b003      	add	sp, #12
 8016e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e0a:	bf00      	nop
 8016e0c:	0801f137 	.word	0x0801f137
 8016e10:	0801f5ee 	.word	0x0801f5ee
 8016e14:	0801f1bf 	.word	0x0801f1bf

08016e18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e1c:	ed2d 8b08 	vpush	{d8-d11}
 8016e20:	b09f      	sub	sp, #124	; 0x7c
 8016e22:	eeb0 aa40 	vmov.f32	s20, s0
 8016e26:	eef0 9a60 	vmov.f32	s19, s1
 8016e2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e2c:	eeb0 9a41 	vmov.f32	s18, s2
 8016e30:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8016e32:	eeb0 8a62 	vmov.f32	s16, s5
 8016e36:	9309      	str	r3, [sp, #36]	; 0x24
 8016e38:	eef0 8a43 	vmov.f32	s17, s6
 8016e3c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8016e40:	eef0 ba44 	vmov.f32	s23, s8
 8016e44:	901d      	str	r0, [sp, #116]	; 0x74
 8016e46:	eeb0 ba64 	vmov.f32	s22, s9
 8016e4a:	931c      	str	r3, [sp, #112]	; 0x70
 8016e4c:	eef0 aa45 	vmov.f32	s21, s10
 8016e50:	6850      	ldr	r0, [r2, #4]
 8016e52:	9119      	str	r1, [sp, #100]	; 0x64
 8016e54:	6812      	ldr	r2, [r2, #0]
 8016e56:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8016e58:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8016e5c:	fb00 1303 	mla	r3, r0, r3, r1
 8016e60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e64:	18d3      	adds	r3, r2, r3
 8016e66:	930c      	str	r3, [sp, #48]	; 0x30
 8016e68:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	9312      	str	r3, [sp, #72]	; 0x48
 8016e6e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016e70:	685e      	ldr	r6, [r3, #4]
 8016e72:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8016e76:	3604      	adds	r6, #4
 8016e78:	930d      	str	r3, [sp, #52]	; 0x34
 8016e7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	dc03      	bgt.n	8016e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f340 8378 	ble.w	8017578 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8016e88:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016e8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016e8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016e92:	1e48      	subs	r0, r1, #1
 8016e94:	1e57      	subs	r7, r2, #1
 8016e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	f340 818c 	ble.w	80171b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8016e9e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8016ea0:	142b      	asrs	r3, r5, #16
 8016ea2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8016ea6:	d406      	bmi.n	8016eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016ea8:	4584      	cmp	ip, r0
 8016eaa:	da04      	bge.n	8016eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	db02      	blt.n	8016eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016eb0:	42bb      	cmp	r3, r7
 8016eb2:	f2c0 8181 	blt.w	80171b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8016eb6:	f11c 0c01 	adds.w	ip, ip, #1
 8016eba:	f100 816f 	bmi.w	801719c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016ebe:	4561      	cmp	r1, ip
 8016ec0:	f2c0 816c 	blt.w	801719c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	f100 8169 	bmi.w	801719c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	f2c0 8166 	blt.w	801719c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ed2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8016ed6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	f340 818c 	ble.w	80171f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8016ede:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016ee0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8016ee4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016ee8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8016eec:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016eee:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8016ef2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016ef4:	141b      	asrs	r3, r3, #16
 8016ef6:	f100 81d0 	bmi.w	801729a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8016efe:	4543      	cmp	r3, r8
 8016f00:	f280 81cb 	bge.w	801729a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016f04:	f1bc 0f00 	cmp.w	ip, #0
 8016f08:	f2c0 81c7 	blt.w	801729a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016f0c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8016f10:	45c4      	cmp	ip, r8
 8016f12:	f280 81c2 	bge.w	801729a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016f16:	b200      	sxth	r0, r0
 8016f18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016f1a:	fb0c 3300 	mla	r3, ip, r0, r3
 8016f1e:	eb04 0803 	add.w	r8, r4, r3
 8016f22:	5ce3      	ldrb	r3, [r4, r3]
 8016f24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016f28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8016f2c:	2a00      	cmp	r2, #0
 8016f2e:	f000 81a9 	beq.w	8017284 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8016f32:	f898 c001 	ldrb.w	ip, [r8, #1]
 8016f36:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8016f3a:	940e      	str	r4, [sp, #56]	; 0x38
 8016f3c:	0e24      	lsrs	r4, r4, #24
 8016f3e:	9415      	str	r4, [sp, #84]	; 0x54
 8016f40:	b179      	cbz	r1, 8016f62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016f42:	eb08 0c00 	add.w	ip, r8, r0
 8016f46:	f818 0000 	ldrb.w	r0, [r8, r0]
 8016f4a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8016f4e:	900a      	str	r0, [sp, #40]	; 0x28
 8016f50:	0e00      	lsrs	r0, r0, #24
 8016f52:	9013      	str	r0, [sp, #76]	; 0x4c
 8016f54:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8016f58:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8016f5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8016f5e:	0e00      	lsrs	r0, r0, #24
 8016f60:	9016      	str	r0, [sp, #88]	; 0x58
 8016f62:	b292      	uxth	r2, r2
 8016f64:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016f66:	b289      	uxth	r1, r1
 8016f68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016f6a:	fb02 f901 	mul.w	r9, r2, r1
 8016f6e:	0112      	lsls	r2, r2, #4
 8016f70:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016f74:	eba2 0809 	sub.w	r8, r2, r9
 8016f78:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016f7c:	b289      	uxth	r1, r1
 8016f7e:	fa1f f888 	uxth.w	r8, r8
 8016f82:	1a52      	subs	r2, r2, r1
 8016f84:	fb08 f000 	mul.w	r0, r8, r0
 8016f88:	b292      	uxth	r2, r2
 8016f8a:	fb02 000e 	mla	r0, r2, lr, r0
 8016f8e:	fb01 0004 	mla	r0, r1, r4, r0
 8016f92:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016f94:	fb09 0004 	mla	r0, r9, r4, r0
 8016f98:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	f000 80f2 	beq.w	8017186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8016fa2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016fa6:	d01b      	beq.n	8016fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016fa8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016fac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016fb0:	fb0e fa0a 	mul.w	sl, lr, sl
 8016fb4:	fb0e fe03 	mul.w	lr, lr, r3
 8016fb8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016fbc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016fc0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016fc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016fc8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016fcc:	4453      	add	r3, sl
 8016fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016fd2:	0a1b      	lsrs	r3, r3, #8
 8016fd4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016fd8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016fdc:	ea43 030c 	orr.w	r3, r3, ip
 8016fe0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016fe2:	2cff      	cmp	r4, #255	; 0xff
 8016fe4:	d021      	beq.n	801702a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8016fe6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016fe8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016fec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016fee:	fb04 fb0b 	mul.w	fp, r4, fp
 8016ff2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016ff4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016ff8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016ffa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016ffe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017002:	fb04 fa0a 	mul.w	sl, r4, sl
 8017006:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801700a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801700e:	44de      	add	lr, fp
 8017010:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017014:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017018:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801701c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017020:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017024:	ea4e 040a 	orr.w	r4, lr, sl
 8017028:	940e      	str	r4, [sp, #56]	; 0x38
 801702a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801702c:	2cff      	cmp	r4, #255	; 0xff
 801702e:	d021      	beq.n	8017074 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8017030:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017032:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017036:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017038:	fb04 fb0b 	mul.w	fp, r4, fp
 801703c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801703e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017042:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017044:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017048:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801704c:	fb04 fa0a 	mul.w	sl, r4, sl
 8017050:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017054:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017058:	44de      	add	lr, fp
 801705a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801705e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017062:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017066:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801706a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801706e:	ea4e 040a 	orr.w	r4, lr, sl
 8017072:	940a      	str	r4, [sp, #40]	; 0x28
 8017074:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017076:	2cff      	cmp	r4, #255	; 0xff
 8017078:	d021      	beq.n	80170be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801707a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801707c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017080:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017082:	fb04 fb0b 	mul.w	fp, r4, fp
 8017086:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017088:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801708c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801708e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017092:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017096:	fb04 fa0a 	mul.w	sl, r4, sl
 801709a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801709e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80170a2:	44de      	add	lr, fp
 80170a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80170a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80170ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80170b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80170b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80170b8:	ea4e 040a 	orr.w	r4, lr, sl
 80170bc:	940f      	str	r4, [sp, #60]	; 0x3c
 80170be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80170c0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80170c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80170c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80170cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80170ce:	fb08 fc0c 	mul.w	ip, r8, ip
 80170d2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80170d6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80170da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80170dc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80170e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80170e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80170e6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80170ea:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80170ee:	fb08 f80e 	mul.w	r8, r8, lr
 80170f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80170f6:	fb02 8303 	mla	r3, r2, r3, r8
 80170fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017100:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017104:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017106:	fb01 330a 	mla	r3, r1, sl, r3
 801710a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801710e:	fb09 3901 	mla	r9, r9, r1, r3
 8017112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017114:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017116:	4343      	muls	r3, r0
 8017118:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801711c:	1c58      	adds	r0, r3, #1
 801711e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017122:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017126:	ea4c 0c09 	orr.w	ip, ip, r9
 801712a:	783b      	ldrb	r3, [r7, #0]
 801712c:	fa5f f28c 	uxtb.w	r2, ip
 8017130:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017134:	fb12 f201 	smulbb	r2, r2, r1
 8017138:	b2c0      	uxtb	r0, r0
 801713a:	fb03 2300 	mla	r3, r3, r0, r2
 801713e:	b29b      	uxth	r3, r3
 8017140:	1c5a      	adds	r2, r3, #1
 8017142:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017146:	787a      	ldrb	r2, [r7, #1]
 8017148:	fb12 f200 	smulbb	r2, r2, r0
 801714c:	121b      	asrs	r3, r3, #8
 801714e:	703b      	strb	r3, [r7, #0]
 8017150:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017154:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017158:	fb03 2301 	mla	r3, r3, r1, r2
 801715c:	b29b      	uxth	r3, r3
 801715e:	1c5a      	adds	r2, r3, #1
 8017160:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017164:	121b      	asrs	r3, r3, #8
 8017166:	707b      	strb	r3, [r7, #1]
 8017168:	78bb      	ldrb	r3, [r7, #2]
 801716a:	fb13 f000 	smulbb	r0, r3, r0
 801716e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8017172:	fa1f fc8c 	uxth.w	ip, ip
 8017176:	f10c 0301 	add.w	r3, ip, #1
 801717a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801717e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017182:	f887 c002 	strb.w	ip, [r7, #2]
 8017186:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017188:	3703      	adds	r7, #3
 801718a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801718c:	441a      	add	r2, r3
 801718e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017190:	441d      	add	r5, r3
 8017192:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017194:	9231      	str	r2, [sp, #196]	; 0xc4
 8017196:	3b01      	subs	r3, #1
 8017198:	931a      	str	r3, [sp, #104]	; 0x68
 801719a:	e69c      	b.n	8016ed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801719c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801719e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80171a0:	441c      	add	r4, r3
 80171a2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80171a4:	441d      	add	r5, r3
 80171a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171a8:	9431      	str	r4, [sp, #196]	; 0xc4
 80171aa:	3b01      	subs	r3, #1
 80171ac:	9309      	str	r3, [sp, #36]	; 0x24
 80171ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171b0:	3303      	adds	r3, #3
 80171b2:	930c      	str	r3, [sp, #48]	; 0x30
 80171b4:	e66f      	b.n	8016e96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80171b6:	d026      	beq.n	8017206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80171b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ba:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80171bc:	3b01      	subs	r3, #1
 80171be:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80171c0:	fb00 4003 	mla	r0, r0, r3, r4
 80171c4:	1400      	asrs	r0, r0, #16
 80171c6:	f53f ae83 	bmi.w	8016ed0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171ca:	3901      	subs	r1, #1
 80171cc:	4288      	cmp	r0, r1
 80171ce:	f6bf ae7f 	bge.w	8016ed0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171d2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80171d4:	fb01 5303 	mla	r3, r1, r3, r5
 80171d8:	141b      	asrs	r3, r3, #16
 80171da:	f53f ae79 	bmi.w	8016ed0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171de:	3a01      	subs	r2, #1
 80171e0:	4293      	cmp	r3, r2
 80171e2:	f6bf ae75 	bge.w	8016ed0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171e8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80171ec:	f103 0e03 	add.w	lr, r3, #3
 80171f0:	f1bb 0f00 	cmp.w	fp, #0
 80171f4:	dc71      	bgt.n	80172da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80171f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80171fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017202:	4423      	add	r3, r4
 8017204:	930c      	str	r3, [sp, #48]	; 0x30
 8017206:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017208:	2b00      	cmp	r3, #0
 801720a:	f340 81b5 	ble.w	8017578 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801720e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017212:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017214:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017218:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801721c:	eef0 6a48 	vmov.f32	s13, s16
 8017220:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017224:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017228:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801722c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8017230:	eef0 6a68 	vmov.f32	s13, s17
 8017234:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017238:	ee16 5a90 	vmov	r5, s13
 801723c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017240:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017244:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017248:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801724c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017250:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017254:	ee18 2a10 	vmov	r2, s16
 8017258:	eeb0 8a47 	vmov.f32	s16, s14
 801725c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017260:	ee18 2a90 	vmov	r2, s17
 8017264:	9333      	str	r3, [sp, #204]	; 0xcc
 8017266:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017268:	eef0 8a67 	vmov.f32	s17, s15
 801726c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017270:	9334      	str	r3, [sp, #208]	; 0xd0
 8017272:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017274:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017276:	3b01      	subs	r3, #1
 8017278:	9319      	str	r3, [sp, #100]	; 0x64
 801727a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801727c:	bf08      	it	eq
 801727e:	4613      	moveq	r3, r2
 8017280:	9309      	str	r3, [sp, #36]	; 0x24
 8017282:	e5fa      	b.n	8016e7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017284:	2900      	cmp	r1, #0
 8017286:	f43f ae6c 	beq.w	8016f62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801728a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801728e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017292:	900a      	str	r0, [sp, #40]	; 0x28
 8017294:	0e00      	lsrs	r0, r0, #24
 8017296:	9013      	str	r0, [sp, #76]	; 0x4c
 8017298:	e663      	b.n	8016f62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801729a:	f113 0801 	adds.w	r8, r3, #1
 801729e:	f53f af72 	bmi.w	8017186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80172a2:	4540      	cmp	r0, r8
 80172a4:	f6ff af6f 	blt.w	8017186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80172a8:	f11c 0801 	adds.w	r8, ip, #1
 80172ac:	f53f af6b 	bmi.w	8017186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80172b0:	45c6      	cmp	lr, r8
 80172b2:	f6ff af68 	blt.w	8017186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80172b6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80172b8:	b200      	sxth	r0, r0
 80172ba:	9302      	str	r3, [sp, #8]
 80172bc:	fa0f f38e 	sxth.w	r3, lr
 80172c0:	9000      	str	r0, [sp, #0]
 80172c2:	9301      	str	r3, [sp, #4]
 80172c4:	4633      	mov	r3, r6
 80172c6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80172c8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80172cc:	e9cd c203 	strd	ip, r2, [sp, #12]
 80172d0:	4639      	mov	r1, r7
 80172d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172d4:	f7ff fc60 	bl	8016b98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80172d8:	e755      	b.n	8017186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80172da:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80172dc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80172e0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80172e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80172e6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80172e8:	1427      	asrs	r7, r4, #16
 80172ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80172ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80172f0:	142b      	asrs	r3, r5, #16
 80172f2:	fb01 7303 	mla	r3, r1, r3, r7
 80172f6:	18e7      	adds	r7, r4, r3
 80172f8:	5ce3      	ldrb	r3, [r4, r3]
 80172fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80172fe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8017302:	2a00      	cmp	r2, #0
 8017304:	f000 812e 	beq.w	8017564 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8017308:	f897 8001 	ldrb.w	r8, [r7, #1]
 801730c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8017310:	9410      	str	r4, [sp, #64]	; 0x40
 8017312:	0e24      	lsrs	r4, r4, #24
 8017314:	9417      	str	r4, [sp, #92]	; 0x5c
 8017316:	b170      	cbz	r0, 8017336 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8017318:	eb07 0801 	add.w	r8, r7, r1
 801731c:	5c79      	ldrb	r1, [r7, r1]
 801731e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017322:	910b      	str	r1, [sp, #44]	; 0x2c
 8017324:	0e09      	lsrs	r1, r1, #24
 8017326:	9114      	str	r1, [sp, #80]	; 0x50
 8017328:	f898 1001 	ldrb.w	r1, [r8, #1]
 801732c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017330:	9111      	str	r1, [sp, #68]	; 0x44
 8017332:	0e09      	lsrs	r1, r1, #24
 8017334:	9118      	str	r1, [sp, #96]	; 0x60
 8017336:	b292      	uxth	r2, r2
 8017338:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801733a:	b280      	uxth	r0, r0
 801733c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801733e:	fb02 f900 	mul.w	r9, r2, r0
 8017342:	0112      	lsls	r2, r2, #4
 8017344:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017348:	eba2 0809 	sub.w	r8, r2, r9
 801734c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017350:	b280      	uxth	r0, r0
 8017352:	fa1f f888 	uxth.w	r8, r8
 8017356:	1a12      	subs	r2, r2, r0
 8017358:	fb08 f101 	mul.w	r1, r8, r1
 801735c:	b292      	uxth	r2, r2
 801735e:	fb02 110c 	mla	r1, r2, ip, r1
 8017362:	fb00 1104 	mla	r1, r0, r4, r1
 8017366:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017368:	fb09 1104 	mla	r1, r9, r4, r1
 801736c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017370:	2900      	cmp	r1, #0
 8017372:	f000 80ec 	beq.w	801754e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8017376:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801737a:	d019      	beq.n	80173b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801737c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017380:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017384:	fb0c fa0a 	mul.w	sl, ip, sl
 8017388:	fb0c fc03 	mul.w	ip, ip, r3
 801738c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017390:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017394:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017398:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801739c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80173a0:	4453      	add	r3, sl
 80173a2:	0a3f      	lsrs	r7, r7, #8
 80173a4:	0a1b      	lsrs	r3, r3, #8
 80173a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80173aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80173ae:	433b      	orrs	r3, r7
 80173b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80173b2:	2cff      	cmp	r4, #255	; 0xff
 80173b4:	d020      	beq.n	80173f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80173b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80173b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80173bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80173be:	4367      	muls	r7, r4
 80173c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80173c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80173c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80173ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80173cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80173d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80173d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80173d8:	44bc      	add	ip, r7
 80173da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80173de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80173e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80173e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80173ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80173ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80173f2:	ea4c 040a 	orr.w	r4, ip, sl
 80173f6:	9410      	str	r4, [sp, #64]	; 0x40
 80173f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80173fa:	2cff      	cmp	r4, #255	; 0xff
 80173fc:	d020      	beq.n	8017440 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80173fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017400:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017404:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017406:	4367      	muls	r7, r4
 8017408:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801740a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801740e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017412:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017414:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017418:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801741c:	fb04 fa0a 	mul.w	sl, r4, sl
 8017420:	44bc      	add	ip, r7
 8017422:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017426:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801742a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801742e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017432:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017436:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801743a:	ea4c 040a 	orr.w	r4, ip, sl
 801743e:	940b      	str	r4, [sp, #44]	; 0x2c
 8017440:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017442:	2cff      	cmp	r4, #255	; 0xff
 8017444:	d020      	beq.n	8017488 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8017446:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017448:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801744c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801744e:	4367      	muls	r7, r4
 8017450:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017452:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017456:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801745a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801745c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017460:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017464:	fb04 fa0a 	mul.w	sl, r4, sl
 8017468:	44bc      	add	ip, r7
 801746a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801746e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017472:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017476:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801747a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801747e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017482:	ea4c 040a 	orr.w	r4, ip, sl
 8017486:	9411      	str	r4, [sp, #68]	; 0x44
 8017488:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801748a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801748e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017492:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017496:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017498:	fb08 f707 	mul.w	r7, r8, r7
 801749c:	fb02 770c 	mla	r7, r2, ip, r7
 80174a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80174a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80174a6:	fb00 770c 	mla	r7, r0, ip, r7
 80174aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80174ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80174b0:	fb09 770c 	mla	r7, r9, ip, r7
 80174b4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80174b8:	fb08 f80c 	mul.w	r8, r8, ip
 80174bc:	0a3f      	lsrs	r7, r7, #8
 80174be:	fb02 8303 	mla	r3, r2, r3, r8
 80174c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80174c4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80174c8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80174cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80174ce:	fb00 330a 	mla	r3, r0, sl, r3
 80174d2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80174d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80174d8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80174dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80174e2:	434b      	muls	r3, r1
 80174e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80174e8:	1c59      	adds	r1, r3, #1
 80174ea:	ea47 070c 	orr.w	r7, r7, ip
 80174ee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80174f2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80174f6:	b2fa      	uxtb	r2, r7
 80174f8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80174fc:	fb12 f200 	smulbb	r2, r2, r0
 8017500:	b2c9      	uxtb	r1, r1
 8017502:	fb03 2301 	mla	r3, r3, r1, r2
 8017506:	b29b      	uxth	r3, r3
 8017508:	1c5a      	adds	r2, r3, #1
 801750a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801750e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8017512:	fb12 f201 	smulbb	r2, r2, r1
 8017516:	121b      	asrs	r3, r3, #8
 8017518:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801751c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8017520:	0c3f      	lsrs	r7, r7, #16
 8017522:	fb03 2300 	mla	r3, r3, r0, r2
 8017526:	b29b      	uxth	r3, r3
 8017528:	1c5a      	adds	r2, r3, #1
 801752a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801752e:	121b      	asrs	r3, r3, #8
 8017530:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8017534:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8017538:	fb13 f101 	smulbb	r1, r3, r1
 801753c:	fb07 1700 	mla	r7, r7, r0, r1
 8017540:	b2bf      	uxth	r7, r7
 8017542:	1c7b      	adds	r3, r7, #1
 8017544:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8017548:	123f      	asrs	r7, r7, #8
 801754a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801754e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017550:	f10e 0e03 	add.w	lr, lr, #3
 8017554:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017556:	f10b 3bff 	add.w	fp, fp, #4294967295
 801755a:	441a      	add	r2, r3
 801755c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801755e:	9231      	str	r2, [sp, #196]	; 0xc4
 8017560:	441d      	add	r5, r3
 8017562:	e645      	b.n	80171f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8017564:	2800      	cmp	r0, #0
 8017566:	f43f aee6 	beq.w	8017336 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801756a:	5c79      	ldrb	r1, [r7, r1]
 801756c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017570:	910b      	str	r1, [sp, #44]	; 0x2c
 8017572:	0e09      	lsrs	r1, r1, #24
 8017574:	9114      	str	r1, [sp, #80]	; 0x50
 8017576:	e6de      	b.n	8017336 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8017578:	b01f      	add	sp, #124	; 0x7c
 801757a:	ecbd 8b08 	vpop	{d8-d11}
 801757e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017584 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8017584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017588:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801758c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8017590:	2c00      	cmp	r4, #0
 8017592:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8017596:	fb04 060c 	mla	r6, r4, ip, r0
 801759a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801759e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80175a2:	eb02 0e06 	add.w	lr, r2, r6
 80175a6:	db3d      	blt.n	8017624 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80175a8:	45a0      	cmp	r8, r4
 80175aa:	dd3b      	ble.n	8017624 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80175ac:	2800      	cmp	r0, #0
 80175ae:	db37      	blt.n	8017620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80175b0:	4584      	cmp	ip, r0
 80175b2:	dd35      	ble.n	8017620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80175b4:	5d92      	ldrb	r2, [r2, r6]
 80175b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80175ba:	1c46      	adds	r6, r0, #1
 80175bc:	d435      	bmi.n	801762a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80175be:	45b4      	cmp	ip, r6
 80175c0:	dd33      	ble.n	801762a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80175c2:	b3a5      	cbz	r5, 801762e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80175c4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80175c8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80175cc:	3401      	adds	r4, #1
 80175ce:	d432      	bmi.n	8017636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80175d0:	45a0      	cmp	r8, r4
 80175d2:	dd30      	ble.n	8017636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80175d4:	b397      	cbz	r7, 801763c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80175d6:	2800      	cmp	r0, #0
 80175d8:	db2b      	blt.n	8017632 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80175da:	4584      	cmp	ip, r0
 80175dc:	dd29      	ble.n	8017632 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80175de:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80175e2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80175e6:	3001      	adds	r0, #1
 80175e8:	d42b      	bmi.n	8017642 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80175ea:	4584      	cmp	ip, r0
 80175ec:	dd29      	ble.n	8017642 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80175ee:	b355      	cbz	r5, 8017646 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80175f0:	44f4      	add	ip, lr
 80175f2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80175f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80175fa:	2d0f      	cmp	r5, #15
 80175fc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8017600:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017604:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017608:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801760c:	d801      	bhi.n	8017612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801760e:	2f0f      	cmp	r7, #15
 8017610:	d91b      	bls.n	801764a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8017612:	4b7f      	ldr	r3, [pc, #508]	; (8017810 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8017614:	f240 1157 	movw	r1, #343	; 0x157
 8017618:	4a7e      	ldr	r2, [pc, #504]	; (8017814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801761a:	487f      	ldr	r0, [pc, #508]	; (8017818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801761c:	f003 fd3e 	bl	801b09c <__assert_func>
 8017620:	2200      	movs	r2, #0
 8017622:	e7ca      	b.n	80175ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8017624:	2600      	movs	r6, #0
 8017626:	4632      	mov	r2, r6
 8017628:	e7d0      	b.n	80175cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801762a:	2600      	movs	r6, #0
 801762c:	e7ce      	b.n	80175cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801762e:	462e      	mov	r6, r5
 8017630:	e7cc      	b.n	80175cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8017632:	2400      	movs	r4, #0
 8017634:	e7d7      	b.n	80175e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8017636:	2300      	movs	r3, #0
 8017638:	461c      	mov	r4, r3
 801763a:	e7de      	b.n	80175fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801763c:	463b      	mov	r3, r7
 801763e:	463c      	mov	r4, r7
 8017640:	e7db      	b.n	80175fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017642:	2300      	movs	r3, #0
 8017644:	e7d9      	b.n	80175fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017646:	462b      	mov	r3, r5
 8017648:	e7d7      	b.n	80175fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801764a:	b2a8      	uxth	r0, r5
 801764c:	b2bf      	uxth	r7, r7
 801764e:	fb07 fe00 	mul.w	lr, r7, r0
 8017652:	0100      	lsls	r0, r0, #4
 8017654:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8017658:	eba0 0c0e 	sub.w	ip, r0, lr
 801765c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8017660:	b2bf      	uxth	r7, r7
 8017662:	fa1f fc8c 	uxth.w	ip, ip
 8017666:	1bc5      	subs	r5, r0, r7
 8017668:	fb0c f00a 	mul.w	r0, ip, sl
 801766c:	b2ad      	uxth	r5, r5
 801766e:	fb05 000b 	mla	r0, r5, fp, r0
 8017672:	fb07 0009 	mla	r0, r7, r9, r0
 8017676:	fb0e 0008 	mla	r0, lr, r8, r0
 801767a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801767e:	9001      	str	r0, [sp, #4]
 8017680:	2800      	cmp	r0, #0
 8017682:	f000 80c2 	beq.w	801780a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8017686:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801768a:	d018      	beq.n	80176be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801768c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8017690:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017694:	fb0b f000 	mul.w	r0, fp, r0
 8017698:	fb0b fb02 	mul.w	fp, fp, r2
 801769c:	0a02      	lsrs	r2, r0, #8
 801769e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80176a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80176a6:	4402      	add	r2, r0
 80176a8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80176ac:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80176b0:	0a12      	lsrs	r2, r2, #8
 80176b2:	0a00      	lsrs	r0, r0, #8
 80176b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80176b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80176bc:	4302      	orrs	r2, r0
 80176be:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80176c2:	d01a      	beq.n	80176fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80176c4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80176c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80176cc:	fb0a f000 	mul.w	r0, sl, r0
 80176d0:	fb0a fa06 	mul.w	sl, sl, r6
 80176d4:	0a06      	lsrs	r6, r0, #8
 80176d6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80176da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80176de:	4406      	add	r6, r0
 80176e0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80176e4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80176e8:	0a36      	lsrs	r6, r6, #8
 80176ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80176ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80176f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80176f6:	ea46 060a 	orr.w	r6, r6, sl
 80176fa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80176fe:	d01b      	beq.n	8017738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8017700:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8017704:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017708:	fb09 fa0a 	mul.w	sl, r9, sl
 801770c:	fb09 f004 	mul.w	r0, r9, r4
 8017710:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8017714:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017718:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801771c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017720:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8017724:	4454      	add	r4, sl
 8017726:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801772a:	0a24      	lsrs	r4, r4, #8
 801772c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017730:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017734:	ea44 0409 	orr.w	r4, r4, r9
 8017738:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801773c:	d01b      	beq.n	8017776 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801773e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8017742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017746:	fb08 f909 	mul.w	r9, r8, r9
 801774a:	fb08 f003 	mul.w	r0, r8, r3
 801774e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017752:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8017756:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801775a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801775e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8017762:	444b      	add	r3, r9
 8017764:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017768:	0a1b      	lsrs	r3, r3, #8
 801776a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801776e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017772:	ea43 0308 	orr.w	r3, r3, r8
 8017776:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801777a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801777e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8017782:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017786:	fb0c f000 	mul.w	r0, ip, r0
 801778a:	fb0c f606 	mul.w	r6, ip, r6
 801778e:	fb05 0808 	mla	r8, r5, r8, r0
 8017792:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8017796:	fb05 6502 	mla	r5, r5, r2, r6
 801779a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801779e:	fb07 8800 	mla	r8, r7, r0, r8
 80177a2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80177a6:	fb07 5704 	mla	r7, r7, r4, r5
 80177aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80177ae:	fb0e 8000 	mla	r0, lr, r0, r8
 80177b2:	780a      	ldrb	r2, [r1, #0]
 80177b4:	fb0e 7e03 	mla	lr, lr, r3, r7
 80177b8:	9b01      	ldr	r3, [sp, #4]
 80177ba:	0a00      	lsrs	r0, r0, #8
 80177bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80177c0:	43db      	mvns	r3, r3
 80177c2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80177c6:	b2db      	uxtb	r3, r3
 80177c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80177cc:	ea40 0e0e 	orr.w	lr, r0, lr
 80177d0:	fb02 f003 	mul.w	r0, r2, r3
 80177d4:	1c42      	adds	r2, r0, #1
 80177d6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80177da:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80177de:	700a      	strb	r2, [r1, #0]
 80177e0:	784a      	ldrb	r2, [r1, #1]
 80177e2:	435a      	muls	r2, r3
 80177e4:	1c50      	adds	r0, r2, #1
 80177e6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80177ea:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80177ee:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80177f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80177f6:	704a      	strb	r2, [r1, #1]
 80177f8:	788a      	ldrb	r2, [r1, #2]
 80177fa:	4353      	muls	r3, r2
 80177fc:	1c5a      	adds	r2, r3, #1
 80177fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017802:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8017806:	f881 e002 	strb.w	lr, [r1, #2]
 801780a:	b003      	add	sp, #12
 801780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017810:	0801f137 	.word	0x0801f137
 8017814:	0801f5ee 	.word	0x0801f5ee
 8017818:	0801f1bf 	.word	0x0801f1bf

0801781c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801781c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017820:	ed2d 8b0a 	vpush	{d8-d12}
 8017824:	b09b      	sub	sp, #108	; 0x6c
 8017826:	eeb0 aa40 	vmov.f32	s20, s0
 801782a:	eef0 9a60 	vmov.f32	s19, s1
 801782e:	9218      	str	r2, [sp, #96]	; 0x60
 8017830:	eeb0 9a41 	vmov.f32	s18, s2
 8017834:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017836:	eeb0 8a62 	vmov.f32	s16, s5
 801783a:	9019      	str	r0, [sp, #100]	; 0x64
 801783c:	eef0 8a43 	vmov.f32	s17, s6
 8017840:	6850      	ldr	r0, [r2, #4]
 8017842:	eeb0 ca44 	vmov.f32	s24, s8
 8017846:	9116      	str	r1, [sp, #88]	; 0x58
 8017848:	eef0 ba64 	vmov.f32	s23, s9
 801784c:	9307      	str	r3, [sp, #28]
 801784e:	eeb0 ba45 	vmov.f32	s22, s10
 8017852:	6812      	ldr	r2, [r2, #0]
 8017854:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8017858:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801785a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801785e:	fb00 1303 	mla	r3, r0, r3, r1
 8017862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017866:	18d3      	adds	r3, r2, r3
 8017868:	930a      	str	r3, [sp, #40]	; 0x28
 801786a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017870:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017872:	685e      	ldr	r6, [r3, #4]
 8017874:	3604      	adds	r6, #4
 8017876:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017878:	2b00      	cmp	r3, #0
 801787a:	dc03      	bgt.n	8017884 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801787c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801787e:	2b00      	cmp	r3, #0
 8017880:	f340 834f 	ble.w	8017f22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8017884:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017886:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801788a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801788e:	1e48      	subs	r0, r1, #1
 8017890:	1e57      	subs	r7, r2, #1
 8017892:	9b07      	ldr	r3, [sp, #28]
 8017894:	2b00      	cmp	r3, #0
 8017896:	f340 8178 	ble.w	8017b8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801789a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801789c:	142b      	asrs	r3, r5, #16
 801789e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80178a2:	d406      	bmi.n	80178b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80178a4:	4584      	cmp	ip, r0
 80178a6:	da04      	bge.n	80178b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	db02      	blt.n	80178b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80178ac:	42bb      	cmp	r3, r7
 80178ae:	f2c0 816d 	blt.w	8017b8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80178b2:	f11c 0c01 	adds.w	ip, ip, #1
 80178b6:	f100 815b 	bmi.w	8017b70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80178ba:	4561      	cmp	r1, ip
 80178bc:	f2c0 8158 	blt.w	8017b70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80178c0:	3301      	adds	r3, #1
 80178c2:	f100 8155 	bmi.w	8017b70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80178c6:	429a      	cmp	r2, r3
 80178c8:	f2c0 8152 	blt.w	8017b70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80178cc:	9b07      	ldr	r3, [sp, #28]
 80178ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80178d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80178d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	f340 8178 	ble.w	8017bca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80178da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80178dc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80178e0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80178e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80178e8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80178ea:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80178ee:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80178f0:	141b      	asrs	r3, r3, #16
 80178f2:	f100 81ba 	bmi.w	8017c6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80178f6:	f101 38ff 	add.w	r8, r1, #4294967295
 80178fa:	4543      	cmp	r3, r8
 80178fc:	f280 81b5 	bge.w	8017c6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017900:	f1bc 0f00 	cmp.w	ip, #0
 8017904:	f2c0 81b1 	blt.w	8017c6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017908:	f10e 38ff 	add.w	r8, lr, #4294967295
 801790c:	45c4      	cmp	ip, r8
 801790e:	f280 81ac 	bge.w	8017c6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017912:	b209      	sxth	r1, r1
 8017914:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017916:	fb0c 3301 	mla	r3, ip, r1, r3
 801791a:	eb04 0803 	add.w	r8, r4, r3
 801791e:	5ce3      	ldrb	r3, [r4, r3]
 8017920:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017924:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017928:	2a00      	cmp	r2, #0
 801792a:	f000 8193 	beq.w	8017c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801792e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017932:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017936:	940b      	str	r4, [sp, #44]	; 0x2c
 8017938:	0e24      	lsrs	r4, r4, #24
 801793a:	9412      	str	r4, [sp, #72]	; 0x48
 801793c:	b178      	cbz	r0, 801795e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801793e:	eb08 0c01 	add.w	ip, r8, r1
 8017942:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017946:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801794a:	9108      	str	r1, [sp, #32]
 801794c:	0e09      	lsrs	r1, r1, #24
 801794e:	9110      	str	r1, [sp, #64]	; 0x40
 8017950:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017954:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017958:	910c      	str	r1, [sp, #48]	; 0x30
 801795a:	0e09      	lsrs	r1, r1, #24
 801795c:	9113      	str	r1, [sp, #76]	; 0x4c
 801795e:	b292      	uxth	r2, r2
 8017960:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017962:	b280      	uxth	r0, r0
 8017964:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017966:	fb02 f900 	mul.w	r9, r2, r0
 801796a:	0112      	lsls	r2, r2, #4
 801796c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017970:	eba2 0809 	sub.w	r8, r2, r9
 8017974:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017978:	b280      	uxth	r0, r0
 801797a:	fa1f f888 	uxth.w	r8, r8
 801797e:	1a12      	subs	r2, r2, r0
 8017980:	fb08 f101 	mul.w	r1, r8, r1
 8017984:	b292      	uxth	r2, r2
 8017986:	fb02 110e 	mla	r1, r2, lr, r1
 801798a:	fb00 1104 	mla	r1, r0, r4, r1
 801798e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017990:	fb09 1104 	mla	r1, r9, r4, r1
 8017994:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017998:	2900      	cmp	r1, #0
 801799a:	f000 80de 	beq.w	8017b5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801799e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80179a2:	d01b      	beq.n	80179dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80179a4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80179a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80179ac:	fb0e fa0a 	mul.w	sl, lr, sl
 80179b0:	fb0e fe03 	mul.w	lr, lr, r3
 80179b4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80179b8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80179bc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80179c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80179c4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80179c8:	4453      	add	r3, sl
 80179ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80179ce:	0a1b      	lsrs	r3, r3, #8
 80179d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80179d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80179d8:	ea43 030c 	orr.w	r3, r3, ip
 80179dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80179de:	2cff      	cmp	r4, #255	; 0xff
 80179e0:	d021      	beq.n	8017a26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80179e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80179e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80179e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80179ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80179ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80179f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80179f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80179f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80179fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80179fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a06:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017a0a:	44de      	add	lr, fp
 8017a0c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017a10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017a14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a20:	ea4e 040a 	orr.w	r4, lr, sl
 8017a24:	940b      	str	r4, [sp, #44]	; 0x2c
 8017a26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a28:	2cff      	cmp	r4, #255	; 0xff
 8017a2a:	d021      	beq.n	8017a70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017a2c:	9c08      	ldr	r4, [sp, #32]
 8017a2e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017a32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a34:	fb04 fb0b 	mul.w	fp, r4, fp
 8017a38:	9c08      	ldr	r4, [sp, #32]
 8017a3a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017a44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017a48:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a50:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017a54:	44de      	add	lr, fp
 8017a56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017a5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017a5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a6a:	ea4e 040a 	orr.w	r4, lr, sl
 8017a6e:	9408      	str	r4, [sp, #32]
 8017a70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017a72:	2cff      	cmp	r4, #255	; 0xff
 8017a74:	d021      	beq.n	8017aba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017a76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a78:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017a7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017a7e:	fb04 fb0b 	mul.w	fp, r4, fp
 8017a82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a84:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017a8a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017a8e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017a92:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a9a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017a9e:	44de      	add	lr, fp
 8017aa0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017aa4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017aa8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017aac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017ab0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017ab4:	ea4e 040a 	orr.w	r4, lr, sl
 8017ab8:	940c      	str	r4, [sp, #48]	; 0x30
 8017aba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017abc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8017ac0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017ac4:	43c9      	mvns	r1, r1
 8017ac6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017aca:	9c08      	ldr	r4, [sp, #32]
 8017acc:	b2c9      	uxtb	r1, r1
 8017ace:	fb08 fc0c 	mul.w	ip, r8, ip
 8017ad2:	fb02 cc0e 	mla	ip, r2, lr, ip
 8017ad6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017ada:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017adc:	fb00 cc0e 	mla	ip, r0, lr, ip
 8017ae0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017ae4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017ae6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017aea:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017aee:	fb08 f80e 	mul.w	r8, r8, lr
 8017af2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017af6:	fb02 8303 	mla	r3, r2, r3, r8
 8017afa:	9a08      	ldr	r2, [sp, #32]
 8017afc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017b00:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017b04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b06:	fb00 330a 	mla	r3, r0, sl, r3
 8017b0a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8017b0e:	fb09 3900 	mla	r9, r9, r0, r3
 8017b12:	783b      	ldrb	r3, [r7, #0]
 8017b14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017b18:	fb03 f201 	mul.w	r2, r3, r1
 8017b1c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017b20:	1c53      	adds	r3, r2, #1
 8017b22:	ea4c 0c09 	orr.w	ip, ip, r9
 8017b26:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017b2a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8017b2e:	703b      	strb	r3, [r7, #0]
 8017b30:	787b      	ldrb	r3, [r7, #1]
 8017b32:	434b      	muls	r3, r1
 8017b34:	1c5a      	adds	r2, r3, #1
 8017b36:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017b3a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8017b3e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017b42:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017b46:	707b      	strb	r3, [r7, #1]
 8017b48:	78bb      	ldrb	r3, [r7, #2]
 8017b4a:	4359      	muls	r1, r3
 8017b4c:	1c4b      	adds	r3, r1, #1
 8017b4e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8017b52:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8017b56:	f887 c002 	strb.w	ip, [r7, #2]
 8017b5a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017b5c:	3703      	adds	r7, #3
 8017b5e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017b60:	441a      	add	r2, r3
 8017b62:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017b64:	441d      	add	r5, r3
 8017b66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017b68:	922f      	str	r2, [sp, #188]	; 0xbc
 8017b6a:	3b01      	subs	r3, #1
 8017b6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8017b6e:	e6b0      	b.n	80178d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8017b70:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017b72:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8017b74:	441c      	add	r4, r3
 8017b76:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017b78:	441d      	add	r5, r3
 8017b7a:	9b07      	ldr	r3, [sp, #28]
 8017b7c:	942f      	str	r4, [sp, #188]	; 0xbc
 8017b7e:	3b01      	subs	r3, #1
 8017b80:	9307      	str	r3, [sp, #28]
 8017b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b84:	3303      	adds	r3, #3
 8017b86:	930a      	str	r3, [sp, #40]	; 0x28
 8017b88:	e683      	b.n	8017892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b8a:	d026      	beq.n	8017bda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8017b8c:	9b07      	ldr	r3, [sp, #28]
 8017b8e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8017b90:	3b01      	subs	r3, #1
 8017b92:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8017b94:	fb00 4003 	mla	r0, r0, r3, r4
 8017b98:	1400      	asrs	r0, r0, #16
 8017b9a:	f53f ae97 	bmi.w	80178cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017b9e:	3901      	subs	r1, #1
 8017ba0:	4288      	cmp	r0, r1
 8017ba2:	f6bf ae93 	bge.w	80178cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017ba6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8017ba8:	fb01 5303 	mla	r3, r1, r3, r5
 8017bac:	141b      	asrs	r3, r3, #16
 8017bae:	f53f ae8d 	bmi.w	80178cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017bb2:	3a01      	subs	r2, #1
 8017bb4:	4293      	cmp	r3, r2
 8017bb6:	f6bf ae89 	bge.w	80178cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bbc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8017bc0:	f103 0e03 	add.w	lr, r3, #3
 8017bc4:	f1bb 0f00 	cmp.w	fp, #0
 8017bc8:	dc6d      	bgt.n	8017ca6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8017bca:	9b07      	ldr	r3, [sp, #28]
 8017bcc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017bd6:	4423      	add	r3, r4
 8017bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8017bda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	f340 81a0 	ble.w	8017f22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8017be2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017be6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017be8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017bec:	eef0 6a48 	vmov.f32	s13, s16
 8017bf0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017bf4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017bf8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017bfc:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8017c00:	eef0 6a68 	vmov.f32	s13, s17
 8017c04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c08:	ee16 5a90 	vmov	r5, s13
 8017c0c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017c10:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017c14:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017c18:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017c1c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017c20:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017c24:	ee18 2a10 	vmov	r2, s16
 8017c28:	eeb0 8a47 	vmov.f32	s16, s14
 8017c2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c30:	ee18 2a90 	vmov	r2, s17
 8017c34:	9331      	str	r3, [sp, #196]	; 0xc4
 8017c36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017c38:	eef0 8a67 	vmov.f32	s17, s15
 8017c3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c40:	9332      	str	r3, [sp, #200]	; 0xc8
 8017c42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017c44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017c46:	3b01      	subs	r3, #1
 8017c48:	9316      	str	r3, [sp, #88]	; 0x58
 8017c4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017c4c:	bf08      	it	eq
 8017c4e:	4613      	moveq	r3, r2
 8017c50:	9307      	str	r3, [sp, #28]
 8017c52:	e610      	b.n	8017876 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017c54:	2800      	cmp	r0, #0
 8017c56:	f43f ae82 	beq.w	801795e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017c5a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017c5e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017c62:	9108      	str	r1, [sp, #32]
 8017c64:	0e09      	lsrs	r1, r1, #24
 8017c66:	9110      	str	r1, [sp, #64]	; 0x40
 8017c68:	e679      	b.n	801795e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017c6a:	f113 0801 	adds.w	r8, r3, #1
 8017c6e:	f53f af74 	bmi.w	8017b5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c72:	4541      	cmp	r1, r8
 8017c74:	f6ff af71 	blt.w	8017b5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c78:	f11c 0801 	adds.w	r8, ip, #1
 8017c7c:	f53f af6d 	bmi.w	8017b5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c80:	45c6      	cmp	lr, r8
 8017c82:	f6ff af6a 	blt.w	8017b5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c86:	b209      	sxth	r1, r1
 8017c88:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8017c8c:	fa0f f38e 	sxth.w	r3, lr
 8017c90:	9100      	str	r1, [sp, #0]
 8017c92:	4639      	mov	r1, r7
 8017c94:	9301      	str	r3, [sp, #4]
 8017c96:	4633      	mov	r3, r6
 8017c98:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8017c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017ca0:	f7ff fc70 	bl	8017584 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8017ca4:	e759      	b.n	8017b5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017ca6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8017ca8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8017cac:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8017cae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017cb2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017cb4:	1427      	asrs	r7, r4, #16
 8017cb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017cb8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017cbc:	142b      	asrs	r3, r5, #16
 8017cbe:	fb01 7303 	mla	r3, r1, r3, r7
 8017cc2:	18e7      	adds	r7, r4, r3
 8017cc4:	5ce3      	ldrb	r3, [r4, r3]
 8017cc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017cca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8017cce:	2a00      	cmp	r2, #0
 8017cd0:	f000 811d 	beq.w	8017f0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8017cd4:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017cd8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8017cdc:	940d      	str	r4, [sp, #52]	; 0x34
 8017cde:	0e24      	lsrs	r4, r4, #24
 8017ce0:	9414      	str	r4, [sp, #80]	; 0x50
 8017ce2:	b170      	cbz	r0, 8017d02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017ce4:	eb07 0801 	add.w	r8, r7, r1
 8017ce8:	5c79      	ldrb	r1, [r7, r1]
 8017cea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017cee:	9109      	str	r1, [sp, #36]	; 0x24
 8017cf0:	0e09      	lsrs	r1, r1, #24
 8017cf2:	9111      	str	r1, [sp, #68]	; 0x44
 8017cf4:	f898 1001 	ldrb.w	r1, [r8, #1]
 8017cf8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017cfc:	910e      	str	r1, [sp, #56]	; 0x38
 8017cfe:	0e09      	lsrs	r1, r1, #24
 8017d00:	9115      	str	r1, [sp, #84]	; 0x54
 8017d02:	b292      	uxth	r2, r2
 8017d04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017d06:	b280      	uxth	r0, r0
 8017d08:	fb02 f900 	mul.w	r9, r2, r0
 8017d0c:	0112      	lsls	r2, r2, #4
 8017d0e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017d12:	eba2 0809 	sub.w	r8, r2, r9
 8017d16:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8017d1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d1c:	b280      	uxth	r0, r0
 8017d1e:	fa1f f888 	uxth.w	r8, r8
 8017d22:	1a09      	subs	r1, r1, r0
 8017d24:	fb08 f202 	mul.w	r2, r8, r2
 8017d28:	b289      	uxth	r1, r1
 8017d2a:	fb01 220c 	mla	r2, r1, ip, r2
 8017d2e:	fb00 2204 	mla	r2, r0, r4, r2
 8017d32:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017d34:	fb09 2204 	mla	r2, r9, r4, r2
 8017d38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017d3c:	2a00      	cmp	r2, #0
 8017d3e:	f000 80db 	beq.w	8017ef8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8017d42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8017d46:	d019      	beq.n	8017d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8017d48:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017d4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017d50:	fb0c fa0a 	mul.w	sl, ip, sl
 8017d54:	fb0c fc03 	mul.w	ip, ip, r3
 8017d58:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017d5c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017d60:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017d64:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017d68:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8017d6c:	4453      	add	r3, sl
 8017d6e:	0a3f      	lsrs	r7, r7, #8
 8017d70:	0a1b      	lsrs	r3, r3, #8
 8017d72:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017d76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017d7a:	433b      	orrs	r3, r7
 8017d7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d7e:	2cff      	cmp	r4, #255	; 0xff
 8017d80:	d020      	beq.n	8017dc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8017d82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017d84:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017d88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d8a:	4367      	muls	r7, r4
 8017d8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017d8e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017d92:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017d96:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d98:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017d9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017da0:	fb04 fa0a 	mul.w	sl, r4, sl
 8017da4:	44bc      	add	ip, r7
 8017da6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017daa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017dae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017db2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017db6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017dba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017dbe:	ea4c 040a 	orr.w	r4, ip, sl
 8017dc2:	940d      	str	r4, [sp, #52]	; 0x34
 8017dc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017dc6:	2cff      	cmp	r4, #255	; 0xff
 8017dc8:	d020      	beq.n	8017e0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8017dca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017dcc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017dd0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017dd2:	4367      	muls	r7, r4
 8017dd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017dd6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017dda:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017dde:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017de0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017de4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017de8:	fb04 fa0a 	mul.w	sl, r4, sl
 8017dec:	44bc      	add	ip, r7
 8017dee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017df2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017df6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017dfa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017dfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017e02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017e06:	ea4c 040a 	orr.w	r4, ip, sl
 8017e0a:	9409      	str	r4, [sp, #36]	; 0x24
 8017e0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017e0e:	2cff      	cmp	r4, #255	; 0xff
 8017e10:	d020      	beq.n	8017e54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8017e12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017e14:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017e18:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017e1a:	4367      	muls	r7, r4
 8017e1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017e1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017e22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017e26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017e28:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017e2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017e30:	fb04 fa0a 	mul.w	sl, r4, sl
 8017e34:	44bc      	add	ip, r7
 8017e36:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017e3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017e3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017e42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017e46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017e4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017e4e:	ea4c 040a 	orr.w	r4, ip, sl
 8017e52:	940e      	str	r4, [sp, #56]	; 0x38
 8017e54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e56:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017e5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017e5e:	43d2      	mvns	r2, r2
 8017e60:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017e64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017e66:	b2d2      	uxtb	r2, r2
 8017e68:	fb08 f707 	mul.w	r7, r8, r7
 8017e6c:	fb01 770c 	mla	r7, r1, ip, r7
 8017e70:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017e74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017e76:	fb00 770c 	mla	r7, r0, ip, r7
 8017e7a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017e7e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e80:	fb09 770c 	mla	r7, r9, ip, r7
 8017e84:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017e88:	fb08 f80c 	mul.w	r8, r8, ip
 8017e8c:	0a3f      	lsrs	r7, r7, #8
 8017e8e:	fb01 8303 	mla	r3, r1, r3, r8
 8017e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e94:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017e98:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8017e9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017e9e:	fb00 330a 	mla	r3, r0, sl, r3
 8017ea2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8017ea6:	fb09 3c0c 	mla	ip, r9, ip, r3
 8017eaa:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8017eae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017eb2:	fb03 f102 	mul.w	r1, r3, r2
 8017eb6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017eba:	1c4b      	adds	r3, r1, #1
 8017ebc:	ea47 070c 	orr.w	r7, r7, ip
 8017ec0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017ec4:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8017ec8:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8017ecc:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8017ed0:	4353      	muls	r3, r2
 8017ed2:	1c59      	adds	r1, r3, #1
 8017ed4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017ed8:	0a3b      	lsrs	r3, r7, #8
 8017eda:	0c3f      	lsrs	r7, r7, #16
 8017edc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017ee0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8017ee4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8017ee8:	435a      	muls	r2, r3
 8017eea:	1c53      	adds	r3, r2, #1
 8017eec:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017ef0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8017ef4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8017ef8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017efa:	f10e 0e03 	add.w	lr, lr, #3
 8017efe:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017f00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017f04:	441a      	add	r2, r3
 8017f06:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017f08:	922f      	str	r2, [sp, #188]	; 0xbc
 8017f0a:	441d      	add	r5, r3
 8017f0c:	e65a      	b.n	8017bc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	f43f aef7 	beq.w	8017d02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017f14:	5c79      	ldrb	r1, [r7, r1]
 8017f16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017f1a:	9109      	str	r1, [sp, #36]	; 0x24
 8017f1c:	0e09      	lsrs	r1, r1, #24
 8017f1e:	9111      	str	r1, [sp, #68]	; 0x44
 8017f20:	e6ef      	b.n	8017d02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017f22:	b01b      	add	sp, #108	; 0x6c
 8017f24:	ecbd 8b0a 	vpop	{d8-d12}
 8017f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8017f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f30:	b08d      	sub	sp, #52	; 0x34
 8017f32:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8017f36:	9103      	str	r1, [sp, #12]
 8017f38:	fb07 5803 	mla	r8, r7, r3, r5
 8017f3c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8017f40:	9803      	ldr	r0, [sp, #12]
 8017f42:	2f00      	cmp	r7, #0
 8017f44:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f46:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017f4a:	9903      	ldr	r1, [sp, #12]
 8017f4c:	9c03      	ldr	r4, [sp, #12]
 8017f4e:	eb02 0608 	add.w	r6, r2, r8
 8017f52:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8017f56:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8017f5a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017f5e:	7809      	ldrb	r1, [r1, #0]
 8017f60:	7840      	ldrb	r0, [r0, #1]
 8017f62:	78a4      	ldrb	r4, [r4, #2]
 8017f64:	db51      	blt.n	801800a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8017f66:	45be      	cmp	lr, r7
 8017f68:	dd4f      	ble.n	801800a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8017f6a:	2d00      	cmp	r5, #0
 8017f6c:	db49      	blt.n	8018002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8017f6e:	42ab      	cmp	r3, r5
 8017f70:	dd47      	ble.n	8018002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8017f72:	f812 2008 	ldrb.w	r2, [r2, r8]
 8017f76:	9204      	str	r2, [sp, #16]
 8017f78:	7872      	ldrb	r2, [r6, #1]
 8017f7a:	9205      	str	r2, [sp, #20]
 8017f7c:	78b2      	ldrb	r2, [r6, #2]
 8017f7e:	9206      	str	r2, [sp, #24]
 8017f80:	1c6a      	adds	r2, r5, #1
 8017f82:	d449      	bmi.n	8018018 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8017f84:	4293      	cmp	r3, r2
 8017f86:	dd47      	ble.n	8018018 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8017f88:	f1bc 0f00 	cmp.w	ip, #0
 8017f8c:	d044      	beq.n	8018018 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8017f8e:	7972      	ldrb	r2, [r6, #5]
 8017f90:	f896 b003 	ldrb.w	fp, [r6, #3]
 8017f94:	f896 a004 	ldrb.w	sl, [r6, #4]
 8017f98:	9201      	str	r2, [sp, #4]
 8017f9a:	3701      	adds	r7, #1
 8017f9c:	d444      	bmi.n	8018028 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8017f9e:	45be      	cmp	lr, r7
 8017fa0:	dd42      	ble.n	8018028 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8017fa2:	f1b9 0f00 	cmp.w	r9, #0
 8017fa6:	f000 80c1 	beq.w	801812c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8017faa:	2d00      	cmp	r5, #0
 8017fac:	db38      	blt.n	8018020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8017fae:	42ab      	cmp	r3, r5
 8017fb0:	dd36      	ble.n	8018020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8017fb2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017fb6:	f816 8002 	ldrb.w	r8, [r6, r2]
 8017fba:	2203      	movs	r2, #3
 8017fbc:	fb03 6702 	mla	r7, r3, r2, r6
 8017fc0:	fb03 6202 	mla	r2, r3, r2, r6
 8017fc4:	787f      	ldrb	r7, [r7, #1]
 8017fc6:	f892 e002 	ldrb.w	lr, [r2, #2]
 8017fca:	9702      	str	r7, [sp, #8]
 8017fcc:	3501      	adds	r5, #1
 8017fce:	d432      	bmi.n	8018036 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8017fd0:	42ab      	cmp	r3, r5
 8017fd2:	dd30      	ble.n	8018036 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8017fd4:	f1bc 0f00 	cmp.w	ip, #0
 8017fd8:	d031      	beq.n	801803e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8017fda:	2703      	movs	r7, #3
 8017fdc:	fb13 7207 	smlabb	r2, r3, r7, r7
 8017fe0:	5cb5      	ldrb	r5, [r6, r2]
 8017fe2:	fb03 6207 	mla	r2, r3, r7, r6
 8017fe6:	fb03 6307 	mla	r3, r3, r7, r6
 8017fea:	7912      	ldrb	r2, [r2, #4]
 8017fec:	795e      	ldrb	r6, [r3, #5]
 8017fee:	f1bc 0f0f 	cmp.w	ip, #15
 8017ff2:	d927      	bls.n	8018044 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8017ff4:	4b53      	ldr	r3, [pc, #332]	; (8018144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8017ff6:	f240 1157 	movw	r1, #343	; 0x157
 8017ffa:	4a53      	ldr	r2, [pc, #332]	; (8018148 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8017ffc:	4853      	ldr	r0, [pc, #332]	; (801814c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8017ffe:	f003 f84d 	bl	801b09c <__assert_func>
 8018002:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8018006:	9104      	str	r1, [sp, #16]
 8018008:	e7ba      	b.n	8017f80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801800a:	9401      	str	r4, [sp, #4]
 801800c:	4682      	mov	sl, r0
 801800e:	468b      	mov	fp, r1
 8018010:	9104      	str	r1, [sp, #16]
 8018012:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8018016:	e7c0      	b.n	8017f9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8018018:	9401      	str	r4, [sp, #4]
 801801a:	4682      	mov	sl, r0
 801801c:	468b      	mov	fp, r1
 801801e:	e7bc      	b.n	8017f9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8018020:	46a6      	mov	lr, r4
 8018022:	9002      	str	r0, [sp, #8]
 8018024:	4688      	mov	r8, r1
 8018026:	e7d1      	b.n	8017fcc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8018028:	4626      	mov	r6, r4
 801802a:	4602      	mov	r2, r0
 801802c:	460d      	mov	r5, r1
 801802e:	46a6      	mov	lr, r4
 8018030:	9002      	str	r0, [sp, #8]
 8018032:	4688      	mov	r8, r1
 8018034:	e7db      	b.n	8017fee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8018036:	4626      	mov	r6, r4
 8018038:	4602      	mov	r2, r0
 801803a:	460d      	mov	r5, r1
 801803c:	e7d7      	b.n	8017fee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801803e:	4626      	mov	r6, r4
 8018040:	4602      	mov	r2, r0
 8018042:	460d      	mov	r5, r1
 8018044:	f1b9 0f0f 	cmp.w	r9, #15
 8018048:	d8d4      	bhi.n	8017ff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801804a:	fa1f f38c 	uxth.w	r3, ip
 801804e:	fa1f fc89 	uxth.w	ip, r9
 8018052:	fb03 f70c 	mul.w	r7, r3, ip
 8018056:	011b      	lsls	r3, r3, #4
 8018058:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801805c:	9707      	str	r7, [sp, #28]
 801805e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8018062:	fa1f fc8c 	uxth.w	ip, ip
 8018066:	eba7 070c 	sub.w	r7, r7, ip
 801806a:	b2bf      	uxth	r7, r7
 801806c:	9709      	str	r7, [sp, #36]	; 0x24
 801806e:	9f07      	ldr	r7, [sp, #28]
 8018070:	1bdb      	subs	r3, r3, r7
 8018072:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8018076:	b29b      	uxth	r3, r3
 8018078:	9708      	str	r7, [sp, #32]
 801807a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801807c:	930a      	str	r3, [sp, #40]	; 0x28
 801807e:	ea6f 0907 	mvn.w	r9, r7
 8018082:	fb03 fb0b 	mul.w	fp, r3, fp
 8018086:	9f04      	ldr	r7, [sp, #16]
 8018088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801808a:	fa5f f989 	uxtb.w	r9, r9
 801808e:	fb03 bb07 	mla	fp, r3, r7, fp
 8018092:	9f07      	ldr	r7, [sp, #28]
 8018094:	fb11 f109 	smulbb	r1, r1, r9
 8018098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801809a:	fb0c b808 	mla	r8, ip, r8, fp
 801809e:	fb10 f009 	smulbb	r0, r0, r9
 80180a2:	fb14 f409 	smulbb	r4, r4, r9
 80180a6:	fb07 8805 	mla	r8, r7, r5, r8
 80180aa:	9d08      	ldr	r5, [sp, #32]
 80180ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80180ae:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80180b2:	fb08 1805 	mla	r8, r8, r5, r1
 80180b6:	9d05      	ldr	r5, [sp, #20]
 80180b8:	fa1f f888 	uxth.w	r8, r8
 80180bc:	f108 0101 	add.w	r1, r8, #1
 80180c0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80180c4:	9903      	ldr	r1, [sp, #12]
 80180c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80180ca:	f881 8000 	strb.w	r8, [r1]
 80180ce:	fb03 f10a 	mul.w	r1, r3, sl
 80180d2:	fb07 1105 	mla	r1, r7, r5, r1
 80180d6:	9d02      	ldr	r5, [sp, #8]
 80180d8:	fb0c 1105 	mla	r1, ip, r5, r1
 80180dc:	9d07      	ldr	r5, [sp, #28]
 80180de:	fb05 1102 	mla	r1, r5, r2, r1
 80180e2:	9a08      	ldr	r2, [sp, #32]
 80180e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80180e8:	fb01 0102 	mla	r1, r1, r2, r0
 80180ec:	9a03      	ldr	r2, [sp, #12]
 80180ee:	b289      	uxth	r1, r1
 80180f0:	1c48      	adds	r0, r1, #1
 80180f2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80180f6:	1209      	asrs	r1, r1, #8
 80180f8:	7051      	strb	r1, [r2, #1]
 80180fa:	9a01      	ldr	r2, [sp, #4]
 80180fc:	4353      	muls	r3, r2
 80180fe:	9a06      	ldr	r2, [sp, #24]
 8018100:	fb07 3702 	mla	r7, r7, r2, r3
 8018104:	9b08      	ldr	r3, [sp, #32]
 8018106:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801810a:	fb05 c606 	mla	r6, r5, r6, ip
 801810e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018112:	fb06 4603 	mla	r6, r6, r3, r4
 8018116:	9b03      	ldr	r3, [sp, #12]
 8018118:	b2b6      	uxth	r6, r6
 801811a:	f106 0e01 	add.w	lr, r6, #1
 801811e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8018122:	1236      	asrs	r6, r6, #8
 8018124:	709e      	strb	r6, [r3, #2]
 8018126:	b00d      	add	sp, #52	; 0x34
 8018128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801812c:	f1bc 0f0f 	cmp.w	ip, #15
 8018130:	f63f af60 	bhi.w	8017ff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8018134:	4626      	mov	r6, r4
 8018136:	4602      	mov	r2, r0
 8018138:	460d      	mov	r5, r1
 801813a:	46a6      	mov	lr, r4
 801813c:	9002      	str	r0, [sp, #8]
 801813e:	4688      	mov	r8, r1
 8018140:	e783      	b.n	801804a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8018142:	bf00      	nop
 8018144:	0801f137 	.word	0x0801f137
 8018148:	0801f5ee 	.word	0x0801f5ee
 801814c:	0801f1bf 	.word	0x0801f1bf

08018150 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018154:	ed2d 8b08 	vpush	{d8-d11}
 8018158:	b09f      	sub	sp, #124	; 0x7c
 801815a:	eeb0 aa40 	vmov.f32	s20, s0
 801815e:	eef0 9a60 	vmov.f32	s19, s1
 8018162:	920e      	str	r2, [sp, #56]	; 0x38
 8018164:	eeb0 9a41 	vmov.f32	s18, s2
 8018168:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801816a:	eeb0 8a62 	vmov.f32	s16, s5
 801816e:	9307      	str	r3, [sp, #28]
 8018170:	eef0 8a43 	vmov.f32	s17, s6
 8018174:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8018178:	eef0 ba44 	vmov.f32	s23, s8
 801817c:	901d      	str	r0, [sp, #116]	; 0x74
 801817e:	eeb0 ba64 	vmov.f32	s22, s9
 8018182:	930c      	str	r3, [sp, #48]	; 0x30
 8018184:	eef0 aa45 	vmov.f32	s21, s10
 8018188:	6850      	ldr	r0, [r2, #4]
 801818a:	910b      	str	r1, [sp, #44]	; 0x2c
 801818c:	6812      	ldr	r2, [r2, #0]
 801818e:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8018192:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8018196:	fb00 1303 	mla	r3, r0, r3, r1
 801819a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801819e:	18d3      	adds	r3, r2, r3
 80181a0:	9308      	str	r3, [sp, #32]
 80181a2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	930a      	str	r3, [sp, #40]	; 0x28
 80181a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80181aa:	43db      	mvns	r3, r3
 80181ac:	b2db      	uxtb	r3, r3
 80181ae:	9309      	str	r3, [sp, #36]	; 0x24
 80181b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	dc03      	bgt.n	80181be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80181b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	f340 81f5 	ble.w	80185a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80181be:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80181c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80181c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80181c8:	1e48      	subs	r0, r1, #1
 80181ca:	1e54      	subs	r4, r2, #1
 80181cc:	9b07      	ldr	r3, [sp, #28]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	f340 80d5 	ble.w	801837e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80181d4:	ea5f 452a 	movs.w	r5, sl, asr #16
 80181d8:	ea4f 4328 	mov.w	r3, r8, asr #16
 80181dc:	d406      	bmi.n	80181ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80181de:	4285      	cmp	r5, r0
 80181e0:	da04      	bge.n	80181ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	db02      	blt.n	80181ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80181e6:	42a3      	cmp	r3, r4
 80181e8:	f2c0 80ca 	blt.w	8018380 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80181ec:	3501      	adds	r5, #1
 80181ee:	f100 80bb 	bmi.w	8018368 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80181f2:	42a9      	cmp	r1, r5
 80181f4:	f2c0 80b8 	blt.w	8018368 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80181f8:	3301      	adds	r3, #1
 80181fa:	f100 80b5 	bmi.w	8018368 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80181fe:	429a      	cmp	r2, r3
 8018200:	f2c0 80b2 	blt.w	8018368 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018204:	9b07      	ldr	r3, [sp, #28]
 8018206:	9d08      	ldr	r5, [sp, #32]
 8018208:	930d      	str	r3, [sp, #52]	; 0x34
 801820a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801820c:	2b00      	cmp	r3, #0
 801820e:	f340 80d6 	ble.w	80183be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8018212:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8018214:	ea4f 4428 	mov.w	r4, r8, asr #16
 8018218:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801821a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801821e:	68c6      	ldr	r6, [r0, #12]
 8018220:	ea5f 402a 	movs.w	r0, sl, asr #16
 8018224:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8018228:	689b      	ldr	r3, [r3, #8]
 801822a:	f100 810f 	bmi.w	801844c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801822e:	1e5f      	subs	r7, r3, #1
 8018230:	42b8      	cmp	r0, r7
 8018232:	f280 810b 	bge.w	801844c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018236:	2c00      	cmp	r4, #0
 8018238:	f2c0 8108 	blt.w	801844c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801823c:	1e77      	subs	r7, r6, #1
 801823e:	42bc      	cmp	r4, r7
 8018240:	f280 8104 	bge.w	801844c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018244:	b21b      	sxth	r3, r3
 8018246:	fb04 0003 	mla	r0, r4, r3, r0
 801824a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801824c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018250:	1826      	adds	r6, r4, r0
 8018252:	5c24      	ldrb	r4, [r4, r0]
 8018254:	78b7      	ldrb	r7, [r6, #2]
 8018256:	7870      	ldrb	r0, [r6, #1]
 8018258:	970f      	str	r7, [sp, #60]	; 0x3c
 801825a:	7977      	ldrb	r7, [r6, #5]
 801825c:	f896 e003 	ldrb.w	lr, [r6, #3]
 8018260:	f896 c004 	ldrb.w	ip, [r6, #4]
 8018264:	9710      	str	r7, [sp, #64]	; 0x40
 8018266:	b1c9      	cbz	r1, 801829c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018268:	f04f 0b03 	mov.w	fp, #3
 801826c:	f06f 0904 	mvn.w	r9, #4
 8018270:	3605      	adds	r6, #5
 8018272:	fb13 930b 	smlabb	r3, r3, fp, r9
 8018276:	eb06 0b03 	add.w	fp, r6, r3
 801827a:	5cf3      	ldrb	r3, [r6, r3]
 801827c:	9311      	str	r3, [sp, #68]	; 0x44
 801827e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8018282:	9313      	str	r3, [sp, #76]	; 0x4c
 8018284:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8018288:	9315      	str	r3, [sp, #84]	; 0x54
 801828a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801828e:	9312      	str	r3, [sp, #72]	; 0x48
 8018290:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8018294:	9314      	str	r3, [sp, #80]	; 0x50
 8018296:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801829a:	9316      	str	r3, [sp, #88]	; 0x58
 801829c:	b292      	uxth	r2, r2
 801829e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80182a0:	b289      	uxth	r1, r1
 80182a2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80182a6:	fb02 f601 	mul.w	r6, r2, r1
 80182aa:	0112      	lsls	r2, r2, #4
 80182ac:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80182b0:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80182b4:	1b92      	subs	r2, r2, r6
 80182b6:	b289      	uxth	r1, r1
 80182b8:	b292      	uxth	r2, r2
 80182ba:	eba9 0901 	sub.w	r9, r9, r1
 80182be:	fb02 fe0e 	mul.w	lr, r2, lr
 80182c2:	fa1f f989 	uxth.w	r9, r9
 80182c6:	fb02 fc0c 	mul.w	ip, r2, ip
 80182ca:	fb09 e404 	mla	r4, r9, r4, lr
 80182ce:	f895 e000 	ldrb.w	lr, [r5]
 80182d2:	fb09 c000 	mla	r0, r9, r0, ip
 80182d6:	fb01 4407 	mla	r4, r1, r7, r4
 80182da:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80182dc:	fb06 4407 	mla	r4, r6, r7, r4
 80182e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80182e2:	fb1e fe07 	smulbb	lr, lr, r7
 80182e6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80182ea:	fb04 e403 	mla	r4, r4, r3, lr
 80182ee:	b2a4      	uxth	r4, r4
 80182f0:	f104 0e01 	add.w	lr, r4, #1
 80182f4:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80182f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182fa:	fb01 0004 	mla	r0, r1, r4, r0
 80182fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018300:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018304:	fb06 0004 	mla	r0, r6, r4, r0
 8018308:	786c      	ldrb	r4, [r5, #1]
 801830a:	f885 e000 	strb.w	lr, [r5]
 801830e:	fb14 f407 	smulbb	r4, r4, r7
 8018312:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018316:	fb00 4003 	mla	r0, r0, r3, r4
 801831a:	b280      	uxth	r0, r0
 801831c:	1c44      	adds	r4, r0, #1
 801831e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8018322:	1200      	asrs	r0, r0, #8
 8018324:	7068      	strb	r0, [r5, #1]
 8018326:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018328:	4342      	muls	r2, r0
 801832a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801832c:	fb09 2200 	mla	r2, r9, r0, r2
 8018330:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018332:	fb01 2100 	mla	r1, r1, r0, r2
 8018336:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018338:	fb06 1602 	mla	r6, r6, r2, r1
 801833c:	78a9      	ldrb	r1, [r5, #2]
 801833e:	fb11 f107 	smulbb	r1, r1, r7
 8018342:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018346:	fb06 1303 	mla	r3, r6, r3, r1
 801834a:	b29b      	uxth	r3, r3
 801834c:	1c5e      	adds	r6, r3, #1
 801834e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018352:	121b      	asrs	r3, r3, #8
 8018354:	70ab      	strb	r3, [r5, #2]
 8018356:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018358:	3503      	adds	r5, #3
 801835a:	449a      	add	sl, r3
 801835c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801835e:	4498      	add	r8, r3
 8018360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018362:	3b01      	subs	r3, #1
 8018364:	930d      	str	r3, [sp, #52]	; 0x34
 8018366:	e750      	b.n	801820a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018368:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801836a:	449a      	add	sl, r3
 801836c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801836e:	4498      	add	r8, r3
 8018370:	9b07      	ldr	r3, [sp, #28]
 8018372:	3b01      	subs	r3, #1
 8018374:	9307      	str	r3, [sp, #28]
 8018376:	9b08      	ldr	r3, [sp, #32]
 8018378:	3303      	adds	r3, #3
 801837a:	9308      	str	r3, [sp, #32]
 801837c:	e726      	b.n	80181cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801837e:	d026      	beq.n	80183ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018380:	9b07      	ldr	r3, [sp, #28]
 8018382:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8018384:	3b01      	subs	r3, #1
 8018386:	fb00 a003 	mla	r0, r0, r3, sl
 801838a:	1400      	asrs	r0, r0, #16
 801838c:	f53f af3a 	bmi.w	8018204 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018390:	3901      	subs	r1, #1
 8018392:	4288      	cmp	r0, r1
 8018394:	f6bf af36 	bge.w	8018204 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018398:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801839a:	fb01 8303 	mla	r3, r1, r3, r8
 801839e:	141b      	asrs	r3, r3, #16
 80183a0:	f53f af30 	bmi.w	8018204 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80183a4:	3a01      	subs	r2, #1
 80183a6:	4293      	cmp	r3, r2
 80183a8:	f6bf af2c 	bge.w	8018204 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80183ac:	9b08      	ldr	r3, [sp, #32]
 80183ae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80183b2:	1cdd      	adds	r5, r3, #3
 80183b4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80183b8:	f1bc 0f00 	cmp.w	ip, #0
 80183bc:	dc5f      	bgt.n	801847e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80183be:	9b07      	ldr	r3, [sp, #28]
 80183c0:	9a08      	ldr	r2, [sp, #32]
 80183c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80183ca:	441a      	add	r2, r3
 80183cc:	9208      	str	r2, [sp, #32]
 80183ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	f340 80e9 	ble.w	80185a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80183d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80183da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80183dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80183e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80183e4:	eef0 6a48 	vmov.f32	s13, s16
 80183e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80183ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80183f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80183f4:	ee16 aa90 	vmov	sl, s13
 80183f8:	eef0 6a68 	vmov.f32	s13, s17
 80183fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018400:	ee16 8a90 	vmov	r8, s13
 8018404:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018408:	ee69 7a27 	vmul.f32	s15, s18, s15
 801840c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018410:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018414:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018418:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801841c:	ee18 2a10 	vmov	r2, s16
 8018420:	eeb0 8a47 	vmov.f32	s16, s14
 8018424:	fb92 f3f3 	sdiv	r3, r2, r3
 8018428:	ee18 2a90 	vmov	r2, s17
 801842c:	9333      	str	r3, [sp, #204]	; 0xcc
 801842e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018430:	eef0 8a67 	vmov.f32	s17, s15
 8018434:	fb92 f3f3 	sdiv	r3, r2, r3
 8018438:	9334      	str	r3, [sp, #208]	; 0xd0
 801843a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801843c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801843e:	3b01      	subs	r3, #1
 8018440:	930b      	str	r3, [sp, #44]	; 0x2c
 8018442:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018444:	bf08      	it	eq
 8018446:	4613      	moveq	r3, r2
 8018448:	9307      	str	r3, [sp, #28]
 801844a:	e6b1      	b.n	80181b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801844c:	1c47      	adds	r7, r0, #1
 801844e:	d482      	bmi.n	8018356 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018450:	42bb      	cmp	r3, r7
 8018452:	db80      	blt.n	8018356 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018454:	1c67      	adds	r7, r4, #1
 8018456:	f53f af7e 	bmi.w	8018356 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801845a:	42be      	cmp	r6, r7
 801845c:	f6ff af7b 	blt.w	8018356 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018460:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018462:	b236      	sxth	r6, r6
 8018464:	9001      	str	r0, [sp, #4]
 8018466:	b21b      	sxth	r3, r3
 8018468:	9600      	str	r6, [sp, #0]
 801846a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801846c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8018470:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018474:	4629      	mov	r1, r5
 8018476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018478:	f7ff fd58 	bl	8017f2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801847c:	e76b      	b.n	8018356 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801847e:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8018480:	ea4f 402a 	mov.w	r0, sl, asr #16
 8018484:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8018488:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801848c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8018490:	ea4f 4128 	mov.w	r1, r8, asr #16
 8018494:	fb07 0101 	mla	r1, r7, r1, r0
 8018498:	980a      	ldr	r0, [sp, #40]	; 0x28
 801849a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801849e:	1844      	adds	r4, r0, r1
 80184a0:	5c40      	ldrb	r0, [r0, r1]
 80184a2:	78a6      	ldrb	r6, [r4, #2]
 80184a4:	7861      	ldrb	r1, [r4, #1]
 80184a6:	960f      	str	r6, [sp, #60]	; 0x3c
 80184a8:	78e6      	ldrb	r6, [r4, #3]
 80184aa:	910d      	str	r1, [sp, #52]	; 0x34
 80184ac:	9610      	str	r6, [sp, #64]	; 0x40
 80184ae:	f894 9004 	ldrb.w	r9, [r4, #4]
 80184b2:	f894 b005 	ldrb.w	fp, [r4, #5]
 80184b6:	b192      	cbz	r2, 80184de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80184b8:	f06f 0604 	mvn.w	r6, #4
 80184bc:	2103      	movs	r1, #3
 80184be:	3405      	adds	r4, #5
 80184c0:	fb17 6701 	smlabb	r7, r7, r1, r6
 80184c4:	19e6      	adds	r6, r4, r7
 80184c6:	5de4      	ldrb	r4, [r4, r7]
 80184c8:	9417      	str	r4, [sp, #92]	; 0x5c
 80184ca:	7874      	ldrb	r4, [r6, #1]
 80184cc:	9419      	str	r4, [sp, #100]	; 0x64
 80184ce:	78b4      	ldrb	r4, [r6, #2]
 80184d0:	941b      	str	r4, [sp, #108]	; 0x6c
 80184d2:	78f4      	ldrb	r4, [r6, #3]
 80184d4:	9418      	str	r4, [sp, #96]	; 0x60
 80184d6:	7934      	ldrb	r4, [r6, #4]
 80184d8:	941a      	str	r4, [sp, #104]	; 0x68
 80184da:	7974      	ldrb	r4, [r6, #5]
 80184dc:	941c      	str	r4, [sp, #112]	; 0x70
 80184de:	b29b      	uxth	r3, r3
 80184e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80184e2:	b292      	uxth	r2, r2
 80184e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80184e6:	3503      	adds	r5, #3
 80184e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80184ec:	fb03 f402 	mul.w	r4, r3, r2
 80184f0:	011b      	lsls	r3, r3, #4
 80184f2:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80184f6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80184fa:	1b1b      	subs	r3, r3, r4
 80184fc:	b292      	uxth	r2, r2
 80184fe:	b29b      	uxth	r3, r3
 8018500:	1ab6      	subs	r6, r6, r2
 8018502:	435f      	muls	r7, r3
 8018504:	b2b6      	uxth	r6, r6
 8018506:	fb03 f909 	mul.w	r9, r3, r9
 801850a:	fb03 fb0b 	mul.w	fp, r3, fp
 801850e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018510:	fb06 7000 	mla	r0, r6, r0, r7
 8018514:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018516:	fb06 bb03 	mla	fp, r6, r3, fp
 801851a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801851c:	fb02 0007 	mla	r0, r2, r7, r0
 8018520:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8018522:	fb02 bb03 	mla	fp, r2, r3, fp
 8018526:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018528:	fb04 0007 	mla	r0, r4, r7, r0
 801852c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8018530:	fb17 f701 	smulbb	r7, r7, r1
 8018534:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018538:	990d      	ldr	r1, [sp, #52]	; 0x34
 801853a:	fb00 700e 	mla	r0, r0, lr, r7
 801853e:	fb06 9101 	mla	r1, r6, r1, r9
 8018542:	b280      	uxth	r0, r0
 8018544:	1c47      	adds	r7, r0, #1
 8018546:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801854a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801854c:	1200      	asrs	r0, r0, #8
 801854e:	f805 0c06 	strb.w	r0, [r5, #-6]
 8018552:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018554:	fb02 1100 	mla	r1, r2, r0, r1
 8018558:	981a      	ldr	r0, [sp, #104]	; 0x68
 801855a:	fb04 1100 	mla	r1, r4, r0, r1
 801855e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8018562:	fb04 b403 	mla	r4, r4, r3, fp
 8018566:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801856a:	fb10 f007 	smulbb	r0, r0, r7
 801856e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018572:	fb13 f307 	smulbb	r3, r3, r7
 8018576:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801857a:	fb01 010e 	mla	r1, r1, lr, r0
 801857e:	fb04 340e 	mla	r4, r4, lr, r3
 8018582:	b289      	uxth	r1, r1
 8018584:	b2a4      	uxth	r4, r4
 8018586:	1c48      	adds	r0, r1, #1
 8018588:	1c63      	adds	r3, r4, #1
 801858a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801858e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8018592:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018594:	1209      	asrs	r1, r1, #8
 8018596:	1224      	asrs	r4, r4, #8
 8018598:	449a      	add	sl, r3
 801859a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801859c:	f805 1c05 	strb.w	r1, [r5, #-5]
 80185a0:	f805 4c04 	strb.w	r4, [r5, #-4]
 80185a4:	4498      	add	r8, r3
 80185a6:	e707      	b.n	80183b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80185a8:	b01f      	add	sp, #124	; 0x7c
 80185aa:	ecbd 8b08 	vpop	{d8-d11}
 80185ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080185b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80185b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b8:	b085      	sub	sp, #20
 80185ba:	784d      	ldrb	r5, [r1, #1]
 80185bc:	788e      	ldrb	r6, [r1, #2]
 80185be:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80185c2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80185c6:	9403      	str	r4, [sp, #12]
 80185c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80185cc:	780c      	ldrb	r4, [r1, #0]
 80185ce:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80185d2:	fb07 ce03 	mla	lr, r7, r3, ip
 80185d6:	2f00      	cmp	r7, #0
 80185d8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80185dc:	eb02 0b0e 	add.w	fp, r2, lr
 80185e0:	db56      	blt.n	8018690 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80185e2:	45b9      	cmp	r9, r7
 80185e4:	dd54      	ble.n	8018690 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80185e6:	f1bc 0f00 	cmp.w	ip, #0
 80185ea:	db4d      	blt.n	8018688 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80185ec:	4563      	cmp	r3, ip
 80185ee:	dd4b      	ble.n	8018688 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80185f0:	f812 200e 	ldrb.w	r2, [r2, lr]
 80185f4:	9200      	str	r2, [sp, #0]
 80185f6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80185fa:	9201      	str	r2, [sp, #4]
 80185fc:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8018600:	9202      	str	r2, [sp, #8]
 8018602:	f11c 0201 	adds.w	r2, ip, #1
 8018606:	d44a      	bmi.n	801869e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8018608:	4293      	cmp	r3, r2
 801860a:	dd48      	ble.n	801869e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801860c:	2800      	cmp	r0, #0
 801860e:	d046      	beq.n	801869e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8018610:	f89b e003 	ldrb.w	lr, [fp, #3]
 8018614:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8018618:	f89b a005 	ldrb.w	sl, [fp, #5]
 801861c:	3701      	adds	r7, #1
 801861e:	d446      	bmi.n	80186ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8018620:	45b9      	cmp	r9, r7
 8018622:	dd44      	ble.n	80186ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8018624:	9a03      	ldr	r2, [sp, #12]
 8018626:	2a00      	cmp	r2, #0
 8018628:	d045      	beq.n	80186b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801862a:	f1bc 0f00 	cmp.w	ip, #0
 801862e:	db3a      	blt.n	80186a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8018630:	4563      	cmp	r3, ip
 8018632:	dd38      	ble.n	80186a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8018634:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018638:	f04f 0903 	mov.w	r9, #3
 801863c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8018640:	fb03 b209 	mla	r2, r3, r9, fp
 8018644:	fb03 b909 	mla	r9, r3, r9, fp
 8018648:	7852      	ldrb	r2, [r2, #1]
 801864a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801864e:	f11c 0c01 	adds.w	ip, ip, #1
 8018652:	d40d      	bmi.n	8018670 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018654:	4563      	cmp	r3, ip
 8018656:	dd0b      	ble.n	8018670 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018658:	b160      	cbz	r0, 8018674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801865a:	2603      	movs	r6, #3
 801865c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8018660:	fb03 b506 	mla	r5, r3, r6, fp
 8018664:	fb03 b306 	mla	r3, r3, r6, fp
 8018668:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801866c:	792d      	ldrb	r5, [r5, #4]
 801866e:	795e      	ldrb	r6, [r3, #5]
 8018670:	280f      	cmp	r0, #15
 8018672:	d802      	bhi.n	801867a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8018674:	9b03      	ldr	r3, [sp, #12]
 8018676:	2b0f      	cmp	r3, #15
 8018678:	d922      	bls.n	80186c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801867a:	4b2f      	ldr	r3, [pc, #188]	; (8018738 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801867c:	f240 1157 	movw	r1, #343	; 0x157
 8018680:	4a2e      	ldr	r2, [pc, #184]	; (801873c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8018682:	482f      	ldr	r0, [pc, #188]	; (8018740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8018684:	f002 fd0a 	bl	801b09c <__assert_func>
 8018688:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801868c:	9400      	str	r4, [sp, #0]
 801868e:	e7b8      	b.n	8018602 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8018690:	46b2      	mov	sl, r6
 8018692:	46a8      	mov	r8, r5
 8018694:	46a6      	mov	lr, r4
 8018696:	9400      	str	r4, [sp, #0]
 8018698:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801869c:	e7be      	b.n	801861c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801869e:	46b2      	mov	sl, r6
 80186a0:	46a8      	mov	r8, r5
 80186a2:	46a6      	mov	lr, r4
 80186a4:	e7ba      	b.n	801861c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80186a6:	46b1      	mov	r9, r6
 80186a8:	462a      	mov	r2, r5
 80186aa:	4627      	mov	r7, r4
 80186ac:	e7cf      	b.n	801864e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80186ae:	46b1      	mov	r9, r6
 80186b0:	462a      	mov	r2, r5
 80186b2:	4627      	mov	r7, r4
 80186b4:	e7dc      	b.n	8018670 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80186b6:	280f      	cmp	r0, #15
 80186b8:	d8df      	bhi.n	801867a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80186ba:	46b1      	mov	r9, r6
 80186bc:	462a      	mov	r2, r5
 80186be:	4627      	mov	r7, r4
 80186c0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80186c4:	b280      	uxth	r0, r0
 80186c6:	fb00 f30b 	mul.w	r3, r0, fp
 80186ca:	0100      	lsls	r0, r0, #4
 80186cc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80186d0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80186d4:	1ac0      	subs	r0, r0, r3
 80186d6:	fa1f fb8b 	uxth.w	fp, fp
 80186da:	b280      	uxth	r0, r0
 80186dc:	ebac 0c0b 	sub.w	ip, ip, fp
 80186e0:	9003      	str	r0, [sp, #12]
 80186e2:	fa1f fc8c 	uxth.w	ip, ip
 80186e6:	fb00 fe0e 	mul.w	lr, r0, lr
 80186ea:	9800      	ldr	r0, [sp, #0]
 80186ec:	fb0c ee00 	mla	lr, ip, r0, lr
 80186f0:	9803      	ldr	r0, [sp, #12]
 80186f2:	fb00 f808 	mul.w	r8, r0, r8
 80186f6:	9801      	ldr	r0, [sp, #4]
 80186f8:	fb0b ee07 	mla	lr, fp, r7, lr
 80186fc:	fb0c 8800 	mla	r8, ip, r0, r8
 8018700:	fb03 ee04 	mla	lr, r3, r4, lr
 8018704:	fb0b 8202 	mla	r2, fp, r2, r8
 8018708:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801870c:	fb03 2505 	mla	r5, r3, r5, r2
 8018710:	9a03      	ldr	r2, [sp, #12]
 8018712:	f881 e000 	strb.w	lr, [r1]
 8018716:	fb02 f00a 	mul.w	r0, r2, sl
 801871a:	9a02      	ldr	r2, [sp, #8]
 801871c:	122d      	asrs	r5, r5, #8
 801871e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018722:	704d      	strb	r5, [r1, #1]
 8018724:	fb0b c909 	mla	r9, fp, r9, ip
 8018728:	fb03 9606 	mla	r6, r3, r6, r9
 801872c:	1236      	asrs	r6, r6, #8
 801872e:	708e      	strb	r6, [r1, #2]
 8018730:	b005      	add	sp, #20
 8018732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018736:	bf00      	nop
 8018738:	0801f137 	.word	0x0801f137
 801873c:	0801f5ee 	.word	0x0801f5ee
 8018740:	0801f1bf 	.word	0x0801f1bf

08018744 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018748:	ed2d 8b08 	vpush	{d8-d11}
 801874c:	b09b      	sub	sp, #108	; 0x6c
 801874e:	eeb0 aa40 	vmov.f32	s20, s0
 8018752:	eef0 9a60 	vmov.f32	s19, s1
 8018756:	920b      	str	r2, [sp, #44]	; 0x2c
 8018758:	eeb0 9a41 	vmov.f32	s18, s2
 801875c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801875e:	eeb0 8a62 	vmov.f32	s16, s5
 8018762:	9019      	str	r0, [sp, #100]	; 0x64
 8018764:	eef0 8a43 	vmov.f32	s17, s6
 8018768:	6850      	ldr	r0, [r2, #4]
 801876a:	eef0 ba44 	vmov.f32	s23, s8
 801876e:	9109      	str	r1, [sp, #36]	; 0x24
 8018770:	eeb0 ba64 	vmov.f32	s22, s9
 8018774:	9306      	str	r3, [sp, #24]
 8018776:	eef0 aa45 	vmov.f32	s21, s10
 801877a:	6812      	ldr	r2, [r2, #0]
 801877c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8018780:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8018784:	fb00 1303 	mla	r3, r0, r3, r1
 8018788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801878c:	18d3      	adds	r3, r2, r3
 801878e:	9307      	str	r3, [sp, #28]
 8018790:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	9308      	str	r3, [sp, #32]
 8018796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018798:	2b00      	cmp	r3, #0
 801879a:	dc03      	bgt.n	80187a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801879c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801879e:	2b00      	cmp	r3, #0
 80187a0:	f340 81ab 	ble.w	8018afa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80187a4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80187a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80187aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80187ae:	1e48      	subs	r0, r1, #1
 80187b0:	1e55      	subs	r5, r2, #1
 80187b2:	9b06      	ldr	r3, [sp, #24]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	f340 80b1 	ble.w	801891c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80187ba:	ea5f 462b 	movs.w	r6, fp, asr #16
 80187be:	ea4f 4324 	mov.w	r3, r4, asr #16
 80187c2:	d406      	bmi.n	80187d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80187c4:	4286      	cmp	r6, r0
 80187c6:	da04      	bge.n	80187d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	db02      	blt.n	80187d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80187cc:	42ab      	cmp	r3, r5
 80187ce:	f2c0 80a6 	blt.w	801891e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80187d2:	3601      	adds	r6, #1
 80187d4:	f100 8097 	bmi.w	8018906 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187d8:	42b1      	cmp	r1, r6
 80187da:	f2c0 8094 	blt.w	8018906 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187de:	3301      	adds	r3, #1
 80187e0:	f100 8091 	bmi.w	8018906 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187e4:	429a      	cmp	r2, r3
 80187e6:	f2c0 808e 	blt.w	8018906 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187ea:	9b06      	ldr	r3, [sp, #24]
 80187ec:	9e07      	ldr	r6, [sp, #28]
 80187ee:	930a      	str	r3, [sp, #40]	; 0x28
 80187f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f340 80b0 	ble.w	8018958 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80187f8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80187fa:	1425      	asrs	r5, r4, #16
 80187fc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80187fe:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8018802:	68c7      	ldr	r7, [r0, #12]
 8018804:	ea5f 402b 	movs.w	r0, fp, asr #16
 8018808:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801880c:	689b      	ldr	r3, [r3, #8]
 801880e:	f100 80ea 	bmi.w	80189e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018812:	f103 3cff 	add.w	ip, r3, #4294967295
 8018816:	4560      	cmp	r0, ip
 8018818:	f280 80e5 	bge.w	80189e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801881c:	2d00      	cmp	r5, #0
 801881e:	f2c0 80e2 	blt.w	80189e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018822:	f107 3cff 	add.w	ip, r7, #4294967295
 8018826:	4565      	cmp	r5, ip
 8018828:	f280 80dd 	bge.w	80189e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801882c:	b21b      	sxth	r3, r3
 801882e:	fb05 0003 	mla	r0, r5, r3, r0
 8018832:	9d08      	ldr	r5, [sp, #32]
 8018834:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018838:	182f      	adds	r7, r5, r0
 801883a:	5c2d      	ldrb	r5, [r5, r0]
 801883c:	7878      	ldrb	r0, [r7, #1]
 801883e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8018842:	900c      	str	r0, [sp, #48]	; 0x30
 8018844:	f897 9003 	ldrb.w	r9, [r7, #3]
 8018848:	f897 8004 	ldrb.w	r8, [r7, #4]
 801884c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8018850:	b1c9      	cbz	r1, 8018886 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018852:	f04f 0c03 	mov.w	ip, #3
 8018856:	f06f 0004 	mvn.w	r0, #4
 801885a:	3705      	adds	r7, #5
 801885c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8018860:	eb07 0c03 	add.w	ip, r7, r3
 8018864:	5cfb      	ldrb	r3, [r7, r3]
 8018866:	930d      	str	r3, [sp, #52]	; 0x34
 8018868:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801886c:	930f      	str	r3, [sp, #60]	; 0x3c
 801886e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8018872:	9311      	str	r3, [sp, #68]	; 0x44
 8018874:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8018878:	930e      	str	r3, [sp, #56]	; 0x38
 801887a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801887e:	9310      	str	r3, [sp, #64]	; 0x40
 8018880:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8018884:	9312      	str	r3, [sp, #72]	; 0x48
 8018886:	b292      	uxth	r2, r2
 8018888:	980c      	ldr	r0, [sp, #48]	; 0x30
 801888a:	b289      	uxth	r1, r1
 801888c:	fb02 f301 	mul.w	r3, r2, r1
 8018890:	0112      	lsls	r2, r2, #4
 8018892:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8018896:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801889a:	1ad2      	subs	r2, r2, r3
 801889c:	b289      	uxth	r1, r1
 801889e:	b292      	uxth	r2, r2
 80188a0:	1a7f      	subs	r7, r7, r1
 80188a2:	fb02 f909 	mul.w	r9, r2, r9
 80188a6:	b2bf      	uxth	r7, r7
 80188a8:	fb02 f808 	mul.w	r8, r2, r8
 80188ac:	fb02 fa0a 	mul.w	sl, r2, sl
 80188b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80188b2:	fb07 9905 	mla	r9, r7, r5, r9
 80188b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80188b8:	fb07 8800 	mla	r8, r7, r0, r8
 80188bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80188be:	fb07 aa0e 	mla	sl, r7, lr, sl
 80188c2:	fb01 9905 	mla	r9, r1, r5, r9
 80188c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80188c8:	fb01 8800 	mla	r8, r1, r0, r8
 80188cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80188ce:	fb01 a102 	mla	r1, r1, r2, sl
 80188d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80188d4:	fb03 9905 	mla	r9, r3, r5, r9
 80188d8:	fb03 8800 	mla	r8, r3, r0, r8
 80188dc:	fb03 1302 	mla	r3, r3, r2, r1
 80188e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80188e4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80188e8:	121b      	asrs	r3, r3, #8
 80188ea:	f886 9000 	strb.w	r9, [r6]
 80188ee:	f886 8001 	strb.w	r8, [r6, #1]
 80188f2:	70b3      	strb	r3, [r6, #2]
 80188f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80188f6:	3603      	adds	r6, #3
 80188f8:	449b      	add	fp, r3
 80188fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80188fc:	441c      	add	r4, r3
 80188fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018900:	3b01      	subs	r3, #1
 8018902:	930a      	str	r3, [sp, #40]	; 0x28
 8018904:	e774      	b.n	80187f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8018906:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018908:	449b      	add	fp, r3
 801890a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801890c:	441c      	add	r4, r3
 801890e:	9b06      	ldr	r3, [sp, #24]
 8018910:	3b01      	subs	r3, #1
 8018912:	9306      	str	r3, [sp, #24]
 8018914:	9b07      	ldr	r3, [sp, #28]
 8018916:	3303      	adds	r3, #3
 8018918:	9307      	str	r3, [sp, #28]
 801891a:	e74a      	b.n	80187b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801891c:	d024      	beq.n	8018968 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801891e:	9b06      	ldr	r3, [sp, #24]
 8018920:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8018922:	3b01      	subs	r3, #1
 8018924:	fb00 b003 	mla	r0, r0, r3, fp
 8018928:	1400      	asrs	r0, r0, #16
 801892a:	f53f af5e 	bmi.w	80187ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801892e:	3901      	subs	r1, #1
 8018930:	4288      	cmp	r0, r1
 8018932:	f6bf af5a 	bge.w	80187ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018936:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8018938:	fb01 4303 	mla	r3, r1, r3, r4
 801893c:	141b      	asrs	r3, r3, #16
 801893e:	f53f af54 	bmi.w	80187ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018942:	3a01      	subs	r2, #1
 8018944:	4293      	cmp	r3, r2
 8018946:	f6bf af50 	bge.w	80187ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801894a:	9b07      	ldr	r3, [sp, #28]
 801894c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8018950:	1cde      	adds	r6, r3, #3
 8018952:	f1be 0f00 	cmp.w	lr, #0
 8018956:	dc5f      	bgt.n	8018a18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8018958:	9b06      	ldr	r3, [sp, #24]
 801895a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801895e:	9b07      	ldr	r3, [sp, #28]
 8018960:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018964:	4423      	add	r3, r4
 8018966:	9307      	str	r3, [sp, #28]
 8018968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801896a:	2b00      	cmp	r3, #0
 801896c:	f340 80c5 	ble.w	8018afa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8018970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018974:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018976:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801897a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801897e:	eef0 6a48 	vmov.f32	s13, s16
 8018982:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018986:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801898a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801898e:	ee16 ba90 	vmov	fp, s13
 8018992:	eef0 6a68 	vmov.f32	s13, s17
 8018996:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801899a:	ee16 4a90 	vmov	r4, s13
 801899e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80189a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80189a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80189aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80189ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80189b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80189b6:	ee18 2a10 	vmov	r2, s16
 80189ba:	eeb0 8a47 	vmov.f32	s16, s14
 80189be:	fb92 f3f3 	sdiv	r3, r2, r3
 80189c2:	ee18 2a90 	vmov	r2, s17
 80189c6:	932f      	str	r3, [sp, #188]	; 0xbc
 80189c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80189ca:	eef0 8a67 	vmov.f32	s17, s15
 80189ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80189d2:	9330      	str	r3, [sp, #192]	; 0xc0
 80189d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80189d8:	3b01      	subs	r3, #1
 80189da:	9309      	str	r3, [sp, #36]	; 0x24
 80189dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80189de:	bf08      	it	eq
 80189e0:	4613      	moveq	r3, r2
 80189e2:	9306      	str	r3, [sp, #24]
 80189e4:	e6d7      	b.n	8018796 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80189e6:	f110 0c01 	adds.w	ip, r0, #1
 80189ea:	d483      	bmi.n	80188f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189ec:	4563      	cmp	r3, ip
 80189ee:	db81      	blt.n	80188f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189f0:	f115 0c01 	adds.w	ip, r5, #1
 80189f4:	f53f af7e 	bmi.w	80188f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189f8:	4567      	cmp	r7, ip
 80189fa:	f6ff af7b 	blt.w	80188f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189fe:	b23f      	sxth	r7, r7
 8018a00:	b21b      	sxth	r3, r3
 8018a02:	9700      	str	r7, [sp, #0]
 8018a04:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8018a08:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8018a0c:	9a08      	ldr	r2, [sp, #32]
 8018a0e:	4631      	mov	r1, r6
 8018a10:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018a12:	f7ff fdcf 	bl	80185b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8018a16:	e76d      	b.n	80188f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8018a18:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8018a1a:	ea4f 402b 	mov.w	r0, fp, asr #16
 8018a1e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8018a22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8018a26:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8018a2a:	1421      	asrs	r1, r4, #16
 8018a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8018a2e:	fb0c 0101 	mla	r1, ip, r1, r0
 8018a32:	9808      	ldr	r0, [sp, #32]
 8018a34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018a38:	1845      	adds	r5, r0, r1
 8018a3a:	5c40      	ldrb	r0, [r0, r1]
 8018a3c:	796f      	ldrb	r7, [r5, #5]
 8018a3e:	7869      	ldrb	r1, [r5, #1]
 8018a40:	f895 8002 	ldrb.w	r8, [r5, #2]
 8018a44:	f895 a003 	ldrb.w	sl, [r5, #3]
 8018a48:	f895 9004 	ldrb.w	r9, [r5, #4]
 8018a4c:	970c      	str	r7, [sp, #48]	; 0x30
 8018a4e:	b1a2      	cbz	r2, 8018a7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8018a50:	2703      	movs	r7, #3
 8018a52:	f06f 0304 	mvn.w	r3, #4
 8018a56:	3505      	adds	r5, #5
 8018a58:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8018a5c:	eb05 070c 	add.w	r7, r5, ip
 8018a60:	f815 500c 	ldrb.w	r5, [r5, ip]
 8018a64:	9513      	str	r5, [sp, #76]	; 0x4c
 8018a66:	787d      	ldrb	r5, [r7, #1]
 8018a68:	9515      	str	r5, [sp, #84]	; 0x54
 8018a6a:	78bd      	ldrb	r5, [r7, #2]
 8018a6c:	9517      	str	r5, [sp, #92]	; 0x5c
 8018a6e:	78fd      	ldrb	r5, [r7, #3]
 8018a70:	9514      	str	r5, [sp, #80]	; 0x50
 8018a72:	793d      	ldrb	r5, [r7, #4]
 8018a74:	9516      	str	r5, [sp, #88]	; 0x58
 8018a76:	797d      	ldrb	r5, [r7, #5]
 8018a78:	9518      	str	r5, [sp, #96]	; 0x60
 8018a7a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018a7e:	b292      	uxth	r2, r2
 8018a80:	3603      	adds	r6, #3
 8018a82:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018a86:	fb03 f502 	mul.w	r5, r3, r2
 8018a8a:	011b      	lsls	r3, r3, #4
 8018a8c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8018a90:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8018a94:	1b5b      	subs	r3, r3, r5
 8018a96:	b292      	uxth	r2, r2
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	1abf      	subs	r7, r7, r2
 8018a9c:	fb03 f909 	mul.w	r9, r3, r9
 8018aa0:	b2bf      	uxth	r7, r7
 8018aa2:	fb03 fa0a 	mul.w	sl, r3, sl
 8018aa6:	fb07 9901 	mla	r9, r7, r1, r9
 8018aaa:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018aac:	fb07 aa00 	mla	sl, r7, r0, sl
 8018ab0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ab2:	fb02 9901 	mla	r9, r2, r1, r9
 8018ab6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018ab8:	fb02 aa00 	mla	sl, r2, r0, sl
 8018abc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018abe:	fb05 9901 	mla	r9, r5, r1, r9
 8018ac2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018ac4:	fb05 aa00 	mla	sl, r5, r0, sl
 8018ac8:	434b      	muls	r3, r1
 8018aca:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018acc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ad0:	fb07 3308 	mla	r3, r7, r8, r3
 8018ad4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ad8:	f806 ac06 	strb.w	sl, [r6, #-6]
 8018adc:	fb02 3201 	mla	r2, r2, r1, r3
 8018ae0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018ae2:	f806 9c05 	strb.w	r9, [r6, #-5]
 8018ae6:	fb05 2503 	mla	r5, r5, r3, r2
 8018aea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018aec:	122d      	asrs	r5, r5, #8
 8018aee:	449b      	add	fp, r3
 8018af0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018af2:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018af6:	441c      	add	r4, r3
 8018af8:	e72b      	b.n	8018952 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018afa:	b01b      	add	sp, #108	; 0x6c
 8018afc:	ecbd 8b08 	vpop	{d8-d11}
 8018b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8018b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b08:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8018b0c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8018b10:	fb04 5603 	mla	r6, r4, r3, r5
 8018b14:	2c00      	cmp	r4, #0
 8018b16:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8018b1a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8018b1e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8018b22:	db36      	blt.n	8018b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8018b24:	45a6      	cmp	lr, r4
 8018b26:	dd34      	ble.n	8018b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8018b28:	2d00      	cmp	r5, #0
 8018b2a:	db30      	blt.n	8018b8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8018b2c:	42ab      	cmp	r3, r5
 8018b2e:	dd2e      	ble.n	8018b8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8018b30:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8018b34:	1c6e      	adds	r6, r5, #1
 8018b36:	d42f      	bmi.n	8018b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8018b38:	42b3      	cmp	r3, r6
 8018b3a:	dd2d      	ble.n	8018b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8018b3c:	b370      	cbz	r0, 8018b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8018b3e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018b42:	3401      	adds	r4, #1
 8018b44:	d42e      	bmi.n	8018ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8018b46:	45a6      	cmp	lr, r4
 8018b48:	dd2c      	ble.n	8018ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8018b4a:	b377      	cbz	r7, 8018baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8018b4c:	2d00      	cmp	r5, #0
 8018b4e:	db27      	blt.n	8018ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8018b50:	42ab      	cmp	r3, r5
 8018b52:	dd25      	ble.n	8018ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8018b54:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8018b58:	3501      	adds	r5, #1
 8018b5a:	d429      	bmi.n	8018bb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8018b5c:	42ab      	cmp	r3, r5
 8018b5e:	dd27      	ble.n	8018bb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8018b60:	b340      	cbz	r0, 8018bb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8018b62:	3301      	adds	r3, #1
 8018b64:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8018b68:	280f      	cmp	r0, #15
 8018b6a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018b6e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018b72:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018b76:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8018b7a:	d801      	bhi.n	8018b80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8018b7c:	2f0f      	cmp	r7, #15
 8018b7e:	d91b      	bls.n	8018bb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8018b80:	4b89      	ldr	r3, [pc, #548]	; (8018da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8018b82:	f240 1157 	movw	r1, #343	; 0x157
 8018b86:	4a89      	ldr	r2, [pc, #548]	; (8018dac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8018b88:	4889      	ldr	r0, [pc, #548]	; (8018db0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8018b8a:	f002 fa87 	bl	801b09c <__assert_func>
 8018b8e:	2200      	movs	r2, #0
 8018b90:	e7d0      	b.n	8018b34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8018b92:	2600      	movs	r6, #0
 8018b94:	4632      	mov	r2, r6
 8018b96:	e7d4      	b.n	8018b42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8018b98:	2600      	movs	r6, #0
 8018b9a:	e7d2      	b.n	8018b42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8018b9c:	4606      	mov	r6, r0
 8018b9e:	e7d0      	b.n	8018b42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8018ba0:	2400      	movs	r4, #0
 8018ba2:	e7d9      	b.n	8018b58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	461c      	mov	r4, r3
 8018ba8:	e7de      	b.n	8018b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018baa:	463b      	mov	r3, r7
 8018bac:	463c      	mov	r4, r7
 8018bae:	e7db      	b.n	8018b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	e7d9      	b.n	8018b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018bb4:	4603      	mov	r3, r0
 8018bb6:	e7d7      	b.n	8018b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018bb8:	b280      	uxth	r0, r0
 8018bba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018bbe:	b2bf      	uxth	r7, r7
 8018bc0:	fb00 fe07 	mul.w	lr, r0, r7
 8018bc4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018bc8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018bcc:	eba0 0c0e 	sub.w	ip, r0, lr
 8018bd0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8018bd4:	b2bf      	uxth	r7, r7
 8018bd6:	fa1f fc8c 	uxth.w	ip, ip
 8018bda:	eba5 0507 	sub.w	r5, r5, r7
 8018bde:	fb0c f00a 	mul.w	r0, ip, sl
 8018be2:	b2ad      	uxth	r5, r5
 8018be4:	fb05 000b 	mla	r0, r5, fp, r0
 8018be8:	fb07 0009 	mla	r0, r7, r9, r0
 8018bec:	fb0e 0008 	mla	r0, lr, r8, r0
 8018bf0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018bf4:	9001      	str	r0, [sp, #4]
 8018bf6:	d018      	beq.n	8018c2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8018bf8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8018bfc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018c00:	fb0b f000 	mul.w	r0, fp, r0
 8018c04:	fb0b fb02 	mul.w	fp, fp, r2
 8018c08:	0a02      	lsrs	r2, r0, #8
 8018c0a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8018c0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018c12:	4402      	add	r2, r0
 8018c14:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8018c18:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8018c1c:	0a12      	lsrs	r2, r2, #8
 8018c1e:	0a00      	lsrs	r0, r0, #8
 8018c20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018c24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018c28:	4302      	orrs	r2, r0
 8018c2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018c2e:	d01a      	beq.n	8018c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8018c30:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8018c34:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018c38:	fb0a f000 	mul.w	r0, sl, r0
 8018c3c:	fb0a fa06 	mul.w	sl, sl, r6
 8018c40:	0a06      	lsrs	r6, r0, #8
 8018c42:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8018c46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018c4a:	4406      	add	r6, r0
 8018c4c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018c50:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018c54:	0a36      	lsrs	r6, r6, #8
 8018c56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018c5a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018c5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018c62:	ea46 060a 	orr.w	r6, r6, sl
 8018c66:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018c6a:	d01b      	beq.n	8018ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8018c6c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018c70:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018c74:	fb09 fa0a 	mul.w	sl, r9, sl
 8018c78:	fb09 f004 	mul.w	r0, r9, r4
 8018c7c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018c80:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018c84:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8018c88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018c8c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8018c90:	4454      	add	r4, sl
 8018c92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018c96:	0a24      	lsrs	r4, r4, #8
 8018c98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018c9c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018ca0:	ea44 0409 	orr.w	r4, r4, r9
 8018ca4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018ca8:	d01b      	beq.n	8018ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8018caa:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8018cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018cb2:	fb08 f909 	mul.w	r9, r8, r9
 8018cb6:	fb08 f003 	mul.w	r0, r8, r3
 8018cba:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018cbe:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018cc2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8018cc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018cca:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8018cce:	444b      	add	r3, r9
 8018cd0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018cd4:	0a1b      	lsrs	r3, r3, #8
 8018cd6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018cda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018cde:	ea43 0308 	orr.w	r3, r3, r8
 8018ce2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8018ce6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018cea:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8018cee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018cf2:	fb0c f000 	mul.w	r0, ip, r0
 8018cf6:	fb0c f606 	mul.w	r6, ip, r6
 8018cfa:	fb05 0808 	mla	r8, r5, r8, r0
 8018cfe:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8018d02:	fb05 6502 	mla	r5, r5, r2, r6
 8018d06:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018d0a:	fb07 8800 	mla	r8, r7, r0, r8
 8018d0e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8018d12:	fb07 5704 	mla	r7, r7, r4, r5
 8018d16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018d1a:	fb0e 8000 	mla	r0, lr, r0, r8
 8018d1e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8018d22:	9b01      	ldr	r3, [sp, #4]
 8018d24:	0a00      	lsrs	r0, r0, #8
 8018d26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018d2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018d2e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018d32:	ea40 0e0e 	orr.w	lr, r0, lr
 8018d36:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018d3a:	b280      	uxth	r0, r0
 8018d3c:	fa5f f48e 	uxtb.w	r4, lr
 8018d40:	4343      	muls	r3, r0
 8018d42:	fb14 f400 	smulbb	r4, r4, r0
 8018d46:	1c5a      	adds	r2, r3, #1
 8018d48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018d4c:	780b      	ldrb	r3, [r1, #0]
 8018d4e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8018d52:	b2d2      	uxtb	r2, r2
 8018d54:	fb03 4302 	mla	r3, r3, r2, r4
 8018d58:	b29b      	uxth	r3, r3
 8018d5a:	1c5c      	adds	r4, r3, #1
 8018d5c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8018d60:	784c      	ldrb	r4, [r1, #1]
 8018d62:	fb14 f402 	smulbb	r4, r4, r2
 8018d66:	121b      	asrs	r3, r3, #8
 8018d68:	700b      	strb	r3, [r1, #0]
 8018d6a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8018d6e:	fb03 4300 	mla	r3, r3, r0, r4
 8018d72:	b29b      	uxth	r3, r3
 8018d74:	1c5c      	adds	r4, r3, #1
 8018d76:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8018d7a:	121b      	asrs	r3, r3, #8
 8018d7c:	704b      	strb	r3, [r1, #1]
 8018d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8018d82:	f891 e002 	ldrb.w	lr, [r1, #2]
 8018d86:	fb1e fe02 	smulbb	lr, lr, r2
 8018d8a:	fb03 ee00 	mla	lr, r3, r0, lr
 8018d8e:	fa1f fe8e 	uxth.w	lr, lr
 8018d92:	f10e 0301 	add.w	r3, lr, #1
 8018d96:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8018d9a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018d9e:	f881 e002 	strb.w	lr, [r1, #2]
 8018da2:	b003      	add	sp, #12
 8018da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da8:	0801f137 	.word	0x0801f137
 8018dac:	0801f5ee 	.word	0x0801f5ee
 8018db0:	0801f1bf 	.word	0x0801f1bf

08018db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018db8:	ed2d 8b08 	vpush	{d8-d11}
 8018dbc:	b09d      	sub	sp, #116	; 0x74
 8018dbe:	eeb0 aa40 	vmov.f32	s20, s0
 8018dc2:	eef0 9a60 	vmov.f32	s19, s1
 8018dc6:	9219      	str	r2, [sp, #100]	; 0x64
 8018dc8:	eeb0 9a41 	vmov.f32	s18, s2
 8018dcc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018dce:	eeb0 8a62 	vmov.f32	s16, s5
 8018dd2:	9307      	str	r3, [sp, #28]
 8018dd4:	eef0 8a43 	vmov.f32	s17, s6
 8018dd8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8018ddc:	eef0 ba44 	vmov.f32	s23, s8
 8018de0:	901b      	str	r0, [sp, #108]	; 0x6c
 8018de2:	eeb0 ba64 	vmov.f32	s22, s9
 8018de6:	931a      	str	r3, [sp, #104]	; 0x68
 8018de8:	eef0 aa45 	vmov.f32	s21, s10
 8018dec:	6850      	ldr	r0, [r2, #4]
 8018dee:	9117      	str	r1, [sp, #92]	; 0x5c
 8018df0:	6812      	ldr	r2, [r2, #0]
 8018df2:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8018df6:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8018dfa:	fb00 1303 	mla	r3, r0, r3, r1
 8018dfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e02:	18d3      	adds	r3, r2, r3
 8018e04:	930a      	str	r3, [sp, #40]	; 0x28
 8018e06:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	9310      	str	r3, [sp, #64]	; 0x40
 8018e0c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8018e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	dc03      	bgt.n	8018e20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018e18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	f340 8368 	ble.w	80194f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8018e20:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018e22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018e26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018e2a:	1e48      	subs	r0, r1, #1
 8018e2c:	1e57      	subs	r7, r2, #1
 8018e2e:	9b07      	ldr	r3, [sp, #28]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	f340 8187 	ble.w	8019144 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8018e36:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8018e3a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018e3e:	d406      	bmi.n	8018e4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018e40:	4584      	cmp	ip, r0
 8018e42:	da04      	bge.n	8018e4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	db02      	blt.n	8018e4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018e48:	42bb      	cmp	r3, r7
 8018e4a:	f2c0 817c 	blt.w	8019146 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8018e4e:	f11c 0c01 	adds.w	ip, ip, #1
 8018e52:	f100 816c 	bmi.w	801912e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e56:	4561      	cmp	r1, ip
 8018e58:	f2c0 8169 	blt.w	801912e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e5c:	3301      	adds	r3, #1
 8018e5e:	f100 8166 	bmi.w	801912e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e62:	429a      	cmp	r2, r3
 8018e64:	f2c0 8163 	blt.w	801912e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e68:	9b07      	ldr	r3, [sp, #28]
 8018e6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018e6c:	9318      	str	r3, [sp, #96]	; 0x60
 8018e6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	f340 8186 	ble.w	8019182 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8018e76:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018e78:	142a      	asrs	r2, r5, #16
 8018e7a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8018e7e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8018e82:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8018e86:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8018e8a:	f100 81cb 	bmi.w	8019224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018e8e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018e92:	4542      	cmp	r2, r8
 8018e94:	f280 81c6 	bge.w	8019224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018e98:	2800      	cmp	r0, #0
 8018e9a:	f2c0 81c3 	blt.w	8019224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018e9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8018ea2:	4540      	cmp	r0, r8
 8018ea4:	f280 81be 	bge.w	8019224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018ea8:	fa0f f38e 	sxth.w	r3, lr
 8018eac:	fb00 2203 	mla	r2, r0, r3, r2
 8018eb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018eb2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8018eb6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8018eba:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8018ebe:	2900      	cmp	r1, #0
 8018ec0:	f000 81a6 	beq.w	8019210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8018ec4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018ec8:	900c      	str	r0, [sp, #48]	; 0x30
 8018eca:	0e00      	lsrs	r0, r0, #24
 8018ecc:	9013      	str	r0, [sp, #76]	; 0x4c
 8018ece:	f1bc 0f00 	cmp.w	ip, #0
 8018ed2:	d00f      	beq.n	8018ef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018ed8:	3b01      	subs	r3, #1
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	3304      	adds	r3, #4
 8018ede:	eb08 0003 	add.w	r0, r8, r3
 8018ee2:	f858 3003 	ldr.w	r3, [r8, r3]
 8018ee6:	9308      	str	r3, [sp, #32]
 8018ee8:	0e1b      	lsrs	r3, r3, #24
 8018eea:	9311      	str	r3, [sp, #68]	; 0x44
 8018eec:	6843      	ldr	r3, [r0, #4]
 8018eee:	930d      	str	r3, [sp, #52]	; 0x34
 8018ef0:	0e1b      	lsrs	r3, r3, #24
 8018ef2:	9314      	str	r3, [sp, #80]	; 0x50
 8018ef4:	b289      	uxth	r1, r1
 8018ef6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018ef8:	fa1f fc8c 	uxth.w	ip, ip
 8018efc:	0108      	lsls	r0, r1, #4
 8018efe:	fb01 f90c 	mul.w	r9, r1, ip
 8018f02:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8018f06:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8018f0a:	eba0 0809 	sub.w	r8, r0, r9
 8018f0e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018f10:	fa1f f18c 	uxth.w	r1, ip
 8018f14:	fa1f f888 	uxth.w	r8, r8
 8018f18:	1a5b      	subs	r3, r3, r1
 8018f1a:	fb08 f000 	mul.w	r0, r8, r0
 8018f1e:	b29b      	uxth	r3, r3
 8018f20:	fb03 000e 	mla	r0, r3, lr, r0
 8018f24:	fb01 0004 	mla	r0, r1, r4, r0
 8018f28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018f2a:	fb09 0004 	mla	r0, r9, r4, r0
 8018f2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018f32:	2800      	cmp	r0, #0
 8018f34:	f000 80f2 	beq.w	801911c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8018f38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018f3c:	d01b      	beq.n	8018f76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8018f3e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8018f42:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018f46:	fb0e fa0a 	mul.w	sl, lr, sl
 8018f4a:	fb0e fe02 	mul.w	lr, lr, r2
 8018f4e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8018f52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018f56:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018f5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018f5e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018f62:	4452      	add	r2, sl
 8018f64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018f68:	0a12      	lsrs	r2, r2, #8
 8018f6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018f6e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018f72:	ea42 020c 	orr.w	r2, r2, ip
 8018f76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f78:	2cff      	cmp	r4, #255	; 0xff
 8018f7a:	d021      	beq.n	8018fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8018f7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018f7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018f82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f84:	fb04 fb0b 	mul.w	fp, r4, fp
 8018f88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018f8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018f8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018f94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018f98:	fb04 fa0a 	mul.w	sl, r4, sl
 8018f9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018fa0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018fa4:	44de      	add	lr, fp
 8018fa6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018faa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018fae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018fb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018fb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018fba:	ea4e 040a 	orr.w	r4, lr, sl
 8018fbe:	940c      	str	r4, [sp, #48]	; 0x30
 8018fc0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fc2:	2cff      	cmp	r4, #255	; 0xff
 8018fc4:	d021      	beq.n	801900a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8018fc6:	9c08      	ldr	r4, [sp, #32]
 8018fc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018fcc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fce:	fb04 fb0b 	mul.w	fp, r4, fp
 8018fd2:	9c08      	ldr	r4, [sp, #32]
 8018fd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018fd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018fde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018fe2:	fb04 fa0a 	mul.w	sl, r4, sl
 8018fe6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018fea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018fee:	44de      	add	lr, fp
 8018ff0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018ff4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018ff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018ffc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019004:	ea4e 040a 	orr.w	r4, lr, sl
 8019008:	9408      	str	r4, [sp, #32]
 801900a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801900c:	2cff      	cmp	r4, #255	; 0xff
 801900e:	d021      	beq.n	8019054 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8019010:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019012:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019016:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019018:	fb04 fb0b 	mul.w	fp, r4, fp
 801901c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801901e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019022:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019024:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019028:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801902c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019030:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019034:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019038:	44de      	add	lr, fp
 801903a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801903e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019042:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019046:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801904a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801904e:	ea4e 040a 	orr.w	r4, lr, sl
 8019052:	940d      	str	r4, [sp, #52]	; 0x34
 8019054:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019056:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801905a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801905e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019062:	9c08      	ldr	r4, [sp, #32]
 8019064:	fb08 fc0c 	mul.w	ip, r8, ip
 8019068:	fb03 cc0e 	mla	ip, r3, lr, ip
 801906c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019070:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019072:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019076:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801907a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801907c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019080:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019084:	fb08 f80e 	mul.w	r8, r8, lr
 8019088:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801908c:	fb03 8202 	mla	r2, r3, r2, r8
 8019090:	9b08      	ldr	r3, [sp, #32]
 8019092:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019096:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801909a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801909c:	fb01 220a 	mla	r2, r1, sl, r2
 80190a0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80190a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190a6:	fb09 2901 	mla	r9, r9, r1, r2
 80190aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80190ac:	4343      	muls	r3, r0
 80190ae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80190b2:	1c58      	adds	r0, r3, #1
 80190b4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80190b8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80190bc:	783b      	ldrb	r3, [r7, #0]
 80190be:	ea4c 0c09 	orr.w	ip, ip, r9
 80190c2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80190c6:	fa5f f28c 	uxtb.w	r2, ip
 80190ca:	b2c0      	uxtb	r0, r0
 80190cc:	fb12 f201 	smulbb	r2, r2, r1
 80190d0:	fb03 2300 	mla	r3, r3, r0, r2
 80190d4:	b29b      	uxth	r3, r3
 80190d6:	1c5a      	adds	r2, r3, #1
 80190d8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80190dc:	787a      	ldrb	r2, [r7, #1]
 80190de:	fb12 f200 	smulbb	r2, r2, r0
 80190e2:	121b      	asrs	r3, r3, #8
 80190e4:	703b      	strb	r3, [r7, #0]
 80190e6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80190ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80190ee:	fb03 2301 	mla	r3, r3, r1, r2
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	1c5a      	adds	r2, r3, #1
 80190f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80190fa:	121b      	asrs	r3, r3, #8
 80190fc:	707b      	strb	r3, [r7, #1]
 80190fe:	78bb      	ldrb	r3, [r7, #2]
 8019100:	fb13 f000 	smulbb	r0, r3, r0
 8019104:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019108:	fa1f fc8c 	uxth.w	ip, ip
 801910c:	f10c 0301 	add.w	r3, ip, #1
 8019110:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019114:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019118:	f887 c002 	strb.w	ip, [r7, #2]
 801911c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801911e:	3703      	adds	r7, #3
 8019120:	441d      	add	r5, r3
 8019122:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019124:	441e      	add	r6, r3
 8019126:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019128:	3b01      	subs	r3, #1
 801912a:	9318      	str	r3, [sp, #96]	; 0x60
 801912c:	e69f      	b.n	8018e6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801912e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019130:	441d      	add	r5, r3
 8019132:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019134:	441e      	add	r6, r3
 8019136:	9b07      	ldr	r3, [sp, #28]
 8019138:	3b01      	subs	r3, #1
 801913a:	9307      	str	r3, [sp, #28]
 801913c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801913e:	3303      	adds	r3, #3
 8019140:	930a      	str	r3, [sp, #40]	; 0x28
 8019142:	e674      	b.n	8018e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019144:	d025      	beq.n	8019192 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019146:	9b07      	ldr	r3, [sp, #28]
 8019148:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801914a:	3b01      	subs	r3, #1
 801914c:	fb00 5003 	mla	r0, r0, r3, r5
 8019150:	1400      	asrs	r0, r0, #16
 8019152:	f53f ae89 	bmi.w	8018e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019156:	3901      	subs	r1, #1
 8019158:	4288      	cmp	r0, r1
 801915a:	f6bf ae85 	bge.w	8018e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801915e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8019160:	fb01 6303 	mla	r3, r1, r3, r6
 8019164:	141b      	asrs	r3, r3, #16
 8019166:	f53f ae7f 	bmi.w	8018e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801916a:	3a01      	subs	r2, #1
 801916c:	4293      	cmp	r3, r2
 801916e:	f6bf ae7b 	bge.w	8018e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019174:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019178:	f103 0e03 	add.w	lr, r3, #3
 801917c:	f1bb 0f00 	cmp.w	fp, #0
 8019180:	dc6e      	bgt.n	8019260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8019182:	9b07      	ldr	r3, [sp, #28]
 8019184:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801918a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801918e:	4423      	add	r3, r4
 8019190:	930a      	str	r3, [sp, #40]	; 0x28
 8019192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019194:	2b00      	cmp	r3, #0
 8019196:	f340 81ab 	ble.w	80194f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801919a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801919e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80191a0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80191a4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80191a8:	eef0 6a48 	vmov.f32	s13, s16
 80191ac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80191b0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80191b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191b8:	ee16 5a90 	vmov	r5, s13
 80191bc:	eef0 6a68 	vmov.f32	s13, s17
 80191c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191c4:	ee16 6a90 	vmov	r6, s13
 80191c8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80191cc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80191d0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80191d4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80191d8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80191dc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80191e0:	ee18 2a10 	vmov	r2, s16
 80191e4:	eeb0 8a47 	vmov.f32	s16, s14
 80191e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80191ec:	ee18 2a90 	vmov	r2, s17
 80191f0:	9331      	str	r3, [sp, #196]	; 0xc4
 80191f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80191f4:	eef0 8a67 	vmov.f32	s17, s15
 80191f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80191fc:	9332      	str	r3, [sp, #200]	; 0xc8
 80191fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019200:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019202:	3b01      	subs	r3, #1
 8019204:	9317      	str	r3, [sp, #92]	; 0x5c
 8019206:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019208:	bf08      	it	eq
 801920a:	4613      	moveq	r3, r2
 801920c:	9307      	str	r3, [sp, #28]
 801920e:	e600      	b.n	8018e12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019210:	f1bc 0f00 	cmp.w	ip, #0
 8019214:	f43f ae6e 	beq.w	8018ef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019218:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801921c:	9308      	str	r3, [sp, #32]
 801921e:	0e1b      	lsrs	r3, r3, #24
 8019220:	9311      	str	r3, [sp, #68]	; 0x44
 8019222:	e667      	b.n	8018ef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019224:	f112 0801 	adds.w	r8, r2, #1
 8019228:	f53f af78 	bmi.w	801911c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801922c:	45c6      	cmp	lr, r8
 801922e:	f6ff af75 	blt.w	801911c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019232:	f110 0801 	adds.w	r8, r0, #1
 8019236:	f53f af71 	bmi.w	801911c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801923a:	4543      	cmp	r3, r8
 801923c:	f6ff af6e 	blt.w	801911c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019240:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019242:	b21b      	sxth	r3, r3
 8019244:	9201      	str	r2, [sp, #4]
 8019246:	9300      	str	r3, [sp, #0]
 8019248:	fa0f f38e 	sxth.w	r3, lr
 801924c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801924e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019252:	e9cd c404 	strd	ip, r4, [sp, #16]
 8019256:	4639      	mov	r1, r7
 8019258:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801925a:	f7ff fc53 	bl	8018b04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801925e:	e75d      	b.n	801911c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019260:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019262:	142f      	asrs	r7, r5, #16
 8019264:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019266:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801926a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801926e:	1433      	asrs	r3, r6, #16
 8019270:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019274:	fb02 7303 	mla	r3, r2, r3, r7
 8019278:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801927c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019280:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019284:	2900      	cmp	r1, #0
 8019286:	f000 812a 	beq.w	80194de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801928a:	687c      	ldr	r4, [r7, #4]
 801928c:	940e      	str	r4, [sp, #56]	; 0x38
 801928e:	0e24      	lsrs	r4, r4, #24
 8019290:	9415      	str	r4, [sp, #84]	; 0x54
 8019292:	b178      	cbz	r0, 80192b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8019294:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019298:	3a01      	subs	r2, #1
 801929a:	0092      	lsls	r2, r2, #2
 801929c:	3204      	adds	r2, #4
 801929e:	eb07 0802 	add.w	r8, r7, r2
 80192a2:	58ba      	ldr	r2, [r7, r2]
 80192a4:	9209      	str	r2, [sp, #36]	; 0x24
 80192a6:	0e12      	lsrs	r2, r2, #24
 80192a8:	9212      	str	r2, [sp, #72]	; 0x48
 80192aa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80192ae:	920f      	str	r2, [sp, #60]	; 0x3c
 80192b0:	0e12      	lsrs	r2, r2, #24
 80192b2:	9216      	str	r2, [sp, #88]	; 0x58
 80192b4:	b289      	uxth	r1, r1
 80192b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80192b8:	b280      	uxth	r0, r0
 80192ba:	fb01 f900 	mul.w	r9, r1, r0
 80192be:	0109      	lsls	r1, r1, #4
 80192c0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80192c4:	eba1 0809 	sub.w	r8, r1, r9
 80192c8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80192cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80192ce:	b280      	uxth	r0, r0
 80192d0:	fa1f f888 	uxth.w	r8, r8
 80192d4:	1a12      	subs	r2, r2, r0
 80192d6:	fb08 f101 	mul.w	r1, r8, r1
 80192da:	b292      	uxth	r2, r2
 80192dc:	fb02 110c 	mla	r1, r2, ip, r1
 80192e0:	fb00 1104 	mla	r1, r0, r4, r1
 80192e4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80192e6:	fb09 1104 	mla	r1, r9, r4, r1
 80192ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80192ee:	2900      	cmp	r1, #0
 80192f0:	f000 80ec 	beq.w	80194cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80192f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80192f8:	d019      	beq.n	801932e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80192fa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80192fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019302:	fb0c fa0a 	mul.w	sl, ip, sl
 8019306:	fb0c fc03 	mul.w	ip, ip, r3
 801930a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801930e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019312:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019316:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801931a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801931e:	4453      	add	r3, sl
 8019320:	0a3f      	lsrs	r7, r7, #8
 8019322:	0a1b      	lsrs	r3, r3, #8
 8019324:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019328:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801932c:	433b      	orrs	r3, r7
 801932e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019330:	2cff      	cmp	r4, #255	; 0xff
 8019332:	d020      	beq.n	8019376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8019334:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019336:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801933a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801933c:	4367      	muls	r7, r4
 801933e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019340:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019344:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019348:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801934a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801934e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019352:	fb04 fa0a 	mul.w	sl, r4, sl
 8019356:	44bc      	add	ip, r7
 8019358:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801935c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019360:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019364:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019368:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801936c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019370:	ea4c 040a 	orr.w	r4, ip, sl
 8019374:	940e      	str	r4, [sp, #56]	; 0x38
 8019376:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019378:	2cff      	cmp	r4, #255	; 0xff
 801937a:	d020      	beq.n	80193be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801937c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801937e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019382:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019384:	4367      	muls	r7, r4
 8019386:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019388:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801938c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019390:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019392:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019396:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801939a:	fb04 fa0a 	mul.w	sl, r4, sl
 801939e:	44bc      	add	ip, r7
 80193a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80193a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80193a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80193ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80193b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80193b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80193b8:	ea4c 040a 	orr.w	r4, ip, sl
 80193bc:	9409      	str	r4, [sp, #36]	; 0x24
 80193be:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80193c0:	2cff      	cmp	r4, #255	; 0xff
 80193c2:	d020      	beq.n	8019406 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 80193c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80193c6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80193ca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80193cc:	4367      	muls	r7, r4
 80193ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80193d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80193d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80193d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80193da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80193de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80193e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80193e6:	44bc      	add	ip, r7
 80193e8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80193ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80193f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80193f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80193f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80193fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019400:	ea4c 040a 	orr.w	r4, ip, sl
 8019404:	940f      	str	r4, [sp, #60]	; 0x3c
 8019406:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019408:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801940c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019410:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019414:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019416:	fb08 f707 	mul.w	r7, r8, r7
 801941a:	fb02 770c 	mla	r7, r2, ip, r7
 801941e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019422:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019424:	fb00 770c 	mla	r7, r0, ip, r7
 8019428:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801942c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801942e:	fb09 770c 	mla	r7, r9, ip, r7
 8019432:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019436:	fb08 f80c 	mul.w	r8, r8, ip
 801943a:	0a3f      	lsrs	r7, r7, #8
 801943c:	fb02 8303 	mla	r3, r2, r3, r8
 8019440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019442:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019446:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801944a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801944c:	fb00 330a 	mla	r3, r0, sl, r3
 8019450:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019454:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019456:	fb09 3c0c 	mla	ip, r9, ip, r3
 801945a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801945c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019460:	434b      	muls	r3, r1
 8019462:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019466:	1c59      	adds	r1, r3, #1
 8019468:	ea47 070c 	orr.w	r7, r7, ip
 801946c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019470:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019474:	b2fa      	uxtb	r2, r7
 8019476:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801947a:	fb12 f200 	smulbb	r2, r2, r0
 801947e:	b2c9      	uxtb	r1, r1
 8019480:	fb03 2301 	mla	r3, r3, r1, r2
 8019484:	b29b      	uxth	r3, r3
 8019486:	1c5a      	adds	r2, r3, #1
 8019488:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801948c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019490:	fb12 f201 	smulbb	r2, r2, r1
 8019494:	121b      	asrs	r3, r3, #8
 8019496:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801949a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801949e:	0c3f      	lsrs	r7, r7, #16
 80194a0:	fb03 2300 	mla	r3, r3, r0, r2
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	1c5a      	adds	r2, r3, #1
 80194a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80194ac:	121b      	asrs	r3, r3, #8
 80194ae:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80194b2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80194b6:	fb13 f101 	smulbb	r1, r3, r1
 80194ba:	fb07 1700 	mla	r7, r7, r0, r1
 80194be:	b2bf      	uxth	r7, r7
 80194c0:	1c79      	adds	r1, r7, #1
 80194c2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80194c6:	123f      	asrs	r7, r7, #8
 80194c8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80194cc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80194ce:	f10e 0e03 	add.w	lr, lr, #3
 80194d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80194d6:	441d      	add	r5, r3
 80194d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80194da:	441e      	add	r6, r3
 80194dc:	e64e      	b.n	801917c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80194de:	2800      	cmp	r0, #0
 80194e0:	f43f aee8 	beq.w	80192b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80194e4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80194e8:	9209      	str	r2, [sp, #36]	; 0x24
 80194ea:	0e12      	lsrs	r2, r2, #24
 80194ec:	9212      	str	r2, [sp, #72]	; 0x48
 80194ee:	e6e1      	b.n	80192b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80194f0:	b01d      	add	sp, #116	; 0x74
 80194f2:	ecbd 8b08 	vpop	{d8-d11}
 80194f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080194fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80194fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019500:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8019504:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019508:	fb04 5603 	mla	r6, r4, r3, r5
 801950c:	2c00      	cmp	r4, #0
 801950e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8019512:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019516:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801951a:	db36      	blt.n	801958a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801951c:	45a6      	cmp	lr, r4
 801951e:	dd34      	ble.n	801958a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8019520:	2d00      	cmp	r5, #0
 8019522:	db30      	blt.n	8019586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8019524:	42ab      	cmp	r3, r5
 8019526:	dd2e      	ble.n	8019586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8019528:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801952c:	1c6e      	adds	r6, r5, #1
 801952e:	d42f      	bmi.n	8019590 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8019530:	42b3      	cmp	r3, r6
 8019532:	dd2d      	ble.n	8019590 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8019534:	b370      	cbz	r0, 8019594 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8019536:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801953a:	3401      	adds	r4, #1
 801953c:	d42e      	bmi.n	801959c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801953e:	45a6      	cmp	lr, r4
 8019540:	dd2c      	ble.n	801959c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8019542:	b377      	cbz	r7, 80195a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8019544:	2d00      	cmp	r5, #0
 8019546:	db27      	blt.n	8019598 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8019548:	42ab      	cmp	r3, r5
 801954a:	dd25      	ble.n	8019598 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801954c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8019550:	3501      	adds	r5, #1
 8019552:	d429      	bmi.n	80195a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8019554:	42ab      	cmp	r3, r5
 8019556:	dd27      	ble.n	80195a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8019558:	b340      	cbz	r0, 80195ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801955a:	3301      	adds	r3, #1
 801955c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8019560:	280f      	cmp	r0, #15
 8019562:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019566:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801956a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801956e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8019572:	d801      	bhi.n	8019578 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8019574:	2f0f      	cmp	r7, #15
 8019576:	d91b      	bls.n	80195b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8019578:	4b7e      	ldr	r3, [pc, #504]	; (8019774 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801957a:	f240 1157 	movw	r1, #343	; 0x157
 801957e:	4a7e      	ldr	r2, [pc, #504]	; (8019778 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8019580:	487e      	ldr	r0, [pc, #504]	; (801977c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8019582:	f001 fd8b 	bl	801b09c <__assert_func>
 8019586:	2200      	movs	r2, #0
 8019588:	e7d0      	b.n	801952c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801958a:	2600      	movs	r6, #0
 801958c:	4632      	mov	r2, r6
 801958e:	e7d4      	b.n	801953a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019590:	2600      	movs	r6, #0
 8019592:	e7d2      	b.n	801953a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019594:	4606      	mov	r6, r0
 8019596:	e7d0      	b.n	801953a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019598:	2400      	movs	r4, #0
 801959a:	e7d9      	b.n	8019550 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801959c:	2300      	movs	r3, #0
 801959e:	461c      	mov	r4, r3
 80195a0:	e7de      	b.n	8019560 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80195a2:	463b      	mov	r3, r7
 80195a4:	463c      	mov	r4, r7
 80195a6:	e7db      	b.n	8019560 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80195a8:	2300      	movs	r3, #0
 80195aa:	e7d9      	b.n	8019560 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80195ac:	4603      	mov	r3, r0
 80195ae:	e7d7      	b.n	8019560 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80195b0:	b280      	uxth	r0, r0
 80195b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80195b6:	b2bf      	uxth	r7, r7
 80195b8:	fb00 fe07 	mul.w	lr, r0, r7
 80195bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80195c0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80195c4:	eba0 0c0e 	sub.w	ip, r0, lr
 80195c8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80195cc:	b2bf      	uxth	r7, r7
 80195ce:	fa1f fc8c 	uxth.w	ip, ip
 80195d2:	eba0 0507 	sub.w	r5, r0, r7
 80195d6:	fb0c f00a 	mul.w	r0, ip, sl
 80195da:	b2ad      	uxth	r5, r5
 80195dc:	fb05 000b 	mla	r0, r5, fp, r0
 80195e0:	fb07 0009 	mla	r0, r7, r9, r0
 80195e4:	fb0e 0008 	mla	r0, lr, r8, r0
 80195e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80195ec:	9001      	str	r0, [sp, #4]
 80195ee:	d018      	beq.n	8019622 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80195f0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80195f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80195f8:	fb0b f000 	mul.w	r0, fp, r0
 80195fc:	fb0b fb02 	mul.w	fp, fp, r2
 8019600:	0a02      	lsrs	r2, r0, #8
 8019602:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019606:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801960a:	4402      	add	r2, r0
 801960c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8019610:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019614:	0a12      	lsrs	r2, r2, #8
 8019616:	0a00      	lsrs	r0, r0, #8
 8019618:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801961c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019620:	4302      	orrs	r2, r0
 8019622:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019626:	d01a      	beq.n	801965e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8019628:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801962c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019630:	fb0a f000 	mul.w	r0, sl, r0
 8019634:	fb0a fa06 	mul.w	sl, sl, r6
 8019638:	0a06      	lsrs	r6, r0, #8
 801963a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801963e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019642:	4406      	add	r6, r0
 8019644:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019648:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801964c:	0a36      	lsrs	r6, r6, #8
 801964e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019652:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019656:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801965a:	ea46 060a 	orr.w	r6, r6, sl
 801965e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019662:	d01b      	beq.n	801969c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8019664:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019668:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801966c:	fb09 fa0a 	mul.w	sl, r9, sl
 8019670:	fb09 f004 	mul.w	r0, r9, r4
 8019674:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019678:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801967c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8019680:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019684:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019688:	4454      	add	r4, sl
 801968a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801968e:	0a24      	lsrs	r4, r4, #8
 8019690:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019694:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019698:	ea44 0409 	orr.w	r4, r4, r9
 801969c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80196a0:	d01b      	beq.n	80196da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 80196a2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80196a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80196aa:	fb08 f909 	mul.w	r9, r8, r9
 80196ae:	fb08 f003 	mul.w	r0, r8, r3
 80196b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80196b6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80196ba:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80196be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80196c2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80196c6:	444b      	add	r3, r9
 80196c8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80196cc:	0a1b      	lsrs	r3, r3, #8
 80196ce:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80196d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80196d6:	ea43 0308 	orr.w	r3, r3, r8
 80196da:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80196de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80196e2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80196e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80196ea:	fb0c f000 	mul.w	r0, ip, r0
 80196ee:	fb0c f606 	mul.w	r6, ip, r6
 80196f2:	fb05 0808 	mla	r8, r5, r8, r0
 80196f6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80196fa:	fb05 6502 	mla	r5, r5, r2, r6
 80196fe:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019702:	fb07 8800 	mla	r8, r7, r0, r8
 8019706:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801970a:	fb07 5704 	mla	r7, r7, r4, r5
 801970e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019712:	fb0e 8000 	mla	r0, lr, r0, r8
 8019716:	780a      	ldrb	r2, [r1, #0]
 8019718:	fb0e 7e03 	mla	lr, lr, r3, r7
 801971c:	9b01      	ldr	r3, [sp, #4]
 801971e:	0a00      	lsrs	r0, r0, #8
 8019720:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019724:	43db      	mvns	r3, r3
 8019726:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801972a:	b2db      	uxtb	r3, r3
 801972c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019730:	ea40 0e0e 	orr.w	lr, r0, lr
 8019734:	fb02 f003 	mul.w	r0, r2, r3
 8019738:	1c42      	adds	r2, r0, #1
 801973a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801973e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8019742:	700a      	strb	r2, [r1, #0]
 8019744:	784a      	ldrb	r2, [r1, #1]
 8019746:	435a      	muls	r2, r3
 8019748:	1c50      	adds	r0, r2, #1
 801974a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801974e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8019752:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8019756:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801975a:	704a      	strb	r2, [r1, #1]
 801975c:	788a      	ldrb	r2, [r1, #2]
 801975e:	4353      	muls	r3, r2
 8019760:	1c5a      	adds	r2, r3, #1
 8019762:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019766:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801976a:	f881 e002 	strb.w	lr, [r1, #2]
 801976e:	b003      	add	sp, #12
 8019770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019774:	0801f137 	.word	0x0801f137
 8019778:	0801f5ee 	.word	0x0801f5ee
 801977c:	0801f1bf 	.word	0x0801f1bf

08019780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019784:	ed2d 8b08 	vpush	{d8-d11}
 8019788:	b099      	sub	sp, #100	; 0x64
 801978a:	eeb0 aa40 	vmov.f32	s20, s0
 801978e:	eef0 9a60 	vmov.f32	s19, s1
 8019792:	9017      	str	r0, [sp, #92]	; 0x5c
 8019794:	eeb0 9a41 	vmov.f32	s18, s2
 8019798:	9306      	str	r3, [sp, #24]
 801979a:	eeb0 8a62 	vmov.f32	s16, s5
 801979e:	eef0 8a43 	vmov.f32	s17, s6
 80197a2:	eef0 ba44 	vmov.f32	s23, s8
 80197a6:	eeb0 ba64 	vmov.f32	s22, s9
 80197aa:	eef0 aa45 	vmov.f32	s21, s10
 80197ae:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80197b2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80197b4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80197b8:	6850      	ldr	r0, [r2, #4]
 80197ba:	6812      	ldr	r2, [r2, #0]
 80197bc:	fb00 1303 	mla	r3, r0, r3, r1
 80197c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197c4:	18d3      	adds	r3, r2, r3
 80197c6:	9309      	str	r3, [sp, #36]	; 0x24
 80197c8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80197ca:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	930e      	str	r3, [sp, #56]	; 0x38
 80197d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	dc03      	bgt.n	80197e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80197d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80197da:	2b00      	cmp	r3, #0
 80197dc:	f340 8360 	ble.w	8019ea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80197e0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80197e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80197e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80197ea:	1e48      	subs	r0, r1, #1
 80197ec:	1e57      	subs	r7, r2, #1
 80197ee:	9b06      	ldr	r3, [sp, #24]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f340 817b 	ble.w	8019aec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80197f6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80197fa:	ea4f 4326 	mov.w	r3, r6, asr #16
 80197fe:	d406      	bmi.n	801980e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019800:	4584      	cmp	ip, r0
 8019802:	da04      	bge.n	801980e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019804:	2b00      	cmp	r3, #0
 8019806:	db02      	blt.n	801980e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019808:	42bb      	cmp	r3, r7
 801980a:	f2c0 8170 	blt.w	8019aee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801980e:	f11c 0c01 	adds.w	ip, ip, #1
 8019812:	f100 8160 	bmi.w	8019ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019816:	4561      	cmp	r1, ip
 8019818:	f2c0 815d 	blt.w	8019ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801981c:	3301      	adds	r3, #1
 801981e:	f100 815a 	bmi.w	8019ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019822:	429a      	cmp	r2, r3
 8019824:	f2c0 8157 	blt.w	8019ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019828:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801982c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801982e:	f1b8 0f00 	cmp.w	r8, #0
 8019832:	f340 8179 	ble.w	8019b28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8019836:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8019838:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801983c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801983e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019842:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8019846:	142a      	asrs	r2, r5, #16
 8019848:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801984c:	689b      	ldr	r3, [r3, #8]
 801984e:	f100 81be 	bmi.w	8019bce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019852:	f103 39ff 	add.w	r9, r3, #4294967295
 8019856:	454a      	cmp	r2, r9
 8019858:	f280 81b9 	bge.w	8019bce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801985c:	f1bc 0f00 	cmp.w	ip, #0
 8019860:	f2c0 81b5 	blt.w	8019bce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019864:	f10e 39ff 	add.w	r9, lr, #4294967295
 8019868:	45cc      	cmp	ip, r9
 801986a:	f280 81b0 	bge.w	8019bce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801986e:	b21b      	sxth	r3, r3
 8019870:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019872:	fb0c 2203 	mla	r2, ip, r3, r2
 8019876:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801987a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801987e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8019882:	2900      	cmp	r1, #0
 8019884:	f000 8197 	beq.w	8019bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8019888:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801988c:	940a      	str	r4, [sp, #40]	; 0x28
 801988e:	0e24      	lsrs	r4, r4, #24
 8019890:	9411      	str	r4, [sp, #68]	; 0x44
 8019892:	b180      	cbz	r0, 80198b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019898:	3b01      	subs	r3, #1
 801989a:	009b      	lsls	r3, r3, #2
 801989c:	3304      	adds	r3, #4
 801989e:	eb09 0c03 	add.w	ip, r9, r3
 80198a2:	f859 3003 	ldr.w	r3, [r9, r3]
 80198a6:	9307      	str	r3, [sp, #28]
 80198a8:	0e1b      	lsrs	r3, r3, #24
 80198aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80198ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80198b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80198b2:	0e1b      	lsrs	r3, r3, #24
 80198b4:	9312      	str	r3, [sp, #72]	; 0x48
 80198b6:	b289      	uxth	r1, r1
 80198b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198ba:	b280      	uxth	r0, r0
 80198bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80198be:	fb01 fa00 	mul.w	sl, r1, r0
 80198c2:	0109      	lsls	r1, r1, #4
 80198c4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80198c8:	eba1 090a 	sub.w	r9, r1, sl
 80198cc:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80198d0:	b280      	uxth	r0, r0
 80198d2:	fa1f f989 	uxth.w	r9, r9
 80198d6:	1a09      	subs	r1, r1, r0
 80198d8:	fb09 f303 	mul.w	r3, r9, r3
 80198dc:	b289      	uxth	r1, r1
 80198de:	fb01 330e 	mla	r3, r1, lr, r3
 80198e2:	fb00 3304 	mla	r3, r0, r4, r3
 80198e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80198e8:	fb0a 3304 	mla	r3, sl, r4, r3
 80198ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	f000 80e8 	beq.w	8019ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80198f6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80198fa:	d01b      	beq.n	8019934 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80198fc:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8019900:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019904:	fb0e fb0b 	mul.w	fp, lr, fp
 8019908:	fb0e fe02 	mul.w	lr, lr, r2
 801990c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8019910:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019914:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019918:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801991c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019920:	445a      	add	r2, fp
 8019922:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019926:	0a12      	lsrs	r2, r2, #8
 8019928:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801992c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019930:	ea42 020c 	orr.w	r2, r2, ip
 8019934:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019936:	2cff      	cmp	r4, #255	; 0xff
 8019938:	d021      	beq.n	801997e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801993a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801993c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019940:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019942:	fb04 fc0c 	mul.w	ip, r4, ip
 8019946:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019948:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801994c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8019950:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019952:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019956:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801995a:	fb04 fb0b 	mul.w	fp, r4, fp
 801995e:	44e6      	add	lr, ip
 8019960:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8019964:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019968:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801996c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019970:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019974:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8019978:	ea4e 040b 	orr.w	r4, lr, fp
 801997c:	940a      	str	r4, [sp, #40]	; 0x28
 801997e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019980:	2cff      	cmp	r4, #255	; 0xff
 8019982:	d021      	beq.n	80199c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019984:	9c07      	ldr	r4, [sp, #28]
 8019986:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801998a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801998c:	fb04 fc0c 	mul.w	ip, r4, ip
 8019990:	9c07      	ldr	r4, [sp, #28]
 8019992:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019996:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801999a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801999c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80199a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199a4:	fb04 fb0b 	mul.w	fp, r4, fp
 80199a8:	44e6      	add	lr, ip
 80199aa:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80199ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80199b2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80199b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199ba:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80199be:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80199c2:	ea4e 040b 	orr.w	r4, lr, fp
 80199c6:	9407      	str	r4, [sp, #28]
 80199c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199ca:	2cff      	cmp	r4, #255	; 0xff
 80199cc:	d021      	beq.n	8019a12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80199ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80199d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80199d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199d6:	fb04 fc0c 	mul.w	ip, r4, ip
 80199da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80199dc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80199e0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80199e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80199ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199ee:	fb04 fb0b 	mul.w	fp, r4, fp
 80199f2:	44e6      	add	lr, ip
 80199f4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80199f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80199fc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8019a00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019a04:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019a08:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8019a0c:	ea4e 040b 	orr.w	r4, lr, fp
 8019a10:	940b      	str	r4, [sp, #44]	; 0x2c
 8019a12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019a14:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8019a18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019a1c:	2bff      	cmp	r3, #255	; 0xff
 8019a1e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019a22:	9c07      	ldr	r4, [sp, #28]
 8019a24:	fb09 fc0c 	mul.w	ip, r9, ip
 8019a28:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019a2c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019a30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019a32:	fb00 cc0e 	mla	ip, r0, lr, ip
 8019a36:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019a3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019a3c:	fb0a cc0e 	mla	ip, sl, lr, ip
 8019a40:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019a44:	fb09 f90e 	mul.w	r9, r9, lr
 8019a48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a4c:	fb01 9202 	mla	r2, r1, r2, r9
 8019a50:	9907      	ldr	r1, [sp, #28]
 8019a52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a56:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8019a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019a5c:	fb00 220b 	mla	r2, r0, fp, r2
 8019a60:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8019a64:	fb0a 2a00 	mla	sl, sl, r0, r2
 8019a68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a70:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019a74:	fa5f f08c 	uxtb.w	r0, ip
 8019a78:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8019a7c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019a80:	f000 80a2 	beq.w	8019bc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8019a84:	43db      	mvns	r3, r3
 8019a86:	783a      	ldrb	r2, [r7, #0]
 8019a88:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019a8c:	b2db      	uxtb	r3, r3
 8019a8e:	fb02 fe03 	mul.w	lr, r2, r3
 8019a92:	fb0a fa03 	mul.w	sl, sl, r3
 8019a96:	f10e 0201 	add.w	r2, lr, #1
 8019a9a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8019a9e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019aa2:	703a      	strb	r2, [r7, #0]
 8019aa4:	787a      	ldrb	r2, [r7, #1]
 8019aa6:	fb02 f003 	mul.w	r0, r2, r3
 8019aaa:	f10a 0301 	add.w	r3, sl, #1
 8019aae:	1c42      	adds	r2, r0, #1
 8019ab0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8019ab4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8019ab8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019abc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019ac0:	707a      	strb	r2, [r7, #1]
 8019ac2:	f887 c002 	strb.w	ip, [r7, #2]
 8019ac6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019ac8:	3703      	adds	r7, #3
 8019aca:	f108 38ff 	add.w	r8, r8, #4294967295
 8019ace:	441d      	add	r5, r3
 8019ad0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019ad2:	441e      	add	r6, r3
 8019ad4:	e6ab      	b.n	801982e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019ad6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019ad8:	441d      	add	r5, r3
 8019ada:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019adc:	441e      	add	r6, r3
 8019ade:	9b06      	ldr	r3, [sp, #24]
 8019ae0:	3b01      	subs	r3, #1
 8019ae2:	9306      	str	r3, [sp, #24]
 8019ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ae6:	3303      	adds	r3, #3
 8019ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8019aea:	e680      	b.n	80197ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019aec:	d024      	beq.n	8019b38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8019aee:	9b06      	ldr	r3, [sp, #24]
 8019af0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8019af2:	3b01      	subs	r3, #1
 8019af4:	fb00 5003 	mla	r0, r0, r3, r5
 8019af8:	1400      	asrs	r0, r0, #16
 8019afa:	f53f ae95 	bmi.w	8019828 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019afe:	3901      	subs	r1, #1
 8019b00:	4288      	cmp	r0, r1
 8019b02:	f6bf ae91 	bge.w	8019828 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019b06:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019b08:	fb01 6303 	mla	r3, r1, r3, r6
 8019b0c:	141b      	asrs	r3, r3, #16
 8019b0e:	f53f ae8b 	bmi.w	8019828 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019b12:	3a01      	subs	r2, #1
 8019b14:	4293      	cmp	r3, r2
 8019b16:	f6bf ae87 	bge.w	8019828 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b1c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8019b20:	1cdf      	adds	r7, r3, #3
 8019b22:	f1bb 0f00 	cmp.w	fp, #0
 8019b26:	dc6e      	bgt.n	8019c06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8019b28:	9b06      	ldr	r3, [sp, #24]
 8019b2a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019b34:	4423      	add	r3, r4
 8019b36:	9309      	str	r3, [sp, #36]	; 0x24
 8019b38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	f340 81b0 	ble.w	8019ea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8019b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019b46:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019b4a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019b4e:	eef0 6a48 	vmov.f32	s13, s16
 8019b52:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019b56:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019b5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b5e:	ee16 5a90 	vmov	r5, s13
 8019b62:	eef0 6a68 	vmov.f32	s13, s17
 8019b66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b6a:	ee16 6a90 	vmov	r6, s13
 8019b6e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019b72:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019b76:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019b7a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019b7e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019b82:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019b86:	ee18 2a10 	vmov	r2, s16
 8019b8a:	eeb0 8a47 	vmov.f32	s16, s14
 8019b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b92:	ee18 2a90 	vmov	r2, s17
 8019b96:	932d      	str	r3, [sp, #180]	; 0xb4
 8019b98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019b9a:	eef0 8a67 	vmov.f32	s17, s15
 8019b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ba2:	932e      	str	r3, [sp, #184]	; 0xb8
 8019ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ba6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019ba8:	3b01      	subs	r3, #1
 8019baa:	9315      	str	r3, [sp, #84]	; 0x54
 8019bac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019bae:	bf08      	it	eq
 8019bb0:	4613      	moveq	r3, r2
 8019bb2:	9306      	str	r3, [sp, #24]
 8019bb4:	e60d      	b.n	80197d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019bb6:	2800      	cmp	r0, #0
 8019bb8:	f43f ae7d 	beq.w	80198b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019bbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019bc0:	9307      	str	r3, [sp, #28]
 8019bc2:	0e1b      	lsrs	r3, r3, #24
 8019bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8019bc6:	e676      	b.n	80198b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019bc8:	7038      	strb	r0, [r7, #0]
 8019bca:	7079      	strb	r1, [r7, #1]
 8019bcc:	e779      	b.n	8019ac2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8019bce:	f112 0901 	adds.w	r9, r2, #1
 8019bd2:	f53f af78 	bmi.w	8019ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019bd6:	454b      	cmp	r3, r9
 8019bd8:	f6ff af75 	blt.w	8019ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019bdc:	f11c 0901 	adds.w	r9, ip, #1
 8019be0:	f53f af71 	bmi.w	8019ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019be4:	45ce      	cmp	lr, r9
 8019be6:	f6ff af6e 	blt.w	8019ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019bea:	b21b      	sxth	r3, r3
 8019bec:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8019bf0:	fa0f f28e 	sxth.w	r2, lr
 8019bf4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8019bf8:	9200      	str	r2, [sp, #0]
 8019bfa:	4639      	mov	r1, r7
 8019bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019bfe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019c00:	f7ff fc7c 	bl	80194fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8019c04:	e75f      	b.n	8019ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019c06:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019c08:	1429      	asrs	r1, r5, #16
 8019c0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019c0c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8019c10:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8019c14:	1433      	asrs	r3, r6, #16
 8019c16:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019c1a:	fb0c 1303 	mla	r3, ip, r3, r1
 8019c1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019c20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019c24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019c28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019c2c:	2a00      	cmp	r2, #0
 8019c2e:	f000 8129 	beq.w	8019e84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8019c32:	684c      	ldr	r4, [r1, #4]
 8019c34:	940c      	str	r4, [sp, #48]	; 0x30
 8019c36:	0e24      	lsrs	r4, r4, #24
 8019c38:	9413      	str	r4, [sp, #76]	; 0x4c
 8019c3a:	b198      	cbz	r0, 8019c64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8019c3c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8019c40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019c44:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8019c48:	f10c 0c04 	add.w	ip, ip, #4
 8019c4c:	eb01 080c 	add.w	r8, r1, ip
 8019c50:	f851 100c 	ldr.w	r1, [r1, ip]
 8019c54:	9108      	str	r1, [sp, #32]
 8019c56:	0e09      	lsrs	r1, r1, #24
 8019c58:	9110      	str	r1, [sp, #64]	; 0x40
 8019c5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019c5e:	910d      	str	r1, [sp, #52]	; 0x34
 8019c60:	0e09      	lsrs	r1, r1, #24
 8019c62:	9114      	str	r1, [sp, #80]	; 0x50
 8019c64:	b292      	uxth	r2, r2
 8019c66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019c68:	b280      	uxth	r0, r0
 8019c6a:	fb02 f900 	mul.w	r9, r2, r0
 8019c6e:	0112      	lsls	r2, r2, #4
 8019c70:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019c74:	eba2 0809 	sub.w	r8, r2, r9
 8019c78:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8019c7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c7e:	b280      	uxth	r0, r0
 8019c80:	fa1f f888 	uxth.w	r8, r8
 8019c84:	1a09      	subs	r1, r1, r0
 8019c86:	fb08 f202 	mul.w	r2, r8, r2
 8019c8a:	b289      	uxth	r1, r1
 8019c8c:	fb01 220e 	mla	r2, r1, lr, r2
 8019c90:	fb00 2204 	mla	r2, r0, r4, r2
 8019c94:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019c96:	fb09 2204 	mla	r2, r9, r4, r2
 8019c9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019c9e:	2a00      	cmp	r2, #0
 8019ca0:	f000 80e8 	beq.w	8019e74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8019ca4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019ca8:	d01b      	beq.n	8019ce2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8019caa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019cb2:	fb0e fa0a 	mul.w	sl, lr, sl
 8019cb6:	fb0e fe03 	mul.w	lr, lr, r3
 8019cba:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019cbe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019cc2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019cc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019cca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019cce:	4453      	add	r3, sl
 8019cd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cd4:	0a1b      	lsrs	r3, r3, #8
 8019cd6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019cda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019cde:	ea43 030c 	orr.w	r3, r3, ip
 8019ce2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ce4:	2cff      	cmp	r4, #255	; 0xff
 8019ce6:	d021      	beq.n	8019d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8019ce8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019cea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019cee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019cf0:	fb04 fc0c 	mul.w	ip, r4, ip
 8019cf4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019cf6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019cfa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019cfe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019d00:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019d04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d08:	fb04 fa0a 	mul.w	sl, r4, sl
 8019d0c:	44e6      	add	lr, ip
 8019d0e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d26:	ea4e 040a 	orr.w	r4, lr, sl
 8019d2a:	940c      	str	r4, [sp, #48]	; 0x30
 8019d2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d2e:	2cff      	cmp	r4, #255	; 0xff
 8019d30:	d021      	beq.n	8019d76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8019d32:	9c08      	ldr	r4, [sp, #32]
 8019d34:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019d38:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d3a:	fb04 fc0c 	mul.w	ip, r4, ip
 8019d3e:	9c08      	ldr	r4, [sp, #32]
 8019d40:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019d44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d46:	fb04 fa0e 	mul.w	sl, r4, lr
 8019d4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d4e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019d52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d56:	44e6      	add	lr, ip
 8019d58:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d5c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d70:	ea4e 040a 	orr.w	r4, lr, sl
 8019d74:	9408      	str	r4, [sp, #32]
 8019d76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019d78:	2cff      	cmp	r4, #255	; 0xff
 8019d7a:	d021      	beq.n	8019dc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8019d7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019d7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019d82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019d84:	fb04 fc0c 	mul.w	ip, r4, ip
 8019d88:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019d8a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d8e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019d92:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019d94:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019d98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019da0:	44e6      	add	lr, ip
 8019da2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019da6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019daa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019dae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019db2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019db6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019dba:	ea4e 040a 	orr.w	r4, lr, sl
 8019dbe:	940d      	str	r4, [sp, #52]	; 0x34
 8019dc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019dc2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019dc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019dca:	2aff      	cmp	r2, #255	; 0xff
 8019dcc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019dd0:	9c08      	ldr	r4, [sp, #32]
 8019dd2:	fb08 fc0c 	mul.w	ip, r8, ip
 8019dd6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019dda:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019dde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019de0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8019de4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019de8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019dea:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019dee:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019df2:	fb08 f80e 	mul.w	r8, r8, lr
 8019df6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019dfa:	fb01 8303 	mla	r3, r1, r3, r8
 8019dfe:	9908      	ldr	r1, [sp, #32]
 8019e00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e04:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8019e08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019e0a:	fb00 330a 	mla	r3, r0, sl, r3
 8019e0e:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8019e12:	fb09 3e0e 	mla	lr, r9, lr, r3
 8019e16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019e1a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019e1e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8019e22:	fa5f f08c 	uxtb.w	r0, ip
 8019e26:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8019e2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019e2e:	d032      	beq.n	8019e96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8019e30:	43d2      	mvns	r2, r2
 8019e32:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8019e36:	b2d2      	uxtb	r2, r2
 8019e38:	fb0e fe02 	mul.w	lr, lr, r2
 8019e3c:	f10e 0301 	add.w	r3, lr, #1
 8019e40:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8019e44:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8019e48:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8019e4c:	4350      	muls	r0, r2
 8019e4e:	f807 3c03 	strb.w	r3, [r7, #-3]
 8019e52:	1c43      	adds	r3, r0, #1
 8019e54:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019e58:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019e5c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8019e60:	4353      	muls	r3, r2
 8019e62:	f807 1c02 	strb.w	r1, [r7, #-2]
 8019e66:	1c5a      	adds	r2, r3, #1
 8019e68:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019e6c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8019e70:	f807 cc01 	strb.w	ip, [r7, #-1]
 8019e74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019e76:	3703      	adds	r7, #3
 8019e78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019e7c:	441d      	add	r5, r3
 8019e7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019e80:	441e      	add	r6, r3
 8019e82:	e64e      	b.n	8019b22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8019e84:	2800      	cmp	r0, #0
 8019e86:	f43f aeed 	beq.w	8019c64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8019e8a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019e8e:	9108      	str	r1, [sp, #32]
 8019e90:	0e09      	lsrs	r1, r1, #24
 8019e92:	9110      	str	r1, [sp, #64]	; 0x40
 8019e94:	e6e6      	b.n	8019c64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8019e96:	f807 0c03 	strb.w	r0, [r7, #-3]
 8019e9a:	f807 1c02 	strb.w	r1, [r7, #-2]
 8019e9e:	e7e7      	b.n	8019e70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8019ea0:	b019      	add	sp, #100	; 0x64
 8019ea2:	ecbd 8b08 	vpop	{d8-d11}
 8019ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019eac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8019eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eb0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8019eb4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8019ebe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8019ec2:	fb0c 0e03 	mla	lr, ip, r3, r0
 8019ec6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8019eca:	db6b      	blt.n	8019fa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019ecc:	4580      	cmp	r8, r0
 8019ece:	dd69      	ble.n	8019fa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019ed0:	f1bc 0f00 	cmp.w	ip, #0
 8019ed4:	db66      	blt.n	8019fa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019ed6:	45e1      	cmp	r9, ip
 8019ed8:	dd64      	ble.n	8019fa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019eda:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8019ede:	f01e 0f01 	tst.w	lr, #1
 8019ee2:	5d16      	ldrb	r6, [r2, r4]
 8019ee4:	bf0c      	ite	eq
 8019ee6:	f006 060f 	andeq.w	r6, r6, #15
 8019eea:	1136      	asrne	r6, r6, #4
 8019eec:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8019ef0:	b2f6      	uxtb	r6, r6
 8019ef2:	f110 0a01 	adds.w	sl, r0, #1
 8019ef6:	d457      	bmi.n	8019fa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019ef8:	45d0      	cmp	r8, sl
 8019efa:	dd55      	ble.n	8019fa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019efc:	f1bc 0f00 	cmp.w	ip, #0
 8019f00:	db52      	blt.n	8019fa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019f02:	45e1      	cmp	r9, ip
 8019f04:	dd50      	ble.n	8019fa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019f06:	2f00      	cmp	r7, #0
 8019f08:	f000 80ac 	beq.w	801a064 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8019f0c:	f10e 0b01 	add.w	fp, lr, #1
 8019f10:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8019f14:	f01b 0f01 	tst.w	fp, #1
 8019f18:	5d14      	ldrb	r4, [r2, r4]
 8019f1a:	bf0c      	ite	eq
 8019f1c:	f004 040f 	andeq.w	r4, r4, #15
 8019f20:	1124      	asrne	r4, r4, #4
 8019f22:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019f26:	b2e4      	uxtb	r4, r4
 8019f28:	2d00      	cmp	r5, #0
 8019f2a:	f000 8096 	beq.w	801a05a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8019f2e:	2800      	cmp	r0, #0
 8019f30:	f10c 0c01 	add.w	ip, ip, #1
 8019f34:	db3c      	blt.n	8019fb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f36:	4580      	cmp	r8, r0
 8019f38:	dd3a      	ble.n	8019fb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f3a:	f1bc 0f00 	cmp.w	ip, #0
 8019f3e:	db37      	blt.n	8019fb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f40:	45e1      	cmp	r9, ip
 8019f42:	dd35      	ble.n	8019fb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f44:	eb03 0b0e 	add.w	fp, r3, lr
 8019f48:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8019f4c:	f01b 0f01 	tst.w	fp, #1
 8019f50:	5c10      	ldrb	r0, [r2, r0]
 8019f52:	bf0c      	ite	eq
 8019f54:	f000 000f 	andeq.w	r0, r0, #15
 8019f58:	1100      	asrne	r0, r0, #4
 8019f5a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8019f5e:	b2c0      	uxtb	r0, r0
 8019f60:	f1ba 0f00 	cmp.w	sl, #0
 8019f64:	db26      	blt.n	8019fb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f66:	45d0      	cmp	r8, sl
 8019f68:	dd24      	ble.n	8019fb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f6a:	f1bc 0f00 	cmp.w	ip, #0
 8019f6e:	db21      	blt.n	8019fb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f70:	45e1      	cmp	r9, ip
 8019f72:	dd1f      	ble.n	8019fb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f74:	b307      	cbz	r7, 8019fb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8019f76:	3301      	adds	r3, #1
 8019f78:	449e      	add	lr, r3
 8019f7a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8019f7e:	f01e 0f01 	tst.w	lr, #1
 8019f82:	5cd3      	ldrb	r3, [r2, r3]
 8019f84:	bf0c      	ite	eq
 8019f86:	f003 030f 	andeq.w	r3, r3, #15
 8019f8a:	111b      	asrne	r3, r3, #4
 8019f8c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8019f90:	b2db      	uxtb	r3, r3
 8019f92:	2f0f      	cmp	r7, #15
 8019f94:	d911      	bls.n	8019fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8019f96:	4b35      	ldr	r3, [pc, #212]	; (801a06c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8019f98:	f240 1157 	movw	r1, #343	; 0x157
 8019f9c:	4a34      	ldr	r2, [pc, #208]	; (801a070 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8019f9e:	4835      	ldr	r0, [pc, #212]	; (801a074 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8019fa0:	f001 f87c 	bl	801b09c <__assert_func>
 8019fa4:	2600      	movs	r6, #0
 8019fa6:	e7a4      	b.n	8019ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8019fa8:	2400      	movs	r4, #0
 8019faa:	e7bd      	b.n	8019f28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8019fac:	463c      	mov	r4, r7
 8019fae:	e7be      	b.n	8019f2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8019fb0:	2000      	movs	r0, #0
 8019fb2:	e7d5      	b.n	8019f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	e7ec      	b.n	8019f92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8019fb8:	463b      	mov	r3, r7
 8019fba:	2d0f      	cmp	r5, #15
 8019fbc:	d8eb      	bhi.n	8019f96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8019fbe:	b2bf      	uxth	r7, r7
 8019fc0:	b2ad      	uxth	r5, r5
 8019fc2:	fb07 f205 	mul.w	r2, r7, r5
 8019fc6:	013f      	lsls	r7, r7, #4
 8019fc8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8019fcc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8019fd0:	1abf      	subs	r7, r7, r2
 8019fd2:	b2ad      	uxth	r5, r5
 8019fd4:	b2bf      	uxth	r7, r7
 8019fd6:	ebac 0c05 	sub.w	ip, ip, r5
 8019fda:	437c      	muls	r4, r7
 8019fdc:	fa1f fc8c 	uxth.w	ip, ip
 8019fe0:	fb06 440c 	mla	r4, r6, ip, r4
 8019fe4:	fb05 4400 	mla	r4, r5, r0, r4
 8019fe8:	fb02 4203 	mla	r2, r2, r3, r4
 8019fec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019ff0:	b38a      	cbz	r2, 801a056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8019ff2:	4b21      	ldr	r3, [pc, #132]	; (801a078 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8019ff4:	681c      	ldr	r4, [r3, #0]
 8019ff6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019ffa:	b2e5      	uxtb	r5, r4
 8019ffc:	4353      	muls	r3, r2
 8019ffe:	1c5a      	adds	r2, r3, #1
 801a000:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a004:	1212      	asrs	r2, r2, #8
 801a006:	b290      	uxth	r0, r2
 801a008:	43d2      	mvns	r2, r2
 801a00a:	fb15 f500 	smulbb	r5, r5, r0
 801a00e:	b2d3      	uxtb	r3, r2
 801a010:	780a      	ldrb	r2, [r1, #0]
 801a012:	fb02 5203 	mla	r2, r2, r3, r5
 801a016:	b292      	uxth	r2, r2
 801a018:	1c55      	adds	r5, r2, #1
 801a01a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801a01e:	784d      	ldrb	r5, [r1, #1]
 801a020:	fb15 f503 	smulbb	r5, r5, r3
 801a024:	1212      	asrs	r2, r2, #8
 801a026:	700a      	strb	r2, [r1, #0]
 801a028:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801a02c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801a030:	fb02 5200 	mla	r2, r2, r0, r5
 801a034:	b292      	uxth	r2, r2
 801a036:	1c55      	adds	r5, r2, #1
 801a038:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801a03c:	1212      	asrs	r2, r2, #8
 801a03e:	704a      	strb	r2, [r1, #1]
 801a040:	788a      	ldrb	r2, [r1, #2]
 801a042:	fb12 f303 	smulbb	r3, r2, r3
 801a046:	fb04 3300 	mla	r3, r4, r0, r3
 801a04a:	b29b      	uxth	r3, r3
 801a04c:	1c5a      	adds	r2, r3, #1
 801a04e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a052:	121b      	asrs	r3, r3, #8
 801a054:	708b      	strb	r3, [r1, #2]
 801a056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a05a:	2f0f      	cmp	r7, #15
 801a05c:	d89b      	bhi.n	8019f96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801a05e:	462b      	mov	r3, r5
 801a060:	4628      	mov	r0, r5
 801a062:	e7ac      	b.n	8019fbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801a064:	2d00      	cmp	r5, #0
 801a066:	d1a1      	bne.n	8019fac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801a068:	462c      	mov	r4, r5
 801a06a:	e7f8      	b.n	801a05e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801a06c:	0801f137 	.word	0x0801f137
 801a070:	0801f5ee 	.word	0x0801f5ee
 801a074:	0801f1bf 	.word	0x0801f1bf
 801a078:	24006bc4 	.word	0x24006bc4

0801a07c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a080:	ed2d 8b08 	vpush	{d8-d11}
 801a084:	b097      	sub	sp, #92	; 0x5c
 801a086:	eeb0 aa40 	vmov.f32	s20, s0
 801a08a:	eef0 9a60 	vmov.f32	s19, s1
 801a08e:	9214      	str	r2, [sp, #80]	; 0x50
 801a090:	eeb0 9a41 	vmov.f32	s18, s2
 801a094:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a096:	eeb0 8a62 	vmov.f32	s16, s5
 801a09a:	9309      	str	r3, [sp, #36]	; 0x24
 801a09c:	eef0 8a43 	vmov.f32	s17, s6
 801a0a0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801a0a4:	eef0 ba44 	vmov.f32	s23, s8
 801a0a8:	9015      	str	r0, [sp, #84]	; 0x54
 801a0aa:	eeb0 ba64 	vmov.f32	s22, s9
 801a0ae:	6850      	ldr	r0, [r2, #4]
 801a0b0:	eef0 aa45 	vmov.f32	s21, s10
 801a0b4:	910c      	str	r1, [sp, #48]	; 0x30
 801a0b6:	930e      	str	r3, [sp, #56]	; 0x38
 801a0b8:	6812      	ldr	r2, [r2, #0]
 801a0ba:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a0be:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801a0c2:	fb00 1303 	mla	r3, r0, r3, r1
 801a0c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a0ca:	eb02 0a03 	add.w	sl, r2, r3
 801a0ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a0d0:	689b      	ldr	r3, [r3, #8]
 801a0d2:	3301      	adds	r3, #1
 801a0d4:	f023 0301 	bic.w	r3, r3, #1
 801a0d8:	930f      	str	r3, [sp, #60]	; 0x3c
 801a0da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a0dc:	681f      	ldr	r7, [r3, #0]
 801a0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	dc03      	bgt.n	801a0ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f340 8247 	ble.w	801a57a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801a0ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a0ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a0f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a0f6:	1e48      	subs	r0, r1, #1
 801a0f8:	f102 3cff 	add.w	ip, r2, #4294967295
 801a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	f340 80e5 	ble.w	801a2ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a104:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801a108:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a10c:	d406      	bmi.n	801a11c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a10e:	4586      	cmp	lr, r0
 801a110:	da04      	bge.n	801a11c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a112:	2b00      	cmp	r3, #0
 801a114:	db02      	blt.n	801a11c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a116:	4563      	cmp	r3, ip
 801a118:	f2c0 80da 	blt.w	801a2d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a11c:	f11e 0e01 	adds.w	lr, lr, #1
 801a120:	f100 80cb 	bmi.w	801a2ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a124:	4571      	cmp	r1, lr
 801a126:	f2c0 80c8 	blt.w	801a2ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a12a:	3301      	adds	r3, #1
 801a12c:	f100 80c5 	bmi.w	801a2ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a130:	429a      	cmp	r2, r3
 801a132:	f2c0 80c2 	blt.w	801a2ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a138:	46d0      	mov	r8, sl
 801a13a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801a13e:	930d      	str	r3, [sp, #52]	; 0x34
 801a140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a142:	2b00      	cmp	r3, #0
 801a144:	f340 80e3 	ble.w	801a30e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a148:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a14a:	1430      	asrs	r0, r6, #16
 801a14c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801a150:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a154:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801a158:	142b      	asrs	r3, r5, #16
 801a15a:	f100 812e 	bmi.w	801a3ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a15e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a162:	455b      	cmp	r3, fp
 801a164:	f280 8129 	bge.w	801a3ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a168:	2800      	cmp	r0, #0
 801a16a:	f2c0 8126 	blt.w	801a3ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a16e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801a172:	4558      	cmp	r0, fp
 801a174:	f280 8121 	bge.w	801a3ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a178:	fb00 3309 	mla	r3, r0, r9, r3
 801a17c:	0858      	lsrs	r0, r3, #1
 801a17e:	07dc      	lsls	r4, r3, #31
 801a180:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a184:	bf54      	ite	pl
 801a186:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a18a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a18e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a192:	fa5f fc8c 	uxtb.w	ip, ip
 801a196:	2a00      	cmp	r2, #0
 801a198:	f000 80fe 	beq.w	801a398 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a19c:	1c58      	adds	r0, r3, #1
 801a19e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801a1a2:	07c0      	lsls	r0, r0, #31
 801a1a4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a1a8:	bf54      	ite	pl
 801a1aa:	f00e 0e0f 	andpl.w	lr, lr, #15
 801a1ae:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801a1b2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801a1b6:	fa5f f08e 	uxtb.w	r0, lr
 801a1ba:	9010      	str	r0, [sp, #64]	; 0x40
 801a1bc:	b1d9      	cbz	r1, 801a1f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801a1be:	444b      	add	r3, r9
 801a1c0:	0858      	lsrs	r0, r3, #1
 801a1c2:	07dc      	lsls	r4, r3, #31
 801a1c4:	f103 0301 	add.w	r3, r3, #1
 801a1c8:	5c38      	ldrb	r0, [r7, r0]
 801a1ca:	bf54      	ite	pl
 801a1cc:	f000 000f 	andpl.w	r0, r0, #15
 801a1d0:	1100      	asrmi	r0, r0, #4
 801a1d2:	07dc      	lsls	r4, r3, #31
 801a1d4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a1d8:	b2c0      	uxtb	r0, r0
 801a1da:	900a      	str	r0, [sp, #40]	; 0x28
 801a1dc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801a1e0:	f817 e000 	ldrb.w	lr, [r7, r0]
 801a1e4:	bf54      	ite	pl
 801a1e6:	f00e 030f 	andpl.w	r3, lr, #15
 801a1ea:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801a1ee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a1f2:	b2db      	uxtb	r3, r3
 801a1f4:	9311      	str	r3, [sp, #68]	; 0x44
 801a1f6:	b292      	uxth	r2, r2
 801a1f8:	b289      	uxth	r1, r1
 801a1fa:	0113      	lsls	r3, r2, #4
 801a1fc:	fb02 f001 	mul.w	r0, r2, r1
 801a200:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a202:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801a206:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801a20a:	1a1b      	subs	r3, r3, r0
 801a20c:	b289      	uxth	r1, r1
 801a20e:	b29b      	uxth	r3, r3
 801a210:	ebae 0e01 	sub.w	lr, lr, r1
 801a214:	4353      	muls	r3, r2
 801a216:	fa1f fe8e 	uxth.w	lr, lr
 801a21a:	fb0c 320e 	mla	r2, ip, lr, r3
 801a21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a220:	fb01 2203 	mla	r2, r1, r3, r2
 801a224:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a226:	fb00 2203 	mla	r2, r0, r3, r2
 801a22a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a22e:	2a00      	cmp	r2, #0
 801a230:	d039      	beq.n	801a2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a232:	4bc7      	ldr	r3, [pc, #796]	; (801a550 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801a234:	6819      	ldr	r1, [r3, #0]
 801a236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a238:	fa5f fc81 	uxtb.w	ip, r1
 801a23c:	435a      	muls	r2, r3
 801a23e:	1c53      	adds	r3, r2, #1
 801a240:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a244:	1212      	asrs	r2, r2, #8
 801a246:	b290      	uxth	r0, r2
 801a248:	43d2      	mvns	r2, r2
 801a24a:	fb1c fc00 	smulbb	ip, ip, r0
 801a24e:	b2d3      	uxtb	r3, r2
 801a250:	f898 2000 	ldrb.w	r2, [r8]
 801a254:	fb02 c203 	mla	r2, r2, r3, ip
 801a258:	b292      	uxth	r2, r2
 801a25a:	f102 0c01 	add.w	ip, r2, #1
 801a25e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a262:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a266:	fb1c fc03 	smulbb	ip, ip, r3
 801a26a:	1212      	asrs	r2, r2, #8
 801a26c:	f888 2000 	strb.w	r2, [r8]
 801a270:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801a274:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801a278:	fb02 c200 	mla	r2, r2, r0, ip
 801a27c:	b292      	uxth	r2, r2
 801a27e:	f102 0c01 	add.w	ip, r2, #1
 801a282:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a286:	1212      	asrs	r2, r2, #8
 801a288:	f888 2001 	strb.w	r2, [r8, #1]
 801a28c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a290:	fb12 f303 	smulbb	r3, r2, r3
 801a294:	fb01 3300 	mla	r3, r1, r0, r3
 801a298:	b29b      	uxth	r3, r3
 801a29a:	1c5a      	adds	r2, r3, #1
 801a29c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a2a0:	121b      	asrs	r3, r3, #8
 801a2a2:	f888 3002 	strb.w	r3, [r8, #2]
 801a2a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a2a8:	f108 0803 	add.w	r8, r8, #3
 801a2ac:	441d      	add	r5, r3
 801a2ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a2b0:	441e      	add	r6, r3
 801a2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2b4:	3b01      	subs	r3, #1
 801a2b6:	930d      	str	r3, [sp, #52]	; 0x34
 801a2b8:	e742      	b.n	801a140 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801a2ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a2bc:	f10a 0a03 	add.w	sl, sl, #3
 801a2c0:	441d      	add	r5, r3
 801a2c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a2c4:	441e      	add	r6, r3
 801a2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2c8:	3b01      	subs	r3, #1
 801a2ca:	9309      	str	r3, [sp, #36]	; 0x24
 801a2cc:	e716      	b.n	801a0fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a2ce:	d024      	beq.n	801a31a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2d2:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a2d4:	3b01      	subs	r3, #1
 801a2d6:	fb00 5003 	mla	r0, r0, r3, r5
 801a2da:	1400      	asrs	r0, r0, #16
 801a2dc:	f53f af2b 	bmi.w	801a136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2e0:	3901      	subs	r1, #1
 801a2e2:	4288      	cmp	r0, r1
 801a2e4:	f6bf af27 	bge.w	801a136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2e8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a2ea:	fb01 6303 	mla	r3, r1, r3, r6
 801a2ee:	141b      	asrs	r3, r3, #16
 801a2f0:	f53f af21 	bmi.w	801a136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2f4:	3a01      	subs	r2, #1
 801a2f6:	4293      	cmp	r3, r2
 801a2f8:	f6bf af1d 	bge.w	801a136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2fc:	f10a 0e03 	add.w	lr, sl, #3
 801a300:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a304:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801a308:	f1b8 0f00 	cmp.w	r8, #0
 801a30c:	dc76      	bgt.n	801a3fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a310:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a314:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a318:	44a2      	add	sl, r4
 801a31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	f340 812c 	ble.w	801a57a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801a322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a326:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a328:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a32c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a330:	eef0 6a48 	vmov.f32	s13, s16
 801a334:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a338:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a33c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a340:	ee16 5a90 	vmov	r5, s13
 801a344:	eef0 6a68 	vmov.f32	s13, s17
 801a348:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a34c:	ee16 6a90 	vmov	r6, s13
 801a350:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a354:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a358:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a35c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a360:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a364:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a368:	ee18 2a10 	vmov	r2, s16
 801a36c:	eeb0 8a47 	vmov.f32	s16, s14
 801a370:	fb92 f3f3 	sdiv	r3, r2, r3
 801a374:	ee18 2a90 	vmov	r2, s17
 801a378:	932b      	str	r3, [sp, #172]	; 0xac
 801a37a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a37c:	eef0 8a67 	vmov.f32	s17, s15
 801a380:	fb92 f3f3 	sdiv	r3, r2, r3
 801a384:	932c      	str	r3, [sp, #176]	; 0xb0
 801a386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a388:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a38a:	3b01      	subs	r3, #1
 801a38c:	930c      	str	r3, [sp, #48]	; 0x30
 801a38e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a390:	bf08      	it	eq
 801a392:	4613      	moveq	r3, r2
 801a394:	9309      	str	r3, [sp, #36]	; 0x24
 801a396:	e6a2      	b.n	801a0de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a398:	2900      	cmp	r1, #0
 801a39a:	f43f af2c 	beq.w	801a1f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801a39e:	eb09 0003 	add.w	r0, r9, r3
 801a3a2:	0843      	lsrs	r3, r0, #1
 801a3a4:	07c0      	lsls	r0, r0, #31
 801a3a6:	5cfb      	ldrb	r3, [r7, r3]
 801a3a8:	bf54      	ite	pl
 801a3aa:	f003 030f 	andpl.w	r3, r3, #15
 801a3ae:	111b      	asrmi	r3, r3, #4
 801a3b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	930a      	str	r3, [sp, #40]	; 0x28
 801a3b8:	e71d      	b.n	801a1f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801a3ba:	f113 0b01 	adds.w	fp, r3, #1
 801a3be:	f53f af72 	bmi.w	801a2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3c2:	45dc      	cmp	ip, fp
 801a3c4:	f6ff af6f 	blt.w	801a2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3c8:	f110 0b01 	adds.w	fp, r0, #1
 801a3cc:	f53f af6b 	bmi.w	801a2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3d0:	45de      	cmp	lr, fp
 801a3d2:	f6ff af68 	blt.w	801a2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3d6:	9302      	str	r3, [sp, #8]
 801a3d8:	fa0f f38e 	sxth.w	r3, lr
 801a3dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a3de:	9301      	str	r3, [sp, #4]
 801a3e0:	fa0f f38c 	sxth.w	r3, ip
 801a3e4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801a3e8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a3ec:	9300      	str	r3, [sp, #0]
 801a3ee:	463a      	mov	r2, r7
 801a3f0:	464b      	mov	r3, r9
 801a3f2:	4641      	mov	r1, r8
 801a3f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a3f6:	f7ff fd59 	bl	8019eac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801a3fa:	e754      	b.n	801a2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3fc:	142a      	asrs	r2, r5, #16
 801a3fe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a402:	1433      	asrs	r3, r6, #16
 801a404:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a408:	fb09 2303 	mla	r3, r9, r3, r2
 801a40c:	085a      	lsrs	r2, r3, #1
 801a40e:	07dc      	lsls	r4, r3, #31
 801a410:	5cba      	ldrb	r2, [r7, r2]
 801a412:	bf54      	ite	pl
 801a414:	f002 020f 	andpl.w	r2, r2, #15
 801a418:	1112      	asrmi	r2, r2, #4
 801a41a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a41e:	b2d2      	uxtb	r2, r2
 801a420:	2900      	cmp	r1, #0
 801a422:	f000 8097 	beq.w	801a554 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801a426:	f103 0b01 	add.w	fp, r3, #1
 801a42a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801a42e:	f01b 0f01 	tst.w	fp, #1
 801a432:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a436:	bf0c      	ite	eq
 801a438:	f00c 0c0f 	andeq.w	ip, ip, #15
 801a43c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801a440:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a444:	fa5f f48c 	uxtb.w	r4, ip
 801a448:	9412      	str	r4, [sp, #72]	; 0x48
 801a44a:	b300      	cbz	r0, 801a48e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a44c:	444b      	add	r3, r9
 801a44e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a452:	07dc      	lsls	r4, r3, #31
 801a454:	f103 0301 	add.w	r3, r3, #1
 801a458:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a45c:	bf54      	ite	pl
 801a45e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a462:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a466:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a46a:	fa5f f48c 	uxtb.w	r4, ip
 801a46e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a472:	940b      	str	r4, [sp, #44]	; 0x2c
 801a474:	07dc      	lsls	r4, r3, #31
 801a476:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a47a:	bf54      	ite	pl
 801a47c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a480:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a484:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a488:	fa5f f38c 	uxtb.w	r3, ip
 801a48c:	9313      	str	r3, [sp, #76]	; 0x4c
 801a48e:	b289      	uxth	r1, r1
 801a490:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a492:	b280      	uxth	r0, r0
 801a494:	fb01 f300 	mul.w	r3, r1, r0
 801a498:	0109      	lsls	r1, r1, #4
 801a49a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801a49e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801a4a2:	1ac9      	subs	r1, r1, r3
 801a4a4:	b280      	uxth	r0, r0
 801a4a6:	b289      	uxth	r1, r1
 801a4a8:	ebac 0c00 	sub.w	ip, ip, r0
 801a4ac:	4361      	muls	r1, r4
 801a4ae:	fa1f fc8c 	uxth.w	ip, ip
 801a4b2:	fb02 120c 	mla	r2, r2, ip, r1
 801a4b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a4b8:	fb00 2001 	mla	r0, r0, r1, r2
 801a4bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a4be:	fb03 0302 	mla	r3, r3, r2, r0
 801a4c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d039      	beq.n	801a53e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a4ca:	4a21      	ldr	r2, [pc, #132]	; (801a550 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801a4cc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801a4d0:	6810      	ldr	r0, [r2, #0]
 801a4d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4d4:	fa5f fc80 	uxtb.w	ip, r0
 801a4d8:	4353      	muls	r3, r2
 801a4da:	1c5a      	adds	r2, r3, #1
 801a4dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a4e0:	121b      	asrs	r3, r3, #8
 801a4e2:	b29a      	uxth	r2, r3
 801a4e4:	43db      	mvns	r3, r3
 801a4e6:	fb1c fc02 	smulbb	ip, ip, r2
 801a4ea:	b2db      	uxtb	r3, r3
 801a4ec:	fb01 c103 	mla	r1, r1, r3, ip
 801a4f0:	b289      	uxth	r1, r1
 801a4f2:	f101 0c01 	add.w	ip, r1, #1
 801a4f6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801a4fa:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801a4fe:	fb1c fc03 	smulbb	ip, ip, r3
 801a502:	1209      	asrs	r1, r1, #8
 801a504:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801a508:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801a50c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801a510:	fb01 c102 	mla	r1, r1, r2, ip
 801a514:	b289      	uxth	r1, r1
 801a516:	f101 0c01 	add.w	ip, r1, #1
 801a51a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801a51e:	1209      	asrs	r1, r1, #8
 801a520:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801a524:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801a528:	fb11 f303 	smulbb	r3, r1, r3
 801a52c:	fb00 3002 	mla	r0, r0, r2, r3
 801a530:	b280      	uxth	r0, r0
 801a532:	1c42      	adds	r2, r0, #1
 801a534:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a538:	1200      	asrs	r0, r0, #8
 801a53a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801a53e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a540:	f10e 0e03 	add.w	lr, lr, #3
 801a544:	f108 38ff 	add.w	r8, r8, #4294967295
 801a548:	441d      	add	r5, r3
 801a54a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a54c:	441e      	add	r6, r3
 801a54e:	e6db      	b.n	801a308 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a550:	24006bc4 	.word	0x24006bc4
 801a554:	2800      	cmp	r0, #0
 801a556:	d09a      	beq.n	801a48e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a558:	444b      	add	r3, r9
 801a55a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a55e:	07db      	lsls	r3, r3, #31
 801a560:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a564:	bf54      	ite	pl
 801a566:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a56a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a56e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a572:	fa5f f38c 	uxtb.w	r3, ip
 801a576:	930b      	str	r3, [sp, #44]	; 0x2c
 801a578:	e789      	b.n	801a48e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a57a:	b017      	add	sp, #92	; 0x5c
 801a57c:	ecbd 8b08 	vpop	{d8-d11}
 801a580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a584 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801a584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a588:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801a58c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801a590:	2800      	cmp	r0, #0
 801a592:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801a596:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801a59a:	fb0c 0e03 	mla	lr, ip, r3, r0
 801a59e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801a5a2:	db6b      	blt.n	801a67c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a5a4:	4580      	cmp	r8, r0
 801a5a6:	dd69      	ble.n	801a67c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a5a8:	f1bc 0f00 	cmp.w	ip, #0
 801a5ac:	db66      	blt.n	801a67c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a5ae:	45e1      	cmp	r9, ip
 801a5b0:	dd64      	ble.n	801a67c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a5b2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801a5b6:	f01e 0f01 	tst.w	lr, #1
 801a5ba:	5d16      	ldrb	r6, [r2, r4]
 801a5bc:	bf0c      	ite	eq
 801a5be:	f006 060f 	andeq.w	r6, r6, #15
 801a5c2:	1136      	asrne	r6, r6, #4
 801a5c4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801a5c8:	b2f6      	uxtb	r6, r6
 801a5ca:	f110 0a01 	adds.w	sl, r0, #1
 801a5ce:	d457      	bmi.n	801a680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5d0:	45d0      	cmp	r8, sl
 801a5d2:	dd55      	ble.n	801a680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5d4:	f1bc 0f00 	cmp.w	ip, #0
 801a5d8:	db52      	blt.n	801a680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5da:	45e1      	cmp	r9, ip
 801a5dc:	dd50      	ble.n	801a680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5de:	2f00      	cmp	r7, #0
 801a5e0:	f000 80a5 	beq.w	801a72e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801a5e4:	f10e 0b01 	add.w	fp, lr, #1
 801a5e8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801a5ec:	f01b 0f01 	tst.w	fp, #1
 801a5f0:	5d14      	ldrb	r4, [r2, r4]
 801a5f2:	bf0c      	ite	eq
 801a5f4:	f004 040f 	andeq.w	r4, r4, #15
 801a5f8:	1124      	asrne	r4, r4, #4
 801a5fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801a5fe:	b2e4      	uxtb	r4, r4
 801a600:	2d00      	cmp	r5, #0
 801a602:	f000 808f 	beq.w	801a724 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801a606:	2800      	cmp	r0, #0
 801a608:	f10c 0c01 	add.w	ip, ip, #1
 801a60c:	db3c      	blt.n	801a688 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a60e:	4580      	cmp	r8, r0
 801a610:	dd3a      	ble.n	801a688 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a612:	f1bc 0f00 	cmp.w	ip, #0
 801a616:	db37      	blt.n	801a688 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a618:	45e1      	cmp	r9, ip
 801a61a:	dd35      	ble.n	801a688 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a61c:	eb03 0b0e 	add.w	fp, r3, lr
 801a620:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801a624:	f01b 0f01 	tst.w	fp, #1
 801a628:	5c10      	ldrb	r0, [r2, r0]
 801a62a:	bf0c      	ite	eq
 801a62c:	f000 000f 	andeq.w	r0, r0, #15
 801a630:	1100      	asrne	r0, r0, #4
 801a632:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a636:	b2c0      	uxtb	r0, r0
 801a638:	f1ba 0f00 	cmp.w	sl, #0
 801a63c:	db26      	blt.n	801a68c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a63e:	45d0      	cmp	r8, sl
 801a640:	dd24      	ble.n	801a68c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a642:	f1bc 0f00 	cmp.w	ip, #0
 801a646:	db21      	blt.n	801a68c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a648:	45e1      	cmp	r9, ip
 801a64a:	dd1f      	ble.n	801a68c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a64c:	b307      	cbz	r7, 801a690 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801a64e:	3301      	adds	r3, #1
 801a650:	449e      	add	lr, r3
 801a652:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801a656:	f01e 0f01 	tst.w	lr, #1
 801a65a:	5cd3      	ldrb	r3, [r2, r3]
 801a65c:	bf0c      	ite	eq
 801a65e:	f003 030f 	andeq.w	r3, r3, #15
 801a662:	111b      	asrne	r3, r3, #4
 801a664:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a668:	b2db      	uxtb	r3, r3
 801a66a:	2f0f      	cmp	r7, #15
 801a66c:	d911      	bls.n	801a692 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801a66e:	4b32      	ldr	r3, [pc, #200]	; (801a738 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801a670:	f240 1157 	movw	r1, #343	; 0x157
 801a674:	4a31      	ldr	r2, [pc, #196]	; (801a73c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801a676:	4832      	ldr	r0, [pc, #200]	; (801a740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801a678:	f000 fd10 	bl	801b09c <__assert_func>
 801a67c:	2600      	movs	r6, #0
 801a67e:	e7a4      	b.n	801a5ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801a680:	2400      	movs	r4, #0
 801a682:	e7bd      	b.n	801a600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801a684:	463c      	mov	r4, r7
 801a686:	e7be      	b.n	801a606 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801a688:	2000      	movs	r0, #0
 801a68a:	e7d5      	b.n	801a638 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801a68c:	2300      	movs	r3, #0
 801a68e:	e7ec      	b.n	801a66a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801a690:	463b      	mov	r3, r7
 801a692:	2d0f      	cmp	r5, #15
 801a694:	d8eb      	bhi.n	801a66e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801a696:	b2bf      	uxth	r7, r7
 801a698:	b2ad      	uxth	r5, r5
 801a69a:	fb07 f205 	mul.w	r2, r7, r5
 801a69e:	013f      	lsls	r7, r7, #4
 801a6a0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801a6a4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801a6a8:	1abf      	subs	r7, r7, r2
 801a6aa:	b2ad      	uxth	r5, r5
 801a6ac:	b2bf      	uxth	r7, r7
 801a6ae:	ebac 0c05 	sub.w	ip, ip, r5
 801a6b2:	437c      	muls	r4, r7
 801a6b4:	fa1f fc8c 	uxth.w	ip, ip
 801a6b8:	fb06 440c 	mla	r4, r6, ip, r4
 801a6bc:	fb05 4400 	mla	r4, r5, r0, r4
 801a6c0:	fb02 4303 	mla	r3, r2, r3, r4
 801a6c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a6c8:	b353      	cbz	r3, 801a720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801a6ca:	4a1e      	ldr	r2, [pc, #120]	; (801a744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801a6cc:	7808      	ldrb	r0, [r1, #0]
 801a6ce:	6814      	ldr	r4, [r2, #0]
 801a6d0:	b29a      	uxth	r2, r3
 801a6d2:	43db      	mvns	r3, r3
 801a6d4:	b2e5      	uxtb	r5, r4
 801a6d6:	b2db      	uxtb	r3, r3
 801a6d8:	fb15 f502 	smulbb	r5, r5, r2
 801a6dc:	fb00 5003 	mla	r0, r0, r3, r5
 801a6e0:	b280      	uxth	r0, r0
 801a6e2:	1c45      	adds	r5, r0, #1
 801a6e4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801a6e8:	784d      	ldrb	r5, [r1, #1]
 801a6ea:	fb15 f503 	smulbb	r5, r5, r3
 801a6ee:	1200      	asrs	r0, r0, #8
 801a6f0:	7008      	strb	r0, [r1, #0]
 801a6f2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801a6f6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801a6fa:	fb00 5002 	mla	r0, r0, r2, r5
 801a6fe:	b280      	uxth	r0, r0
 801a700:	1c45      	adds	r5, r0, #1
 801a702:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801a706:	1200      	asrs	r0, r0, #8
 801a708:	7048      	strb	r0, [r1, #1]
 801a70a:	7888      	ldrb	r0, [r1, #2]
 801a70c:	fb10 f303 	smulbb	r3, r0, r3
 801a710:	fb04 3202 	mla	r2, r4, r2, r3
 801a714:	b292      	uxth	r2, r2
 801a716:	1c53      	adds	r3, r2, #1
 801a718:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a71c:	1212      	asrs	r2, r2, #8
 801a71e:	708a      	strb	r2, [r1, #2]
 801a720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a724:	2f0f      	cmp	r7, #15
 801a726:	d8a2      	bhi.n	801a66e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801a728:	462b      	mov	r3, r5
 801a72a:	4628      	mov	r0, r5
 801a72c:	e7b3      	b.n	801a696 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801a72e:	2d00      	cmp	r5, #0
 801a730:	d1a8      	bne.n	801a684 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801a732:	462c      	mov	r4, r5
 801a734:	e7f8      	b.n	801a728 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801a736:	bf00      	nop
 801a738:	0801f137 	.word	0x0801f137
 801a73c:	0801f5ee 	.word	0x0801f5ee
 801a740:	0801f1bf 	.word	0x0801f1bf
 801a744:	24006bc4 	.word	0x24006bc4

0801a748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a74c:	ed2d 8b08 	vpush	{d8-d11}
 801a750:	b093      	sub	sp, #76	; 0x4c
 801a752:	461c      	mov	r4, r3
 801a754:	eeb0 aa40 	vmov.f32	s20, s0
 801a758:	920c      	str	r2, [sp, #48]	; 0x30
 801a75a:	eef0 9a60 	vmov.f32	s19, s1
 801a75e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a760:	eeb0 9a41 	vmov.f32	s18, s2
 801a764:	9011      	str	r0, [sp, #68]	; 0x44
 801a766:	eeb0 8a62 	vmov.f32	s16, s5
 801a76a:	6850      	ldr	r0, [r2, #4]
 801a76c:	eef0 8a43 	vmov.f32	s17, s6
 801a770:	9107      	str	r1, [sp, #28]
 801a772:	eef0 ba44 	vmov.f32	s23, s8
 801a776:	6812      	ldr	r2, [r2, #0]
 801a778:	eeb0 ba64 	vmov.f32	s22, s9
 801a77c:	eef0 aa45 	vmov.f32	s21, s10
 801a780:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a784:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801a788:	fb00 1303 	mla	r3, r0, r3, r1
 801a78c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a790:	eb02 0b03 	add.w	fp, r2, r3
 801a794:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a796:	689b      	ldr	r3, [r3, #8]
 801a798:	3301      	adds	r3, #1
 801a79a:	f023 0301 	bic.w	r3, r3, #1
 801a79e:	9309      	str	r3, [sp, #36]	; 0x24
 801a7a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a7a2:	f8d3 8000 	ldr.w	r8, [r3]
 801a7a6:	9b07      	ldr	r3, [sp, #28]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	dc03      	bgt.n	801a7b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a7ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	f340 822b 	ble.w	801ac0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a7b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a7b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a7ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a7be:	1e48      	subs	r0, r1, #1
 801a7c0:	1e57      	subs	r7, r2, #1
 801a7c2:	2c00      	cmp	r4, #0
 801a7c4:	f340 80d7 	ble.w	801a976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801a7c8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a7cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a7d0:	d406      	bmi.n	801a7e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7d2:	4584      	cmp	ip, r0
 801a7d4:	da04      	bge.n	801a7e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	db02      	blt.n	801a7e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7da:	42bb      	cmp	r3, r7
 801a7dc:	f2c0 80cc 	blt.w	801a978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801a7e0:	f11c 0c01 	adds.w	ip, ip, #1
 801a7e4:	f100 80bf 	bmi.w	801a966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7e8:	4561      	cmp	r1, ip
 801a7ea:	f2c0 80bc 	blt.w	801a966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7ee:	3301      	adds	r3, #1
 801a7f0:	f100 80b9 	bmi.w	801a966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7f4:	429a      	cmp	r2, r3
 801a7f6:	f2c0 80b6 	blt.w	801a966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7fa:	46a2      	mov	sl, r4
 801a7fc:	465f      	mov	r7, fp
 801a7fe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801a802:	f1ba 0f00 	cmp.w	sl, #0
 801a806:	f340 80d4 	ble.w	801a9b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a80a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801a80e:	1430      	asrs	r0, r6, #16
 801a810:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a814:	9308      	str	r3, [sp, #32]
 801a816:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a818:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801a81c:	142b      	asrs	r3, r5, #16
 801a81e:	f100 8124 	bmi.w	801aa6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a822:	f10c 32ff 	add.w	r2, ip, #4294967295
 801a826:	4293      	cmp	r3, r2
 801a828:	f280 811f 	bge.w	801aa6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a82c:	2800      	cmp	r0, #0
 801a82e:	f2c0 811c 	blt.w	801aa6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a832:	f10e 32ff 	add.w	r2, lr, #4294967295
 801a836:	4290      	cmp	r0, r2
 801a838:	f280 8117 	bge.w	801aa6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a83c:	fb00 3309 	mla	r3, r0, r9, r3
 801a840:	0858      	lsrs	r0, r3, #1
 801a842:	07da      	lsls	r2, r3, #31
 801a844:	9a08      	ldr	r2, [sp, #32]
 801a846:	f818 c000 	ldrb.w	ip, [r8, r0]
 801a84a:	bf54      	ite	pl
 801a84c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a850:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a854:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a858:	fa5f fc8c 	uxtb.w	ip, ip
 801a85c:	2a00      	cmp	r2, #0
 801a85e:	f000 80ed 	beq.w	801aa3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801a862:	1c58      	adds	r0, r3, #1
 801a864:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801a868:	07c0      	lsls	r0, r0, #31
 801a86a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801a86e:	bf54      	ite	pl
 801a870:	f00e 0e0f 	andpl.w	lr, lr, #15
 801a874:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801a878:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801a87c:	fa5f fe8e 	uxtb.w	lr, lr
 801a880:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801a884:	b1c9      	cbz	r1, 801a8ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801a886:	444b      	add	r3, r9
 801a888:	0858      	lsrs	r0, r3, #1
 801a88a:	07da      	lsls	r2, r3, #31
 801a88c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a890:	bf54      	ite	pl
 801a892:	f000 000f 	andpl.w	r0, r0, #15
 801a896:	1100      	asrmi	r0, r0, #4
 801a898:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a89c:	b2c0      	uxtb	r0, r0
 801a89e:	900a      	str	r0, [sp, #40]	; 0x28
 801a8a0:	1c58      	adds	r0, r3, #1
 801a8a2:	0843      	lsrs	r3, r0, #1
 801a8a4:	07c2      	lsls	r2, r0, #31
 801a8a6:	f818 3003 	ldrb.w	r3, [r8, r3]
 801a8aa:	bf54      	ite	pl
 801a8ac:	f003 030f 	andpl.w	r3, r3, #15
 801a8b0:	111b      	asrmi	r3, r3, #4
 801a8b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a8b6:	b2db      	uxtb	r3, r3
 801a8b8:	930e      	str	r3, [sp, #56]	; 0x38
 801a8ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a8be:	b289      	uxth	r1, r1
 801a8c0:	fb02 f301 	mul.w	r3, r2, r1
 801a8c4:	0112      	lsls	r2, r2, #4
 801a8c6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801a8ca:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801a8ce:	1ad2      	subs	r2, r2, r3
 801a8d0:	b289      	uxth	r1, r1
 801a8d2:	b292      	uxth	r2, r2
 801a8d4:	1a40      	subs	r0, r0, r1
 801a8d6:	fa1f fe80 	uxth.w	lr, r0
 801a8da:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a8dc:	4342      	muls	r2, r0
 801a8de:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801a8e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8e4:	fb01 c102 	mla	r1, r1, r2, ip
 801a8e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8ea:	fb03 1302 	mla	r3, r3, r2, r1
 801a8ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a8f2:	b383      	cbz	r3, 801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801a8f4:	4ac7      	ldr	r2, [pc, #796]	; (801ac14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801a8f6:	2bff      	cmp	r3, #255	; 0xff
 801a8f8:	6812      	ldr	r2, [r2, #0]
 801a8fa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801a8fe:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801a902:	b2d2      	uxtb	r2, r2
 801a904:	f000 80ac 	beq.w	801aa60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801a908:	b299      	uxth	r1, r3
 801a90a:	43db      	mvns	r3, r3
 801a90c:	f897 c000 	ldrb.w	ip, [r7]
 801a910:	fb12 f201 	smulbb	r2, r2, r1
 801a914:	b2db      	uxtb	r3, r3
 801a916:	fb10 f001 	smulbb	r0, r0, r1
 801a91a:	fb0c 2203 	mla	r2, ip, r3, r2
 801a91e:	fb1e f101 	smulbb	r1, lr, r1
 801a922:	b292      	uxth	r2, r2
 801a924:	f102 0c01 	add.w	ip, r2, #1
 801a928:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a92c:	1212      	asrs	r2, r2, #8
 801a92e:	703a      	strb	r2, [r7, #0]
 801a930:	787a      	ldrb	r2, [r7, #1]
 801a932:	fb02 0003 	mla	r0, r2, r3, r0
 801a936:	b280      	uxth	r0, r0
 801a938:	1c42      	adds	r2, r0, #1
 801a93a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a93e:	78ba      	ldrb	r2, [r7, #2]
 801a940:	fb02 1303 	mla	r3, r2, r3, r1
 801a944:	1200      	asrs	r0, r0, #8
 801a946:	b29b      	uxth	r3, r3
 801a948:	7078      	strb	r0, [r7, #1]
 801a94a:	f103 0e01 	add.w	lr, r3, #1
 801a94e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801a952:	121b      	asrs	r3, r3, #8
 801a954:	70bb      	strb	r3, [r7, #2]
 801a956:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a958:	3703      	adds	r7, #3
 801a95a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a95e:	441d      	add	r5, r3
 801a960:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a962:	441e      	add	r6, r3
 801a964:	e74d      	b.n	801a802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a966:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a968:	3c01      	subs	r4, #1
 801a96a:	f10b 0b03 	add.w	fp, fp, #3
 801a96e:	441d      	add	r5, r3
 801a970:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a972:	441e      	add	r6, r3
 801a974:	e725      	b.n	801a7c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a976:	d021      	beq.n	801a9bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801a978:	1e63      	subs	r3, r4, #1
 801a97a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a97c:	fb00 5003 	mla	r0, r0, r3, r5
 801a980:	1400      	asrs	r0, r0, #16
 801a982:	f53f af3a 	bmi.w	801a7fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a986:	3901      	subs	r1, #1
 801a988:	4288      	cmp	r0, r1
 801a98a:	f6bf af36 	bge.w	801a7fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a98e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a990:	fb01 6303 	mla	r3, r1, r3, r6
 801a994:	141b      	asrs	r3, r3, #16
 801a996:	f53f af30 	bmi.w	801a7fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a99a:	3a01      	subs	r2, #1
 801a99c:	4293      	cmp	r3, r2
 801a99e:	f6bf af2c 	bge.w	801a7fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a9a2:	f10b 0c03 	add.w	ip, fp, #3
 801a9a6:	46a6      	mov	lr, r4
 801a9a8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801a9ac:	f1be 0f00 	cmp.w	lr, #0
 801a9b0:	dc79      	bgt.n	801aaa6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801a9b2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a9b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a9ba:	44a3      	add	fp, r4
 801a9bc:	9b07      	ldr	r3, [sp, #28]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	f340 8123 	ble.w	801ac0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a9c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a9c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a9ca:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a9ce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a9d2:	eef0 6a48 	vmov.f32	s13, s16
 801a9d6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a9da:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a9de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9e2:	ee16 5a90 	vmov	r5, s13
 801a9e6:	eef0 6a68 	vmov.f32	s13, s17
 801a9ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9ee:	ee16 6a90 	vmov	r6, s13
 801a9f2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a9f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a9fa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a9fe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801aa02:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801aa06:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801aa0a:	ee18 2a10 	vmov	r2, s16
 801aa0e:	eeb0 8a47 	vmov.f32	s16, s14
 801aa12:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa16:	ee18 2a90 	vmov	r2, s17
 801aa1a:	9327      	str	r3, [sp, #156]	; 0x9c
 801aa1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801aa1e:	eef0 8a67 	vmov.f32	s17, s15
 801aa22:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa26:	9328      	str	r3, [sp, #160]	; 0xa0
 801aa28:	9b07      	ldr	r3, [sp, #28]
 801aa2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa2c:	3b01      	subs	r3, #1
 801aa2e:	9307      	str	r3, [sp, #28]
 801aa30:	bf08      	it	eq
 801aa32:	4614      	moveq	r4, r2
 801aa34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801aa36:	bf18      	it	ne
 801aa38:	461c      	movne	r4, r3
 801aa3a:	e6b4      	b.n	801a7a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801aa3c:	2900      	cmp	r1, #0
 801aa3e:	f43f af3c 	beq.w	801a8ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801aa42:	eb09 0003 	add.w	r0, r9, r3
 801aa46:	0843      	lsrs	r3, r0, #1
 801aa48:	07c0      	lsls	r0, r0, #31
 801aa4a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801aa4e:	bf54      	ite	pl
 801aa50:	f003 030f 	andpl.w	r3, r3, #15
 801aa54:	111b      	asrmi	r3, r3, #4
 801aa56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801aa5a:	b2db      	uxtb	r3, r3
 801aa5c:	930a      	str	r3, [sp, #40]	; 0x28
 801aa5e:	e72c      	b.n	801a8ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801aa60:	703a      	strb	r2, [r7, #0]
 801aa62:	7078      	strb	r0, [r7, #1]
 801aa64:	f887 e002 	strb.w	lr, [r7, #2]
 801aa68:	e775      	b.n	801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa6a:	1c5a      	adds	r2, r3, #1
 801aa6c:	f53f af73 	bmi.w	801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa70:	4594      	cmp	ip, r2
 801aa72:	f6ff af70 	blt.w	801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa76:	1c42      	adds	r2, r0, #1
 801aa78:	f53f af6d 	bmi.w	801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa7c:	4596      	cmp	lr, r2
 801aa7e:	f6ff af6a 	blt.w	801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa82:	9302      	str	r3, [sp, #8]
 801aa84:	fa0f f38e 	sxth.w	r3, lr
 801aa88:	9a08      	ldr	r2, [sp, #32]
 801aa8a:	9301      	str	r3, [sp, #4]
 801aa8c:	fa0f f38c 	sxth.w	r3, ip
 801aa90:	9105      	str	r1, [sp, #20]
 801aa92:	4639      	mov	r1, r7
 801aa94:	9300      	str	r3, [sp, #0]
 801aa96:	464b      	mov	r3, r9
 801aa98:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801aa9c:	4642      	mov	r2, r8
 801aa9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aaa0:	f7ff fd70 	bl	801a584 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801aaa4:	e757      	b.n	801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aaa6:	142a      	asrs	r2, r5, #16
 801aaa8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801aaac:	1433      	asrs	r3, r6, #16
 801aaae:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801aab2:	fb09 2303 	mla	r3, r9, r3, r2
 801aab6:	085a      	lsrs	r2, r3, #1
 801aab8:	07d9      	lsls	r1, r3, #31
 801aaba:	f818 2002 	ldrb.w	r2, [r8, r2]
 801aabe:	bf54      	ite	pl
 801aac0:	f002 020f 	andpl.w	r2, r2, #15
 801aac4:	1112      	asrmi	r2, r2, #4
 801aac6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801aaca:	b2d2      	uxtb	r2, r2
 801aacc:	2800      	cmp	r0, #0
 801aace:	f000 8085 	beq.w	801abdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801aad2:	f103 0a01 	add.w	sl, r3, #1
 801aad6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801aada:	f01a 0f01 	tst.w	sl, #1
 801aade:	f818 1001 	ldrb.w	r1, [r8, r1]
 801aae2:	bf0c      	ite	eq
 801aae4:	f001 010f 	andeq.w	r1, r1, #15
 801aae8:	1109      	asrne	r1, r1, #4
 801aaea:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801aaee:	b2c9      	uxtb	r1, r1
 801aaf0:	910f      	str	r1, [sp, #60]	; 0x3c
 801aaf2:	b1df      	cbz	r7, 801ab2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801aaf4:	444b      	add	r3, r9
 801aaf6:	0859      	lsrs	r1, r3, #1
 801aaf8:	f013 0f01 	tst.w	r3, #1
 801aafc:	f103 0301 	add.w	r3, r3, #1
 801ab00:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ab04:	bf0c      	ite	eq
 801ab06:	f001 010f 	andeq.w	r1, r1, #15
 801ab0a:	1109      	asrne	r1, r1, #4
 801ab0c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ab10:	b2c9      	uxtb	r1, r1
 801ab12:	910b      	str	r1, [sp, #44]	; 0x2c
 801ab14:	0859      	lsrs	r1, r3, #1
 801ab16:	07db      	lsls	r3, r3, #31
 801ab18:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ab1c:	bf54      	ite	pl
 801ab1e:	f001 010f 	andpl.w	r1, r1, #15
 801ab22:	1109      	asrmi	r1, r1, #4
 801ab24:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ab28:	b2c9      	uxtb	r1, r1
 801ab2a:	9110      	str	r1, [sp, #64]	; 0x40
 801ab2c:	b280      	uxth	r0, r0
 801ab2e:	b2bf      	uxth	r7, r7
 801ab30:	fb00 f307 	mul.w	r3, r0, r7
 801ab34:	0100      	lsls	r0, r0, #4
 801ab36:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801ab3a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801ab3e:	1ac0      	subs	r0, r0, r3
 801ab40:	b2bf      	uxth	r7, r7
 801ab42:	b280      	uxth	r0, r0
 801ab44:	1bc9      	subs	r1, r1, r7
 801ab46:	fa1f fa81 	uxth.w	sl, r1
 801ab4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ab4c:	4348      	muls	r0, r1
 801ab4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ab50:	fb02 020a 	mla	r2, r2, sl, r0
 801ab54:	fb07 2701 	mla	r7, r7, r1, r2
 801ab58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab5a:	fb03 7302 	mla	r3, r3, r2, r7
 801ab5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab62:	b393      	cbz	r3, 801abca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801ab64:	4a2b      	ldr	r2, [pc, #172]	; (801ac14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801ab66:	2bff      	cmp	r3, #255	; 0xff
 801ab68:	6811      	ldr	r1, [r2, #0]
 801ab6a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801ab6e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801ab72:	b2c9      	uxtb	r1, r1
 801ab74:	d042      	beq.n	801abfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ab76:	b298      	uxth	r0, r3
 801ab78:	43db      	mvns	r3, r3
 801ab7a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801ab7e:	fb11 f100 	smulbb	r1, r1, r0
 801ab82:	b2db      	uxtb	r3, r3
 801ab84:	fb17 f700 	smulbb	r7, r7, r0
 801ab88:	fb02 1103 	mla	r1, r2, r3, r1
 801ab8c:	fb1a f000 	smulbb	r0, sl, r0
 801ab90:	b289      	uxth	r1, r1
 801ab92:	1c4a      	adds	r2, r1, #1
 801ab94:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ab98:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801ab9c:	fb02 7703 	mla	r7, r2, r3, r7
 801aba0:	1209      	asrs	r1, r1, #8
 801aba2:	b2bf      	uxth	r7, r7
 801aba4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801aba8:	1c7a      	adds	r2, r7, #1
 801abaa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801abae:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801abb2:	fb02 0303 	mla	r3, r2, r3, r0
 801abb6:	123f      	asrs	r7, r7, #8
 801abb8:	b29b      	uxth	r3, r3
 801abba:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801abbe:	1c5a      	adds	r2, r3, #1
 801abc0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801abc4:	121b      	asrs	r3, r3, #8
 801abc6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801abca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801abcc:	f10c 0c03 	add.w	ip, ip, #3
 801abd0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801abd4:	441d      	add	r5, r3
 801abd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801abd8:	441e      	add	r6, r3
 801abda:	e6e7      	b.n	801a9ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801abdc:	2f00      	cmp	r7, #0
 801abde:	d0a5      	beq.n	801ab2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801abe0:	444b      	add	r3, r9
 801abe2:	0859      	lsrs	r1, r3, #1
 801abe4:	07db      	lsls	r3, r3, #31
 801abe6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801abea:	bf54      	ite	pl
 801abec:	f001 010f 	andpl.w	r1, r1, #15
 801abf0:	1109      	asrmi	r1, r1, #4
 801abf2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801abf6:	b2c9      	uxtb	r1, r1
 801abf8:	910b      	str	r1, [sp, #44]	; 0x2c
 801abfa:	e797      	b.n	801ab2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801abfc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801ac00:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801ac04:	f80c ac01 	strb.w	sl, [ip, #-1]
 801ac08:	e7df      	b.n	801abca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801ac0a:	b013      	add	sp, #76	; 0x4c
 801ac0c:	ecbd 8b08 	vpop	{d8-d11}
 801ac10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac14:	24006bc4 	.word	0x24006bc4

0801ac18 <CRC_Lock>:
 801ac18:	4a20      	ldr	r2, [pc, #128]	; (801ac9c <CRC_Lock+0x84>)
 801ac1a:	b530      	push	{r4, r5, lr}
 801ac1c:	6813      	ldr	r3, [r2, #0]
 801ac1e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801ac22:	f24c 2540 	movw	r5, #49728	; 0xc240
 801ac26:	f023 0301 	bic.w	r3, r3, #1
 801ac2a:	6013      	str	r3, [r2, #0]
 801ac2c:	4b1c      	ldr	r3, [pc, #112]	; (801aca0 <CRC_Lock+0x88>)
 801ac2e:	681a      	ldr	r2, [r3, #0]
 801ac30:	4022      	ands	r2, r4
 801ac32:	42aa      	cmp	r2, r5
 801ac34:	d005      	beq.n	801ac42 <CRC_Lock+0x2a>
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	f24c 2270 	movw	r2, #49776	; 0xc270
 801ac3c:	4023      	ands	r3, r4
 801ac3e:	4293      	cmp	r3, r2
 801ac40:	d124      	bne.n	801ac8c <CRC_Lock+0x74>
 801ac42:	4b18      	ldr	r3, [pc, #96]	; (801aca4 <CRC_Lock+0x8c>)
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	bb0b      	cbnz	r3, 801ac8c <CRC_Lock+0x74>
 801ac48:	4b17      	ldr	r3, [pc, #92]	; (801aca8 <CRC_Lock+0x90>)
 801ac4a:	681a      	ldr	r2, [r3, #0]
 801ac4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ac50:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ac54:	d00d      	beq.n	801ac72 <CRC_Lock+0x5a>
 801ac56:	681a      	ldr	r2, [r3, #0]
 801ac58:	f240 4483 	movw	r4, #1155	; 0x483
 801ac5c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ac60:	42a2      	cmp	r2, r4
 801ac62:	d006      	beq.n	801ac72 <CRC_Lock+0x5a>
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	f240 4285 	movw	r2, #1157	; 0x485
 801ac6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ac6e:	4293      	cmp	r3, r2
 801ac70:	d10c      	bne.n	801ac8c <CRC_Lock+0x74>
 801ac72:	4b0e      	ldr	r3, [pc, #56]	; (801acac <CRC_Lock+0x94>)
 801ac74:	2201      	movs	r2, #1
 801ac76:	601a      	str	r2, [r3, #0]
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	2a00      	cmp	r2, #0
 801ac7c:	d1fc      	bne.n	801ac78 <CRC_Lock+0x60>
 801ac7e:	4b0c      	ldr	r3, [pc, #48]	; (801acb0 <CRC_Lock+0x98>)
 801ac80:	6018      	str	r0, [r3, #0]
 801ac82:	6818      	ldr	r0, [r3, #0]
 801ac84:	1a43      	subs	r3, r0, r1
 801ac86:	4258      	negs	r0, r3
 801ac88:	4158      	adcs	r0, r3
 801ac8a:	bd30      	pop	{r4, r5, pc}
 801ac8c:	4b09      	ldr	r3, [pc, #36]	; (801acb4 <CRC_Lock+0x9c>)
 801ac8e:	2201      	movs	r2, #1
 801ac90:	601a      	str	r2, [r3, #0]
 801ac92:	681a      	ldr	r2, [r3, #0]
 801ac94:	2a00      	cmp	r2, #0
 801ac96:	d1fc      	bne.n	801ac92 <CRC_Lock+0x7a>
 801ac98:	4b07      	ldr	r3, [pc, #28]	; (801acb8 <CRC_Lock+0xa0>)
 801ac9a:	e7f1      	b.n	801ac80 <CRC_Lock+0x68>
 801ac9c:	e0002000 	.word	0xe0002000
 801aca0:	e000ed00 	.word	0xe000ed00
 801aca4:	e0042000 	.word	0xe0042000
 801aca8:	5c001000 	.word	0x5c001000
 801acac:	58024c08 	.word	0x58024c08
 801acb0:	58024c00 	.word	0x58024c00
 801acb4:	40023008 	.word	0x40023008
 801acb8:	40023000 	.word	0x40023000

0801acbc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801acbc:	6101      	str	r1, [r0, #16]
 801acbe:	4770      	bx	lr

0801acc0 <_ZN8touchgfx8Gestures4tickEv>:
 801acc0:	7b83      	ldrb	r3, [r0, #14]
 801acc2:	b14b      	cbz	r3, 801acd8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801acc4:	8903      	ldrh	r3, [r0, #8]
 801acc6:	3301      	adds	r3, #1
 801acc8:	b29b      	uxth	r3, r3
 801acca:	2b07      	cmp	r3, #7
 801accc:	8103      	strh	r3, [r0, #8]
 801acce:	bf81      	itttt	hi
 801acd0:	2300      	movhi	r3, #0
 801acd2:	8143      	strhhi	r3, [r0, #10]
 801acd4:	8183      	strhhi	r3, [r0, #12]
 801acd6:	7383      	strbhi	r3, [r0, #14]
 801acd8:	4770      	bx	lr
	...

0801acdc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801acdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ace0:	4604      	mov	r4, r0
 801ace2:	4698      	mov	r8, r3
 801ace4:	8880      	ldrh	r0, [r0, #4]
 801ace6:	4617      	mov	r7, r2
 801ace8:	4b1d      	ldr	r3, [pc, #116]	; (801ad60 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801acea:	460e      	mov	r6, r1
 801acec:	f8ad 0006 	strh.w	r0, [sp, #6]
 801acf0:	eba8 0000 	sub.w	r0, r8, r0
 801acf4:	9300      	str	r3, [sp, #0]
 801acf6:	2300      	movs	r3, #0
 801acf8:	b280      	uxth	r0, r0
 801acfa:	8aa2      	ldrh	r2, [r4, #20]
 801acfc:	f88d 3004 	strb.w	r3, [sp, #4]
 801ad00:	b203      	sxth	r3, r0
 801ad02:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801ad06:	88e1      	ldrh	r1, [r4, #6]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ad0e:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ad12:	bfb8      	it	lt
 801ad14:	4240      	neglt	r0, r0
 801ad16:	f8ad 500c 	strh.w	r5, [sp, #12]
 801ad1a:	bfb8      	it	lt
 801ad1c:	b203      	sxthlt	r3, r0
 801ad1e:	4293      	cmp	r3, r2
 801ad20:	dc08      	bgt.n	801ad34 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801ad22:	1a69      	subs	r1, r5, r1
 801ad24:	b289      	uxth	r1, r1
 801ad26:	b20b      	sxth	r3, r1
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	bfbc      	itt	lt
 801ad2c:	4249      	neglt	r1, r1
 801ad2e:	b20b      	sxthlt	r3, r1
 801ad30:	429a      	cmp	r2, r3
 801ad32:	da13      	bge.n	801ad5c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801ad34:	6920      	ldr	r0, [r4, #16]
 801ad36:	4669      	mov	r1, sp
 801ad38:	eba8 0606 	sub.w	r6, r8, r6
 801ad3c:	1bef      	subs	r7, r5, r7
 801ad3e:	6803      	ldr	r3, [r0, #0]
 801ad40:	685b      	ldr	r3, [r3, #4]
 801ad42:	4798      	blx	r3
 801ad44:	2300      	movs	r3, #0
 801ad46:	2001      	movs	r0, #1
 801ad48:	8166      	strh	r6, [r4, #10]
 801ad4a:	8123      	strh	r3, [r4, #8]
 801ad4c:	81a7      	strh	r7, [r4, #12]
 801ad4e:	f8a4 8004 	strh.w	r8, [r4, #4]
 801ad52:	80e5      	strh	r5, [r4, #6]
 801ad54:	73a0      	strb	r0, [r4, #14]
 801ad56:	b004      	add	sp, #16
 801ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad5c:	2000      	movs	r0, #0
 801ad5e:	e7fa      	b.n	801ad56 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801ad60:	0801e5f0 	.word	0x0801e5f0

0801ad64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad66:	461e      	mov	r6, r3
 801ad68:	1e4b      	subs	r3, r1, #1
 801ad6a:	b085      	sub	sp, #20
 801ad6c:	4604      	mov	r4, r0
 801ad6e:	2b01      	cmp	r3, #1
 801ad70:	460d      	mov	r5, r1
 801ad72:	4617      	mov	r7, r2
 801ad74:	d84b      	bhi.n	801ae0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801ad76:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ad7a:	1cd3      	adds	r3, r2, #3
 801ad7c:	b29b      	uxth	r3, r3
 801ad7e:	2b06      	cmp	r3, #6
 801ad80:	d916      	bls.n	801adb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801ad82:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801ae24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801ad86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ad8a:	f8cd c004 	str.w	ip, [sp, #4]
 801ad8e:	f04f 0c00 	mov.w	ip, #0
 801ad92:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ad96:	6900      	ldr	r0, [r0, #16]
 801ad98:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ad9c:	a901      	add	r1, sp, #4
 801ad9e:	f88d c008 	strb.w	ip, [sp, #8]
 801ada2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ada6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801adaa:	6803      	ldr	r3, [r0, #0]
 801adac:	689b      	ldr	r3, [r3, #8]
 801adae:	4798      	blx	r3
 801adb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801adb4:	1cd3      	adds	r3, r2, #3
 801adb6:	b29b      	uxth	r3, r3
 801adb8:	2b06      	cmp	r3, #6
 801adba:	d916      	bls.n	801adea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801adbc:	f8df c064 	ldr.w	ip, [pc, #100]	; 801ae24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801adc0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801adc4:	f8cd c004 	str.w	ip, [sp, #4]
 801adc8:	f04f 0c01 	mov.w	ip, #1
 801adcc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801add0:	6920      	ldr	r0, [r4, #16]
 801add2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801add6:	a901      	add	r1, sp, #4
 801add8:	f88d c008 	strb.w	ip, [sp, #8]
 801addc:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ade0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ade4:	6803      	ldr	r3, [r0, #0]
 801ade6:	689b      	ldr	r3, [r3, #8]
 801ade8:	4798      	blx	r3
 801adea:	4b0d      	ldr	r3, [pc, #52]	; (801ae20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801adec:	a901      	add	r1, sp, #4
 801adee:	6920      	ldr	r0, [r4, #16]
 801adf0:	9301      	str	r3, [sp, #4]
 801adf2:	2300      	movs	r3, #0
 801adf4:	f88d 5008 	strb.w	r5, [sp, #8]
 801adf8:	f8ad 700a 	strh.w	r7, [sp, #10]
 801adfc:	f8ad 600c 	strh.w	r6, [sp, #12]
 801ae00:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ae04:	6803      	ldr	r3, [r0, #0]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	4798      	blx	r3
 801ae0a:	b005      	add	sp, #20
 801ae0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae0e:	2900      	cmp	r1, #0
 801ae10:	d1eb      	bne.n	801adea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ae12:	80a2      	strh	r2, [r4, #4]
 801ae14:	80c6      	strh	r6, [r0, #6]
 801ae16:	60a1      	str	r1, [r4, #8]
 801ae18:	81a1      	strh	r1, [r4, #12]
 801ae1a:	73a1      	strb	r1, [r4, #14]
 801ae1c:	e7e5      	b.n	801adea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ae1e:	bf00      	nop
 801ae20:	0801e5dc 	.word	0x0801e5dc
 801ae24:	0801e604 	.word	0x0801e604

0801ae28 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801ae28:	790b      	ldrb	r3, [r1, #4]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	bf0c      	ite	eq
 801ae2e:	2301      	moveq	r3, #1
 801ae30:	2300      	movne	r3, #0
 801ae32:	b570      	push	{r4, r5, r6, lr}
 801ae34:	4604      	mov	r4, r0
 801ae36:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801ae3a:	460e      	mov	r6, r1
 801ae3c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801ae40:	d109      	bne.n	801ae56 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801ae42:	b14d      	cbz	r5, 801ae58 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801ae44:	7933      	ldrb	r3, [r6, #4]
 801ae46:	2b01      	cmp	r3, #1
 801ae48:	d10c      	bne.n	801ae64 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801ae4a:	6823      	ldr	r3, [r4, #0]
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae54:	4718      	bx	r3
 801ae56:	b12d      	cbz	r5, 801ae64 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801ae58:	6823      	ldr	r3, [r4, #0]
 801ae5a:	4620      	mov	r0, r4
 801ae5c:	695b      	ldr	r3, [r3, #20]
 801ae5e:	4798      	blx	r3
 801ae60:	2d00      	cmp	r5, #0
 801ae62:	d1ef      	bne.n	801ae44 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801ae64:	bd70      	pop	{r4, r5, r6, pc}

0801ae66 <__aeabi_atexit>:
 801ae66:	460b      	mov	r3, r1
 801ae68:	4601      	mov	r1, r0
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	f000 b93a 	b.w	801b0e4 <__cxa_atexit>

0801ae70 <_ZdlPvj>:
 801ae70:	f000 b812 	b.w	801ae98 <_ZdlPv>

0801ae74 <__cxa_guard_acquire>:
 801ae74:	6803      	ldr	r3, [r0, #0]
 801ae76:	07db      	lsls	r3, r3, #31
 801ae78:	d406      	bmi.n	801ae88 <__cxa_guard_acquire+0x14>
 801ae7a:	7843      	ldrb	r3, [r0, #1]
 801ae7c:	b103      	cbz	r3, 801ae80 <__cxa_guard_acquire+0xc>
 801ae7e:	deff      	udf	#255	; 0xff
 801ae80:	2301      	movs	r3, #1
 801ae82:	7043      	strb	r3, [r0, #1]
 801ae84:	4618      	mov	r0, r3
 801ae86:	4770      	bx	lr
 801ae88:	2000      	movs	r0, #0
 801ae8a:	4770      	bx	lr

0801ae8c <__cxa_guard_release>:
 801ae8c:	2301      	movs	r3, #1
 801ae8e:	6003      	str	r3, [r0, #0]
 801ae90:	4770      	bx	lr

0801ae92 <__cxa_pure_virtual>:
 801ae92:	b508      	push	{r3, lr}
 801ae94:	f000 f80e 	bl	801aeb4 <_ZSt9terminatev>

0801ae98 <_ZdlPv>:
 801ae98:	f000 b976 	b.w	801b188 <free>

0801ae9c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801ae9c:	b508      	push	{r3, lr}
 801ae9e:	4780      	blx	r0
 801aea0:	f000 f8f4 	bl	801b08c <abort>

0801aea4 <_ZSt13get_terminatev>:
 801aea4:	4b02      	ldr	r3, [pc, #8]	; (801aeb0 <_ZSt13get_terminatev+0xc>)
 801aea6:	6818      	ldr	r0, [r3, #0]
 801aea8:	f3bf 8f5b 	dmb	ish
 801aeac:	4770      	bx	lr
 801aeae:	bf00      	nop
 801aeb0:	240000b8 	.word	0x240000b8

0801aeb4 <_ZSt9terminatev>:
 801aeb4:	b508      	push	{r3, lr}
 801aeb6:	f7ff fff5 	bl	801aea4 <_ZSt13get_terminatev>
 801aeba:	f7ff ffef 	bl	801ae9c <_ZN10__cxxabiv111__terminateEPFvvE>

0801aebe <sinf_poly>:
 801aebe:	07cb      	lsls	r3, r1, #31
 801aec0:	d412      	bmi.n	801aee8 <sinf_poly+0x2a>
 801aec2:	ee21 6b00 	vmul.f64	d6, d1, d0
 801aec6:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801aeca:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801aece:	eea5 7b01 	vfma.f64	d7, d5, d1
 801aed2:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801aed6:	ee21 1b06 	vmul.f64	d1, d1, d6
 801aeda:	eea5 0b06 	vfma.f64	d0, d5, d6
 801aede:	eea7 0b01 	vfma.f64	d0, d7, d1
 801aee2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801aee6:	4770      	bx	lr
 801aee8:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801aeec:	ee21 6b01 	vmul.f64	d6, d1, d1
 801aef0:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801aef4:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801aef8:	eea1 7b05 	vfma.f64	d7, d1, d5
 801aefc:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801af00:	eea1 0b05 	vfma.f64	d0, d1, d5
 801af04:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801af08:	ee21 1b06 	vmul.f64	d1, d1, d6
 801af0c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801af10:	e7e5      	b.n	801aede <sinf_poly+0x20>
 801af12:	0000      	movs	r0, r0
 801af14:	0000      	movs	r0, r0
	...

0801af18 <sinf>:
 801af18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af1a:	ee10 4a10 	vmov	r4, s0
 801af1e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801af22:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801af26:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801af2a:	eef0 7a40 	vmov.f32	s15, s0
 801af2e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801af32:	d218      	bcs.n	801af66 <sinf+0x4e>
 801af34:	ee26 1b06 	vmul.f64	d1, d6, d6
 801af38:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801af3c:	d20a      	bcs.n	801af54 <sinf+0x3c>
 801af3e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801af42:	d103      	bne.n	801af4c <sinf+0x34>
 801af44:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801af48:	ed8d 1a01 	vstr	s2, [sp, #4]
 801af4c:	eeb0 0a67 	vmov.f32	s0, s15
 801af50:	b003      	add	sp, #12
 801af52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af54:	483e      	ldr	r0, [pc, #248]	; (801b050 <sinf+0x138>)
 801af56:	eeb0 0b46 	vmov.f64	d0, d6
 801af5a:	2100      	movs	r1, #0
 801af5c:	b003      	add	sp, #12
 801af5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af62:	f7ff bfac 	b.w	801aebe <sinf_poly>
 801af66:	f240 422e 	movw	r2, #1070	; 0x42e
 801af6a:	4293      	cmp	r3, r2
 801af6c:	d824      	bhi.n	801afb8 <sinf+0xa0>
 801af6e:	4b38      	ldr	r3, [pc, #224]	; (801b050 <sinf+0x138>)
 801af70:	ed93 7b08 	vldr	d7, [r3, #32]
 801af74:	ee26 7b07 	vmul.f64	d7, d6, d7
 801af78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801af7c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801af80:	ee17 1a90 	vmov	r1, s15
 801af84:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801af88:	1609      	asrs	r1, r1, #24
 801af8a:	ee07 1a90 	vmov	s15, r1
 801af8e:	f001 0203 	and.w	r2, r1, #3
 801af92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801af96:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801af9a:	ed92 0b00 	vldr	d0, [r2]
 801af9e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801afa2:	f011 0f02 	tst.w	r1, #2
 801afa6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801afaa:	bf08      	it	eq
 801afac:	4618      	moveq	r0, r3
 801afae:	ee26 1b06 	vmul.f64	d1, d6, d6
 801afb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801afb6:	e7d1      	b.n	801af5c <sinf+0x44>
 801afb8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801afbc:	d23d      	bcs.n	801b03a <sinf+0x122>
 801afbe:	4b25      	ldr	r3, [pc, #148]	; (801b054 <sinf+0x13c>)
 801afc0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801afc4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801afc8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801afcc:	6a06      	ldr	r6, [r0, #32]
 801afce:	6900      	ldr	r0, [r0, #16]
 801afd0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801afd4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801afd8:	40a9      	lsls	r1, r5
 801afda:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801afde:	fba1 6706 	umull	r6, r7, r1, r6
 801afe2:	fb05 f301 	mul.w	r3, r5, r1
 801afe6:	463a      	mov	r2, r7
 801afe8:	fbe0 2301 	umlal	r2, r3, r0, r1
 801afec:	1c11      	adds	r1, r2, #0
 801afee:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801aff2:	2000      	movs	r0, #0
 801aff4:	1a10      	subs	r0, r2, r0
 801aff6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801affa:	eb63 0101 	sbc.w	r1, r3, r1
 801affe:	f7e5 fb65 	bl	80006cc <__aeabi_l2d>
 801b002:	0fb5      	lsrs	r5, r6, #30
 801b004:	4a12      	ldr	r2, [pc, #72]	; (801b050 <sinf+0x138>)
 801b006:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 801b00a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 801b048 <sinf+0x130>
 801b00e:	ec41 0b17 	vmov	d7, r0, r1
 801b012:	f003 0103 	and.w	r1, r3, #3
 801b016:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801b01a:	ee27 0b00 	vmul.f64	d0, d7, d0
 801b01e:	ed91 7b00 	vldr	d7, [r1]
 801b022:	ee20 1b00 	vmul.f64	d1, d0, d0
 801b026:	f013 0f02 	tst.w	r3, #2
 801b02a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 801b02e:	4629      	mov	r1, r5
 801b030:	bf08      	it	eq
 801b032:	4610      	moveq	r0, r2
 801b034:	ee27 0b00 	vmul.f64	d0, d7, d0
 801b038:	e790      	b.n	801af5c <sinf+0x44>
 801b03a:	b003      	add	sp, #12
 801b03c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b040:	f000 b815 	b.w	801b06e <__math_invalidf>
 801b044:	f3af 8000 	nop.w
 801b048:	54442d18 	.word	0x54442d18
 801b04c:	3c1921fb 	.word	0x3c1921fb
 801b050:	0801f8c0 	.word	0x0801f8c0
 801b054:	0801f860 	.word	0x0801f860

0801b058 <with_errnof>:
 801b058:	b513      	push	{r0, r1, r4, lr}
 801b05a:	4604      	mov	r4, r0
 801b05c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b060:	f000 f84e 	bl	801b100 <__errno>
 801b064:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b068:	6004      	str	r4, [r0, #0]
 801b06a:	b002      	add	sp, #8
 801b06c:	bd10      	pop	{r4, pc}

0801b06e <__math_invalidf>:
 801b06e:	eef0 7a40 	vmov.f32	s15, s0
 801b072:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b076:	eef4 7a67 	vcmp.f32	s15, s15
 801b07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b07e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801b082:	d602      	bvs.n	801b08a <__math_invalidf+0x1c>
 801b084:	2021      	movs	r0, #33	; 0x21
 801b086:	f7ff bfe7 	b.w	801b058 <with_errnof>
 801b08a:	4770      	bx	lr

0801b08c <abort>:
 801b08c:	b508      	push	{r3, lr}
 801b08e:	2006      	movs	r0, #6
 801b090:	f000 fc68 	bl	801b964 <raise>
 801b094:	2001      	movs	r0, #1
 801b096:	f7e6 fbf7 	bl	8001888 <_exit>
	...

0801b09c <__assert_func>:
 801b09c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b09e:	4614      	mov	r4, r2
 801b0a0:	461a      	mov	r2, r3
 801b0a2:	4b09      	ldr	r3, [pc, #36]	; (801b0c8 <__assert_func+0x2c>)
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	4605      	mov	r5, r0
 801b0a8:	68d8      	ldr	r0, [r3, #12]
 801b0aa:	b14c      	cbz	r4, 801b0c0 <__assert_func+0x24>
 801b0ac:	4b07      	ldr	r3, [pc, #28]	; (801b0cc <__assert_func+0x30>)
 801b0ae:	9100      	str	r1, [sp, #0]
 801b0b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b0b4:	4906      	ldr	r1, [pc, #24]	; (801b0d0 <__assert_func+0x34>)
 801b0b6:	462b      	mov	r3, r5
 801b0b8:	f000 f828 	bl	801b10c <fiprintf>
 801b0bc:	f7ff ffe6 	bl	801b08c <abort>
 801b0c0:	4b04      	ldr	r3, [pc, #16]	; (801b0d4 <__assert_func+0x38>)
 801b0c2:	461c      	mov	r4, r3
 801b0c4:	e7f3      	b.n	801b0ae <__assert_func+0x12>
 801b0c6:	bf00      	nop
 801b0c8:	240000bc 	.word	0x240000bc
 801b0cc:	0801f9a0 	.word	0x0801f9a0
 801b0d0:	0801f9ad 	.word	0x0801f9ad
 801b0d4:	0801f9db 	.word	0x0801f9db

0801b0d8 <atexit>:
 801b0d8:	2300      	movs	r3, #0
 801b0da:	4601      	mov	r1, r0
 801b0dc:	461a      	mov	r2, r3
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f000 bd1c 	b.w	801bb1c <__register_exitproc>

0801b0e4 <__cxa_atexit>:
 801b0e4:	b510      	push	{r4, lr}
 801b0e6:	4c05      	ldr	r4, [pc, #20]	; (801b0fc <__cxa_atexit+0x18>)
 801b0e8:	4613      	mov	r3, r2
 801b0ea:	b12c      	cbz	r4, 801b0f8 <__cxa_atexit+0x14>
 801b0ec:	460a      	mov	r2, r1
 801b0ee:	4601      	mov	r1, r0
 801b0f0:	2002      	movs	r0, #2
 801b0f2:	f000 fd13 	bl	801bb1c <__register_exitproc>
 801b0f6:	bd10      	pop	{r4, pc}
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	e7fc      	b.n	801b0f6 <__cxa_atexit+0x12>
 801b0fc:	0801bb1d 	.word	0x0801bb1d

0801b100 <__errno>:
 801b100:	4b01      	ldr	r3, [pc, #4]	; (801b108 <__errno+0x8>)
 801b102:	6818      	ldr	r0, [r3, #0]
 801b104:	4770      	bx	lr
 801b106:	bf00      	nop
 801b108:	240000bc 	.word	0x240000bc

0801b10c <fiprintf>:
 801b10c:	b40e      	push	{r1, r2, r3}
 801b10e:	b503      	push	{r0, r1, lr}
 801b110:	4601      	mov	r1, r0
 801b112:	ab03      	add	r3, sp, #12
 801b114:	4805      	ldr	r0, [pc, #20]	; (801b12c <fiprintf+0x20>)
 801b116:	f853 2b04 	ldr.w	r2, [r3], #4
 801b11a:	6800      	ldr	r0, [r0, #0]
 801b11c:	9301      	str	r3, [sp, #4]
 801b11e:	f000 f925 	bl	801b36c <_vfiprintf_r>
 801b122:	b002      	add	sp, #8
 801b124:	f85d eb04 	ldr.w	lr, [sp], #4
 801b128:	b003      	add	sp, #12
 801b12a:	4770      	bx	lr
 801b12c:	240000bc 	.word	0x240000bc

0801b130 <__libc_init_array>:
 801b130:	b570      	push	{r4, r5, r6, lr}
 801b132:	4d0d      	ldr	r5, [pc, #52]	; (801b168 <__libc_init_array+0x38>)
 801b134:	4c0d      	ldr	r4, [pc, #52]	; (801b16c <__libc_init_array+0x3c>)
 801b136:	1b64      	subs	r4, r4, r5
 801b138:	10a4      	asrs	r4, r4, #2
 801b13a:	2600      	movs	r6, #0
 801b13c:	42a6      	cmp	r6, r4
 801b13e:	d109      	bne.n	801b154 <__libc_init_array+0x24>
 801b140:	4d0b      	ldr	r5, [pc, #44]	; (801b170 <__libc_init_array+0x40>)
 801b142:	4c0c      	ldr	r4, [pc, #48]	; (801b174 <__libc_init_array+0x44>)
 801b144:	f001 f824 	bl	801c190 <_init>
 801b148:	1b64      	subs	r4, r4, r5
 801b14a:	10a4      	asrs	r4, r4, #2
 801b14c:	2600      	movs	r6, #0
 801b14e:	42a6      	cmp	r6, r4
 801b150:	d105      	bne.n	801b15e <__libc_init_array+0x2e>
 801b152:	bd70      	pop	{r4, r5, r6, pc}
 801b154:	f855 3b04 	ldr.w	r3, [r5], #4
 801b158:	4798      	blx	r3
 801b15a:	3601      	adds	r6, #1
 801b15c:	e7ee      	b.n	801b13c <__libc_init_array+0xc>
 801b15e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b162:	4798      	blx	r3
 801b164:	3601      	adds	r6, #1
 801b166:	e7f2      	b.n	801b14e <__libc_init_array+0x1e>
 801b168:	08020bcc 	.word	0x08020bcc
 801b16c:	08020bcc 	.word	0x08020bcc
 801b170:	08020bcc 	.word	0x08020bcc
 801b174:	08020be0 	.word	0x08020be0

0801b178 <malloc>:
 801b178:	4b02      	ldr	r3, [pc, #8]	; (801b184 <malloc+0xc>)
 801b17a:	4601      	mov	r1, r0
 801b17c:	6818      	ldr	r0, [r3, #0]
 801b17e:	f000 b871 	b.w	801b264 <_malloc_r>
 801b182:	bf00      	nop
 801b184:	240000bc 	.word	0x240000bc

0801b188 <free>:
 801b188:	4b02      	ldr	r3, [pc, #8]	; (801b194 <free+0xc>)
 801b18a:	4601      	mov	r1, r0
 801b18c:	6818      	ldr	r0, [r3, #0]
 801b18e:	f000 b819 	b.w	801b1c4 <_free_r>
 801b192:	bf00      	nop
 801b194:	240000bc 	.word	0x240000bc

0801b198 <memcpy>:
 801b198:	440a      	add	r2, r1
 801b19a:	4291      	cmp	r1, r2
 801b19c:	f100 33ff 	add.w	r3, r0, #4294967295
 801b1a0:	d100      	bne.n	801b1a4 <memcpy+0xc>
 801b1a2:	4770      	bx	lr
 801b1a4:	b510      	push	{r4, lr}
 801b1a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b1aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b1ae:	4291      	cmp	r1, r2
 801b1b0:	d1f9      	bne.n	801b1a6 <memcpy+0xe>
 801b1b2:	bd10      	pop	{r4, pc}

0801b1b4 <memset>:
 801b1b4:	4402      	add	r2, r0
 801b1b6:	4603      	mov	r3, r0
 801b1b8:	4293      	cmp	r3, r2
 801b1ba:	d100      	bne.n	801b1be <memset+0xa>
 801b1bc:	4770      	bx	lr
 801b1be:	f803 1b01 	strb.w	r1, [r3], #1
 801b1c2:	e7f9      	b.n	801b1b8 <memset+0x4>

0801b1c4 <_free_r>:
 801b1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b1c6:	2900      	cmp	r1, #0
 801b1c8:	d048      	beq.n	801b25c <_free_r+0x98>
 801b1ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1ce:	9001      	str	r0, [sp, #4]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	f1a1 0404 	sub.w	r4, r1, #4
 801b1d6:	bfb8      	it	lt
 801b1d8:	18e4      	addlt	r4, r4, r3
 801b1da:	f000 ff21 	bl	801c020 <__malloc_lock>
 801b1de:	4a20      	ldr	r2, [pc, #128]	; (801b260 <_free_r+0x9c>)
 801b1e0:	9801      	ldr	r0, [sp, #4]
 801b1e2:	6813      	ldr	r3, [r2, #0]
 801b1e4:	4615      	mov	r5, r2
 801b1e6:	b933      	cbnz	r3, 801b1f6 <_free_r+0x32>
 801b1e8:	6063      	str	r3, [r4, #4]
 801b1ea:	6014      	str	r4, [r2, #0]
 801b1ec:	b003      	add	sp, #12
 801b1ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1f2:	f000 bf1b 	b.w	801c02c <__malloc_unlock>
 801b1f6:	42a3      	cmp	r3, r4
 801b1f8:	d90b      	bls.n	801b212 <_free_r+0x4e>
 801b1fa:	6821      	ldr	r1, [r4, #0]
 801b1fc:	1862      	adds	r2, r4, r1
 801b1fe:	4293      	cmp	r3, r2
 801b200:	bf04      	itt	eq
 801b202:	681a      	ldreq	r2, [r3, #0]
 801b204:	685b      	ldreq	r3, [r3, #4]
 801b206:	6063      	str	r3, [r4, #4]
 801b208:	bf04      	itt	eq
 801b20a:	1852      	addeq	r2, r2, r1
 801b20c:	6022      	streq	r2, [r4, #0]
 801b20e:	602c      	str	r4, [r5, #0]
 801b210:	e7ec      	b.n	801b1ec <_free_r+0x28>
 801b212:	461a      	mov	r2, r3
 801b214:	685b      	ldr	r3, [r3, #4]
 801b216:	b10b      	cbz	r3, 801b21c <_free_r+0x58>
 801b218:	42a3      	cmp	r3, r4
 801b21a:	d9fa      	bls.n	801b212 <_free_r+0x4e>
 801b21c:	6811      	ldr	r1, [r2, #0]
 801b21e:	1855      	adds	r5, r2, r1
 801b220:	42a5      	cmp	r5, r4
 801b222:	d10b      	bne.n	801b23c <_free_r+0x78>
 801b224:	6824      	ldr	r4, [r4, #0]
 801b226:	4421      	add	r1, r4
 801b228:	1854      	adds	r4, r2, r1
 801b22a:	42a3      	cmp	r3, r4
 801b22c:	6011      	str	r1, [r2, #0]
 801b22e:	d1dd      	bne.n	801b1ec <_free_r+0x28>
 801b230:	681c      	ldr	r4, [r3, #0]
 801b232:	685b      	ldr	r3, [r3, #4]
 801b234:	6053      	str	r3, [r2, #4]
 801b236:	4421      	add	r1, r4
 801b238:	6011      	str	r1, [r2, #0]
 801b23a:	e7d7      	b.n	801b1ec <_free_r+0x28>
 801b23c:	d902      	bls.n	801b244 <_free_r+0x80>
 801b23e:	230c      	movs	r3, #12
 801b240:	6003      	str	r3, [r0, #0]
 801b242:	e7d3      	b.n	801b1ec <_free_r+0x28>
 801b244:	6825      	ldr	r5, [r4, #0]
 801b246:	1961      	adds	r1, r4, r5
 801b248:	428b      	cmp	r3, r1
 801b24a:	bf04      	itt	eq
 801b24c:	6819      	ldreq	r1, [r3, #0]
 801b24e:	685b      	ldreq	r3, [r3, #4]
 801b250:	6063      	str	r3, [r4, #4]
 801b252:	bf04      	itt	eq
 801b254:	1949      	addeq	r1, r1, r5
 801b256:	6021      	streq	r1, [r4, #0]
 801b258:	6054      	str	r4, [r2, #4]
 801b25a:	e7c7      	b.n	801b1ec <_free_r+0x28>
 801b25c:	b003      	add	sp, #12
 801b25e:	bd30      	pop	{r4, r5, pc}
 801b260:	24006c98 	.word	0x24006c98

0801b264 <_malloc_r>:
 801b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b266:	1ccd      	adds	r5, r1, #3
 801b268:	f025 0503 	bic.w	r5, r5, #3
 801b26c:	3508      	adds	r5, #8
 801b26e:	2d0c      	cmp	r5, #12
 801b270:	bf38      	it	cc
 801b272:	250c      	movcc	r5, #12
 801b274:	2d00      	cmp	r5, #0
 801b276:	4606      	mov	r6, r0
 801b278:	db01      	blt.n	801b27e <_malloc_r+0x1a>
 801b27a:	42a9      	cmp	r1, r5
 801b27c:	d903      	bls.n	801b286 <_malloc_r+0x22>
 801b27e:	230c      	movs	r3, #12
 801b280:	6033      	str	r3, [r6, #0]
 801b282:	2000      	movs	r0, #0
 801b284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b286:	f000 fecb 	bl	801c020 <__malloc_lock>
 801b28a:	4921      	ldr	r1, [pc, #132]	; (801b310 <_malloc_r+0xac>)
 801b28c:	680a      	ldr	r2, [r1, #0]
 801b28e:	4614      	mov	r4, r2
 801b290:	b99c      	cbnz	r4, 801b2ba <_malloc_r+0x56>
 801b292:	4f20      	ldr	r7, [pc, #128]	; (801b314 <_malloc_r+0xb0>)
 801b294:	683b      	ldr	r3, [r7, #0]
 801b296:	b923      	cbnz	r3, 801b2a2 <_malloc_r+0x3e>
 801b298:	4621      	mov	r1, r4
 801b29a:	4630      	mov	r0, r6
 801b29c:	f000 fb2a 	bl	801b8f4 <_sbrk_r>
 801b2a0:	6038      	str	r0, [r7, #0]
 801b2a2:	4629      	mov	r1, r5
 801b2a4:	4630      	mov	r0, r6
 801b2a6:	f000 fb25 	bl	801b8f4 <_sbrk_r>
 801b2aa:	1c43      	adds	r3, r0, #1
 801b2ac:	d123      	bne.n	801b2f6 <_malloc_r+0x92>
 801b2ae:	230c      	movs	r3, #12
 801b2b0:	6033      	str	r3, [r6, #0]
 801b2b2:	4630      	mov	r0, r6
 801b2b4:	f000 feba 	bl	801c02c <__malloc_unlock>
 801b2b8:	e7e3      	b.n	801b282 <_malloc_r+0x1e>
 801b2ba:	6823      	ldr	r3, [r4, #0]
 801b2bc:	1b5b      	subs	r3, r3, r5
 801b2be:	d417      	bmi.n	801b2f0 <_malloc_r+0x8c>
 801b2c0:	2b0b      	cmp	r3, #11
 801b2c2:	d903      	bls.n	801b2cc <_malloc_r+0x68>
 801b2c4:	6023      	str	r3, [r4, #0]
 801b2c6:	441c      	add	r4, r3
 801b2c8:	6025      	str	r5, [r4, #0]
 801b2ca:	e004      	b.n	801b2d6 <_malloc_r+0x72>
 801b2cc:	6863      	ldr	r3, [r4, #4]
 801b2ce:	42a2      	cmp	r2, r4
 801b2d0:	bf0c      	ite	eq
 801b2d2:	600b      	streq	r3, [r1, #0]
 801b2d4:	6053      	strne	r3, [r2, #4]
 801b2d6:	4630      	mov	r0, r6
 801b2d8:	f000 fea8 	bl	801c02c <__malloc_unlock>
 801b2dc:	f104 000b 	add.w	r0, r4, #11
 801b2e0:	1d23      	adds	r3, r4, #4
 801b2e2:	f020 0007 	bic.w	r0, r0, #7
 801b2e6:	1ac2      	subs	r2, r0, r3
 801b2e8:	d0cc      	beq.n	801b284 <_malloc_r+0x20>
 801b2ea:	1a1b      	subs	r3, r3, r0
 801b2ec:	50a3      	str	r3, [r4, r2]
 801b2ee:	e7c9      	b.n	801b284 <_malloc_r+0x20>
 801b2f0:	4622      	mov	r2, r4
 801b2f2:	6864      	ldr	r4, [r4, #4]
 801b2f4:	e7cc      	b.n	801b290 <_malloc_r+0x2c>
 801b2f6:	1cc4      	adds	r4, r0, #3
 801b2f8:	f024 0403 	bic.w	r4, r4, #3
 801b2fc:	42a0      	cmp	r0, r4
 801b2fe:	d0e3      	beq.n	801b2c8 <_malloc_r+0x64>
 801b300:	1a21      	subs	r1, r4, r0
 801b302:	4630      	mov	r0, r6
 801b304:	f000 faf6 	bl	801b8f4 <_sbrk_r>
 801b308:	3001      	adds	r0, #1
 801b30a:	d1dd      	bne.n	801b2c8 <_malloc_r+0x64>
 801b30c:	e7cf      	b.n	801b2ae <_malloc_r+0x4a>
 801b30e:	bf00      	nop
 801b310:	24006c98 	.word	0x24006c98
 801b314:	24006c9c 	.word	0x24006c9c

0801b318 <__sfputc_r>:
 801b318:	6893      	ldr	r3, [r2, #8]
 801b31a:	3b01      	subs	r3, #1
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	b410      	push	{r4}
 801b320:	6093      	str	r3, [r2, #8]
 801b322:	da08      	bge.n	801b336 <__sfputc_r+0x1e>
 801b324:	6994      	ldr	r4, [r2, #24]
 801b326:	42a3      	cmp	r3, r4
 801b328:	db01      	blt.n	801b32e <__sfputc_r+0x16>
 801b32a:	290a      	cmp	r1, #10
 801b32c:	d103      	bne.n	801b336 <__sfputc_r+0x1e>
 801b32e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b332:	f000 bb33 	b.w	801b99c <__swbuf_r>
 801b336:	6813      	ldr	r3, [r2, #0]
 801b338:	1c58      	adds	r0, r3, #1
 801b33a:	6010      	str	r0, [r2, #0]
 801b33c:	7019      	strb	r1, [r3, #0]
 801b33e:	4608      	mov	r0, r1
 801b340:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b344:	4770      	bx	lr

0801b346 <__sfputs_r>:
 801b346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b348:	4606      	mov	r6, r0
 801b34a:	460f      	mov	r7, r1
 801b34c:	4614      	mov	r4, r2
 801b34e:	18d5      	adds	r5, r2, r3
 801b350:	42ac      	cmp	r4, r5
 801b352:	d101      	bne.n	801b358 <__sfputs_r+0x12>
 801b354:	2000      	movs	r0, #0
 801b356:	e007      	b.n	801b368 <__sfputs_r+0x22>
 801b358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b35c:	463a      	mov	r2, r7
 801b35e:	4630      	mov	r0, r6
 801b360:	f7ff ffda 	bl	801b318 <__sfputc_r>
 801b364:	1c43      	adds	r3, r0, #1
 801b366:	d1f3      	bne.n	801b350 <__sfputs_r+0xa>
 801b368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b36c <_vfiprintf_r>:
 801b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b370:	460d      	mov	r5, r1
 801b372:	b09d      	sub	sp, #116	; 0x74
 801b374:	4614      	mov	r4, r2
 801b376:	4698      	mov	r8, r3
 801b378:	4606      	mov	r6, r0
 801b37a:	b118      	cbz	r0, 801b384 <_vfiprintf_r+0x18>
 801b37c:	6983      	ldr	r3, [r0, #24]
 801b37e:	b90b      	cbnz	r3, 801b384 <_vfiprintf_r+0x18>
 801b380:	f000 fd48 	bl	801be14 <__sinit>
 801b384:	4b89      	ldr	r3, [pc, #548]	; (801b5ac <_vfiprintf_r+0x240>)
 801b386:	429d      	cmp	r5, r3
 801b388:	d11b      	bne.n	801b3c2 <_vfiprintf_r+0x56>
 801b38a:	6875      	ldr	r5, [r6, #4]
 801b38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b38e:	07d9      	lsls	r1, r3, #31
 801b390:	d405      	bmi.n	801b39e <_vfiprintf_r+0x32>
 801b392:	89ab      	ldrh	r3, [r5, #12]
 801b394:	059a      	lsls	r2, r3, #22
 801b396:	d402      	bmi.n	801b39e <_vfiprintf_r+0x32>
 801b398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b39a:	f000 fdd9 	bl	801bf50 <__retarget_lock_acquire_recursive>
 801b39e:	89ab      	ldrh	r3, [r5, #12]
 801b3a0:	071b      	lsls	r3, r3, #28
 801b3a2:	d501      	bpl.n	801b3a8 <_vfiprintf_r+0x3c>
 801b3a4:	692b      	ldr	r3, [r5, #16]
 801b3a6:	b9eb      	cbnz	r3, 801b3e4 <_vfiprintf_r+0x78>
 801b3a8:	4629      	mov	r1, r5
 801b3aa:	4630      	mov	r0, r6
 801b3ac:	f000 fb48 	bl	801ba40 <__swsetup_r>
 801b3b0:	b1c0      	cbz	r0, 801b3e4 <_vfiprintf_r+0x78>
 801b3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b3b4:	07dc      	lsls	r4, r3, #31
 801b3b6:	d50e      	bpl.n	801b3d6 <_vfiprintf_r+0x6a>
 801b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b3bc:	b01d      	add	sp, #116	; 0x74
 801b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c2:	4b7b      	ldr	r3, [pc, #492]	; (801b5b0 <_vfiprintf_r+0x244>)
 801b3c4:	429d      	cmp	r5, r3
 801b3c6:	d101      	bne.n	801b3cc <_vfiprintf_r+0x60>
 801b3c8:	68b5      	ldr	r5, [r6, #8]
 801b3ca:	e7df      	b.n	801b38c <_vfiprintf_r+0x20>
 801b3cc:	4b79      	ldr	r3, [pc, #484]	; (801b5b4 <_vfiprintf_r+0x248>)
 801b3ce:	429d      	cmp	r5, r3
 801b3d0:	bf08      	it	eq
 801b3d2:	68f5      	ldreq	r5, [r6, #12]
 801b3d4:	e7da      	b.n	801b38c <_vfiprintf_r+0x20>
 801b3d6:	89ab      	ldrh	r3, [r5, #12]
 801b3d8:	0598      	lsls	r0, r3, #22
 801b3da:	d4ed      	bmi.n	801b3b8 <_vfiprintf_r+0x4c>
 801b3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b3de:	f000 fdb9 	bl	801bf54 <__retarget_lock_release_recursive>
 801b3e2:	e7e9      	b.n	801b3b8 <_vfiprintf_r+0x4c>
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801b3e8:	2320      	movs	r3, #32
 801b3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b3ee:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3f2:	2330      	movs	r3, #48	; 0x30
 801b3f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b5b8 <_vfiprintf_r+0x24c>
 801b3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b3fc:	f04f 0901 	mov.w	r9, #1
 801b400:	4623      	mov	r3, r4
 801b402:	469a      	mov	sl, r3
 801b404:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b408:	b10a      	cbz	r2, 801b40e <_vfiprintf_r+0xa2>
 801b40a:	2a25      	cmp	r2, #37	; 0x25
 801b40c:	d1f9      	bne.n	801b402 <_vfiprintf_r+0x96>
 801b40e:	ebba 0b04 	subs.w	fp, sl, r4
 801b412:	d00b      	beq.n	801b42c <_vfiprintf_r+0xc0>
 801b414:	465b      	mov	r3, fp
 801b416:	4622      	mov	r2, r4
 801b418:	4629      	mov	r1, r5
 801b41a:	4630      	mov	r0, r6
 801b41c:	f7ff ff93 	bl	801b346 <__sfputs_r>
 801b420:	3001      	adds	r0, #1
 801b422:	f000 80aa 	beq.w	801b57a <_vfiprintf_r+0x20e>
 801b426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b428:	445a      	add	r2, fp
 801b42a:	9209      	str	r2, [sp, #36]	; 0x24
 801b42c:	f89a 3000 	ldrb.w	r3, [sl]
 801b430:	2b00      	cmp	r3, #0
 801b432:	f000 80a2 	beq.w	801b57a <_vfiprintf_r+0x20e>
 801b436:	2300      	movs	r3, #0
 801b438:	f04f 32ff 	mov.w	r2, #4294967295
 801b43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b440:	f10a 0a01 	add.w	sl, sl, #1
 801b444:	9304      	str	r3, [sp, #16]
 801b446:	9307      	str	r3, [sp, #28]
 801b448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b44c:	931a      	str	r3, [sp, #104]	; 0x68
 801b44e:	4654      	mov	r4, sl
 801b450:	2205      	movs	r2, #5
 801b452:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b456:	4858      	ldr	r0, [pc, #352]	; (801b5b8 <_vfiprintf_r+0x24c>)
 801b458:	f7e4 ff5a 	bl	8000310 <memchr>
 801b45c:	9a04      	ldr	r2, [sp, #16]
 801b45e:	b9d8      	cbnz	r0, 801b498 <_vfiprintf_r+0x12c>
 801b460:	06d1      	lsls	r1, r2, #27
 801b462:	bf44      	itt	mi
 801b464:	2320      	movmi	r3, #32
 801b466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b46a:	0713      	lsls	r3, r2, #28
 801b46c:	bf44      	itt	mi
 801b46e:	232b      	movmi	r3, #43	; 0x2b
 801b470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b474:	f89a 3000 	ldrb.w	r3, [sl]
 801b478:	2b2a      	cmp	r3, #42	; 0x2a
 801b47a:	d015      	beq.n	801b4a8 <_vfiprintf_r+0x13c>
 801b47c:	9a07      	ldr	r2, [sp, #28]
 801b47e:	4654      	mov	r4, sl
 801b480:	2000      	movs	r0, #0
 801b482:	f04f 0c0a 	mov.w	ip, #10
 801b486:	4621      	mov	r1, r4
 801b488:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b48c:	3b30      	subs	r3, #48	; 0x30
 801b48e:	2b09      	cmp	r3, #9
 801b490:	d94e      	bls.n	801b530 <_vfiprintf_r+0x1c4>
 801b492:	b1b0      	cbz	r0, 801b4c2 <_vfiprintf_r+0x156>
 801b494:	9207      	str	r2, [sp, #28]
 801b496:	e014      	b.n	801b4c2 <_vfiprintf_r+0x156>
 801b498:	eba0 0308 	sub.w	r3, r0, r8
 801b49c:	fa09 f303 	lsl.w	r3, r9, r3
 801b4a0:	4313      	orrs	r3, r2
 801b4a2:	9304      	str	r3, [sp, #16]
 801b4a4:	46a2      	mov	sl, r4
 801b4a6:	e7d2      	b.n	801b44e <_vfiprintf_r+0xe2>
 801b4a8:	9b03      	ldr	r3, [sp, #12]
 801b4aa:	1d19      	adds	r1, r3, #4
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	9103      	str	r1, [sp, #12]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	bfbb      	ittet	lt
 801b4b4:	425b      	neglt	r3, r3
 801b4b6:	f042 0202 	orrlt.w	r2, r2, #2
 801b4ba:	9307      	strge	r3, [sp, #28]
 801b4bc:	9307      	strlt	r3, [sp, #28]
 801b4be:	bfb8      	it	lt
 801b4c0:	9204      	strlt	r2, [sp, #16]
 801b4c2:	7823      	ldrb	r3, [r4, #0]
 801b4c4:	2b2e      	cmp	r3, #46	; 0x2e
 801b4c6:	d10c      	bne.n	801b4e2 <_vfiprintf_r+0x176>
 801b4c8:	7863      	ldrb	r3, [r4, #1]
 801b4ca:	2b2a      	cmp	r3, #42	; 0x2a
 801b4cc:	d135      	bne.n	801b53a <_vfiprintf_r+0x1ce>
 801b4ce:	9b03      	ldr	r3, [sp, #12]
 801b4d0:	1d1a      	adds	r2, r3, #4
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	9203      	str	r2, [sp, #12]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	bfb8      	it	lt
 801b4da:	f04f 33ff 	movlt.w	r3, #4294967295
 801b4de:	3402      	adds	r4, #2
 801b4e0:	9305      	str	r3, [sp, #20]
 801b4e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b5c8 <_vfiprintf_r+0x25c>
 801b4e6:	7821      	ldrb	r1, [r4, #0]
 801b4e8:	2203      	movs	r2, #3
 801b4ea:	4650      	mov	r0, sl
 801b4ec:	f7e4 ff10 	bl	8000310 <memchr>
 801b4f0:	b140      	cbz	r0, 801b504 <_vfiprintf_r+0x198>
 801b4f2:	2340      	movs	r3, #64	; 0x40
 801b4f4:	eba0 000a 	sub.w	r0, r0, sl
 801b4f8:	fa03 f000 	lsl.w	r0, r3, r0
 801b4fc:	9b04      	ldr	r3, [sp, #16]
 801b4fe:	4303      	orrs	r3, r0
 801b500:	3401      	adds	r4, #1
 801b502:	9304      	str	r3, [sp, #16]
 801b504:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b508:	482c      	ldr	r0, [pc, #176]	; (801b5bc <_vfiprintf_r+0x250>)
 801b50a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b50e:	2206      	movs	r2, #6
 801b510:	f7e4 fefe 	bl	8000310 <memchr>
 801b514:	2800      	cmp	r0, #0
 801b516:	d03f      	beq.n	801b598 <_vfiprintf_r+0x22c>
 801b518:	4b29      	ldr	r3, [pc, #164]	; (801b5c0 <_vfiprintf_r+0x254>)
 801b51a:	bb1b      	cbnz	r3, 801b564 <_vfiprintf_r+0x1f8>
 801b51c:	9b03      	ldr	r3, [sp, #12]
 801b51e:	3307      	adds	r3, #7
 801b520:	f023 0307 	bic.w	r3, r3, #7
 801b524:	3308      	adds	r3, #8
 801b526:	9303      	str	r3, [sp, #12]
 801b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b52a:	443b      	add	r3, r7
 801b52c:	9309      	str	r3, [sp, #36]	; 0x24
 801b52e:	e767      	b.n	801b400 <_vfiprintf_r+0x94>
 801b530:	fb0c 3202 	mla	r2, ip, r2, r3
 801b534:	460c      	mov	r4, r1
 801b536:	2001      	movs	r0, #1
 801b538:	e7a5      	b.n	801b486 <_vfiprintf_r+0x11a>
 801b53a:	2300      	movs	r3, #0
 801b53c:	3401      	adds	r4, #1
 801b53e:	9305      	str	r3, [sp, #20]
 801b540:	4619      	mov	r1, r3
 801b542:	f04f 0c0a 	mov.w	ip, #10
 801b546:	4620      	mov	r0, r4
 801b548:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b54c:	3a30      	subs	r2, #48	; 0x30
 801b54e:	2a09      	cmp	r2, #9
 801b550:	d903      	bls.n	801b55a <_vfiprintf_r+0x1ee>
 801b552:	2b00      	cmp	r3, #0
 801b554:	d0c5      	beq.n	801b4e2 <_vfiprintf_r+0x176>
 801b556:	9105      	str	r1, [sp, #20]
 801b558:	e7c3      	b.n	801b4e2 <_vfiprintf_r+0x176>
 801b55a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b55e:	4604      	mov	r4, r0
 801b560:	2301      	movs	r3, #1
 801b562:	e7f0      	b.n	801b546 <_vfiprintf_r+0x1da>
 801b564:	ab03      	add	r3, sp, #12
 801b566:	9300      	str	r3, [sp, #0]
 801b568:	462a      	mov	r2, r5
 801b56a:	4b16      	ldr	r3, [pc, #88]	; (801b5c4 <_vfiprintf_r+0x258>)
 801b56c:	a904      	add	r1, sp, #16
 801b56e:	4630      	mov	r0, r6
 801b570:	f3af 8000 	nop.w
 801b574:	4607      	mov	r7, r0
 801b576:	1c78      	adds	r0, r7, #1
 801b578:	d1d6      	bne.n	801b528 <_vfiprintf_r+0x1bc>
 801b57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b57c:	07d9      	lsls	r1, r3, #31
 801b57e:	d405      	bmi.n	801b58c <_vfiprintf_r+0x220>
 801b580:	89ab      	ldrh	r3, [r5, #12]
 801b582:	059a      	lsls	r2, r3, #22
 801b584:	d402      	bmi.n	801b58c <_vfiprintf_r+0x220>
 801b586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b588:	f000 fce4 	bl	801bf54 <__retarget_lock_release_recursive>
 801b58c:	89ab      	ldrh	r3, [r5, #12]
 801b58e:	065b      	lsls	r3, r3, #25
 801b590:	f53f af12 	bmi.w	801b3b8 <_vfiprintf_r+0x4c>
 801b594:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b596:	e711      	b.n	801b3bc <_vfiprintf_r+0x50>
 801b598:	ab03      	add	r3, sp, #12
 801b59a:	9300      	str	r3, [sp, #0]
 801b59c:	462a      	mov	r2, r5
 801b59e:	4b09      	ldr	r3, [pc, #36]	; (801b5c4 <_vfiprintf_r+0x258>)
 801b5a0:	a904      	add	r1, sp, #16
 801b5a2:	4630      	mov	r0, r6
 801b5a4:	f000 f880 	bl	801b6a8 <_printf_i>
 801b5a8:	e7e4      	b.n	801b574 <_vfiprintf_r+0x208>
 801b5aa:	bf00      	nop
 801b5ac:	0801fa38 	.word	0x0801fa38
 801b5b0:	0801fa58 	.word	0x0801fa58
 801b5b4:	0801fa18 	.word	0x0801fa18
 801b5b8:	0801f9e0 	.word	0x0801f9e0
 801b5bc:	0801f9ea 	.word	0x0801f9ea
 801b5c0:	00000000 	.word	0x00000000
 801b5c4:	0801b347 	.word	0x0801b347
 801b5c8:	0801f9e6 	.word	0x0801f9e6

0801b5cc <_printf_common>:
 801b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5d0:	4616      	mov	r6, r2
 801b5d2:	4699      	mov	r9, r3
 801b5d4:	688a      	ldr	r2, [r1, #8]
 801b5d6:	690b      	ldr	r3, [r1, #16]
 801b5d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	bfb8      	it	lt
 801b5e0:	4613      	movlt	r3, r2
 801b5e2:	6033      	str	r3, [r6, #0]
 801b5e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b5e8:	4607      	mov	r7, r0
 801b5ea:	460c      	mov	r4, r1
 801b5ec:	b10a      	cbz	r2, 801b5f2 <_printf_common+0x26>
 801b5ee:	3301      	adds	r3, #1
 801b5f0:	6033      	str	r3, [r6, #0]
 801b5f2:	6823      	ldr	r3, [r4, #0]
 801b5f4:	0699      	lsls	r1, r3, #26
 801b5f6:	bf42      	ittt	mi
 801b5f8:	6833      	ldrmi	r3, [r6, #0]
 801b5fa:	3302      	addmi	r3, #2
 801b5fc:	6033      	strmi	r3, [r6, #0]
 801b5fe:	6825      	ldr	r5, [r4, #0]
 801b600:	f015 0506 	ands.w	r5, r5, #6
 801b604:	d106      	bne.n	801b614 <_printf_common+0x48>
 801b606:	f104 0a19 	add.w	sl, r4, #25
 801b60a:	68e3      	ldr	r3, [r4, #12]
 801b60c:	6832      	ldr	r2, [r6, #0]
 801b60e:	1a9b      	subs	r3, r3, r2
 801b610:	42ab      	cmp	r3, r5
 801b612:	dc26      	bgt.n	801b662 <_printf_common+0x96>
 801b614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b618:	1e13      	subs	r3, r2, #0
 801b61a:	6822      	ldr	r2, [r4, #0]
 801b61c:	bf18      	it	ne
 801b61e:	2301      	movne	r3, #1
 801b620:	0692      	lsls	r2, r2, #26
 801b622:	d42b      	bmi.n	801b67c <_printf_common+0xb0>
 801b624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b628:	4649      	mov	r1, r9
 801b62a:	4638      	mov	r0, r7
 801b62c:	47c0      	blx	r8
 801b62e:	3001      	adds	r0, #1
 801b630:	d01e      	beq.n	801b670 <_printf_common+0xa4>
 801b632:	6823      	ldr	r3, [r4, #0]
 801b634:	68e5      	ldr	r5, [r4, #12]
 801b636:	6832      	ldr	r2, [r6, #0]
 801b638:	f003 0306 	and.w	r3, r3, #6
 801b63c:	2b04      	cmp	r3, #4
 801b63e:	bf08      	it	eq
 801b640:	1aad      	subeq	r5, r5, r2
 801b642:	68a3      	ldr	r3, [r4, #8]
 801b644:	6922      	ldr	r2, [r4, #16]
 801b646:	bf0c      	ite	eq
 801b648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b64c:	2500      	movne	r5, #0
 801b64e:	4293      	cmp	r3, r2
 801b650:	bfc4      	itt	gt
 801b652:	1a9b      	subgt	r3, r3, r2
 801b654:	18ed      	addgt	r5, r5, r3
 801b656:	2600      	movs	r6, #0
 801b658:	341a      	adds	r4, #26
 801b65a:	42b5      	cmp	r5, r6
 801b65c:	d11a      	bne.n	801b694 <_printf_common+0xc8>
 801b65e:	2000      	movs	r0, #0
 801b660:	e008      	b.n	801b674 <_printf_common+0xa8>
 801b662:	2301      	movs	r3, #1
 801b664:	4652      	mov	r2, sl
 801b666:	4649      	mov	r1, r9
 801b668:	4638      	mov	r0, r7
 801b66a:	47c0      	blx	r8
 801b66c:	3001      	adds	r0, #1
 801b66e:	d103      	bne.n	801b678 <_printf_common+0xac>
 801b670:	f04f 30ff 	mov.w	r0, #4294967295
 801b674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b678:	3501      	adds	r5, #1
 801b67a:	e7c6      	b.n	801b60a <_printf_common+0x3e>
 801b67c:	18e1      	adds	r1, r4, r3
 801b67e:	1c5a      	adds	r2, r3, #1
 801b680:	2030      	movs	r0, #48	; 0x30
 801b682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b686:	4422      	add	r2, r4
 801b688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b68c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b690:	3302      	adds	r3, #2
 801b692:	e7c7      	b.n	801b624 <_printf_common+0x58>
 801b694:	2301      	movs	r3, #1
 801b696:	4622      	mov	r2, r4
 801b698:	4649      	mov	r1, r9
 801b69a:	4638      	mov	r0, r7
 801b69c:	47c0      	blx	r8
 801b69e:	3001      	adds	r0, #1
 801b6a0:	d0e6      	beq.n	801b670 <_printf_common+0xa4>
 801b6a2:	3601      	adds	r6, #1
 801b6a4:	e7d9      	b.n	801b65a <_printf_common+0x8e>
	...

0801b6a8 <_printf_i>:
 801b6a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6ac:	460c      	mov	r4, r1
 801b6ae:	4691      	mov	r9, r2
 801b6b0:	7e27      	ldrb	r7, [r4, #24]
 801b6b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b6b4:	2f78      	cmp	r7, #120	; 0x78
 801b6b6:	4680      	mov	r8, r0
 801b6b8:	469a      	mov	sl, r3
 801b6ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6be:	d807      	bhi.n	801b6d0 <_printf_i+0x28>
 801b6c0:	2f62      	cmp	r7, #98	; 0x62
 801b6c2:	d80a      	bhi.n	801b6da <_printf_i+0x32>
 801b6c4:	2f00      	cmp	r7, #0
 801b6c6:	f000 80d8 	beq.w	801b87a <_printf_i+0x1d2>
 801b6ca:	2f58      	cmp	r7, #88	; 0x58
 801b6cc:	f000 80a3 	beq.w	801b816 <_printf_i+0x16e>
 801b6d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b6d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b6d8:	e03a      	b.n	801b750 <_printf_i+0xa8>
 801b6da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b6de:	2b15      	cmp	r3, #21
 801b6e0:	d8f6      	bhi.n	801b6d0 <_printf_i+0x28>
 801b6e2:	a001      	add	r0, pc, #4	; (adr r0, 801b6e8 <_printf_i+0x40>)
 801b6e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b6e8:	0801b741 	.word	0x0801b741
 801b6ec:	0801b755 	.word	0x0801b755
 801b6f0:	0801b6d1 	.word	0x0801b6d1
 801b6f4:	0801b6d1 	.word	0x0801b6d1
 801b6f8:	0801b6d1 	.word	0x0801b6d1
 801b6fc:	0801b6d1 	.word	0x0801b6d1
 801b700:	0801b755 	.word	0x0801b755
 801b704:	0801b6d1 	.word	0x0801b6d1
 801b708:	0801b6d1 	.word	0x0801b6d1
 801b70c:	0801b6d1 	.word	0x0801b6d1
 801b710:	0801b6d1 	.word	0x0801b6d1
 801b714:	0801b861 	.word	0x0801b861
 801b718:	0801b785 	.word	0x0801b785
 801b71c:	0801b843 	.word	0x0801b843
 801b720:	0801b6d1 	.word	0x0801b6d1
 801b724:	0801b6d1 	.word	0x0801b6d1
 801b728:	0801b883 	.word	0x0801b883
 801b72c:	0801b6d1 	.word	0x0801b6d1
 801b730:	0801b785 	.word	0x0801b785
 801b734:	0801b6d1 	.word	0x0801b6d1
 801b738:	0801b6d1 	.word	0x0801b6d1
 801b73c:	0801b84b 	.word	0x0801b84b
 801b740:	680b      	ldr	r3, [r1, #0]
 801b742:	1d1a      	adds	r2, r3, #4
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	600a      	str	r2, [r1, #0]
 801b748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b74c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b750:	2301      	movs	r3, #1
 801b752:	e0a3      	b.n	801b89c <_printf_i+0x1f4>
 801b754:	6825      	ldr	r5, [r4, #0]
 801b756:	6808      	ldr	r0, [r1, #0]
 801b758:	062e      	lsls	r6, r5, #24
 801b75a:	f100 0304 	add.w	r3, r0, #4
 801b75e:	d50a      	bpl.n	801b776 <_printf_i+0xce>
 801b760:	6805      	ldr	r5, [r0, #0]
 801b762:	600b      	str	r3, [r1, #0]
 801b764:	2d00      	cmp	r5, #0
 801b766:	da03      	bge.n	801b770 <_printf_i+0xc8>
 801b768:	232d      	movs	r3, #45	; 0x2d
 801b76a:	426d      	negs	r5, r5
 801b76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b770:	485e      	ldr	r0, [pc, #376]	; (801b8ec <_printf_i+0x244>)
 801b772:	230a      	movs	r3, #10
 801b774:	e019      	b.n	801b7aa <_printf_i+0x102>
 801b776:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b77a:	6805      	ldr	r5, [r0, #0]
 801b77c:	600b      	str	r3, [r1, #0]
 801b77e:	bf18      	it	ne
 801b780:	b22d      	sxthne	r5, r5
 801b782:	e7ef      	b.n	801b764 <_printf_i+0xbc>
 801b784:	680b      	ldr	r3, [r1, #0]
 801b786:	6825      	ldr	r5, [r4, #0]
 801b788:	1d18      	adds	r0, r3, #4
 801b78a:	6008      	str	r0, [r1, #0]
 801b78c:	0628      	lsls	r0, r5, #24
 801b78e:	d501      	bpl.n	801b794 <_printf_i+0xec>
 801b790:	681d      	ldr	r5, [r3, #0]
 801b792:	e002      	b.n	801b79a <_printf_i+0xf2>
 801b794:	0669      	lsls	r1, r5, #25
 801b796:	d5fb      	bpl.n	801b790 <_printf_i+0xe8>
 801b798:	881d      	ldrh	r5, [r3, #0]
 801b79a:	4854      	ldr	r0, [pc, #336]	; (801b8ec <_printf_i+0x244>)
 801b79c:	2f6f      	cmp	r7, #111	; 0x6f
 801b79e:	bf0c      	ite	eq
 801b7a0:	2308      	moveq	r3, #8
 801b7a2:	230a      	movne	r3, #10
 801b7a4:	2100      	movs	r1, #0
 801b7a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b7aa:	6866      	ldr	r6, [r4, #4]
 801b7ac:	60a6      	str	r6, [r4, #8]
 801b7ae:	2e00      	cmp	r6, #0
 801b7b0:	bfa2      	ittt	ge
 801b7b2:	6821      	ldrge	r1, [r4, #0]
 801b7b4:	f021 0104 	bicge.w	r1, r1, #4
 801b7b8:	6021      	strge	r1, [r4, #0]
 801b7ba:	b90d      	cbnz	r5, 801b7c0 <_printf_i+0x118>
 801b7bc:	2e00      	cmp	r6, #0
 801b7be:	d04d      	beq.n	801b85c <_printf_i+0x1b4>
 801b7c0:	4616      	mov	r6, r2
 801b7c2:	fbb5 f1f3 	udiv	r1, r5, r3
 801b7c6:	fb03 5711 	mls	r7, r3, r1, r5
 801b7ca:	5dc7      	ldrb	r7, [r0, r7]
 801b7cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b7d0:	462f      	mov	r7, r5
 801b7d2:	42bb      	cmp	r3, r7
 801b7d4:	460d      	mov	r5, r1
 801b7d6:	d9f4      	bls.n	801b7c2 <_printf_i+0x11a>
 801b7d8:	2b08      	cmp	r3, #8
 801b7da:	d10b      	bne.n	801b7f4 <_printf_i+0x14c>
 801b7dc:	6823      	ldr	r3, [r4, #0]
 801b7de:	07df      	lsls	r7, r3, #31
 801b7e0:	d508      	bpl.n	801b7f4 <_printf_i+0x14c>
 801b7e2:	6923      	ldr	r3, [r4, #16]
 801b7e4:	6861      	ldr	r1, [r4, #4]
 801b7e6:	4299      	cmp	r1, r3
 801b7e8:	bfde      	ittt	le
 801b7ea:	2330      	movle	r3, #48	; 0x30
 801b7ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b7f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b7f4:	1b92      	subs	r2, r2, r6
 801b7f6:	6122      	str	r2, [r4, #16]
 801b7f8:	f8cd a000 	str.w	sl, [sp]
 801b7fc:	464b      	mov	r3, r9
 801b7fe:	aa03      	add	r2, sp, #12
 801b800:	4621      	mov	r1, r4
 801b802:	4640      	mov	r0, r8
 801b804:	f7ff fee2 	bl	801b5cc <_printf_common>
 801b808:	3001      	adds	r0, #1
 801b80a:	d14c      	bne.n	801b8a6 <_printf_i+0x1fe>
 801b80c:	f04f 30ff 	mov.w	r0, #4294967295
 801b810:	b004      	add	sp, #16
 801b812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b816:	4835      	ldr	r0, [pc, #212]	; (801b8ec <_printf_i+0x244>)
 801b818:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b81c:	6823      	ldr	r3, [r4, #0]
 801b81e:	680e      	ldr	r6, [r1, #0]
 801b820:	061f      	lsls	r7, r3, #24
 801b822:	f856 5b04 	ldr.w	r5, [r6], #4
 801b826:	600e      	str	r6, [r1, #0]
 801b828:	d514      	bpl.n	801b854 <_printf_i+0x1ac>
 801b82a:	07d9      	lsls	r1, r3, #31
 801b82c:	bf44      	itt	mi
 801b82e:	f043 0320 	orrmi.w	r3, r3, #32
 801b832:	6023      	strmi	r3, [r4, #0]
 801b834:	b91d      	cbnz	r5, 801b83e <_printf_i+0x196>
 801b836:	6823      	ldr	r3, [r4, #0]
 801b838:	f023 0320 	bic.w	r3, r3, #32
 801b83c:	6023      	str	r3, [r4, #0]
 801b83e:	2310      	movs	r3, #16
 801b840:	e7b0      	b.n	801b7a4 <_printf_i+0xfc>
 801b842:	6823      	ldr	r3, [r4, #0]
 801b844:	f043 0320 	orr.w	r3, r3, #32
 801b848:	6023      	str	r3, [r4, #0]
 801b84a:	2378      	movs	r3, #120	; 0x78
 801b84c:	4828      	ldr	r0, [pc, #160]	; (801b8f0 <_printf_i+0x248>)
 801b84e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b852:	e7e3      	b.n	801b81c <_printf_i+0x174>
 801b854:	065e      	lsls	r6, r3, #25
 801b856:	bf48      	it	mi
 801b858:	b2ad      	uxthmi	r5, r5
 801b85a:	e7e6      	b.n	801b82a <_printf_i+0x182>
 801b85c:	4616      	mov	r6, r2
 801b85e:	e7bb      	b.n	801b7d8 <_printf_i+0x130>
 801b860:	680b      	ldr	r3, [r1, #0]
 801b862:	6826      	ldr	r6, [r4, #0]
 801b864:	6960      	ldr	r0, [r4, #20]
 801b866:	1d1d      	adds	r5, r3, #4
 801b868:	600d      	str	r5, [r1, #0]
 801b86a:	0635      	lsls	r5, r6, #24
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	d501      	bpl.n	801b874 <_printf_i+0x1cc>
 801b870:	6018      	str	r0, [r3, #0]
 801b872:	e002      	b.n	801b87a <_printf_i+0x1d2>
 801b874:	0671      	lsls	r1, r6, #25
 801b876:	d5fb      	bpl.n	801b870 <_printf_i+0x1c8>
 801b878:	8018      	strh	r0, [r3, #0]
 801b87a:	2300      	movs	r3, #0
 801b87c:	6123      	str	r3, [r4, #16]
 801b87e:	4616      	mov	r6, r2
 801b880:	e7ba      	b.n	801b7f8 <_printf_i+0x150>
 801b882:	680b      	ldr	r3, [r1, #0]
 801b884:	1d1a      	adds	r2, r3, #4
 801b886:	600a      	str	r2, [r1, #0]
 801b888:	681e      	ldr	r6, [r3, #0]
 801b88a:	6862      	ldr	r2, [r4, #4]
 801b88c:	2100      	movs	r1, #0
 801b88e:	4630      	mov	r0, r6
 801b890:	f7e4 fd3e 	bl	8000310 <memchr>
 801b894:	b108      	cbz	r0, 801b89a <_printf_i+0x1f2>
 801b896:	1b80      	subs	r0, r0, r6
 801b898:	6060      	str	r0, [r4, #4]
 801b89a:	6863      	ldr	r3, [r4, #4]
 801b89c:	6123      	str	r3, [r4, #16]
 801b89e:	2300      	movs	r3, #0
 801b8a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b8a4:	e7a8      	b.n	801b7f8 <_printf_i+0x150>
 801b8a6:	6923      	ldr	r3, [r4, #16]
 801b8a8:	4632      	mov	r2, r6
 801b8aa:	4649      	mov	r1, r9
 801b8ac:	4640      	mov	r0, r8
 801b8ae:	47d0      	blx	sl
 801b8b0:	3001      	adds	r0, #1
 801b8b2:	d0ab      	beq.n	801b80c <_printf_i+0x164>
 801b8b4:	6823      	ldr	r3, [r4, #0]
 801b8b6:	079b      	lsls	r3, r3, #30
 801b8b8:	d413      	bmi.n	801b8e2 <_printf_i+0x23a>
 801b8ba:	68e0      	ldr	r0, [r4, #12]
 801b8bc:	9b03      	ldr	r3, [sp, #12]
 801b8be:	4298      	cmp	r0, r3
 801b8c0:	bfb8      	it	lt
 801b8c2:	4618      	movlt	r0, r3
 801b8c4:	e7a4      	b.n	801b810 <_printf_i+0x168>
 801b8c6:	2301      	movs	r3, #1
 801b8c8:	4632      	mov	r2, r6
 801b8ca:	4649      	mov	r1, r9
 801b8cc:	4640      	mov	r0, r8
 801b8ce:	47d0      	blx	sl
 801b8d0:	3001      	adds	r0, #1
 801b8d2:	d09b      	beq.n	801b80c <_printf_i+0x164>
 801b8d4:	3501      	adds	r5, #1
 801b8d6:	68e3      	ldr	r3, [r4, #12]
 801b8d8:	9903      	ldr	r1, [sp, #12]
 801b8da:	1a5b      	subs	r3, r3, r1
 801b8dc:	42ab      	cmp	r3, r5
 801b8de:	dcf2      	bgt.n	801b8c6 <_printf_i+0x21e>
 801b8e0:	e7eb      	b.n	801b8ba <_printf_i+0x212>
 801b8e2:	2500      	movs	r5, #0
 801b8e4:	f104 0619 	add.w	r6, r4, #25
 801b8e8:	e7f5      	b.n	801b8d6 <_printf_i+0x22e>
 801b8ea:	bf00      	nop
 801b8ec:	0801f9f1 	.word	0x0801f9f1
 801b8f0:	0801fa02 	.word	0x0801fa02

0801b8f4 <_sbrk_r>:
 801b8f4:	b538      	push	{r3, r4, r5, lr}
 801b8f6:	4d06      	ldr	r5, [pc, #24]	; (801b910 <_sbrk_r+0x1c>)
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	4608      	mov	r0, r1
 801b8fe:	602b      	str	r3, [r5, #0]
 801b900:	f7e5 ffee 	bl	80018e0 <_sbrk>
 801b904:	1c43      	adds	r3, r0, #1
 801b906:	d102      	bne.n	801b90e <_sbrk_r+0x1a>
 801b908:	682b      	ldr	r3, [r5, #0]
 801b90a:	b103      	cbz	r3, 801b90e <_sbrk_r+0x1a>
 801b90c:	6023      	str	r3, [r4, #0]
 801b90e:	bd38      	pop	{r3, r4, r5, pc}
 801b910:	2400724c 	.word	0x2400724c

0801b914 <_raise_r>:
 801b914:	291f      	cmp	r1, #31
 801b916:	b538      	push	{r3, r4, r5, lr}
 801b918:	4604      	mov	r4, r0
 801b91a:	460d      	mov	r5, r1
 801b91c:	d904      	bls.n	801b928 <_raise_r+0x14>
 801b91e:	2316      	movs	r3, #22
 801b920:	6003      	str	r3, [r0, #0]
 801b922:	f04f 30ff 	mov.w	r0, #4294967295
 801b926:	bd38      	pop	{r3, r4, r5, pc}
 801b928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b92a:	b112      	cbz	r2, 801b932 <_raise_r+0x1e>
 801b92c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b930:	b94b      	cbnz	r3, 801b946 <_raise_r+0x32>
 801b932:	4620      	mov	r0, r4
 801b934:	f000 f830 	bl	801b998 <_getpid_r>
 801b938:	462a      	mov	r2, r5
 801b93a:	4601      	mov	r1, r0
 801b93c:	4620      	mov	r0, r4
 801b93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b942:	f000 b817 	b.w	801b974 <_kill_r>
 801b946:	2b01      	cmp	r3, #1
 801b948:	d00a      	beq.n	801b960 <_raise_r+0x4c>
 801b94a:	1c59      	adds	r1, r3, #1
 801b94c:	d103      	bne.n	801b956 <_raise_r+0x42>
 801b94e:	2316      	movs	r3, #22
 801b950:	6003      	str	r3, [r0, #0]
 801b952:	2001      	movs	r0, #1
 801b954:	e7e7      	b.n	801b926 <_raise_r+0x12>
 801b956:	2400      	movs	r4, #0
 801b958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b95c:	4628      	mov	r0, r5
 801b95e:	4798      	blx	r3
 801b960:	2000      	movs	r0, #0
 801b962:	e7e0      	b.n	801b926 <_raise_r+0x12>

0801b964 <raise>:
 801b964:	4b02      	ldr	r3, [pc, #8]	; (801b970 <raise+0xc>)
 801b966:	4601      	mov	r1, r0
 801b968:	6818      	ldr	r0, [r3, #0]
 801b96a:	f7ff bfd3 	b.w	801b914 <_raise_r>
 801b96e:	bf00      	nop
 801b970:	240000bc 	.word	0x240000bc

0801b974 <_kill_r>:
 801b974:	b538      	push	{r3, r4, r5, lr}
 801b976:	4d07      	ldr	r5, [pc, #28]	; (801b994 <_kill_r+0x20>)
 801b978:	2300      	movs	r3, #0
 801b97a:	4604      	mov	r4, r0
 801b97c:	4608      	mov	r0, r1
 801b97e:	4611      	mov	r1, r2
 801b980:	602b      	str	r3, [r5, #0]
 801b982:	f7e5 ff79 	bl	8001878 <_kill>
 801b986:	1c43      	adds	r3, r0, #1
 801b988:	d102      	bne.n	801b990 <_kill_r+0x1c>
 801b98a:	682b      	ldr	r3, [r5, #0]
 801b98c:	b103      	cbz	r3, 801b990 <_kill_r+0x1c>
 801b98e:	6023      	str	r3, [r4, #0]
 801b990:	bd38      	pop	{r3, r4, r5, pc}
 801b992:	bf00      	nop
 801b994:	2400724c 	.word	0x2400724c

0801b998 <_getpid_r>:
 801b998:	f7e5 bf6c 	b.w	8001874 <_getpid>

0801b99c <__swbuf_r>:
 801b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b99e:	460e      	mov	r6, r1
 801b9a0:	4614      	mov	r4, r2
 801b9a2:	4605      	mov	r5, r0
 801b9a4:	b118      	cbz	r0, 801b9ae <__swbuf_r+0x12>
 801b9a6:	6983      	ldr	r3, [r0, #24]
 801b9a8:	b90b      	cbnz	r3, 801b9ae <__swbuf_r+0x12>
 801b9aa:	f000 fa33 	bl	801be14 <__sinit>
 801b9ae:	4b21      	ldr	r3, [pc, #132]	; (801ba34 <__swbuf_r+0x98>)
 801b9b0:	429c      	cmp	r4, r3
 801b9b2:	d12b      	bne.n	801ba0c <__swbuf_r+0x70>
 801b9b4:	686c      	ldr	r4, [r5, #4]
 801b9b6:	69a3      	ldr	r3, [r4, #24]
 801b9b8:	60a3      	str	r3, [r4, #8]
 801b9ba:	89a3      	ldrh	r3, [r4, #12]
 801b9bc:	071a      	lsls	r2, r3, #28
 801b9be:	d52f      	bpl.n	801ba20 <__swbuf_r+0x84>
 801b9c0:	6923      	ldr	r3, [r4, #16]
 801b9c2:	b36b      	cbz	r3, 801ba20 <__swbuf_r+0x84>
 801b9c4:	6923      	ldr	r3, [r4, #16]
 801b9c6:	6820      	ldr	r0, [r4, #0]
 801b9c8:	1ac0      	subs	r0, r0, r3
 801b9ca:	6963      	ldr	r3, [r4, #20]
 801b9cc:	b2f6      	uxtb	r6, r6
 801b9ce:	4283      	cmp	r3, r0
 801b9d0:	4637      	mov	r7, r6
 801b9d2:	dc04      	bgt.n	801b9de <__swbuf_r+0x42>
 801b9d4:	4621      	mov	r1, r4
 801b9d6:	4628      	mov	r0, r5
 801b9d8:	f000 f988 	bl	801bcec <_fflush_r>
 801b9dc:	bb30      	cbnz	r0, 801ba2c <__swbuf_r+0x90>
 801b9de:	68a3      	ldr	r3, [r4, #8]
 801b9e0:	3b01      	subs	r3, #1
 801b9e2:	60a3      	str	r3, [r4, #8]
 801b9e4:	6823      	ldr	r3, [r4, #0]
 801b9e6:	1c5a      	adds	r2, r3, #1
 801b9e8:	6022      	str	r2, [r4, #0]
 801b9ea:	701e      	strb	r6, [r3, #0]
 801b9ec:	6963      	ldr	r3, [r4, #20]
 801b9ee:	3001      	adds	r0, #1
 801b9f0:	4283      	cmp	r3, r0
 801b9f2:	d004      	beq.n	801b9fe <__swbuf_r+0x62>
 801b9f4:	89a3      	ldrh	r3, [r4, #12]
 801b9f6:	07db      	lsls	r3, r3, #31
 801b9f8:	d506      	bpl.n	801ba08 <__swbuf_r+0x6c>
 801b9fa:	2e0a      	cmp	r6, #10
 801b9fc:	d104      	bne.n	801ba08 <__swbuf_r+0x6c>
 801b9fe:	4621      	mov	r1, r4
 801ba00:	4628      	mov	r0, r5
 801ba02:	f000 f973 	bl	801bcec <_fflush_r>
 801ba06:	b988      	cbnz	r0, 801ba2c <__swbuf_r+0x90>
 801ba08:	4638      	mov	r0, r7
 801ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba0c:	4b0a      	ldr	r3, [pc, #40]	; (801ba38 <__swbuf_r+0x9c>)
 801ba0e:	429c      	cmp	r4, r3
 801ba10:	d101      	bne.n	801ba16 <__swbuf_r+0x7a>
 801ba12:	68ac      	ldr	r4, [r5, #8]
 801ba14:	e7cf      	b.n	801b9b6 <__swbuf_r+0x1a>
 801ba16:	4b09      	ldr	r3, [pc, #36]	; (801ba3c <__swbuf_r+0xa0>)
 801ba18:	429c      	cmp	r4, r3
 801ba1a:	bf08      	it	eq
 801ba1c:	68ec      	ldreq	r4, [r5, #12]
 801ba1e:	e7ca      	b.n	801b9b6 <__swbuf_r+0x1a>
 801ba20:	4621      	mov	r1, r4
 801ba22:	4628      	mov	r0, r5
 801ba24:	f000 f80c 	bl	801ba40 <__swsetup_r>
 801ba28:	2800      	cmp	r0, #0
 801ba2a:	d0cb      	beq.n	801b9c4 <__swbuf_r+0x28>
 801ba2c:	f04f 37ff 	mov.w	r7, #4294967295
 801ba30:	e7ea      	b.n	801ba08 <__swbuf_r+0x6c>
 801ba32:	bf00      	nop
 801ba34:	0801fa38 	.word	0x0801fa38
 801ba38:	0801fa58 	.word	0x0801fa58
 801ba3c:	0801fa18 	.word	0x0801fa18

0801ba40 <__swsetup_r>:
 801ba40:	4b32      	ldr	r3, [pc, #200]	; (801bb0c <__swsetup_r+0xcc>)
 801ba42:	b570      	push	{r4, r5, r6, lr}
 801ba44:	681d      	ldr	r5, [r3, #0]
 801ba46:	4606      	mov	r6, r0
 801ba48:	460c      	mov	r4, r1
 801ba4a:	b125      	cbz	r5, 801ba56 <__swsetup_r+0x16>
 801ba4c:	69ab      	ldr	r3, [r5, #24]
 801ba4e:	b913      	cbnz	r3, 801ba56 <__swsetup_r+0x16>
 801ba50:	4628      	mov	r0, r5
 801ba52:	f000 f9df 	bl	801be14 <__sinit>
 801ba56:	4b2e      	ldr	r3, [pc, #184]	; (801bb10 <__swsetup_r+0xd0>)
 801ba58:	429c      	cmp	r4, r3
 801ba5a:	d10f      	bne.n	801ba7c <__swsetup_r+0x3c>
 801ba5c:	686c      	ldr	r4, [r5, #4]
 801ba5e:	89a3      	ldrh	r3, [r4, #12]
 801ba60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba64:	0719      	lsls	r1, r3, #28
 801ba66:	d42c      	bmi.n	801bac2 <__swsetup_r+0x82>
 801ba68:	06dd      	lsls	r5, r3, #27
 801ba6a:	d411      	bmi.n	801ba90 <__swsetup_r+0x50>
 801ba6c:	2309      	movs	r3, #9
 801ba6e:	6033      	str	r3, [r6, #0]
 801ba70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ba74:	81a3      	strh	r3, [r4, #12]
 801ba76:	f04f 30ff 	mov.w	r0, #4294967295
 801ba7a:	e03e      	b.n	801bafa <__swsetup_r+0xba>
 801ba7c:	4b25      	ldr	r3, [pc, #148]	; (801bb14 <__swsetup_r+0xd4>)
 801ba7e:	429c      	cmp	r4, r3
 801ba80:	d101      	bne.n	801ba86 <__swsetup_r+0x46>
 801ba82:	68ac      	ldr	r4, [r5, #8]
 801ba84:	e7eb      	b.n	801ba5e <__swsetup_r+0x1e>
 801ba86:	4b24      	ldr	r3, [pc, #144]	; (801bb18 <__swsetup_r+0xd8>)
 801ba88:	429c      	cmp	r4, r3
 801ba8a:	bf08      	it	eq
 801ba8c:	68ec      	ldreq	r4, [r5, #12]
 801ba8e:	e7e6      	b.n	801ba5e <__swsetup_r+0x1e>
 801ba90:	0758      	lsls	r0, r3, #29
 801ba92:	d512      	bpl.n	801baba <__swsetup_r+0x7a>
 801ba94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba96:	b141      	cbz	r1, 801baaa <__swsetup_r+0x6a>
 801ba98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ba9c:	4299      	cmp	r1, r3
 801ba9e:	d002      	beq.n	801baa6 <__swsetup_r+0x66>
 801baa0:	4630      	mov	r0, r6
 801baa2:	f7ff fb8f 	bl	801b1c4 <_free_r>
 801baa6:	2300      	movs	r3, #0
 801baa8:	6363      	str	r3, [r4, #52]	; 0x34
 801baaa:	89a3      	ldrh	r3, [r4, #12]
 801baac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bab0:	81a3      	strh	r3, [r4, #12]
 801bab2:	2300      	movs	r3, #0
 801bab4:	6063      	str	r3, [r4, #4]
 801bab6:	6923      	ldr	r3, [r4, #16]
 801bab8:	6023      	str	r3, [r4, #0]
 801baba:	89a3      	ldrh	r3, [r4, #12]
 801babc:	f043 0308 	orr.w	r3, r3, #8
 801bac0:	81a3      	strh	r3, [r4, #12]
 801bac2:	6923      	ldr	r3, [r4, #16]
 801bac4:	b94b      	cbnz	r3, 801bada <__swsetup_r+0x9a>
 801bac6:	89a3      	ldrh	r3, [r4, #12]
 801bac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bacc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bad0:	d003      	beq.n	801bada <__swsetup_r+0x9a>
 801bad2:	4621      	mov	r1, r4
 801bad4:	4630      	mov	r0, r6
 801bad6:	f000 fa63 	bl	801bfa0 <__smakebuf_r>
 801bada:	89a0      	ldrh	r0, [r4, #12]
 801badc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bae0:	f010 0301 	ands.w	r3, r0, #1
 801bae4:	d00a      	beq.n	801bafc <__swsetup_r+0xbc>
 801bae6:	2300      	movs	r3, #0
 801bae8:	60a3      	str	r3, [r4, #8]
 801baea:	6963      	ldr	r3, [r4, #20]
 801baec:	425b      	negs	r3, r3
 801baee:	61a3      	str	r3, [r4, #24]
 801baf0:	6923      	ldr	r3, [r4, #16]
 801baf2:	b943      	cbnz	r3, 801bb06 <__swsetup_r+0xc6>
 801baf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801baf8:	d1ba      	bne.n	801ba70 <__swsetup_r+0x30>
 801bafa:	bd70      	pop	{r4, r5, r6, pc}
 801bafc:	0781      	lsls	r1, r0, #30
 801bafe:	bf58      	it	pl
 801bb00:	6963      	ldrpl	r3, [r4, #20]
 801bb02:	60a3      	str	r3, [r4, #8]
 801bb04:	e7f4      	b.n	801baf0 <__swsetup_r+0xb0>
 801bb06:	2000      	movs	r0, #0
 801bb08:	e7f7      	b.n	801bafa <__swsetup_r+0xba>
 801bb0a:	bf00      	nop
 801bb0c:	240000bc 	.word	0x240000bc
 801bb10:	0801fa38 	.word	0x0801fa38
 801bb14:	0801fa58 	.word	0x0801fa58
 801bb18:	0801fa18 	.word	0x0801fa18

0801bb1c <__register_exitproc>:
 801bb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801bbdc <__register_exitproc+0xc0>
 801bb24:	4606      	mov	r6, r0
 801bb26:	f8d8 0000 	ldr.w	r0, [r8]
 801bb2a:	461f      	mov	r7, r3
 801bb2c:	460d      	mov	r5, r1
 801bb2e:	4691      	mov	r9, r2
 801bb30:	f000 fa0e 	bl	801bf50 <__retarget_lock_acquire_recursive>
 801bb34:	4b25      	ldr	r3, [pc, #148]	; (801bbcc <__register_exitproc+0xb0>)
 801bb36:	681c      	ldr	r4, [r3, #0]
 801bb38:	b934      	cbnz	r4, 801bb48 <__register_exitproc+0x2c>
 801bb3a:	4c25      	ldr	r4, [pc, #148]	; (801bbd0 <__register_exitproc+0xb4>)
 801bb3c:	601c      	str	r4, [r3, #0]
 801bb3e:	4b25      	ldr	r3, [pc, #148]	; (801bbd4 <__register_exitproc+0xb8>)
 801bb40:	b113      	cbz	r3, 801bb48 <__register_exitproc+0x2c>
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801bb48:	6863      	ldr	r3, [r4, #4]
 801bb4a:	2b1f      	cmp	r3, #31
 801bb4c:	dd07      	ble.n	801bb5e <__register_exitproc+0x42>
 801bb4e:	f8d8 0000 	ldr.w	r0, [r8]
 801bb52:	f000 f9ff 	bl	801bf54 <__retarget_lock_release_recursive>
 801bb56:	f04f 30ff 	mov.w	r0, #4294967295
 801bb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb5e:	b34e      	cbz	r6, 801bbb4 <__register_exitproc+0x98>
 801bb60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801bb64:	b988      	cbnz	r0, 801bb8a <__register_exitproc+0x6e>
 801bb66:	4b1c      	ldr	r3, [pc, #112]	; (801bbd8 <__register_exitproc+0xbc>)
 801bb68:	b923      	cbnz	r3, 801bb74 <__register_exitproc+0x58>
 801bb6a:	f8d8 0000 	ldr.w	r0, [r8]
 801bb6e:	f000 f9f0 	bl	801bf52 <__retarget_lock_release>
 801bb72:	e7f0      	b.n	801bb56 <__register_exitproc+0x3a>
 801bb74:	f44f 7084 	mov.w	r0, #264	; 0x108
 801bb78:	f7ff fafe 	bl	801b178 <malloc>
 801bb7c:	2800      	cmp	r0, #0
 801bb7e:	d0f4      	beq.n	801bb6a <__register_exitproc+0x4e>
 801bb80:	2300      	movs	r3, #0
 801bb82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801bb86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801bb8a:	6863      	ldr	r3, [r4, #4]
 801bb8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801bb90:	2201      	movs	r2, #1
 801bb92:	409a      	lsls	r2, r3
 801bb94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801bb98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801bb9c:	4313      	orrs	r3, r2
 801bb9e:	2e02      	cmp	r6, #2
 801bba0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801bba4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801bba8:	bf02      	ittt	eq
 801bbaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801bbae:	431a      	orreq	r2, r3
 801bbb0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801bbb4:	6863      	ldr	r3, [r4, #4]
 801bbb6:	f8d8 0000 	ldr.w	r0, [r8]
 801bbba:	1c5a      	adds	r2, r3, #1
 801bbbc:	3302      	adds	r3, #2
 801bbbe:	6062      	str	r2, [r4, #4]
 801bbc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801bbc4:	f000 f9c6 	bl	801bf54 <__retarget_lock_release_recursive>
 801bbc8:	2000      	movs	r0, #0
 801bbca:	e7c6      	b.n	801bb5a <__register_exitproc+0x3e>
 801bbcc:	24006e34 	.word	0x24006e34
 801bbd0:	24006da8 	.word	0x24006da8
 801bbd4:	0801fa14 	.word	0x0801fa14
 801bbd8:	0801b179 	.word	0x0801b179
 801bbdc:	24000120 	.word	0x24000120

0801bbe0 <__sflush_r>:
 801bbe0:	898a      	ldrh	r2, [r1, #12]
 801bbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbe6:	4605      	mov	r5, r0
 801bbe8:	0710      	lsls	r0, r2, #28
 801bbea:	460c      	mov	r4, r1
 801bbec:	d458      	bmi.n	801bca0 <__sflush_r+0xc0>
 801bbee:	684b      	ldr	r3, [r1, #4]
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	dc05      	bgt.n	801bc00 <__sflush_r+0x20>
 801bbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	dc02      	bgt.n	801bc00 <__sflush_r+0x20>
 801bbfa:	2000      	movs	r0, #0
 801bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc02:	2e00      	cmp	r6, #0
 801bc04:	d0f9      	beq.n	801bbfa <__sflush_r+0x1a>
 801bc06:	2300      	movs	r3, #0
 801bc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bc0c:	682f      	ldr	r7, [r5, #0]
 801bc0e:	602b      	str	r3, [r5, #0]
 801bc10:	d032      	beq.n	801bc78 <__sflush_r+0x98>
 801bc12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bc14:	89a3      	ldrh	r3, [r4, #12]
 801bc16:	075a      	lsls	r2, r3, #29
 801bc18:	d505      	bpl.n	801bc26 <__sflush_r+0x46>
 801bc1a:	6863      	ldr	r3, [r4, #4]
 801bc1c:	1ac0      	subs	r0, r0, r3
 801bc1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bc20:	b10b      	cbz	r3, 801bc26 <__sflush_r+0x46>
 801bc22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bc24:	1ac0      	subs	r0, r0, r3
 801bc26:	2300      	movs	r3, #0
 801bc28:	4602      	mov	r2, r0
 801bc2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc2c:	6a21      	ldr	r1, [r4, #32]
 801bc2e:	4628      	mov	r0, r5
 801bc30:	47b0      	blx	r6
 801bc32:	1c43      	adds	r3, r0, #1
 801bc34:	89a3      	ldrh	r3, [r4, #12]
 801bc36:	d106      	bne.n	801bc46 <__sflush_r+0x66>
 801bc38:	6829      	ldr	r1, [r5, #0]
 801bc3a:	291d      	cmp	r1, #29
 801bc3c:	d82c      	bhi.n	801bc98 <__sflush_r+0xb8>
 801bc3e:	4a2a      	ldr	r2, [pc, #168]	; (801bce8 <__sflush_r+0x108>)
 801bc40:	40ca      	lsrs	r2, r1
 801bc42:	07d6      	lsls	r6, r2, #31
 801bc44:	d528      	bpl.n	801bc98 <__sflush_r+0xb8>
 801bc46:	2200      	movs	r2, #0
 801bc48:	6062      	str	r2, [r4, #4]
 801bc4a:	04d9      	lsls	r1, r3, #19
 801bc4c:	6922      	ldr	r2, [r4, #16]
 801bc4e:	6022      	str	r2, [r4, #0]
 801bc50:	d504      	bpl.n	801bc5c <__sflush_r+0x7c>
 801bc52:	1c42      	adds	r2, r0, #1
 801bc54:	d101      	bne.n	801bc5a <__sflush_r+0x7a>
 801bc56:	682b      	ldr	r3, [r5, #0]
 801bc58:	b903      	cbnz	r3, 801bc5c <__sflush_r+0x7c>
 801bc5a:	6560      	str	r0, [r4, #84]	; 0x54
 801bc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc5e:	602f      	str	r7, [r5, #0]
 801bc60:	2900      	cmp	r1, #0
 801bc62:	d0ca      	beq.n	801bbfa <__sflush_r+0x1a>
 801bc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc68:	4299      	cmp	r1, r3
 801bc6a:	d002      	beq.n	801bc72 <__sflush_r+0x92>
 801bc6c:	4628      	mov	r0, r5
 801bc6e:	f7ff faa9 	bl	801b1c4 <_free_r>
 801bc72:	2000      	movs	r0, #0
 801bc74:	6360      	str	r0, [r4, #52]	; 0x34
 801bc76:	e7c1      	b.n	801bbfc <__sflush_r+0x1c>
 801bc78:	6a21      	ldr	r1, [r4, #32]
 801bc7a:	2301      	movs	r3, #1
 801bc7c:	4628      	mov	r0, r5
 801bc7e:	47b0      	blx	r6
 801bc80:	1c41      	adds	r1, r0, #1
 801bc82:	d1c7      	bne.n	801bc14 <__sflush_r+0x34>
 801bc84:	682b      	ldr	r3, [r5, #0]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d0c4      	beq.n	801bc14 <__sflush_r+0x34>
 801bc8a:	2b1d      	cmp	r3, #29
 801bc8c:	d001      	beq.n	801bc92 <__sflush_r+0xb2>
 801bc8e:	2b16      	cmp	r3, #22
 801bc90:	d101      	bne.n	801bc96 <__sflush_r+0xb6>
 801bc92:	602f      	str	r7, [r5, #0]
 801bc94:	e7b1      	b.n	801bbfa <__sflush_r+0x1a>
 801bc96:	89a3      	ldrh	r3, [r4, #12]
 801bc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc9c:	81a3      	strh	r3, [r4, #12]
 801bc9e:	e7ad      	b.n	801bbfc <__sflush_r+0x1c>
 801bca0:	690f      	ldr	r7, [r1, #16]
 801bca2:	2f00      	cmp	r7, #0
 801bca4:	d0a9      	beq.n	801bbfa <__sflush_r+0x1a>
 801bca6:	0793      	lsls	r3, r2, #30
 801bca8:	680e      	ldr	r6, [r1, #0]
 801bcaa:	bf08      	it	eq
 801bcac:	694b      	ldreq	r3, [r1, #20]
 801bcae:	600f      	str	r7, [r1, #0]
 801bcb0:	bf18      	it	ne
 801bcb2:	2300      	movne	r3, #0
 801bcb4:	eba6 0807 	sub.w	r8, r6, r7
 801bcb8:	608b      	str	r3, [r1, #8]
 801bcba:	f1b8 0f00 	cmp.w	r8, #0
 801bcbe:	dd9c      	ble.n	801bbfa <__sflush_r+0x1a>
 801bcc0:	6a21      	ldr	r1, [r4, #32]
 801bcc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bcc4:	4643      	mov	r3, r8
 801bcc6:	463a      	mov	r2, r7
 801bcc8:	4628      	mov	r0, r5
 801bcca:	47b0      	blx	r6
 801bccc:	2800      	cmp	r0, #0
 801bcce:	dc06      	bgt.n	801bcde <__sflush_r+0xfe>
 801bcd0:	89a3      	ldrh	r3, [r4, #12]
 801bcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcd6:	81a3      	strh	r3, [r4, #12]
 801bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 801bcdc:	e78e      	b.n	801bbfc <__sflush_r+0x1c>
 801bcde:	4407      	add	r7, r0
 801bce0:	eba8 0800 	sub.w	r8, r8, r0
 801bce4:	e7e9      	b.n	801bcba <__sflush_r+0xda>
 801bce6:	bf00      	nop
 801bce8:	20400001 	.word	0x20400001

0801bcec <_fflush_r>:
 801bcec:	b538      	push	{r3, r4, r5, lr}
 801bcee:	690b      	ldr	r3, [r1, #16]
 801bcf0:	4605      	mov	r5, r0
 801bcf2:	460c      	mov	r4, r1
 801bcf4:	b913      	cbnz	r3, 801bcfc <_fflush_r+0x10>
 801bcf6:	2500      	movs	r5, #0
 801bcf8:	4628      	mov	r0, r5
 801bcfa:	bd38      	pop	{r3, r4, r5, pc}
 801bcfc:	b118      	cbz	r0, 801bd06 <_fflush_r+0x1a>
 801bcfe:	6983      	ldr	r3, [r0, #24]
 801bd00:	b90b      	cbnz	r3, 801bd06 <_fflush_r+0x1a>
 801bd02:	f000 f887 	bl	801be14 <__sinit>
 801bd06:	4b14      	ldr	r3, [pc, #80]	; (801bd58 <_fflush_r+0x6c>)
 801bd08:	429c      	cmp	r4, r3
 801bd0a:	d11b      	bne.n	801bd44 <_fflush_r+0x58>
 801bd0c:	686c      	ldr	r4, [r5, #4]
 801bd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d0ef      	beq.n	801bcf6 <_fflush_r+0xa>
 801bd16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bd18:	07d0      	lsls	r0, r2, #31
 801bd1a:	d404      	bmi.n	801bd26 <_fflush_r+0x3a>
 801bd1c:	0599      	lsls	r1, r3, #22
 801bd1e:	d402      	bmi.n	801bd26 <_fflush_r+0x3a>
 801bd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd22:	f000 f915 	bl	801bf50 <__retarget_lock_acquire_recursive>
 801bd26:	4628      	mov	r0, r5
 801bd28:	4621      	mov	r1, r4
 801bd2a:	f7ff ff59 	bl	801bbe0 <__sflush_r>
 801bd2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd30:	07da      	lsls	r2, r3, #31
 801bd32:	4605      	mov	r5, r0
 801bd34:	d4e0      	bmi.n	801bcf8 <_fflush_r+0xc>
 801bd36:	89a3      	ldrh	r3, [r4, #12]
 801bd38:	059b      	lsls	r3, r3, #22
 801bd3a:	d4dd      	bmi.n	801bcf8 <_fflush_r+0xc>
 801bd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd3e:	f000 f909 	bl	801bf54 <__retarget_lock_release_recursive>
 801bd42:	e7d9      	b.n	801bcf8 <_fflush_r+0xc>
 801bd44:	4b05      	ldr	r3, [pc, #20]	; (801bd5c <_fflush_r+0x70>)
 801bd46:	429c      	cmp	r4, r3
 801bd48:	d101      	bne.n	801bd4e <_fflush_r+0x62>
 801bd4a:	68ac      	ldr	r4, [r5, #8]
 801bd4c:	e7df      	b.n	801bd0e <_fflush_r+0x22>
 801bd4e:	4b04      	ldr	r3, [pc, #16]	; (801bd60 <_fflush_r+0x74>)
 801bd50:	429c      	cmp	r4, r3
 801bd52:	bf08      	it	eq
 801bd54:	68ec      	ldreq	r4, [r5, #12]
 801bd56:	e7da      	b.n	801bd0e <_fflush_r+0x22>
 801bd58:	0801fa38 	.word	0x0801fa38
 801bd5c:	0801fa58 	.word	0x0801fa58
 801bd60:	0801fa18 	.word	0x0801fa18

0801bd64 <std>:
 801bd64:	2300      	movs	r3, #0
 801bd66:	b510      	push	{r4, lr}
 801bd68:	4604      	mov	r4, r0
 801bd6a:	e9c0 3300 	strd	r3, r3, [r0]
 801bd6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bd72:	6083      	str	r3, [r0, #8]
 801bd74:	8181      	strh	r1, [r0, #12]
 801bd76:	6643      	str	r3, [r0, #100]	; 0x64
 801bd78:	81c2      	strh	r2, [r0, #14]
 801bd7a:	6183      	str	r3, [r0, #24]
 801bd7c:	4619      	mov	r1, r3
 801bd7e:	2208      	movs	r2, #8
 801bd80:	305c      	adds	r0, #92	; 0x5c
 801bd82:	f7ff fa17 	bl	801b1b4 <memset>
 801bd86:	4b05      	ldr	r3, [pc, #20]	; (801bd9c <std+0x38>)
 801bd88:	6263      	str	r3, [r4, #36]	; 0x24
 801bd8a:	4b05      	ldr	r3, [pc, #20]	; (801bda0 <std+0x3c>)
 801bd8c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bd8e:	4b05      	ldr	r3, [pc, #20]	; (801bda4 <std+0x40>)
 801bd90:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bd92:	4b05      	ldr	r3, [pc, #20]	; (801bda8 <std+0x44>)
 801bd94:	6224      	str	r4, [r4, #32]
 801bd96:	6323      	str	r3, [r4, #48]	; 0x30
 801bd98:	bd10      	pop	{r4, pc}
 801bd9a:	bf00      	nop
 801bd9c:	0801c039 	.word	0x0801c039
 801bda0:	0801c05b 	.word	0x0801c05b
 801bda4:	0801c093 	.word	0x0801c093
 801bda8:	0801c0b7 	.word	0x0801c0b7

0801bdac <_cleanup_r>:
 801bdac:	4901      	ldr	r1, [pc, #4]	; (801bdb4 <_cleanup_r+0x8>)
 801bdae:	f000 b8af 	b.w	801bf10 <_fwalk_reent>
 801bdb2:	bf00      	nop
 801bdb4:	0801bced 	.word	0x0801bced

0801bdb8 <__sfmoreglue>:
 801bdb8:	b570      	push	{r4, r5, r6, lr}
 801bdba:	1e4a      	subs	r2, r1, #1
 801bdbc:	2568      	movs	r5, #104	; 0x68
 801bdbe:	4355      	muls	r5, r2
 801bdc0:	460e      	mov	r6, r1
 801bdc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bdc6:	f7ff fa4d 	bl	801b264 <_malloc_r>
 801bdca:	4604      	mov	r4, r0
 801bdcc:	b140      	cbz	r0, 801bde0 <__sfmoreglue+0x28>
 801bdce:	2100      	movs	r1, #0
 801bdd0:	e9c0 1600 	strd	r1, r6, [r0]
 801bdd4:	300c      	adds	r0, #12
 801bdd6:	60a0      	str	r0, [r4, #8]
 801bdd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bddc:	f7ff f9ea 	bl	801b1b4 <memset>
 801bde0:	4620      	mov	r0, r4
 801bde2:	bd70      	pop	{r4, r5, r6, pc}

0801bde4 <__sfp_lock_acquire>:
 801bde4:	4801      	ldr	r0, [pc, #4]	; (801bdec <__sfp_lock_acquire+0x8>)
 801bde6:	f000 b8b3 	b.w	801bf50 <__retarget_lock_acquire_recursive>
 801bdea:	bf00      	nop
 801bdec:	24007248 	.word	0x24007248

0801bdf0 <__sfp_lock_release>:
 801bdf0:	4801      	ldr	r0, [pc, #4]	; (801bdf8 <__sfp_lock_release+0x8>)
 801bdf2:	f000 b8af 	b.w	801bf54 <__retarget_lock_release_recursive>
 801bdf6:	bf00      	nop
 801bdf8:	24007248 	.word	0x24007248

0801bdfc <__sinit_lock_acquire>:
 801bdfc:	4801      	ldr	r0, [pc, #4]	; (801be04 <__sinit_lock_acquire+0x8>)
 801bdfe:	f000 b8a7 	b.w	801bf50 <__retarget_lock_acquire_recursive>
 801be02:	bf00      	nop
 801be04:	24007243 	.word	0x24007243

0801be08 <__sinit_lock_release>:
 801be08:	4801      	ldr	r0, [pc, #4]	; (801be10 <__sinit_lock_release+0x8>)
 801be0a:	f000 b8a3 	b.w	801bf54 <__retarget_lock_release_recursive>
 801be0e:	bf00      	nop
 801be10:	24007243 	.word	0x24007243

0801be14 <__sinit>:
 801be14:	b510      	push	{r4, lr}
 801be16:	4604      	mov	r4, r0
 801be18:	f7ff fff0 	bl	801bdfc <__sinit_lock_acquire>
 801be1c:	69a3      	ldr	r3, [r4, #24]
 801be1e:	b11b      	cbz	r3, 801be28 <__sinit+0x14>
 801be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be24:	f7ff bff0 	b.w	801be08 <__sinit_lock_release>
 801be28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801be2c:	6523      	str	r3, [r4, #80]	; 0x50
 801be2e:	4b13      	ldr	r3, [pc, #76]	; (801be7c <__sinit+0x68>)
 801be30:	4a13      	ldr	r2, [pc, #76]	; (801be80 <__sinit+0x6c>)
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	62a2      	str	r2, [r4, #40]	; 0x28
 801be36:	42a3      	cmp	r3, r4
 801be38:	bf04      	itt	eq
 801be3a:	2301      	moveq	r3, #1
 801be3c:	61a3      	streq	r3, [r4, #24]
 801be3e:	4620      	mov	r0, r4
 801be40:	f000 f820 	bl	801be84 <__sfp>
 801be44:	6060      	str	r0, [r4, #4]
 801be46:	4620      	mov	r0, r4
 801be48:	f000 f81c 	bl	801be84 <__sfp>
 801be4c:	60a0      	str	r0, [r4, #8]
 801be4e:	4620      	mov	r0, r4
 801be50:	f000 f818 	bl	801be84 <__sfp>
 801be54:	2200      	movs	r2, #0
 801be56:	60e0      	str	r0, [r4, #12]
 801be58:	2104      	movs	r1, #4
 801be5a:	6860      	ldr	r0, [r4, #4]
 801be5c:	f7ff ff82 	bl	801bd64 <std>
 801be60:	68a0      	ldr	r0, [r4, #8]
 801be62:	2201      	movs	r2, #1
 801be64:	2109      	movs	r1, #9
 801be66:	f7ff ff7d 	bl	801bd64 <std>
 801be6a:	68e0      	ldr	r0, [r4, #12]
 801be6c:	2202      	movs	r2, #2
 801be6e:	2112      	movs	r1, #18
 801be70:	f7ff ff78 	bl	801bd64 <std>
 801be74:	2301      	movs	r3, #1
 801be76:	61a3      	str	r3, [r4, #24]
 801be78:	e7d2      	b.n	801be20 <__sinit+0xc>
 801be7a:	bf00      	nop
 801be7c:	0801f9dc 	.word	0x0801f9dc
 801be80:	0801bdad 	.word	0x0801bdad

0801be84 <__sfp>:
 801be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be86:	4607      	mov	r7, r0
 801be88:	f7ff ffac 	bl	801bde4 <__sfp_lock_acquire>
 801be8c:	4b1e      	ldr	r3, [pc, #120]	; (801bf08 <__sfp+0x84>)
 801be8e:	681e      	ldr	r6, [r3, #0]
 801be90:	69b3      	ldr	r3, [r6, #24]
 801be92:	b913      	cbnz	r3, 801be9a <__sfp+0x16>
 801be94:	4630      	mov	r0, r6
 801be96:	f7ff ffbd 	bl	801be14 <__sinit>
 801be9a:	3648      	adds	r6, #72	; 0x48
 801be9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bea0:	3b01      	subs	r3, #1
 801bea2:	d503      	bpl.n	801beac <__sfp+0x28>
 801bea4:	6833      	ldr	r3, [r6, #0]
 801bea6:	b30b      	cbz	r3, 801beec <__sfp+0x68>
 801bea8:	6836      	ldr	r6, [r6, #0]
 801beaa:	e7f7      	b.n	801be9c <__sfp+0x18>
 801beac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801beb0:	b9d5      	cbnz	r5, 801bee8 <__sfp+0x64>
 801beb2:	4b16      	ldr	r3, [pc, #88]	; (801bf0c <__sfp+0x88>)
 801beb4:	60e3      	str	r3, [r4, #12]
 801beb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801beba:	6665      	str	r5, [r4, #100]	; 0x64
 801bebc:	f000 f847 	bl	801bf4e <__retarget_lock_init_recursive>
 801bec0:	f7ff ff96 	bl	801bdf0 <__sfp_lock_release>
 801bec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801becc:	6025      	str	r5, [r4, #0]
 801bece:	61a5      	str	r5, [r4, #24]
 801bed0:	2208      	movs	r2, #8
 801bed2:	4629      	mov	r1, r5
 801bed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bed8:	f7ff f96c 	bl	801b1b4 <memset>
 801bedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bee4:	4620      	mov	r0, r4
 801bee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bee8:	3468      	adds	r4, #104	; 0x68
 801beea:	e7d9      	b.n	801bea0 <__sfp+0x1c>
 801beec:	2104      	movs	r1, #4
 801beee:	4638      	mov	r0, r7
 801bef0:	f7ff ff62 	bl	801bdb8 <__sfmoreglue>
 801bef4:	4604      	mov	r4, r0
 801bef6:	6030      	str	r0, [r6, #0]
 801bef8:	2800      	cmp	r0, #0
 801befa:	d1d5      	bne.n	801bea8 <__sfp+0x24>
 801befc:	f7ff ff78 	bl	801bdf0 <__sfp_lock_release>
 801bf00:	230c      	movs	r3, #12
 801bf02:	603b      	str	r3, [r7, #0]
 801bf04:	e7ee      	b.n	801bee4 <__sfp+0x60>
 801bf06:	bf00      	nop
 801bf08:	0801f9dc 	.word	0x0801f9dc
 801bf0c:	ffff0001 	.word	0xffff0001

0801bf10 <_fwalk_reent>:
 801bf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf14:	4606      	mov	r6, r0
 801bf16:	4688      	mov	r8, r1
 801bf18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bf1c:	2700      	movs	r7, #0
 801bf1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bf22:	f1b9 0901 	subs.w	r9, r9, #1
 801bf26:	d505      	bpl.n	801bf34 <_fwalk_reent+0x24>
 801bf28:	6824      	ldr	r4, [r4, #0]
 801bf2a:	2c00      	cmp	r4, #0
 801bf2c:	d1f7      	bne.n	801bf1e <_fwalk_reent+0xe>
 801bf2e:	4638      	mov	r0, r7
 801bf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf34:	89ab      	ldrh	r3, [r5, #12]
 801bf36:	2b01      	cmp	r3, #1
 801bf38:	d907      	bls.n	801bf4a <_fwalk_reent+0x3a>
 801bf3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bf3e:	3301      	adds	r3, #1
 801bf40:	d003      	beq.n	801bf4a <_fwalk_reent+0x3a>
 801bf42:	4629      	mov	r1, r5
 801bf44:	4630      	mov	r0, r6
 801bf46:	47c0      	blx	r8
 801bf48:	4307      	orrs	r7, r0
 801bf4a:	3568      	adds	r5, #104	; 0x68
 801bf4c:	e7e9      	b.n	801bf22 <_fwalk_reent+0x12>

0801bf4e <__retarget_lock_init_recursive>:
 801bf4e:	4770      	bx	lr

0801bf50 <__retarget_lock_acquire_recursive>:
 801bf50:	4770      	bx	lr

0801bf52 <__retarget_lock_release>:
 801bf52:	4770      	bx	lr

0801bf54 <__retarget_lock_release_recursive>:
 801bf54:	4770      	bx	lr

0801bf56 <__swhatbuf_r>:
 801bf56:	b570      	push	{r4, r5, r6, lr}
 801bf58:	460e      	mov	r6, r1
 801bf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf5e:	2900      	cmp	r1, #0
 801bf60:	b096      	sub	sp, #88	; 0x58
 801bf62:	4614      	mov	r4, r2
 801bf64:	461d      	mov	r5, r3
 801bf66:	da07      	bge.n	801bf78 <__swhatbuf_r+0x22>
 801bf68:	2300      	movs	r3, #0
 801bf6a:	602b      	str	r3, [r5, #0]
 801bf6c:	89b3      	ldrh	r3, [r6, #12]
 801bf6e:	061a      	lsls	r2, r3, #24
 801bf70:	d410      	bmi.n	801bf94 <__swhatbuf_r+0x3e>
 801bf72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bf76:	e00e      	b.n	801bf96 <__swhatbuf_r+0x40>
 801bf78:	466a      	mov	r2, sp
 801bf7a:	f000 f8c3 	bl	801c104 <_fstat_r>
 801bf7e:	2800      	cmp	r0, #0
 801bf80:	dbf2      	blt.n	801bf68 <__swhatbuf_r+0x12>
 801bf82:	9a01      	ldr	r2, [sp, #4]
 801bf84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bf88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bf8c:	425a      	negs	r2, r3
 801bf8e:	415a      	adcs	r2, r3
 801bf90:	602a      	str	r2, [r5, #0]
 801bf92:	e7ee      	b.n	801bf72 <__swhatbuf_r+0x1c>
 801bf94:	2340      	movs	r3, #64	; 0x40
 801bf96:	2000      	movs	r0, #0
 801bf98:	6023      	str	r3, [r4, #0]
 801bf9a:	b016      	add	sp, #88	; 0x58
 801bf9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bfa0 <__smakebuf_r>:
 801bfa0:	898b      	ldrh	r3, [r1, #12]
 801bfa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bfa4:	079d      	lsls	r5, r3, #30
 801bfa6:	4606      	mov	r6, r0
 801bfa8:	460c      	mov	r4, r1
 801bfaa:	d507      	bpl.n	801bfbc <__smakebuf_r+0x1c>
 801bfac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bfb0:	6023      	str	r3, [r4, #0]
 801bfb2:	6123      	str	r3, [r4, #16]
 801bfb4:	2301      	movs	r3, #1
 801bfb6:	6163      	str	r3, [r4, #20]
 801bfb8:	b002      	add	sp, #8
 801bfba:	bd70      	pop	{r4, r5, r6, pc}
 801bfbc:	ab01      	add	r3, sp, #4
 801bfbe:	466a      	mov	r2, sp
 801bfc0:	f7ff ffc9 	bl	801bf56 <__swhatbuf_r>
 801bfc4:	9900      	ldr	r1, [sp, #0]
 801bfc6:	4605      	mov	r5, r0
 801bfc8:	4630      	mov	r0, r6
 801bfca:	f7ff f94b 	bl	801b264 <_malloc_r>
 801bfce:	b948      	cbnz	r0, 801bfe4 <__smakebuf_r+0x44>
 801bfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfd4:	059a      	lsls	r2, r3, #22
 801bfd6:	d4ef      	bmi.n	801bfb8 <__smakebuf_r+0x18>
 801bfd8:	f023 0303 	bic.w	r3, r3, #3
 801bfdc:	f043 0302 	orr.w	r3, r3, #2
 801bfe0:	81a3      	strh	r3, [r4, #12]
 801bfe2:	e7e3      	b.n	801bfac <__smakebuf_r+0xc>
 801bfe4:	4b0d      	ldr	r3, [pc, #52]	; (801c01c <__smakebuf_r+0x7c>)
 801bfe6:	62b3      	str	r3, [r6, #40]	; 0x28
 801bfe8:	89a3      	ldrh	r3, [r4, #12]
 801bfea:	6020      	str	r0, [r4, #0]
 801bfec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bff0:	81a3      	strh	r3, [r4, #12]
 801bff2:	9b00      	ldr	r3, [sp, #0]
 801bff4:	6163      	str	r3, [r4, #20]
 801bff6:	9b01      	ldr	r3, [sp, #4]
 801bff8:	6120      	str	r0, [r4, #16]
 801bffa:	b15b      	cbz	r3, 801c014 <__smakebuf_r+0x74>
 801bffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c000:	4630      	mov	r0, r6
 801c002:	f000 f891 	bl	801c128 <_isatty_r>
 801c006:	b128      	cbz	r0, 801c014 <__smakebuf_r+0x74>
 801c008:	89a3      	ldrh	r3, [r4, #12]
 801c00a:	f023 0303 	bic.w	r3, r3, #3
 801c00e:	f043 0301 	orr.w	r3, r3, #1
 801c012:	81a3      	strh	r3, [r4, #12]
 801c014:	89a0      	ldrh	r0, [r4, #12]
 801c016:	4305      	orrs	r5, r0
 801c018:	81a5      	strh	r5, [r4, #12]
 801c01a:	e7cd      	b.n	801bfb8 <__smakebuf_r+0x18>
 801c01c:	0801bdad 	.word	0x0801bdad

0801c020 <__malloc_lock>:
 801c020:	4801      	ldr	r0, [pc, #4]	; (801c028 <__malloc_lock+0x8>)
 801c022:	f7ff bf95 	b.w	801bf50 <__retarget_lock_acquire_recursive>
 801c026:	bf00      	nop
 801c028:	24007244 	.word	0x24007244

0801c02c <__malloc_unlock>:
 801c02c:	4801      	ldr	r0, [pc, #4]	; (801c034 <__malloc_unlock+0x8>)
 801c02e:	f7ff bf91 	b.w	801bf54 <__retarget_lock_release_recursive>
 801c032:	bf00      	nop
 801c034:	24007244 	.word	0x24007244

0801c038 <__sread>:
 801c038:	b510      	push	{r4, lr}
 801c03a:	460c      	mov	r4, r1
 801c03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c040:	f000 f894 	bl	801c16c <_read_r>
 801c044:	2800      	cmp	r0, #0
 801c046:	bfab      	itete	ge
 801c048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c04a:	89a3      	ldrhlt	r3, [r4, #12]
 801c04c:	181b      	addge	r3, r3, r0
 801c04e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c052:	bfac      	ite	ge
 801c054:	6563      	strge	r3, [r4, #84]	; 0x54
 801c056:	81a3      	strhlt	r3, [r4, #12]
 801c058:	bd10      	pop	{r4, pc}

0801c05a <__swrite>:
 801c05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c05e:	461f      	mov	r7, r3
 801c060:	898b      	ldrh	r3, [r1, #12]
 801c062:	05db      	lsls	r3, r3, #23
 801c064:	4605      	mov	r5, r0
 801c066:	460c      	mov	r4, r1
 801c068:	4616      	mov	r6, r2
 801c06a:	d505      	bpl.n	801c078 <__swrite+0x1e>
 801c06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c070:	2302      	movs	r3, #2
 801c072:	2200      	movs	r2, #0
 801c074:	f000 f868 	bl	801c148 <_lseek_r>
 801c078:	89a3      	ldrh	r3, [r4, #12]
 801c07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c07e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c082:	81a3      	strh	r3, [r4, #12]
 801c084:	4632      	mov	r2, r6
 801c086:	463b      	mov	r3, r7
 801c088:	4628      	mov	r0, r5
 801c08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c08e:	f000 b817 	b.w	801c0c0 <_write_r>

0801c092 <__sseek>:
 801c092:	b510      	push	{r4, lr}
 801c094:	460c      	mov	r4, r1
 801c096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c09a:	f000 f855 	bl	801c148 <_lseek_r>
 801c09e:	1c43      	adds	r3, r0, #1
 801c0a0:	89a3      	ldrh	r3, [r4, #12]
 801c0a2:	bf15      	itete	ne
 801c0a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801c0a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c0aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c0ae:	81a3      	strheq	r3, [r4, #12]
 801c0b0:	bf18      	it	ne
 801c0b2:	81a3      	strhne	r3, [r4, #12]
 801c0b4:	bd10      	pop	{r4, pc}

0801c0b6 <__sclose>:
 801c0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0ba:	f000 b813 	b.w	801c0e4 <_close_r>
	...

0801c0c0 <_write_r>:
 801c0c0:	b538      	push	{r3, r4, r5, lr}
 801c0c2:	4d07      	ldr	r5, [pc, #28]	; (801c0e0 <_write_r+0x20>)
 801c0c4:	4604      	mov	r4, r0
 801c0c6:	4608      	mov	r0, r1
 801c0c8:	4611      	mov	r1, r2
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	602a      	str	r2, [r5, #0]
 801c0ce:	461a      	mov	r2, r3
 801c0d0:	f7e5 fbed 	bl	80018ae <_write>
 801c0d4:	1c43      	adds	r3, r0, #1
 801c0d6:	d102      	bne.n	801c0de <_write_r+0x1e>
 801c0d8:	682b      	ldr	r3, [r5, #0]
 801c0da:	b103      	cbz	r3, 801c0de <_write_r+0x1e>
 801c0dc:	6023      	str	r3, [r4, #0]
 801c0de:	bd38      	pop	{r3, r4, r5, pc}
 801c0e0:	2400724c 	.word	0x2400724c

0801c0e4 <_close_r>:
 801c0e4:	b538      	push	{r3, r4, r5, lr}
 801c0e6:	4d06      	ldr	r5, [pc, #24]	; (801c100 <_close_r+0x1c>)
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	4604      	mov	r4, r0
 801c0ec:	4608      	mov	r0, r1
 801c0ee:	602b      	str	r3, [r5, #0]
 801c0f0:	f7e5 fbea 	bl	80018c8 <_close>
 801c0f4:	1c43      	adds	r3, r0, #1
 801c0f6:	d102      	bne.n	801c0fe <_close_r+0x1a>
 801c0f8:	682b      	ldr	r3, [r5, #0]
 801c0fa:	b103      	cbz	r3, 801c0fe <_close_r+0x1a>
 801c0fc:	6023      	str	r3, [r4, #0]
 801c0fe:	bd38      	pop	{r3, r4, r5, pc}
 801c100:	2400724c 	.word	0x2400724c

0801c104 <_fstat_r>:
 801c104:	b538      	push	{r3, r4, r5, lr}
 801c106:	4d07      	ldr	r5, [pc, #28]	; (801c124 <_fstat_r+0x20>)
 801c108:	2300      	movs	r3, #0
 801c10a:	4604      	mov	r4, r0
 801c10c:	4608      	mov	r0, r1
 801c10e:	4611      	mov	r1, r2
 801c110:	602b      	str	r3, [r5, #0]
 801c112:	f7e5 fbdc 	bl	80018ce <_fstat>
 801c116:	1c43      	adds	r3, r0, #1
 801c118:	d102      	bne.n	801c120 <_fstat_r+0x1c>
 801c11a:	682b      	ldr	r3, [r5, #0]
 801c11c:	b103      	cbz	r3, 801c120 <_fstat_r+0x1c>
 801c11e:	6023      	str	r3, [r4, #0]
 801c120:	bd38      	pop	{r3, r4, r5, pc}
 801c122:	bf00      	nop
 801c124:	2400724c 	.word	0x2400724c

0801c128 <_isatty_r>:
 801c128:	b538      	push	{r3, r4, r5, lr}
 801c12a:	4d06      	ldr	r5, [pc, #24]	; (801c144 <_isatty_r+0x1c>)
 801c12c:	2300      	movs	r3, #0
 801c12e:	4604      	mov	r4, r0
 801c130:	4608      	mov	r0, r1
 801c132:	602b      	str	r3, [r5, #0]
 801c134:	f7e5 fbd0 	bl	80018d8 <_isatty>
 801c138:	1c43      	adds	r3, r0, #1
 801c13a:	d102      	bne.n	801c142 <_isatty_r+0x1a>
 801c13c:	682b      	ldr	r3, [r5, #0]
 801c13e:	b103      	cbz	r3, 801c142 <_isatty_r+0x1a>
 801c140:	6023      	str	r3, [r4, #0]
 801c142:	bd38      	pop	{r3, r4, r5, pc}
 801c144:	2400724c 	.word	0x2400724c

0801c148 <_lseek_r>:
 801c148:	b538      	push	{r3, r4, r5, lr}
 801c14a:	4d07      	ldr	r5, [pc, #28]	; (801c168 <_lseek_r+0x20>)
 801c14c:	4604      	mov	r4, r0
 801c14e:	4608      	mov	r0, r1
 801c150:	4611      	mov	r1, r2
 801c152:	2200      	movs	r2, #0
 801c154:	602a      	str	r2, [r5, #0]
 801c156:	461a      	mov	r2, r3
 801c158:	f7e5 fbc0 	bl	80018dc <_lseek>
 801c15c:	1c43      	adds	r3, r0, #1
 801c15e:	d102      	bne.n	801c166 <_lseek_r+0x1e>
 801c160:	682b      	ldr	r3, [r5, #0]
 801c162:	b103      	cbz	r3, 801c166 <_lseek_r+0x1e>
 801c164:	6023      	str	r3, [r4, #0]
 801c166:	bd38      	pop	{r3, r4, r5, pc}
 801c168:	2400724c 	.word	0x2400724c

0801c16c <_read_r>:
 801c16c:	b538      	push	{r3, r4, r5, lr}
 801c16e:	4d07      	ldr	r5, [pc, #28]	; (801c18c <_read_r+0x20>)
 801c170:	4604      	mov	r4, r0
 801c172:	4608      	mov	r0, r1
 801c174:	4611      	mov	r1, r2
 801c176:	2200      	movs	r2, #0
 801c178:	602a      	str	r2, [r5, #0]
 801c17a:	461a      	mov	r2, r3
 801c17c:	f7e5 fb8a 	bl	8001894 <_read>
 801c180:	1c43      	adds	r3, r0, #1
 801c182:	d102      	bne.n	801c18a <_read_r+0x1e>
 801c184:	682b      	ldr	r3, [r5, #0]
 801c186:	b103      	cbz	r3, 801c18a <_read_r+0x1e>
 801c188:	6023      	str	r3, [r4, #0]
 801c18a:	bd38      	pop	{r3, r4, r5, pc}
 801c18c:	2400724c 	.word	0x2400724c

0801c190 <_init>:
 801c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c192:	bf00      	nop
 801c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c196:	bc08      	pop	{r3}
 801c198:	469e      	mov	lr, r3
 801c19a:	4770      	bx	lr

0801c19c <_fini>:
 801c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c19e:	bf00      	nop
 801c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1a2:	bc08      	pop	{r3}
 801c1a4:	469e      	mov	lr, r3
 801c1a6:	4770      	bx	lr
