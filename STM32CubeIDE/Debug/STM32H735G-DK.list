
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001beb8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038d0  0801c188  0801c188  0002c188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000104e  0801fa58  0801fa58  0002fa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  08020aa8  08020aa8  00030aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000dc  08020ad0  08020ad0  00030ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08020bac  08020bac  000d2d48  2**0
                  CONTENTS
  7 .ARM          00000000  08020bac  08020bac  000d2d48  2**0
                  CONTENTS
  8 .preinit_array 00000000  08020bac  08020bac  000d2d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08020bac  08020bac  00030bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08020bc0  08020bc0  00030bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000124  24000000  08020bc8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000712c  24000124  08020cec  00040124  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  24007250  08020cec  00047250  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000d2d48  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00082d48  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d5091  00000000  00000000  000d2d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000157b1  00000000  00000000  001a7e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ea0  00000000  00000000  001bd5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00005250  00000000  00000000  001c0458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00043761  00000000  00000000  001c56a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005392d  00000000  00000000  00208e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0017f013  00000000  00000000  0025c736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  003db749  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008b54  00000000  00000000  003db81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0002fdc8  00000000  00000000  003e4370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000124 	.word	0x24000124
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c170 	.word	0x0801c170

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000128 	.word	0x24000128
 800030c:	0801c170 	.word	0x0801c170

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	; (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f00a b940 	b.w	800a9b0 <vTaskSetApplicationTaskTag>
 8000730:	08001d49 	.word	0x08001d49

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000736:	2064      	movs	r0, #100	; 0x64
 8000738:	f008 fceb 	bl	8009112 <osDelay>
  for(;;)
 800073c:	e7fb      	b.n	8000736 <StartDefaultTask+0x2>
	...

08000740 <SystemClock_Config>:
{
 8000740:	b510      	push	{r4, lr}
 8000742:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	224c      	movs	r2, #76	; 0x4c
 8000746:	2100      	movs	r1, #0
 8000748:	a809      	add	r0, sp, #36	; 0x24
 800074a:	f01a fd23 	bl	801b194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	a801      	add	r0, sp, #4
 8000754:	f01a fd1e 	bl	801b194 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000758:	2004      	movs	r0, #4
 800075a:	f006 fd0d 	bl	8007178 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <SystemClock_Config+0x9c>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800076a:	619a      	str	r2, [r3, #24]
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000772:	9200      	str	r2, [sp, #0]
 8000774:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000776:	699a      	ldr	r2, [r3, #24]
 8000778:	0491      	lsls	r1, r2, #18
 800077a:	d5fc      	bpl.n	8000776 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000780:	2130      	movs	r1, #48	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000784:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000786:	f023 0303 	bic.w	r3, r3, #3
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000796:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007a2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a8:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007aa:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ae:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f006 fd1f 	bl	80071f4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2103      	movs	r1, #3
 80007b8:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ba:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007bc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ce:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d4:	f007 f80c 	bl	80077f0 <HAL_RCC_ClockConfig>
}
 80007d8:	b01c      	add	sp, #112	; 0x70
 80007da:	bd10      	pop	{r4, pc}
 80007dc:	58024800 	.word	0x58024800
 80007e0:	58024400 	.word	0x58024400

080007e4 <PeriphCommonClock_Config>:
{
 80007e4:	b500      	push	{lr}
 80007e6:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e8:	2290      	movs	r2, #144	; 0x90
 80007ea:	2100      	movs	r1, #0
 80007ec:	a80a      	add	r0, sp, #40	; 0x28
 80007ee:	f01a fcd1 	bl	801b194 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007f6:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007f8:	2150      	movs	r1, #80	; 0x50
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007fa:	2080      	movs	r0, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000806:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800080a:	2300      	movs	r3, #0
 800080c:	e9cd 0307 	strd	r0, r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000810:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000812:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000814:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000816:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000818:	f007 fa70 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
}
 800081c:	b02f      	add	sp, #188	; 0xbc
 800081e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000824 <main>:
{
 8000824:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000828:	b0a3      	sub	sp, #140	; 0x8c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800082a:	2210      	movs	r2, #16
 800082c:	2100      	movs	r1, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800082e:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000830:	a815      	add	r0, sp, #84	; 0x54
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000832:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000834:	f01a fcae 	bl	801b194 <memset>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000838:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 800083a:	f004 fdd5 	bl	80053e8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800083e:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
 8000842:	4bd8      	ldr	r3, [pc, #864]	; (8000ba4 <main+0x380>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000846:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800084a:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800084c:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000850:	4bd5      	ldr	r3, [pc, #852]	; (8000ba8 <main+0x384>)
 8000852:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000854:	f004 fdea 	bl	800542c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000858:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800085c:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800085e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000862:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000864:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000868:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800086c:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000870:	f004 fddc 	bl	800542c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000874:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000876:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000878:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800087c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000880:	2316      	movs	r3, #22
 8000882:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000886:	f240 1301 	movw	r3, #257	; 0x101
 800088a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800088e:	f004 fdcd 	bl	800542c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000892:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000896:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000898:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x90000000;
 800089c:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800089e:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80008a2:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80008a4:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80008a8:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008ac:	f004 fdbe 	bl	800542c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80008b0:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008b2:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80008b4:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80008b8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008bc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80008c0:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008c4:	f004 fdb2 	bl	800542c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008c8:	4620      	mov	r0, r4
 80008ca:	f004 fd9d 	bl	8005408 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ce:	4bb7      	ldr	r3, [pc, #732]	; (8000bac <main+0x388>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80008d6:	d111      	bne.n	80008fc <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008dc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008e0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008f2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008fc:	4aab      	ldr	r2, [pc, #684]	; (8000bac <main+0x388>)
 80008fe:	6953      	ldr	r3, [r2, #20]
 8000900:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000904:	d123      	bne.n	800094e <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000906:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800090a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800090e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000912:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000916:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800091a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800091e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000920:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000924:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000926:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800092a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800092c:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000930:	d2f9      	bcs.n	8000926 <main+0x102>
    } while(sets-- != 0U);
 8000932:	3b20      	subs	r3, #32
 8000934:	f113 0f20 	cmn.w	r3, #32
 8000938:	d1f2      	bne.n	8000920 <main+0xfc>
 800093a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800093e:	6953      	ldr	r3, [r2, #20]
 8000940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800094a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800094e:	f004 fca7 	bl	80052a0 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2400      	movs	r4, #0
  SystemClock_Config();
 8000954:	f7ff fef4 	bl	8000740 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 800095a:	f7ff ff43 	bl	80007e4 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	2214      	movs	r2, #20
 8000960:	2100      	movs	r1, #0
 8000962:	a815      	add	r0, sp, #84	; 0x54
 8000964:	f01a fc16 	bl	801b194 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b91      	ldr	r3, [pc, #580]	; (8000bb0 <main+0x38c>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800096a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096e:	4891      	ldr	r0, [pc, #580]	; (8000bb4 <main+0x390>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000974:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000978:	f04f 080c 	mov.w	r8, #12
  hltdc.Instance = LTDC;
 800097c:	4d8e      	ldr	r5, [pc, #568]	; (8000bb8 <main+0x394>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	f042 0202 	orr.w	r2, r2, #2
  pLayerCfg.FBStartAdress = 0x70000000;
 8000982:	f04f 0905 	mov.w	r9, #5
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000986:	f04f 0b18 	mov.w	fp, #24
  hospi1.Init.FifoThreshold = 4;
 800098a:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000992:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000996:	f002 0202 	and.w	r2, r2, #2
 800099a:	9200      	str	r2, [sp, #0]
 800099c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009ae:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80009b2:	9201      	str	r2, [sp, #4]
 80009b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009ba:	f042 0208 	orr.w	r2, r2, #8
 80009be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009c6:	f002 0208 	and.w	r2, r2, #8
 80009ca:	9202      	str	r2, [sp, #8]
 80009cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009d2:	f042 0210 	orr.w	r2, r2, #16
 80009d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009de:	f002 0210 	and.w	r2, r2, #16
 80009e2:	9203      	str	r2, [sp, #12]
 80009e4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009f6:	f002 0201 	and.w	r2, r2, #1
 80009fa:	9204      	str	r2, [sp, #16]
 80009fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a0e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000a12:	9205      	str	r2, [sp, #20]
 8000a14:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a1a:	f042 0204 	orr.w	r2, r2, #4
 8000a1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a26:	f002 0204 	and.w	r2, r2, #4
 8000a2a:	9206      	str	r2, [sp, #24]
 8000a2c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a32:	f042 0220 	orr.w	r2, r2, #32
 8000a36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0320 	and.w	r3, r3, #32
 8000a44:	9307      	str	r3, [sp, #28]
 8000a46:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a48:	f004 ffc8 	bl	80059dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a52:	485a      	ldr	r0, [pc, #360]	; (8000bbc <main+0x398>)
 8000a54:	f004 ffc2 	bl	80059dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	210c      	movs	r1, #12
 8000a5c:	4858      	ldr	r0, [pc, #352]	; (8000bc0 <main+0x39c>)
 8000a5e:	f004 ffbd 	bl	80059dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a66:	a915      	add	r1, sp, #84	; 0x54
 8000a68:	4852      	ldr	r0, [pc, #328]	; (8000bb4 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	e9cd 3615 	strd	r3, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f004 fe27 	bl	80056c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000a76:	a915      	add	r1, sp, #84	; 0x54
 8000a78:	4850      	ldr	r0, [pc, #320]	; (8000bbc <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f004 fe1f 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	a915      	add	r1, sp, #84	; 0x54
 8000a8a:	484d      	ldr	r0, [pc, #308]	; (8000bc0 <main+0x39c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	e9cd 8615 	strd	r8, r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a94:	f004 fe16 	bl	80056c4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000a98:	484a      	ldr	r0, [pc, #296]	; (8000bc4 <main+0x3a0>)
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <main+0x3a4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a9c:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000a9e:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000aa0:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000aa2:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000aa6:	f004 fce9 	bl	800547c <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000aaa:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <main+0x3a8>)
  hdma2d.Instance = DMA2D;
 8000aac:	4848      	ldr	r0, [pc, #288]	; (8000bd0 <main+0x3ac>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000aae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hdma2d.Init.OutputOffset = 0;
 8000ab2:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ab6:	e9c0 3200 	strd	r3, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000aba:	f004 fd3a 	bl	8005532 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000abe:	2234      	movs	r2, #52	; 0x34
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	a815      	add	r0, sp, #84	; 0x54
 8000ac4:	f01a fb66 	bl	801b194 <memset>
  hltdc.Instance = LTDC;
 8000ac8:	4a42      	ldr	r2, [pc, #264]	; (8000bd4 <main+0x3b0>)
  hltdc.Init.VerticalSync = 9;
 8000aca:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000acc:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000ace:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8000ad2:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8000ad6:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ad8:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000ada:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ade:	e9c5 2400 	strd	r2, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000ae2:	2209      	movs	r2, #9
 8000ae4:	e9c5 1205 	strd	r1, r2, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000ae8:	220b      	movs	r2, #11
 8000aea:	e9c5 0207 	strd	r0, r2, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000aee:	f240 121b 	movw	r2, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000af2:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000af4:	e9c5 c209 	strd	ip, r2, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8000af8:	f240 121d 	movw	r2, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000afc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000b00:	e9c5 e20b 	strd	lr, r2, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b04:	f005 fbbe 	bl	8006284 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000b08:	20ff      	movs	r0, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 8000b0a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8000b0e:	f44f 7288 	mov.w	r2, #272	; 0x110
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b12:	971c      	str	r7, [sp, #112]	; 0x70
  hospi1.Init.ChipSelectHighTime = 2;
 8000b14:	2702      	movs	r7, #2
  pLayerCfg.WindowX0 = 0;
 8000b16:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.Backcolor.Blue = 0;
 8000b18:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Red = 0;
 8000b1c:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  pLayerCfg.Alpha0 = 0;
 8000b20:	e9cd 041a 	strd	r0, r4, [sp, #104]	; 0x68
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b24:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 8000b28:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b2c:	e9cd 901d 	strd	r9, r0, [sp, #116]	; 0x74
  pLayerCfg.WindowY0 = 0;
 8000b30:	e9cd 1416 	strd	r1, r4, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b34:	4628      	mov	r0, r5
 8000b36:	a915      	add	r1, sp, #84	; 0x54
  hospi1.Instance = OCTOSPI1;
 8000b38:	4d27      	ldr	r5, [pc, #156]	; (8000bd8 <main+0x3b4>)
  hospi1.Init.DeviceSize = 32;
 8000b3a:	f04f 0920 	mov.w	r9, #32
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b3e:	e9cd 2618 	strd	r2, r6, [sp, #96]	; 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b42:	4622      	mov	r2, r4
 8000b44:	f005 fc69 	bl	800641a <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b48:	465a      	mov	r2, fp
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	a815      	add	r0, sp, #84	; 0x54
 8000b4e:	f01a fb21 	bl	801b194 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <main+0x3b8>)
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b54:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b56:	60ac      	str	r4, [r5, #8]
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000b58:	636c      	str	r4, [r5, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000b5a:	642c      	str	r4, [r5, #64]	; 0x40
  hospi1.Init.FifoThreshold = 4;
 8000b5c:	e9c5 2a00 	strd	r2, sl, [r5]
  hospi1.Init.DeviceSize = 32;
 8000b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b64:	e9c5 2903 	strd	r2, r9, [r5, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000b68:	2208      	movs	r2, #8
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b6a:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000b6e:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.MaxTran = 0;
 8000b72:	e9c5 240e 	strd	r2, r4, [r5, #56]	; 0x38
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000b76:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.ChipSelectBoundary = 0;
 8000b7a:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b7e:	f005 fdcf 	bl	8006720 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000b82:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b86:	a915      	add	r1, sp, #84	; 0x54
 8000b88:	4628      	mov	r0, r5
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000b8a:	9218      	str	r2, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000b8c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
  sOspiManagerCfg.NCSPort = 1;
 8000b90:	9617      	str	r6, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000b92:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b94:	f241 3288 	movw	r2, #5000	; 0x1388
  sOspiManagerCfg.DQSPort = 1;
 8000b98:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b9c:	f006 f84a 	bl	8006c34 <HAL_OSPIM_Config>
 8000ba0:	e01e      	b.n	8000be0 <main+0x3bc>
 8000ba2:	bf00      	nop
 8000ba4:	03000012 	.word	0x03000012
 8000ba8:	01010001 	.word	0x01010001
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	58021800 	.word	0x58021800
 8000bb8:	24006f58 	.word	0x24006f58
 8000bbc:	58020c00 	.word	0x58020c00
 8000bc0:	58020800 	.word	0x58020800
 8000bc4:	24006ee8 	.word	0x24006ee8
 8000bc8:	58024c00 	.word	0x58024c00
 8000bcc:	52001000 	.word	0x52001000
 8000bd0:	24007050 	.word	0x24007050
 8000bd4:	50001000 	.word	0x50001000
 8000bd8:	24006e88 	.word	0x24006e88
 8000bdc:	52005000 	.word	0x52005000
  HAL_OSPI_DeInit(&hospi1);
 8000be0:	4628      	mov	r0, r5
 8000be2:	f005 fe13 	bl	800680c <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000be6:	f240 1201 	movw	r2, #257	; 0x101
  BSP_OSPI_NOR_DeInit(0);
 8000bea:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000bec:	4d96      	ldr	r5, [pc, #600]	; (8000e48 <main+0x624>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000bee:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000bf2:	f003 ffb3 	bl	8004b5c <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000bf6:	a90e      	add	r1, sp, #56	; 0x38
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f004 f89f 	bl	8004d3c <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f003 ff74 	bl	8004aec <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c04:	465a      	mov	r2, fp
 8000c06:	4621      	mov	r1, r4
 8000c08:	a815      	add	r0, sp, #84	; 0x54
 8000c0a:	f01a fac3 	bl	801b194 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000c0e:	2210      	movs	r2, #16
 8000c10:	4621      	mov	r1, r4
 8000c12:	a80a      	add	r0, sp, #40	; 0x28
 8000c14:	f01a fabe 	bl	801b194 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000c18:	4621      	mov	r1, r4
 8000c1a:	2214      	movs	r2, #20
 8000c1c:	a80e      	add	r0, sp, #56	; 0x38
 8000c1e:	f01a fab9 	bl	801b194 <memset>
  hospi2.Instance = OCTOSPI2;
 8000c22:	4a8a      	ldr	r2, [pc, #552]	; (8000e4c <main+0x628>)
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c24:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c26:	60ac      	str	r4, [r5, #8]
  hospi2.Init.MaxTran = 0;
 8000c28:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi2.Init.FifoThreshold = 4;
 8000c2a:	e9c5 2a00 	strd	r2, sl, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000c2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c32:	e9c5 a405 	strd	sl, r4, [r5, #20]
  hospi2.Init.DeviceSize = 24;
 8000c36:	e9c5 2b03 	strd	r2, fp, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000c3a:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8000c3e:	2217      	movs	r2, #23
  sHyperBusCfg.AccessTime = 6;
 8000c40:	f04f 0b03 	mov.w	fp, #3
  hospi2.Init.ChipSelectBoundary = 23;
 8000c44:	e9c5 a20b 	strd	sl, r2, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 8000c48:	f44f 72c8 	mov.w	r2, #400	; 0x190
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c4c:	f04f 0a80 	mov.w	sl, #128	; 0x80
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c50:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.Refresh = 400;
 8000c54:	642a      	str	r2, [r5, #64]	; 0x40
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c56:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000c5a:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000c5e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c62:	f005 fd5d 	bl	8006720 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c66:	4a7a      	ldr	r2, [pc, #488]	; (8000e50 <main+0x62c>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c68:	a915      	add	r1, sp, #84	; 0x54
 8000c6a:	4628      	mov	r0, r5
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c6c:	9218      	str	r2, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
  sOspiManagerCfg.NCSPort = 2;
 8000c72:	9717      	str	r7, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c74:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c76:	f241 3288 	movw	r2, #5000	; 0x1388
  sOspiManagerCfg.DQSPort = 2;
 8000c7a:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c7e:	f005 ffd9 	bl	8006c34 <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000c82:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c88:	a90a      	add	r1, sp, #40	; 0x28
 8000c8a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8c:	2760      	movs	r7, #96	; 0x60
  sHyperBusCfg.AccessTime = 6;
 8000c8e:	e9cd b30a 	strd	fp, r3, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000c92:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c96:	f005 fe1b 	bl	80068d0 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000c9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca2:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000ca4:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000ca6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000caa:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000cac:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000cae:	9312      	str	r3, [sp, #72]	; 0x48
  htim1.Init.Period = 28800-1;
 8000cb0:	f247 0b7f 	movw	fp, #28799	; 0x707f
  sCommand.Address      = 0;
 8000cb4:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000cb6:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cb8:	f005 fe30 	bl	800691c <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000cbc:	eb0d 0109 	add.w	r1, sp, r9
 8000cc0:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000cc2:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000cc4:	f005 ff42 	bl	8006b4c <HAL_OSPI_MemoryMapped>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc8:	221c      	movs	r2, #28
 8000cca:	4621      	mov	r1, r4
 8000ccc:	a80e      	add	r0, sp, #56	; 0x38
  htim1.Instance = TIM1;
 8000cce:	4d61      	ldr	r5, [pc, #388]	; (8000e54 <main+0x630>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	940c      	str	r4, [sp, #48]	; 0x30
 8000cd2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	f01a fa5d 	bl	801b194 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cda:	2234      	movs	r2, #52	; 0x34
 8000cdc:	4621      	mov	r1, r4
 8000cde:	a815      	add	r0, sp, #84	; 0x54
 8000ce0:	f01a fa58 	bl	801b194 <memset>
  htim1.Instance = TIM1;
 8000ce4:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <main+0x634>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ce6:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ce8:	f8c5 9008 	str.w	r9, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8000cec:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cee:	f8c5 a018 	str.w	sl, [r5, #24]
  htim1.Init.Prescaler = 0;
 8000cf2:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf6:	e9c5 b403 	strd	fp, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cfa:	f007 ff3b 	bl	8008b74 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cfe:	a90a      	add	r1, sp, #40	; 0x28
 8000d00:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	940c      	str	r4, [sp, #48]	; 0x30
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d04:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d08:	f008 f8d2 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d0c:	4642      	mov	r2, r8
 8000d0e:	a90e      	add	r1, sp, #56	; 0x38
 8000d10:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d12:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d14:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.Pulse = 1;
 8000d16:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d1a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d1e:	f007 ff9f 	bl	8008c60 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d26:	a915      	add	r1, sp, #84	; 0x54
 8000d28:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d2a:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d2c:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d2e:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d30:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d38:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d3c:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d40:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d44:	f008 f906 	bl	8008f54 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d48:	4641      	mov	r1, r8
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f008 f8ae 	bl	8008eac <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim1);
 8000d50:	4628      	mov	r0, r5
 8000d52:	f000 fcab 	bl	80016ac <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000d56:	4d41      	ldr	r5, [pc, #260]	; (8000e5c <main+0x638>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d58:	221c      	movs	r2, #28
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5e:	9410      	str	r4, [sp, #64]	; 0x40
 8000d60:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d64:	f01a fa16 	bl	801b194 <memset>
  htim4.Instance = TIM4;
 8000d68:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <main+0x63c>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d6a:	4628      	mov	r0, r5
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6e:	f8c5 a018 	str.w	sl, [r5, #24]
  htim4.Init.Prescaler = 0;
 8000d72:	e9c5 3400 	strd	r3, r4, [r5]
  htim4.Init.Period = 28800-1;
 8000d76:	e9c5 9b02 	strd	r9, fp, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d7a:	f007 fefb 	bl	8008b74 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d7e:	a90e      	add	r1, sp, #56	; 0x38
 8000d80:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d86:	f008 f893 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	a915      	add	r1, sp, #84	; 0x54
 8000d8e:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8000d94:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d98:	f007 ff62 	bl	8008c60 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f008 f884 	bl	8008eac <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim4);
 8000da4:	4628      	mov	r0, r5
 8000da6:	f000 fc81 	bl	80016ac <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000daa:	4d2e      	ldr	r5, [pc, #184]	; (8000e64 <main+0x640>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dac:	221c      	movs	r2, #28
 8000dae:	4621      	mov	r1, r4
 8000db0:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	9410      	str	r4, [sp, #64]	; 0x40
 8000db4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db8:	f01a f9ec 	bl	801b194 <memset>
  htim5.Instance = TIM5;
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <main+0x644>)
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dbe:	4628      	mov	r0, r5
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dc2:	f8c5 a018 	str.w	sl, [r5, #24]
  htim5.Init.Prescaler = 0;
 8000dc6:	e9c5 3400 	strd	r3, r4, [r5]
  htim5.Init.Period = 28800-1;
 8000dca:	e9c5 9b02 	strd	r9, fp, [r5, #8]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dce:	f007 fed1 	bl	8008b74 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dd2:	a90e      	add	r1, sp, #56	; 0x38
 8000dd4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dda:	f008 f869 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dde:	4622      	mov	r2, r4
 8000de0:	a915      	add	r1, sp, #84	; 0x54
 8000de2:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de4:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de6:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8000de8:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dec:	f007 ff38 	bl	8008c60 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000df0:	4621      	mov	r1, r4
 8000df2:	4628      	mov	r0, r5
 8000df4:	f008 f85a 	bl	8008eac <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim5);
 8000df8:	4628      	mov	r0, r5
 8000dfa:	f000 fc57 	bl	80016ac <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8000dfe:	4d1b      	ldr	r5, [pc, #108]	; (8000e6c <main+0x648>)
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <main+0x64c>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e02:	4628      	mov	r0, r5
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	60ac      	str	r4, [r5, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	61ac      	str	r4, [r5, #24]
  htim14.Init.Prescaler = 0;
 8000e08:	e9c5 3400 	strd	r3, r4, [r5]
  htim14.Init.Period = 57600-1;
 8000e0c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e14:	f007 fe7e 	bl	8008b14 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim14);
 8000e18:	4628      	mov	r0, r5
 8000e1a:	f007 fd13 	bl	8008844 <HAL_TIM_Base_Start_IT>
  MX_TouchGFX_Init();
 8000e1e:	f000 fd9c 	bl	800195a <MX_TouchGFX_Init>
  osKernelInitialize();
 8000e22:	f008 f901 	bl	8009028 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <main+0x650>)
 8000e28:	4621      	mov	r1, r4
 8000e2a:	4813      	ldr	r0, [pc, #76]	; (8000e78 <main+0x654>)
 8000e2c:	f008 f928 	bl	8009080 <osThreadNew>
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <main+0x658>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <main+0x65c>)
 8000e34:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e36:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <main+0x660>)
 8000e3a:	f008 f921 	bl	8009080 <osThreadNew>
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <main+0x664>)
 8000e40:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000e42:	f008 f903 	bl	800904c <osKernelStart>
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <main+0x622>
 8000e48:	24007104 	.word	0x24007104
 8000e4c:	5200a000 	.word	0x5200a000
 8000e50:	00010002 	.word	0x00010002
 8000e54:	24007004 	.word	0x24007004
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	24006e3c 	.word	0x24006e3c
 8000e60:	40000800 	.word	0x40000800
 8000e64:	24006f0c 	.word	0x24006f0c
 8000e68:	40000c00 	.word	0x40000c00
 8000e6c:	240070b8 	.word	0x240070b8
 8000e70:	40002000 	.word	0x40002000
 8000e74:	0801c208 	.word	0x0801c208
 8000e78:	08000735 	.word	0x08000735
 8000e7c:	24006e38 	.word	0x24006e38
 8000e80:	0801c1e4 	.word	0x0801c1e4
 8000e84:	0800195f 	.word	0x0800195f
 8000e88:	24007000 	.word	0x24007000

08000e8c <adjustMIAndFreq>:
	modulationIndex = foo_MI;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <adjustMIAndFreq+0x20>)
	counter = 0;
 8000e8e:	2200      	movs	r2, #0
	modulationIndex = foo_MI;
 8000e90:	ed83 0a00 	vstr	s0, [r3]
	frq = foo_freq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <adjustMIAndFreq+0x24>)
 8000e96:	6018      	str	r0, [r3, #0]
	upperLimit = (5000/foo_freq);
 8000e98:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e9c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <adjustMIAndFreq+0x28>)
 8000ea2:	6018      	str	r0, [r3, #0]
	counter = 0;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <adjustMIAndFreq+0x2c>)
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	24000008 	.word	0x24000008
 8000eb0:	24000004 	.word	0x24000004
 8000eb4:	24000014 	.word	0x24000014
 8000eb8:	24000140 	.word	0x24000140

08000ebc <HAL_TIM_PeriodElapsedCallback>:
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM14)
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	4a40      	ldr	r2, [pc, #256]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ec0:	4293      	cmp	r3, r2
{
 8000ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec6:	ed2d 8b04 	vpush	{d8-d9}
	if (htim->Instance == TIM14)
 8000eca:	d170      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		float theta = (frq * TWO_PI * counter) * time;
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ece:	4d3e      	ldr	r5, [pc, #248]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ed0:	edd3 9a00 	vldr	s19, [r3]
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;

		if(modulationIndex != 0)
 8000ed4:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ed6:	eef5 9a40 	vcmp.f32	s19, #0.0
 8000eda:	f8d3 8000 	ldr.w	r8, [r3]
 8000ede:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee4:	681f      	ldr	r7, [r3, #0]
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ee8:	681e      	ldr	r6, [r3, #0]
 8000eea:	d057      	beq.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0xe0>
		float theta = (frq * TWO_PI * counter) * time;
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8000eee:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
		float theta = (frq * TWO_PI * counter) * time;
 8000ef2:	682c      	ldr	r4, [r5, #0]
 8000ef4:	ed93 8a00 	vldr	s16, [r3]
 8000ef8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8000fdc <HAL_TIM_PeriodElapsedCallback+0x120>
 8000efc:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f02:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000f06:	ee07 4a90 	vmov	s15, r4
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize)); // TODO: MODULATION INDEX 0 OLUNCA DC 50 OLUYOR DIKKAT!!S
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));

			counter++;
 8000f0a:	3401      	adds	r4, #1
		float theta = (frq * TWO_PI * counter) * time;
 8000f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f10:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000f14:	edd3 7a00 	vldr	s15, [r3]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize)); // TODO: MODULATION INDEX 0 OLUNCA DC 50 OLUYOR DIKKAT!!S
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x128>)
		float theta = (frq * TWO_PI * counter) * time;
 8000f1a:	ee28 8a27 	vmul.f32	s16, s16, s15
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize)); // TODO: MODULATION INDEX 0 OLUNCA DC 50 OLUYOR DIKKAT!!S
 8000f1e:	edd3 8a00 	vldr	s17, [r3]
 8000f22:	eef8 8a68 	vcvt.f32.u32	s17, s17
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8000f26:	eeb0 0a48 	vmov.f32	s0, s16
 8000f2a:	f019 ffe5 	bl	801aef8 <sinf>
 8000f2e:	eef0 7a49 	vmov.f32	s15, s18
 8000f32:	ee20 0a29 	vmul.f32	s0, s0, s19
 8000f36:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f3a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8000fe8 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8000f3e:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize)); // TODO: MODULATION INDEX 0 OLUNCA DC 50 OLUYOR DIKKAT!!S
 8000f42:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f4a:	edc8 7a10 	vstr	s15, [r8, #64]	; 0x40
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f4e:	f019 ffd3 	bl	801aef8 <sinf>
 8000f52:	eef0 7a49 	vmov.f32	s15, s18
 8000f56:	ee29 0a80 	vmul.f32	s0, s19, s0
 8000f5a:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f5e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8000fec <HAL_TIM_PeriodElapsedCallback+0x130>
 8000f62:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
 8000f66:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f6e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f72:	f019 ffc1 	bl	801aef8 <sinf>
 8000f76:	ee29 0a80 	vmul.f32	s0, s19, s0

		counter = 0;

		}

		if(counter > upperLimit)
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x134>)
			counter++;
 8000f7c:	602c      	str	r4, [r5, #0]
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8000f7e:	eea0 9a09 	vfma.f32	s18, s0, s18
		if(counter > upperLimit)
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	4294      	cmp	r4, r2
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));
 8000f86:	ee28 9a89 	vmul.f32	s18, s17, s18
 8000f8a:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 8000f8e:	ed86 9a0d 	vstr	s18, [r6, #52]	; 0x34
		if(counter > upperLimit)
 8000f92:	d80a      	bhi.n	8000faa <HAL_TIM_PeriodElapsedCallback+0xee>
		HAL_IncTick();
	}
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f94:	ecbd 8b04 	vpop	{d8-d9}
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0); // TODO: MODULATION INDEX 0 OLUNCA DC 50 OLUYOR DIKKAT!!S
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8000fa4:	6373      	str	r3, [r6, #52]	; 0x34
			counter = 0;
 8000fa6:	602b      	str	r3, [r5, #0]
 8000fa8:	e7f4      	b.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8000faa:	2300      	movs	r3, #0
 8000fac:	e7fb      	b.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0xea>
	if (htim->Instance == TIM6)
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d1ef      	bne.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0xd8>
}
 8000fb4:	ecbd 8b04 	vpop	{d8-d9}
 8000fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_IncTick();
 8000fbc:	f004 b99e 	b.w	80052fc <HAL_IncTick>
 8000fc0:	40002000 	.word	0x40002000
 8000fc4:	24000008 	.word	0x24000008
 8000fc8:	24000140 	.word	0x24000140
 8000fcc:	24007004 	.word	0x24007004
 8000fd0:	24006e3c 	.word	0x24006e3c
 8000fd4:	24006f0c 	.word	0x24006f0c
 8000fd8:	24000004 	.word	0x24000004
 8000fdc:	40c90fdb 	.word	0x40c90fdb
 8000fe0:	24000010 	.word	0x24000010
 8000fe4:	2400000c 	.word	0x2400000c
 8000fe8:	40060a92 	.word	0x40060a92
 8000fec:	40860a92 	.word	0x40860a92
 8000ff0:	24000014 	.word	0x24000014
 8000ff4:	40001000 	.word	0x40001000

08000ff8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_MspInit+0x2c>)
{
 8000ffe:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001000:	210f      	movs	r1, #15
 8001002:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800100a:	f042 0202 	orr.w	r2, r2, #2
 800100e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001012:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001022:	f004 b9a1 	b.w	8005368 <HAL_NVIC_SetPriority>
 8001026:	bf00      	nop
 8001028:	58024400 	.word	0x58024400

0800102c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800102c:	6802      	ldr	r2, [r0, #0]
{
 800102e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_CRC_MspInit+0x2c>)
 8001032:	429a      	cmp	r2, r3
 8001034:	d10d      	bne.n	8001052 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001036:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800103a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800103e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001042:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001052:	b002      	add	sp, #8
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	58024c00 	.word	0x58024c00

0800105c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_DMA2D_MspInit+0x40>)
{
 800105e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001060:	6802      	ldr	r2, [r0, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d117      	bne.n	8001096 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001068:	2105      	movs	r1, #5
 800106a:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800106c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001070:	f042 0210 	orr.w	r2, r2, #16
 8001074:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001078:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800107a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001086:	f004 f96f 	bl	8005368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800108a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800108c:	b003      	add	sp, #12
 800108e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001092:	f004 b99b 	b.w	80053cc <HAL_NVIC_EnableIRQ>
}
 8001096:	b003      	add	sp, #12
 8001098:	f85d fb04 	ldr.w	pc, [sp], #4
 800109c:	52001000 	.word	0x52001000
 80010a0:	58024400 	.word	0x58024400

080010a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a8:	b0ba      	sub	sp, #232	; 0xe8
 80010aa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	2214      	movs	r2, #20
 80010ae:	2100      	movs	r1, #0
 80010b0:	a808      	add	r0, sp, #32
 80010b2:	f01a f86f 	bl	801b194 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b6:	22b4      	movs	r2, #180	; 0xb4
 80010b8:	2100      	movs	r1, #0
 80010ba:	a80d      	add	r0, sp, #52	; 0x34
 80010bc:	f01a f86a 	bl	801b194 <memset>
  if(hltdc->Instance==LTDC)
 80010c0:	6822      	ldr	r2, [r4, #0]
 80010c2:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <HAL_LTDC_MspInit+0x1fc>)
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 80e8 	bne.w	800129a <HAL_LTDC_MspInit+0x1f6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 25;
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80010ce:	2119      	movs	r1, #25
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010d0:	201e      	movs	r0, #30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010d2:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80010d4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80010d8:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010dc:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010de:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010e6:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010ea:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ec:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010ee:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f006 fe03 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80010f8:	f7ff ff7e 	bl	8000ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010fc:	4b69      	ldr	r3, [pc, #420]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001104:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001108:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	a908      	add	r1, sp, #32
 800110c:	4866      	ldr	r0, [pc, #408]	; (80012a8 <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800110e:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001112:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001116:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800111a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800111e:	f002 0208 	and.w	r2, r2, #8
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800112a:	f042 0202 	orr.w	r2, r2, #2
 800112e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001132:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001136:	f002 0202 	and.w	r2, r2, #2
 800113a:	9201      	str	r2, [sp, #4]
 800113c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001142:	f042 0208 	orr.w	r2, r2, #8
 8001146:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800114a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114e:	f002 0208 	and.w	r2, r2, #8
 8001152:	9202      	str	r2, [sp, #8]
 8001154:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800115a:	f042 0210 	orr.w	r2, r2, #16
 800115e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001162:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001166:	f002 0210 	and.w	r2, r2, #16
 800116a:	9203      	str	r2, [sp, #12]
 800116c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800117a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800117e:	f002 0201 	and.w	r2, r2, #1
 8001182:	9204      	str	r2, [sp, #16]
 8001184:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001186:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800118a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800118e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001192:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001196:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800119a:	9205      	str	r2, [sp, #20]
 800119c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011b2:	9206      	str	r2, [sp, #24]
 80011b4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011ba:	f042 0204 	orr.w	r2, r2, #4
 80011be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c6:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	9307      	str	r3, [sp, #28]
 80011ce:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f004 fa72 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 80011e0:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	a908      	add	r1, sp, #32
 80011e4:	4831      	ldr	r0, [pc, #196]	; (80012ac <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e6:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f0:	f004 fa68 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 80011f4:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	a908      	add	r1, sp, #32
 80011fa:	482d      	ldr	r0, [pc, #180]	; (80012b0 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011fc:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001206:	f004 fa5d 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800120a:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	a908      	add	r1, sp, #32
 8001210:	4828      	ldr	r0, [pc, #160]	; (80012b4 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001216:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800121c:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f004 fa51 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8001222:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001226:	a908      	add	r1, sp, #32
 8001228:	4823      	ldr	r0, [pc, #140]	; (80012b8 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800122a:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001234:	f004 fa46 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8001238:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800123c:	a908      	add	r1, sp, #32
 800123e:	481f      	ldr	r0, [pc, #124]	; (80012bc <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001240:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124a:	f004 fa3b 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800124e:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	a908      	add	r1, sp, #32
 8001252:	481b      	ldr	r0, [pc, #108]	; (80012c0 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001254:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f004 fa31 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	a908      	add	r1, sp, #32
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001266:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f004 fa28 	bl	80056c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001274:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001276:	a908      	add	r1, sp, #32
 8001278:	4810      	ldr	r0, [pc, #64]	; (80012bc <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800127e:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001284:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001286:	f004 fa1d 	bl	80056c4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800128a:	4640      	mov	r0, r8
 800128c:	4622      	mov	r2, r4
 800128e:	2105      	movs	r1, #5
 8001290:	f004 f86a 	bl	8005368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001294:	4640      	mov	r0, r8
 8001296:	f004 f899 	bl	80053cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800129a:	b03a      	add	sp, #232	; 0xe8
 800129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a0:	50001000 	.word	0x50001000
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020400 	.word	0x58020400
 80012ac:	58020c00 	.word	0x58020c00
 80012b0:	58021000 	.word	0x58021000
 80012b4:	58020000 	.word	0x58020000
 80012b8:	58021800 	.word	0x58021800
 80012bc:	58021c00 	.word	0x58021c00
 80012c0:	58020800 	.word	0x58020800

080012c4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80012c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012c8:	b091      	sub	sp, #68	; 0x44
 80012ca:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	2214      	movs	r2, #20
 80012ce:	2100      	movs	r1, #0
 80012d0:	a80b      	add	r0, sp, #44	; 0x2c
 80012d2:	f019 ff5f 	bl	801b194 <memset>
  if(hospi->Instance==OCTOSPI1)
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	4a89      	ldr	r2, [pc, #548]	; (8001500 <HAL_OSPI_MspInit+0x23c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	f040 80b1 	bne.w	8001442 <HAL_OSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80012e0:	4a88      	ldr	r2, [pc, #544]	; (8001504 <HAL_OSPI_MspInit+0x240>)
 80012e2:	6813      	ldr	r3, [r2, #0]
 80012e4:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80012e6:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80012e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80012ea:	d10c      	bne.n	8001306 <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80012ec:	4b86      	ldr	r3, [pc, #536]	; (8001508 <HAL_OSPI_MspInit+0x244>)
 80012ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80012f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80012f6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80012fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001306:	4b80      	ldr	r3, [pc, #512]	; (8001508 <HAL_OSPI_MspInit+0x244>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2500      	movs	r5, #0
 800130c:	2403      	movs	r4, #3
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800130e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001312:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001314:	a90b      	add	r1, sp, #44	; 0x2c
 8001316:	487d      	ldr	r0, [pc, #500]	; (800150c <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800131c:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001320:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001324:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001328:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800132c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800133c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001340:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001344:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001348:	9202      	str	r2, [sp, #8]
 800134a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001350:	f042 0208 	orr.w	r2, r2, #8
 8001354:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001358:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800135c:	f002 0208 	and.w	r2, r2, #8
 8001360:	9203      	str	r2, [sp, #12]
 8001362:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001364:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001368:	f042 0210 	orr.w	r2, r2, #16
 800136c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001370:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001374:	f002 0210 	and.w	r2, r2, #16
 8001378:	9204      	str	r2, [sp, #16]
 800137a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001388:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800138c:	f002 0220 	and.w	r2, r2, #32
 8001390:	9205      	str	r2, [sp, #20]
 8001392:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001398:	f042 0202 	orr.w	r2, r2, #2
 800139c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	9306      	str	r3, [sp, #24]
 80013aa:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013b8:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ba:	f004 f983 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 80013be:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	a90b      	add	r1, sp, #44	; 0x2c
 80013c2:	4853      	ldr	r0, [pc, #332]	; (8001510 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013c4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f004 f978 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d4:	a90b      	add	r1, sp, #44	; 0x2c
 80013d6:	484f      	ldr	r0, [pc, #316]	; (8001514 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013d8:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e2:	f004 f96f 	bl	80056c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e6:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e8:	a90b      	add	r1, sp, #44	; 0x2c
 80013ea:	4848      	ldr	r0, [pc, #288]	; (800150c <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013ec:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f8:	f004 f964 	bl	80056c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 80013fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	a90b      	add	r1, sp, #44	; 0x2c
 8001402:	4843      	ldr	r0, [pc, #268]	; (8001510 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001404:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f004 f959 	bl	80056c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001416:	a90b      	add	r1, sp, #44	; 0x2c
 8001418:	483f      	ldr	r0, [pc, #252]	; (8001518 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800141a:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001424:	f004 f94e 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	a90b      	add	r1, sp, #44	; 0x2c
 800142a:	483c      	ldr	r0, [pc, #240]	; (800151c <HAL_OSPI_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800142c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001438:	f004 f944 	bl	80056c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800143c:	b011      	add	sp, #68	; 0x44
 800143e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 8001442:	4a37      	ldr	r2, [pc, #220]	; (8001520 <HAL_OSPI_MspInit+0x25c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d1f9      	bne.n	800143c <HAL_OSPI_MspInit+0x178>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001448:	4a2e      	ldr	r2, [pc, #184]	; (8001504 <HAL_OSPI_MspInit+0x240>)
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800144e:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001450:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001452:	d10c      	bne.n	800146e <HAL_OSPI_MspInit+0x1aa>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_OSPI_MspInit+0x244>)
 8001456:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800145a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800145e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001462:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146a:	9307      	str	r3, [sp, #28]
 800146c:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2500      	movs	r5, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001476:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800147a:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800147c:	a90b      	add	r1, sp, #44	; 0x2c
 800147e:	4823      	ldr	r0, [pc, #140]	; (800150c <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001480:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001484:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001488:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800148c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001490:	9208      	str	r2, [sp, #32]
 8001492:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001494:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800149c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014a4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80014a8:	9209      	str	r2, [sp, #36]	; 0x24
 80014aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80014bc:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	930a      	str	r3, [sp, #40]	; 0x28
 80014c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d2:	f004 f8f7 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80014d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014da:	a90b      	add	r1, sp, #44	; 0x2c
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 80014de:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e8:	f004 f8ec 	bl	80056c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80014ec:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f0:	a90b      	add	r1, sp, #44	; 0x2c
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80014f4:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014fe:	e79b      	b.n	8001438 <HAL_OSPI_MspInit+0x174>
 8001500:	52005000 	.word	0x52005000
 8001504:	24000144 	.word	0x24000144
 8001508:	58024400 	.word	0x58024400
 800150c:	58021800 	.word	0x58021800
 8001510:	58020c00 	.word	0x58020c00
 8001514:	58021000 	.word	0x58021000
 8001518:	58021400 	.word	0x58021400
 800151c:	58020400 	.word	0x58020400
 8001520:	5200a000 	.word	0x5200a000

08001524 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_OSPI_MspDeInit+0xa0>)
{
 8001526:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8001528:	6803      	ldr	r3, [r0, #0]
 800152a:	4293      	cmp	r3, r2
 800152c:	d12a      	bne.n	8001584 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_OSPI_MspDeInit+0xa4>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	3a01      	subs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_OSPI_MspDeInit+0xa8>)
 8001538:	b92a      	cbnz	r2, 8001546 <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800153a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800153e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001542:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001546:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 800154a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800154e:	4820      	ldr	r0, [pc, #128]	; (80015d0 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001550:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001554:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001558:	f004 f99a 	bl	8005890 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 800155c:	f643 01b0 	movw	r1, #14512	; 0x38b0
 8001560:	481c      	ldr	r0, [pc, #112]	; (80015d4 <HAL_OSPI_MspDeInit+0xb0>)
 8001562:	f004 f995 	bl	8005890 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001566:	2104      	movs	r1, #4
 8001568:	481b      	ldr	r0, [pc, #108]	; (80015d8 <HAL_OSPI_MspDeInit+0xb4>)
 800156a:	f004 f991 	bl	8005890 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 800156e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001572:	481a      	ldr	r0, [pc, #104]	; (80015dc <HAL_OSPI_MspDeInit+0xb8>)
 8001574:	f004 f98c 	bl	8005890 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8001578:	2104      	movs	r1, #4
 800157a:	4819      	ldr	r0, [pc, #100]	; (80015e0 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 800157c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001580:	f004 b986 	b.w	8005890 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_OSPI_MspDeInit+0xc0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d11a      	bne.n	80015c0 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_OSPI_MspDeInit+0xa4>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	3a01      	subs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_OSPI_MspDeInit+0xa8>)
 8001594:	b92a      	cbnz	r2, 80015a2 <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001596:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800159a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800159e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 80015a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 80015a6:	f641 4103 	movw	r1, #7171	; 0x1c03
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 80015ac:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80015b0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 80015b4:	f004 f96c 	bl	8005890 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80015b8:	f241 011f 	movw	r1, #4127	; 0x101f
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <HAL_OSPI_MspDeInit+0xb8>)
 80015be:	e7dd      	b.n	800157c <HAL_OSPI_MspDeInit+0x58>
}
 80015c0:	bd08      	pop	{r3, pc}
 80015c2:	bf00      	nop
 80015c4:	52005000 	.word	0x52005000
 80015c8:	24000144 	.word	0x24000144
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58021800 	.word	0x58021800
 80015d4:	58020c00 	.word	0x58020c00
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58021400 	.word	0x58021400
 80015e0:	58020400 	.word	0x58020400
 80015e4:	5200a000 	.word	0x5200a000

080015e8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80015e8:	6803      	ldr	r3, [r0, #0]
{
 80015ea:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_TIM_PWM_MspInit+0x6c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10e      	bne.n	8001610 <HAL_TIM_PWM_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_TIM_PWM_MspInit+0x70>)
 80015f4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800160c:	b004      	add	sp, #16
 800160e:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_TIM_PWM_MspInit+0x74>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10d      	bne.n	8001632 <HAL_TIM_PWM_MspInit+0x4a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_TIM_PWM_MspInit+0x70>)
 8001618:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800161c:	f042 0204 	orr.w	r2, r2, #4
 8001620:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	9b02      	ldr	r3, [sp, #8]
 8001630:	e7ec      	b.n	800160c <HAL_TIM_PWM_MspInit+0x24>
  else if(htim_pwm->Instance==TIM5)
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_TIM_PWM_MspInit+0x78>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d1e9      	bne.n	800160c <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_TIM_PWM_MspInit+0x70>)
 800163a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800163e:	f042 0208 	orr.w	r2, r2, #8
 8001642:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	9b03      	ldr	r3, [sp, #12]
}
 8001652:	e7db      	b.n	800160c <HAL_TIM_PWM_MspInit+0x24>
 8001654:	40010000 	.word	0x40010000
 8001658:	58024400 	.word	0x58024400
 800165c:	40000800 	.word	0x40000800
 8001660:	40000c00 	.word	0x40000c00

08001664 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_TIM_Base_MspInit+0x40>)
{
 8001666:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM14)
 8001668:	6802      	ldr	r2, [r0, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d117      	bne.n	800169e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001670:	2105      	movs	r1, #5
 8001672:	202d      	movs	r0, #45	; 0x2d
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001674:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001680:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800168e:	f003 fe6b 	bl	8005368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001692:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001694:	b003      	add	sp, #12
 8001696:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800169a:	f003 be97 	b.w	80053cc <HAL_NVIC_EnableIRQ>
}
 800169e:	b003      	add	sp, #12
 80016a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a4:	40002000 	.word	0x40002000
 80016a8:	58024400 	.word	0x58024400

080016ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ac:	b510      	push	{r4, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	2214      	movs	r2, #20
 80016b4:	2100      	movs	r1, #0
 80016b6:	a803      	add	r0, sp, #12
 80016b8:	f019 fd6c 	bl	801b194 <memset>
  if(htim->Instance==TIM1)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	4a2b      	ldr	r2, [pc, #172]	; (800176c <HAL_TIM_MspPostInit+0xc0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d11c      	bne.n	80016fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_TIM_MspPostInit+0xc4>)
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ca:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016d0:	f042 0210 	orr.w	r2, r2, #16
 80016d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ec:	4821      	ldr	r0, [pc, #132]	; (8001774 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f003 ffe5 	bl	80056c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80016fa:	b008      	add	sp, #32
 80016fc:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_TIM_MspPostInit+0xcc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d118      	bne.n	8001736 <HAL_TIM_MspPostInit+0x8a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_TIM_MspPostInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170a:	481c      	ldr	r0, [pc, #112]	; (800177c <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001710:	f042 0208 	orr.w	r2, r2, #8
 8001714:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001730:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001732:	a903      	add	r1, sp, #12
 8001734:	e7df      	b.n	80016f6 <HAL_TIM_MspPostInit+0x4a>
  else if(htim->Instance==TIM5)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <HAL_TIM_MspPostInit+0xd4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d1de      	bne.n	80016fa <HAL_TIM_MspPostInit+0x4e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	a903      	add	r1, sp, #12
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001764:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	e9cd 2205 	strd	r2, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	e7c4      	b.n	80016f6 <HAL_TIM_MspPostInit+0x4a>
 800176c:	40010000 	.word	0x40010000
 8001770:	58024400 	.word	0x58024400
 8001774:	58021000 	.word	0x58021000
 8001778:	40000800 	.word	0x40000800
 800177c:	58020c00 	.word	0x58020c00
 8001780:	40000c00 	.word	0x40000c00
 8001784:	58020000 	.word	0x58020000

08001788 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001788:	280f      	cmp	r0, #15
{
 800178a:	b510      	push	{r4, lr}
 800178c:	4604      	mov	r4, r0
 800178e:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001790:	d902      	bls.n	8001798 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001792:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001794:	b00a      	add	sp, #40	; 0x28
 8001796:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001798:	4601      	mov	r1, r0
 800179a:	2200      	movs	r2, #0
 800179c:	2036      	movs	r0, #54	; 0x36
 800179e:	f003 fde3 	bl	8005368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a2:	2036      	movs	r0, #54	; 0x36
 80017a4:	f003 fe12 	bl	80053cc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017aa:	4669      	mov	r1, sp
 80017ac:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80017ae:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_InitTick+0x88>)
 80017b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80017b6:	f042 0210 	orr.w	r2, r2, #16
 80017ba:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80017be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ca:	f006 f97d 	bl	8007ac8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ce:	9b07      	ldr	r3, [sp, #28]
 80017d0:	b9c3      	cbnz	r3, 8001804 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d2:	f006 f955 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80017d6:	4c0f      	ldr	r4, [pc, #60]	; (8001814 <HAL_InitTick+0x8c>)
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_InitTick+0x90>)
 80017da:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017dc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80017e0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_InitTick+0x94>)
 80017e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80017e8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80017ea:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ec:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017ee:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80017f0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017f4:	f007 f98e 	bl	8008b14 <HAL_TIM_Base_Init>
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d1ca      	bne.n	8001792 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f007 f821 	bl	8008844 <HAL_TIM_Base_Start_IT>
 8001802:	e7c7      	b.n	8001794 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001804:	f006 f93c 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
 8001808:	0040      	lsls	r0, r0, #1
 800180a:	e7e4      	b.n	80017d6 <HAL_InitTick+0x4e>
 800180c:	2400005c 	.word	0x2400005c
 8001810:	58024400 	.word	0x58024400
 8001814:	24007164 	.word	0x24007164
 8001818:	40001000 	.word	0x40001000
 800181c:	000f4240 	.word	0x000f4240

08001820 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001820:	4770      	bx	lr

08001822 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler>

08001824 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler>

08001826 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler>

08001828 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <UsageFault_Handler>

0800182a <DebugMon_Handler>:
 800182a:	4770      	bx	lr

0800182c <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800182c:	4801      	ldr	r0, [pc, #4]	; (8001834 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 800182e:	f007 b853 	b.w	80088d8 <HAL_TIM_IRQHandler>
 8001832:	bf00      	nop
 8001834:	240070b8 	.word	0x240070b8

08001838 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001838:	4801      	ldr	r0, [pc, #4]	; (8001840 <TIM6_DAC_IRQHandler+0x8>)
 800183a:	f007 b84d 	b.w	80088d8 <HAL_TIM_IRQHandler>
 800183e:	bf00      	nop
 8001840:	24007164 	.word	0x24007164

08001844 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001844:	4801      	ldr	r0, [pc, #4]	; (800184c <LTDC_IRQHandler+0x8>)
 8001846:	f004 bd8b 	b.w	8006360 <HAL_LTDC_IRQHandler>
 800184a:	bf00      	nop
 800184c:	24006f58 	.word	0x24006f58

08001850 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001850:	4801      	ldr	r0, [pc, #4]	; (8001858 <DMA2D_IRQHandler+0x8>)
 8001852:	f003 bead 	b.w	80055b0 <HAL_DMA2D_IRQHandler>
 8001856:	bf00      	nop
 8001858:	24007050 	.word	0x24007050

0800185c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800185c:	2001      	movs	r0, #1
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001862:	f019 fc3d 	bl	801b0e0 <__errno>
 8001866:	2316      	movs	r3, #22
 8001868:	6003      	str	r3, [r0, #0]
	return -1;
}
 800186a:	f04f 30ff 	mov.w	r0, #4294967295
 800186e:	bd08      	pop	{r3, pc}

08001870 <_exit>:

void _exit (int status)
{
 8001870:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001872:	f019 fc35 	bl	801b0e0 <__errno>
 8001876:	2316      	movs	r3, #22
 8001878:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800187a:	e7fe      	b.n	800187a <_exit+0xa>

0800187c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	460e      	mov	r6, r1
 8001880:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2500      	movs	r5, #0
 8001884:	42a5      	cmp	r5, r4
 8001886:	db01      	blt.n	800188c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001888:	4620      	mov	r0, r4
 800188a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800188c:	f3af 8000 	nop.w
 8001890:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	3501      	adds	r5, #1
 8001894:	e7f6      	b.n	8001884 <_read+0x8>

08001896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001896:	b570      	push	{r4, r5, r6, lr}
 8001898:	460e      	mov	r6, r1
 800189a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2500      	movs	r5, #0
 800189e:	42a5      	cmp	r5, r4
 80018a0:	db01      	blt.n	80018a6 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80018a2:	4620      	mov	r0, r4
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80018a6:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 80018aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	e7f6      	b.n	800189e <_write+0x8>

080018b0 <_close>:

int _close(int file)
{
	return -1;
}
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	4770      	bx	lr

080018b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80018ba:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80018bc:	604b      	str	r3, [r1, #4]
}
 80018be:	4770      	bx	lr

080018c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018c0:	2001      	movs	r0, #1
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018c4:	2000      	movs	r0, #0
 80018c6:	4770      	bx	lr

080018c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <_sbrk+0x30>)
{
 80018ca:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80018cc:	6819      	ldr	r1, [r3, #0]
{
 80018ce:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80018d0:	b909      	cbnz	r1, 80018d6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <_sbrk+0x34>)
 80018d4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	4909      	ldr	r1, [pc, #36]	; (8001900 <_sbrk+0x38>)
 80018da:	4c0a      	ldr	r4, [pc, #40]	; (8001904 <_sbrk+0x3c>)
 80018dc:	4402      	add	r2, r0
 80018de:	1b09      	subs	r1, r1, r4
 80018e0:	428a      	cmp	r2, r1
 80018e2:	d906      	bls.n	80018f2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80018e4:	f019 fbfc 	bl	801b0e0 <__errno>
 80018e8:	230c      	movs	r3, #12
 80018ea:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80018f0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80018f2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80018f4:	e7fc      	b.n	80018f0 <_sbrk+0x28>
 80018f6:	bf00      	nop
 80018f8:	24000148 	.word	0x24000148
 80018fc:	24007250 	.word	0x24007250
 8001900:	24050000 	.word	0x24050000
 8001904:	00001000 	.word	0x00001000

08001908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800190c:	f003 fc72 	bl	80051f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001910:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001912:	e003      	b.n	800191c <LoopCopyDataInit>

08001914 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001916:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001918:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800191a:	3104      	adds	r1, #4

0800191c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001920:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001922:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001924:	d3f6      	bcc.n	8001914 <CopyDataInit>
  ldr  r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001928:	e002      	b.n	8001930 <LoopFillZerobss>

0800192a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800192a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800192c:	f842 3b04 	str.w	r3, [r2], #4

08001930 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001932:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001934:	d3f9      	bcc.n	800192a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001936:	f019 fbeb 	bl	801b110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193a:	f7fe ff73 	bl	8000824 <main>
  bx  lr    
 800193e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001940:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001944:	08020bc8 	.word	0x08020bc8
  ldr  r0, =_sdata
 8001948:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800194c:	24000124 	.word	0x24000124
  ldr  r2, =_sbss
 8001950:	24000124 	.word	0x24000124
  ldr  r3, = _ebss
 8001954:	24007250 	.word	0x24007250

08001958 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC3_IRQHandler>

0800195a <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800195a:	f000 bc8f 	b.w	800227c <touchgfx_init>

0800195e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800195e:	f000 bcfd 	b.w	800235c <touchgfx_taskEntry>

08001962 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001962:	6840      	ldr	r0, [r0, #4]
    }
 8001964:	4770      	bx	lr

08001966 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001966:	6041      	str	r1, [r0, #4]
    }
 8001968:	4770      	bx	lr
	...

0800196c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 800196c:	4a09      	ldr	r2, [pc, #36]	; (8001994 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800196e:	6813      	ldr	r3, [r2, #0]
 8001970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001974:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001976:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 800197c:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 8001980:	3a4c      	subs	r2, #76	; 0x4c
 8001982:	430b      	orrs	r3, r1
 8001984:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001986:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]
}
 8001992:	4770      	bx	lr
 8001994:	e000edfc 	.word	0xe000edfc
 8001998:	c5acce55 	.word	0xc5acce55

0800199c <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80019a2:	fbb1 f0f3 	udiv	r0, r1, r3
 80019a6:	4770      	bx	lr

080019a8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80019a8:	4b01      	ldr	r3, [pc, #4]	; (80019b0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80019aa:	6818      	ldr	r0, [r3, #0]
}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e0001004 	.word	0xe0001004

080019b4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80019b4:	4770      	bx	lr

080019b6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80019b6:	b510      	push	{r4, lr}
 80019b8:	4604      	mov	r4, r0
 80019ba:	210c      	movs	r1, #12
 80019bc:	f019 fa48 	bl	801ae50 <_ZdlPvj>
 80019c0:	4620      	mov	r0, r4
 80019c2:	bd10      	pop	{r4, pc}

080019c4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 80019c4:	6803      	ldr	r3, [r0, #0]
{
 80019c6:	b510      	push	{r4, lr}
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80019cc:	b131      	cbz	r1, 80019dc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80019ce:	4798      	blx	r3
 80019d0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80019d2:	6863      	ldr	r3, [r4, #4]
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	4418      	add	r0, r3
 80019d8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80019da:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80019dc:	4798      	blx	r3
 80019de:	60a0      	str	r0, [r4, #8]
}
 80019e0:	e7fb      	b.n	80019da <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080019e2 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80019e2:	4770      	bx	lr

080019e4 <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80019e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 80019e6:	2308      	movs	r3, #8
 80019e8:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 80019ea:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 80019ec:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <_ZN20STM32TouchController4initEv+0x24>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <_ZN20STM32TouchController4initEv+0x28>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 80019fc:	f003 fb18 	bl	8005030 <BSP_TS_Init>
}
 8001a00:	b005      	add	sp, #20
 8001a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a06:	bf00      	nop
 8001a08:	24006bb6 	.word	0x24006bb6
 8001a0c:	24006bb8 	.word	0x24006bb8

08001a10 <_ZN20STM32TouchControllerD0Ev>:
 8001a10:	b510      	push	{r4, lr}
 8001a12:	4604      	mov	r4, r0
 8001a14:	2104      	movs	r1, #4
 8001a16:	f019 fa1b 	bl	801ae50 <_ZdlPvj>
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	bd10      	pop	{r4, pc}

08001a1e <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a1e:	b530      	push	{r4, r5, lr}
 8001a20:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001a22:	2000      	movs	r0, #0
{
 8001a24:	460d      	mov	r5, r1
 8001a26:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001a28:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001a2a:	9003      	str	r0, [sp, #12]
 8001a2c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001a30:	f003 fb80 	bl	8005134 <BSP_TS_GetState>
 8001a34:	b140      	cbz	r0, 8001a48 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8001a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3a:	f383 8811 	msr	BASEPRI, r3
 8001a3e:	f3bf 8f6f 	isb	sy
 8001a42:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001a46:	e7fe      	b.n	8001a46 <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001a48:	9801      	ldr	r0, [sp, #4]
 8001a4a:	b120      	cbz	r0, 8001a56 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001a4c:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001a4e:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001a50:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 8001a52:	9b03      	ldr	r3, [sp, #12]
 8001a54:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001a56:	b005      	add	sp, #20
 8001a58:	bd30      	pop	{r4, r5, pc}
	...

08001a5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001a5c:	b110      	cbz	r0, 8001a64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8001a5e:	2801      	cmp	r0, #1
 8001a60:	d009      	beq.n	8001a76 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001a62:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001a66:	2108      	movs	r1, #8
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	fab2 f282 	clz	r2, r2
 8001a6e:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8001a72:	f003 bfb3 	b.w	80059dc <HAL_GPIO_WritePin>
 8001a76:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001a78:	2104      	movs	r1, #4
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	fab2 f282 	clz	r2, r2
 8001a80:	0952      	lsrs	r2, r2, #5
 8001a82:	e7f5      	b.n	8001a70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8001a84:	2400014c 	.word	0x2400014c
 8001a88:	58020800 	.word	0x58020800

08001a8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001a8c:	b110      	cbz	r0, 8001a94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 8001a8e:	2801      	cmp	r0, #1
 8001a90:	d009      	beq.n	8001aa6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001a92:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001a96:	2108      	movs	r1, #8
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	3a00      	subs	r2, #0
 8001a9c:	bf18      	it	ne
 8001a9e:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001aa2:	f003 bf9b 	b.w	80059dc <HAL_GPIO_WritePin>
 8001aa6:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	3a00      	subs	r2, #0
 8001aae:	bf18      	it	ne
 8001ab0:	2201      	movne	r2, #1
 8001ab2:	e7f5      	b.n	8001aa0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 8001ab4:	2400014c 	.word	0x2400014c
 8001ab8:	58020800 	.word	0x58020800

08001abc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001abc:	b110      	cbz	r0, 8001ac4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8001abe:	2801      	cmp	r0, #1
 8001ac0:	d004      	beq.n	8001acc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001ac2:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ac4:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ac6:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 8001ac8:	f003 bf8d 	b.w	80059e6 <HAL_GPIO_TogglePin>
 8001acc:	2104      	movs	r1, #4
 8001ace:	e7fa      	b.n	8001ac6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 8001ad0:	58020800 	.word	0x58020800

08001ad4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001ad4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001ad6:	b130      	cbz	r0, 8001ae6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001ad8:	2801      	cmp	r0, #1
 8001ada:	d009      	beq.n	8001af0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 8001adc:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001ade:	1e43      	subs	r3, r0, #1
 8001ae0:	4258      	negs	r0, r3
 8001ae2:	4158      	adcs	r0, r3
 8001ae4:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ae6:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 8001aea:	f003 ff71 	bl	80059d0 <HAL_GPIO_ReadPin>
        break;
 8001aee:	e7f6      	b.n	8001ade <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001af0:	2104      	movs	r1, #4
 8001af2:	e7f9      	b.n	8001ae8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 8001af4:	58020800 	.word	0x58020800

08001af8 <_ZN8touchgfx4GPIO4initEv>:
{
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	4d08      	ldr	r5, [pc, #32]	; (8001b1c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001afc:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001afe:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001b00:	b2e0      	uxtb	r0, r4
 8001b02:	f7ff ffe7 	bl	8001ad4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001b06:	b118      	cbz	r0, 8001b10 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001b0c:	bf18      	it	ne
 8001b0e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001b10:	3401      	adds	r4, #1
 8001b12:	3504      	adds	r5, #4
 8001b14:	2c05      	cmp	r4, #5
 8001b16:	d1f3      	bne.n	8001b00 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2400014c 	.word	0x2400014c

08001b20 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001b20:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001b22:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001b26:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001b2a:	4770      	bx	lr

08001b2c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	4770      	bx	lr

08001b30 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001b30:	2000      	movs	r0, #0
 8001b32:	4770      	bx	lr

08001b34 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001b34:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b36:	b10b      	cbz	r3, 8001b3c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001b38:	4608      	mov	r0, r1
 8001b3a:	4718      	bx	r3
        }
    }
 8001b3c:	4770      	bx	lr

08001b3e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001b3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b42:	4770      	bx	lr

08001b44 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001b44:	6840      	ldr	r0, [r0, #4]
 8001b46:	6803      	ldr	r3, [r0, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4718      	bx	r3

08001b4c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001b4c:	4770      	bx	lr
	...

08001b50 <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001b54:	f000 fcac 	bl	80024b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001b5a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	4620      	mov	r0, r4
 8001b62:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001b68:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 8001b6a:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 8001b6e:	f7ff ffc3 	bl	8001af8 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001b72:	4628      	mov	r0, r5
 8001b74:	f7ff fefa 	bl	800196c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001b78:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b7a:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b7c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001b80:	bd38      	pop	{r3, r4, r5, pc}
 8001b82:	bf00      	nop
 8001b84:	70060000 	.word	0x70060000
 8001b88:	700c0000 	.word	0x700c0000

08001b8c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001b8c:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001b8e:	b931      	cbnz	r1, 8001b9e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001b92:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001b9a:	f019 fa6f 	bl	801b07c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001b9e:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ba2:	3a00      	subs	r2, #0
 8001ba4:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ba6:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ba8:	bf18      	it	ne
 8001baa:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001bac:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001bae:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001bb0:	bf18      	it	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8001bb6:	7013      	strb	r3, [r2, #0]
    }
 8001bb8:	bd08      	pop	{r3, pc}
 8001bba:	bf00      	nop
 8001bbc:	0801c26c 	.word	0x0801c26c
 8001bc0:	0801c2a4 	.word	0x0801c2a4
 8001bc4:	0801c2f2 	.word	0x0801c2f2
 8001bc8:	24006bba 	.word	0x24006bba
 8001bcc:	24006bbb 	.word	0x24006bbb

08001bd0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bd0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	428b      	cmp	r3, r1
 8001bd8:	d803      	bhi.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d905      	bls.n	8001bee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001be4:	219e      	movs	r1, #158	; 0x9e
 8001be6:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bea:	f019 fa47 	bl	801b07c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001bf0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001bf4:	801a      	strh	r2, [r3, #0]
    }
 8001bf6:	bd08      	pop	{r3, pc}
 8001bf8:	24006bb0 	.word	0x24006bb0
 8001bfc:	24006bb2 	.word	0x24006bb2
 8001c00:	0801c337 	.word	0x0801c337
 8001c04:	0801c39a 	.word	0x0801c39a
 8001c08:	0801c2f2 	.word	0x0801c2f2
 8001c0c:	24006bb6 	.word	0x24006bb6
 8001c10:	24006bb8 	.word	0x24006bb8

08001c14 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001c14:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001c16:	6803      	ldr	r3, [r0, #0]
{
 8001c18:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c1c:	4798      	blx	r3
    enableInterrupts();
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	4620      	mov	r0, r4
 8001c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c24:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001c26:	f000 f8e7 	bl	8001df8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c30:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <_ZN11TouchGFXHAL9taskEntryEv+0x44>)
 8001c3a:	f003 fecf 	bl	80059dc <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 8001c46:	f003 fec9 	bl	80059dc <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001c4a:	f000 f8d5 	bl	8001df8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	4620      	mov	r0, r4
 8001c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c54:	4798      	blx	r3
    for (;;)
 8001c56:	e7f8      	b.n	8001c4a <_ZN11TouchGFXHAL9taskEntryEv+0x36>
 8001c58:	58020c00 	.word	0x58020c00
 8001c5c:	58021800 	.word	0x58021800

08001c60 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001c60:	b510      	push	{r4, lr}
 8001c62:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001c64:	f00a fc90 	bl	800c588 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 8001c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001c74:	4718      	bx	r3

08001c76 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c76:	f000 bc0d 	b.w	8002494 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001c7a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001c7a:	f000 bc11 	b.w	80024a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08001c80 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001c80:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001c82:	f000 fc6d 	bl	8002560 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001c96:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c9a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c9e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001ca2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ca4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ca8:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001caa:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cae:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cb0:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001cb4:	d2f9      	bcs.n	8001caa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001cb6:	3b20      	subs	r3, #32
 8001cb8:	f113 0f20 	cmn.w	r3, #32
 8001cbc:	d1f2      	bne.n	8001ca4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001cbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cc2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001ccc:	f000 bbbe 	b.w	800244c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001cd0 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001cd0:	f000 bc68 	b.w	80025a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001cd4 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001cd4:	f000 bc52 	b.w	800257c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001cd8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001cd8:	f000 bbc2 	b.w	8002460 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001cdc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001cdc:	f009 be0c 	b.w	800b8f8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001ce0 <_ZN11TouchGFXHALD0Ev>:
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	2188      	movs	r1, #136	; 0x88
 8001ce6:	f019 f8b3 	bl	801ae50 <_ZdlPvj>
 8001cea:	4620      	mov	r0, r4
 8001cec:	bd10      	pop	{r4, pc}

08001cee <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001cee:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001cf2:	b11b      	cbz	r3, 8001cfc <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001cf4:	6840      	ldr	r0, [r0, #4]
 8001cf6:	6803      	ldr	r3, [r0, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4718      	bx	r3
    }
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4770      	bx	lr

08001d00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d00:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001d06:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d08:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	428c      	cmp	r4, r1
 8001d10:	d009      	beq.n	8001d26 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d12:	b93a      	cbnz	r2, 8001d24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d14:	490a      	ldr	r1, [pc, #40]	; (8001d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d18:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d1a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d1c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d1e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d20:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001d22:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d24:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d0fc      	beq.n	8001d24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d2a:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d2e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d30:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d32:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d34:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d36:	2200      	movs	r2, #0
 8001d38:	e7f3      	b.n	8001d22 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d3a:	bf00      	nop
 8001d3c:	24006bb4 	.word	0x24006bb4
 8001d40:	24006bb2 	.word	0x24006bb2
 8001d44:	24006bb0 	.word	0x24006bb0

08001d48 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001d48:	4601      	mov	r1, r0
 8001d4a:	b508      	push	{r3, lr}
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <IdleTaskHook+0x14>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001d50:	b101      	cbz	r1, 8001d54 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001d52:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001d54:	f00a fc32 	bl	800c5bc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001d58:	2001      	movs	r0, #1
 8001d5a:	bd08      	pop	{r3, pc}
 8001d5c:	24006bbc 	.word	0x24006bbc

08001d60 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d60:	2101      	movs	r1, #1
 8001d62:	2200      	movs	r2, #0
{
 8001d64:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d66:	4608      	mov	r0, r1
 8001d68:	f007 f9df 	bl	800912a <osSemaphoreNew>
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001d6e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001d70:	b928      	cbnz	r0, 8001d7e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001d74:	2128      	movs	r1, #40	; 0x28
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d78:	480a      	ldr	r0, [pc, #40]	; (8001da4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001d7a:	f019 f97f 	bl	801b07c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2104      	movs	r1, #4
 8001d82:	2001      	movs	r0, #1
 8001d84:	f007 fa70 	bl	8009268 <osMessageQueueNew>
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001d8a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d8c:	b918      	cbnz	r0, 8001d96 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001d94:	e7f0      	b.n	8001d78 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001d96:	bd08      	pop	{r3, pc}
 8001d98:	24000160 	.word	0x24000160
 8001d9c:	0801c4b0 	.word	0x0801c4b0
 8001da0:	0801c4f9 	.word	0x0801c4f9
 8001da4:	0801c528 	.word	0x0801c528
 8001da8:	2400015c 	.word	0x2400015c
 8001dac:	0801c57b 	.word	0x0801c57b

08001db0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001db2:	f04f 31ff 	mov.w	r1, #4294967295
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	f007 ba02 	b.w	80091c0 <osSemaphoreAcquire>
 8001dbc:	24000160 	.word	0x24000160

08001dc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001dc0:	4b01      	ldr	r3, [pc, #4]	; (8001dc8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	f007 ba28 	b.w	8009218 <osSemaphoreRelease>
 8001dc8:	24000160 	.word	0x24000160

08001dcc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001dcc:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001dce:	2100      	movs	r1, #0
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f007 b9f5 	b.w	80091c0 <osSemaphoreAcquire>
 8001dd6:	bf00      	nop
 8001dd8:	24000160 	.word	0x24000160

08001ddc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001ddc:	f7ff bff0 	b.w	8001dc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001de0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001de0:	2300      	movs	r3, #0
 8001de2:	4803      	ldr	r0, [pc, #12]	; (8001df0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001de4:	4903      	ldr	r1, [pc, #12]	; (8001df4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001de6:	461a      	mov	r2, r3
 8001de8:	6800      	ldr	r0, [r0, #0]
 8001dea:	f007 ba79 	b.w	80092e0 <osMessageQueuePut>
 8001dee:	bf00      	nop
 8001df0:	2400015c 	.word	0x2400015c
 8001df4:	24000018 	.word	0x24000018

08001df8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001df8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	4c07      	ldr	r4, [pc, #28]	; (8001e1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001dfe:	a901      	add	r1, sp, #4
 8001e00:	461a      	mov	r2, r3
 8001e02:	6820      	ldr	r0, [r4, #0]
 8001e04:	f007 fa9c 	bl	8009340 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	a901      	add	r1, sp, #4
 8001e10:	6820      	ldr	r0, [r4, #0]
 8001e12:	f007 fa95 	bl	8009340 <osMessageQueueGet>
}
 8001e16:	b002      	add	sp, #8
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2400015c 	.word	0x2400015c

08001e20 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001e20:	6803      	ldr	r3, [r0, #0]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	4718      	bx	r3

08001e26 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001e26:	2001      	movs	r0, #1
 8001e28:	4770      	bx	lr

08001e2a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001e2a:	6803      	ldr	r3, [r0, #0]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	4718      	bx	r3

08001e30 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001e30:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001e34:	4770      	bx	lr
	...

08001e38 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <DMA2D_XferCpltCallback+0xc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001e3e:	6803      	ldr	r3, [r0, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4718      	bx	r3
 8001e44:	24006bbc 	.word	0x24006bbc

08001e48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001e48:	b508      	push	{r3, lr}
 8001e4a:	280b      	cmp	r0, #11
 8001e4c:	d80b      	bhi.n	8001e66 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001e4e:	e8df f000 	tbb	[pc, r0]
 8001e52:	0612      	.short	0x0612
 8001e54:	0a0a0a10 	.word	0x0a0a0a10
 8001e58:	0808080a 	.word	0x0808080a
 8001e5c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e5e:	2001      	movs	r0, #1
}
 8001e60:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001e62:	2005      	movs	r0, #5
        break;
 8001e64:	e7fc      	b.n	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e68:	2166      	movs	r1, #102	; 0x66
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001e6e:	f019 f905 	bl	801b07c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001e72:	2000      	movs	r0, #0
 8001e74:	e7f4      	b.n	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e76:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001e78:	e7f2      	b.n	8001e60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001e7a:	bf00      	nop
 8001e7c:	0801c5bd 	.word	0x0801c5bd
 8001e80:	0801c5d8 	.word	0x0801c5d8
 8001e84:	0801c622 	.word	0x0801c622

08001e88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001e88:	b508      	push	{r3, lr}
 8001e8a:	280a      	cmp	r0, #10
 8001e8c:	d809      	bhi.n	8001ea2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001e8e:	e8df f000 	tbb	[pc, r0]
 8001e92:	0610      	.short	0x0610
 8001e94:	0808080e 	.word	0x0808080e
 8001e98:	06060608 	.word	0x06060608
 8001e9c:	06          	.byte	0x06
 8001e9d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001e9e:	2001      	movs	r0, #1
}
 8001ea0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001ea4:	2187      	movs	r1, #135	; 0x87
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001ea8:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001eaa:	f019 f8e7 	bl	801b07c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001eae:	2000      	movs	r0, #0
 8001eb0:	e7f6      	b.n	8001ea0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001eb2:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001eb4:	e7f4      	b.n	8001ea0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001eb6:	bf00      	nop
 8001eb8:	0801c5bd 	.word	0x0801c5bd
 8001ebc:	0801c673 	.word	0x0801c673
 8001ec0:	0801c622 	.word	0x0801c622

08001ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ec8:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001ecc:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ece:	4640      	mov	r0, r8
 8001ed0:	f7ff ffba 	bl	8001e48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ed4:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ed6:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ed8:	4638      	mov	r0, r7
 8001eda:	f7ff ffb5 	bl	8001e48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001ede:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	f7ff ffd1 	bl	8001e88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ee6:	8aa1      	ldrh	r1, [r4, #20]
 8001ee8:	8b62      	ldrh	r2, [r4, #26]
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8001eec:	1a52      	subs	r2, r2, r1
 8001eee:	469e      	mov	lr, r3
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ef2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001ef4:	8b22      	ldrh	r2, [r4, #24]
 8001ef6:	1a52      	subs	r2, r2, r1
 8001ef8:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001efa:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001efc:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001efe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f02:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001f06:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f08:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001f0a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001f0c:	f8d4 c000 	ldr.w	ip, [r4]
 8001f10:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001f14:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8001f18:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8001f1c:	d029      	beq.n	8001f72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8001f1e:	d813      	bhi.n	8001f48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8001f20:	f1bc 0f20 	cmp.w	ip, #32
 8001f24:	ea45 0002 	orr.w	r0, r5, r2
 8001f28:	d067      	beq.n	8001ffa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8001f2a:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8001f2e:	d064      	beq.n	8001ffa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8001f30:	f1bc 0f04 	cmp.w	ip, #4
 8001f34:	d05d      	beq.n	8001ff2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f36:	432a      	orrs	r2, r5
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001f3a:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f40:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001f42:	d067      	beq.n	8002014 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001f44:	4a36      	ldr	r2, [pc, #216]	; (8002020 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001f46:	e040      	b.n	8001fca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
    switch (blitOp.operation)
 8001f48:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001f4c:	d007      	beq.n	8001f5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
 8001f4e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8001f52:	d1f0      	bne.n	8001f36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f58:	f042 0209 	orr.w	r2, r2, #9
 8001f5c:	e003      	b.n	8001f66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f62:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f66:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001f68:	68e2      	ldr	r2, [r4, #12]
 8001f6a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f6c:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f6e:	6159      	str	r1, [r3, #20]
 8001f70:	e02a      	b.n	8001fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f72:	432a      	orrs	r2, r5
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001f74:	68a0      	ldr	r0, [r4, #8]
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f7a:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f7c:	1d02      	adds	r2, r0, #4
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f7e:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f80:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
        switch ((Bitmap::ClutFormat)palette->format)
 8001f84:	7802      	ldrb	r2, [r0, #0]
 8001f86:	b142      	cbz	r2, 8001f9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 8001f88:	2a01      	cmp	r2, #1
 8001f8a:	d020      	beq.n	8001fce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
            assert(0 && "Unsupported format");
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 8001f8e:	f240 1101 	movw	r1, #257	; 0x101
 8001f92:	4a25      	ldr	r2, [pc, #148]	; (8002028 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 8001f94:	4825      	ldr	r0, [pc, #148]	; (800202c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 8001f96:	f019 f871 	bl	801b07c <__assert_func>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f9a:	8842      	ldrh	r2, [r0, #2]
        bool blend = true;
 8001f9c:	2401      	movs	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f9e:	69d9      	ldr	r1, [r3, #28]
 8001fa0:	1e50      	subs	r0, r2, #1
 8001fa2:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001fa6:	f022 0210 	bic.w	r2, r2, #16
 8001faa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fae:	61da      	str	r2, [r3, #28]
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	61da      	str	r2, [r3, #28]
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	0692      	lsls	r2, r2, #26
 8001fbe:	d4fc      	bmi.n	8001fba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	609a      	str	r2, [r3, #8]
        if(blend)
 8001fc4:	2c00      	cmp	r4, #0
 8001fc6:	d0bd      	beq.n	8001f44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001fca:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8001fcc:	e020      	b.n	8002010 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fce:	8842      	ldrh	r2, [r0, #2]
            if(blitOp.alpha == 255)
 8001fd0:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fd4:	69d9      	ldr	r1, [r3, #28]
 8001fd6:	f102 30ff 	add.w	r0, r2, #4294967295
            if(blitOp.alpha == 255)
 8001fda:	bf18      	it	ne
 8001fdc:	2401      	movne	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fde:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001fe2:	f022 0210 	bic.w	r2, r2, #16
 8001fe6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fea:	f042 0210 	orr.w	r2, r2, #16
 8001fee:	61da      	str	r2, [r3, #28]
            break;
 8001ff0:	e7de      	b.n	8001fb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ff2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001ff6:	61d8      	str	r0, [r3, #28]
 8001ff8:	e7b8      	b.n	8001f6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ffa:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002000:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002004:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002008:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800200c:	f8ce 3000 	str.w	r3, [lr]
}
 8002010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002014:	f240 2201 	movw	r2, #513	; 0x201
 8002018:	e7d7      	b.n	8001fca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800201a:	bf00      	nop
 800201c:	52001000 	.word	0x52001000
 8002020:	00010201 	.word	0x00010201
 8002024:	0801c6be 	.word	0x0801c6be
 8002028:	0801c6d8 	.word	0x0801c6d8
 800202c:	0801c622 	.word	0x0801c622
 8002030:	00020201 	.word	0x00020201

08002034 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002038:	7f88      	ldrb	r0, [r1, #30]
 800203a:	f7ff ff25 	bl	8001e88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002040:	8aa5      	ldrh	r5, [r4, #20]
 8002042:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002044:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002046:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800204a:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800204c:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800204e:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002050:	6921      	ldr	r1, [r4, #16]
 8002052:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002054:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002056:	6825      	ldr	r5, [r4, #0]
 8002058:	2d08      	cmp	r5, #8
 800205a:	d10e      	bne.n	800207a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800205c:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800205e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002060:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002064:	7f20      	ldrb	r0, [r4, #28]
 8002066:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800206a:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800206c:	68e2      	ldr	r2, [r4, #12]
 800206e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002072:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002074:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002076:	601a      	str	r2, [r3, #0]
    }
}
 8002078:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800207a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800207c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800207e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002080:	68e2      	ldr	r2, [r4, #12]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002086:	e7f6      	b.n	8002076 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002088:	52001000 	.word	0x52001000
 800208c:	00010009 	.word	0x00010009
 8002090:	00020201 	.word	0x00020201
 8002094:	00030201 	.word	0x00030201

08002098 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800209e:	6003      	str	r3, [r0, #0]
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <_ZN8STM32DMAD1Ev+0x1c>)
 80020a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80020a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020aa:	f3bf 8f6f 	isb	sy
}
 80020ae:	4770      	bx	lr
 80020b0:	0801c720 	.word	0x0801c720
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4604      	mov	r4, r0
}
 80020bc:	f7ff ffec 	bl	8002098 <_ZN8STM32DMAD1Ev>
 80020c0:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80020c4:	4620      	mov	r0, r4
 80020c6:	f018 fec3 	bl	801ae50 <_ZdlPvj>
 80020ca:	4620      	mov	r0, r4
 80020cc:	bd10      	pop	{r4, pc}
	...

080020d0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <_ZN8STM32DMA10initializeEv+0x40>)
{
 80020d2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020d4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80020d8:	f042 0210 	orr.w	r2, r2, #16
 80020dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80020e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80020e4:	f002 0210 	and.w	r2, r2, #16
 80020e8:	9201      	str	r2, [sp, #4]
 80020ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80020ec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020ee:	f042 0210 	orr.w	r2, r2, #16
 80020f2:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80020f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020f6:	f022 0210 	bic.w	r2, r2, #16
 80020fa:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <_ZN8STM32DMA10initializeEv+0x44>)
 80020fe:	4a06      	ldr	r2, [pc, #24]	; (8002118 <_ZN8STM32DMA10initializeEv+0x48>)
 8002100:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002104:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002108:	609a      	str	r2, [r3, #8]
}
 800210a:	b002      	add	sp, #8
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	58024400 	.word	0x58024400
 8002114:	24007050 	.word	0x24007050
 8002118:	08001e39 	.word	0x08001e39
 800211c:	e000e100 	.word	0xe000e100

08002120 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <_ZN8STM32DMAC1Ev+0x30>)
 8002126:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002128:	2600      	movs	r6, #0
 800212a:	4625      	mov	r5, r4
 800212c:	2260      	movs	r2, #96	; 0x60
 800212e:	6060      	str	r0, [r4, #4]
 8002130:	7226      	strb	r6, [r4, #8]
 8002132:	7266      	strb	r6, [r4, #9]
 8002134:	f845 3b20 	str.w	r3, [r5], #32
 8002138:	4629      	mov	r1, r5
 800213a:	f00a fba7 	bl	800c88c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800213e:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002142:	60ee      	str	r6, [r5, #12]
 8002144:	3520      	adds	r5, #32
 8002146:	42ab      	cmp	r3, r5
 8002148:	d1fb      	bne.n	8002142 <_ZN8STM32DMAC1Ev+0x22>
}
 800214a:	4620      	mov	r0, r4
 800214c:	bd70      	pop	{r4, r5, r6, pc}
 800214e:	bf00      	nop
 8002150:	0801c720 	.word	0x0801c720

08002154 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002154:	2001      	movs	r0, #1
 8002156:	4770      	bx	lr

08002158 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002158:	200c      	movs	r0, #12
 800215a:	4770      	bx	lr

0800215c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800215c:	230c      	movs	r3, #12
 800215e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002162:	3008      	adds	r0, #8
 8002164:	4770      	bx	lr

08002166 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002166:	230c      	movs	r3, #12
 8002168:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800216c:	3008      	adds	r0, #8
 800216e:	4770      	bx	lr

08002170 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002170:	2001      	movs	r0, #1
 8002172:	4770      	bx	lr

08002174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002174:	f240 60d4 	movw	r0, #1748	; 0x6d4
 8002178:	4770      	bx	lr

0800217a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800217a:	f240 63d4 	movw	r3, #1748	; 0x6d4
 800217e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002182:	3008      	adds	r0, #8
 8002184:	4770      	bx	lr

08002186 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002186:	f240 63d4 	movw	r3, #1748	; 0x6d4
 800218a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800218e:	3008      	adds	r0, #8
 8002190:	4770      	bx	lr

08002192 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002192:	2001      	movs	r0, #1
 8002194:	4770      	bx	lr

08002196 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002196:	2010      	movs	r0, #16
 8002198:	4770      	bx	lr

0800219a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800219a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800219e:	3008      	adds	r0, #8
 80021a0:	4770      	bx	lr

080021a2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021a2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80021a6:	3008      	adds	r0, #8
 80021a8:	4770      	bx	lr

080021aa <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80021aa:	4608      	mov	r0, r1
 80021ac:	f000 bb14 	b.w	80027d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080021b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80021b2:	b510      	push	{r4, lr}
 80021b4:	4604      	mov	r4, r0
 80021b6:	6003      	str	r3, [r0, #0]
 80021b8:	f009 f8d0 	bl	800b35c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021bc:	4620      	mov	r0, r4
 80021be:	bd10      	pop	{r4, pc}
 80021c0:	0801c7d8 	.word	0x0801c7d8

080021c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80021c4:	b510      	push	{r4, lr}
 80021c6:	4604      	mov	r4, r0
 80021c8:	f7ff fff2 	bl	80021b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021cc:	2114      	movs	r1, #20
 80021ce:	4620      	mov	r0, r4
 80021d0:	f018 fe3e 	bl	801ae50 <_ZdlPvj>
 80021d4:	4620      	mov	r0, r4
 80021d6:	bd10      	pop	{r4, pc}

080021d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80021da:	b510      	push	{r4, lr}
 80021dc:	4604      	mov	r4, r0
 80021de:	6003      	str	r3, [r0, #0]
 80021e0:	f009 f8bc 	bl	800b35c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021e4:	4620      	mov	r0, r4
 80021e6:	bd10      	pop	{r4, pc}
 80021e8:	0801c7a4 	.word	0x0801c7a4

080021ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4604      	mov	r4, r0
 80021f0:	f7ff fff2 	bl	80021d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021f4:	f240 61dc 	movw	r1, #1756	; 0x6dc
 80021f8:	4620      	mov	r0, r4
 80021fa:	f018 fe29 	bl	801ae50 <_ZdlPvj>
 80021fe:	4620      	mov	r0, r4
 8002200:	bd10      	pop	{r4, pc}
	...

08002204 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002206:	b510      	push	{r4, lr}
 8002208:	4604      	mov	r4, r0
 800220a:	6003      	str	r3, [r0, #0]
 800220c:	f009 f8a6 	bl	800b35c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002210:	4620      	mov	r0, r4
 8002212:	bd10      	pop	{r4, pc}
 8002214:	0801c770 	.word	0x0801c770

08002218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002218:	b510      	push	{r4, lr}
 800221a:	4604      	mov	r4, r0
 800221c:	f7ff fff2 	bl	8002204 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002220:	2118      	movs	r1, #24
 8002222:	4620      	mov	r0, r4
 8002224:	f018 fe14 	bl	801ae50 <_ZdlPvj>
 8002228:	4620      	mov	r0, r4
 800222a:	bd10      	pop	{r4, pc}

0800222c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_ZN12FrontendHeapD1Ev+0x24>)
 800222e:	b510      	push	{r4, lr}
 8002230:	4604      	mov	r4, r0
 8002232:	6003      	str	r3, [r0, #0]
 8002234:	f500 60e1 	add.w	r0, r0, #1800	; 0x708
 8002238:	f7ff ffba 	bl	80021b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800223c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002240:	f7ff ffca 	bl	80021d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002244:	f104 0014 	add.w	r0, r4, #20
 8002248:	f7ff ffdc 	bl	8002204 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800224c:	4620      	mov	r0, r4
 800224e:	bd10      	pop	{r4, pc}
 8002250:	0801c80c 	.word	0x0801c80c

08002254 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002254:	b508      	push	{r3, lr}
 8002256:	4802      	ldr	r0, [pc, #8]	; (8002260 <__tcf_0+0xc>)
 8002258:	f7ff ffe8 	bl	800222c <_ZN12FrontendHeapD1Ev>
 800225c:	bd08      	pop	{r3, pc}
 800225e:	bf00      	nop
 8002260:	24000168 	.word	0x24000168

08002264 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002264:	b510      	push	{r4, lr}
 8002266:	4604      	mov	r4, r0
 8002268:	f7ff ffe0 	bl	800222c <_ZN12FrontendHeapD1Ev>
 800226c:	f640 0178 	movw	r1, #2168	; 0x878
 8002270:	4620      	mov	r0, r4
 8002272:	f018 fded 	bl	801ae50 <_ZdlPvj>
 8002276:	4620      	mov	r0, r4
 8002278:	bd10      	pop	{r4, pc}
	...

0800227c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800227c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002280:	f000 f9ec 	bl	800265c <_ZN14BitmapDatabase11getInstanceEv>
 8002284:	2400      	movs	r4, #0
 8002286:	4605      	mov	r5, r0
 8002288:	f000 f9ec 	bl	8002664 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800228c:	4623      	mov	r3, r4
 800228e:	4601      	mov	r1, r0
 8002290:	4622      	mov	r2, r4
 8002292:	4628      	mov	r0, r5
 8002294:	9400      	str	r4, [sp, #0]
 8002296:	f010 facb 	bl	8012830 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <touchgfx_init+0xb4>)
 800229c:	4a25      	ldr	r2, [pc, #148]	; (8002334 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800229e:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80022a0:	4d25      	ldr	r5, [pc, #148]	; (8002338 <touchgfx_init+0xbc>)
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	f001 fb10 	bl	80038c8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80022a8:	4824      	ldr	r0, [pc, #144]	; (800233c <touchgfx_init+0xc0>)
 80022aa:	f010 fa03 	bl	80126b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80022ae:	782b      	ldrb	r3, [r5, #0]
 80022b0:	f3bf 8f5b 	dmb	ish
 80022b4:	07db      	lsls	r3, r3, #31
 80022b6:	d435      	bmi.n	8002324 <touchgfx_init+0xa8>
 80022b8:	4628      	mov	r0, r5
 80022ba:	f018 fdcb 	bl	801ae54 <__cxa_guard_acquire>
 80022be:	b388      	cbz	r0, 8002324 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80022c0:	4c1f      	ldr	r4, [pc, #124]	; (8002340 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <touchgfx_init+0xc8>)
 80022c4:	f504 66e4 	add.w	r6, r4, #1824	; 0x720
 80022c8:	f104 0014 	add.w	r0, r4, #20
 80022cc:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80022d0:	f504 67e1 	add.w	r7, r4, #1800	; 0x708
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	6060      	str	r0, [r4, #4]
 80022d8:	f8c4 8008 	str.w	r8, [r4, #8]
 80022dc:	60e7      	str	r7, [r4, #12]
 80022de:	6126      	str	r6, [r4, #16]
 80022e0:	f009 f83e 	bl	800b360 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <touchgfx_init+0xcc>)
 80022e6:	4640      	mov	r0, r8
 80022e8:	6163      	str	r3, [r4, #20]
 80022ea:	f009 f839 	bl	800b360 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <touchgfx_init+0xd0>)
 80022f0:	4638      	mov	r0, r7
 80022f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022f4:	f009 f834 	bl	800b360 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <touchgfx_init+0xd4>)
 80022fa:	f204 701c 	addw	r0, r4, #1820	; 0x71c
 80022fe:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
 8002302:	f001 fb61 	bl	80039c8 <_ZN5ModelC1Ev>
 8002306:	4622      	mov	r2, r4
 8002308:	f204 711c 	addw	r1, r4, #1820	; 0x71c
 800230c:	4630      	mov	r0, r6
 800230e:	f001 fb51 	bl	80039b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002312:	4630      	mov	r0, r6
 8002314:	f000 fa60 	bl	80027d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002318:	4628      	mov	r0, r5
 800231a:	f018 fda7 	bl	801ae6c <__cxa_guard_release>
 800231e:	480d      	ldr	r0, [pc, #52]	; (8002354 <touchgfx_init+0xd8>)
 8002320:	f018 feca 	bl	801b0b8 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <touchgfx_init+0xdc>)
}
 8002326:	b002      	add	sp, #8
 8002328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800232c:	f7ff bc10 	b.w	8001b50 <_ZN11TouchGFXHAL10initializeEv>
 8002330:	24006c18 	.word	0x24006c18
 8002334:	2400168c 	.word	0x2400168c
 8002338:	24000164 	.word	0x24000164
 800233c:	2400001c 	.word	0x2400001c
 8002340:	24000168 	.word	0x24000168
 8002344:	0801c80c 	.word	0x0801c80c
 8002348:	0801c770 	.word	0x0801c770
 800234c:	0801c7a4 	.word	0x0801c7a4
 8002350:	0801c7d8 	.word	0x0801c7d8
 8002354:	08002255 	.word	0x08002255
 8002358:	24001604 	.word	0x24001604

0800235c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800235c:	4801      	ldr	r0, [pc, #4]	; (8002364 <touchgfx_taskEntry+0x8>)
 800235e:	f7ff bc59 	b.w	8001c14 <_ZN11TouchGFXHAL9taskEntryEv>
 8002362:	bf00      	nop
 8002364:	24001604 	.word	0x24001604

08002368 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002368:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800236a:	4e27      	ldr	r6, [pc, #156]	; (8002408 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 800236e:	4c28      	ldr	r4, [pc, #160]	; (8002410 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002370:	4630      	mov	r0, r6
static LCD24bpp display;
 8002372:	4d28      	ldr	r5, [pc, #160]	; (8002414 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002374:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002376:	f7ff fed3 	bl	8002120 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800237a:	4628      	mov	r0, r5
 800237c:	f012 fcac 	bl	8014cd8 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002382:	2200      	movs	r2, #0
 8002384:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002388:	4824      	ldr	r0, [pc, #144]	; (800241c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
 800238c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
 8002392:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002394:	661a      	str	r2, [r3, #96]	; 0x60
 8002396:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800239a:	671a      	str	r2, [r3, #112]	; 0x70
 800239c:	60dc      	str	r4, [r3, #12]
 800239e:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 80023a2:	491f      	ldr	r1, [pc, #124]	; (8002420 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80023a4:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 80023a8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80023ac:	6759      	str	r1, [r3, #116]	; 0x74
 80023ae:	2101      	movs	r1, #1
 80023b0:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 80023b4:	491b      	ldr	r1, [pc, #108]	; (8002424 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80023b6:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80023b8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80023bc:	8001      	strh	r1, [r0, #0]
 80023be:	481a      	ldr	r0, [pc, #104]	; (8002428 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 80023c0:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 80023c4:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80023c8:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80023cc:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 80023d0:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80023d4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 80023d8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 80023dc:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80023e0:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80023e2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80023e6:	4811      	ldr	r0, [pc, #68]	; (800242c <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 80023e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80023ec:	8001      	strh	r1, [r0, #0]
 80023ee:	4810      	ldr	r0, [pc, #64]	; (8002430 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80023f4:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80023f6:	490f      	ldr	r1, [pc, #60]	; (8002434 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 80023f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80023fc:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80023fe:	490e      	ldr	r1, [pc, #56]	; (8002438 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 8002402:	6019      	str	r1, [r3, #0]
 8002404:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	240009e4 	.word	0x240009e4
 800240c:	0801c25c 	.word	0x0801c25c
 8002410:	240009e0 	.word	0x240009e0
 8002414:	24001690 	.word	0x24001690
 8002418:	24001604 	.word	0x24001604
 800241c:	24006bb0 	.word	0x24006bb0
 8002420:	01000001 	.word	0x01000001
 8002424:	24006bbc 	.word	0x24006bbc
 8002428:	24006bb6 	.word	0x24006bb6
 800242c:	24006bb2 	.word	0x24006bb2
 8002430:	24006bb8 	.word	0x24006bb8
 8002434:	24006bb4 	.word	0x24006bb4
 8002438:	0801c3e8 	.word	0x0801c3e8
 800243c:	0801c234 	.word	0x0801c234

08002440 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002440:	4801      	ldr	r0, [pc, #4]	; (8002448 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002442:	f7ff be29 	b.w	8002098 <_ZN8STM32DMAD1Ev>
 8002446:	bf00      	nop
 8002448:	240009e4 	.word	0x240009e4

0800244c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 800244e:	2290      	movs	r2, #144	; 0x90
 8002450:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002454:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002460:	4a09      	ldr	r2, [pc, #36]	; (8002488 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002462:	490a      	ldr	r1, [pc, #40]	; (800248c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002464:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002466:	480a      	ldr	r0, [pc, #40]	; (8002490 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800246c:	3b01      	subs	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002472:	6911      	ldr	r1, [r2, #16]
 8002474:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002478:	3901      	subs	r1, #1
 800247a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800247e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002486:	4770      	bx	lr
 8002488:	50001000 	.word	0x50001000
 800248c:	240016ea 	.word	0x240016ea
 8002490:	240016e8 	.word	0x240016e8

08002494 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002494:	4b01      	ldr	r3, [pc, #4]	; (800249c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002496:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	50001084 	.word	0x50001084

080024a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80024a0:	4b02      	ldr	r3, [pc, #8]	; (80024ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80024a2:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80024a4:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80024a6:	f843 2c60 	str.w	r2, [r3, #-96]
}
 80024aa:	4770      	bx	lr
 80024ac:	50001084 	.word	0x50001084

080024b0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	4604      	mov	r4, r0
    HAL::initialize();
 80024b4:	f009 fa75 	bl	800b9a2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80024bc:	f00d f81c 	bl	800f4f8 <_ZN8touchgfx11Application11getInstanceEv>
 80024c0:	4601      	mov	r1, r0
 80024c2:	4620      	mov	r0, r4
 80024c4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	4620      	mov	r0, r4
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80024cc:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 80024d0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80024d4:	2300      	movs	r3, #0
 80024d6:	46ac      	mov	ip, r5
}
 80024d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 80024dc:	4760      	bx	ip
 80024de:	bf00      	nop
 80024e0:	70060000 	.word	0x70060000

080024e4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80024e4:	f009 ba44 	b.w	800b970 <_ZN8touchgfx3HAL10beginFrameEv>

080024e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 80024e8:	f009 ba4e 	b.w	800b988 <_ZN8touchgfx3HAL8endFrameEv>

080024ec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80024ec:	f009 bb67 	b.w	800bbbe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080024f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80024f0:	4a10      	ldr	r2, [pc, #64]	; (8002534 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x44>)
 80024f2:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80024fa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80024fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002502:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002506:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800250a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800250e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002510:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002514:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002516:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800251a:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800251c:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002520:	d2f9      	bcs.n	8002516 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 8002522:	3b20      	subs	r3, #32
 8002524:	f113 0f20 	cmn.w	r3, #32
 8002528:	d1f2      	bne.n	8002510 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x20>
 800252a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800252e:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x10>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	03db      	lsls	r3, r3, #15
 800253e:	d501      	bpl.n	8002544 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xc>
 8002540:	f7ff bfd6 	b.w	80024f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	03db      	lsls	r3, r3, #15
 8002552:	d501      	bpl.n	8002558 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 8002554:	f7ff bfcc 	b.w	80024f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002560:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002562:	f009 f9cf 	bl	800b904 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	03db      	lsls	r3, r3, #15
 800256c:	d503      	bpl.n	8002576 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 800256e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002572:	f7ff bfbd 	b.w	80024f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
 8002576:	bd08      	pop	{r3, pc}
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800257e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800259a:	f3bf 8f6f 	isb	sy
}
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80025a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025b0:	609a      	str	r2, [r3, #8]
}
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_LTDC_LineEventCallback+0x50>)
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <HAL_LTDC_LineEventCallback+0x54>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	8811      	ldrh	r1, [r2, #0]
 80025c0:	428b      	cmp	r3, r1
    {
 80025c2:	b510      	push	{r4, lr}
 80025c4:	4c12      	ldr	r4, [pc, #72]	; (8002610 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 80025c6:	d113      	bne.n	80025f0 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_LTDC_LineEventCallback+0x5c>)
 80025ca:	8819      	ldrh	r1, [r3, #0]
 80025cc:	f003 ff52 	bl	8006474 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80025d0:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80025d2:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80025d6:	3301      	adds	r3, #1
 80025d8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80025dc:	f7ff fc00 	bl	8001de0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	f009 ffd1 	bl	800c588 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80025e6:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80025e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80025ec:	f7ff ba36 	b.w	8001a5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80025f0:	f003 ff40 	bl	8006474 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff fa49 	bl	8001a8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 80025fa:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80025fc:	6803      	ldr	r3, [r0, #0]
    }
 80025fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4718      	bx	r3
 8002606:	bf00      	nop
 8002608:	50001000 	.word	0x50001000
 800260c:	240016ea 	.word	0x240016ea
 8002610:	24006bbc 	.word	0x24006bbc
 8002614:	240016e8 	.word	0x240016e8

08002618 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002618:	4770      	bx	lr

0800261a <_ZN23ApplicationFontProviderD0Ev>:
 800261a:	b510      	push	{r4, lr}
 800261c:	4604      	mov	r4, r0
 800261e:	2104      	movs	r1, #4
 8002620:	f018 fc16 	bl	801ae50 <_ZdlPvj>
 8002624:	4620      	mov	r0, r4
 8002626:	bd10      	pop	{r4, pc}

08002628 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002628:	b508      	push	{r3, lr}
 800262a:	2903      	cmp	r1, #3
 800262c:	d813      	bhi.n	8002656 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800262e:	e8df f001 	tbb	[pc, r1]
 8002632:	0602      	.short	0x0602
 8002634:	0e0a      	.short	0x0e0a
    switch (typography)
    {
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002636:	f001 f993 	bl	8003960 <_ZN17TypedTextDatabase8getFontsEv>
 800263a:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 800263c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800263e:	f001 f98f 	bl	8003960 <_ZN17TypedTextDatabase8getFontsEv>
 8002642:	6840      	ldr	r0, [r0, #4]
 8002644:	e7fa      	b.n	800263c <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002646:	f001 f98b 	bl	8003960 <_ZN17TypedTextDatabase8getFontsEv>
 800264a:	6880      	ldr	r0, [r0, #8]
 800264c:	e7f6      	b.n	800263c <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800264e:	f001 f987 	bl	8003960 <_ZN17TypedTextDatabase8getFontsEv>
 8002652:	68c0      	ldr	r0, [r0, #12]
 8002654:	e7f2      	b.n	800263c <_ZN23ApplicationFontProvider7getFontEt+0x14>
{
 8002656:	2000      	movs	r0, #0
 8002658:	e7f0      	b.n	800263c <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

0800265c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800265c:	4800      	ldr	r0, [pc, #0]	; (8002660 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800265e:	4770      	bx	lr
 8002660:	0801c82c 	.word	0x0801c82c

08002664 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002664:	200b      	movs	r0, #11
 8002666:	4770      	bx	lr

08002668 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002668:	b513      	push	{r0, r1, r4, lr}
 800266a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800266c:	b151      	cbz	r1, 8002684 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800266e:	6803      	ldr	r3, [r0, #0]
 8002670:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002672:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002674:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002678:	689c      	ldr	r4, [r3, #8]
 800267a:	f10d 0303 	add.w	r3, sp, #3
 800267e:	47a0      	blx	r4
        return glyph;
    }
 8002680:	b002      	add	sp, #8
 8002682:	bd10      	pop	{r4, pc}
            return 0;
 8002684:	4608      	mov	r0, r1
 8002686:	e7fb      	b.n	8002680 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002688 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002688:	8940      	ldrh	r0, [r0, #10]
 800268a:	4770      	bx	lr

0800268c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800268c:	8980      	ldrh	r0, [r0, #12]
 800268e:	4770      	bx	lr

08002690 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002690:	8880      	ldrh	r0, [r0, #4]
 8002692:	4770      	bx	lr

08002694 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002694:	7983      	ldrb	r3, [r0, #6]
 8002696:	8880      	ldrh	r0, [r0, #4]
 8002698:	4418      	add	r0, r3
    }
 800269a:	b280      	uxth	r0, r0
 800269c:	4770      	bx	lr

0800269e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800269e:	79c0      	ldrb	r0, [r0, #7]
    }
 80026a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80026a4:	4770      	bx	lr

080026a6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80026a6:	79c0      	ldrb	r0, [r0, #7]
    }
 80026a8:	09c0      	lsrs	r0, r0, #7
 80026aa:	4770      	bx	lr

080026ac <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80026ac:	4770      	bx	lr

080026ae <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80026ae:	b510      	push	{r4, lr}
 80026b0:	4604      	mov	r4, r0
    }
 80026b2:	2108      	movs	r1, #8
 80026b4:	f018 fbcc 	bl	801ae50 <_ZdlPvj>
 80026b8:	4620      	mov	r0, r4
 80026ba:	bd10      	pop	{r4, pc}

080026bc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 80026bc:	4770      	bx	lr

080026be <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80026be:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80026c2:	6808      	ldr	r0, [r1, #0]
 80026c4:	6849      	ldr	r1, [r1, #4]
 80026c6:	c303      	stmia	r3!, {r0, r1}
    }
 80026c8:	4770      	bx	lr

080026ca <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80026ca:	4770      	bx	lr

080026cc <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80026cc:	4770      	bx	lr

080026ce <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80026ce:	6041      	str	r1, [r0, #4]
    }
 80026d0:	4770      	bx	lr

080026d2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80026d2:	4770      	bx	lr

080026d4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80026d4:	2301      	movs	r3, #1
 80026d6:	7203      	strb	r3, [r0, #8]
    }
 80026d8:	4770      	bx	lr

080026da <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80026da:	4770      	bx	lr

080026dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80026dc:	4770      	bx	lr

080026de <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80026de:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 80026e0:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80026e2:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 80026e4:	68c2      	ldr	r2, [r0, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	1054      	asrs	r4, r2, #1
 80026ea:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80026ee:	07d2      	lsls	r2, r2, #31
 80026f0:	bf48      	it	mi
 80026f2:	590a      	ldrmi	r2, [r1, r4]
    }
 80026f4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 80026f8:	bf48      	it	mi
 80026fa:	58d3      	ldrmi	r3, [r2, r3]
 80026fc:	4718      	bx	r3

080026fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80026fe:	6843      	ldr	r3, [r0, #4]
 8002700:	b12b      	cbz	r3, 800270e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002702:	6883      	ldr	r3, [r0, #8]
 8002704:	b92b      	cbnz	r3, 8002712 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002706:	68c0      	ldr	r0, [r0, #12]
 8002708:	f000 0001 	and.w	r0, r0, #1
 800270c:	4770      	bx	lr
 800270e:	4618      	mov	r0, r3
 8002710:	4770      	bx	lr
 8002712:	2001      	movs	r0, #1
    }
 8002714:	4770      	bx	lr

08002716 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002716:	b510      	push	{r4, lr}
 8002718:	4604      	mov	r4, r0
 800271a:	210c      	movs	r1, #12
 800271c:	f018 fb98 	bl	801ae50 <_ZdlPvj>
 8002720:	4620      	mov	r0, r4
 8002722:	bd10      	pop	{r4, pc}

08002724 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002724:	b510      	push	{r4, lr}
 8002726:	4604      	mov	r4, r0
 8002728:	2110      	movs	r1, #16
 800272a:	f018 fb91 	bl	801ae50 <_ZdlPvj>
 800272e:	4620      	mov	r0, r4
 8002730:	bd10      	pop	{r4, pc}

08002732 <_ZN23FrontendApplicationBaseD0Ev>:
 8002732:	b510      	push	{r4, lr}
 8002734:	4604      	mov	r4, r0
 8002736:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800273a:	f018 fb89 	bl	801ae50 <_ZdlPvj>
 800273e:	4620      	mov	r0, r4
 8002740:	bd10      	pop	{r4, pc}

08002742 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002742:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 8002744:	f00c fed8 	bl	800f4f8 <_ZN8touchgfx11Application11getInstanceEv>
 8002748:	6803      	ldr	r3, [r0, #0]
    }
 800274a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4718      	bx	r3

08002752 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002752:	b510      	push	{r4, lr}
 8002754:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002756:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800275a:	b158      	cbz	r0, 8002774 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800275c:	6803      	ldr	r3, [r0, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4798      	blx	r3
 8002762:	b138      	cbz	r0, 8002774 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002764:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002768:	6803      	ldr	r3, [r0, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8002774:	bd10      	pop	{r4, pc}
	...

08002778 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	4604      	mov	r4, r0
 800277c:	4617      	mov	r7, r2
 800277e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002780:	f00c fedc 	bl	800f53c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002786:	2500      	movs	r5, #0
        instance = this;
 8002788:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800278a:	4629      	mov	r1, r5
      model(m)
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800278e:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8002792:	4e0f      	ldr	r6, [pc, #60]	; (80027d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800279a:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 800279e:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80027a2:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80027a4:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80027ac:	4628      	mov	r0, r5
 80027ae:	f001 f88b 	bl	80038c8 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80027b2:	6833      	ldr	r3, [r6, #0]
 80027b4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80027b8:	b10a      	cbz	r2, 80027be <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80027ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80027bc:	b900      	cbnz	r0, 80027c0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80027be:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80027c0:	f013 fb77 	bl	8015eb2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80027c4:	4620      	mov	r0, r4
 80027c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c8:	24006c08 	.word	0x24006c08
 80027cc:	0801cc58 	.word	0x0801cc58
 80027d0:	24006bbc 	.word	0x24006bbc
 80027d4:	0801cc40 	.word	0x0801cc40

080027d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80027da:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80027de:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80027e8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80027ec:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	08002939 	.word	0x08002939

080027f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80027f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fc:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80027fe:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002800:	4699      	mov	r9, r3
 8002802:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002804:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002806:	4614      	mov	r4, r2
 8002808:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4798      	blx	r3
 8002810:	f240 63d3 	movw	r3, #1747	; 0x6d3
 8002814:	4298      	cmp	r0, r3
 8002816:	d805      	bhi.n	8002824 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
 8002818:	4b41      	ldr	r3, [pc, #260]	; (8002920 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 800281a:	21a3      	movs	r1, #163	; 0xa3
 800281c:	4a41      	ldr	r2, [pc, #260]	; (8002924 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800281e:	4842      	ldr	r0, [pc, #264]	; (8002928 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002820:	f018 fc2c 	bl	801b07c <__assert_func>
 8002824:	6860      	ldr	r0, [r4, #4]
 8002826:	6803      	ldr	r3, [r0, #0]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4798      	blx	r3
 800282c:	280f      	cmp	r0, #15
 800282e:	d803      	bhi.n	8002838 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
 8002830:	4b3e      	ldr	r3, [pc, #248]	; (800292c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002832:	21a4      	movs	r1, #164	; 0xa4
 8002834:	4a3b      	ldr	r2, [pc, #236]	; (8002924 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002836:	e7f2      	b.n	800281e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002838:	68e0      	ldr	r0, [r4, #12]
 800283a:	6803      	ldr	r3, [r0, #0]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4798      	blx	r3
 8002840:	280b      	cmp	r0, #11
 8002842:	d803      	bhi.n	800284c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002846:	21a5      	movs	r1, #165	; 0xa5
 8002848:	4a36      	ldr	r2, [pc, #216]	; (8002924 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 800284a:	e7e8      	b.n	800281e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
 800284c:	f00c fe54 	bl	800f4f8 <_ZN8touchgfx11Application11getInstanceEv>
 8002850:	f00c fe58 	bl	800f504 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002854:	f8d9 0000 	ldr.w	r0, [r9]
 8002858:	b110      	cbz	r0, 8002860 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
 800285a:	6803      	ldr	r3, [r0, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4798      	blx	r3
    if (*currentTrans)
 8002860:	f8d9 0000 	ldr.w	r0, [r9]
 8002864:	b110      	cbz	r0, 800286c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
 8002866:	6803      	ldr	r3, [r0, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4798      	blx	r3
    if (*currentScreen)
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	b110      	cbz	r0, 8002876 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
 8002870:	6803      	ldr	r3, [r0, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	4798      	blx	r3
    if (*currentPresenter)
 8002876:	f8d8 0000 	ldr.w	r0, [r8]
 800287a:	b110      	cbz	r0, 8002882 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
 800287c:	6803      	ldr	r3, [r0, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4798      	blx	r3
    if (*currentScreen)
 8002882:	6838      	ldr	r0, [r7, #0]
 8002884:	b110      	cbz	r0, 800288c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
 8002886:	6803      	ldr	r3, [r0, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4798      	blx	r3
    if (*currentPresenter)
 800288c:	f8d8 0000 	ldr.w	r0, [r8]
 8002890:	b110      	cbz	r0, 8002898 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
 8002892:	6803      	ldr	r3, [r0, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002898:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800289a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800289c:	f04f 0b00 	mov.w	fp, #0
 80028a0:	6803      	ldr	r3, [r0, #0]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	4798      	blx	r3
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80028a8:	4605      	mov	r5, r0
 80028aa:	f8c0 b004 	str.w	fp, [r0, #4]
 80028ae:	6003      	str	r3, [r0, #0]
 80028b0:	4659      	mov	r1, fp
 80028b2:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80028b6:	68a0      	ldr	r0, [r4, #8]
 80028b8:	6803      	ldr	r3, [r0, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	4798      	blx	r3
 80028be:	4606      	mov	r6, r0
 80028c0:	f001 f964 	bl	8003b8c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80028c4:	6860      	ldr	r0, [r4, #4]
 80028c6:	4659      	mov	r1, fp
 80028c8:	6803      	ldr	r3, [r0, #0]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	4798      	blx	r3
 80028ce:	4604      	mov	r4, r0
 80028d0:	4631      	mov	r1, r6
 80028d2:	f001 f88b 	bl	80039ec <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80028d6:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 80028da:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 80028de:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80028e0:	b1e4      	cbz	r4, 800291c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
 80028e2:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80028e4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80028e8:	4630      	mov	r0, r6
 80028ea:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80028ec:	f8c4 a008 	str.w	sl, [r4, #8]
 80028f0:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80028f2:	63f4      	str	r4, [r6, #60]	; 0x3c
 80028f4:	4798      	blx	r3
    newPresenter->activate();
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	4620      	mov	r0, r4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80028fe:	4629      	mov	r1, r5
 8002900:	4630      	mov	r0, r6
 8002902:	f00e f9e7 	bl	8010cd4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002906:	682b      	ldr	r3, [r5, #0]
 8002908:	4628      	mov	r0, r5
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4798      	blx	r3
    newTransition->invalidate();
 800290e:	682b      	ldr	r3, [r5, #0]
 8002910:	4628      	mov	r0, r5
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8002916:	4620      	mov	r0, r4
 8002918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 800291c:	4623      	mov	r3, r4
 800291e:	e7e1      	b.n	80028e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
 8002920:	0801c918 	.word	0x0801c918
 8002924:	0801c9a6 	.word	0x0801c9a6
 8002928:	0801caaa 	.word	0x0801caaa
 800292c:	0801caf1 	.word	0x0801caf1
 8002930:	0801cb94 	.word	0x0801cb94
 8002934:	0801cc9c 	.word	0x0801cc9c

08002938 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002938:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 800293c:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800293e:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
 8002946:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800294a:	4804      	ldr	r0, [pc, #16]	; (800295c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
 800294c:	f7ff ff54 	bl	80027f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002950:	b003      	add	sp, #12
 8002952:	f85d fb04 	ldr.w	pc, [sp], #4
 8002956:	bf00      	nop
 8002958:	24006bfc 	.word	0x24006bfc
 800295c:	24006bf8 	.word	0x24006bf8

08002960 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002960:	6a00      	ldr	r0, [r0, #32]
 8002962:	4770      	bx	lr

08002964 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002964:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002966:	4770      	bx	lr

08002968 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002968:	4770      	bx	lr

0800296a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800296a:	888b      	ldrh	r3, [r1, #4]
 800296c:	6980      	ldr	r0, [r0, #24]
 800296e:	0adb      	lsrs	r3, r3, #11
 8002970:	680a      	ldr	r2, [r1, #0]
 8002972:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002976:	4410      	add	r0, r2
 8002978:	4770      	bx	lr

0800297a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800297a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800297c:	b1c2      	cbz	r2, 80029b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800297e:	7b13      	ldrb	r3, [r2, #12]
 8002980:	b1b3      	cbz	r3, 80029b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002982:	7b54      	ldrb	r4, [r2, #13]
 8002984:	7ad2      	ldrb	r2, [r2, #11]
 8002986:	0224      	lsls	r4, r4, #8
 8002988:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800298c:	4314      	orrs	r4, r2
 800298e:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002990:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002992:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002996:	8813      	ldrh	r3, [r2, #0]
 8002998:	428b      	cmp	r3, r1
 800299a:	d102      	bne.n	80029a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800299c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80029a0:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80029a2:	d805      	bhi.n	80029b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80029a4:	3801      	subs	r0, #1
 80029a6:	3204      	adds	r2, #4
 80029a8:	b280      	uxth	r0, r0
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d1f3      	bne.n	8002996 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80029ae:	e7f7      	b.n	80029a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80029b0:	2000      	movs	r0, #0
 80029b2:	e7f5      	b.n	80029a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080029b4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80029b4:	b510      	push	{r4, lr}
 80029b6:	4604      	mov	r4, r0
 80029b8:	2128      	movs	r1, #40	; 0x28
 80029ba:	f018 fa49 	bl	801ae50 <_ZdlPvj>
 80029be:	4620      	mov	r0, r4
 80029c0:	bd10      	pop	{r4, pc}
	...

080029c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80029c4:	b530      	push	{r4, r5, lr}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80029ca:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80029ce:	9506      	str	r5, [sp, #24]
 80029d0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80029d4:	9505      	str	r5, [sp, #20]
 80029d6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80029da:	9504      	str	r5, [sp, #16]
 80029dc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80029e0:	9503      	str	r5, [sp, #12]
 80029e2:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80029e6:	9502      	str	r5, [sp, #8]
 80029e8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80029ec:	9501      	str	r5, [sp, #4]
 80029ee:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80029f2:	9500      	str	r5, [sp, #0]
 80029f4:	f00d fdac 	bl	8010550 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80029fa:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80029fc:	6023      	str	r3, [r4, #0]
 80029fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a00:	61a3      	str	r3, [r4, #24]
 8002a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002a04:	61e3      	str	r3, [r4, #28]
 8002a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002a08:	6223      	str	r3, [r4, #32]
 8002a0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002a0c:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002a0e:	b009      	add	sp, #36	; 0x24
 8002a10:	bd30      	pop	{r4, r5, pc}
 8002a12:	bf00      	nop
 8002a14:	0801ccc0 	.word	0x0801ccc0

08002a18 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002a18:	2000      	movs	r0, #0
 8002a1a:	4770      	bx	lr

08002a1c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002a1c:	8081      	strh	r1, [r0, #4]
    }
 8002a1e:	4770      	bx	lr

08002a20 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002a20:	80c1      	strh	r1, [r0, #6]
    }
 8002a22:	4770      	bx	lr

08002a24 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002a24:	8101      	strh	r1, [r0, #8]
    }
 8002a26:	4770      	bx	lr

08002a28 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002a28:	8141      	strh	r1, [r0, #10]
    }
 8002a2a:	4770      	bx	lr

08002a2c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002a2c:	4770      	bx	lr

08002a2e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 8002a2e:	4770      	bx	lr

08002a30 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8002a30:	4770      	bx	lr

08002a32 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8002a32:	4770      	bx	lr

08002a34 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002a34:	4770      	bx	lr

08002a36 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002a36:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002a38:	88c4      	ldrh	r4, [r0, #6]
 8002a3a:	6803      	ldr	r3, [r0, #0]
 8002a3c:	1b12      	subs	r2, r2, r4
 8002a3e:	8884      	ldrh	r4, [r0, #4]
 8002a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a42:	1b09      	subs	r1, r1, r4
 8002a44:	b212      	sxth	r2, r2
    }
 8002a46:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002a4a:	b209      	sxth	r1, r1
 8002a4c:	4718      	bx	r3

08002a4e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a52:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002a5a:	6813      	ldr	r3, [r2, #0]
 8002a5c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002a5e:	6010      	str	r0, [r2, #0]
    }
 8002a60:	4770      	bx	lr

08002a62 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002a62:	4770      	bx	lr

08002a64 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002a64:	4770      	bx	lr

08002a66 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002a66:	4770      	bx	lr

08002a68 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002a68:	4770      	bx	lr

08002a6a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8002a6a:	4770      	bx	lr

08002a6c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8002a6c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002a70:	b11a      	cbz	r2, 8002a7a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002a72:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002a76:	b102      	cbz	r2, 8002a7a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002a78:	6018      	str	r0, [r3, #0]
        }
    }
 8002a7a:	4770      	bx	lr

08002a7c <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8002a7c:	4770      	bx	lr

08002a7e <_ZN15Screen1ViewBase14button9ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button9Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a7e:	4770      	bx	lr

08002a80 <_ZN15Screen1ViewBase14button8ClickedEv>:

    virtual void button8Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a80:	4770      	bx	lr

08002a82 <_ZN15Screen1ViewBase19buttonSwitchClickedEv>:

    virtual void buttonSwitchClicked()
    {
        // Override and implement this function in Screen1
    }
 8002a82:	4770      	bx	lr

08002a84 <_ZN15Screen1ViewBase17buttonSendClickedEv>:

    virtual void buttonSendClicked()
    {
        // Override and implement this function in Screen1
    }
 8002a84:	4770      	bx	lr

08002a86 <_ZN15Screen1ViewBase14button0ClickedEv>:

    virtual void button0Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a86:	4770      	bx	lr

08002a88 <_ZN15Screen1ViewBase18buttonClearClickedEv>:

    virtual void buttonClearClicked()
    {
        // Override and implement this function in Screen1
    }
 8002a88:	4770      	bx	lr

08002a8a <_ZN15Screen1ViewBase14button3ClickedEv>:

    virtual void button3Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a8a:	4770      	bx	lr

08002a8c <_ZN15Screen1ViewBase14button2ClickedEv>:

    virtual void button2Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a8c:	4770      	bx	lr

08002a8e <_ZN15Screen1ViewBase14button1ClickedEv>:

    virtual void button1Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a8e:	4770      	bx	lr

08002a90 <_ZN15Screen1ViewBase14button6ClickedEv>:

    virtual void button6Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a90:	4770      	bx	lr

08002a92 <_ZN15Screen1ViewBase14button5ClickedEv>:

    virtual void button5Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a92:	4770      	bx	lr

08002a94 <_ZN15Screen1ViewBase14button4ClickedEv>:

    virtual void button4Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a94:	4770      	bx	lr

08002a96 <_ZN15Screen1ViewBase14button7ClickedEv>:

    virtual void button7Clicked()
    {
        // Override and implement this function in Screen1
    }
 8002a96:	4770      	bx	lr

08002a98 <_ZN15Screen1ViewBase16buttonDotClickedEv>:

    virtual void buttonDotClicked()
    {
        // Override and implement this function in Screen1
    }
 8002a98:	4770      	bx	lr

08002a9a <_ZN15Screen1ViewBase17buttonFreqToggledEv>:

    virtual void buttonFreqToggled()
    {
        // Override and implement this function in Screen1
    }
 8002a9a:	4770      	bx	lr

08002a9c <_ZN15Screen1ViewBase15buttonMIToggledEv>:

    virtual void buttonMIToggled()
    {
        // Override and implement this function in Screen1
    }
 8002a9c:	4770      	bx	lr

08002a9e <_ZN15Screen1ViewBase18buttonPowerClickedEv>:

    virtual void buttonPowerClicked()
    {
        // Override and implement this function in Screen1
    }
 8002a9e:	4770      	bx	lr

08002aa0 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8002aa0:	4770      	bx	lr

08002aa2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002aa2:	4770      	bx	lr

08002aa4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002aa4:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002aa6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002aa8:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8002aaa:	68c2      	ldr	r2, [r0, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	1055      	asrs	r5, r2, #1
 8002ab0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002ab4:	07d2      	lsls	r2, r2, #31
 8002ab6:	bf48      	it	mi
 8002ab8:	5962      	ldrmi	r2, [r4, r5]
    }
 8002aba:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002abc:	bf48      	it	mi
 8002abe:	58d3      	ldrmi	r3, [r2, r3]
 8002ac0:	4718      	bx	r3

08002ac2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8002ac2:	6843      	ldr	r3, [r0, #4]
 8002ac4:	b12b      	cbz	r3, 8002ad2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8002ac6:	6883      	ldr	r3, [r0, #8]
 8002ac8:	b92b      	cbnz	r3, 8002ad6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8002aca:	68c0      	ldr	r0, [r0, #12]
 8002acc:	f000 0001 	and.w	r0, r0, #1
 8002ad0:	4770      	bx	lr
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4770      	bx	lr
 8002ad6:	2001      	movs	r0, #1
    }
 8002ad8:	4770      	bx	lr

08002ada <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002ada:	b510      	push	{r4, lr}
 8002adc:	4604      	mov	r4, r0
 8002ade:	2110      	movs	r1, #16
 8002ae0:	f018 f9b6 	bl	801ae50 <_ZdlPvj>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <_ZN15Screen1ViewBaseD0Ev>:
    virtual ~Screen1ViewBase() {}
 8002ae8:	b510      	push	{r4, lr}
 8002aea:	4604      	mov	r4, r0
 8002aec:	f240 61d4 	movw	r1, #1748	; 0x6d4
 8002af0:	f018 f9ae 	bl	801ae50 <_ZdlPvj>
 8002af4:	4620      	mov	r0, r4
 8002af6:	bd10      	pop	{r4, pc}

08002af8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button7)
 8002af8:	f100 0298 	add.w	r2, r0, #152	; 0x98
{
 8002afc:	4603      	mov	r3, r0
    if (&src == &button7)
 8002afe:	4291      	cmp	r1, r2
 8002b00:	d102      	bne.n	8002b08 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    {
        //Interaction14
        //When button7 clicked call virtual function
        //Call button7Clicked
        button7Clicked();
 8002b02:	6803      	ldr	r3, [r0, #0]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    else if (&src == &button8)
    {
        //Interaction2
        //When button8 clicked call virtual function
        //Call button8Clicked
        button8Clicked();
 8002b06:	4718      	bx	r3
    else if (&src == &button8)
 8002b08:	f100 02e0 	add.w	r2, r0, #224	; 0xe0
 8002b0c:	4291      	cmp	r1, r2
 8002b0e:	d102      	bne.n	8002b16 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1e>
        button8Clicked();
 8002b10:	6803      	ldr	r3, [r0, #0]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	e7f7      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button9)
 8002b16:	f500 7294 	add.w	r2, r0, #296	; 0x128
 8002b1a:	4291      	cmp	r1, r2
 8002b1c:	d102      	bne.n	8002b24 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c>
    {
        //Interaction1
        //When button9 clicked call virtual function
        //Call button9Clicked
        button9Clicked();
 8002b1e:	6803      	ldr	r3, [r0, #0]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	e7f0      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button4)
 8002b24:	f500 72b8 	add.w	r2, r0, #368	; 0x170
 8002b28:	4291      	cmp	r1, r2
 8002b2a:	d102      	bne.n	8002b32 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    {
        //Interaction13
        //When button4 clicked call virtual function
        //Call button4Clicked
        button4Clicked();
 8002b2c:	6803      	ldr	r3, [r0, #0]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	e7e9      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button5)
 8002b32:	f500 72dc 	add.w	r2, r0, #440	; 0x1b8
 8002b36:	4291      	cmp	r1, r2
 8002b38:	d102      	bne.n	8002b40 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x48>
    {
        //Interaction12
        //When button5 clicked call virtual function
        //Call button5Clicked
        button5Clicked();
 8002b3a:	6803      	ldr	r3, [r0, #0]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	e7e2      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button6)
 8002b40:	f500 7200 	add.w	r2, r0, #512	; 0x200
 8002b44:	4291      	cmp	r1, r2
 8002b46:	d102      	bne.n	8002b4e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
    {
        //Interaction11
        //When button6 clicked call virtual function
        //Call button6Clicked
        button6Clicked();
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	e7db      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button1)
 8002b4e:	f500 7212 	add.w	r2, r0, #584	; 0x248
 8002b52:	4291      	cmp	r1, r2
 8002b54:	d102      	bne.n	8002b5c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x64>
    {
        //Interaction10
        //When button1 clicked call virtual function
        //Call button1Clicked
        button1Clicked();
 8002b56:	6803      	ldr	r3, [r0, #0]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	e7d4      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button2)
 8002b5c:	f500 7224 	add.w	r2, r0, #656	; 0x290
 8002b60:	4291      	cmp	r1, r2
 8002b62:	d102      	bne.n	8002b6a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x72>
    {
        //Interaction8
        //When button2 clicked call virtual function
        //Call button2Clicked
        button2Clicked();
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	e7cd      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &button3)
 8002b6a:	f500 7236 	add.w	r2, r0, #728	; 0x2d8
 8002b6e:	4291      	cmp	r1, r2
 8002b70:	d102      	bne.n	8002b78 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x80>
    {
        //Interaction7
        //When button3 clicked call virtual function
        //Call button3Clicked
        button3Clicked();
 8002b72:	6803      	ldr	r3, [r0, #0]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	e7c6      	b.n	8002b06 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    }
    else if (&src == &buttonClear)
 8002b78:	f500 7248 	add.w	r2, r0, #800	; 0x320
 8002b7c:	4291      	cmp	r1, r2
 8002b7e:	d103      	bne.n	8002b88 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
    {
        //Interaction6
        //When buttonClear clicked call virtual function
        //Call buttonClearClicked
        buttonClearClicked();
 8002b80:	6802      	ldr	r2, [r0, #0]
 8002b82:	6c12      	ldr	r2, [r2, #64]	; 0x40
    else if (&src == &buttonPower)
    {
        //buttonPowerClicked
        //When buttonPower clicked call virtual function
        //Call buttonPowerClicked
        buttonPowerClicked();
 8002b84:	4618      	mov	r0, r3
 8002b86:	4710      	bx	r2
    else if (&src == &button0)
 8002b88:	f500 725a 	add.w	r2, r0, #872	; 0x368
 8002b8c:	4291      	cmp	r1, r2
 8002b8e:	d102      	bne.n	8002b96 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
        button0Clicked();
 8002b90:	6802      	ldr	r2, [r0, #0]
 8002b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b94:	e7f6      	b.n	8002b84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonSend)
 8002b96:	f500 726c 	add.w	r2, r0, #944	; 0x3b0
 8002b9a:	4291      	cmp	r1, r2
 8002b9c:	d102      	bne.n	8002ba4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xac>
        buttonSendClicked();
 8002b9e:	6802      	ldr	r2, [r0, #0]
 8002ba0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ba2:	e7ef      	b.n	8002b84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonSwitch)
 8002ba4:	f500 727e 	add.w	r2, r0, #1016	; 0x3f8
 8002ba8:	4291      	cmp	r1, r2
 8002baa:	d102      	bne.n	8002bb2 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xba>
        buttonSwitchClicked();
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bb0:	e7e8      	b.n	8002b84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonDot)
 8002bb2:	f200 5294 	addw	r2, r0, #1428	; 0x594
 8002bb6:	4291      	cmp	r1, r2
 8002bb8:	d102      	bne.n	8002bc0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>
        buttonDotClicked();
 8002bba:	6802      	ldr	r2, [r0, #0]
 8002bbc:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002bbe:	e7e1      	b.n	8002b84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &toggleButtonFreq)
 8002bc0:	f200 52dc 	addw	r2, r0, #1500	; 0x5dc
 8002bc4:	4291      	cmp	r1, r2
 8002bc6:	d102      	bne.n	8002bce <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
        buttonFreqToggled();
 8002bc8:	6802      	ldr	r2, [r0, #0]
 8002bca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002bcc:	e7da      	b.n	8002b84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &toggleButtonMI)
 8002bce:	f200 6214 	addw	r2, r0, #1556	; 0x614
 8002bd2:	4291      	cmp	r1, r2
 8002bd4:	d102      	bne.n	8002bdc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>
        buttonMIToggled();
 8002bd6:	6802      	ldr	r2, [r0, #0]
 8002bd8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bda:	e7d3      	b.n	8002b84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    else if (&src == &buttonPower)
 8002bdc:	f200 624c 	addw	r2, r0, #1612	; 0x64c
 8002be0:	4291      	cmp	r1, r2
 8002be2:	d102      	bne.n	8002bea <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf2>
        buttonPowerClicked();
 8002be4:	6802      	ldr	r2, [r0, #0]
 8002be6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002be8:	e7cc      	b.n	8002b84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8c>
    }
}
 8002bea:	4770      	bx	lr

08002bec <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8002bee:	6002      	str	r2, [r0, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002bf6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8002bfa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002bfe:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c06:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	0801e500 	.word	0x0801e500

08002c10 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8002c10:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002c12:	b570      	push	{r4, r5, r6, lr}
 8002c14:	4604      	mov	r4, r0
        setX(x);
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 8002c18:	4615      	mov	r5, r2
        setX(x);
 8002c1a:	4798      	blx	r3
        setY(y);
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	4620      	mov	r0, r4
 8002c20:	4629      	mov	r1, r5
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 8002c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002c28:	4718      	bx	r3

08002c2a <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002c2a:	b570      	push	{r4, r5, r6, lr}
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	461d      	mov	r5, r3
 8002c30:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002c34:	f7ff ffec 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	4798      	blx	r3
        setHeight(height);
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	4631      	mov	r1, r6
 8002c46:	4620      	mov	r0, r4
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 8002c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002c4e:	4718      	bx	r3

08002c50 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8002c54:	2226      	movs	r2, #38	; 0x26
 8002c56:	2100      	movs	r1, #0
 8002c58:	f018 fa9c 	bl	801b194 <memset>
class Widget : public Drawable
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff ffc5 	bl	8002bec <_ZN8touchgfx8DrawableC1Ev>
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8002c64:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	23ff      	movs	r3, #255	; 0xff
 8002c6a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8002c72:	bd10      	pop	{r4, pc}
 8002c74:	0801defc 	.word	0x0801defc

08002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8002c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8002c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 8002c7e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
 8002c80:	4606      	mov	r6, r0
        if (typedText.hasValidId())
 8002c82:	4299      	cmp	r1, r3
 8002c84:	d033      	beq.n	8002cee <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b92b      	cbnz	r3, 8002c98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8002c8e:	21ae      	movs	r1, #174	; 0xae
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8002c92:	481c      	ldr	r0, [pc, #112]	; (8002d04 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
 8002c94:	f018 f9f2 	bl	801b07c <__assert_func>
 8002c98:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
 8002c9a:	8812      	ldrh	r2, [r2, #0]
 8002c9c:	428a      	cmp	r2, r1
 8002c9e:	d803      	bhi.n	8002ca8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
 8002ca2:	21af      	movs	r1, #175	; 0xaf
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 8002ca6:	e7f4      	b.n	8002c92 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
 8002ca8:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8002cac:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	f000 fe42 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	9001      	str	r0, [sp, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	4798      	blx	r3
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	4604      	mov	r4, r0
 8002ccc:	9901      	ldr	r1, [sp, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	4798      	blx	r3
 8002cd4:	fb14 f400 	smulbb	r4, r4, r0
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	4628      	mov	r0, r5
 8002cdc:	b2e4      	uxtb	r4, r4
 8002cde:	9901      	ldr	r1, [sp, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	4798      	blx	r3
 8002ce4:	4404      	add	r4, r0
 8002ce6:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8002cea:	b002      	add	sp, #8
 8002cec:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8002cf4:	e7f9      	b.n	8002cea <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
 8002cf6:	bf00      	nop
 8002cf8:	24006c0c 	.word	0x24006c0c
 8002cfc:	0801cd10 	.word	0x0801cd10
 8002d00:	0801cd52 	.word	0x0801cd52
 8002d04:	0801cd80 	.word	0x0801cd80
 8002d08:	24006c10 	.word	0x24006c10
 8002d0c:	0801cdc7 	.word	0x0801cdc7
 8002d10:	24006c14 	.word	0x24006c14
 8002d14:	24006c18 	.word	0x24006c18

08002d18 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8002d1c:	2226      	movs	r2, #38	; 0x26
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f018 fa38 	bl	801b194 <memset>
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff ff61 	bl	8002bec <_ZN8touchgfx8DrawableC1Ev>
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <_ZN8touchgfx8TextAreaC1Ev+0x30>)
 8002d2c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8002d30:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8002d32:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <_ZN8touchgfx8TextAreaC1Ev+0x34>)
 8002d36:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8002d44:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8002d46:	bd10      	pop	{r4, pc}
 8002d48:	0801de54 	.word	0x0801de54
 8002d4c:	0801c910 	.word	0x0801c910

08002d50 <_ZN8touchgfx12ToggleButtonC1Ev>:
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 8002d50:	b510      	push	{r4, lr}
 8002d52:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002d54:	2226      	movs	r2, #38	; 0x26
 8002d56:	2100      	movs	r1, #0
 8002d58:	f018 fa1c 	bl	801b194 <memset>
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ff45 	bl	8002bec <_ZN8touchgfx8DrawableC1Ev>
 8002d62:	2300      	movs	r3, #0
 8002d64:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <_ZN8touchgfx12ToggleButtonC1Ev+0x38>)
 8002d66:	4620      	mov	r0, r4
 8002d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d6a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        touchable = touch;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	6022      	str	r2, [r4, #0]
 8002d72:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d7a:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002d7c:	8623      	strh	r3, [r4, #48]	; 0x30
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002d7e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8002d82:	86a3      	strh	r3, [r4, #52]	; 0x34
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	0801dd40 	.word	0x0801dd40

08002d8c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d90:	4604      	mov	r4, r0
        : presenter(0)
 8002d92:	2700      	movs	r7, #0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8002d94:	4dea      	ldr	r5, [pc, #936]	; (8003140 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
 8002d96:	f04f 0a06 	mov.w	sl, #6
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002d9a:	f504 6bd1 	add.w	fp, r4, #1672	; 0x688
 8002d9e:	f04f 0907 	mov.w	r9, #7
    button7.setAction(buttonCallback);
 8002da2:	f204 66c4 	addw	r6, r4, #1732	; 0x6c4
class TypedText
 8002da6:	f04f 0805 	mov.w	r8, #5
Screen1ViewBase::Screen1ViewBase() :
 8002daa:	ed2d 8b10 	vpush	{d8-d15}
 8002dae:	b093      	sub	sp, #76	; 0x4c
 8002db0:	f00d fde4 	bl	801097c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002db4:	4622      	mov	r2, r4
 8002db6:	4be3      	ldr	r3, [pc, #908]	; (8003144 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
 8002db8:	63e7      	str	r7, [r4, #60]	; 0x3c
 8002dba:	f842 3b40 	str.w	r3, [r2], #64
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	ee08 2a10 	vmov	s16, r2
 8002dc4:	f7ff ff44 	bl	8002c50 <_ZN8touchgfx3BoxC1Ev>
 8002dc8:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8002dcc:	4618      	mov	r0, r3
 8002dce:	9308      	str	r3, [sp, #32]
 8002dd0:	f7ff ff3e 	bl	8002c50 <_ZN8touchgfx3BoxC1Ev>
 8002dd4:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8002dd8:	4618      	mov	r0, r3
 8002dda:	ee08 3a90 	vmov	s17, r3
 8002dde:	f00a fe97 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002de2:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 8002de6:	4618      	mov	r0, r3
 8002de8:	ee09 3a10 	vmov	s18, r3
 8002dec:	f00a fe90 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002df0:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8002df4:	4618      	mov	r0, r3
 8002df6:	ee09 3a90 	vmov	s19, r3
 8002dfa:	f00a fe89 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002dfe:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8002e02:	4618      	mov	r0, r3
 8002e04:	ee0a 3a10 	vmov	s20, r3
 8002e08:	f00a fe82 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e0c:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8002e10:	4618      	mov	r0, r3
 8002e12:	ee0a 3a90 	vmov	s21, r3
 8002e16:	f00a fe7b 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e1a:	f504 7300 	add.w	r3, r4, #512	; 0x200
 8002e1e:	4618      	mov	r0, r3
 8002e20:	ee0b 3a10 	vmov	s22, r3
 8002e24:	f00a fe74 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e28:	f504 7312 	add.w	r3, r4, #584	; 0x248
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	ee0b 3a90 	vmov	s23, r3
 8002e32:	f00a fe6d 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e36:	f504 7324 	add.w	r3, r4, #656	; 0x290
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	ee0c 3a10 	vmov	s24, r3
 8002e40:	f00a fe66 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e44:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 8002e48:	4618      	mov	r0, r3
 8002e4a:	ee0c 3a90 	vmov	s25, r3
 8002e4e:	f00a fe5f 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e52:	f504 7348 	add.w	r3, r4, #800	; 0x320
 8002e56:	4618      	mov	r0, r3
 8002e58:	ee0d 3a10 	vmov	s26, r3
 8002e5c:	f00a fe58 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e60:	f504 735a 	add.w	r3, r4, #872	; 0x368
 8002e64:	4618      	mov	r0, r3
 8002e66:	ee0d 3a90 	vmov	s27, r3
 8002e6a:	f00a fe51 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e6e:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 8002e72:	4618      	mov	r0, r3
 8002e74:	ee0e 3a10 	vmov	s28, r3
 8002e78:	f00a fe4a 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002e7c:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 8002e80:	4618      	mov	r0, r3
 8002e82:	ee0f 3a10 	vmov	s30, r3
 8002e86:	f00a fcd7 	bl	800d838 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8002e8a:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8002e8e:	4618      	mov	r0, r3
 8002e90:	9309      	str	r3, [sp, #36]	; 0x24
 8002e92:	f7ff fedd 	bl	8002c50 <_ZN8touchgfx3BoxC1Ev>
 8002e96:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 8002e9a:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f8c4 7460 	str.w	r7, [r4, #1120]	; 0x460
 8002ea4:	f8a4 7464 	strh.w	r7, [r4, #1124]	; 0x464
 8002ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8002eaa:	f7ff fed1 	bl	8002c50 <_ZN8touchgfx3BoxC1Ev>
 8002eae:	f204 439c 	addw	r3, r4, #1180	; 0x49c
 8002eb2:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
 8002eb6:	f8c4 7494 	str.w	r7, [r4, #1172]	; 0x494
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f8a4 7498 	strh.w	r7, [r4, #1176]	; 0x498
 8002ec0:	ee0f 3a90 	vmov	s31, r3
 8002ec4:	4da0      	ldr	r5, [pc, #640]	; (8003148 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 8002ec6:	f7ff ff27 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
 8002eca:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 8002ece:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f8c4 74d8 	str.w	r7, [r4, #1240]	; 0x4d8
 8002ed8:	9302      	str	r3, [sp, #8]
 8002eda:	f7ff ff1d 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
 8002ede:	f204 531c 	addw	r3, r4, #1308	; 0x51c
 8002ee2:	f8c4 54dc 	str.w	r5, [r4, #1244]	; 0x4dc
 8002ee6:	f8c4 7518 	str.w	r7, [r4, #1304]	; 0x518
    __background.setPosition(0, 0, 480, 272);
 8002eea:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	9303      	str	r3, [sp, #12]
 8002ef2:	f7ff ff11 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
 8002ef6:	f504 63ab 	add.w	r3, r4, #1368	; 0x558
 8002efa:	4618      	mov	r0, r3
 8002efc:	9304      	str	r3, [sp, #16]
 8002efe:	f7ff ff0b 	bl	8002d18 <_ZN8touchgfx8TextAreaC1Ev>
 8002f02:	f204 5394 	addw	r3, r4, #1428	; 0x594
 8002f06:	4618      	mov	r0, r3
 8002f08:	ee0e 3a90 	vmov	s29, r3
 8002f0c:	f00a fe00 	bl	800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f10:	f204 53dc 	addw	r3, r4, #1500	; 0x5dc
 8002f14:	4618      	mov	r0, r3
 8002f16:	9305      	str	r3, [sp, #20]
 8002f18:	f7ff ff1a 	bl	8002d50 <_ZN8touchgfx12ToggleButtonC1Ev>
 8002f1c:	f204 6314 	addw	r3, r4, #1556	; 0x614
 8002f20:	4618      	mov	r0, r3
 8002f22:	9306      	str	r3, [sp, #24]
 8002f24:	f7ff ff14 	bl	8002d50 <_ZN8touchgfx12ToggleButtonC1Ev>
 8002f28:	f204 634c 	addw	r3, r4, #1612	; 0x64c
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	9307      	str	r3, [sp, #28]
 8002f30:	f00a fc82 	bl	800d838 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8002f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f38:	a910      	add	r1, sp, #64	; 0x40
 8002f3a:	4658      	mov	r0, fp
 8002f3c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8002f40:	f009 fd4e 	bl	800c9e0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8002f44:	4b81      	ldr	r3, [pc, #516]	; (800314c <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
    __background.setPosition(0, 0, 480, 272);
 8002f46:	463a      	mov	r2, r7
 8002f48:	4639      	mov	r1, r7
 8002f4a:	ee18 0a10 	vmov	r0, s16
 8002f4e:	f8c4 36c4 	str.w	r3, [r4, #1732]	; 0x6c4
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8002f54:	9500      	str	r5, [sp, #0]
 8002f56:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
 8002f5a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f5e:	f8c4 46c8 	str.w	r4, [r4, #1736]	; 0x6c8
 8002f62:	f8c4 76d0 	str.w	r7, [r4, #1744]	; 0x6d0
 8002f66:	f7ff fe60 	bl	8002c2a <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8002f6a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 8002f6e:	463a      	mov	r2, r7
 8002f70:	4639      	mov	r1, r7
 8002f72:	9808      	ldr	r0, [sp, #32]
 8002f74:	66a3      	str	r3, [r4, #104]	; 0x68
 8002f76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f7a:	9500      	str	r5, [sp, #0]
        color = col;
 8002f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8002f80:	f7ff fe53 	bl	8002c2a <_ZN8touchgfx8Drawable11setPositionEssss>
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
    button7.setXY(0, 16);
 8002f86:	2210      	movs	r2, #16
 8002f88:	4639      	mov	r1, r7
 8002f8a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8002f8e:	ee18 0a90 	vmov	r0, s17
 8002f92:	f7ff fe3d 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button7.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8002f96:	aa10      	add	r2, sp, #64	; 0x40
 8002f98:	a90f      	add	r1, sp, #60	; 0x3c
 8002f9a:	ee18 0a90 	vmov	r0, s17
 8002f9e:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8002fa2:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8002fa6:	f00a f947 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8002faa:	ee18 0a90 	vmov	r0, s17
 8002fae:	f8a4 70d0 	strh.w	r7, [r4, #208]	; 0xd0
 8002fb2:	f7ff fe61 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8.setXY(60, 16);
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	213c      	movs	r1, #60	; 0x3c
 8002fba:	ee19 0a10 	vmov	r0, s18
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8002fbe:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
        colorPressed = col;
 8002fc2:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
 8002fc6:	f7ff fe23 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button8.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8002fca:	a90f      	add	r1, sp, #60	; 0x3c
 8002fcc:	aa10      	add	r2, sp, #64	; 0x40
 8002fce:	ee19 0a10 	vmov	r0, s18
 8002fd2:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8002fd6:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8002fda:	f00a f92d 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8002fde:	f04f 0201 	mov.w	r2, #1
        updateTextPosition();
 8002fe2:	ee19 0a10 	vmov	r0, s18
 8002fe6:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
 8002fea:	f7ff fe45 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9.setXY(120, 16);
 8002fee:	2210      	movs	r2, #16
 8002ff0:	2178      	movs	r1, #120	; 0x78
 8002ff2:	ee19 0a90 	vmov	r0, s19
 8002ff6:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
        colorPressed = col;
 8002ffa:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
 8002ffe:	f7ff fe07 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button9.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003002:	a90f      	add	r1, sp, #60	; 0x3c
 8003004:	aa10      	add	r2, sp, #64	; 0x40
 8003006:	ee19 0a90 	vmov	r0, s19
 800300a:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800300e:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003012:	f00a f911 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003016:	f04f 0202 	mov.w	r2, #2
        updateTextPosition();
 800301a:	ee19 0a90 	vmov	r0, s19
 800301e:	f8a4 2160 	strh.w	r2, [r4, #352]	; 0x160
 8003022:	f7ff fe29 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4.setXY(0, 76);
 8003026:	224c      	movs	r2, #76	; 0x4c
 8003028:	4639      	mov	r1, r7
 800302a:	ee1a 0a10 	vmov	r0, s20
 800302e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
        colorPressed = col;
 8003032:	e9c4 5559 	strd	r5, r5, [r4, #356]	; 0x164
 8003036:	f7ff fdeb 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button4.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800303a:	a90f      	add	r1, sp, #60	; 0x3c
 800303c:	aa10      	add	r2, sp, #64	; 0x40
 800303e:	ee1a 0a10 	vmov	r0, s20
 8003042:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003046:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800304a:	f00a f8f5 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800304e:	f04f 0203 	mov.w	r2, #3
        updateTextPosition();
 8003052:	ee1a 0a10 	vmov	r0, s20
 8003056:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
 800305a:	f7ff fe0d 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5.setXY(60, 76);
 800305e:	224c      	movs	r2, #76	; 0x4c
 8003060:	213c      	movs	r1, #60	; 0x3c
 8003062:	ee1a 0a90 	vmov	r0, s21
 8003066:	f8c4 6198 	str.w	r6, [r4, #408]	; 0x198
        colorPressed = col;
 800306a:	e9c4 556b 	strd	r5, r5, [r4, #428]	; 0x1ac
 800306e:	f7ff fdcf 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button5.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003072:	a910      	add	r1, sp, #64	; 0x40
 8003074:	ee1a 0a90 	vmov	r0, s21
 8003078:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800307c:	460a      	mov	r2, r1
 800307e:	a90f      	add	r1, sp, #60	; 0x3c
 8003080:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003084:	f00a f8d8 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003088:	f04f 0104 	mov.w	r1, #4
        updateTextPosition();
 800308c:	ee1a 0a90 	vmov	r0, s21
 8003090:	f8a4 11f0 	strh.w	r1, [r4, #496]	; 0x1f0
 8003094:	f7ff fdf0 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6.setXY(120, 76);
 8003098:	224c      	movs	r2, #76	; 0x4c
 800309a:	2178      	movs	r1, #120	; 0x78
 800309c:	ee1b 0a10 	vmov	r0, s22
 80030a0:	f8c4 61e0 	str.w	r6, [r4, #480]	; 0x1e0
        colorPressed = col;
 80030a4:	e9c4 557d 	strd	r5, r5, [r4, #500]	; 0x1f4
 80030a8:	f7ff fdb2 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button6.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80030ac:	a910      	add	r1, sp, #64	; 0x40
 80030ae:	ee1b 0a10 	vmov	r0, s22
 80030b2:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80030b6:	460a      	mov	r2, r1
 80030b8:	a90f      	add	r1, sp, #60	; 0x3c
 80030ba:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 80030be:	f00a f8bb 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80030c2:	ee1b 0a10 	vmov	r0, s22
 80030c6:	f8a4 8238 	strh.w	r8, [r4, #568]	; 0x238
 80030ca:	f7ff fdd5 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1.setXY(0, 136);
 80030ce:	2288      	movs	r2, #136	; 0x88
 80030d0:	4639      	mov	r1, r7
 80030d2:	ee1b 0a90 	vmov	r0, s23
 80030d6:	f8c4 6228 	str.w	r6, [r4, #552]	; 0x228
        colorPressed = col;
 80030da:	e9c4 558f 	strd	r5, r5, [r4, #572]	; 0x23c
 80030de:	f7ff fd97 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80030e2:	a910      	add	r1, sp, #64	; 0x40
 80030e4:	ee1b 0a90 	vmov	r0, s23
 80030e8:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80030ec:	460a      	mov	r2, r1
 80030ee:	a90f      	add	r1, sp, #60	; 0x3c
 80030f0:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 80030f4:	f00a f8a0 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80030f8:	ee1b 0a90 	vmov	r0, s23
 80030fc:	f8a4 a280 	strh.w	sl, [r4, #640]	; 0x280
 8003100:	f7ff fdba 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2.setXY(60, 136);
 8003104:	2288      	movs	r2, #136	; 0x88
 8003106:	213c      	movs	r1, #60	; 0x3c
 8003108:	ee1c 0a10 	vmov	r0, s24
 800310c:	f8c4 6270 	str.w	r6, [r4, #624]	; 0x270
        colorPressed = col;
 8003110:	e9c4 55a1 	strd	r5, r5, [r4, #644]	; 0x284
 8003114:	f7ff fd7c 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003118:	a910      	add	r1, sp, #64	; 0x40
 800311a:	ee1c 0a10 	vmov	r0, s24
 800311e:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003122:	460a      	mov	r2, r1
 8003124:	a90f      	add	r1, sp, #60	; 0x3c
 8003126:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800312a:	f00a f885 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 800312e:	ee1c 0a10 	vmov	r0, s24
 8003132:	f8a4 92c8 	strh.w	r9, [r4, #712]	; 0x2c8
 8003136:	f7ff fd9f 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3.setXY(120, 136);
 800313a:	2288      	movs	r2, #136	; 0x88
 800313c:	2178      	movs	r1, #120	; 0x78
 800313e:	e00b      	b.n	8003158 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8003140:	0801e03c 	.word	0x0801e03c
 8003144:	0801ce3c 	.word	0x0801ce3c
 8003148:	0801df94 	.word	0x0801df94
 800314c:	0801ce24 	.word	0x0801ce24
 8003150:	08002af9 	.word	0x08002af9
 8003154:	ff570e0e 	.word	0xff570e0e
 8003158:	ee1c 0a90 	vmov	r0, s25
 800315c:	f8c4 62b8 	str.w	r6, [r4, #696]	; 0x2b8
        colorPressed = col;
 8003160:	e9c4 55b3 	strd	r5, r5, [r4, #716]	; 0x2cc
 8003164:	f7ff fd54 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003168:	a910      	add	r1, sp, #64	; 0x40
 800316a:	ee1c 0a90 	vmov	r0, s25
 800316e:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003172:	460a      	mov	r2, r1
 8003174:	a90f      	add	r1, sp, #60	; 0x3c
 8003176:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800317a:	f00a f85d 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800317e:	f04f 0108 	mov.w	r1, #8
        updateTextPosition();
 8003182:	ee1c 0a90 	vmov	r0, s25
 8003186:	f8a4 1310 	strh.w	r1, [r4, #784]	; 0x310
 800318a:	f7ff fd75 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear.setXY(0, 196);
 800318e:	22c4      	movs	r2, #196	; 0xc4
 8003190:	4639      	mov	r1, r7
 8003192:	ee1d 0a10 	vmov	r0, s26
 8003196:	f8c4 6300 	str.w	r6, [r4, #768]	; 0x300
        colorPressed = col;
 800319a:	e9c4 55c5 	strd	r5, r5, [r4, #788]	; 0x314
 800319e:	f7ff fd37 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80031a2:	a910      	add	r1, sp, #64	; 0x40
 80031a4:	ee1d 0a10 	vmov	r0, s26
 80031a8:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80031ac:	460a      	mov	r2, r1
 80031ae:	a90f      	add	r1, sp, #60	; 0x3c
 80031b0:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 80031b4:	f00a f840 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80031b8:	f04f 0109 	mov.w	r1, #9
        updateTextPosition();
 80031bc:	ee1d 0a10 	vmov	r0, s26
 80031c0:	f8a4 1358 	strh.w	r1, [r4, #856]	; 0x358
 80031c4:	f7ff fd58 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0.setXY(60, 196);
 80031c8:	22c4      	movs	r2, #196	; 0xc4
 80031ca:	213c      	movs	r1, #60	; 0x3c
 80031cc:	ee1d 0a90 	vmov	r0, s27
 80031d0:	f8c4 6348 	str.w	r6, [r4, #840]	; 0x348
        colorPressed = col;
 80031d4:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
 80031d8:	f7ff fd1a 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80031dc:	a910      	add	r1, sp, #64	; 0x40
 80031de:	ee1d 0a90 	vmov	r0, s27
 80031e2:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80031e6:	460a      	mov	r2, r1
 80031e8:	a90f      	add	r1, sp, #60	; 0x3c
 80031ea:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 80031ee:	f00a f823 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80031f2:	230a      	movs	r3, #10
        updateTextPosition();
 80031f4:	ee1d 0a90 	vmov	r0, s27
 80031f8:	f8a4 33a0 	strh.w	r3, [r4, #928]	; 0x3a0
 80031fc:	f7ff fd3c 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend.setXY(120, 196);
 8003200:	22c4      	movs	r2, #196	; 0xc4
 8003202:	2178      	movs	r1, #120	; 0x78
 8003204:	ee1e 0a10 	vmov	r0, s28
 8003208:	f8c4 6390 	str.w	r6, [r4, #912]	; 0x390
        colorPressed = col;
 800320c:	e9c4 55e9 	strd	r5, r5, [r4, #932]	; 0x3a4
 8003210:	f7ff fcfe 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003214:	a910      	add	r1, sp, #64	; 0x40
 8003216:	ee1e 0a10 	vmov	r0, s28
 800321a:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 800321e:	460a      	mov	r2, r1
 8003220:	a90f      	add	r1, sp, #60	; 0x3c
 8003222:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003226:	f00a f807 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800322a:	230b      	movs	r3, #11
        updateTextPosition();
 800322c:	ee1e 0a10 	vmov	r0, s28
 8003230:	f8a4 33e8 	strh.w	r3, [r4, #1000]	; 0x3e8
 8003234:	f7ff fd20 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSwitch.setXY(180, 196);
 8003238:	22c4      	movs	r2, #196	; 0xc4
 800323a:	21b4      	movs	r1, #180	; 0xb4
 800323c:	ee1f 0a10 	vmov	r0, s30
 8003240:	f8c4 63d8 	str.w	r6, [r4, #984]	; 0x3d8
        colorPressed = col;
 8003244:	e9c4 55fb 	strd	r5, r5, [r4, #1004]	; 0x3ec
 8003248:	f7ff fce2 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 800324c:	f04f 0203 	mov.w	r2, #3
    buttonSwitch.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID));
 8003250:	a90d      	add	r1, sp, #52	; 0x34
 8003252:	ee1f 0a10 	vmov	r0, s30
 8003256:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800325a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800325e:	aa10      	add	r2, sp, #64	; 0x40
 8003260:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	aa0f      	add	r2, sp, #60	; 0x3c
 8003268:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
 800326c:	4613      	mov	r3, r2
 800326e:	aa0e      	add	r2, sp, #56	; 0x38
 8003270:	f00a fa3f 	bl	800d6f2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8003274:	f04f 020f 	mov.w	r2, #15
    boxWithBorder1_1.setPosition(247, 5, 121, 82);
 8003278:	2379      	movs	r3, #121	; 0x79
 800327a:	21f7      	movs	r1, #247	; 0xf7
 800327c:	f8a4 2430 	strh.w	r2, [r4, #1072]	; 0x430
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
    {
        iconY = y;
 8003280:	f04f 0210 	mov.w	r2, #16
 8003284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003286:	f8a4 2432 	strh.w	r2, [r4, #1074]	; 0x432
 800328a:	2252      	movs	r2, #82	; 0x52
 800328c:	f8c4 6420 	str.w	r6, [r4, #1056]	; 0x420
 8003290:	9200      	str	r2, [sp, #0]
 8003292:	4642      	mov	r2, r8
 8003294:	f7ff fcc9 	bl	8002c2a <_ZN8touchgfx8Drawable11setPositionEssss>
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
    {
        borderColor = color;
 8003298:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800329c:	4bd1      	ldr	r3, [pc, #836]	; (80035e4 <_ZN15Screen1ViewBaseC1Ev+0x858>)
    boxWithBorder1.setPosition(372, 5, 100, 82);
 800329e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80032a2:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
 80032a6:	2252      	movs	r2, #82	; 0x52
 80032a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80032aa:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
 80032ae:	2364      	movs	r3, #100	; 0x64
 80032b0:	9200      	str	r2, [sp, #0]
 80032b2:	4642      	mov	r2, r8
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80032b4:	f8a4 8464 	strh.w	r8, [r4, #1124]	; 0x464
 80032b8:	f7ff fcb7 	bl	8002c2a <_ZN8touchgfx8Drawable11setPositionEssss>
 80032bc:	4bc9      	ldr	r3, [pc, #804]	; (80035e4 <_ZN15Screen1ViewBaseC1Ev+0x858>)
    textAreaFreq.setPosition(255, 40, 104, 35);
 80032be:	2228      	movs	r2, #40	; 0x28
 80032c0:	21ff      	movs	r1, #255	; 0xff
 80032c2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
        borderColor = color;
 80032c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80032ca:	ee1f 0a90 	vmov	r0, s31
        borderSize = size;
 80032ce:	f8a4 8498 	strh.w	r8, [r4, #1176]	; 0x498
        borderColor = color;
 80032d2:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
 80032d6:	2323      	movs	r3, #35	; 0x23
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2368      	movs	r3, #104	; 0x68
 80032dc:	f7ff fca5 	bl	8002c2a <_ZN8touchgfx8Drawable11setPositionEssss>
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 80032e0:	f204 63b4 	addw	r3, r4, #1716	; 0x6b4
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80032e4:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
 80032e8:	930b      	str	r3, [sp, #44]	; 0x2c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80032ea:	4bbf      	ldr	r3, [pc, #764]	; (80035e8 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80032ec:	f8a4 74d0 	strh.w	r7, [r4, #1232]	; 0x4d0
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b92b      	cbnz	r3, 8003300 <_ZN15Screen1ViewBaseC1Ev+0x574>
 80032f4:	4bbd      	ldr	r3, [pc, #756]	; (80035ec <_ZN15Screen1ViewBaseC1Ev+0x860>)
 80032f6:	21ae      	movs	r1, #174	; 0xae
 80032f8:	4abd      	ldr	r2, [pc, #756]	; (80035f0 <_ZN15Screen1ViewBaseC1Ev+0x864>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80032fa:	48be      	ldr	r0, [pc, #760]	; (80035f4 <_ZN15Screen1ViewBaseC1Ev+0x868>)
 80032fc:	f017 febe 	bl	801b07c <__assert_func>
 8003300:	4bbd      	ldr	r3, [pc, #756]	; (80035f8 <_ZN15Screen1ViewBaseC1Ev+0x86c>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	2b10      	cmp	r3, #16
 8003306:	d803      	bhi.n	8003310 <_ZN15Screen1ViewBaseC1Ev+0x584>
 8003308:	4bbc      	ldr	r3, [pc, #752]	; (80035fc <_ZN15Screen1ViewBaseC1Ev+0x870>)
 800330a:	21af      	movs	r1, #175	; 0xaf
 800330c:	4ab8      	ldr	r2, [pc, #736]	; (80035f0 <_ZN15Screen1ViewBaseC1Ev+0x864>)
 800330e:	e7f4      	b.n	80032fa <_ZN15Screen1ViewBaseC1Ev+0x56e>
        return texts->getText(typedTextId);
 8003310:	4bbb      	ldr	r3, [pc, #748]	; (8003600 <_ZN15Screen1ViewBaseC1Ev+0x874>)
 8003312:	2110      	movs	r1, #16
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	f000 fb13 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800331a:	4aba      	ldr	r2, [pc, #744]	; (8003604 <_ZN15Screen1ViewBaseC1Ev+0x878>)
 800331c:	4603      	mov	r3, r0
 800331e:	2103      	movs	r1, #3
 8003320:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003322:	f00e ffff 	bl	8012324 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003326:	4bb8      	ldr	r3, [pc, #736]	; (8003608 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
 8003328:	990b      	ldr	r1, [sp, #44]	; 0x2c
    textAreaFreq.setTypedText(touchgfx::TypedText(T_FREQ));
 800332a:	ee1f 0a90 	vmov	r0, s31
 800332e:	9310      	str	r3, [sp, #64]	; 0x40
 8003330:	230e      	movs	r3, #14
 8003332:	f8c4 14d8 	str.w	r1, [r4, #1240]	; 0x4d8
 8003336:	a910      	add	r1, sp, #64	; 0x40
 8003338:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800333c:	f009 ff3c 	bl	800d1b8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreaMI.setPosition(380, 46, 84, 31);
 8003340:	231f      	movs	r3, #31
 8003342:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003346:	222e      	movs	r2, #46	; 0x2e
 8003348:	9802      	ldr	r0, [sp, #8]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2354      	movs	r3, #84	; 0x54
 800334e:	f7ff fc6c 	bl	8002c2a <_ZN8touchgfx8Drawable11setPositionEssss>
    Unicode::snprintf(textAreaMIBuffer, TEXTAREAMI_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LXQE).getText());
 8003352:	f204 61ba 	addw	r1, r4, #1722	; 0x6ba
        this->color = color;
 8003356:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 800335a:	910b      	str	r1, [sp, #44]	; 0x2c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800335c:	49a2      	ldr	r1, [pc, #648]	; (80035e8 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
        linespace = space;
 800335e:	f8a4 7510 	strh.w	r7, [r4, #1296]	; 0x510
 8003362:	680b      	ldr	r3, [r1, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0c5      	beq.n	80032f4 <_ZN15Screen1ViewBaseC1Ev+0x568>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8003368:	49a3      	ldr	r1, [pc, #652]	; (80035f8 <_ZN15Screen1ViewBaseC1Ev+0x86c>)
 800336a:	880b      	ldrh	r3, [r1, #0]
 800336c:	2b11      	cmp	r3, #17
 800336e:	d9cb      	bls.n	8003308 <_ZN15Screen1ViewBaseC1Ev+0x57c>
        return texts->getText(typedTextId);
 8003370:	4aa3      	ldr	r2, [pc, #652]	; (8003600 <_ZN15Screen1ViewBaseC1Ev+0x874>)
 8003372:	2111      	movs	r1, #17
 8003374:	6810      	ldr	r0, [r2, #0]
 8003376:	f000 fae3 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800337a:	4aa2      	ldr	r2, [pc, #648]	; (8003604 <_ZN15Screen1ViewBaseC1Ev+0x878>)
 800337c:	4603      	mov	r3, r0
 800337e:	2104      	movs	r1, #4
 8003380:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003382:	f00e ffcf 	bl	8012324 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        : typedTextId(id)
 8003388:	4b9f      	ldr	r3, [pc, #636]	; (8003608 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
    textAreaMI.setTypedText(touchgfx::TypedText(T_MI));
 800338a:	a910      	add	r1, sp, #64	; 0x40
 800338c:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 8003390:	f04f 020f 	mov.w	r2, #15
 8003394:	9802      	ldr	r0, [sp, #8]
 8003396:	9310      	str	r3, [sp, #64]	; 0x40
 8003398:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 800339c:	f009 ff0c 	bl	800d1b8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2.setXY(402, 15);
 80033a0:	220f      	movs	r2, #15
 80033a2:	9803      	ldr	r0, [sp, #12]
 80033a4:	f44f 71c9 	mov.w	r1, #402	; 0x192
 80033a8:	f7ff fc32 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 80033ac:	4b96      	ldr	r3, [pc, #600]	; (8003608 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IO59));
 80033ae:	a910      	add	r1, sp, #64	; 0x40
 80033b0:	9803      	ldr	r0, [sp, #12]
 80033b2:	9310      	str	r3, [sp, #64]	; 0x40
 80033b4:	230c      	movs	r3, #12
        this->color = color;
 80033b6:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
        linespace = space;
 80033ba:	f8a4 7550 	strh.w	r7, [r4, #1360]	; 0x550
 80033be:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80033c2:	f009 fef9 	bl	800d1b8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2_1.setXY(255, 15);
 80033c6:	220f      	movs	r2, #15
 80033c8:	9804      	ldr	r0, [sp, #16]
 80033ca:	21ff      	movs	r1, #255	; 0xff
 80033cc:	f7ff fc20 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 80033d0:	4b8d      	ldr	r3, [pc, #564]	; (8003608 <_ZN15Screen1ViewBaseC1Ev+0x87c>)
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X3GJ));
 80033d2:	a910      	add	r1, sp, #64	; 0x40
 80033d4:	9804      	ldr	r0, [sp, #16]
 80033d6:	9310      	str	r3, [sp, #64]	; 0x40
 80033d8:	230d      	movs	r3, #13
        this->color = color;
 80033da:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
        linespace = space;
 80033de:	f8a4 758c 	strh.w	r7, [r4, #1420]	; 0x58c
 80033e2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80033e6:	f009 fee7 	bl	800d1b8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonDot.setXY(180, 136);
 80033ea:	ee1e 0a90 	vmov	r0, s29
 80033ee:	2288      	movs	r2, #136	; 0x88
 80033f0:	21b4      	movs	r1, #180	; 0xb4
 80033f2:	f7ff fc0d 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
    buttonDot.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80033f6:	aa10      	add	r2, sp, #64	; 0x40
 80033f8:	a90f      	add	r1, sp, #60	; 0x3c
 80033fa:	ee1e 0a90 	vmov	r0, s29
 80033fe:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003402:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003406:	f009 ff17 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800340a:	2312      	movs	r3, #18
        updateTextPosition();
 800340c:	ee1e 0a90 	vmov	r0, s29
 8003410:	f8a4 35cc 	strh.w	r3, [r4, #1484]	; 0x5cc
 8003414:	f7ff fc30 	bl	8002c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    toggleButtonFreq.setXY(259, 98);
 8003418:	9805      	ldr	r0, [sp, #20]
        color = col;
 800341a:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
 800341e:	2262      	movs	r2, #98	; 0x62
        colorPressed = col;
 8003420:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 8003424:	f240 1103 	movw	r1, #259	; 0x103
 8003428:	f04f 0504 	mov.w	r5, #4
 800342c:	f8c4 65bc 	str.w	r6, [r4, #1468]	; 0x5bc
 8003430:	f7ff fbee 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003434:	aa10      	add	r2, sp, #64	; 0x40
 8003436:	a90f      	add	r1, sp, #60	; 0x3c
 8003438:	9805      	ldr	r0, [sp, #20]
        originalPressed = bitmapPressed;
 800343a:	f8a4 8610 	strh.w	r8, [r4, #1552]	; 0x610
 800343e:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
 8003442:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003446:	f009 fef7 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButtonMI.setXY(374, 98);
 800344a:	9806      	ldr	r0, [sp, #24]
 800344c:	2262      	movs	r2, #98	; 0x62
 800344e:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8003452:	f8c4 6604 	str.w	r6, [r4, #1540]	; 0x604
 8003456:	f7ff fbdb 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 800345a:	aa10      	add	r2, sp, #64	; 0x40
 800345c:	a90f      	add	r1, sp, #60	; 0x3c
 800345e:	9806      	ldr	r0, [sp, #24]
        originalPressed = bitmapPressed;
 8003460:	f8a4 8648 	strh.w	r8, [r4, #1608]	; 0x648
 8003464:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003468:	1d25      	adds	r5, r4, #4
 800346a:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800346e:	f009 fee3 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonPower.setXY(300, 196);
 8003472:	9807      	ldr	r0, [sp, #28]
 8003474:	22c4      	movs	r2, #196	; 0xc4
 8003476:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800347a:	f8c4 663c 	str.w	r6, [r4, #1596]	; 0x63c
 800347e:	f7ff fbc7 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 8003482:	f04f 0308 	mov.w	r3, #8
    buttonPower.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 8003486:	aa0e      	add	r2, sp, #56	; 0x38
 8003488:	a90d      	add	r1, sp, #52	; 0x34
 800348a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800348e:	f04f 0309 	mov.w	r3, #9
 8003492:	9807      	ldr	r0, [sp, #28]
 8003494:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8003498:	f04f 0302 	mov.w	r3, #2
 800349c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 80034a0:	f04f 0301 	mov.w	r3, #1
 80034a4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80034a8:	ab10      	add	r3, sp, #64	; 0x40
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	ab0f      	add	r3, sp, #60	; 0x3c
 80034ae:	f00a f920 	bl	800d6f2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 80034b2:	2347      	movs	r3, #71	; 0x47
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 80034b4:	a910      	add	r1, sp, #64	; 0x40
 80034b6:	4658      	mov	r0, fp
 80034b8:	f8a4 3684 	strh.w	r3, [r4, #1668]	; 0x684
        iconY = y;
 80034bc:	f04f 0310 	mov.w	r3, #16
 80034c0:	f8c4 6674 	str.w	r6, [r4, #1652]	; 0x674
 80034c4:	f8a4 3686 	strh.w	r3, [r4, #1670]	; 0x686
 80034c8:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80034cc:	f00a f9db 	bl	800d886 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(241, 9, 2, 250);
 80034d0:	23fa      	movs	r3, #250	; 0xfa
 80034d2:	2209      	movs	r2, #9
 80034d4:	4658      	mov	r0, fp
 80034d6:	21f1      	movs	r1, #241	; 0xf1
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2302      	movs	r3, #2
 80034dc:	f7ff fba5 	bl	8002c2a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80034e0:	4639      	mov	r1, r7
 80034e2:	4658      	mov	r0, fp
 80034e4:	f009 fa43 	bl	800c96e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80034e8:	ee18 1a10 	vmov	r1, s16
 80034ec:	4628      	mov	r0, r5
 80034ee:	f007 ffb1 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80034f2:	9908      	ldr	r1, [sp, #32]
 80034f4:	4628      	mov	r0, r5
 80034f6:	f007 ffad 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80034fa:	ee18 1a90 	vmov	r1, s17
 80034fe:	4628      	mov	r0, r5
 8003500:	f007 ffa8 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003504:	ee19 1a10 	vmov	r1, s18
 8003508:	4628      	mov	r0, r5
 800350a:	f007 ffa3 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800350e:	ee19 1a90 	vmov	r1, s19
 8003512:	4628      	mov	r0, r5
 8003514:	f007 ff9e 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003518:	ee1a 1a10 	vmov	r1, s20
 800351c:	4628      	mov	r0, r5
 800351e:	f007 ff99 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003522:	ee1a 1a90 	vmov	r1, s21
 8003526:	4628      	mov	r0, r5
 8003528:	f007 ff94 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800352c:	ee1b 1a10 	vmov	r1, s22
 8003530:	4628      	mov	r0, r5
 8003532:	f007 ff8f 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003536:	ee1b 1a90 	vmov	r1, s23
 800353a:	4628      	mov	r0, r5
 800353c:	f007 ff8a 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003540:	ee1c 1a10 	vmov	r1, s24
 8003544:	4628      	mov	r0, r5
 8003546:	f007 ff85 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800354a:	ee1c 1a90 	vmov	r1, s25
 800354e:	4628      	mov	r0, r5
 8003550:	f007 ff80 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003554:	ee1d 1a10 	vmov	r1, s26
 8003558:	4628      	mov	r0, r5
 800355a:	f007 ff7b 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800355e:	ee1d 1a90 	vmov	r1, s27
 8003562:	4628      	mov	r0, r5
 8003564:	f007 ff76 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003568:	ee1e 1a10 	vmov	r1, s28
 800356c:	4628      	mov	r0, r5
 800356e:	f007 ff71 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003572:	ee1f 1a10 	vmov	r1, s30
 8003576:	4628      	mov	r0, r5
 8003578:	f007 ff6c 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800357c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800357e:	4628      	mov	r0, r5
 8003580:	f007 ff68 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003584:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003586:	4628      	mov	r0, r5
 8003588:	f007 ff64 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800358c:	ee1f 1a90 	vmov	r1, s31
 8003590:	4628      	mov	r0, r5
 8003592:	f007 ff5f 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003596:	9902      	ldr	r1, [sp, #8]
 8003598:	4628      	mov	r0, r5
 800359a:	f007 ff5b 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800359e:	9903      	ldr	r1, [sp, #12]
 80035a0:	4628      	mov	r0, r5
 80035a2:	f007 ff57 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035a6:	9904      	ldr	r1, [sp, #16]
 80035a8:	4628      	mov	r0, r5
 80035aa:	f007 ff53 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035ae:	ee1e 1a90 	vmov	r1, s29
 80035b2:	4628      	mov	r0, r5
 80035b4:	f007 ff4e 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035b8:	9905      	ldr	r1, [sp, #20]
 80035ba:	4628      	mov	r0, r5
 80035bc:	f007 ff4a 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035c0:	9906      	ldr	r1, [sp, #24]
 80035c2:	4628      	mov	r0, r5
 80035c4:	f007 ff46 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035c8:	9907      	ldr	r1, [sp, #28]
 80035ca:	4628      	mov	r0, r5
 80035cc:	f007 ff42 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80035d0:	4628      	mov	r0, r5
 80035d2:	4659      	mov	r1, fp
 80035d4:	f007 ff3e 	bl	800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80035d8:	4620      	mov	r0, r4
 80035da:	b013      	add	sp, #76	; 0x4c
 80035dc:	ecbd 8b10 	vpop	{d8-d15}
 80035e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e4:	ff570e0e 	.word	0xff570e0e
 80035e8:	24006c0c 	.word	0x24006c0c
 80035ec:	0801cd10 	.word	0x0801cd10
 80035f0:	0801cd52 	.word	0x0801cd52
 80035f4:	0801cd80 	.word	0x0801cd80
 80035f8:	24006c10 	.word	0x24006c10
 80035fc:	0801cdc7 	.word	0x0801cdc7
 8003600:	24006c18 	.word	0x24006c18
 8003604:	0801ce19 	.word	0x0801ce19
 8003608:	0801c910 	.word	0x0801c910

0800360c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800360c:	4770      	bx	lr
	...

08003610 <_Z23getFont_verdana_10_4bppv>:
{
 8003610:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003612:	4d15      	ldr	r5, [pc, #84]	; (8003668 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003614:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003616:	782c      	ldrb	r4, [r5, #0]
 8003618:	f3bf 8f5b 	dmb	ish
 800361c:	f014 0401 	ands.w	r4, r4, #1
 8003620:	d11e      	bne.n	8003660 <_Z23getFont_verdana_10_4bppv+0x50>
 8003622:	4628      	mov	r0, r5
 8003624:	f017 fc16 	bl	801ae54 <__cxa_guard_acquire>
 8003628:	b1d0      	cbz	r0, 8003660 <_Z23getFont_verdana_10_4bppv+0x50>
 800362a:	233f      	movs	r3, #63	; 0x3f
 800362c:	2201      	movs	r2, #1
 800362e:	490f      	ldr	r1, [pc, #60]	; (800366c <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003630:	9307      	str	r3, [sp, #28]
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003634:	480f      	ldr	r0, [pc, #60]	; (8003674 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003636:	9306      	str	r3, [sp, #24]
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <_Z23getFont_verdana_10_4bppv+0x68>)
 800363a:	9408      	str	r4, [sp, #32]
 800363c:	9403      	str	r4, [sp, #12]
 800363e:	9400      	str	r4, [sp, #0]
 8003640:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003644:	2304      	movs	r3, #4
 8003646:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800364a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800364e:	230a      	movs	r3, #10
 8003650:	f7ff f9b8 	bl	80029c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003654:	4628      	mov	r0, r5
 8003656:	f017 fc09 	bl	801ae6c <__cxa_guard_release>
 800365a:	4808      	ldr	r0, [pc, #32]	; (800367c <_Z23getFont_verdana_10_4bppv+0x6c>)
 800365c:	f017 fd2c 	bl	801b0b8 <atexit>
    return verdana_10_4bpp;
}
 8003660:	4804      	ldr	r0, [pc, #16]	; (8003674 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003662:	b00d      	add	sp, #52	; 0x34
 8003664:	bd30      	pop	{r4, r5, pc}
 8003666:	bf00      	nop
 8003668:	240016ec 	.word	0x240016ec
 800366c:	080208f0 	.word	0x080208f0
 8003670:	08020aa8 	.word	0x08020aa8
 8003674:	240016f0 	.word	0x240016f0
 8003678:	08020ac0 	.word	0x08020ac0
 800367c:	0800360d 	.word	0x0800360d

08003680 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003680:	4770      	bx	lr
	...

08003684 <_Z23getFont_verdana_20_4bppv>:
{
 8003684:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003686:	4d15      	ldr	r5, [pc, #84]	; (80036dc <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8003688:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 12, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800368a:	782c      	ldrb	r4, [r5, #0]
 800368c:	f3bf 8f5b 	dmb	ish
 8003690:	f014 0401 	ands.w	r4, r4, #1
 8003694:	d11f      	bne.n	80036d6 <_Z23getFont_verdana_20_4bppv+0x52>
 8003696:	4628      	mov	r0, r5
 8003698:	f017 fbdc 	bl	801ae54 <__cxa_guard_acquire>
 800369c:	b1d8      	cbz	r0, 80036d6 <_Z23getFont_verdana_20_4bppv+0x52>
 800369e:	233f      	movs	r3, #63	; 0x3f
 80036a0:	2201      	movs	r2, #1
 80036a2:	490f      	ldr	r1, [pc, #60]	; (80036e0 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80036a4:	9307      	str	r3, [sp, #28]
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <_Z23getFont_verdana_20_4bppv+0x60>)
 80036a8:	480f      	ldr	r0, [pc, #60]	; (80036e8 <_Z23getFont_verdana_20_4bppv+0x64>)
 80036aa:	9306      	str	r3, [sp, #24]
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <_Z23getFont_verdana_20_4bppv+0x68>)
 80036ae:	9408      	str	r4, [sp, #32]
 80036b0:	9403      	str	r4, [sp, #12]
 80036b2:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80036b6:	2304      	movs	r3, #4
 80036b8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80036bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	220c      	movs	r2, #12
 80036c4:	2314      	movs	r3, #20
 80036c6:	f7ff f97d 	bl	80029c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80036ca:	4628      	mov	r0, r5
 80036cc:	f017 fbce 	bl	801ae6c <__cxa_guard_release>
 80036d0:	4807      	ldr	r0, [pc, #28]	; (80036f0 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80036d2:	f017 fcf1 	bl	801b0b8 <atexit>
    return verdana_20_4bpp;
}
 80036d6:	4804      	ldr	r0, [pc, #16]	; (80036e8 <_Z23getFont_verdana_20_4bppv+0x64>)
 80036d8:	b00d      	add	sp, #52	; 0x34
 80036da:	bd30      	pop	{r4, r5, pc}
 80036dc:	24001718 	.word	0x24001718
 80036e0:	08020900 	.word	0x08020900
 80036e4:	08020aac 	.word	0x08020aac
 80036e8:	2400171c 	.word	0x2400171c
 80036ec:	08020ac4 	.word	0x08020ac4
 80036f0:	08003681 	.word	0x08003681

080036f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80036f4:	4770      	bx	lr
	...

080036f8 <_Z23getFont_verdana_30_4bppv>:
{
 80036f8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80036fa:	4d15      	ldr	r5, [pc, #84]	; (8003750 <_Z23getFont_verdana_30_4bppv+0x58>)
{
 80036fc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80036fe:	782c      	ldrb	r4, [r5, #0]
 8003700:	f3bf 8f5b 	dmb	ish
 8003704:	f014 0401 	ands.w	r4, r4, #1
 8003708:	d11f      	bne.n	800374a <_Z23getFont_verdana_30_4bppv+0x52>
 800370a:	4628      	mov	r0, r5
 800370c:	f017 fba2 	bl	801ae54 <__cxa_guard_acquire>
 8003710:	b1d8      	cbz	r0, 800374a <_Z23getFont_verdana_30_4bppv+0x52>
 8003712:	233f      	movs	r3, #63	; 0x3f
 8003714:	2201      	movs	r2, #1
 8003716:	490f      	ldr	r1, [pc, #60]	; (8003754 <_Z23getFont_verdana_30_4bppv+0x5c>)
 8003718:	9307      	str	r3, [sp, #28]
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <_Z23getFont_verdana_30_4bppv+0x60>)
 800371c:	480f      	ldr	r0, [pc, #60]	; (800375c <_Z23getFont_verdana_30_4bppv+0x64>)
 800371e:	9306      	str	r3, [sp, #24]
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <_Z23getFont_verdana_30_4bppv+0x68>)
 8003722:	9408      	str	r4, [sp, #32]
 8003724:	9403      	str	r4, [sp, #12]
 8003726:	9400      	str	r4, [sp, #0]
 8003728:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800372c:	2304      	movs	r3, #4
 800372e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003732:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003736:	231e      	movs	r3, #30
 8003738:	2211      	movs	r2, #17
 800373a:	f7ff f943 	bl	80029c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800373e:	4628      	mov	r0, r5
 8003740:	f017 fb94 	bl	801ae6c <__cxa_guard_release>
 8003744:	4807      	ldr	r0, [pc, #28]	; (8003764 <_Z23getFont_verdana_30_4bppv+0x6c>)
 8003746:	f017 fcb7 	bl	801b0b8 <atexit>
    return verdana_30_4bpp;
}
 800374a:	4804      	ldr	r0, [pc, #16]	; (800375c <_Z23getFont_verdana_30_4bppv+0x64>)
 800374c:	b00d      	add	sp, #52	; 0x34
 800374e:	bd30      	pop	{r4, r5, pc}
 8003750:	24001744 	.word	0x24001744
 8003754:	080209a8 	.word	0x080209a8
 8003758:	08020ab8 	.word	0x08020ab8
 800375c:	24001748 	.word	0x24001748
 8003760:	08020ac8 	.word	0x08020ac8
 8003764:	080036f5 	.word	0x080036f5

08003768 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003768:	4770      	bx	lr
	...

0800376c <_Z23getFont_verdana_40_4bppv>:
{
 800376c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800376e:	4d15      	ldr	r5, [pc, #84]	; (80037c4 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003770:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003772:	782c      	ldrb	r4, [r5, #0]
 8003774:	f3bf 8f5b 	dmb	ish
 8003778:	f014 0401 	ands.w	r4, r4, #1
 800377c:	d11e      	bne.n	80037bc <_Z23getFont_verdana_40_4bppv+0x50>
 800377e:	4628      	mov	r0, r5
 8003780:	f017 fb68 	bl	801ae54 <__cxa_guard_acquire>
 8003784:	b1d0      	cbz	r0, 80037bc <_Z23getFont_verdana_40_4bppv+0x50>
 8003786:	233f      	movs	r3, #63	; 0x3f
 8003788:	2201      	movs	r2, #1
 800378a:	490f      	ldr	r1, [pc, #60]	; (80037c8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800378c:	9307      	str	r3, [sp, #28]
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <_Z23getFont_verdana_40_4bppv+0x60>)
 8003790:	480f      	ldr	r0, [pc, #60]	; (80037d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003792:	9306      	str	r3, [sp, #24]
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003796:	9408      	str	r4, [sp, #32]
 8003798:	9403      	str	r4, [sp, #12]
 800379a:	9400      	str	r4, [sp, #0]
 800379c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80037a0:	2304      	movs	r3, #4
 80037a2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80037a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80037aa:	2328      	movs	r3, #40	; 0x28
 80037ac:	f7ff f90a 	bl	80029c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80037b0:	4628      	mov	r0, r5
 80037b2:	f017 fb5b 	bl	801ae6c <__cxa_guard_release>
 80037b6:	4808      	ldr	r0, [pc, #32]	; (80037d8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80037b8:	f017 fc7e 	bl	801b0b8 <atexit>
    return verdana_40_4bpp;
}
 80037bc:	4804      	ldr	r0, [pc, #16]	; (80037d0 <_Z23getFont_verdana_40_4bppv+0x64>)
 80037be:	b00d      	add	sp, #52	; 0x34
 80037c0:	bd30      	pop	{r4, r5, pc}
 80037c2:	bf00      	nop
 80037c4:	24001770 	.word	0x24001770
 80037c8:	08020a98 	.word	0x08020a98
 80037cc:	08020abc 	.word	0x08020abc
 80037d0:	24001774 	.word	0x24001774
 80037d4:	08020acc 	.word	0x08020acc
 80037d8:	08003769 	.word	0x08003769

080037dc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80037dc:	2000      	movs	r0, #0
 80037de:	4770      	bx	lr

080037e0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80037e0:	2000      	movs	r0, #0
 80037e2:	4770      	bx	lr

080037e4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80037e4:	b40e      	push	{r1, r2, r3}
 80037e6:	b503      	push	{r0, r1, lr}
 80037e8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80037ea:	2100      	movs	r1, #0
{
 80037ec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80037f0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80037f2:	f00c fce1 	bl	80101b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80037f6:	b002      	add	sp, #8
 80037f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037fc:	b003      	add	sp, #12
 80037fe:	4770      	bx	lr

08003800 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003800:	b40c      	push	{r2, r3}
 8003802:	b507      	push	{r0, r1, r2, lr}
 8003804:	ab04      	add	r3, sp, #16
 8003806:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800380a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800380c:	f00c fcd4 	bl	80101b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003810:	b003      	add	sp, #12
 8003812:	f85d eb04 	ldr.w	lr, [sp], #4
 8003816:	b002      	add	sp, #8
 8003818:	4770      	bx	lr
	...

0800381c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800381c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800381e:	b510      	push	{r4, lr}
 8003820:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003822:	b373      	cbz	r3, 8003882 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003824:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003826:	b92b      	cbnz	r3, 8003834 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800382a:	21c0      	movs	r1, #192	; 0xc0
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800382e:	4819      	ldr	r0, [pc, #100]	; (8003894 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003830:	f017 fc24 	bl	801b07c <__assert_func>
            return buffer[pos];
 8003834:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003836:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800383a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800383c:	b30b      	cbz	r3, 8003882 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800383e:	f00d ffb9 	bl	80117b4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003842:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003844:	2b01      	cmp	r3, #1
 8003846:	d803      	bhi.n	8003850 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800384a:	21c5      	movs	r1, #197	; 0xc5
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800384e:	e7ee      	b.n	800382e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003850:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003852:	f640 103f 	movw	r0, #2367	; 0x93f
 8003856:	1c53      	adds	r3, r2, #1
 8003858:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800385a:	2b09      	cmp	r3, #9
 800385c:	4619      	mov	r1, r3
 800385e:	bf88      	it	hi
 8003860:	f1a3 010a 	subhi.w	r1, r3, #10
 8003864:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003868:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800386a:	4281      	cmp	r1, r0
 800386c:	d109      	bne.n	8003882 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800386e:	2b0a      	cmp	r3, #10
 8003870:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003874:	bf28      	it	cs
 8003876:	2300      	movcs	r3, #0
            return buffer[pos];
 8003878:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800387a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800387e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003880:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003882:	4620      	mov	r0, r4
}
 8003884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003888:	f00d be78 	b.w	801157c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800388c:	0801ceac 	.word	0x0801ceac
 8003890:	0801ceb5 	.word	0x0801ceb5
 8003894:	0801cf60 	.word	0x0801cf60
 8003898:	0801cfaa 	.word	0x0801cfaa
 800389c:	0801cfb8 	.word	0x0801cfb8

080038a0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80038a0:	f00d be24 	b.w	80114ec <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080038a4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80038a4:	b510      	push	{r4, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	ac02      	add	r4, sp, #8
 80038aa:	e884 0006 	stmia.w	r4, {r1, r2}
 80038ae:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80038b0:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80038b2:	4621      	mov	r1, r4
    va_start(pArg, format);
 80038b4:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	9b08      	ldr	r3, [sp, #32]
 80038be:	f00b f975 	bl	800ebac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80038c2:	b006      	add	sp, #24
 80038c4:	bd10      	pop	{r4, pc}
	...

080038c8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80038c8:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80038ca:	bb18      	cbnz	r0, 8003914 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80038ce:	4813      	ldr	r0, [pc, #76]	; (800391c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4913      	ldr	r1, [pc, #76]	; (8003920 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80038d4:	b1b3      	cbz	r3, 8003904 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80038d6:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80038d8:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80038da:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80038dc:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80038de:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	441a      	add	r2, r3
 80038e4:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80038ec:	f000 f838 	bl	8003960 <_ZN17TypedTextDatabase8getFontsEv>
 80038f0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80038f2:	f000 f833 	bl	800395c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80038f8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80038fc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003900:	8018      	strh	r0, [r3, #0]
    }
}
 8003902:	e007      	b.n	8003914 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003906:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800390a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800390e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003910:	2c00      	cmp	r4, #0
 8003912:	d1e8      	bne.n	80038e6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003914:	bd38      	pop	{r3, r4, r5, pc}
 8003916:	bf00      	nop
 8003918:	2400179c 	.word	0x2400179c
 800391c:	240017a0 	.word	0x240017a0
 8003920:	240017a4 	.word	0x240017a4
 8003924:	240017a8 	.word	0x240017a8
 8003928:	24006c0c 	.word	0x24006c0c
 800392c:	24006c14 	.word	0x24006c14
 8003930:	24006c10 	.word	0x24006c10
 8003934:	08020b1c 	.word	0x08020b1c
 8003938:	08020ad0 	.word	0x08020ad0
 800393c:	08020ba8 	.word	0x08020ba8

08003940 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	240017a4 	.word	0x240017a4
 8003958:	240017a0 	.word	0x240017a0

0800395c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800395c:	2013      	movs	r0, #19
 800395e:	4770      	bx	lr

08003960 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003960:	4800      	ldr	r0, [pc, #0]	; (8003964 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003962:	4770      	bx	lr
 8003964:	240017ac 	.word	0x240017ac

08003968 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003968:	b510      	push	{r4, lr}
};
 800396a:	4c07      	ldr	r4, [pc, #28]	; (8003988 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_30_4bpp()),
 800396c:	f7ff fec4 	bl	80036f8 <_Z23getFont_verdana_30_4bppv>
};
 8003970:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003972:	f7ff fefb 	bl	800376c <_Z23getFont_verdana_40_4bppv>
};
 8003976:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8003978:	f7ff fe4a 	bl	8003610 <_Z23getFont_verdana_10_4bppv>
};
 800397c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 800397e:	f7ff fe81 	bl	8003684 <_Z23getFont_verdana_20_4bppv>
};
 8003982:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8003984:	bd10      	pop	{r4, pc}
 8003986:	bf00      	nop
 8003988:	240017ac 	.word	0x240017ac

0800398c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800398c:	4770      	bx	lr

0800398e <_ZN19FrontendApplicationD0Ev>:
 800398e:	b510      	push	{r4, lr}
 8003990:	4604      	mov	r4, r0
 8003992:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003996:	f017 fa5b 	bl	801ae50 <_ZdlPvj>
 800399a:	4620      	mov	r0, r4
 800399c:	bd10      	pop	{r4, pc}

0800399e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800399e:	b510      	push	{r4, lr}
 80039a0:	4604      	mov	r4, r0
    {
        model.tick();
 80039a2:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80039a6:	f000 f812 	bl	80039ce <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80039aa:	4620      	mov	r0, r4
    }
 80039ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80039b0:	f00b bc76 	b.w	800f2a0 <_ZN8touchgfx11Application15handleTickEventEv>

080039b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80039b8:	f7fe fede 	bl	8002778 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80039bc:	4b01      	ldr	r3, [pc, #4]	; (80039c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80039be:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80039c0:	6023      	str	r3, [r4, #0]
}
 80039c2:	bd10      	pop	{r4, pc}
 80039c4:	0801d094 	.word	0x0801d094

080039c8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80039c8:	2200      	movs	r2, #0
 80039ca:	6002      	str	r2, [r0, #0]
{

}
 80039cc:	4770      	bx	lr

080039ce <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80039ce:	4770      	bx	lr

080039d0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80039d0:	4770      	bx	lr

080039d2 <_ZThn4_N16Screen1PresenterD1Ev>:
 80039d2:	3804      	subs	r0, #4
 80039d4:	4770      	bx	lr

080039d6 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80039d6:	4770      	bx	lr

080039d8 <_ZN16Screen1PresenterD0Ev>:
 80039d8:	b510      	push	{r4, lr}
 80039da:	4604      	mov	r4, r0
 80039dc:	2110      	movs	r1, #16
 80039de:	f017 fa37 	bl	801ae50 <_ZdlPvj>
 80039e2:	4620      	mov	r0, r4
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <_ZThn4_N16Screen1PresenterD0Ev>:
 80039e6:	f1a0 0004 	sub.w	r0, r0, #4
 80039ea:	e7f5      	b.n	80039d8 <_ZN16Screen1PresenterD0Ev>

080039ec <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80039ec:	2200      	movs	r2, #0
    : view(v)
 80039ee:	60c1      	str	r1, [r0, #12]
 80039f0:	6082      	str	r2, [r0, #8]
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 80039f4:	b510      	push	{r4, lr}
    : view(v)
 80039f6:	f102 0408 	add.w	r4, r2, #8
 80039fa:	3220      	adds	r2, #32
 80039fc:	6004      	str	r4, [r0, #0]
 80039fe:	6042      	str	r2, [r0, #4]
}
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	bf00      	nop
 8003a04:	0801d0d0 	.word	0x0801d0d0

08003a08 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003a08:	4770      	bx	lr

08003a0a <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003a0a:	4770      	bx	lr

08003a0c <_ZN11Screen1View19buttonSwitchClickedEv>:
{
	fillBuffer(7);
}
void Screen1View::buttonSwitchClicked()
{
	switchPressed = !switchPressed;
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <_ZN11Screen1View19buttonSwitchClickedEv+0x14>)
 8003a0e:	7813      	ldrb	r3, [r2, #0]
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	7013      	strb	r3, [r2, #0]
	dotPressed = 0;
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4b02      	ldr	r3, [pc, #8]	; (8003a24 <_ZN11Screen1View19buttonSwitchClickedEv+0x18>)
 8003a1c:	701a      	strb	r2, [r3, #0]
}
 8003a1e:	4770      	bx	lr
 8003a20:	240017d0 	.word	0x240017d0
 8003a24:	240017bc 	.word	0x240017bc

08003a28 <_ZN11Screen1View16buttonDotClickedEv>:
	textAreaMI.invalidate();
	textAreaFreq.invalidate();
}
void Screen1View::buttonDotClicked()
{
	dotPressed = 1;
 8003a28:	4b01      	ldr	r3, [pc, #4]	; (8003a30 <_ZN11Screen1View16buttonDotClickedEv+0x8>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
}
 8003a2e:	4770      	bx	lr
 8003a30:	240017bc 	.word	0x240017bc

08003a34 <_ZN11Screen1View17buttonFreqToggledEv>:
void Screen1View::buttonFreqToggled()
{
	freqReady = 1;
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <_ZN11Screen1View17buttonFreqToggledEv+0x8>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
}
 8003a3a:	4770      	bx	lr
 8003a3c:	240017bd 	.word	0x240017bd

08003a40 <_ZN11Screen1View15buttonMIToggledEv>:
void Screen1View::buttonMIToggled()
{
	miReady = 1;
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <_ZN11Screen1View15buttonMIToggledEv+0x8>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
}
 8003a46:	4770      	bx	lr
 8003a48:	240017c8 	.word	0x240017c8

08003a4c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003a4c:	f7ff b828 	b.w	8002aa0 <_ZN15Screen1ViewBase11setupScreenEv>

08003a50 <_ZN11Screen1View18buttonPowerClickedEv>:
void Screen1View::buttonPowerClicked() //TODO: BURAYI UNUTMA
{
 8003a50:	b508      	push	{r3, lr}
	buttonClearClicked();
 8003a52:	6803      	ldr	r3, [r0, #0]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4798      	blx	r3
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <_ZN11Screen1View18buttonPowerClickedEv+0x18>)
 8003a5a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8003a6c <_ZN11Screen1View18buttonPowerClickedEv+0x1c>
 8003a5e:	6818      	ldr	r0, [r3, #0]
}
 8003a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 8003a64:	f7fd ba12 	b.w	8000e8c <adjustMIAndFreq>
 8003a68:	240017c0 	.word	0x240017c0
 8003a6c:	00000000 	.word	0x00000000

08003a70 <_ZN11Screen1ViewD0Ev>:
 8003a70:	b510      	push	{r4, lr}
 8003a72:	4604      	mov	r4, r0
 8003a74:	f240 61d4 	movw	r1, #1748	; 0x6d4
 8003a78:	f017 f9ea 	bl	801ae50 <_ZdlPvj>
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	bd10      	pop	{r4, pc}

08003a80 <_ZN11Screen1View17buttonSendClickedEv>:
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <_ZN11Screen1View17buttonSendClickedEv+0x5c>)
{
 8003a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8003a84:	781a      	ldrb	r2, [r3, #0]
{
 8003a86:	4604      	mov	r4, r0
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8003a88:	2a01      	cmp	r2, #1
 8003a8a:	d124      	bne.n	8003ad6 <_ZN11Screen1View17buttonSendClickedEv+0x56>
 8003a8c:	4e14      	ldr	r6, [pc, #80]	; (8003ae0 <_ZN11Screen1View17buttonSendClickedEv+0x60>)
 8003a8e:	7832      	ldrb	r2, [r6, #0]
 8003a90:	2a01      	cmp	r2, #1
 8003a92:	d120      	bne.n	8003ad6 <_ZN11Screen1View17buttonSendClickedEv+0x56>
 	   dotPressed = 0;
 8003a94:	2500      	movs	r5, #0
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <_ZN11Screen1View17buttonSendClickedEv+0x64>)
 	   toggleButtonMI.forceState(0);
 8003a98:	f200 6014 	addw	r0, r0, #1556	; 0x614
 8003a9c:	4629      	mov	r1, r5
 	   miReady = 0;
 8003a9e:	701d      	strb	r5, [r3, #0]
 	   dotPressed = 0;
 8003aa0:	7015      	strb	r5, [r2, #0]
 	   toggleButtonMI.forceState(0);
 8003aa2:	9001      	str	r0, [sp, #4]
 8003aa4:	f008 ff42 	bl	800c92c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonMI.invalidate();
 8003aa8:	9801      	ldr	r0, [sp, #4]
 8003aaa:	f00c fca7 	bl	80103fc <_ZNK8touchgfx8Drawable10invalidateEv>
 	   toggleButtonFreq.forceState(0);
 8003aae:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8003ab2:	4629      	mov	r1, r5
 	   freqReady = 0;
 8003ab4:	7035      	strb	r5, [r6, #0]
 	   toggleButtonFreq.forceState(0);
 8003ab6:	9001      	str	r0, [sp, #4]
 8003ab8:	f008 ff38 	bl	800c92c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonFreq.invalidate();
 8003abc:	9801      	ldr	r0, [sp, #4]
 8003abe:	f00c fc9d 	bl	80103fc <_ZNK8touchgfx8Drawable10invalidateEv>
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer); // TODO: BU FONK DUZELT
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <_ZN11Screen1View17buttonSendClickedEv+0x68>)
 8003ac4:	ed93 0a00 	vldr	s0, [r3]
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <_ZN11Screen1View17buttonSendClickedEv+0x6c>)
 8003aca:	6818      	ldr	r0, [r3, #0]
}
 8003acc:	b002      	add	sp, #8
 8003ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer); // TODO: BU FONK DUZELT
 8003ad2:	f7fd b9db 	b.w	8000e8c <adjustMIAndFreq>
}
 8003ad6:	b002      	add	sp, #8
 8003ad8:	bd70      	pop	{r4, r5, r6, pc}
 8003ada:	bf00      	nop
 8003adc:	240017c8 	.word	0x240017c8
 8003ae0:	240017bd 	.word	0x240017bd
 8003ae4:	240017bc 	.word	0x240017bc
 8003ae8:	240017cc 	.word	0x240017cc
 8003aec:	240017c0 	.word	0x240017c0

08003af0 <_ZN11Screen1View18buttonClearClickedEv>:
{
 8003af0:	b5f0      	push	{r4, r5, r6, r7, lr}
	dotPressed = 0;
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <_ZN11Screen1View18buttonClearClickedEv+0x7c>)
 8003af4:	2500      	movs	r5, #0
{
 8003af6:	b085      	sub	sp, #20
 8003af8:	4604      	mov	r4, r0
	dotPressed = 0;
 8003afa:	701d      	strb	r5, [r3, #0]
	toggleButtonMI.forceState(0);
 8003afc:	f200 6014 	addw	r0, r0, #1556	; 0x614
	freqReady = 0;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <_ZN11Screen1View18buttonClearClickedEv+0x80>)
	toggleButtonMI.forceState(0);
 8003b02:	4629      	mov	r1, r5
	miScreenBuffer = 0.0;
 8003b04:	4f1b      	ldr	r7, [pc, #108]	; (8003b74 <_ZN11Screen1View18buttonClearClickedEv+0x84>)
	freqReady = 0;
 8003b06:	701d      	strb	r5, [r3, #0]
	miReady = 0;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <_ZN11Screen1View18buttonClearClickedEv+0x88>)
	freqScreenBuffer = 0;
 8003b0a:	4e1c      	ldr	r6, [pc, #112]	; (8003b7c <_ZN11Screen1View18buttonClearClickedEv+0x8c>)
	miReady = 0;
 8003b0c:	701d      	strb	r5, [r3, #0]
	miBuffer = 0;
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <_ZN11Screen1View18buttonClearClickedEv+0x90>)
	toggleButtonMI.forceState(0);
 8003b10:	9001      	str	r0, [sp, #4]
	miBuffer = 0;
 8003b12:	601d      	str	r5, [r3, #0]
	miScreenBuffer = 0.0;
 8003b14:	2300      	movs	r3, #0
	freqScreenBuffer = 0;
 8003b16:	6035      	str	r5, [r6, #0]
	miScreenBuffer = 0.0;
 8003b18:	603b      	str	r3, [r7, #0]
	toggleButtonMI.forceState(0);
 8003b1a:	f008 ff07 	bl	800c92c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonMI.invalidate();
 8003b1e:	9801      	ldr	r0, [sp, #4]
 8003b20:	f00c fc6c 	bl	80103fc <_ZNK8touchgfx8Drawable10invalidateEv>
	toggleButtonFreq.forceState(0);
 8003b24:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8003b28:	4629      	mov	r1, r5
 8003b2a:	9001      	str	r0, [sp, #4]
 8003b2c:	f008 fefe 	bl	800c92c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonFreq.invalidate();
 8003b30:	9801      	ldr	r0, [sp, #4]
 8003b32:	f00c fc63 	bl	80103fc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(textAreaMIBuffer, 4, "%3.2f", miScreenBuffer);
 8003b36:	683b      	ldr	r3, [r7, #0]
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <_ZN11Screen1View18buttonClearClickedEv+0x94>)
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	9303      	str	r3, [sp, #12]
 8003b3e:	f204 60ba 	addw	r0, r4, #1722	; 0x6ba
 8003b42:	ab03      	add	r3, sp, #12
 8003b44:	f00e fdac 	bl	80126a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8003b48:	6833      	ldr	r3, [r6, #0]
 8003b4a:	4a0f      	ldr	r2, [pc, #60]	; (8003b88 <_ZN11Screen1View18buttonClearClickedEv+0x98>)
 8003b4c:	2103      	movs	r1, #3
 8003b4e:	f204 60b4 	addw	r0, r4, #1716	; 0x6b4
 8003b52:	f00e fbe7 	bl	8012324 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaMI.invalidate();
 8003b56:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8003b5a:	f00c fc4f 	bl	80103fc <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaFreq.invalidate();
 8003b5e:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8003b62:	f00c fc4b 	bl	80103fc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8003b66:	b005      	add	sp, #20
 8003b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	240017bc 	.word	0x240017bc
 8003b70:	240017bd 	.word	0x240017bd
 8003b74:	240017cc 	.word	0x240017cc
 8003b78:	240017c8 	.word	0x240017c8
 8003b7c:	240017c0 	.word	0x240017c0
 8003b80:	240017c4 	.word	0x240017c4
 8003b84:	0801d0f8 	.word	0x0801d0f8
 8003b88:	0801d0fe 	.word	0x0801d0fe

08003b8c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	4604      	mov	r4, r0
 8003b90:	f7ff f8fc 	bl	8002d8c <_ZN15Screen1ViewBaseC1Ev>
 8003b94:	4b01      	ldr	r3, [pc, #4]	; (8003b9c <_ZN11Screen1ViewC1Ev+0x10>)
}
 8003b96:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8003b98:	6023      	str	r3, [r4, #0]
}
 8003b9a:	bd10      	pop	{r4, pc}
 8003b9c:	0801d110 	.word	0x0801d110

08003ba0 <_ZN11Screen1View10fillBufferEh>:
	if(switchPressed == 1)
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <_ZN11Screen1View10fillBufferEh+0x90>)
{
 8003ba2:	b513      	push	{r0, r1, r4, lr}
	if(switchPressed == 1)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
{
 8003ba6:	4604      	mov	r4, r0
	if(switchPressed == 1)
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d131      	bne.n	8003c10 <_ZN11Screen1View10fillBufferEh+0x70>
			if(dotPressed == 0)
 8003bac:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <_ZN11Screen1View10fillBufferEh+0x94>)
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8003bae:	ee07 1a90 	vmov	s15, r1
 8003bb2:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <_ZN11Screen1View10fillBufferEh+0x98>)
			if(dotPressed == 0)
 8003bb4:	7812      	ldrb	r2, [r2, #0]
 8003bb6:	ed93 6a00 	vldr	s12, [r3]
 8003bba:	b9e2      	cbnz	r2, 8003bf6 <_ZN11Screen1View10fillBufferEh+0x56>
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8003bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003bc4:	eea6 7a27 	vfma.f32	s14, s12, s15
		miBuffer = (miBuffer*10) + foo;
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <_ZN11Screen1View10fillBufferEh+0x9c>)
 8003bca:	200a      	movs	r0, #10
 8003bcc:	ed83 7a00 	vstr	s14, [r3]
 8003bd0:	6813      	ldr	r3, [r2, #0]
 8003bd2:	ed8d 7a01 	vstr	s14, [sp, #4]
 8003bd6:	fb00 1103 	mla	r1, r0, r3, r1
 8003bda:	ab01      	add	r3, sp, #4
 8003bdc:	f204 60ba 	addw	r0, r4, #1722	; 0x6ba
 8003be0:	6011      	str	r1, [r2, #0]
 8003be2:	2104      	movs	r1, #4
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <_ZN11Screen1View10fillBufferEh+0xa0>)
 8003be6:	f00e fd5b 	bl	80126a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
		textAreaMI.invalidate();
 8003bea:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
		textAreaFreq.invalidate();
 8003bee:	f00c fc05 	bl	80103fc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd10      	pop	{r4, pc}
				miScreenBuffer = miScreenBuffer + (foo/10.0);
 8003bf6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003bfa:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003bfe:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003c02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003c06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c0a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003c0e:	e7db      	b.n	8003bc8 <_ZN11Screen1View10fillBufferEh+0x28>
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8003c10:	4a0c      	ldr	r2, [pc, #48]	; (8003c44 <_ZN11Screen1View10fillBufferEh+0xa4>)
 8003c12:	200a      	movs	r0, #10
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	fb00 1303 	mla	r3, r0, r3, r1
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8003c1a:	2103      	movs	r1, #3
 8003c1c:	f204 60b4 	addw	r0, r4, #1716	; 0x6b4
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8003c20:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <_ZN11Screen1View10fillBufferEh+0xa8>)
 8003c24:	f00e fb7e 	bl	8012324 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaFreq.invalidate();
 8003c28:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8003c2c:	e7df      	b.n	8003bee <_ZN11Screen1View10fillBufferEh+0x4e>
 8003c2e:	bf00      	nop
 8003c30:	240017d0 	.word	0x240017d0
 8003c34:	240017bc 	.word	0x240017bc
 8003c38:	240017cc 	.word	0x240017cc
 8003c3c:	240017c4 	.word	0x240017c4
 8003c40:	0801d101 	.word	0x0801d101
 8003c44:	240017c0 	.word	0x240017c0
 8003c48:	0801d0fe 	.word	0x0801d0fe

08003c4c <_ZN11Screen1View14button9ClickedEv>:
	fillBuffer(9);
 8003c4c:	2109      	movs	r1, #9
 8003c4e:	f7ff bfa7 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c52 <_ZN11Screen1View14button8ClickedEv>:
	fillBuffer(8);
 8003c52:	2108      	movs	r1, #8
 8003c54:	f7ff bfa4 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c58 <_ZN11Screen1View14button0ClickedEv>:
	fillBuffer(0);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f7ff bfa1 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c5e <_ZN11Screen1View14button3ClickedEv>:
	fillBuffer(3);
 8003c5e:	2103      	movs	r1, #3
 8003c60:	f7ff bf9e 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c64 <_ZN11Screen1View14button2ClickedEv>:
	fillBuffer(2);
 8003c64:	2102      	movs	r1, #2
 8003c66:	f7ff bf9b 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c6a <_ZN11Screen1View14button1ClickedEv>:
	fillBuffer(1);
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	f7ff bf98 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c70 <_ZN11Screen1View14button6ClickedEv>:
	fillBuffer(6);
 8003c70:	2106      	movs	r1, #6
 8003c72:	f7ff bf95 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c76 <_ZN11Screen1View14button5ClickedEv>:
	fillBuffer(5);
 8003c76:	2105      	movs	r1, #5
 8003c78:	f7ff bf92 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c7c <_ZN11Screen1View14button4ClickedEv>:
	fillBuffer(4);
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	f7ff bf8f 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c82 <_ZN11Screen1View14button7ClickedEv>:
	fillBuffer(7);
 8003c82:	2107      	movs	r1, #7
 8003c84:	f7ff bf8c 	b.w	8003ba0 <_ZN11Screen1View10fillBufferEh>

08003c88 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8003c88:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003c8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8003c90:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8003c92:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8003c94:	2305      	movs	r3, #5
 8003c96:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003c98:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003c9c:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8003ca0:	4770      	bx	lr

08003ca2 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8003ca2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003ca6:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8003ca8:	bf04      	itt	eq
 8003caa:	2300      	moveq	r3, #0
 8003cac:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	4770      	bx	lr

08003cb4 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	4770      	bx	lr

08003cb8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003cb8:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003cba:	6904      	ldr	r4, [r0, #16]
 8003cbc:	8900      	ldrh	r0, [r0, #8]
 8003cbe:	46a4      	mov	ip, r4
}
 8003cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003cc4:	4760      	bx	ip

08003cc6 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003cc6:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003cc8:	68c4      	ldr	r4, [r0, #12]
 8003cca:	8900      	ldrh	r0, [r0, #8]
 8003ccc:	46a4      	mov	ip, r4
}
 8003cce:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003cd2:	4760      	bx	ip

08003cd4 <FT5336_GestureConfig>:
{
 8003cd4:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003cd8:	f100 0818 	add.w	r8, r0, #24
{
 8003cdc:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003cde:	7809      	ldrb	r1, [r1, #0]
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	f000 f8fb 	bl	8003edc <ft5336_radian_value>
 8003ce6:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003ce8:	f899 1004 	ldrb.w	r1, [r9, #4]
 8003cec:	4640      	mov	r0, r8
 8003cee:	f000 f901 	bl	8003ef4 <ft5336_offset_left_right>
 8003cf2:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003cf4:	f899 1008 	ldrb.w	r1, [r9, #8]
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	f000 f907 	bl	8003f0c <ft5336_offset_up_down>
 8003cfe:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8003d00:	f899 100c 	ldrb.w	r1, [r9, #12]
 8003d04:	4640      	mov	r0, r8
 8003d06:	f000 f90d 	bl	8003f24 <ft5336_disatnce_left_right>
 8003d0a:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003d0c:	f899 1010 	ldrb.w	r1, [r9, #16]
 8003d10:	4640      	mov	r0, r8
 8003d12:	f000 f913 	bl	8003f3c <ft5336_distance_up_down>
 8003d16:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003d18:	f899 1014 	ldrb.w	r1, [r9, #20]
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	f000 f919 	bl	8003f54 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8003d22:	42c5      	cmn	r5, r0
}
 8003d24:	bf14      	ite	ne
 8003d26:	f04f 30ff 	movne.w	r0, #4294967295
 8003d2a:	2000      	moveq	r0, #0
 8003d2c:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08003d30 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003d30:	3018      	adds	r0, #24
 8003d32:	f000 b927 	b.w	8003f84 <ft5336_chip_id>

08003d36 <FT5336_GetMultiTouchState>:
{
 8003d36:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003d38:	f100 0518 	add.w	r5, r0, #24
{
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003d40:	4628      	mov	r0, r5
 8003d42:	4669      	mov	r1, sp
 8003d44:	f000 f8bd 	bl	8003ec2 <ft5336_td_status>
 8003d48:	bb98      	cbnz	r0, 8003db2 <FT5336_GetMultiTouchState+0x7c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003d4a:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	bf98      	it	ls
 8003d52:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003d54:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003d56:	231e      	movs	r3, #30
 8003d58:	466a      	mov	r2, sp
 8003d5a:	2103      	movs	r1, #3
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 f89d 	bl	8003e9c <ft5336_read_reg>
 8003d62:	bb48      	cbnz	r0, 8003db8 <FT5336_GetMultiTouchState+0x82>
 8003d64:	466b      	mov	r3, sp
 8003d66:	1d22      	adds	r2, r4, #4
 8003d68:	f104 0118 	add.w	r1, r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003d6c:	781d      	ldrb	r5, [r3, #0]
 8003d6e:	3306      	adds	r3, #6
 8003d70:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8003d74:	022c      	lsls	r4, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003d76:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003d78:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8003d7c:	4334      	orrs	r4, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003d7e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003d82:	f842 4b04 	str.w	r4, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003d86:	4291      	cmp	r1, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003d88:	f813 4c04 	ldrb.w	r4, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003d8c:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003d8e:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8003d92:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8003d96:	ea44 0406 	orr.w	r4, r4, r6
 8003d9a:	6114      	str	r4, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8003d9c:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8003da0:	6254      	str	r4, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003da2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8003da6:	ea4f 1414 	mov.w	r4, r4, lsr #4
 8003daa:	64d4      	str	r4, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003dac:	d1de      	bne.n	8003d6c <FT5336_GetMultiTouchState+0x36>
}
 8003dae:	b008      	add	sp, #32
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	e7cd      	b.n	8003d54 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003dbc:	e7f7      	b.n	8003dae <FT5336_GetMultiTouchState+0x78>

08003dbe <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003dbe:	3018      	adds	r0, #24
 8003dc0:	f000 b87a 	b.w	8003eb8 <ft5336_gest_id>

08003dc4 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	3018      	adds	r0, #24
 8003dc8:	f000 b8d0 	b.w	8003f6c <ft5336_g_mode>

08003dcc <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8003dcc:	2100      	movs	r1, #0
 8003dce:	3018      	adds	r0, #24
 8003dd0:	f000 b8cc 	b.w	8003f6c <ft5336_g_mode>

08003dd4 <FT5336_Init>:
{
 8003dd4:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8003dd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003dda:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8003ddc:	b96b      	cbnz	r3, 8003dfa <FT5336_Init+0x26>
    pObj->IO.Init();
 8003dde:	6803      	ldr	r3, [r0, #0]
 8003de0:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8003de2:	4620      	mov	r0, r4
 8003de4:	f7ff fff2 	bl	8003dcc <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8003de8:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8003dea:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8003dee:	bf18      	it	ne
 8003df0:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8003df2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8003df6:	4240      	negs	r0, r0
}
 8003df8:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8003dfa:	2000      	movs	r0, #0
  return ret;
 8003dfc:	e7fc      	b.n	8003df8 <FT5336_Init+0x24>

08003dfe <FT5336_ClearIT>:
 8003dfe:	2000      	movs	r0, #0
 8003e00:	4770      	bx	lr

08003e02 <FT5336_GetState>:
{
 8003e02:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003e04:	f100 0518 	add.w	r5, r0, #24
{
 8003e08:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003e0a:	a901      	add	r1, sp, #4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f858 	bl	8003ec2 <ft5336_td_status>
 8003e12:	bb08      	cbnz	r0, 8003e58 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003e14:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	bf98      	it	ls
 8003e1c:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003e1e:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003e20:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003e22:	2103      	movs	r1, #3
 8003e24:	4628      	mov	r0, r5
 8003e26:	eb0d 0203 	add.w	r2, sp, r3
 8003e2a:	f000 f837 	bl	8003e9c <ft5336_read_reg>
 8003e2e:	b9b0      	cbnz	r0, 8003e5e <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003e30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e3e:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003e40:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003e44:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003e46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60a3      	str	r3, [r4, #8]
}
 8003e54:	b003      	add	sp, #12
 8003e56:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	e7df      	b.n	8003e1e <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8003e5e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003e62:	e7f7      	b.n	8003e54 <FT5336_GetState+0x52>

08003e64 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003e64:	b190      	cbz	r0, 8003e8c <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8003e66:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8003e68:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003e6a:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8003e6c:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8003e6e:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8003e70:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003e72:	68ca      	ldr	r2, [r1, #12]
 8003e74:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e76:	690a      	ldr	r2, [r1, #16]
 8003e78:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e7a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8003e7c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e7e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <FT5336_RegisterBusIO+0x30>)
 8003e82:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <FT5336_RegisterBusIO+0x34>)
 8003e86:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8003e88:	b103      	cbz	r3, 8003e8c <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8003e8a:	4718      	bx	r3
}
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	08003cb9 	.word	0x08003cb9
 8003e98:	08003cc7 	.word	0x08003cc7

08003e9c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003e9c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003e9e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8003ea2:	46a4      	mov	ip, r4
}
 8003ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003ea8:	4760      	bx	ip

08003eaa <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8003eaa:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003eac:	6804      	ldr	r4, [r0, #0]
 8003eae:	6880      	ldr	r0, [r0, #8]
 8003eb0:	46a4      	mov	ip, r4
}
 8003eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003eb6:	4760      	bx	ip

08003eb8 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003eb8:	2301      	movs	r3, #1
{
 8003eba:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f7ff bfed 	b.w	8003e9c <ft5336_read_reg>

08003ec2 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003ec2:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003ec4:	460a      	mov	r2, r1
{
 8003ec6:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003ec8:	2301      	movs	r3, #1
 8003eca:	2102      	movs	r1, #2
 8003ecc:	f7ff ffe6 	bl	8003e9c <ft5336_read_reg>
  
  if(ret == 0)
 8003ed0:	b918      	cbnz	r0, 8003eda <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003ed2:	7823      	ldrb	r3, [r4, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8003eda:	bd10      	pop	{r4, pc}

08003edc <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003edc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003ede:	2301      	movs	r3, #1
{
 8003ee0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003ee4:	f10d 0207 	add.w	r2, sp, #7
 8003ee8:	2191      	movs	r1, #145	; 0x91
 8003eea:	f7ff ffde 	bl	8003eaa <ft5336_write_reg>
}
 8003eee:	b003      	add	sp, #12
 8003ef0:	f85d fb04 	ldr.w	pc, [sp], #4

08003ef4 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003ef4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003ef6:	2301      	movs	r3, #1
{
 8003ef8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003efc:	f10d 0207 	add.w	r2, sp, #7
 8003f00:	2192      	movs	r1, #146	; 0x92
 8003f02:	f7ff ffd2 	bl	8003eaa <ft5336_write_reg>
}
 8003f06:	b003      	add	sp, #12
 8003f08:	f85d fb04 	ldr.w	pc, [sp], #4

08003f0c <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f0c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003f0e:	2301      	movs	r3, #1
{
 8003f10:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003f14:	f10d 0207 	add.w	r2, sp, #7
 8003f18:	2193      	movs	r1, #147	; 0x93
 8003f1a:	f7ff ffc6 	bl	8003eaa <ft5336_write_reg>
}
 8003f1e:	b003      	add	sp, #12
 8003f20:	f85d fb04 	ldr.w	pc, [sp], #4

08003f24 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f24:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003f26:	2301      	movs	r3, #1
{
 8003f28:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003f2c:	f10d 0207 	add.w	r2, sp, #7
 8003f30:	2194      	movs	r1, #148	; 0x94
 8003f32:	f7ff ffba 	bl	8003eaa <ft5336_write_reg>
}
 8003f36:	b003      	add	sp, #12
 8003f38:	f85d fb04 	ldr.w	pc, [sp], #4

08003f3c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f3c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003f3e:	2301      	movs	r3, #1
{
 8003f40:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003f44:	f10d 0207 	add.w	r2, sp, #7
 8003f48:	2195      	movs	r1, #149	; 0x95
 8003f4a:	f7ff ffae 	bl	8003eaa <ft5336_write_reg>
}
 8003f4e:	b003      	add	sp, #12
 8003f50:	f85d fb04 	ldr.w	pc, [sp], #4

08003f54 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f54:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003f56:	2301      	movs	r3, #1
{
 8003f58:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003f5c:	f10d 0207 	add.w	r2, sp, #7
 8003f60:	2196      	movs	r1, #150	; 0x96
 8003f62:	f7ff ffa2 	bl	8003eaa <ft5336_write_reg>
}
 8003f66:	b003      	add	sp, #12
 8003f68:	f85d fb04 	ldr.w	pc, [sp], #4

08003f6c <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8003f6c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003f6e:	2301      	movs	r3, #1
{
 8003f70:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003f74:	f10d 0207 	add.w	r2, sp, #7
 8003f78:	21a4      	movs	r1, #164	; 0xa4
 8003f7a:	f7ff ff96 	bl	8003eaa <ft5336_write_reg>
}
 8003f7e:	b003      	add	sp, #12
 8003f80:	f85d fb04 	ldr.w	pc, [sp], #4

08003f84 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003f84:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8003f86:	2301      	movs	r3, #1
 8003f88:	21a8      	movs	r1, #168	; 0xa8
 8003f8a:	f7ff bf87 	b.w	8003e9c <ft5336_read_reg>

08003f8e <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8003f8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003f96:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8003f9a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8003f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8003fae:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003fb2:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003fb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fb8:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	4770      	bx	lr

08003fc0 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	b09a      	sub	sp, #104	; 0x68
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003fc8:	2100      	movs	r1, #0
{
 8003fca:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003fcc:	a806      	add	r0, sp, #24
 8003fce:	2250      	movs	r2, #80	; 0x50
 8003fd0:	f017 f8e0 	bl	801b194 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003fd4:	2214      	movs	r2, #20
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	a801      	add	r0, sp, #4
 8003fda:	f017 f8db 	bl	801b194 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003fde:	b92d      	cbnz	r5, 8003fec <MX25LM51245G_AutoPollingMemReady+0x2c>
 8003fe0:	2c01      	cmp	r4, #1
 8003fe2:	d103      	bne.n	8003fec <MX25LM51245G_AutoPollingMemReady+0x2c>
  {
    return MX25LM51245G_ERROR;
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003fe8:	b01a      	add	sp, #104	; 0x68
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003fec:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fee:	a906      	add	r1, sp, #24
 8003ff0:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003ff2:	429d      	cmp	r5, r3
  s_command.Address            = 0U;
 8003ff4:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003ff6:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2201      	moveq	r2, #1
 8003ffc:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003ffe:	2c01      	cmp	r4, #1
  s_config.Match         = 0U;
 8004000:	9301      	str	r3, [sp, #4]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004002:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004004:	bf14      	ite	ne
 8004006:	461a      	movne	r2, r3
 8004008:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800400a:	429d      	cmp	r5, r3
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800400c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800400e:	bf0c      	ite	eq
 8004010:	461a      	moveq	r2, r3
 8004012:	2210      	movne	r2, #16
 8004014:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8004016:	f240 52fa 	movw	r2, #1530	; 0x5fa
 800401a:	bf08      	it	eq
 800401c:	2205      	moveq	r2, #5
 800401e:	9208      	str	r2, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8004020:	bf0c      	ite	eq
 8004022:	461a      	moveq	r2, r3
 8004024:	f44f 6280 	movne.w	r2, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004028:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800402a:	920d      	str	r2, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800402c:	bf14      	ite	ne
 800402e:	461a      	movne	r2, r3
 8004030:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004034:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004036:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004038:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800403c:	920e      	str	r2, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800403e:	bf0c      	ite	eq
 8004040:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 8004044:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004048:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800404a:	9214      	str	r2, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800404c:	bf14      	ite	ne
 800404e:	461a      	movne	r2, r3
 8004050:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004054:	429d      	cmp	r5, r3
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004056:	9216      	str	r2, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004058:	bf0c      	ite	eq
 800405a:	461a      	moveq	r2, r3
 800405c:	2205      	movne	r2, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800405e:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004060:	9217      	str	r2, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004062:	bf0c      	ite	eq
 8004064:	2202      	moveq	r2, #2
 8004066:	2201      	movne	r2, #1
 8004068:	9215      	str	r2, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800406a:	bf14      	ite	ne
 800406c:	461a      	movne	r2, r3
 800406e:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8004072:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8004076:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8004078:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800407c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004080:	2210      	movs	r2, #16
 8004082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004086:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	f002 fbd0 	bl	8006832 <HAL_OSPI_Command>
 8004092:	2800      	cmp	r0, #0
 8004094:	d1a6      	bne.n	8003fe4 <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	a901      	add	r1, sp, #4
 800409c:	4630      	mov	r0, r6
 800409e:	f002 fd05 	bl	8006aac <HAL_OSPI_AutoPolling>
 80040a2:	3800      	subs	r0, #0
 80040a4:	bf18      	it	ne
 80040a6:	2001      	movne	r0, #1
 80040a8:	4240      	negs	r0, r0
 80040aa:	e79d      	b.n	8003fe8 <MX25LM51245G_AutoPollingMemReady+0x28>

080040ac <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	b096      	sub	sp, #88	; 0x58
 80040b0:	460c      	mov	r4, r1
 80040b2:	4606      	mov	r6, r0
 80040b4:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 80040b6:	2100      	movs	r1, #0
 80040b8:	2250      	movs	r2, #80	; 0x50
 80040ba:	a802      	add	r0, sp, #8
 80040bc:	f017 f86a 	bl	801b194 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80040c0:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80040c2:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80040c4:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80040c8:	d104      	bne.n	80040d4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 80040ca:	b91d      	cbnz	r5, 80040d4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80040d0:	b016      	add	sp, #88	; 0x58
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80040d4:	2300      	movs	r3, #0
 80040d6:	2101      	movs	r1, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040d8:	429c      	cmp	r4, r3
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80040da:	9307      	str	r3, [sp, #28]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040dc:	bf0c      	ite	eq
 80040de:	2201      	moveq	r2, #1
 80040e0:	2204      	movne	r2, #4
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80040e2:	e9cd 1302 	strd	r1, r3, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040e6:	bf18      	it	ne
 80040e8:	2310      	movne	r3, #16
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80040ea:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80040ec:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80040ee:	d146      	bne.n	800417e <MX25LM51245G_EnableSTRMemoryMappedMode+0xd2>
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	230b      	moveq	r3, #11
 80040f6:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80040f8:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80040fa:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040fc:	a902      	add	r1, sp, #8
 80040fe:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004100:	bf0c      	ite	eq
 8004102:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004106:	f44f 6380 	movne.w	r3, #1024	; 0x400
 800410a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800410c:	2300      	movs	r3, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800410e:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004110:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004112:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8004114:	bf0c      	ite	eq
 8004116:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 800411a:	f44f 5240 	movne.w	r2, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800411e:	429c      	cmp	r4, r3
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8004120:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8004122:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004124:	bf0c      	ite	eq
 8004126:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 800412a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800412e:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004130:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8004132:	bf0c      	ite	eq
 8004134:	2208      	moveq	r2, #8
 8004136:	2206      	movne	r2, #6
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8004138:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	f002 fb77 	bl	8006832 <HAL_OSPI_Command>
 8004144:	2800      	cmp	r0, #0
 8004146:	d1c1      	bne.n	80040cc <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8004148:	2302      	movs	r3, #2
 800414a:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800414c:	b9d4      	cbnz	r4, 8004184 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd8>
 800414e:	2d00      	cmp	r5, #0
 8004150:	bf18      	it	ne
 8004152:	2312      	movne	r3, #18
 8004154:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8004156:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004158:	f241 3288 	movw	r2, #5000	; 0x1388
 800415c:	a902      	add	r1, sp, #8
 800415e:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 8004160:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004162:	f002 fb66 	bl	8006832 <HAL_OSPI_Command>
 8004166:	2800      	cmp	r0, #0
 8004168:	d1b0      	bne.n	80040cc <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800416a:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800416c:	4669      	mov	r1, sp
 800416e:	4630      	mov	r0, r6
 8004170:	f002 fcec 	bl	8006b4c <HAL_OSPI_MemoryMapped>
 8004174:	3800      	subs	r0, #0
 8004176:	bf18      	it	ne
 8004178:	2001      	movne	r0, #1
 800417a:	4240      	negs	r0, r0
 800417c:	e7a8      	b.n	80040d0 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800417e:	f64e 4313 	movw	r3, #60435	; 0xec13
 8004182:	e7b9      	b.n	80040f8 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8004184:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8004188:	e7e4      	b.n	8004154 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa8>

0800418a <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800418a:	b510      	push	{r4, lr}
 800418c:	b096      	sub	sp, #88	; 0x58
 800418e:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8004190:	2228      	movs	r2, #40	; 0x28
 8004192:	2100      	movs	r1, #0
 8004194:	a808      	add	r0, sp, #32
 8004196:	f016 fffd 	bl	801b194 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800419a:	2300      	movs	r3, #0

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800419c:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800419e:	2008      	movs	r0, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80041a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80041a4:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80041a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80041ac:	2204      	movs	r2, #4
 80041ae:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80041b0:	2210      	movs	r2, #16
 80041b2:	e9cd 2006 	strd	r2, r0, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80041b6:	f64e 6211 	movw	r2, #60945	; 0xee11
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041ba:	4620      	mov	r0, r4
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80041bc:	9204      	str	r2, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80041be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041c2:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80041c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80041c8:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80041cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041d0:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80041d2:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80041d4:	2206      	movs	r2, #6
 80041d6:	e9cd c212 	strd	ip, r2, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80041da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80041de:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80041e6:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041ea:	f002 fb22 	bl	8006832 <HAL_OSPI_Command>
 80041ee:	b118      	cbz	r0, 80041f8 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25LM51245G_ERROR;
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80041f4:	b016      	add	sp, #88	; 0x58
 80041f6:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80041f8:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8004200:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8004202:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8004206:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800420a:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800420c:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800420e:	f002 fb10 	bl	8006832 <HAL_OSPI_Command>
 8004212:	2800      	cmp	r0, #0
 8004214:	d1ec      	bne.n	80041f0 <MX25LM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8004216:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8004218:	4669      	mov	r1, sp
 800421a:	4620      	mov	r0, r4
 800421c:	f002 fc96 	bl	8006b4c <HAL_OSPI_MemoryMapped>
 8004220:	3800      	subs	r0, #0
 8004222:	bf18      	it	ne
 8004224:	2001      	movne	r0, #1
 8004226:	4240      	negs	r0, r0
 8004228:	e7e4      	b.n	80041f4 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6a>

0800422a <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800422a:	b570      	push	{r4, r5, r6, lr}
 800422c:	b09a      	sub	sp, #104	; 0x68
 800422e:	460c      	mov	r4, r1
 8004230:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 8004232:	2100      	movs	r1, #0
{
 8004234:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8004236:	a806      	add	r0, sp, #24
 8004238:	2250      	movs	r2, #80	; 0x50
 800423a:	f016 ffab 	bl	801b194 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800423e:	2214      	movs	r2, #20
 8004240:	2100      	movs	r1, #0
 8004242:	a801      	add	r0, sp, #4
 8004244:	f016 ffa6 	bl	801b194 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004248:	b92c      	cbnz	r4, 8004256 <MX25LM51245G_WriteEnable+0x2c>
 800424a:	2d01      	cmp	r5, #1
 800424c:	d103      	bne.n	8004256 <MX25LM51245G_WriteEnable+0x2c>
  {
    return MX25LM51245G_ERROR;
 800424e:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004252:	b01a      	add	sp, #104	; 0x68
 8004254:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8004256:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004258:	a906      	add	r1, sp, #24
 800425a:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800425c:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800425e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004260:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004262:	bf0c      	ite	eq
 8004264:	2201      	moveq	r2, #1
 8004266:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004268:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800426a:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800426c:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800426e:	bf0c      	ite	eq
 8004270:	2208      	moveq	r2, #8
 8004272:	461a      	movne	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004274:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8004276:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004278:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800427a:	bf0c      	ite	eq
 800427c:	461a      	moveq	r2, r3
 800427e:	2210      	movne	r2, #16
 8004280:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8004282:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8004286:	bf08      	it	eq
 8004288:	2206      	moveq	r2, #6
 800428a:	9208      	str	r2, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8004290:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8004294:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004298:	f002 facb 	bl	8006832 <HAL_OSPI_Command>
 800429c:	2800      	cmp	r0, #0
 800429e:	d1d6      	bne.n	800424e <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80042a0:	2c00      	cmp	r4, #0
 80042a2:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 80042a6:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80042ac:	bf08      	it	eq
 80042ae:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042b0:	a906      	add	r1, sp, #24
 80042b2:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80042b4:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80042b6:	bf0c      	ite	eq
 80042b8:	2300      	moveq	r3, #0
 80042ba:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80042be:	2d01      	cmp	r5, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80042c0:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80042c2:	bf0c      	ite	eq
 80042c4:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80042c8:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80042ca:	2c00      	cmp	r4, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80042cc:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80042ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042d2:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80042d4:	bf0c      	ite	eq
 80042d6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80042da:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80042de:	2d01      	cmp	r5, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80042e0:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80042e2:	bf0c      	ite	eq
 80042e4:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80042e8:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80042ea:	2c00      	cmp	r4, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80042ec:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80042ee:	bf0c      	ite	eq
 80042f0:	2300      	moveq	r3, #0
 80042f2:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80042f4:	2d01      	cmp	r5, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80042f6:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80042f8:	bf0c      	ite	eq
 80042fa:	2302      	moveq	r3, #2
 80042fc:	2301      	movne	r3, #1
 80042fe:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8004300:	bf0c      	ite	eq
 8004302:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8004306:	2300      	movne	r3, #0
 8004308:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800430a:	f002 fa92 	bl	8006832 <HAL_OSPI_Command>
 800430e:	2800      	cmp	r0, #0
 8004310:	d19d      	bne.n	800424e <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 8004312:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004314:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8004316:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004318:	a901      	add	r1, sp, #4
 800431a:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 800431c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8004320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004324:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004328:	f241 3288 	movw	r2, #5000	; 0x1388
 800432c:	f002 fbbe 	bl	8006aac <HAL_OSPI_AutoPolling>
 8004330:	3800      	subs	r0, #0
 8004332:	bf18      	it	ne
 8004334:	2001      	movne	r0, #1
 8004336:	4240      	negs	r0, r0
 8004338:	e78b      	b.n	8004252 <MX25LM51245G_WriteEnable+0x28>

0800433a <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800433a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433c:	b095      	sub	sp, #84	; 0x54
 800433e:	460d      	mov	r5, r1
 8004340:	4606      	mov	r6, r0
 8004342:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004344:	2100      	movs	r1, #0
 8004346:	2250      	movs	r2, #80	; 0x50
 8004348:	4668      	mov	r0, sp
{
 800434a:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 800434c:	f016 ff22 	bl	801b194 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004350:	b92d      	cbnz	r5, 800435e <MX25LM51245G_WriteCfg2Register+0x24>
 8004352:	2c01      	cmp	r4, #1
 8004354:	d103      	bne.n	800435e <MX25LM51245G_WriteCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 8004356:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800435a:	b015      	add	sp, #84	; 0x54
 800435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800435e:	2200      	movs	r2, #0
  s_command.Address            = WriteAddr;
 8004360:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004362:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004364:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800436c:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800436e:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004370:	bf0c      	ite	eq
 8004372:	2308      	moveq	r3, #8
 8004374:	4613      	movne	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004376:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004378:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800437a:	bf0c      	ite	eq
 800437c:	4613      	moveq	r3, r2
 800437e:	2310      	movne	r3, #16
 8004380:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8004382:	f247 238d 	movw	r3, #29325	; 0x728d
 8004386:	bf08      	it	eq
 8004388:	2372      	moveq	r3, #114	; 0x72
 800438a:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800438c:	bf0c      	ite	eq
 800438e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004392:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004396:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004398:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800439a:	bf0c      	ite	eq
 800439c:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80043a0:	4613      	movne	r3, r2
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80043a2:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80043a4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80043a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80043aa:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80043ac:	bf0c      	ite	eq
 80043ae:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80043b2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80043b6:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80043b8:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80043ba:	bf0c      	ite	eq
 80043bc:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80043c0:	4613      	movne	r3, r2
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80043c2:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.DummyCycles        = 0U;
 80043c6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80043ca:	b1d5      	cbz	r5, 8004402 <MX25LM51245G_WriteCfg2Register+0xc8>
 80043cc:	2c01      	cmp	r4, #1
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2302      	moveq	r3, #2
 80043d4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80043d6:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4669      	mov	r1, sp
 80043de:	4630      	mov	r0, r6
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80043e0:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043e4:	f002 fa25 	bl	8006832 <HAL_OSPI_Command>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d1b4      	bne.n	8004356 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	a91a      	add	r1, sp, #104	; 0x68
 80043f2:	4630      	mov	r0, r6
 80043f4:	f002 fac8 	bl	8006988 <HAL_OSPI_Transmit>
 80043f8:	3800      	subs	r0, #0
 80043fa:	bf18      	it	ne
 80043fc:	2001      	movne	r0, #1
 80043fe:	4240      	negs	r0, r0
 8004400:	e7ab      	b.n	800435a <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004402:	2301      	movs	r3, #1
 8004404:	e7e6      	b.n	80043d4 <MX25LM51245G_WriteCfg2Register+0x9a>

08004406 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8004406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004408:	b095      	sub	sp, #84	; 0x54
 800440a:	460d      	mov	r5, r1
 800440c:	4606      	mov	r6, r0
 800440e:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004410:	2100      	movs	r1, #0
 8004412:	2250      	movs	r2, #80	; 0x50
 8004414:	4668      	mov	r0, sp
{
 8004416:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8004418:	f016 febc 	bl	801b194 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800441c:	b92d      	cbnz	r5, 800442a <MX25LM51245G_ReadCfg2Register+0x24>
 800441e:	2c01      	cmp	r4, #1
 8004420:	d103      	bne.n	800442a <MX25LM51245G_ReadCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004426:	b015      	add	sp, #84	; 0x54
 8004428:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800442a:	2200      	movs	r2, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800442c:	4669      	mov	r1, sp
 800442e:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 8004430:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004432:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004434:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800443c:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800443e:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004440:	bf14      	ite	ne
 8004442:	4613      	movne	r3, r2
 8004444:	2308      	moveq	r3, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004446:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004448:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800444a:	bf0c      	ite	eq
 800444c:	4613      	moveq	r3, r2
 800444e:	2310      	movne	r3, #16
 8004450:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8004452:	f247 138e 	movw	r3, #29070	; 0x718e
 8004456:	bf08      	it	eq
 8004458:	2371      	moveq	r3, #113	; 0x71
 800445a:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800445c:	bf0c      	ite	eq
 800445e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004462:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004466:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8004468:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800446a:	bf14      	ite	ne
 800446c:	4613      	movne	r3, r2
 800446e:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004472:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8004474:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8004476:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800447a:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800447c:	bf0c      	ite	eq
 800447e:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8004482:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004486:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8004488:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800448a:	bf14      	ite	ne
 800448c:	4613      	movne	r3, r2
 800448e:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004492:	4295      	cmp	r5, r2
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8004494:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8004496:	bf0c      	ite	eq
 8004498:	4613      	moveq	r3, r2
 800449a:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800449c:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800449e:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80044a0:	bf0c      	ite	eq
 80044a2:	2302      	moveq	r3, #2
 80044a4:	2301      	movne	r3, #1
 80044a6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80044a8:	bf14      	ite	ne
 80044aa:	4613      	movne	r3, r2
 80044ac:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80044b0:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80044b4:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	f002 f9b9 	bl	8006832 <HAL_OSPI_Command>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d1ae      	bne.n	8004422 <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044ca:	4630      	mov	r0, r6
 80044cc:	f002 fa9c 	bl	8006a08 <HAL_OSPI_Receive>
 80044d0:	3800      	subs	r0, #0
 80044d2:	bf18      	it	ne
 80044d4:	2001      	movne	r0, #1
 80044d6:	4240      	negs	r0, r0
 80044d8:	e7a5      	b.n	8004426 <MX25LM51245G_ReadCfg2Register+0x20>

080044da <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80044da:	b570      	push	{r4, r5, r6, lr}
 80044dc:	b094      	sub	sp, #80	; 0x50
 80044de:	460c      	mov	r4, r1
 80044e0:	4606      	mov	r6, r0
 80044e2:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80044e4:	2100      	movs	r1, #0
 80044e6:	2250      	movs	r2, #80	; 0x50
 80044e8:	4668      	mov	r0, sp
 80044ea:	f016 fe53 	bl	801b194 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80044ee:	b90c      	cbnz	r4, 80044f4 <MX25LM51245G_ResetEnable+0x1a>
 80044f0:	2d01      	cmp	r5, #1
 80044f2:	d028      	beq.n	8004546 <MX25LM51245G_ResetEnable+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80044f4:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044f6:	4669      	mov	r1, sp
 80044f8:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80044fa:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80044fc:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80044fe:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004500:	bf0c      	ite	eq
 8004502:	2201      	moveq	r2, #1
 8004504:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004506:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8004508:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800450a:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800450c:	bf14      	ite	ne
 800450e:	461a      	movne	r2, r3
 8004510:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004512:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8004514:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004516:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004518:	bf0c      	ite	eq
 800451a:	461a      	moveq	r2, r3
 800451c:	2210      	movne	r2, #16
 800451e:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8004520:	f246 6299 	movw	r2, #26265	; 0x6699
 8004524:	bf08      	it	eq
 8004526:	2266      	moveq	r2, #102	; 0x66
 8004528:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800452e:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8004532:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004536:	f002 f97c 	bl	8006832 <HAL_OSPI_Command>
 800453a:	3800      	subs	r0, #0
 800453c:	bf18      	it	ne
 800453e:	2001      	movne	r0, #1
 8004540:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8004542:	b014      	add	sp, #80	; 0x50
 8004544:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8004546:	f04f 30ff 	mov.w	r0, #4294967295
 800454a:	e7fa      	b.n	8004542 <MX25LM51245G_ResetEnable+0x68>

0800454c <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	b094      	sub	sp, #80	; 0x50
 8004550:	460c      	mov	r4, r1
 8004552:	4606      	mov	r6, r0
 8004554:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8004556:	2100      	movs	r1, #0
 8004558:	2250      	movs	r2, #80	; 0x50
 800455a:	4668      	mov	r0, sp
 800455c:	f016 fe1a 	bl	801b194 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8004560:	b90c      	cbnz	r4, 8004566 <MX25LM51245G_ResetMemory+0x1a>
 8004562:	2d01      	cmp	r5, #1
 8004564:	d028      	beq.n	80045b8 <MX25LM51245G_ResetMemory+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8004566:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004568:	4669      	mov	r1, sp
 800456a:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800456c:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800456e:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8004570:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8004572:	bf0c      	ite	eq
 8004574:	2201      	moveq	r2, #1
 8004576:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004578:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800457a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800457c:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800457e:	bf14      	ite	ne
 8004580:	461a      	movne	r2, r3
 8004582:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8004584:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8004586:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8004588:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800458a:	bf0c      	ite	eq
 800458c:	461a      	moveq	r2, r3
 800458e:	2210      	movne	r2, #16
 8004590:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8004592:	f649 1266 	movw	r2, #39270	; 0x9966
 8004596:	bf08      	it	eq
 8004598:	2299      	moveq	r2, #153	; 0x99
 800459a:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80045a0:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80045a4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045a8:	f002 f943 	bl	8006832 <HAL_OSPI_Command>
 80045ac:	3800      	subs	r0, #0
 80045ae:	bf18      	it	ne
 80045b0:	2001      	movne	r0, #1
 80045b2:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80045b4:	b014      	add	sp, #80	; 0x50
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	e7fa      	b.n	80045b4 <MX25LM51245G_ResetMemory+0x68>
	...

080045c0 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 80045c0:	4a11      	ldr	r2, [pc, #68]	; (8004608 <BSP_I2C4_DeInit+0x48>)
{
 80045c2:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	b90b      	cbnz	r3, 80045cc <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 80045c8:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 80045ca:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 80045cc:	3b01      	subs	r3, #1
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f9      	bne.n	80045c8 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80045d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045d8:	480c      	ldr	r0, [pc, #48]	; (800460c <BSP_I2C4_DeInit+0x4c>)
 80045da:	f001 f959 	bl	8005890 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80045de:	480b      	ldr	r0, [pc, #44]	; (800460c <BSP_I2C4_DeInit+0x4c>)
 80045e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045e4:	f001 f954 	bl	8005890 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80045e8:	4a09      	ldr	r2, [pc, #36]	; (8004610 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80045ea:	480a      	ldr	r0, [pc, #40]	; (8004614 <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 80045ec:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 80045f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80045f8:	f001 fbe3 	bl	8005dc2 <HAL_I2C_DeInit>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d0e3      	beq.n	80045c8 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 8004600:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8004604:	e7e1      	b.n	80045ca <BSP_I2C4_DeInit+0xa>
 8004606:	bf00      	nop
 8004608:	240017d4 	.word	0x240017d4
 800460c:	58021400 	.word	0x58021400
 8004610:	58024400 	.word	0x58024400
 8004614:	240071b0 	.word	0x240071b0

08004618 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004618:	2300      	movs	r3, #0
 800461a:	2201      	movs	r2, #1
{
 800461c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800461e:	6041      	str	r1, [r0, #4]
{
 8004620:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004622:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004624:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8004628:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800462c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004630:	f001 fb75 	bl	8005d1e <HAL_I2C_Init>
 8004634:	4601      	mov	r1, r0
 8004636:	b108      	cbz	r0, 800463c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8004638:	2001      	movs	r0, #1
}
 800463a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800463c:	4620      	mov	r0, r4
 800463e:	f001 fd50 	bl	80060e2 <HAL_I2CEx_ConfigAnalogFilter>
 8004642:	4601      	mov	r1, r0
 8004644:	2800      	cmp	r0, #0
 8004646:	d1f7      	bne.n	8004638 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004648:	4620      	mov	r0, r4
 800464a:	f001 fd70 	bl	800612e <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800464e:	3800      	subs	r0, #0
 8004650:	bf18      	it	ne
 8004652:	2001      	movne	r0, #1
 8004654:	e7f1      	b.n	800463a <MX_I2C4_Init+0x22>
	...

08004658 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8004658:	4ba3      	ldr	r3, [pc, #652]	; (80048e8 <BSP_I2C4_Init+0x290>)
 800465a:	48a4      	ldr	r0, [pc, #656]	; (80048ec <BSP_I2C4_Init+0x294>)
{
 800465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8004660:	6003      	str	r3, [r0, #0]
{
 8004662:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 8004664:	4ba2      	ldr	r3, [pc, #648]	; (80048f0 <BSP_I2C4_Init+0x298>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	9200      	str	r2, [sp, #0]
 800466a:	3201      	adds	r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	9b00      	ldr	r3, [sp, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 80c9 	bne.w	8004808 <BSP_I2C4_Init+0x1b0>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8004676:	f001 fd2f 	bl	80060d8 <HAL_I2C_GetState>
 800467a:	2800      	cmp	r0, #0
 800467c:	f040 80c4 	bne.w	8004808 <BSP_I2C4_Init+0x1b0>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004680:	4d9c      	ldr	r5, [pc, #624]	; (80048f4 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8004686:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8004688:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800468a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800468e:	489a      	ldr	r0, [pc, #616]	; (80048f8 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004690:	f043 0320 	orr.w	r3, r3, #32
 8004694:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004698:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	930a      	str	r3, [sp, #40]	; 0x28
 80046a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80046a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80046a8:	f043 0320 	orr.w	r3, r3, #32
 80046ac:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80046b0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80046b4:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80046bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80046be:	2312      	movs	r3, #18
 80046c0:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80046c4:	2302      	movs	r3, #2
 80046c6:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80046ca:	a90d      	add	r1, sp, #52	; 0x34
 80046cc:	f000 fffa 	bl	80056c4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80046d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80046d4:	a90d      	add	r1, sp, #52	; 0x34
 80046d6:	4888      	ldr	r0, [pc, #544]	; (80048f8 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80046d8:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80046da:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80046dc:	f000 fff2 	bl	80056c4 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80046e0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80046ec:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	930c      	str	r3, [sp, #48]	; 0x30
 80046f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 80046f8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8004704:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004710:	f003 f9c8 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8004714:	2800      	cmp	r0, #0
 8004716:	d071      	beq.n	80047fc <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004718:	4b78      	ldr	r3, [pc, #480]	; (80048fc <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800471a:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800471e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8004904 <BSP_I2C4_Init+0x2ac>
 8004722:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004726:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800472a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800472e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004732:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004736:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004738:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800473c:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004740:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004744:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004748:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <BSP_I2C4_Init+0x2a8>)
 800474e:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004752:	9a00      	ldr	r2, [sp, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4690      	mov	r8, r2
{
 8004758:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800475a:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800475c:	f240 3479 	movw	r4, #889	; 0x379
 8004760:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004762:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8004764:	45a4      	cmp	ip, r4
 8004766:	d95a      	bls.n	800481e <BSP_I2C4_Init+0x1c6>
 8004768:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800476a:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800476c:	45ab      	cmp	fp, r5
 800476e:	d852      	bhi.n	8004816 <BSP_I2C4_Init+0x1be>
 8004770:	9c02      	ldr	r4, [sp, #8]
 8004772:	42ac      	cmp	r4, r5
 8004774:	d34f      	bcc.n	8004816 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8004776:	4596      	cmp	lr, r2
 8004778:	d04d      	beq.n	8004816 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800477a:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 800477e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004780:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004782:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004786:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004788:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800478c:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004790:	d93e      	bls.n	8004810 <BSP_I2C4_Init+0x1b8>
 8004792:	4a5b      	ldr	r2, [pc, #364]	; (8004900 <BSP_I2C4_Init+0x2a8>)
 8004794:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004796:	4b5a      	ldr	r3, [pc, #360]	; (8004900 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004798:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 800479c:	4a59      	ldr	r2, [pc, #356]	; (8004904 <BSP_I2C4_Init+0x2ac>)
 800479e:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047a0:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047a2:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047a6:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80047a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80047ac:	9303      	str	r3, [sp, #12]
 80047ae:	f10b 0332 	add.w	r3, fp, #50	; 0x32
 80047b2:	9309      	str	r3, [sp, #36]	; 0x24
 80047b4:	f5ab 5311 	sub.w	r3, fp, #9280	; 0x2440
 80047b8:	3b0a      	subs	r3, #10
 80047ba:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80047bc:	9b06      	ldr	r3, [sp, #24]
 80047be:	429e      	cmp	r6, r3
 80047c0:	d138      	bne.n	8004834 <BSP_I2C4_Init+0x1dc>
        if (idx < I2C_VALID_TIMING_NBR)
 80047c2:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 80047c6:	d819      	bhi.n	80047fc <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047c8:	2314      	movs	r3, #20
 80047ca:	fb03 f808 	mul.w	r8, r3, r8
 80047ce:	4b4d      	ldr	r3, [pc, #308]	; (8004904 <BSP_I2C4_Init+0x2ac>)
 80047d0:	eb03 0208 	add.w	r2, r3, r8
 80047d4:	f853 3008 	ldr.w	r3, [r3, r8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80047d8:	7c14      	ldrb	r4, [r2, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047da:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80047de:	6853      	ldr	r3, [r2, #4]
 80047e0:	051b      	lsls	r3, r3, #20
 80047e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047e6:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80047e8:	6893      	ldr	r3, [r2, #8]
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047f0:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80047f2:	68d3      	ldr	r3, [r2, #12]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80047f8:	4323      	orrs	r3, r4
 80047fa:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80047fc:	9900      	ldr	r1, [sp, #0]
 80047fe:	483b      	ldr	r0, [pc, #236]	; (80048ec <BSP_I2C4_Init+0x294>)
 8004800:	f7ff ff0a 	bl	8004618 <MX_I2C4_Init>
 8004804:	2800      	cmp	r0, #0
 8004806:	d16b      	bne.n	80048e0 <BSP_I2C4_Init+0x288>
  int32_t ret = BSP_ERROR_NONE;
 8004808:	2000      	movs	r0, #0
}
 800480a:	b013      	add	sp, #76	; 0x4c
 800480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004810:	4696      	mov	lr, r2
 8004812:	f04f 0801 	mov.w	r8, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004816:	3701      	adds	r7, #1
 8004818:	440d      	add	r5, r1
 800481a:	2f10      	cmp	r7, #16
 800481c:	d1a6      	bne.n	800476c <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800481e:	2e10      	cmp	r6, #16
 8004820:	448c      	add	ip, r1
 8004822:	d19b      	bne.n	800475c <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004824:	3201      	adds	r2, #1
 8004826:	4401      	add	r1, r0
 8004828:	2a10      	cmp	r2, #16
 800482a:	d195      	bne.n	8004758 <BSP_I2C4_Init+0x100>
 800482c:	f1b8 0f00 	cmp.w	r8, #0
 8004830:	d1af      	bne.n	8004792 <BSP_I2C4_Init+0x13a>
 8004832:	e7b0      	b.n	8004796 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004834:	6813      	ldr	r3, [r2, #0]
 8004836:	f06f 0401 	mvn.w	r4, #1
 800483a:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800483c:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800483e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004842:	4419      	add	r1, r3
 8004844:	9104      	str	r1, [sp, #16]
 8004846:	eb03 010b 	add.w	r1, r3, fp
 800484a:	4361      	muls	r1, r4
 800484c:	9c02      	ldr	r4, [sp, #8]
 800484e:	9101      	str	r1, [sp, #4]
 8004850:	441c      	add	r4, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004852:	9904      	ldr	r1, [sp, #16]
 8004854:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004856:	f241 245c 	movw	r4, #4700	; 0x125c
 800485a:	9707      	str	r7, [sp, #28]
 800485c:	f1a1 0532 	sub.w	r5, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004860:	3701      	adds	r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004862:	42a1      	cmp	r1, r4
 8004864:	d931      	bls.n	80048ca <BSP_I2C4_Init+0x272>
 8004866:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
 800486a:	d22e      	bcs.n	80048ca <BSP_I2C4_Init+0x272>
 800486c:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800486e:	f04f 0c00 	mov.w	ip, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004872:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004876:	f504 5910 	add.w	r9, r4, #9216	; 0x2400
 800487a:	9c08      	ldr	r4, [sp, #32]
 800487c:	f109 0918 	add.w	r9, r9, #24
 8004880:	1865      	adds	r5, r4, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8004882:	f205 6a83 	addw	sl, r5, #1667	; 0x683
 8004886:	f241 0447 	movw	r4, #4167	; 0x1047
 800488a:	f8cd c014 	str.w	ip, [sp, #20]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800488e:	f10c 0c01 	add.w	ip, ip, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8004892:	45a2      	cmp	sl, r4
 8004894:	d812      	bhi.n	80048bc <BSP_I2C4_Init+0x264>
 8004896:	f5be 6f7a 	cmp.w	lr, #4000	; 0xfa0
 800489a:	d30f      	bcc.n	80048bc <BSP_I2C4_Init+0x264>
 800489c:	4570      	cmp	r0, lr
 800489e:	d20d      	bcs.n	80048bc <BSP_I2C4_Init+0x264>
              error = -error;
 80048a0:	ea35 0a25 	bics.w	sl, r5, r5, asr #32
 80048a4:	bf28      	it	cs
 80048a6:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80048a8:	9c03      	ldr	r4, [sp, #12]
 80048aa:	4554      	cmp	r4, sl
 80048ac:	d906      	bls.n	80048bc <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80048ae:	9c07      	ldr	r4, [sp, #28]
              I2c_valid_timing[count].sclh = sclh;
 80048b0:	46b0      	mov	r8, r6
 80048b2:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 80048b6:	6114      	str	r4, [r2, #16]
              I2c_valid_timing[count].sclh = sclh;
 80048b8:	9c05      	ldr	r4, [sp, #20]
 80048ba:	60d4      	str	r4, [r2, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80048bc:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80048c0:	eba9 0903 	sub.w	r9, r9, r3
 80048c4:	441d      	add	r5, r3
 80048c6:	449e      	add	lr, r3
 80048c8:	d1db      	bne.n	8004882 <BSP_I2C4_Init+0x22a>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80048ca:	9c01      	ldr	r4, [sp, #4]
 80048cc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80048d0:	4419      	add	r1, r3
 80048d2:	eba4 0403 	sub.w	r4, r4, r3
 80048d6:	9401      	str	r4, [sp, #4]
 80048d8:	d1bd      	bne.n	8004856 <BSP_I2C4_Init+0x1fe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80048da:	3601      	adds	r6, #1
 80048dc:	3214      	adds	r2, #20
 80048de:	e76d      	b.n	80047bc <BSP_I2C4_Init+0x164>
          ret = BSP_ERROR_BUS_FAILURE;
 80048e0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80048e4:	e791      	b.n	800480a <BSP_I2C4_Init+0x1b2>
 80048e6:	bf00      	nop
 80048e8:	58001c00 	.word	0x58001c00
 80048ec:	240071b0 	.word	0x240071b0
 80048f0:	240017d4 	.word	0x240017d4
 80048f4:	58024400 	.word	0x58024400
 80048f8:	58021400 	.word	0x58021400
 80048fc:	3b9aca00 	.word	0x3b9aca00
 8004900:	240021d8 	.word	0x240021d8
 8004904:	240017d8 	.word	0x240017d8

08004908 <BSP_I2C4_WriteReg>:
{
 8004908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800490a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800490e:	9200      	str	r2, [sp, #0]
 8004910:	460a      	mov	r2, r1
 8004912:	4601      	mov	r1, r0
 8004914:	4808      	ldr	r0, [pc, #32]	; (8004938 <BSP_I2C4_WriteReg+0x30>)
 8004916:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800491a:	2301      	movs	r3, #1
 800491c:	f001 fa6a 	bl	8005df4 <HAL_I2C_Mem_Write>
 8004920:	b140      	cbz	r0, 8004934 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004922:	4805      	ldr	r0, [pc, #20]	; (8004938 <BSP_I2C4_WriteReg+0x30>)
 8004924:	f001 fbdb 	bl	80060de <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004928:	2804      	cmp	r0, #4
 800492a:	bf0c      	ite	eq
 800492c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8004930:	f06f 0003 	mvnne.w	r0, #3
}
 8004934:	b004      	add	sp, #16
 8004936:	bd10      	pop	{r4, pc}
 8004938:	240071b0 	.word	0x240071b0

0800493c <BSP_I2C4_ReadReg>:
{
 800493c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800493e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004942:	9200      	str	r2, [sp, #0]
 8004944:	460a      	mov	r2, r1
 8004946:	4601      	mov	r1, r0
 8004948:	4808      	ldr	r0, [pc, #32]	; (800496c <BSP_I2C4_ReadReg+0x30>)
 800494a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800494e:	2301      	movs	r3, #1
 8004950:	f001 fb06 	bl	8005f60 <HAL_I2C_Mem_Read>
 8004954:	b140      	cbz	r0, 8004968 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004956:	4805      	ldr	r0, [pc, #20]	; (800496c <BSP_I2C4_ReadReg+0x30>)
 8004958:	f001 fbc1 	bl	80060de <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800495c:	2804      	cmp	r0, #4
 800495e:	bf0c      	ite	eq
 8004960:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8004964:	f06f 0003 	mvnne.w	r0, #3
}
 8004968:	b004      	add	sp, #16
 800496a:	bd10      	pop	{r4, pc}
 800496c:	240071b0 	.word	0x240071b0

08004970 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8004970:	f000 bcd0 	b.w	8005314 <HAL_GetTick>

08004974 <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8004974:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004976:	4c21      	ldr	r4, [pc, #132]	; (80049fc <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8004978:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800497a:	4821      	ldr	r0, [pc, #132]	; (8004a00 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 800497c:	78a2      	ldrb	r2, [r4, #2]
 800497e:	7861      	ldrb	r1, [r4, #1]
 8004980:	f7ff fc53 	bl	800422a <MX25LM51245G_WriteEnable>
 8004984:	b118      	cbz	r0, 800498e <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004986:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800498a:	b005      	add	sp, #20
 800498c:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 800498e:	2303      	movs	r3, #3
 8004990:	481b      	ldr	r0, [pc, #108]	; (8004a00 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004998:	78a2      	ldrb	r2, [r4, #2]
 800499a:	7861      	ldrb	r1, [r4, #1]
 800499c:	f7ff fccd 	bl	800433a <MX25LM51245G_WriteCfg2Register>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d1f0      	bne.n	8004986 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80049a4:	78a2      	ldrb	r2, [r4, #2]
 80049a6:	7861      	ldrb	r1, [r4, #1]
 80049a8:	4815      	ldr	r0, [pc, #84]	; (8004a00 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049aa:	f7ff fc3e 	bl	800422a <MX25LM51245G_WriteEnable>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d1e8      	bne.n	8004986 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80049b4:	2501      	movs	r5, #1
 80049b6:	4812      	ldr	r0, [pc, #72]	; (8004a00 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049b8:	9500      	str	r5, [sp, #0]
 80049ba:	78a2      	ldrb	r2, [r4, #2]
 80049bc:	7861      	ldrb	r1, [r4, #1]
 80049be:	f7ff fcbc 	bl	800433a <MX25LM51245G_WriteCfg2Register>
 80049c2:	4604      	mov	r4, r0
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d1de      	bne.n	8004986 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80049c8:	2028      	movs	r0, #40	; 0x28
 80049ca:	f000 fca9 	bl	8005320 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80049ce:	4622      	mov	r2, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	480b      	ldr	r0, [pc, #44]	; (8004a00 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049d4:	f7ff faf4 	bl	8003fc0 <MX25LM51245G_AutoPollingMemReady>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d1d4      	bne.n	8004986 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80049dc:	ab03      	add	r3, sp, #12
 80049de:	4602      	mov	r2, r0
 80049e0:	4629      	mov	r1, r5
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4603      	mov	r3, r0
 80049e6:	4806      	ldr	r0, [pc, #24]	; (8004a00 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 80049e8:	f7ff fd0d 	bl	8004406 <MX25LM51245G_ReadCfg2Register>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d1ca      	bne.n	8004986 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 80049f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	d0c8      	beq.n	800498a <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 80049f8:	e7c5      	b.n	8004986 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 80049fa:	bf00      	nop
 80049fc:	240021dc 	.word	0x240021dc
 8004a00:	240021e4 	.word	0x240021e4

08004a04 <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004a04:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a06:	4d27      	ldr	r5, [pc, #156]	; (8004aa4 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8004a08:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a0a:	4c27      	ldr	r4, [pc, #156]	; (8004aa8 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8004a0c:	78aa      	ldrb	r2, [r5, #2]
 8004a0e:	7869      	ldrb	r1, [r5, #1]
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff fc0a 	bl	800422a <MX25LM51245G_WriteEnable>
 8004a16:	b118      	cbz	r0, 8004a20 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a18:	f06f 0004 	mvn.w	r0, #4
}
 8004a1c:	b005      	add	sp, #20
 8004a1e:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004a20:	2303      	movs	r3, #3
 8004a22:	78aa      	ldrb	r2, [r5, #2]
 8004a24:	7869      	ldrb	r1, [r5, #1]
 8004a26:	4620      	mov	r0, r4
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a2e:	f7ff fc84 	bl	800433a <MX25LM51245G_WriteCfg2Register>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d1f0      	bne.n	8004a18 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004a36:	78aa      	ldrb	r2, [r5, #2]
 8004a38:	4620      	mov	r0, r4
 8004a3a:	7869      	ldrb	r1, [r5, #1]
 8004a3c:	f7ff fbf5 	bl	800422a <MX25LM51245G_WriteEnable>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d1e9      	bne.n	8004a18 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8004a44:	2302      	movs	r3, #2
 8004a46:	78aa      	ldrb	r2, [r5, #2]
 8004a48:	7869      	ldrb	r1, [r5, #1]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7ff fc73 	bl	800433a <MX25LM51245G_WriteCfg2Register>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d1df      	bne.n	8004a18 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004a58:	2028      	movs	r0, #40	; 0x28
 8004a5a:	f000 fc61 	bl	8005320 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004a62:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004a64:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004a66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004a6c:	f001 fe58 	bl	8006720 <HAL_OSPI_Init>
 8004a70:	b9a8      	cbnz	r0, 8004a9e <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004a72:	2201      	movs	r2, #1
 8004a74:	4620      	mov	r0, r4
 8004a76:	4611      	mov	r1, r2
 8004a78:	f7ff faa2 	bl	8003fc0 <MX25LM51245G_AutoPollingMemReady>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1cb      	bne.n	8004a18 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004a80:	ab03      	add	r3, sp, #12
 8004a82:	2201      	movs	r2, #1
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	4611      	mov	r1, r2
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7ff fcbb 	bl	8004406 <MX25LM51245G_ReadCfg2Register>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d1c1      	bne.n	8004a18 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004a94:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d0bf      	beq.n	8004a1c <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004a9c:	e7bc      	b.n	8004a18 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004a9e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004aa2:	e7bb      	b.n	8004a1c <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8004aa4:	240021dc 	.word	0x240021dc
 8004aa8:	240021e4 	.word	0x240021e4

08004aac <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8004aac:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <MX_OSPI_NOR_Init+0x3c>)
 8004aae:	2304      	movs	r3, #4
 8004ab0:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004ab4:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004ab6:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004ab8:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8004aba:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004abc:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004abe:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004ac2:	684a      	ldr	r2, [r1, #4]
 8004ac4:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004ac6:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8004ac8:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004aca:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004acc:	68ca      	ldr	r2, [r1, #12]
 8004ace:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004ad0:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004ad4:	bf09      	itett	eq
 8004ad6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004ada:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004adc:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004ade:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004ae2:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8004ae4:	f001 be1c 	b.w	8006720 <HAL_OSPI_Init>
 8004ae8:	52005000 	.word	0x52005000

08004aec <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8004aec:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004aee:	b998      	cbnz	r0, 8004b18 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004af0:	4c0b      	ldr	r4, [pc, #44]	; (8004b20 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
 8004af2:	78a2      	ldrb	r2, [r4, #2]
 8004af4:	7861      	ldrb	r1, [r4, #1]
 8004af6:	b95a      	cbnz	r2, 8004b10 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004af8:	2201      	movs	r2, #1
 8004afa:	480a      	ldr	r0, [pc, #40]	; (8004b24 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004afc:	f7ff fad6 	bl	80040ac <MX25LM51245G_EnableSTRMemoryMappedMode>
 8004b00:	b110      	cbz	r0, 8004b08 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b02:	f06f 0004 	mvn.w	r0, #4
}
 8004b06:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004b08:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8004b0a:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004b0c:	7023      	strb	r3, [r4, #0]
 8004b0e:	e7fa      	b.n	8004b06 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8004b10:	4804      	ldr	r0, [pc, #16]	; (8004b24 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8004b12:	f7ff fb3a 	bl	800418a <MX25LM51245G_EnableDTRMemoryMappedMode>
 8004b16:	e7f3      	b.n	8004b00 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8004b18:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004b1c:	e7f3      	b.n	8004b06 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8004b1e:	bf00      	nop
 8004b20:	240021dc 	.word	0x240021dc
 8004b24:	240021e4 	.word	0x240021e4

08004b28 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8004b28:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b2a:	b950      	cbnz	r0, 8004b42 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8004b2c:	4c09      	ldr	r4, [pc, #36]	; (8004b54 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8004b2e:	7823      	ldrb	r3, [r4, #0]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d109      	bne.n	8004b48 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8004b34:	4808      	ldr	r0, [pc, #32]	; (8004b58 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8004b36:	f002 f838 	bl	8006baa <HAL_OSPI_Abort>
 8004b3a:	b940      	cbnz	r0, 8004b4e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	7023      	strb	r3, [r4, #0]
}
 8004b40:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004b42:	f06f 0001 	mvn.w	r0, #1
 8004b46:	e7fb      	b.n	8004b40 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004b48:	f06f 001a 	mvn.w	r0, #26
 8004b4c:	e7f8      	b.n	8004b40 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004b4e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004b52:	e7f5      	b.n	8004b40 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8004b54:	240021dc 	.word	0x240021dc
 8004b58:	240021e4 	.word	0x240021e4

08004b5c <BSP_OSPI_NOR_DeInit>:
{
 8004b5c:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d156      	bne.n	8004c10 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004b62:	4c2d      	ldr	r4, [pc, #180]	; (8004c18 <BSP_OSPI_NOR_DeInit+0xbc>)
 8004b64:	7823      	ldrb	r3, [r4, #0]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d04b      	beq.n	8004c02 <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004b6a:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b70:	482a      	ldr	r0, [pc, #168]	; (8004c1c <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004b72:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8004b74:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004b76:	f000 fe8b 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	4828      	ldr	r0, [pc, #160]	; (8004c20 <BSP_OSPI_NOR_DeInit+0xc4>)
 8004b7e:	f000 fe87 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8004b82:	2140      	movs	r1, #64	; 0x40
 8004b84:	4827      	ldr	r0, [pc, #156]	; (8004c24 <BSP_OSPI_NOR_DeInit+0xc8>)
 8004b86:	f000 fe83 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8004b8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b8e:	4826      	ldr	r0, [pc, #152]	; (8004c28 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004b90:	f000 fe7e 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8004b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b98:	4823      	ldr	r0, [pc, #140]	; (8004c28 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004b9a:	f000 fe79 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	4822      	ldr	r0, [pc, #136]	; (8004c2c <BSP_OSPI_NOR_DeInit+0xd0>)
 8004ba2:	f000 fe75 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8004ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004baa:	481f      	ldr	r0, [pc, #124]	; (8004c28 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bac:	f000 fe70 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8004bb0:	2110      	movs	r1, #16
 8004bb2:	481d      	ldr	r0, [pc, #116]	; (8004c28 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bb4:	f000 fe6c 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8004bb8:	2120      	movs	r1, #32
 8004bba:	481b      	ldr	r0, [pc, #108]	; (8004c28 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bbc:	f000 fe68 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8004bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bc4:	4817      	ldr	r0, [pc, #92]	; (8004c24 <BSP_OSPI_NOR_DeInit+0xc8>)
 8004bc6:	f000 fe63 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	4816      	ldr	r0, [pc, #88]	; (8004c28 <BSP_OSPI_NOR_DeInit+0xcc>)
 8004bce:	f000 fe5f 	bl	8005890 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8004bd2:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004bd4:	4817      	ldr	r0, [pc, #92]	; (8004c34 <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8004bd6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004bde:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004be0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004be4:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8004be6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004bea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004bf2:	f001 fe0b 	bl	800680c <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2000      	moveq	r0, #0
 8004bfc:	f06f 0003 	mvnne.w	r0, #3
}
 8004c00:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004c02:	f7ff ff91 	bl	8004b28 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d0af      	beq.n	8004b6a <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8004c0a:	f06f 0004 	mvn.w	r0, #4
 8004c0e:	e7f7      	b.n	8004c00 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8004c10:	f06f 0001 	mvn.w	r0, #1
 8004c14:	e7f4      	b.n	8004c00 <BSP_OSPI_NOR_DeInit+0xa4>
 8004c16:	bf00      	nop
 8004c18:	240021dc 	.word	0x240021dc
 8004c1c:	58021400 	.word	0x58021400
 8004c20:	58020400 	.word	0x58020400
 8004c24:	58021800 	.word	0x58021800
 8004c28:	58020c00 	.word	0x58020c00
 8004c2c:	58021000 	.word	0x58021000
 8004c30:	58024400 	.word	0x58024400
 8004c34:	240021e4 	.word	0x240021e4

08004c38 <BSP_OSPI_NOR_ConfigFlash>:
{
 8004c38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004c3c:	460d      	mov	r5, r1
 8004c3e:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d156      	bne.n	8004cf2 <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004c44:	4c2e      	ldr	r4, [pc, #184]	; (8004d00 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8004c46:	7823      	ldrb	r3, [r4, #0]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d055      	beq.n	8004cf8 <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8004c4c:	7863      	ldrb	r3, [r4, #1]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d146      	bne.n	8004ce0 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8004c52:	2901      	cmp	r1, #1
 8004c54:	78a2      	ldrb	r2, [r4, #2]
 8004c56:	d109      	bne.n	8004c6c <BSP_OSPI_NOR_ConfigFlash+0x34>
 8004c58:	4296      	cmp	r6, r2
 8004c5a:	d107      	bne.n	8004c6c <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004c5c:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004c5e:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8004c60:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004c62:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004c64:	70a6      	strb	r6, [r4, #2]
}
 8004c66:	b004      	add	sp, #16
 8004c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004c6c:	4f25      	ldr	r7, [pc, #148]	; (8004d04 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4638      	mov	r0, r7
 8004c72:	f7ff fada 	bl	800422a <MX25LM51245G_WriteEnable>
 8004c76:	4603      	mov	r3, r0
 8004c78:	bb78      	cbnz	r0, 8004cda <BSP_OSPI_NOR_ConfigFlash+0xa2>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8004c7a:	f8ad 000c 	strh.w	r0, [sp, #12]
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8004c7e:	9000      	str	r0, [sp, #0]
 8004c80:	4638      	mov	r0, r7
 8004c82:	78a2      	ldrb	r2, [r4, #2]
 8004c84:	7861      	ldrb	r1, [r4, #1]
 8004c86:	f7ff fb58 	bl	800433a <MX25LM51245G_WriteCfg2Register>
 8004c8a:	4680      	mov	r8, r0
 8004c8c:	bb28      	cbnz	r0, 8004cda <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004c8e:	2028      	movs	r0, #40	; 0x28
 8004c90:	f000 fb46 	bl	8005320 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004c94:	78a3      	ldrb	r3, [r4, #2]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d106      	bne.n	8004ca8 <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004c9a:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004c9c:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004ca0:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004ca4:	f001 fd3c 	bl	8006720 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4816      	ldr	r0, [pc, #88]	; (8004d04 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004cac:	4611      	mov	r1, r2
 8004cae:	f7ff f987 	bl	8003fc0 <MX25LM51245G_AutoPollingMemReady>
 8004cb2:	b990      	cbnz	r0, 8004cda <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004cb4:	ab03      	add	r3, sp, #12
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	4601      	mov	r1, r0
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4811      	ldr	r0, [pc, #68]	; (8004d04 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8004cc0:	f7ff fba1 	bl	8004406 <MX25LM51245G_ReadCfg2Register>
 8004cc4:	b948      	cbnz	r0, 8004cda <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8004cc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004cca:	b933      	cbnz	r3, 8004cda <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004ccc:	2d01      	cmp	r5, #1
 8004cce:	d1c5      	bne.n	8004c5c <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004cd0:	78a3      	ldrb	r3, [r4, #2]
 8004cd2:	b94b      	cbnz	r3, 8004ce8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004cd4:	f7ff fe96 	bl	8004a04 <OSPI_NOR_EnterDOPIMode.constprop.0>
 8004cd8:	e008      	b.n	8004cec <BSP_OSPI_NOR_ConfigFlash+0xb4>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004cda:	f06f 0004 	mvn.w	r0, #4
 8004cde:	e7c2      	b.n	8004c66 <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8004ce0:	2901      	cmp	r1, #1
 8004ce2:	d1bb      	bne.n	8004c5c <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	d1f5      	bne.n	8004cd4 <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004ce8:	f7ff fe44 	bl	8004974 <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d1ba      	bne.n	8004c66 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004cf0:	e7b4      	b.n	8004c5c <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8004cf2:	f06f 0001 	mvn.w	r0, #1
 8004cf6:	e7b6      	b.n	8004c66 <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004cf8:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8004cfc:	e7b3      	b.n	8004c66 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8004cfe:	bf00      	nop
 8004d00:	240021dc 	.word	0x240021dc
 8004d04:	240021e4 	.word	0x240021e4

08004d08 <MX_OSPI_ClockConfig>:
{
 8004d08:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8004d0e:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004d10:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004d12:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004d14:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004d16:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004d18:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004d1a:	2305      	movs	r3, #5
 8004d1c:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8004d20:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8004d22:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004d24:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004d28:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004d2a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8004d2e:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004d30:	f002 ffe4 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
}
 8004d34:	b02f      	add	sp, #188	; 0xbc
 8004d36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004d3c <BSP_OSPI_NOR_Init>:
{
 8004d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d40:	460e      	mov	r6, r1
 8004d42:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004d44:	2800      	cmp	r0, #0
 8004d46:	f040 8160 	bne.w	800500a <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8004d4a:	4cb1      	ldr	r4, [pc, #708]	; (8005010 <BSP_OSPI_NOR_Init+0x2d4>)
 8004d4c:	7825      	ldrb	r5, [r4, #0]
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	f040 8159 	bne.w	8005006 <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8004d54:	4baf      	ldr	r3, [pc, #700]	; (8005014 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004d56:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004d5a:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004d5e:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8004d60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004d64:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004d66:	48ac      	ldr	r0, [pc, #688]	; (8005018 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8004d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d6c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004d70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004d74:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004d78:	9201      	str	r2, [sp, #4]
 8004d7a:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8004d7c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d82:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004d84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d8a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8004d8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004d90:	f042 0220 	orr.w	r2, r2, #32
 8004d94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004d98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004d9c:	f002 0220 	and.w	r2, r2, #32
 8004da0:	9202      	str	r2, [sp, #8]
 8004da2:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8004da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004da8:	f042 0202 	orr.w	r2, r2, #2
 8004dac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004db4:	f002 0202 	and.w	r2, r2, #2
 8004db8:	9203      	str	r2, [sp, #12]
 8004dba:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8004dbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004dc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dcc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004dd0:	9204      	str	r2, [sp, #16]
 8004dd2:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8004dd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dd8:	f042 0208 	orr.w	r2, r2, #8
 8004ddc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004de0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004de4:	f002 0208 	and.w	r2, r2, #8
 8004de8:	9205      	str	r2, [sp, #20]
 8004dea:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8004dec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004df0:	f042 0208 	orr.w	r2, r2, #8
 8004df4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004df8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004dfc:	f002 0208 	and.w	r2, r2, #8
 8004e00:	9206      	str	r2, [sp, #24]
 8004e02:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8004e04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e08:	f042 0210 	orr.w	r2, r2, #16
 8004e0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e14:	f002 0210 	and.w	r2, r2, #16
 8004e18:	9207      	str	r2, [sp, #28]
 8004e1a:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8004e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e20:	f042 0208 	orr.w	r2, r2, #8
 8004e24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e2c:	f002 0208 	and.w	r2, r2, #8
 8004e30:	9208      	str	r2, [sp, #32]
 8004e32:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8004e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e38:	f042 0208 	orr.w	r2, r2, #8
 8004e3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e44:	f002 0208 	and.w	r2, r2, #8
 8004e48:	9209      	str	r2, [sp, #36]	; 0x24
 8004e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8004e4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e50:	f042 0208 	orr.w	r2, r2, #8
 8004e54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e5c:	f002 0208 	and.w	r2, r2, #8
 8004e60:	920a      	str	r2, [sp, #40]	; 0x28
 8004e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8004e64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e74:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004e78:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e80:	f042 0208 	orr.w	r2, r2, #8
 8004e84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e88:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	930c      	str	r3, [sp, #48]	; 0x30
 8004e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004e96:	2340      	movs	r3, #64	; 0x40
 8004e98:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e9c:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004e9e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea2:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004ea6:	f000 fc0d 	bl	80056c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004eaa:	a911      	add	r1, sp, #68	; 0x44
 8004eac:	485b      	ldr	r0, [pc, #364]	; (800501c <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004eae:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004eb0:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8004eb2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004eb6:	f000 fc05 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004ebe:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004ec0:	2509      	movs	r5, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004ec2:	a911      	add	r1, sp, #68	; 0x44
 8004ec4:	4856      	ldr	r0, [pc, #344]	; (8005020 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004ec6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004ec8:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004eca:	f000 fbfb 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004ed2:	a911      	add	r1, sp, #68	; 0x44
 8004ed4:	4853      	ldr	r0, [pc, #332]	; (8005024 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004ed6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004ed8:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004eda:	f000 fbf3 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004ee2:	a911      	add	r1, sp, #68	; 0x44
 8004ee4:	484f      	ldr	r0, [pc, #316]	; (8005024 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004ee6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004ee8:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004eea:	f000 fbeb 	bl	80056c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004eee:	a911      	add	r1, sp, #68	; 0x44
 8004ef0:	484d      	ldr	r0, [pc, #308]	; (8005028 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8004ef2:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004ef4:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8004ef6:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004ef8:	f000 fbe4 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004f00:	a911      	add	r1, sp, #68	; 0x44
 8004f02:	4848      	ldr	r0, [pc, #288]	; (8005024 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004f04:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8004f06:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004f08:	f000 fbdc 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004f0c:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004f0e:	a911      	add	r1, sp, #68	; 0x44
 8004f10:	4844      	ldr	r0, [pc, #272]	; (8005024 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004f12:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8004f14:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004f18:	f000 fbd4 	bl	80056c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004f1c:	a911      	add	r1, sp, #68	; 0x44
 8004f1e:	4841      	ldr	r0, [pc, #260]	; (8005024 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004f20:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8004f22:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004f26:	f000 fbcd 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004f2e:	a911      	add	r1, sp, #68	; 0x44
 8004f30:	4839      	ldr	r0, [pc, #228]	; (8005018 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004f32:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8004f34:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004f36:	f000 fbc5 	bl	80056c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004f3a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004f3c:	a911      	add	r1, sp, #68	; 0x44
 8004f3e:	4839      	ldr	r0, [pc, #228]	; (8005024 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004f40:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8004f42:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004f46:	f000 fbbd 	bl	80056c4 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8004f4a:	a811      	add	r0, sp, #68	; 0x44
 8004f4c:	f7ff f81f 	bl	8003f8e <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 8004f52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f56:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f5a:	b10b      	cbz	r3, 8004f60 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004f5c:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004f60:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004f62:	4832      	ldr	r0, [pc, #200]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8004f64:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004f66:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8004f68:	7873      	ldrb	r3, [r6, #1]
 8004f6a:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004f6c:	f7ff fecc 	bl	8004d08 <MX_OSPI_ClockConfig>
 8004f70:	b120      	cbz	r0, 8004f7c <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004f72:	f06f 0003 	mvn.w	r0, #3
}
 8004f76:	b01b      	add	sp, #108	; 0x6c
 8004f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004f7c:	a90d      	add	r1, sp, #52	; 0x34
 8004f7e:	482b      	ldr	r0, [pc, #172]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004f80:	f7ff fd94 	bl	8004aac <MX_OSPI_NOR_Init>
 8004f84:	4602      	mov	r2, r0
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d1f3      	bne.n	8004f72 <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	4827      	ldr	r0, [pc, #156]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004f8e:	f7ff faa4 	bl	80044da <MX25LM51245G_ResetEnable>
 8004f92:	4602      	mov	r2, r0
 8004f94:	b110      	cbz	r0, 8004f9c <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f96:	f06f 0004 	mvn.w	r0, #4
 8004f9a:	e7ec      	b.n	8004f76 <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	4823      	ldr	r0, [pc, #140]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004fa0:	f7ff fad4 	bl	800454c <MX25LM51245G_ResetMemory>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d1f5      	bne.n	8004f96 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004faa:	2101      	movs	r1, #1
 8004fac:	481f      	ldr	r0, [pc, #124]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004fae:	f7ff fa94 	bl	80044da <MX25LM51245G_ResetEnable>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d1ee      	bne.n	8004f96 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004fb8:	2101      	movs	r1, #1
 8004fba:	481c      	ldr	r0, [pc, #112]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004fbc:	f7ff fac6 	bl	800454c <MX25LM51245G_ResetMemory>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d1e8      	bne.n	8004f96 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4819      	ldr	r0, [pc, #100]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004fc8:	4611      	mov	r1, r2
 8004fca:	f7ff fa86 	bl	80044da <MX25LM51245G_ResetEnable>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d1e1      	bne.n	8004f96 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4815      	ldr	r0, [pc, #84]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	f7ff fab8 	bl	800454c <MX25LM51245G_ResetMemory>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d1da      	bne.n	8004f96 <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004fe0:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8004fe2:	70a0      	strb	r0, [r4, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004fe4:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004fe6:	8023      	strh	r3, [r4, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004fe8:	f000 f99a 	bl	8005320 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004fec:	78a2      	ldrb	r2, [r4, #2]
 8004fee:	7861      	ldrb	r1, [r4, #1]
 8004ff0:	480e      	ldr	r0, [pc, #56]	; (800502c <BSP_OSPI_NOR_Init+0x2f0>)
 8004ff2:	f7fe ffe5 	bl	8003fc0 <MX25LM51245G_AutoPollingMemReady>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d1cd      	bne.n	8004f96 <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8004ffa:	7872      	ldrb	r2, [r6, #1]
 8004ffc:	7831      	ldrb	r1, [r6, #0]
 8004ffe:	f7ff fe1b 	bl	8004c38 <BSP_OSPI_NOR_ConfigFlash>
 8005002:	2800      	cmp	r0, #0
 8005004:	d1c7      	bne.n	8004f96 <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 8005006:	2000      	movs	r0, #0
 8005008:	e7b5      	b.n	8004f76 <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 800500a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800500e:	e7b2      	b.n	8004f76 <BSP_OSPI_NOR_Init+0x23a>
 8005010:	240021dc 	.word	0x240021dc
 8005014:	58024400 	.word	0x58024400
 8005018:	58021800 	.word	0x58021800
 800501c:	58020400 	.word	0x58020400
 8005020:	58021400 	.word	0x58021400
 8005024:	58020c00 	.word	0x58020c00
 8005028:	58021000 	.word	0x58021000
 800502c:	240021e4 	.word	0x240021e4

08005030 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	460c      	mov	r4, r1
 8005036:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005038:	2800      	cmp	r0, #0
 800503a:	d163      	bne.n	8005104 <BSP_TS_Init+0xd4>
 800503c:	680b      	ldr	r3, [r1, #0]
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8005044:	d25e      	bcs.n	8005104 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005046:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005048:	1e51      	subs	r1, r2, #1
 800504a:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 800504e:	d259      	bcs.n	8005104 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005050:	4293      	cmp	r3, r2
 8005052:	bf28      	it	cs
 8005054:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005056:	68e2      	ldr	r2, [r4, #12]
 8005058:	429a      	cmp	r2, r3
 800505a:	d853      	bhi.n	8005104 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800505c:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800505e:	4d2b      	ldr	r5, [pc, #172]	; (800510c <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8005060:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005062:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005064:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005068:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 800506a:	4b29      	ldr	r3, [pc, #164]	; (8005110 <BSP_TS_Init+0xe0>)
 800506c:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <BSP_TS_Init+0xe4>)
 8005070:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005072:	4b29      	ldr	r3, [pc, #164]	; (8005118 <BSP_TS_Init+0xe8>)
 8005074:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005076:	4b29      	ldr	r3, [pc, #164]	; (800511c <BSP_TS_Init+0xec>)
 8005078:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <BSP_TS_Init+0xf0>)
 800507c:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800507e:	f7fe fef1 	bl	8003e64 <FT5336_RegisterBusIO>
 8005082:	b128      	cbz	r0, 8005090 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 8005084:	f04f 35ff 	mov.w	r5, #4294967295
}
 8005088:	4628      	mov	r0, r5
 800508a:	b008      	add	sp, #32
 800508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8005090:	a901      	add	r1, sp, #4
 8005092:	4628      	mov	r0, r5
 8005094:	f7fe fe4c 	bl	8003d30 <FT5336_ReadID>
 8005098:	2800      	cmp	r0, #0
 800509a:	d1f3      	bne.n	8005084 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800509c:	9b01      	ldr	r3, [sp, #4]
 800509e:	2b51      	cmp	r3, #81	; 0x51
 80050a0:	d1f0      	bne.n	8005084 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80050a4:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 80050a6:	4f20      	ldr	r7, [pc, #128]	; (8005128 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050a8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8005130 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 80050ac:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80050ae:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4798      	blx	r3
 80050b6:	4605      	mov	r5, r0
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d1e3      	bne.n	8005084 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050bc:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050be:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050c0:	4e1a      	ldr	r6, [pc, #104]	; (800512c <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050c2:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80050c4:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80050ca:	68a3      	ldr	r3, [r4, #8]
 80050cc:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80050d2:	f8d8 3000 	ldr.w	r3, [r8]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	4798      	blx	r3
 80050da:	2800      	cmp	r0, #0
 80050dc:	db0f      	blt.n	80050fe <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80050de:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80050e0:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80050e2:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80050e4:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80050e6:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80050e8:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80050ee:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80050f0:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80050f2:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80050f4:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80050f6:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80050f8:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80050fc:	e7c4      	b.n	8005088 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050fe:	f06f 0504 	mvn.w	r5, #4
 8005102:	e7c1      	b.n	8005088 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8005104:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005108:	e7be      	b.n	8005088 <BSP_TS_Init+0x58>
 800510a:	bf00      	nop
 800510c:	24002244 	.word	0x24002244
 8005110:	08004659 	.word	0x08004659
 8005114:	080045c1 	.word	0x080045c1
 8005118:	0800493d 	.word	0x0800493d
 800511c:	08004909 	.word	0x08004909
 8005120:	08004971 	.word	0x08004971
 8005124:	24000020 	.word	0x24000020
 8005128:	2400226c 	.word	0x2400226c
 800512c:	24002270 	.word	0x24002270
 8005130:	24002298 	.word	0x24002298

08005134 <BSP_TS_GetState>:
{
 8005134:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005138:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 800513a:	2800      	cmp	r0, #0
 800513c:	d151      	bne.n	80051e2 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800513e:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <BSP_TS_GetState+0xb4>)
 8005140:	a901      	add	r1, sp, #4
 8005142:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <BSP_TS_GetState+0xb8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6810      	ldr	r0, [r2, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	4798      	blx	r3
 800514c:	2800      	cmp	r0, #0
 800514e:	db45      	blt.n	80051dc <BSP_TS_GetState+0xa8>
    else if(state.TouchDetected != 0U)
 8005150:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <BSP_TS_GetState+0xbc>)
 8005152:	9801      	ldr	r0, [sp, #4]
 8005154:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8005158:	6a1f      	ldr	r7, [r3, #32]
 800515a:	2800      	cmp	r0, #0
 800515c:	d03a      	beq.n	80051d4 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800515e:	689e      	ldr	r6, [r3, #8]
 8005160:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005164:	0732      	lsls	r2, r6, #28
      y_oriented = state.TouchY;
 8005166:	e9dd e102 	ldrd	lr, r1, [sp, #8]
        x_oriented = state.TouchY;
 800516a:	bf4b      	itete	mi
 800516c:	460d      	movmi	r5, r1
      x_oriented = state.TouchX;
 800516e:	4675      	movpl	r5, lr
        y_oriented = state.TouchX;
 8005170:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 8005172:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8005174:	f016 0f02 	tst.w	r6, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8005178:	bf1c      	itt	ne
 800517a:	f108 35ff 	addne.w	r5, r8, #4294967295
 800517e:	eba5 050e 	subne.w	r5, r5, lr
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8005182:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8005186:	0776      	lsls	r6, r6, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005188:	681e      	ldr	r6, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800518a:	bf48      	it	mi
 800518c:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005190:	4375      	muls	r5, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005192:	6859      	ldr	r1, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8005194:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005196:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005198:	68d8      	ldr	r0, [r3, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800519a:	fbb5 f5f8 	udiv	r5, r5, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800519e:	fbb2 f2fe 	udiv	r2, r2, lr
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80051a2:	4565      	cmp	r5, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80051a4:	6065      	str	r5, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80051a6:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80051a8:	bf8c      	ite	hi
 80051aa:	eba5 060c 	subhi.w	r6, r5, ip
 80051ae:	ebac 0605 	subls.w	r6, ip, r5
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80051b2:	42ba      	cmp	r2, r7
 80051b4:	bf8c      	ite	hi
 80051b6:	1bd1      	subhi	r1, r2, r7
 80051b8:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80051ba:	42b0      	cmp	r0, r6
 80051bc:	d301      	bcc.n	80051c2 <BSP_TS_GetState+0x8e>
 80051be:	4288      	cmp	r0, r1
 80051c0:	d205      	bcs.n	80051ce <BSP_TS_GetState+0x9a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80051c2:	619d      	str	r5, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80051c4:	621a      	str	r2, [r3, #32]
  int32_t ret = BSP_ERROR_NONE;
 80051c6:	2000      	movs	r0, #0
}
 80051c8:	b004      	add	sp, #16
 80051ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80051ce:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80051d2:	e7f8      	b.n	80051c6 <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80051d4:	e9c4 0c00 	strd	r0, ip, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80051d8:	60a7      	str	r7, [r4, #8]
 80051da:	e7f5      	b.n	80051c8 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80051dc:	f06f 0004 	mvn.w	r0, #4
 80051e0:	e7f2      	b.n	80051c8 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80051e2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80051e6:	e7ef      	b.n	80051c8 <BSP_TS_GetState+0x94>
 80051e8:	24002298 	.word	0x24002298
 80051ec:	2400226c 	.word	0x2400226c
 80051f0:	24002270 	.word	0x24002270

080051f4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051f4:	4a22      	ldr	r2, [pc, #136]	; (8005280 <SystemInit+0x8c>)
 80051f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80051fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005202:	4a20      	ldr	r2, [pc, #128]	; (8005284 <SystemInit+0x90>)
 8005204:	6813      	ldr	r3, [r2, #0]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	2b06      	cmp	r3, #6
 800520c:	d805      	bhi.n	800521a <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800520e:	6813      	ldr	r3, [r2, #0]
 8005210:	f023 030f 	bic.w	r3, r3, #15
 8005214:	f043 0307 	orr.w	r3, r3, #7
 8005218:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <SystemInit+0x94>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005224:	2200      	movs	r2, #0
 8005226:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005228:	4a18      	ldr	r2, [pc, #96]	; (800528c <SystemInit+0x98>)
 800522a:	6819      	ldr	r1, [r3, #0]
 800522c:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800522e:	4915      	ldr	r1, [pc, #84]	; (8005284 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8005230:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005232:	680a      	ldr	r2, [r1, #0]
 8005234:	0712      	lsls	r2, r2, #28
 8005236:	d505      	bpl.n	8005244 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005238:	680a      	ldr	r2, [r1, #0]
 800523a:	f022 020f 	bic.w	r2, r2, #15
 800523e:	f042 0207 	orr.w	r2, r2, #7
 8005242:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005244:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005246:	4912      	ldr	r1, [pc, #72]	; (8005290 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8005248:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800524a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800524c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800524e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005250:	4910      	ldr	r1, [pc, #64]	; (8005294 <SystemInit+0xa0>)
 8005252:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005254:	4910      	ldr	r1, [pc, #64]	; (8005298 <SystemInit+0xa4>)
 8005256:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800525a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800525e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005260:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005268:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800526a:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800526c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <SystemInit+0xa8>)
 8005272:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005278:	4b01      	ldr	r3, [pc, #4]	; (8005280 <SystemInit+0x8c>)
 800527a:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000ed00 	.word	0xe000ed00
 8005284:	52002000 	.word	0x52002000
 8005288:	58024400 	.word	0x58024400
 800528c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005290:	02020200 	.word	0x02020200
 8005294:	01ff0000 	.word	0x01ff0000
 8005298:	01010280 	.word	0x01010280
 800529c:	52004000 	.word	0x52004000

080052a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052a0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052a2:	2003      	movs	r0, #3
 80052a4:	f000 f84e 	bl	8005344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052a8:	f002 fa02 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 80052ac:	490f      	ldr	r1, [pc, #60]	; (80052ec <HAL_Init+0x4c>)
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <HAL_Init+0x50>)
 80052b0:	698b      	ldr	r3, [r1, #24]
 80052b2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052be:	698b      	ldr	r3, [r1, #24]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	5cd3      	ldrb	r3, [r2, r3]
 80052c6:	4a0b      	ldr	r2, [pc, #44]	; (80052f4 <HAL_Init+0x54>)
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa20 f303 	lsr.w	r3, r0, r3
 80052d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_Init+0x58>)
 80052d4:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052d6:	2000      	movs	r0, #0
 80052d8:	f7fc fa56 	bl	8001788 <HAL_InitTick>
 80052dc:	4604      	mov	r4, r0
 80052de:	b918      	cbnz	r0, 80052e8 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80052e0:	f7fb fe8c 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80052e4:	4620      	mov	r0, r4
 80052e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052e8:	2401      	movs	r4, #1
 80052ea:	e7fb      	b.n	80052e4 <HAL_Init+0x44>
 80052ec:	58024400 	.word	0x58024400
 80052f0:	0801d180 	.word	0x0801d180
 80052f4:	24000054 	.word	0x24000054
 80052f8:	24000050 	.word	0x24000050

080052fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80052fc:	4a03      	ldr	r2, [pc, #12]	; (800530c <HAL_IncTick+0x10>)
 80052fe:	4b04      	ldr	r3, [pc, #16]	; (8005310 <HAL_IncTick+0x14>)
 8005300:	6811      	ldr	r1, [r2, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	440b      	add	r3, r1
 8005306:	6013      	str	r3, [r2, #0]
}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	240071fc 	.word	0x240071fc
 8005310:	24000058 	.word	0x24000058

08005314 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005314:	4b01      	ldr	r3, [pc, #4]	; (800531c <HAL_GetTick+0x8>)
 8005316:	6818      	ldr	r0, [r3, #0]
}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	240071fc 	.word	0x240071fc

08005320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005324:	f7ff fff6 	bl	8005314 <HAL_GetTick>
 8005328:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800532a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800532c:	bf1e      	ittt	ne
 800532e:	4b04      	ldrne	r3, [pc, #16]	; (8005340 <HAL_Delay+0x20>)
 8005330:	781b      	ldrbne	r3, [r3, #0]
 8005332:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005334:	f7ff ffee 	bl	8005314 <HAL_GetTick>
 8005338:	1b43      	subs	r3, r0, r5
 800533a:	42a3      	cmp	r3, r4
 800533c:	d3fa      	bcc.n	8005334 <HAL_Delay+0x14>
  {
  }
}
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	24000058 	.word	0x24000058

08005344 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005344:	4907      	ldr	r1, [pc, #28]	; (8005364 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005346:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005348:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800534a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005352:	0412      	lsls	r2, r2, #16
 8005354:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800535c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005360:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005362:	4770      	bx	lr
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005368:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800536a:	b530      	push	{r4, r5, lr}
 800536c:	68dc      	ldr	r4, [r3, #12]
 800536e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005372:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005376:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005378:	2d04      	cmp	r5, #4
 800537a:	bf28      	it	cs
 800537c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800537e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005380:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005384:	bf8c      	ite	hi
 8005386:	3c03      	subhi	r4, #3
 8005388:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800538a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800538e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005390:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005394:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005398:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800539c:	fa01 f104 	lsl.w	r1, r1, r4
 80053a0:	ea41 0302 	orr.w	r3, r1, r2
 80053a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80053a8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80053aa:	db06      	blt.n	80053ba <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80053b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80053b4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053b8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ba:	f000 000f 	and.w	r0, r0, #15
 80053be:	4a02      	ldr	r2, [pc, #8]	; (80053c8 <HAL_NVIC_SetPriority+0x60>)
 80053c0:	5413      	strb	r3, [r2, r0]
 80053c2:	e7f9      	b.n	80053b8 <HAL_NVIC_SetPriority+0x50>
 80053c4:	e000ed00 	.word	0xe000ed00
 80053c8:	e000ed14 	.word	0xe000ed14

080053cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053cc:	2800      	cmp	r0, #0
 80053ce:	db08      	blt.n	80053e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053d0:	2301      	movs	r3, #1
 80053d2:	0942      	lsrs	r2, r0, #5
 80053d4:	f000 001f 	and.w	r0, r0, #31
 80053d8:	fa03 f000 	lsl.w	r0, r3, r0
 80053dc:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <HAL_NVIC_EnableIRQ+0x18>)
 80053de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80053e2:	4770      	bx	lr
 80053e4:	e000e100 	.word	0xe000e100

080053e8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80053e8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80053ec:	4a04      	ldr	r2, [pc, #16]	; (8005400 <HAL_MPU_Disable+0x18>)
 80053ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80053f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80053f6:	2200      	movs	r2, #0
 80053f8:	4b02      	ldr	r3, [pc, #8]	; (8005404 <HAL_MPU_Disable+0x1c>)
 80053fa:	605a      	str	r2, [r3, #4]
}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000ed00 	.word	0xe000ed00
 8005404:	e000ed90 	.word	0xe000ed90

08005408 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005408:	4a06      	ldr	r2, [pc, #24]	; (8005424 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800540a:	f040 0001 	orr.w	r0, r0, #1
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_MPU_Enable+0x20>)
 8005410:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005412:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005418:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800541a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800541e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005422:	4770      	bx	lr
 8005424:	e000ed00 	.word	0xe000ed00
 8005428:	e000ed90 	.word	0xe000ed90

0800542c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800542c:	7843      	ldrb	r3, [r0, #1]
 800542e:	4a12      	ldr	r2, [pc, #72]	; (8005478 <HAL_MPU_ConfigRegion+0x4c>)
{
 8005430:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8005432:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005434:	7801      	ldrb	r1, [r0, #0]
 8005436:	b1d9      	cbz	r1, 8005470 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005438:	6843      	ldr	r3, [r0, #4]
 800543a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800543c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800543e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005440:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005442:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005446:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005448:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800544a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800544e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005450:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005454:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005456:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800545a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800545c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005460:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005462:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005466:	7a01      	ldrb	r1, [r0, #8]
 8005468:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800546c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800546e:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005470:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8005472:	6111      	str	r1, [r2, #16]
}
 8005474:	e7fb      	b.n	800546e <HAL_MPU_ConfigRegion+0x42>
 8005476:	bf00      	nop
 8005478:	e000ed90 	.word	0xe000ed90

0800547c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800547c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800547e:	4604      	mov	r4, r0
 8005480:	b908      	cbnz	r0, 8005486 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005482:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005484:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005486:	7f43      	ldrb	r3, [r0, #29]
 8005488:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800548c:	b913      	cbnz	r3, 8005494 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800548e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005490:	f7fb fdcc 	bl	800102c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005494:	2302      	movs	r3, #2
 8005496:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005498:	7923      	ldrb	r3, [r4, #4]
 800549a:	b9e3      	cbnz	r3, 80054d6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <HAL_CRC_Init+0x70>)
 80054a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	f022 0218 	bic.w	r2, r2, #24
 80054a8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80054aa:	7962      	ldrb	r2, [r4, #5]
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	b9d2      	cbnz	r2, 80054e6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80054b0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80054b4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80054b6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	6961      	ldr	r1, [r4, #20]
 80054bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054c0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054c2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80054c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054cc:	430a      	orrs	r2, r1
 80054ce:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80054d0:	2301      	movs	r3, #1
 80054d2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80054d4:	e7d6      	b.n	8005484 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80054d6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f808 	bl	80054f0 <HAL_CRCEx_Polynomial_Set>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d0e2      	beq.n	80054aa <HAL_CRC_Init+0x2e>
 80054e4:	e7cd      	b.n	8005482 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80054e6:	6922      	ldr	r2, [r4, #16]
 80054e8:	e7e4      	b.n	80054b4 <HAL_CRC_Init+0x38>
 80054ea:	bf00      	nop
 80054ec:	04c11db7 	.word	0x04c11db7

080054f0 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80054f0:	231f      	movs	r3, #31
{
 80054f2:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80054f4:	3b01      	subs	r3, #1
 80054f6:	d306      	bcc.n	8005506 <HAL_CRCEx_Polynomial_Set+0x16>
 80054f8:	fa21 f403 	lsr.w	r4, r1, r3
 80054fc:	07e4      	lsls	r4, r4, #31
 80054fe:	d5f9      	bpl.n	80054f4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8005500:	2a08      	cmp	r2, #8
 8005502:	d014      	beq.n	800552e <HAL_CRCEx_Polynomial_Set+0x3e>
 8005504:	d802      	bhi.n	800550c <HAL_CRCEx_Polynomial_Set+0x1c>
 8005506:	b13a      	cbz	r2, 8005518 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8005508:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800550a:	e00d      	b.n	8005528 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800550c:	2a10      	cmp	r2, #16
 800550e:	d00c      	beq.n	800552a <HAL_CRCEx_Polynomial_Set+0x3a>
 8005510:	2a18      	cmp	r2, #24
 8005512:	d1f9      	bne.n	8005508 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8005514:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8005516:	d8f7      	bhi.n	8005508 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005518:	6800      	ldr	r0, [r0, #0]
 800551a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800551c:	6883      	ldr	r3, [r0, #8]
 800551e:	f023 0318 	bic.w	r3, r3, #24
 8005522:	431a      	orrs	r2, r3
 8005524:	6082      	str	r2, [r0, #8]
 8005526:	2000      	movs	r0, #0
}
 8005528:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800552a:	2b07      	cmp	r3, #7
 800552c:	e7f3      	b.n	8005516 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800552e:	2b0f      	cmp	r3, #15
 8005530:	e7f1      	b.n	8005516 <HAL_CRCEx_Polynomial_Set+0x26>

08005532 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005532:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005534:	4604      	mov	r4, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	d036      	beq.n	80055a8 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800553a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800553e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005542:	b91b      	cbnz	r3, 800554c <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005544:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005548:	f7fb fd88 	bl	800105c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800554c:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800554e:	69e0      	ldr	r0, [r4, #28]
 8005550:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005552:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800555a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800555c:	6819      	ldr	r1, [r3, #0]
 800555e:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8005562:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005566:	430a      	orrs	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800556a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800556c:	68a2      	ldr	r2, [r4, #8]
 800556e:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8005572:	4302      	orrs	r2, r0
 8005574:	f021 0101 	bic.w	r1, r1, #1
 8005578:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800557a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800557c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800557e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005580:	0c12      	lsrs	r2, r2, #16
 8005582:	0412      	lsls	r2, r2, #16
 8005584:	430a      	orrs	r2, r1
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800558a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800558e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005592:	0552      	lsls	r2, r2, #21
 8005594:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005598:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800559a:	430a      	orrs	r2, r1
 800559c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800559e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055a0:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80055a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80055a8:	2001      	movs	r0, #1
 80055aa:	e7fc      	b.n	80055a6 <HAL_DMA2D_Init+0x74>

080055ac <HAL_DMA2D_LineEventCallback>:
 80055ac:	4770      	bx	lr

080055ae <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80055ae:	4770      	bx	lr

080055b0 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055b0:	6803      	ldr	r3, [r0, #0]
{
 80055b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055b4:	685e      	ldr	r6, [r3, #4]
{
 80055b6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80055b8:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055ba:	07f2      	lsls	r2, r6, #31
 80055bc:	d514      	bpl.n	80055e8 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80055be:	05e9      	lsls	r1, r5, #23
 80055c0:	d512      	bpl.n	80055e8 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055c8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055ca:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80055d2:	2201      	movs	r2, #1
 80055d4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055d6:	2304      	movs	r3, #4
 80055d8:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055dc:	2300      	movs	r3, #0
 80055de:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80055e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055e4:	b103      	cbz	r3, 80055e8 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80055e8:	06b2      	lsls	r2, r6, #26
 80055ea:	d516      	bpl.n	800561a <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80055ec:	04ab      	lsls	r3, r5, #18
 80055ee:	d514      	bpl.n	800561a <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80055fa:	2220      	movs	r2, #32
 80055fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80055fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005606:	2304      	movs	r3, #4
 8005608:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800560c:	2300      	movs	r3, #0
 800560e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8005612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005614:	b10b      	cbz	r3, 800561a <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005616:	4620      	mov	r0, r4
 8005618:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800561a:	0730      	lsls	r0, r6, #28
 800561c:	d516      	bpl.n	800564c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800561e:	0529      	lsls	r1, r5, #20
 8005620:	d514      	bpl.n	800564c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800562a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800562c:	2208      	movs	r2, #8
 800562e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005632:	f043 0304 	orr.w	r3, r3, #4
 8005636:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005638:	2304      	movs	r3, #4
 800563a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800563e:	2300      	movs	r3, #0
 8005640:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8005644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005646:	b10b      	cbz	r3, 800564c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005648:	4620      	mov	r0, r4
 800564a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800564c:	0772      	lsls	r2, r6, #29
 800564e:	d50b      	bpl.n	8005668 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005650:	056b      	lsls	r3, r5, #21
 8005652:	d509      	bpl.n	8005668 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005654:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005656:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005660:	2204      	movs	r2, #4
 8005662:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005664:	f7ff ffa2 	bl	80055ac <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005668:	07b0      	lsls	r0, r6, #30
 800566a:	d514      	bpl.n	8005696 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800566c:	05a9      	lsls	r1, r5, #22
 800566e:	d512      	bpl.n	8005696 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005678:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800567a:	2202      	movs	r2, #2
 800567c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800567e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005680:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005682:	2301      	movs	r3, #1
 8005684:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005688:	2300      	movs	r3, #0
 800568a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800568e:	6a23      	ldr	r3, [r4, #32]
 8005690:	b10b      	cbz	r3, 8005696 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005692:	4620      	mov	r0, r4
 8005694:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005696:	06f2      	lsls	r2, r6, #27
 8005698:	d513      	bpl.n	80056c2 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800569a:	04eb      	lsls	r3, r5, #19
 800569c:	d511      	bpl.n	80056c2 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800569e:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056a0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80056aa:	2210      	movs	r2, #16
 80056ac:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b0:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80056b8:	2300      	movs	r3, #0
 80056ba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056be:	f7ff ff76 	bl	80055ae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80056c2:	bd70      	pop	{r4, r5, r6, pc}

080056c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80056c8:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056ca:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 80056ce:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 800588c <HAL_GPIO_Init+0x1c8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056d2:	680a      	ldr	r2, [r1, #0]
 80056d4:	fa32 f403 	lsrs.w	r4, r2, r3
 80056d8:	d102      	bne.n	80056e0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80056da:	b003      	add	sp, #12
 80056dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056e0:	f04f 0c01 	mov.w	ip, #1
 80056e4:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80056e8:	ea1c 0202 	ands.w	r2, ip, r2
 80056ec:	f000 80b7 	beq.w	800585e <HAL_GPIO_Init+0x19a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056f0:	684d      	ldr	r5, [r1, #4]
 80056f2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80056f6:	2603      	movs	r6, #3
 80056f8:	f005 0403 	and.w	r4, r5, #3
 80056fc:	fa06 f608 	lsl.w	r6, r6, r8
 8005700:	1e67      	subs	r7, r4, #1
 8005702:	43f6      	mvns	r6, r6
 8005704:	2f01      	cmp	r7, #1
 8005706:	d834      	bhi.n	8005772 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8005708:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800570a:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800570e:	68cf      	ldr	r7, [r1, #12]
 8005710:	fa07 f708 	lsl.w	r7, r7, r8
 8005714:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005718:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800571a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800571c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005720:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8005724:	409f      	lsls	r7, r3
 8005726:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800572a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800572c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800572e:	2c02      	cmp	r4, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005730:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005734:	688f      	ldr	r7, [r1, #8]
 8005736:	fa07 f708 	lsl.w	r7, r7, r8
 800573a:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 800573e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005740:	d119      	bne.n	8005776 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8005742:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005746:	f003 0b07 	and.w	fp, r3, #7
 800574a:	f04f 0c0f 	mov.w	ip, #15
 800574e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8005752:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005756:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800575a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800575e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005762:	690f      	ldr	r7, [r1, #16]
 8005764:	fa07 f70b 	lsl.w	r7, r7, fp
 8005768:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800576c:	f8ca 7020 	str.w	r7, [sl, #32]
 8005770:	e001      	b.n	8005776 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005772:	2c03      	cmp	r4, #3
 8005774:	d1da      	bne.n	800572c <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8005776:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005778:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800577c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005780:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005784:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8005788:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800578a:	d068      	beq.n	800585e <HAL_GPIO_Init+0x19a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800578c:	4e3d      	ldr	r6, [pc, #244]	; (8005884 <HAL_GPIO_Init+0x1c0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800578e:	f003 0703 	and.w	r7, r3, #3
 8005792:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005796:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800579a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579c:	f044 0402 	orr.w	r4, r4, #2
 80057a0:	f8c6 40f4 	str.w	r4, [r6, #244]	; 0xf4
 80057a4:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
 80057a8:	f023 0603 	bic.w	r6, r3, #3
 80057ac:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
 80057b0:	f004 0402 	and.w	r4, r4, #2
 80057b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80057b8:	9401      	str	r4, [sp, #4]
 80057ba:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057bc:	fa0c f407 	lsl.w	r4, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80057c0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057c4:	ea28 0c04 	bic.w	ip, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057c8:	4c2f      	ldr	r4, [pc, #188]	; (8005888 <HAL_GPIO_Init+0x1c4>)
 80057ca:	42a0      	cmp	r0, r4
 80057cc:	d049      	beq.n	8005862 <HAL_GPIO_Init+0x19e>
 80057ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057d2:	42a0      	cmp	r0, r4
 80057d4:	d047      	beq.n	8005866 <HAL_GPIO_Init+0x1a2>
 80057d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057da:	42a0      	cmp	r0, r4
 80057dc:	d045      	beq.n	800586a <HAL_GPIO_Init+0x1a6>
 80057de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057e2:	42a0      	cmp	r0, r4
 80057e4:	d043      	beq.n	800586e <HAL_GPIO_Init+0x1aa>
 80057e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057ea:	42a0      	cmp	r0, r4
 80057ec:	d041      	beq.n	8005872 <HAL_GPIO_Init+0x1ae>
 80057ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057f2:	42a0      	cmp	r0, r4
 80057f4:	d03f      	beq.n	8005876 <HAL_GPIO_Init+0x1b2>
 80057f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80057fa:	42a0      	cmp	r0, r4
 80057fc:	d03d      	beq.n	800587a <HAL_GPIO_Init+0x1b6>
 80057fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005802:	42a0      	cmp	r0, r4
 8005804:	d03b      	beq.n	800587e <HAL_GPIO_Init+0x1ba>
 8005806:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800580a:	42a0      	cmp	r0, r4
 800580c:	bf0c      	ite	eq
 800580e:	2409      	moveq	r4, #9
 8005810:	240a      	movne	r4, #10
 8005812:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005814:	02ef      	lsls	r7, r5, #11
        EXTI->RTSR1 = temp;
 8005816:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800581a:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800581e:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8005820:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI->RTSR1;
 8005824:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8005828:	bf54      	ite	pl
 800582a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800582c:	4314      	orrmi	r4, r2
        EXTI->RTSR1 = temp;
 800582e:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8005830:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005832:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 8005834:	bf54      	ite	pl
 8005836:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005838:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800583a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800583c:	f8c9 4004 	str.w	r4, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005840:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8005844:	bf54      	ite	pl
 8005846:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005848:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800584a:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800584c:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8005850:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8005854:	bf54      	ite	pl
 8005856:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005858:	4314      	orrmi	r4, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800585a:	f8ce 4000 	str.w	r4, [lr]
    position++;
 800585e:	3301      	adds	r3, #1
 8005860:	e737      	b.n	80056d2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005862:	2400      	movs	r4, #0
 8005864:	e7d5      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 8005866:	2401      	movs	r4, #1
 8005868:	e7d3      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 800586a:	2402      	movs	r4, #2
 800586c:	e7d1      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 800586e:	2403      	movs	r4, #3
 8005870:	e7cf      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 8005872:	2404      	movs	r4, #4
 8005874:	e7cd      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 8005876:	2405      	movs	r4, #5
 8005878:	e7cb      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 800587a:	2406      	movs	r4, #6
 800587c:	e7c9      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 800587e:	2407      	movs	r4, #7
 8005880:	e7c7      	b.n	8005812 <HAL_GPIO_Init+0x14e>
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
 8005888:	58020000 	.word	0x58020000
 800588c:	58000080 	.word	0x58000080

08005890 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005894:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005896:	4d49      	ldr	r5, [pc, #292]	; (80059bc <HAL_GPIO_DeInit+0x12c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005898:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80059c4 <HAL_GPIO_DeInit+0x134>
 800589c:	f8df a128 	ldr.w	sl, [pc, #296]	; 80059c8 <HAL_GPIO_DeInit+0x138>
 80058a0:	f8df b128 	ldr.w	fp, [pc, #296]	; 80059cc <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 80058a4:	fa31 f302 	lsrs.w	r3, r1, r2
 80058a8:	d101      	bne.n	80058ae <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80058ae:	2301      	movs	r3, #1
 80058b0:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 80058b4:	ea1e 0701 	ands.w	r7, lr, r1
 80058b8:	d06e      	beq.n	8005998 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058ba:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058be:	f002 0c03 	and.w	ip, r2, #3
 80058c2:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058c4:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <HAL_GPIO_DeInit+0x130>)
 80058c6:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058ca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058ce:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058d0:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058d4:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058dc:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058e0:	d05c      	beq.n	800599c <HAL_GPIO_DeInit+0x10c>
 80058e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e6:	4298      	cmp	r0, r3
 80058e8:	d05a      	beq.n	80059a0 <HAL_GPIO_DeInit+0x110>
 80058ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ee:	4298      	cmp	r0, r3
 80058f0:	d058      	beq.n	80059a4 <HAL_GPIO_DeInit+0x114>
 80058f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f6:	4298      	cmp	r0, r3
 80058f8:	d056      	beq.n	80059a8 <HAL_GPIO_DeInit+0x118>
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	4298      	cmp	r0, r3
 8005900:	d054      	beq.n	80059ac <HAL_GPIO_DeInit+0x11c>
 8005902:	4548      	cmp	r0, r9
 8005904:	d054      	beq.n	80059b0 <HAL_GPIO_DeInit+0x120>
 8005906:	4550      	cmp	r0, sl
 8005908:	d054      	beq.n	80059b4 <HAL_GPIO_DeInit+0x124>
 800590a:	4558      	cmp	r0, fp
 800590c:	d054      	beq.n	80059b8 <HAL_GPIO_DeInit+0x128>
 800590e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8005912:	4298      	cmp	r0, r3
 8005914:	bf0c      	ite	eq
 8005916:	2309      	moveq	r3, #9
 8005918:	230a      	movne	r3, #10
 800591a:	fa03 f30c 	lsl.w	r3, r3, ip
 800591e:	4543      	cmp	r3, r8
 8005920:	d118      	bne.n	8005954 <HAL_GPIO_DeInit+0xc4>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	ea23 0307 	bic.w	r3, r3, r7
 8005928:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800592a:	686b      	ldr	r3, [r5, #4]
 800592c:	ea23 0307 	bic.w	r3, r3, r7
 8005930:	606b      	str	r3, [r5, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800593a:	ea2c 0c07 	bic.w	ip, ip, r7
 800593e:	f8c3 c004 	str.w	ip, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005942:	f8d3 c000 	ldr.w	ip, [r3]
 8005946:	ea2c 0707 	bic.w	r7, ip, r7
 800594a:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800594c:	68a3      	ldr	r3, [r4, #8]
 800594e:	ea23 0606 	bic.w	r6, r3, r6
 8005952:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005954:	2603      	movs	r6, #3
 8005956:	0053      	lsls	r3, r2, #1
 8005958:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800595a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800595e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005962:	270f      	movs	r7, #15
 8005964:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005968:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800596a:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800596e:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005970:	fa22 f406 	lsr.w	r4, r2, r6
 8005974:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005978:	6a26      	ldr	r6, [r4, #32]
 800597a:	ea26 0707 	bic.w	r7, r6, r7
 800597e:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005980:	68c4      	ldr	r4, [r0, #12]
 8005982:	ea24 0403 	bic.w	r4, r4, r3
 8005986:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005988:	6844      	ldr	r4, [r0, #4]
 800598a:	ea24 040e 	bic.w	r4, r4, lr
 800598e:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005990:	6884      	ldr	r4, [r0, #8]
 8005992:	ea24 0303 	bic.w	r3, r4, r3
 8005996:	6083      	str	r3, [r0, #8]
    position++;
 8005998:	3201      	adds	r2, #1
 800599a:	e783      	b.n	80058a4 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800599c:	2300      	movs	r3, #0
 800599e:	e7bc      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e7ba      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e7b8      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059a8:	2303      	movs	r3, #3
 80059aa:	e7b6      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059ac:	2304      	movs	r3, #4
 80059ae:	e7b4      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059b0:	2305      	movs	r3, #5
 80059b2:	e7b2      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059b4:	2306      	movs	r3, #6
 80059b6:	e7b0      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059b8:	2307      	movs	r3, #7
 80059ba:	e7ae      	b.n	800591a <HAL_GPIO_DeInit+0x8a>
 80059bc:	58000080 	.word	0x58000080
 80059c0:	58020000 	.word	0x58020000
 80059c4:	58021400 	.word	0x58021400
 80059c8:	58021800 	.word	0x58021800
 80059cc:	58021c00 	.word	0x58021c00

080059d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059d0:	6903      	ldr	r3, [r0, #16]
 80059d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80059d4:	bf14      	ite	ne
 80059d6:	2001      	movne	r0, #1
 80059d8:	2000      	moveq	r0, #0
 80059da:	4770      	bx	lr

080059dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059dc:	b10a      	cbz	r2, 80059e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059de:	6181      	str	r1, [r0, #24]
  }
}
 80059e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059e2:	0409      	lsls	r1, r1, #16
 80059e4:	e7fb      	b.n	80059de <HAL_GPIO_WritePin+0x2>

080059e6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059e6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059e8:	ea01 0203 	and.w	r2, r1, r3
 80059ec:	ea21 0103 	bic.w	r1, r1, r3
 80059f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80059f4:	6181      	str	r1, [r0, #24]
}
 80059f6:	4770      	bx	lr

080059f8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059f8:	6803      	ldr	r3, [r0, #0]
 80059fa:	699a      	ldr	r2, [r3, #24]
 80059fc:	0791      	lsls	r1, r2, #30
 80059fe:	d501      	bpl.n	8005a04 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a00:	2200      	movs	r2, #0
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	07d2      	lsls	r2, r2, #31
 8005a08:	d403      	bmi.n	8005a12 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	619a      	str	r2, [r3, #24]
  }
}
 8005a12:	4770      	bx	lr

08005a14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a14:	b530      	push	{r4, r5, lr}
 8005a16:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a18:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a1c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a1e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a20:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a26:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a28:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a2a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a32:	ea20 0002 	bic.w	r0, r0, r2
 8005a36:	4303      	orrs	r3, r0
 8005a38:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	03ff63ff 	.word	0x03ff63ff

08005a40 <I2C_IsErrorOccurred>:
{
 8005a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a44:	6803      	ldr	r3, [r0, #0]
{
 8005a46:	4604      	mov	r4, r0
 8005a48:	4688      	mov	r8, r1
 8005a4a:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a4c:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a4e:	f015 0510 	ands.w	r5, r5, #16
 8005a52:	d079      	beq.n	8005b48 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a54:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005a58:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a5c:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	0695      	lsls	r5, r2, #26
 8005a64:	d436      	bmi.n	8005ad4 <I2C_IsErrorOccurred+0x94>
 8005a66:	b10e      	cbz	r6, 8005a6c <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005a68:	2504      	movs	r5, #4
 8005a6a:	e039      	b.n	8005ae0 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005a6c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a70:	d0f6      	beq.n	8005a60 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7ff fc4f 	bl	8005314 <HAL_GetTick>
 8005a76:	1bc0      	subs	r0, r0, r7
 8005a78:	4540      	cmp	r0, r8
 8005a7a:	d802      	bhi.n	8005a82 <I2C_IsErrorOccurred+0x42>
 8005a7c:	f1b8 0f00 	cmp.w	r8, #0
 8005a80:	d1ed      	bne.n	8005a5e <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8005a86:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a8a:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005a8c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a8e:	0400      	lsls	r0, r0, #16
 8005a90:	d50a      	bpl.n	8005aa8 <I2C_IsErrorOccurred+0x68>
 8005a92:	0449      	lsls	r1, r1, #17
 8005a94:	d408      	bmi.n	8005aa8 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8005a96:	2a20      	cmp	r2, #32
 8005a98:	d006      	beq.n	8005aa8 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005aa2:	f7ff fc37 	bl	8005314 <HAL_GetTick>
 8005aa6:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	699d      	ldr	r5, [r3, #24]
 8005aac:	f015 0520 	ands.w	r5, r5, #32
 8005ab0:	d1d5      	bne.n	8005a5e <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ab2:	f7ff fc2f 	bl	8005314 <HAL_GetTick>
 8005ab6:	1bc0      	subs	r0, r0, r7
 8005ab8:	2819      	cmp	r0, #25
 8005aba:	d9f5      	bls.n	8005aa8 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005abc:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8005abe:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8005ac0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ac4:	f043 0320 	orr.w	r3, r3, #32
 8005ac8:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005aca:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ace:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8005ad2:	e7e9      	b.n	8005aa8 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8005ad4:	2e00      	cmp	r6, #0
 8005ad6:	d1c7      	bne.n	8005a68 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad8:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8005ada:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8005adc:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ade:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ae4:	05d0      	lsls	r0, r2, #23
 8005ae6:	d505      	bpl.n	8005af4 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005aec:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8005af0:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005af2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005af4:	0551      	lsls	r1, r2, #21
 8005af6:	d505      	bpl.n	8005b04 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005afc:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8005b00:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b02:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b04:	0592      	lsls	r2, r2, #22
 8005b06:	d521      	bpl.n	8005b4c <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b08:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b0c:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b10:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005b12:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8005b14:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8005b16:	f7ff ff6f 	bl	80059f8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	6853      	ldr	r3, [r2, #4]
 8005b1e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005b22:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005b26:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005b30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b32:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8005b36:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005b42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b46:	e003      	b.n	8005b50 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8005b48:	462e      	mov	r6, r5
 8005b4a:	e7c9      	b.n	8005ae0 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8005b4c:	2e00      	cmp	r6, #0
 8005b4e:	d1e0      	bne.n	8005b12 <I2C_IsErrorOccurred+0xd2>
}
 8005b50:	4630      	mov	r0, r6
 8005b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005b56 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005b56:	b570      	push	{r4, r5, r6, lr}
 8005b58:	4604      	mov	r4, r0
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	079b      	lsls	r3, r3, #30
 8005b64:	d501      	bpl.n	8005b6a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005b66:	2000      	movs	r0, #0
}
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6a:	4632      	mov	r2, r6
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff ff66 	bl	8005a40 <I2C_IsErrorOccurred>
 8005b74:	b9a0      	cbnz	r0, 8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	1c6a      	adds	r2, r5, #1
 8005b78:	d0f1      	beq.n	8005b5e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7a:	f7ff fbcb 	bl	8005314 <HAL_GetTick>
 8005b7e:	1b80      	subs	r0, r0, r6
 8005b80:	42a8      	cmp	r0, r5
 8005b82:	d801      	bhi.n	8005b88 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	d1ea      	bne.n	8005b5e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b8a:	f043 0320 	orr.w	r3, r3, #32
 8005b8e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	2320      	movs	r3, #32
 8005b92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005b9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	e7e1      	b.n	8005b68 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	460d      	mov	r5, r1
 8005baa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	069b      	lsls	r3, r3, #26
 8005bb2:	d501      	bpl.n	8005bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005bb4:	2000      	movs	r0, #0
}
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb8:	4632      	mov	r2, r6
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff ff3f 	bl	8005a40 <I2C_IsErrorOccurred>
 8005bc2:	b990      	cbnz	r0, 8005bea <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc4:	f7ff fba6 	bl	8005314 <HAL_GetTick>
 8005bc8:	1b80      	subs	r0, r0, r6
 8005bca:	42a8      	cmp	r0, r5
 8005bcc:	d801      	bhi.n	8005bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	d1ec      	bne.n	8005bac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bd4:	f043 0320 	orr.w	r3, r3, #32
 8005bd8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	2320      	movs	r3, #32
 8005bdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005be6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7e3      	b.n	8005bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08005bee <I2C_WaitOnFlagUntilTimeout>:
{
 8005bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf2:	9f06      	ldr	r7, [sp, #24]
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4688      	mov	r8, r1
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	6993      	ldr	r3, [r2, #24]
 8005c00:	ea38 0303 	bics.w	r3, r8, r3
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	42b3      	cmp	r3, r6
 8005c0c:	d001      	beq.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e015      	b.n	8005c3e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005c12:	1c6b      	adds	r3, r5, #1
 8005c14:	d0f3      	beq.n	8005bfe <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7ff fb7d 	bl	8005314 <HAL_GetTick>
 8005c1a:	1bc0      	subs	r0, r0, r7
 8005c1c:	42a8      	cmp	r0, r5
 8005c1e:	d801      	bhi.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0x36>
 8005c20:	2d00      	cmp	r5, #0
 8005c22:	d1eb      	bne.n	8005bfc <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005c26:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c28:	f043 0320 	orr.w	r3, r3, #32
 8005c2c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005c3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005c44 <I2C_RequestMemoryWrite>:
{
 8005c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c48:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c4a:	4b18      	ldr	r3, [pc, #96]	; (8005cac <I2C_RequestMemoryWrite+0x68>)
{
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	b2f2      	uxtb	r2, r6
 8005c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8005c58:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c5c:	f7ff feda 	bl	8005a14 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c60:	4628      	mov	r0, r5
 8005c62:	4642      	mov	r2, r8
 8005c64:	4639      	mov	r1, r7
 8005c66:	f7ff ff76 	bl	8005b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c6a:	b118      	cbz	r0, 8005c74 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8005c6c:	2001      	movs	r0, #1
}
 8005c6e:	b002      	add	sp, #8
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c74:	2e01      	cmp	r6, #1
 8005c76:	682b      	ldr	r3, [r5, #0]
 8005c78:	d10d      	bne.n	8005c96 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c7a:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2180      	movs	r1, #128	; 0x80
 8005c80:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c82:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c84:	463b      	mov	r3, r7
 8005c86:	f8cd 8000 	str.w	r8, [sp]
 8005c8a:	f7ff ffb0 	bl	8005bee <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005c8e:	3800      	subs	r0, #0
 8005c90:	bf18      	it	ne
 8005c92:	2001      	movne	r0, #1
 8005c94:	e7eb      	b.n	8005c6e <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c96:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c98:	4639      	mov	r1, r7
 8005c9a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	f7ff ff59 	bl	8005b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d1e1      	bne.n	8005c6c <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	e7e6      	b.n	8005c7a <I2C_RequestMemoryWrite+0x36>
 8005cac:	80002000 	.word	0x80002000

08005cb0 <I2C_RequestMemoryRead>:
{
 8005cb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005cb4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <I2C_RequestMemoryRead+0x68>)
{
 8005cb8:	4605      	mov	r5, r0
 8005cba:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	b2f2      	uxtb	r2, r6
 8005cc0:	2300      	movs	r3, #0
{
 8005cc2:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cc6:	f7ff fea5 	bl	8005a14 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cca:	4628      	mov	r0, r5
 8005ccc:	4642      	mov	r2, r8
 8005cce:	4639      	mov	r1, r7
 8005cd0:	f7ff ff41 	bl	8005b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cd4:	b118      	cbz	r0, 8005cde <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005cd6:	2001      	movs	r0, #1
}
 8005cd8:	b002      	add	sp, #8
 8005cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cde:	2e01      	cmp	r6, #1
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	d10d      	bne.n	8005d00 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ce4:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2140      	movs	r1, #64	; 0x40
 8005cea:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cec:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cee:	463b      	mov	r3, r7
 8005cf0:	f8cd 8000 	str.w	r8, [sp]
 8005cf4:	f7ff ff7b 	bl	8005bee <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005cf8:	3800      	subs	r0, #0
 8005cfa:	bf18      	it	ne
 8005cfc:	2001      	movne	r0, #1
 8005cfe:	e7eb      	b.n	8005cd8 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d00:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d02:	4639      	mov	r1, r7
 8005d04:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d08:	4642      	mov	r2, r8
 8005d0a:	f7ff ff24 	bl	8005b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d1e1      	bne.n	8005cd6 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	e7e6      	b.n	8005ce4 <I2C_RequestMemoryRead+0x34>
 8005d16:	bf00      	nop
 8005d18:	80002000 	.word	0x80002000

08005d1c <HAL_I2C_MspInit>:
}
 8005d1c:	4770      	bx	lr

08005d1e <HAL_I2C_Init>:
{
 8005d1e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005d20:	4604      	mov	r4, r0
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d04a      	beq.n	8005dbc <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005d2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d2e:	b91b      	cbnz	r3, 8005d38 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005d30:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005d34:	f7ff fff2 	bl	8005d1c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d38:	2324      	movs	r3, #36	; 0x24
 8005d3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d48:	6862      	ldr	r2, [r4, #4]
 8005d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d4e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d56:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d58:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005d5c:	2901      	cmp	r1, #1
 8005d5e:	d124      	bne.n	8005daa <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d64:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d66:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d68:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d6a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d72:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d7a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d7c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005d80:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d82:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d88:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d8a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005d9a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005da8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005daa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dae:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005db0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005db2:	d1d8      	bne.n	8005d66 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e7d4      	b.n	8005d66 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	e7f3      	b.n	8005da8 <HAL_I2C_Init+0x8a>

08005dc0 <HAL_I2C_MspDeInit>:
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_I2C_DeInit>:
{
 8005dc2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	b198      	cbz	r0, 8005df0 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005dc8:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dca:	2324      	movs	r3, #36	; 0x24
 8005dcc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005dd0:	6813      	ldr	r3, [r2, #0]
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005dd8:	f7ff fff2 	bl	8005dc0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ddc:	2000      	movs	r0, #0
 8005dde:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005de0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005de4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005de8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005dee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005df0:	2001      	movs	r0, #1
 8005df2:	e7fc      	b.n	8005dee <HAL_I2C_DeInit+0x2c>

08005df4 <HAL_I2C_Mem_Write>:
{
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	469b      	mov	fp, r3
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005e04:	4692      	mov	sl, r2
 8005e06:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005e0a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	f040 80a3 	bne.w	8005f5c <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8005e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e18:	b10b      	cbz	r3, 8005e1e <HAL_I2C_Mem_Write+0x2a>
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	b933      	cbnz	r3, 8005e2c <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e22:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005e24:	2001      	movs	r0, #1
}
 8005e26:	b005      	add	sp, #20
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005e2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f000 8093 	beq.w	8005f5c <HAL_I2C_Mem_Write+0x168>
 8005e36:	2501      	movs	r5, #1
 8005e38:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005e3c:	f7ff fa6a 	bl	8005314 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e40:	2319      	movs	r3, #25
 8005e42:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005e44:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e46:	462a      	mov	r2, r5
 8005e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f7ff fece 	bl	8005bee <I2C_WaitOnFlagUntilTimeout>
 8005e52:	4680      	mov	r8, r0
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d1e5      	bne.n	8005e24 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e58:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005e5a:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e6c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e6e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005e70:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e72:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e74:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005e78:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e7a:	465b      	mov	r3, fp
 8005e7c:	f7ff fee2 	bl	8005c44 <I2C_RequestMemoryWrite>
 8005e80:	b110      	cbz	r0, 8005e88 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005e82:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e86:	e7cd      	b.n	8005e24 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2bff      	cmp	r3, #255	; 0xff
 8005e8e:	d955      	bls.n	8005f3c <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e90:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e96:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e98:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff fdb9 	bl	8005a14 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea2:	4632      	mov	r2, r6
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff fe55 	bl	8005b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d1b9      	bne.n	8005e24 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005eb8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005eba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005ebc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ebe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005ec0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005ec2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005ec4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005ec6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005ec8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ecc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b1ab      	cbz	r3, 8005efe <HAL_I2C_Mem_Write+0x10a>
 8005ed2:	b9a2      	cbnz	r2, 8005efe <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ed4:	464b      	mov	r3, r9
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	4620      	mov	r0, r4
 8005eda:	9600      	str	r6, [sp, #0]
 8005edc:	f7ff fe87 	bl	8005bee <I2C_WaitOnFlagUntilTimeout>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d19f      	bne.n	8005e24 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ee4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2bff      	cmp	r3, #255	; 0xff
 8005eea:	d92f      	bls.n	8005f4c <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eec:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ef2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ef4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff fd8b 	bl	8005a14 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005efe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1cd      	bne.n	8005ea2 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f06:	4632      	mov	r2, r6
 8005f08:	4649      	mov	r1, r9
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7ff fe4a 	bl	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d187      	bne.n	8005e24 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	2120      	movs	r1, #32
 8005f18:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005f20:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005f24:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005f32:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f36:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005f3a:	e774      	b.n	8005e26 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005f3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f42:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005f44:	b292      	uxth	r2, r2
 8005f46:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	e7a6      	b.n	8005e9a <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8005f4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f52:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005f54:	b292      	uxth	r2, r2
 8005f56:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	e7cc      	b.n	8005ef6 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	e762      	b.n	8005e26 <HAL_I2C_Mem_Write+0x32>

08005f60 <HAL_I2C_Mem_Read>:
{
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	b085      	sub	sp, #20
 8005f66:	469b      	mov	fp, r3
 8005f68:	4604      	mov	r4, r0
 8005f6a:	460f      	mov	r7, r1
 8005f6c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005f70:	4692      	mov	sl, r2
 8005f72:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005f76:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	f040 80a7 	bne.w	80060d0 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8005f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f84:	b10b      	cbz	r3, 8005f8a <HAL_I2C_Mem_Read+0x2a>
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	b933      	cbnz	r3, 8005f98 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005f90:	2001      	movs	r0, #1
}
 8005f92:	b005      	add	sp, #20
 8005f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005f98:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	f000 8097 	beq.w	80060d0 <HAL_I2C_Mem_Read+0x170>
 8005fa2:	2501      	movs	r5, #1
 8005fa4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005fa8:	f7ff f9b4 	bl	8005314 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fac:	2319      	movs	r3, #25
 8005fae:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005fb0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff fe18 	bl	8005bee <I2C_WaitOnFlagUntilTimeout>
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d1e5      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fc4:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005fc6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fcc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fda:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005fdc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fde:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fe0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005fe4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fe6:	465b      	mov	r3, fp
 8005fe8:	f7ff fe62 	bl	8005cb0 <I2C_RequestMemoryRead>
 8005fec:	b110      	cbz	r0, 8005ff4 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8005fee:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005ff2:	e7cd      	b.n	8005f90 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ff4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2bff      	cmp	r3, #255	; 0xff
 8005ffa:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <HAL_I2C_Mem_Read+0x174>)
 8005ffc:	d958      	bls.n	80060b0 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ffe:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006006:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006008:	4639      	mov	r1, r7
 800600a:	4620      	mov	r0, r4
 800600c:	f7ff fd02 	bl	8005a14 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006010:	464b      	mov	r3, r9
 8006012:	2200      	movs	r2, #0
 8006014:	2104      	movs	r1, #4
 8006016:	4620      	mov	r0, r4
 8006018:	9600      	str	r6, [sp, #0]
 800601a:	f7ff fde8 	bl	8005bee <I2C_WaitOnFlagUntilTimeout>
 800601e:	2800      	cmp	r0, #0
 8006020:	d1b6      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006028:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800602a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800602c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800602e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8006030:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006032:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006034:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006036:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006038:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800603a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800603c:	b29b      	uxth	r3, r3
 800603e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006040:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006042:	b29b      	uxth	r3, r3
 8006044:	b1ab      	cbz	r3, 8006072 <HAL_I2C_Mem_Read+0x112>
 8006046:	b9a2      	cbnz	r2, 8006072 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006048:	464b      	mov	r3, r9
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	4620      	mov	r0, r4
 800604e:	9600      	str	r6, [sp, #0]
 8006050:	f7ff fdcd 	bl	8005bee <I2C_WaitOnFlagUntilTimeout>
 8006054:	2800      	cmp	r0, #0
 8006056:	d19b      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006058:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	2bff      	cmp	r3, #255	; 0xff
 800605e:	d92f      	bls.n	80060c0 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006060:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006066:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006068:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800606a:	4639      	mov	r1, r7
 800606c:	4620      	mov	r0, r4
 800606e:	f7ff fcd1 	bl	8005a14 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006072:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1ca      	bne.n	8006010 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607a:	4632      	mov	r2, r6
 800607c:	4649      	mov	r1, r9
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff fd90 	bl	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006084:	2800      	cmp	r0, #0
 8006086:	d183      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	2120      	movs	r1, #32
 800608c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006094:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006098:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80060a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80060ae:	e770      	b.n	8005f92 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80060b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80060b8:	b292      	uxth	r2, r2
 80060ba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	e7a3      	b.n	8006008 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80060c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060c6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80060c8:	b292      	uxth	r2, r2
 80060ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	e7cc      	b.n	800606a <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80060d0:	2002      	movs	r0, #2
 80060d2:	e75e      	b.n	8005f92 <HAL_I2C_Mem_Read+0x32>
 80060d4:	80002400 	.word	0x80002400

080060d8 <HAL_I2C_GetState>:
  return hi2c->State;
 80060d8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80060dc:	4770      	bx	lr

080060de <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80060de:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80060e0:	4770      	bx	lr

080060e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060e2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	b2dc      	uxtb	r4, r3
 80060ec:	d11d      	bne.n	800612a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d019      	beq.n	800612a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060f6:	2324      	movs	r3, #36	; 0x24
 80060f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060fc:	6803      	ldr	r3, [r0, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800610c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4311      	orrs	r1, r2
 8006112:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800611e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006122:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006126:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006128:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800612a:	2002      	movs	r0, #2
 800612c:	e7fc      	b.n	8006128 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800612e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800612e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006130:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006134:	2b20      	cmp	r3, #32
 8006136:	b2dc      	uxtb	r4, r3
 8006138:	d11c      	bne.n	8006174 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800613a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800613e:	2b01      	cmp	r3, #1
 8006140:	d018      	beq.n	8006174 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006142:	2324      	movs	r3, #36	; 0x24
 8006144:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006148:	6803      	ldr	r3, [r0, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006152:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006154:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006158:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800615c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006166:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006168:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800616c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006170:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006172:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006174:	2002      	movs	r0, #2
 8006176:	e7fc      	b.n	8006172 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08006178 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006178:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800617a:	f8d1 c000 	ldr.w	ip, [r1]
{
 800617e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006182:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006184:	6804      	ldr	r4, [r0, #0]
 8006186:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006188:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800618c:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800618e:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006190:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006194:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006198:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800619a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800619e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061a2:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061a4:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061a6:	68e0      	ldr	r0, [r4, #12]
 80061a8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80061ac:	4430      	add	r0, r6
 80061ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061b2:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061b4:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061b6:	68e0      	ldr	r0, [r4, #12]
 80061b8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80061bc:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061be:	6898      	ldr	r0, [r3, #8]
 80061c0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80061c4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061c6:	6888      	ldr	r0, [r1, #8]
 80061c8:	68e6      	ldr	r6, [r4, #12]
 80061ca:	3001      	adds	r0, #1
 80061cc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80061d0:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061d2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80061d8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061da:	6918      	ldr	r0, [r3, #16]
 80061dc:	f020 0007 	bic.w	r0, r0, #7
 80061e0:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061e2:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80061e4:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061e6:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061ea:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80061ee:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80061f2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80061f6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80061fa:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80061fe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8006202:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006204:	6958      	ldr	r0, [r3, #20]
 8006206:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800620a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800620c:	6948      	ldr	r0, [r1, #20]
 800620e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006210:	69d8      	ldr	r0, [r3, #28]
 8006212:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8006216:	f020 0007 	bic.w	r0, r0, #7
 800621a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800621c:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8006220:	4305      	orrs	r5, r0
 8006222:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006224:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006226:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006228:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800622c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800622e:	b31e      	cbz	r6, 8006278 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006230:	2e01      	cmp	r6, #1
 8006232:	d023      	beq.n	800627c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006234:	1eb0      	subs	r0, r6, #2
 8006236:	2802      	cmp	r0, #2
 8006238:	d922      	bls.n	8006280 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800623a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800623c:	bf0c      	ite	eq
 800623e:	2002      	moveq	r0, #2
 8006240:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006242:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006244:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006248:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800624c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800624e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006250:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006252:	4345      	muls	r5, r0
 8006254:	4378      	muls	r0, r7
 8006256:	3007      	adds	r0, #7
 8006258:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800625c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800625e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006260:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8006264:	f020 0007 	bic.w	r0, r0, #7
 8006268:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800626a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800626c:	58a3      	ldr	r3, [r4, r2]
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	50a3      	str	r3, [r4, r2]
}
 8006274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8006278:	2004      	movs	r0, #4
 800627a:	e7e2      	b.n	8006242 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800627c:	2003      	movs	r0, #3
 800627e:	e7e0      	b.n	8006242 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8006280:	2002      	movs	r0, #2
 8006282:	e7de      	b.n	8006242 <LTDC_SetConfig+0xca>

08006284 <HAL_LTDC_Init>:
{
 8006284:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8006286:	4604      	mov	r4, r0
 8006288:	2800      	cmp	r0, #0
 800628a:	d063      	beq.n	8006354 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800628c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8006290:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006294:	b91b      	cbnz	r3, 800629e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8006296:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800629a:	f7fa ff03 	bl	80010a4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800629e:	2302      	movs	r3, #2
 80062a0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80062ac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062ae:	6999      	ldr	r1, [r3, #24]
 80062b0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80062b4:	4302      	orrs	r2, r0
 80062b6:	68e0      	ldr	r0, [r4, #12]
 80062b8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062ba:	6920      	ldr	r0, [r4, #16]
 80062bc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062be:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062c0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062c2:	4925      	ldr	r1, [pc, #148]	; (8006358 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062c4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	400a      	ands	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062d2:	69a0      	ldr	r0, [r4, #24]
 80062d4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062d6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062d8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	400a      	ands	r2, r1
 80062de:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062e6:	6a20      	ldr	r0, [r4, #32]
 80062e8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062ec:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	400a      	ands	r2, r1
 80062f2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80062fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80062fc:	4302      	orrs	r2, r0
 80062fe:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	4011      	ands	r1, r2
 8006304:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006306:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800630e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006310:	430a      	orrs	r2, r1
 8006312:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006316:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800631a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800631e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006322:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006326:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800632a:	430a      	orrs	r2, r1
 800632c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006330:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006334:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633a:	f042 0206 	orr.w	r2, r2, #6
 800633e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006348:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800634a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800634e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8006352:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006354:	2001      	movs	r0, #1
 8006356:	e7fc      	b.n	8006352 <HAL_LTDC_Init+0xce>
 8006358:	f000f800 	.word	0xf000f800

0800635c <HAL_LTDC_ErrorCallback>:
 800635c:	4770      	bx	lr

0800635e <HAL_LTDC_ReloadEventCallback>:
 800635e:	4770      	bx	lr

08006360 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006360:	6803      	ldr	r3, [r0, #0]
{
 8006362:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006364:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8006366:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006368:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800636a:	0772      	lsls	r2, r6, #29
 800636c:	d514      	bpl.n	8006398 <HAL_LTDC_IRQHandler+0x38>
 800636e:	0769      	lsls	r1, r5, #29
 8006370:	d512      	bpl.n	8006398 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006374:	f022 0204 	bic.w	r2, r2, #4
 8006378:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800637a:	2204      	movs	r2, #4
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800637e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800638a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800638c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006390:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006394:	f7ff ffe2 	bl	800635c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006398:	07b2      	lsls	r2, r6, #30
 800639a:	d516      	bpl.n	80063ca <HAL_LTDC_IRQHandler+0x6a>
 800639c:	07ab      	lsls	r3, r5, #30
 800639e:	d514      	bpl.n	80063ca <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063a0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80063a2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a6:	f022 0202 	bic.w	r2, r2, #2
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80063ac:	2202      	movs	r2, #2
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80063b0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063ba:	2304      	movs	r3, #4
 80063bc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80063c0:	2300      	movs	r3, #0
 80063c2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80063c6:	f7ff ffc9 	bl	800635c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80063ca:	07f0      	lsls	r0, r6, #31
 80063cc:	d510      	bpl.n	80063f0 <HAL_LTDC_IRQHandler+0x90>
 80063ce:	07e9      	lsls	r1, r5, #31
 80063d0:	d50e      	bpl.n	80063f0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063d2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80063d4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80063de:	2201      	movs	r2, #1
 80063e0:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80063e2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80063e4:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80063e8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80063ec:	f7fc f8e4 	bl	80025b8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063f0:	0732      	lsls	r2, r6, #28
 80063f2:	d511      	bpl.n	8006418 <HAL_LTDC_IRQHandler+0xb8>
 80063f4:	072b      	lsls	r3, r5, #28
 80063f6:	d50f      	bpl.n	8006418 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063f8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063fa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fe:	f022 0208 	bic.w	r2, r2, #8
 8006402:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006404:	2208      	movs	r2, #8
 8006406:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006408:	2301      	movs	r3, #1
 800640a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800640e:	2300      	movs	r3, #0
 8006410:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006414:	f7ff ffa3 	bl	800635e <HAL_LTDC_ReloadEventCallback>
}
 8006418:	bd70      	pop	{r4, r5, r6, pc}

0800641a <HAL_LTDC_ConfigLayer>:
{
 800641a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800641e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8006422:	4606      	mov	r6, r0
 8006424:	460f      	mov	r7, r1
 8006426:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8006428:	2b01      	cmp	r3, #1
 800642a:	f04f 0002 	mov.w	r0, #2
 800642e:	d01f      	beq.n	8006470 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006430:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8006432:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006436:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006438:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800643c:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8006440:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006444:	3438      	adds	r4, #56	; 0x38
 8006446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800644c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006452:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006454:	4630      	mov	r0, r6
 8006456:	4662      	mov	r2, ip
 8006458:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800645a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800645c:	f7ff fe8c 	bl	8006178 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006460:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8006462:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006464:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006468:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800646c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006474 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8006474:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006478:	2b01      	cmp	r3, #1
 800647a:	f04f 0302 	mov.w	r3, #2
 800647e:	d012      	beq.n	80064a6 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006480:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006484:	6803      	ldr	r3, [r0, #0]
 8006486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800648e:	4a07      	ldr	r2, [pc, #28]	; (80064ac <HAL_LTDC_ProgramLineEvent+0x38>)
 8006490:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800649a:	2301      	movs	r3, #1
 800649c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80064a0:	2300      	movs	r3, #0
 80064a2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80064a6:	4618      	mov	r0, r3
}
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	50001000 	.word	0x50001000

080064b0 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80064b4:	f7fe ff2e 	bl	8005314 <HAL_GetTick>
 80064b8:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80064ba:	b144      	cbz	r4, 80064ce <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80064bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d006      	beq.n	80064d2 <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80064c8:	2300      	movs	r3, #0
 80064ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80064ce:	2001      	movs	r0, #1
 80064d0:	e015      	b.n	80064fe <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80064da:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	68d3      	ldr	r3, [r2, #12]
 80064e8:	f013 0301 	ands.w	r3, r3, #1
 80064ec:	d108      	bne.n	8006500 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80064ee:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 80064f0:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80064f2:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 80064f4:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 80064f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 80064fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006500:	f7fe ff08 	bl	8005314 <HAL_GetTick>
 8006504:	1b40      	subs	r0, r0, r5
 8006506:	2805      	cmp	r0, #5
 8006508:	d9ec      	bls.n	80064e4 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800650a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800650c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006510:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 8006512:	2300      	movs	r3, #0
 8006514:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006518:	2303      	movs	r3, #3
 800651a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800651e:	e7d6      	b.n	80064ce <HAL_MDMA_Abort+0x1e>

08006520 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006524:	6804      	ldr	r4, [r0, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800652c:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800652e:	6883      	ldr	r3, [r0, #8]
 8006530:	b92b      	cbnz	r3, 800653e <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	684a      	ldr	r2, [r1, #4]
 8006536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653a:	4313      	orrs	r3, r2
 800653c:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800653e:	680b      	ldr	r3, [r1, #0]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d14e      	bne.n	80065e2 <OSPI_ConfigCmd+0xc2>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8006544:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8006548:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800654c:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8006550:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006554:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 8006558:	433b      	orrs	r3, r7
 800655a:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800655c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800655e:	b16b      	cbz	r3, 800657c <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006560:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006562:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006566:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8006568:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800656a:	f8d2 c000 	ldr.w	ip, [r2]
 800656e:	433b      	orrs	r3, r7
 8006570:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 8006572:	433b      	orrs	r3, r7
 8006574:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 8006578:	433b      	orrs	r3, r7
 800657a:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8006580:	f023 031f 	bic.w	r3, r3, #31
 8006584:	433b      	orrs	r3, r7
 8006586:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006588:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800658a:	b123      	cbz	r3, 8006596 <OSPI_ConfigCmd+0x76>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800658c:	680e      	ldr	r6, [r1, #0]
 800658e:	b916      	cbnz	r6, 8006596 <OSPI_ConfigCmd+0x76>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006590:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8006592:	3e01      	subs	r6, #1
 8006594:	6426      	str	r6, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006596:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800659a:	f8d1 901c 	ldr.w	r9, [r1, #28]
 800659e:	f1ba 0f00 	cmp.w	sl, #0
 80065a2:	d076      	beq.n	8006692 <OSPI_ConfigCmd+0x172>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80065a4:	e9d1 e804 	ldrd	lr, r8, [r1, #16]
 80065a8:	f1b9 0f00 	cmp.w	r9, #0
 80065ac:	d047      	beq.n	800663e <OSPI_ConfigCmd+0x11e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80065ae:	6817      	ldr	r7, [r2, #0]
 80065b0:	e9d1 6c08 	ldrd	r6, ip, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80065b4:	b34b      	cbz	r3, 800660a <OSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80065b6:	ea43 000a 	orr.w	r0, r3, sl
 80065ba:	ea40 0309 	orr.w	r3, r0, r9
 80065be:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80065c0:	ea43 0308 	orr.w	r3, r3, r8
 80065c4:	ea43 030e 	orr.w	r3, r3, lr
 80065c8:	ea43 030c 	orr.w	r3, r3, ip
 80065cc:	4333      	orrs	r3, r6
 80065ce:	4303      	orrs	r3, r0
 80065d0:	483e      	ldr	r0, [pc, #248]	; (80066cc <OSPI_ConfigCmd+0x1ac>)
 80065d2:	4038      	ands	r0, r7
 80065d4:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80065d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80065d8:	688b      	ldr	r3, [r1, #8]
 80065da:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80065dc:	698b      	ldr	r3, [r1, #24]
 80065de:	64a3      	str	r3, [r4, #72]	; 0x48
 80065e0:	e040      	b.n	8006664 <OSPI_ConfigCmd+0x144>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80065e2:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 80065e4:	bf01      	itttt	eq
 80065e6:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80065ea:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80065ee:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80065f2:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 80065f6:	bf1f      	itttt	ne
 80065f8:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 80065fc:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8006600:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8006604:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 8006608:	e7a4      	b.n	8006554 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800660a:	ea4a 0309 	orr.w	r3, sl, r9
 800660e:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8006612:	ea43 0308 	orr.w	r3, r3, r8
 8006616:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 800661a:	ea43 030e 	orr.w	r3, r3, lr
 800661e:	ea43 030c 	orr.w	r3, r3, ip
 8006622:	4333      	orrs	r3, r6
 8006624:	433b      	orrs	r3, r7
 8006626:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006628:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800662a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800662e:	d1d3      	bne.n	80065d8 <OSPI_ConfigCmd+0xb8>
 8006630:	694b      	ldr	r3, [r1, #20]
 8006632:	2b08      	cmp	r3, #8
 8006634:	d1d0      	bne.n	80065d8 <OSPI_ConfigCmd+0xb8>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800663c:	e7cb      	b.n	80065d6 <OSPI_ConfigCmd+0xb6>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800663e:	b1a3      	cbz	r3, 800666a <OSPI_ConfigCmd+0x14a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006640:	ea43 030a 	orr.w	r3, r3, sl
 8006644:	6810      	ldr	r0, [r2, #0]
 8006646:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8006648:	ea43 0308 	orr.w	r3, r3, r8
 800664c:	ea43 030e 	orr.w	r3, r3, lr
 8006650:	f020 6e70 	bic.w	lr, r0, #251658240	; 0xf000000
 8006654:	4323      	orrs	r3, r4
 8006656:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 800665a:	ea43 030e 	orr.w	r3, r3, lr
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800665e:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 8006660:	688b      	ldr	r3, [r1, #8]
 8006662:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006664:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800666a:	6814      	ldr	r4, [r2, #0]
 800666c:	ea4a 0308 	orr.w	r3, sl, r8
 8006670:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006674:	ea43 030e 	orr.w	r3, r3, lr
 8006678:	4323      	orrs	r3, r4
 800667a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800667c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800667e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006682:	d1ed      	bne.n	8006660 <OSPI_ConfigCmd+0x140>
 8006684:	694b      	ldr	r3, [r1, #20]
 8006686:	2b08      	cmp	r3, #8
 8006688:	d1ea      	bne.n	8006660 <OSPI_ConfigCmd+0x140>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006690:	e7e5      	b.n	800665e <OSPI_ConfigCmd+0x13e>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006692:	f1b9 0f00 	cmp.w	r9, #0
 8006696:	d014      	beq.n	80066c2 <OSPI_ConfigCmd+0x1a2>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006698:	6810      	ldr	r0, [r2, #0]
 800669a:	e9d1 5608 	ldrd	r5, r6, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800669e:	b163      	cbz	r3, 80066ba <OSPI_ConfigCmd+0x19a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80066a0:	ea43 0309 	orr.w	r3, r3, r9
 80066a4:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80066a8:	4333      	orrs	r3, r6
 80066aa:	432b      	orrs	r3, r5
 80066ac:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80066ae:	432b      	orrs	r3, r5
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80066b0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80066b4:	4303      	orrs	r3, r0
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e790      	b.n	80065dc <OSPI_ConfigCmd+0xbc>
 80066ba:	ea49 0306 	orr.w	r3, r9, r6
 80066be:	432b      	orrs	r3, r5
 80066c0:	e7f6      	b.n	80066b0 <OSPI_ConfigCmd+0x190>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80066c2:	2308      	movs	r3, #8
 80066c4:	6583      	str	r3, [r0, #88]	; 0x58
      status = HAL_ERROR;
 80066c6:	2001      	movs	r0, #1
 80066c8:	e7cd      	b.n	8006666 <OSPI_ConfigCmd+0x146>
 80066ca:	bf00      	nop
 80066cc:	f0ffc0c0 	.word	0xf0ffc0c0

080066d0 <OSPI_WaitFlagStateUntilTimeout>:
{
 80066d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80066d8:	4604      	mov	r4, r0
 80066da:	460e      	mov	r6, r1
 80066dc:	4615      	mov	r5, r2
 80066de:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066e0:	6822      	ldr	r2, [r4, #0]
 80066e2:	6a13      	ldr	r3, [r2, #32]
 80066e4:	4233      	tst	r3, r6
 80066e6:	bf14      	ite	ne
 80066e8:	2301      	movne	r3, #1
 80066ea:	2300      	moveq	r3, #0
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	d101      	bne.n	80066f4 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80066f0:	2000      	movs	r0, #0
 80066f2:	e012      	b.n	800671a <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80066f4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80066f8:	d0f3      	beq.n	80066e2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7fe fe0b 	bl	8005314 <HAL_GetTick>
 80066fe:	1bc0      	subs	r0, r0, r7
 8006700:	4540      	cmp	r0, r8
 8006702:	d802      	bhi.n	800670a <OSPI_WaitFlagStateUntilTimeout+0x3a>
 8006704:	f1b8 0f00 	cmp.w	r8, #0
 8006708:	d1ea      	bne.n	80066e0 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800670a:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800670e:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006710:	6563      	str	r3, [r4, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006720 <HAL_OSPI_Init>:
{
 8006720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006722:	4604      	mov	r4, r0
 8006724:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006726:	f7fe fdf5 	bl	8005314 <HAL_GetTick>
 800672a:	4603      	mov	r3, r0
  if (hospi == NULL)
 800672c:	2c00      	cmp	r4, #0
 800672e:	d068      	beq.n	8006802 <HAL_OSPI_Init+0xe2>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006730:	2000      	movs	r0, #0
 8006732:	65a0      	str	r0, [r4, #88]	; 0x58
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006734:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8006736:	2e00      	cmp	r6, #0
 8006738:	d161      	bne.n	80067fe <HAL_OSPI_Init+0xde>
      HAL_OSPI_MspInit(hospi);
 800673a:	4620      	mov	r0, r4
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	f7fa fdc1 	bl	80012c4 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 8006742:	69e0      	ldr	r0, [r4, #28]
 8006744:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 800674a:	6825      	ldr	r5, [r4, #0]
 800674c:	4301      	orrs	r1, r0
 800674e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006750:	68af      	ldr	r7, [r5, #8]
 8006752:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006756:	482c      	ldr	r0, [pc, #176]	; (8006808 <HAL_OSPI_Init+0xe8>)
  hospi->Timeout = Timeout;
 8006758:	65e2      	str	r2, [r4, #92]	; 0x5c
      MODIFY_REG(hospi->Instance->DCR1,
 800675a:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800675c:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 800675e:	4301      	orrs	r1, r0
 8006760:	6920      	ldr	r0, [r4, #16]
 8006762:	3801      	subs	r0, #1
 8006764:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006768:	6960      	ldr	r0, [r4, #20]
 800676a:	3801      	subs	r0, #1
 800676c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006770:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 8006772:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006774:	68e9      	ldr	r1, [r5, #12]
 8006776:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800677a:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800677c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800677e:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006780:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006782:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006786:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006788:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800678a:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800678c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800678e:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006790:	6829      	ldr	r1, [r5, #0]
 8006792:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8006796:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800679a:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800679c:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800679e:	2120      	movs	r1, #32
 80067a0:	9200      	str	r2, [sp, #0]
 80067a2:	4632      	mov	r2, r6
 80067a4:	f7ff ff94 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80067a8:	bb48      	cbnz	r0, 80067fe <HAL_OSPI_Init+0xde>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067ae:	68d9      	ldr	r1, [r3, #12]
 80067b0:	3a01      	subs	r2, #1
 80067b2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80067b6:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80067b8:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80067ba:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c2:	430a      	orrs	r2, r1
 80067c4:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80067c6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80067ca:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 80067ce:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 80067d2:	432a      	orrs	r2, r5
 80067d4:	430a      	orrs	r2, r1
 80067d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80067e2:	69a2      	ldr	r2, [r4, #24]
 80067e4:	2a02      	cmp	r2, #2
 80067e6:	d103      	bne.n	80067f0 <HAL_OSPI_Init+0xd0>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	f042 0202 	orr.w	r2, r2, #2
 80067ee:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80067f0:	68e3      	ldr	r3, [r4, #12]
 80067f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 80067fa:	2302      	movne	r3, #2
 80067fc:	6563      	str	r3, [r4, #84]	; 0x54
}
 80067fe:	b005      	add	sp, #20
 8006800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8006802:	2001      	movs	r0, #1
 8006804:	e7fb      	b.n	80067fe <HAL_OSPI_Init+0xde>
 8006806:	bf00      	nop
 8006808:	f8e0f88c 	.word	0xf8e0f88c

0800680c <HAL_OSPI_DeInit>:
{
 800680c:	b510      	push	{r4, lr}
  if (hospi == NULL)
 800680e:	4604      	mov	r4, r0
 8006810:	b168      	cbz	r0, 800682e <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 8006812:	6803      	ldr	r3, [r0, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	f022 0202 	bic.w	r2, r2, #2
 8006822:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 8006824:	f7fa fe7e 	bl	8001524 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8006828:	2000      	movs	r0, #0
 800682a:	6560      	str	r0, [r4, #84]	; 0x54
}
 800682c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800682e:	2001      	movs	r0, #1
 8006830:	e7fc      	b.n	800682c <HAL_OSPI_DeInit+0x20>

08006832 <HAL_OSPI_Command>:
{
 8006832:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006834:	4604      	mov	r4, r0
 8006836:	4616      	mov	r6, r2
 8006838:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800683a:	f7fe fd6b 	bl	8005314 <HAL_GetTick>
  state = hospi->State;
 800683e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8006840:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006842:	2a02      	cmp	r2, #2
 8006844:	d107      	bne.n	8006856 <HAL_OSPI_Command+0x24>
 8006846:	68e2      	ldr	r2, [r4, #12]
 8006848:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800684c:	d109      	bne.n	8006862 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800684e:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006850:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006852:	65a3      	str	r3, [r4, #88]	; 0x58
 8006854:	e01f      	b.n	8006896 <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006856:	2a14      	cmp	r2, #20
 8006858:	d11f      	bne.n	800689a <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800685a:	682a      	ldr	r2, [r5, #0]
 800685c:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800685e:	2a01      	cmp	r2, #1
 8006860:	d8f5      	bhi.n	800684e <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006862:	2200      	movs	r2, #0
 8006864:	2120      	movs	r1, #32
 8006866:	4620      	mov	r0, r4
 8006868:	9600      	str	r6, [sp, #0]
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	f7ff ff30 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006870:	b988      	cbnz	r0, 8006896 <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006872:	65a0      	str	r0, [r4, #88]	; 0x58
      status = OSPI_ConfigCmd(hospi, cmd);
 8006874:	4629      	mov	r1, r5
 8006876:	4620      	mov	r0, r4
 8006878:	f7ff fe52 	bl	8006520 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800687c:	b958      	cbnz	r0, 8006896 <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800687e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	b992      	cbnz	r2, 80068aa <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006884:	2201      	movs	r2, #1
 8006886:	2102      	movs	r1, #2
 8006888:	4620      	mov	r0, r4
 800688a:	9600      	str	r6, [sp, #0]
 800688c:	f7ff ff20 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	2202      	movs	r2, #2
 8006894:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006896:	b004      	add	sp, #16
 8006898:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800689a:	2a24      	cmp	r2, #36	; 0x24
 800689c:	d1d7      	bne.n	800684e <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800689e:	682a      	ldr	r2, [r5, #0]
 80068a0:	f022 0202 	bic.w	r2, r2, #2
 80068a4:	2a01      	cmp	r2, #1
 80068a6:	d1d2      	bne.n	800684e <HAL_OSPI_Command+0x1c>
 80068a8:	e7db      	b.n	8006862 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	b90b      	cbnz	r3, 80068b2 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068ae:	2304      	movs	r3, #4
 80068b0:	e005      	b.n	80068be <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d105      	bne.n	80068c2 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80068b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068b8:	2b24      	cmp	r3, #36	; 0x24
 80068ba:	d0f8      	beq.n	80068ae <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80068bc:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068be:	6563      	str	r3, [r4, #84]	; 0x54
 80068c0:	e7e9      	b.n	8006896 <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d1e7      	bne.n	8006896 <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80068c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068c8:	2b14      	cmp	r3, #20
 80068ca:	d0f0      	beq.n	80068ae <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80068cc:	2324      	movs	r3, #36	; 0x24
 80068ce:	e7f6      	b.n	80068be <HAL_OSPI_Command+0x8c>

080068d0 <HAL_OSPI_HyperbusCfg>:
{
 80068d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068d2:	4604      	mov	r4, r0
 80068d4:	4616      	mov	r6, r2
 80068d6:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80068d8:	f7fe fd1c 	bl	8005314 <HAL_GetTick>
  state = hospi->State;
 80068dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 80068de:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80068e0:	3a01      	subs	r2, #1
 80068e2:	2a01      	cmp	r2, #1
 80068e4:	d816      	bhi.n	8006914 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80068e6:	2200      	movs	r2, #0
 80068e8:	2120      	movs	r1, #32
 80068ea:	4620      	mov	r0, r4
 80068ec:	9600      	str	r6, [sp, #0]
 80068ee:	f7ff feef 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80068f2:	b968      	cbnz	r0, 8006910 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80068f4:	6822      	ldr	r2, [r4, #0]
 80068f6:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 80068fa:	430b      	orrs	r3, r1
 80068fc:	6829      	ldr	r1, [r5, #0]
 80068fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006902:	6869      	ldr	r1, [r5, #4]
 8006904:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006908:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 800690c:	2302      	movs	r3, #2
 800690e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006910:	b002      	add	sp, #8
 8006912:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006914:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006916:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006918:	65a3      	str	r3, [r4, #88]	; 0x58
 800691a:	e7f9      	b.n	8006910 <HAL_OSPI_HyperbusCfg+0x40>

0800691c <HAL_OSPI_HyperbusCmd>:
{
 800691c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800691e:	4604      	mov	r4, r0
 8006920:	4616      	mov	r6, r2
 8006922:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006924:	f7fe fcf6 	bl	8005314 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8006928:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 800692a:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 800692c:	2a02      	cmp	r2, #2
 800692e:	d127      	bne.n	8006980 <HAL_OSPI_HyperbusCmd+0x64>
 8006930:	68e2      	ldr	r2, [r4, #12]
 8006932:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8006936:	d123      	bne.n	8006980 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006938:	2200      	movs	r2, #0
 800693a:	2120      	movs	r1, #32
 800693c:	4620      	mov	r0, r4
 800693e:	9600      	str	r6, [sp, #0]
 8006940:	f7ff fec6 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006944:	b9d0      	cbnz	r0, 800697c <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006946:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006948:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006950:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006958:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800695a:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800695c:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800695e:	692a      	ldr	r2, [r5, #16]
 8006960:	430a      	orrs	r2, r1
 8006962:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8006966:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 800696a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 800696e:	68ea      	ldr	r2, [r5, #12]
 8006970:	3a01      	subs	r2, #1
 8006972:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8006974:	686a      	ldr	r2, [r5, #4]
 8006976:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006978:	2304      	movs	r3, #4
 800697a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800697c:	b002      	add	sp, #8
 800697e:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006980:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006982:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006984:	65a3      	str	r3, [r4, #88]	; 0x58
 8006986:	e7f9      	b.n	800697c <HAL_OSPI_HyperbusCmd+0x60>

08006988 <HAL_OSPI_Transmit>:
{
 8006988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698a:	460f      	mov	r7, r1
 800698c:	b085      	sub	sp, #20
 800698e:	4604      	mov	r4, r0
 8006990:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8006992:	f7fe fcbf 	bl	8005314 <HAL_GetTick>
 8006996:	4603      	mov	r3, r0
  if (pData == NULL)
 8006998:	b91f      	cbnz	r7, 80069a2 <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800699a:	2308      	movs	r3, #8
      status = HAL_ERROR;
 800699c:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800699e:	65a3      	str	r3, [r4, #88]	; 0x58
 80069a0:	e02e      	b.n	8006a00 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80069a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80069a4:	2a04      	cmp	r2, #4
 80069a6:	d12d      	bne.n	8006a04 <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80069a8:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069aa:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 80069ac:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069ae:	3201      	adds	r2, #1
 80069b0:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 80069b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069b4:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80069b6:	6832      	ldr	r2, [r6, #0]
 80069b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80069bc:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80069be:	2201      	movs	r2, #1
 80069c0:	2104      	movs	r1, #4
 80069c2:	4620      	mov	r0, r4
 80069c4:	9500      	str	r5, [sp, #0]
 80069c6:	9303      	str	r3, [sp, #12]
 80069c8:	f7ff fe82 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80069cc:	b9c0      	cbnz	r0, 8006a00 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80069ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while (hospi->XferCount > 0U);
 80069d0:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 80069d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80069da:	3201      	adds	r2, #1
 80069dc:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 80069de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069e0:	3a01      	subs	r2, #1
 80069e2:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 80069e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	d1e9      	bne.n	80069be <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80069ea:	2201      	movs	r2, #1
 80069ec:	2102      	movs	r1, #2
 80069ee:	4620      	mov	r0, r4
 80069f0:	9500      	str	r5, [sp, #0]
 80069f2:	f7ff fe6d 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80069f6:	b918      	cbnz	r0, 8006a00 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80069f8:	2302      	movs	r3, #2
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80069fe:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006a00:	b005      	add	sp, #20
 8006a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a04:	2310      	movs	r3, #16
 8006a06:	e7c9      	b.n	800699c <HAL_OSPI_Transmit+0x14>

08006a08 <HAL_OSPI_Receive>:
{
 8006a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	460f      	mov	r7, r1
 8006a10:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006a12:	f7fe fc7f 	bl	8005314 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006a16:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006a18:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006a1a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006a1c:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8006a20:	b91f      	cbnz	r7, 8006a2a <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006a22:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8006a24:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a26:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a28:	e034      	b.n	8006a94 <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006a2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006a2c:	2a04      	cmp	r2, #4
 8006a2e:	d13b      	bne.n	8006aa8 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006a30:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8006a32:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006a34:	3201      	adds	r2, #1
 8006a36:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8006a38:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a3a:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a3c:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a3e:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a40:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a44:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a48:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006a4c:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a4e:	d123      	bne.n	8006a98 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006a50:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006a52:	2201      	movs	r2, #1
 8006a54:	2106      	movs	r1, #6
 8006a56:	4620      	mov	r0, r4
 8006a58:	9600      	str	r6, [sp, #0]
 8006a5a:	9303      	str	r3, [sp, #12]
 8006a5c:	f7ff fe38 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006a60:	b9c0      	cbnz	r0, 8006a94 <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006a62:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8006a66:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while(hospi->XferCount > 0U);
 8006a68:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006a6a:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8006a6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a6e:	3201      	adds	r2, #1
 8006a70:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8006a72:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a74:	3a01      	subs	r2, #1
 8006a76:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8006a78:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	d1e9      	bne.n	8006a52 <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a7e:	2201      	movs	r2, #1
 8006a80:	2102      	movs	r1, #2
 8006a82:	4620      	mov	r0, r4
 8006a84:	9600      	str	r6, [sp, #0]
 8006a86:	f7ff fe23 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006a8a:	b918      	cbnz	r0, 8006a94 <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006a92:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006a94:	b005      	add	sp, #20
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006a98:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8006a9c:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8006aa0:	d1d6      	bne.n	8006a50 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006aa2:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8006aa6:	e7d4      	b.n	8006a52 <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	e7bb      	b.n	8006a24 <HAL_OSPI_Receive+0x1c>

08006aac <HAL_OSPI_AutoPolling>:
{
 8006aac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	4616      	mov	r6, r2
 8006ab4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006ab6:	f7fe fc2d 	bl	8005314 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006aba:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006abc:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8006abe:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006ac0:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006ac4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006ac6:	2a04      	cmp	r2, #4
 8006ac8:	d13c      	bne.n	8006b44 <HAL_OSPI_AutoPolling+0x98>
 8006aca:	68ea      	ldr	r2, [r5, #12]
 8006acc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006ad0:	d138      	bne.n	8006b44 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006ad2:	9003      	str	r0, [sp, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2120      	movs	r1, #32
 8006ad8:	4620      	mov	r0, r4
 8006ada:	9600      	str	r6, [sp, #0]
 8006adc:	f7ff fdf8 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006ae0:	bb28      	cbnz	r0, 8006b2e <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8006ae2:	6829      	ldr	r1, [r5, #0]
 8006ae4:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006ae6:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8006ae8:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8006aec:	6869      	ldr	r1, [r5, #4]
 8006aee:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8006af2:	6929      	ldr	r1, [r5, #16]
 8006af4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006af8:	6810      	ldr	r0, [r2, #0]
 8006afa:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8006afe:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 8006b02:	4329      	orrs	r1, r5
 8006b04:	4301      	orrs	r1, r0
 8006b06:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006b0a:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006b0c:	68e1      	ldr	r1, [r4, #12]
 8006b0e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006b12:	d10f      	bne.n	8006b34 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006b14:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006b16:	2201      	movs	r2, #1
 8006b18:	2108      	movs	r1, #8
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	9600      	str	r6, [sp, #0]
 8006b1e:	f7ff fdd7 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006b22:	b920      	cbnz	r0, 8006b2e <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	2208      	movs	r2, #8
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006b2e:	b004      	add	sp, #16
 8006b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006b34:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8006b38:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8006b3c:	d1ea      	bne.n	8006b14 <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006b3e:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8006b42:	e7e8      	b.n	8006b16 <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b44:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006b46:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b48:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b4a:	e7f0      	b.n	8006b2e <HAL_OSPI_AutoPolling+0x82>

08006b4c <HAL_OSPI_MemoryMapped>:
{
 8006b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b4e:	4604      	mov	r4, r0
 8006b50:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006b52:	f7fe fbdf 	bl	8005314 <HAL_GetTick>
 8006b56:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006b58:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006b5a:	2a04      	cmp	r2, #4
 8006b5c:	d121      	bne.n	8006ba2 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006b5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006b60:	2120      	movs	r1, #32
 8006b62:	4620      	mov	r0, r4
 8006b64:	9200      	str	r2, [sp, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f7ff fdb2 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006b6c:	b9b8      	cbnz	r0, 8006b9e <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b6e:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006b70:	2388      	movs	r3, #136	; 0x88
 8006b72:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b74:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006b76:	6563      	str	r3, [r4, #84]	; 0x54
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b78:	d108      	bne.n	8006b8c <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006b7a:	686b      	ldr	r3, [r5, #4]
 8006b7c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006b80:	2310      	movs	r3, #16
 8006b82:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006b84:	6811      	ldr	r1, [r2, #0]
 8006b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006b8a:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006b8c:	6813      	ldr	r3, [r2, #0]
 8006b8e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006b92:	f023 0308 	bic.w	r3, r3, #8
 8006b96:	4333      	orrs	r3, r6
 8006b98:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006b9c:	6013      	str	r3, [r2, #0]
}
 8006b9e:	b002      	add	sp, #8
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006ba2:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006ba4:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006ba6:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ba8:	e7f9      	b.n	8006b9e <HAL_OSPI_MemoryMapped+0x52>

08006baa <HAL_OSPI_Abort>:
{
 8006baa:	b530      	push	{r4, r5, lr}
 8006bac:	4604      	mov	r4, r0
 8006bae:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006bb0:	f7fe fbb0 	bl	8005314 <HAL_GetTick>
 8006bb4:	4603      	mov	r3, r0
  state = hospi->State;
 8006bb6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006bb8:	f012 0f0c 	tst.w	r2, #12
 8006bbc:	d035      	beq.n	8006c2a <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006bbe:	6821      	ldr	r1, [r4, #0]
 8006bc0:	680a      	ldr	r2, [r1, #0]
 8006bc2:	f012 0204 	ands.w	r2, r2, #4
 8006bc6:	d02b      	beq.n	8006c20 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006bc8:	680a      	ldr	r2, [r1, #0]
 8006bca:	9003      	str	r0, [sp, #12]
 8006bcc:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006bd0:	6d20      	ldr	r0, [r4, #80]	; 0x50
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006bd2:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006bd4:	f7ff fc6c 	bl	80064b0 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	b108      	cbz	r0, 8006be0 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006bdc:	2204      	movs	r2, #4
 8006bde:	65a2      	str	r2, [r4, #88]	; 0x58
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	6a11      	ldr	r1, [r2, #32]
 8006be4:	0689      	lsls	r1, r1, #26
 8006be6:	d51d      	bpl.n	8006c24 <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006be8:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006bea:	4620      	mov	r0, r4
 8006bec:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006bee:	f041 0102 	orr.w	r1, r1, #2
 8006bf2:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006bf8:	9200      	str	r2, [sp, #0]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f7ff fd68 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	b958      	cbnz	r0, 8006c1c <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c08:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006c0a:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c0c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006c0e:	9200      	str	r2, [sp, #0]
 8006c10:	4602      	mov	r2, r0
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff fd5c 	bl	80066d0 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006c18:	b900      	cbnz	r0, 8006c1c <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8006c1a:	6565      	str	r5, [r4, #84]	; 0x54
}
 8006c1c:	b005      	add	sp, #20
 8006c1e:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	4610      	mov	r0, r2
 8006c22:	e7dd      	b.n	8006be0 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8006c24:	2302      	movs	r3, #2
 8006c26:	6563      	str	r3, [r4, #84]	; 0x54
 8006c28:	e7f8      	b.n	8006c1c <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c2a:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006c2c:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c30:	e7f4      	b.n	8006c1c <HAL_OSPI_Abort+0x72>
	...

08006c34 <HAL_OSPIM_Config>:
    other_instance = 0U;
 8006c34:	4bc4      	ldr	r3, [pc, #784]	; (8006f48 <HAL_OSPIM_Config+0x314>)
  if (hospi->Instance == OCTOSPI1)
 8006c36:	6802      	ldr	r2, [r0, #0]
{
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8006c3c:	429a      	cmp	r2, r3
{
 8006c3e:	b08f      	sub	sp, #60	; 0x3c
 8006c40:	4688      	mov	r8, r1
    instance = 1U;
 8006c42:	f04f 0501 	mov.w	r5, #1
    other_instance = 0U;
 8006c46:	bf0b      	itete	eq
 8006c48:	f04f 0c01 	moveq.w	ip, #1
 8006c4c:	f04f 0c00 	movne.w	ip, #0
 8006c50:	2400      	moveq	r4, #0
 8006c52:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006c54:	ab02      	add	r3, sp, #8
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006c56:	2600      	movs	r6, #0
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006c58:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 8006f50 <HAL_OSPIM_Config+0x31c>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8006c5c:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8006f54 <HAL_OSPIM_Config+0x320>
    if (instance_nb == 2U)
 8006c60:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8006c62:	611e      	str	r6, [r3, #16]
    cfg->DQSPort    = 0U;
 8006c64:	e9c3 6600 	strd	r6, r6, [r3]
    cfg->IOLowPort  = 0U;
 8006c68:	e9c3 6602 	strd	r6, r6, [r3, #8]
    if (instance_nb == 2U)
 8006c6c:	f040 8126 	bne.w	8006ebc <HAL_OSPIM_Config+0x288>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006c70:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8006c74:	f012 0f01 	tst.w	r2, #1
 8006c78:	bf0c      	ite	eq
 8006c7a:	4648      	moveq	r0, r9
 8006c7c:	f44f 7000 	movne.w	r0, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006c80:	2700      	movs	r7, #0
    {
      reg = OCTOSPIM->PCR[index];
 8006c82:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 8006c86:	1c79      	adds	r1, r7, #1
 8006c88:	6852      	ldr	r2, [r2, #4]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006c8a:	07d7      	lsls	r7, r2, #31
 8006c8c:	d504      	bpl.n	8006c98 <HAL_OSPIM_Config+0x64>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006c8e:	ea82 0700 	eor.w	r7, r2, r0
 8006c92:	07bf      	lsls	r7, r7, #30
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006c94:	bf58      	it	pl
 8006c96:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006c98:	06d7      	lsls	r7, r2, #27
 8006c9a:	d504      	bpl.n	8006ca6 <HAL_OSPIM_Config+0x72>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006c9c:	ea82 0700 	eor.w	r7, r2, r0
 8006ca0:	06bf      	lsls	r7, r7, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8006ca2:	bf58      	it	pl
 8006ca4:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006ca6:	05d7      	lsls	r7, r2, #23
 8006ca8:	d504      	bpl.n	8006cb4 <HAL_OSPIM_Config+0x80>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006caa:	ea82 0700 	eor.w	r7, r2, r0
 8006cae:	05bf      	lsls	r7, r7, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8006cb0:	bf58      	it	pl
 8006cb2:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006cb4:	03d7      	lsls	r7, r2, #15
 8006cb6:	d50a      	bpl.n	8006cce <HAL_OSPIM_Config+0x9a>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006cb8:	ea82 0700 	eor.w	r7, r2, r0
 8006cbc:	037f      	lsls	r7, r7, #13
 8006cbe:	d406      	bmi.n	8006cce <HAL_OSPIM_Config+0x9a>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006cc0:	0397      	lsls	r7, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006cc2:	bf54      	ite	pl
 8006cc4:	f441 3780 	orrpl.w	r7, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006cc8:	f041 7780 	orrmi.w	r7, r1, #16777216	; 0x1000000
 8006ccc:	60df      	str	r7, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006cce:	01d7      	lsls	r7, r2, #7
 8006cd0:	d50a      	bpl.n	8006ce8 <HAL_OSPIM_Config+0xb4>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006cd2:	ea82 0700 	eor.w	r7, r2, r0
 8006cd6:	017f      	lsls	r7, r7, #5
 8006cd8:	d406      	bmi.n	8006ce8 <HAL_OSPIM_Config+0xb4>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006cda:	0197      	lsls	r7, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006cdc:	bf54      	ite	pl
 8006cde:	f441 3280 	orrpl.w	r2, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006ce2:	f041 7280 	orrmi.w	r2, r1, #16777216	; 0x1000000
 8006ce6:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006ce8:	2902      	cmp	r1, #2
 8006cea:	f04f 0701 	mov.w	r7, #1
 8006cee:	d1c8      	bne.n	8006c82 <HAL_OSPIM_Config+0x4e>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006cf0:	2d02      	cmp	r5, #2
 8006cf2:	f103 0318 	add.w	r3, r3, #24
 8006cf6:	f040 80df 	bne.w	8006eb8 <HAL_OSPIM_Config+0x284>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006cfa:	4a93      	ldr	r2, [pc, #588]	; (8006f48 <HAL_OSPIM_Config+0x314>)
 8006cfc:	6815      	ldr	r5, [r2, #0]
 8006cfe:	403d      	ands	r5, r7
 8006d00:	d004      	beq.n	8006d0c <HAL_OSPIM_Config+0xd8>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006d02:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006d04:	463d      	mov	r5, r7
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006d06:	f023 0301 	bic.w	r3, r3, #1
 8006d0a:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006d0c:	4b8f      	ldr	r3, [pc, #572]	; (8006f4c <HAL_OSPIM_Config+0x318>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	07d0      	lsls	r0, r2, #31
 8006d12:	f140 80d5 	bpl.w	8006ec0 <HAL_OSPIM_Config+0x28c>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8006d1e:	f045 0302 	orr.w	r3, r5, #2
 8006d22:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006d24:	ab0e      	add	r3, sp, #56	; 0x38
 8006d26:	2218      	movs	r2, #24
 8006d28:	fb02 3204 	mla	r2, r2, r4, r3
 8006d2c:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006d36:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006d3a:	6819      	ldr	r1, [r3, #0]
 8006d3c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006d40:	6019      	str	r1, [r3, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006d42:	4b83      	ldr	r3, [pc, #524]	; (8006f50 <HAL_OSPIM_Config+0x31c>)
 8006d44:	6819      	ldr	r1, [r3, #0]
 8006d46:	07c9      	lsls	r1, r1, #31
 8006d48:	f140 80bc 	bpl.w	8006ec4 <HAL_OSPIM_Config+0x290>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8006d54:	f1bc 0f00 	cmp.w	ip, #0
 8006d58:	d030      	beq.n	8006dbc <HAL_OSPIM_Config+0x188>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006d62:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	f042 0202 	orr.w	r2, r2, #2
 8006d6c:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d70:	b143      	cbz	r3, 8006d84 <HAL_OSPIM_Config+0x150>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006d78:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	f042 0220 	orr.w	r2, r2, #32
 8006d82:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d86:	b15b      	cbz	r3, 8006da0 <HAL_OSPIM_Config+0x16c>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006d94:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006d9e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da2:	b15b      	cbz	r3, 8006dbc <HAL_OSPIM_Config+0x188>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8006da4:	3b01      	subs	r3, #1
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006db0:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006dba:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006dbc:	ab0e      	add	r3, sp, #56	; 0x38
 8006dbe:	f04f 0a18 	mov.w	sl, #24
 8006dc2:	f8d8 7000 	ldr.w	r7, [r8]
 8006dc6:	fb0a 3a0c 	mla	sl, sl, ip, r3
 8006dca:	f85a 9c30 	ldr.w	r9, [sl, #-48]
 8006dce:	f85a 1c20 	ldr.w	r1, [sl, #-32]
 8006dd2:	454f      	cmp	r7, r9
 8006dd4:	f85a bc2c 	ldr.w	fp, [sl, #-44]
 8006dd8:	e9d8 0e01 	ldrd	r0, lr, [r8, #4]
 8006ddc:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 8006de0:	f000 80ba 	beq.w	8006f58 <HAL_OSPIM_Config+0x324>
 8006de4:	4583      	cmp	fp, r0
 8006de6:	d00a      	beq.n	8006dfe <HAL_OSPIM_Config+0x1ca>
 8006de8:	f85a 6c28 	ldr.w	r6, [sl, #-40]
 8006dec:	4576      	cmp	r6, lr
 8006dee:	d006      	beq.n	8006dfe <HAL_OSPIM_Config+0x1ca>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006df0:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8006df4:	4592      	cmp	sl, r2
 8006df6:	d002      	beq.n	8006dfe <HAL_OSPIM_Config+0x1ca>
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	f040 80c0 	bne.w	8006f7e <HAL_OSPIM_Config+0x34a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006dfe:	ea4f 0989 	mov.w	r9, r9, lsl #2
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006e02:	ae0e      	add	r6, sp, #56	; 0x38
 8006e04:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8006e08:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006e0c:	f8d9 a000 	ldr.w	sl, [r9]
 8006e10:	f02a 0a01 	bic.w	sl, sl, #1
 8006e14:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006e18:	f04f 0918 	mov.w	r9, #24
 8006e1c:	fb09 690c 	mla	r9, r9, ip, r6
 8006e20:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8006e24:	f1b9 0f00 	cmp.w	r9, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_OSPIM_Config+0x20e>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006e2a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006e2e:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8006e32:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
 8006e36:	f8d9 a000 	ldr.w	sl, [r9]
 8006e3a:	f02a 0a10 	bic.w	sl, sl, #16
 8006e3e:	f8c9 a000 	str.w	sl, [r9]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006e42:	f04f 0918 	mov.w	r9, #24
 8006e46:	ae0e      	add	r6, sp, #56	; 0x38
 8006e48:	fb09 6c0c 	mla	ip, r9, ip, r6
 8006e4c:	f85c 6c28 	ldr.w	r6, [ip, #-40]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e50:	f85c cc24 	ldr.w	ip, [ip, #-36]
 8006e54:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006e58:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8006e5c:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006e60:	f8d9 a000 	ldr.w	sl, [r9]
 8006e64:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8006e68:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e6c:	f1bc 0f00 	cmp.w	ip, #0
 8006e70:	d00f      	beq.n	8006e92 <HAL_OSPIM_Config+0x25e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006e72:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e76:	f00c 0c01 	and.w	ip, ip, #1
 8006e7a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006e7e:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8006e82:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8006e86:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8006e8a:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8006e8e:	f8cc 9004 	str.w	r9, [ip, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006e92:	2900      	cmp	r1, #0
 8006e94:	d073      	beq.n	8006f7e <HAL_OSPIM_Config+0x34a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006e96:	f101 3cff 	add.w	ip, r1, #4294967295
 8006e9a:	f00c 0c01 	and.w	ip, ip, #1
 8006e9e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006ea2:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8006ea6:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8006eaa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006eae:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006eb2:	f8cc 1004 	str.w	r1, [ip, #4]
 8006eb6:	e062      	b.n	8006f7e <HAL_OSPIM_Config+0x34a>
 8006eb8:	460d      	mov	r5, r1
 8006eba:	e6d1      	b.n	8006c60 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	e6df      	b.n	8006c80 <HAL_OSPIM_Config+0x4c>
 8006ec0:	9501      	str	r5, [sp, #4]
 8006ec2:	e72f      	b.n	8006d24 <HAL_OSPIM_Config+0xf0>
      if (IOM_cfg[instance].ClkPort != 0U)
 8006ec4:	f852 3c30 	ldr.w	r3, [r2, #-48]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f43f af77 	beq.w	8006dbc <HAL_OSPIM_Config+0x188>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006ed4:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006ed8:	6819      	ldr	r1, [r3, #0]
 8006eda:	f021 0101 	bic.w	r1, r1, #1
 8006ede:	6019      	str	r1, [r3, #0]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006ee0:	f852 3c2c 	ldr.w	r3, [r2, #-44]
 8006ee4:	b143      	cbz	r3, 8006ef8 <HAL_OSPIM_Config+0x2c4>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006eec:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	f022 0210 	bic.w	r2, r2, #16
 8006ef6:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006ef8:	2318      	movs	r3, #24
 8006efa:	aa0e      	add	r2, sp, #56	; 0x38
 8006efc:	fb03 2304 	mla	r3, r3, r4, r2
 8006f00:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006f04:	b15b      	cbz	r3, 8006f1e <HAL_OSPIM_Config+0x2ea>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006f06:	3b01      	subs	r3, #1
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006f12:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f1c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f1e:	2318      	movs	r3, #24
 8006f20:	aa0e      	add	r2, sp, #56	; 0x38
 8006f22:	fb03 2304 	mla	r3, r3, r4, r2
 8006f26:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f43f af46 	beq.w	8006dbc <HAL_OSPIM_Config+0x188>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006f30:	3b01      	subs	r3, #1
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006f3c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006f46:	e738      	b.n	8006dba <HAL_OSPIM_Config+0x186>
 8006f48:	52005000 	.word	0x52005000
 8006f4c:	5200a000 	.word	0x5200a000
 8006f50:	5200b400 	.word	0x5200b400
 8006f54:	04040222 	.word	0x04040222
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006f58:	4583      	cmp	fp, r0
 8006f5a:	f47f af50 	bne.w	8006dfe <HAL_OSPIM_Config+0x1ca>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006f5e:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8006f62:	4592      	cmp	sl, r2
 8006f64:	f47f af4b 	bne.w	8006dfe <HAL_OSPIM_Config+0x1ca>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	f47f af48 	bne.w	8006dfe <HAL_OSPIM_Config+0x1ca>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006f6e:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 800716c <HAL_OSPIM_Config+0x538>
 8006f72:	f8dc 1000 	ldr.w	r1, [ip]
 8006f76:	f041 0101 	orr.w	r1, r1, #1
 8006f7a:	f8cc 1000 	str.w	r1, [ip]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006f7e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006f82:	f10e 4ea4 	add.w	lr, lr, #1375731712	; 0x52000000
 8006f86:	f50e 4e34 	add.w	lr, lr, #46080	; 0xb400
 8006f8a:	f8de 1000 	ldr.w	r1, [lr]
 8006f8e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006f92:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8006f96:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006f9a:	f8ce 1000 	str.w	r1, [lr]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006f9e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8006fa2:	f101 3eff 	add.w	lr, r1, #4294967295
 8006fa6:	4971      	ldr	r1, [pc, #452]	; (800716c <HAL_OSPIM_Config+0x538>)
 8006fa8:	f8d1 c000 	ldr.w	ip, [r1]
 8006fac:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8006fb0:	45e6      	cmp	lr, ip
 8006fb2:	d907      	bls.n	8006fc4 <HAL_OSPIM_Config+0x390>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006fb4:	f8d1 c000 	ldr.w	ip, [r1]
 8006fb8:	f42c 0c7f 	bic.w	ip, ip, #16711680	; 0xff0000
 8006fbc:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 8006fc0:	f8c1 c000 	str.w	ip, [r1]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006fc4:	6809      	ldr	r1, [r1, #0]
 8006fc6:	f402 3c80 	and.w	ip, r2, #65536	; 0x10000
 8006fca:	f011 0f01 	tst.w	r1, #1
 8006fce:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8006fd2:	f403 3780 	and.w	r7, r3, #65536	; 0x10000
 8006fd6:	f101 41a4 	add.w	r1, r1, #1375731712	; 0x52000000
 8006fda:	f501 4134 	add.w	r1, r1, #46080	; 0xb400
 8006fde:	d063      	beq.n	80070a8 <HAL_OSPIM_Config+0x474>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006fe0:	680c      	ldr	r4, [r1, #0]
 8006fe2:	f024 0403 	bic.w	r4, r4, #3
 8006fe6:	f044 0401 	orr.w	r4, r4, #1
 8006fea:	600c      	str	r4, [r1, #0]
      if (cfg->DQSPort != 0U)
 8006fec:	b150      	cbz	r0, 8007004 <HAL_OSPIM_Config+0x3d0>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006fee:	0080      	lsls	r0, r0, #2
 8006ff0:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8006ff4:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8006ff8:	6801      	ldr	r1, [r0, #0]
 8006ffa:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8006ffe:	f041 0110 	orr.w	r1, r1, #16
 8007002:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007004:	f1bc 0f00 	cmp.w	ip, #0
 8007008:	d02e      	beq.n	8007068 <HAL_OSPIM_Config+0x434>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800700a:	3a01      	subs	r2, #1
 800700c:	f002 0201 	and.w	r2, r2, #1
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007016:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800701a:	6851      	ldr	r1, [r2, #4]
 800701c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8007020:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007024:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007026:	b37f      	cbz	r7, 8007088 <HAL_OSPIM_Config+0x454>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007028:	3b01      	subs	r3, #1
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007034:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800703e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007042:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8007044:	b125      	cbz	r5, 8007050 <HAL_OSPIM_Config+0x41c>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007046:	4a4a      	ldr	r2, [pc, #296]	; (8007170 <HAL_OSPIM_Config+0x53c>)
 8007048:	6813      	ldr	r3, [r2, #0]
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	079b      	lsls	r3, r3, #30
 8007054:	d504      	bpl.n	8007060 <HAL_OSPIM_Config+0x42c>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007056:	4a47      	ldr	r2, [pc, #284]	; (8007174 <HAL_OSPIM_Config+0x540>)
 8007058:	6813      	ldr	r3, [r2, #0]
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	2000      	movs	r0, #0
 8007062:	b00f      	add	sp, #60	; 0x3c
 8007064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007068:	2a00      	cmp	r2, #0
 800706a:	d0dc      	beq.n	8007026 <HAL_OSPIM_Config+0x3f2>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800706c:	3a01      	subs	r2, #1
 800706e:	f002 0201 	and.w	r2, r2, #1
 8007072:	0092      	lsls	r2, r2, #2
 8007074:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007078:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800707c:	6851      	ldr	r1, [r2, #4]
 800707e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8007082:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8007086:	e7cd      	b.n	8007024 <HAL_OSPIM_Config+0x3f0>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0db      	beq.n	8007044 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800708c:	3b01      	subs	r3, #1
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007098:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80070a2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80070a6:	e7cc      	b.n	8007042 <HAL_OSPIM_Config+0x40e>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80070a8:	f8d1 e000 	ldr.w	lr, [r1]
 80070ac:	f02e 0e03 	bic.w	lr, lr, #3
 80070b0:	ea4e 0e44 	orr.w	lr, lr, r4, lsl #1
 80070b4:	f04e 0e01 	orr.w	lr, lr, #1
 80070b8:	f8c1 e000 	str.w	lr, [r1]
      if (cfg->DQSPort != 0U)
 80070bc:	b160      	cbz	r0, 80070d8 <HAL_OSPIM_Config+0x4a4>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80070be:	0080      	lsls	r0, r0, #2
 80070c0:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 80070c4:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 80070c8:	6801      	ldr	r1, [r0, #0]
 80070ca:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80070ce:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 80070d2:	f041 0110 	orr.w	r1, r1, #16
 80070d6:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070d8:	f1bc 0f00 	cmp.w	ip, #0
 80070dc:	d021      	beq.n	8007122 <HAL_OSPIM_Config+0x4ee>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80070de:	3a01      	subs	r2, #1
 80070e0:	f002 0201 	and.w	r2, r2, #1
 80070e4:	0092      	lsls	r2, r2, #2
 80070e6:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 80070ea:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 80070ee:	6851      	ldr	r1, [r2, #4]
 80070f0:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80070f4:	ea41 4184 	orr.w	r1, r1, r4, lsl #18
 80070f8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80070fc:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070fe:	b317      	cbz	r7, 8007146 <HAL_OSPIM_Config+0x512>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007100:	3b01      	subs	r3, #1
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800710c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007116:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 800711a:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800711e:	605c      	str	r4, [r3, #4]
 8007120:	e790      	b.n	8007044 <HAL_OSPIM_Config+0x410>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007122:	2a00      	cmp	r2, #0
 8007124:	d0eb      	beq.n	80070fe <HAL_OSPIM_Config+0x4ca>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007126:	3a01      	subs	r2, #1
 8007128:	f002 0201 	and.w	r2, r2, #1
 800712c:	0092      	lsls	r2, r2, #2
 800712e:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8007132:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8007136:	6851      	ldr	r1, [r2, #4]
 8007138:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800713c:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8007140:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8007144:	e7da      	b.n	80070fc <HAL_OSPIM_Config+0x4c8>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007146:	2b00      	cmp	r3, #0
 8007148:	f43f af7c 	beq.w	8007044 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800714c:	3b01      	subs	r3, #1
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007158:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8007162:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 8007166:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 800716a:	e7d8      	b.n	800711e <HAL_OSPIM_Config+0x4ea>
 800716c:	5200b400 	.word	0x5200b400
 8007170:	52005000 	.word	0x52005000
 8007174:	5200a000 	.word	0x5200a000

08007178 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007178:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800717a:	4d1d      	ldr	r5, [pc, #116]	; (80071f0 <HAL_PWREx_ConfigSupply+0x78>)
{
 800717c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800717e:	68eb      	ldr	r3, [r5, #12]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	2b06      	cmp	r3, #6
 8007186:	d006      	beq.n	8007196 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007188:	68e8      	ldr	r0, [r5, #12]
 800718a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800718e:	1b00      	subs	r0, r0, r4
 8007190:	bf18      	it	ne
 8007192:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007194:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007196:	68eb      	ldr	r3, [r5, #12]
 8007198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800719c:	4303      	orrs	r3, r0
 800719e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 80071a0:	f7fe f8b8 	bl	8005314 <HAL_GetTick>
 80071a4:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071a6:	686b      	ldr	r3, [r5, #4]
 80071a8:	049b      	lsls	r3, r3, #18
 80071aa:	d508      	bpl.n	80071be <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80071ac:	f1a4 031d 	sub.w	r3, r4, #29
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d90c      	bls.n	80071ce <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80071b4:	3c2d      	subs	r4, #45	; 0x2d
 80071b6:	2c01      	cmp	r4, #1
 80071b8:	d909      	bls.n	80071ce <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80071ba:	2000      	movs	r0, #0
 80071bc:	e7ea      	b.n	8007194 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071be:	f7fe f8a9 	bl	8005314 <HAL_GetTick>
 80071c2:	1b80      	subs	r0, r0, r6
 80071c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80071c8:	d9ed      	bls.n	80071a6 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7e2      	b.n	8007194 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 80071ce:	f7fe f8a1 	bl	8005314 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80071d2:	4d07      	ldr	r5, [pc, #28]	; (80071f0 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 80071d4:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80071d6:	68eb      	ldr	r3, [r5, #12]
 80071d8:	f003 0311 	and.w	r3, r3, #17
 80071dc:	2b11      	cmp	r3, #17
 80071de:	d0ec      	beq.n	80071ba <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071e0:	f7fe f898 	bl	8005314 <HAL_GetTick>
 80071e4:	1b00      	subs	r0, r0, r4
 80071e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80071ea:	d9f4      	bls.n	80071d6 <HAL_PWREx_ConfigSupply+0x5e>
 80071ec:	e7ed      	b.n	80071ca <HAL_PWREx_ConfigSupply+0x52>
 80071ee:	bf00      	nop
 80071f0:	58024800 	.word	0x58024800

080071f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071f6:	4604      	mov	r4, r0
 80071f8:	b908      	cbnz	r0, 80071fe <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80071fa:	2001      	movs	r0, #1
 80071fc:	e07f      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071fe:	6803      	ldr	r3, [r0, #0]
 8007200:	07df      	lsls	r7, r3, #31
 8007202:	d453      	bmi.n	80072ac <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	079e      	lsls	r6, r3, #30
 8007208:	f100 80a3 	bmi.w	8007352 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	06da      	lsls	r2, r3, #27
 8007210:	d51c      	bpl.n	800724c <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007212:	4ba0      	ldr	r3, [pc, #640]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 8007214:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007216:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007218:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800721c:	2a08      	cmp	r2, #8
 800721e:	d007      	beq.n	8007230 <HAL_RCC_OscConfig+0x3c>
 8007220:	2a18      	cmp	r2, #24
 8007222:	f040 80e5 	bne.w	80073f0 <HAL_RCC_OscConfig+0x1fc>
 8007226:	f001 0203 	and.w	r2, r1, #3
 800722a:	2a01      	cmp	r2, #1
 800722c:	f040 80e0 	bne.w	80073f0 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	05db      	lsls	r3, r3, #23
 8007234:	d502      	bpl.n	800723c <HAL_RCC_OscConfig+0x48>
 8007236:	69e3      	ldr	r3, [r4, #28]
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d1de      	bne.n	80071fa <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800723c:	4a95      	ldr	r2, [pc, #596]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 800723e:	6a21      	ldr	r1, [r4, #32]
 8007240:	68d3      	ldr	r3, [r2, #12]
 8007242:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007246:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800724a:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	0719      	lsls	r1, r3, #28
 8007250:	f100 80fb 	bmi.w	800744a <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	069a      	lsls	r2, r3, #26
 8007258:	f100 8120 	bmi.w	800749c <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	075d      	lsls	r5, r3, #29
 8007260:	d51e      	bpl.n	80072a0 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 8007262:	4d8d      	ldr	r5, [pc, #564]	; (8007498 <HAL_RCC_OscConfig+0x2a4>)
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800726a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800726c:	f7fe f852 	bl	8005314 <HAL_GetTick>
 8007270:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	05da      	lsls	r2, r3, #23
 8007276:	f140 8136 	bpl.w	80074e6 <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800727a:	68a3      	ldr	r3, [r4, #8]
 800727c:	4d85      	ldr	r5, [pc, #532]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 800727e:	2b01      	cmp	r3, #1
 8007280:	f040 8138 	bne.w	80074f4 <HAL_RCC_OscConfig+0x300>
 8007284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007290:	f7fe f840 	bl	8005314 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007294:	4e7f      	ldr	r6, [pc, #508]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
      tickstart = HAL_GetTick();
 8007296:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007298:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800729a:	079b      	lsls	r3, r3, #30
 800729c:	f140 8150 	bpl.w	8007540 <HAL_RCC_OscConfig+0x34c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f040 8153 	bne.w	800754e <HAL_RCC_OscConfig+0x35a>
      }
    }
  }
  return HAL_OK;
 80072a8:	2000      	movs	r0, #0
 80072aa:	e028      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072ac:	4b79      	ldr	r3, [pc, #484]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 80072ae:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072b2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072b6:	2a10      	cmp	r2, #16
 80072b8:	d005      	beq.n	80072c6 <HAL_RCC_OscConfig+0xd2>
 80072ba:	2a18      	cmp	r2, #24
 80072bc:	d10a      	bne.n	80072d4 <HAL_RCC_OscConfig+0xe0>
 80072be:	f001 0203 	and.w	r2, r1, #3
 80072c2:	2a02      	cmp	r2, #2
 80072c4:	d106      	bne.n	80072d4 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	039d      	lsls	r5, r3, #14
 80072ca:	d59b      	bpl.n	8007204 <HAL_RCC_OscConfig+0x10>
 80072cc:	6863      	ldr	r3, [r4, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d198      	bne.n	8007204 <HAL_RCC_OscConfig+0x10>
 80072d2:	e792      	b.n	80071fa <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072d4:	6862      	ldr	r2, [r4, #4]
 80072d6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80072da:	d111      	bne.n	8007300 <HAL_RCC_OscConfig+0x10c>
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80072e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80072e4:	f7fe f816 	bl	8005314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072e8:	4e6a      	ldr	r6, [pc, #424]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 80072ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072ec:	6833      	ldr	r3, [r6, #0]
 80072ee:	0398      	lsls	r0, r3, #14
 80072f0:	d488      	bmi.n	8007204 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072f2:	f7fe f80f 	bl	8005314 <HAL_GetTick>
 80072f6:	1b40      	subs	r0, r0, r5
 80072f8:	2864      	cmp	r0, #100	; 0x64
 80072fa:	d9f7      	bls.n	80072ec <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 80072fc:	2003      	movs	r0, #3
}
 80072fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007300:	4d64      	ldr	r5, [pc, #400]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 8007302:	682b      	ldr	r3, [r5, #0]
 8007304:	b99a      	cbnz	r2, 800732e <HAL_RCC_OscConfig+0x13a>
 8007306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007312:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007314:	f7fd fffe 	bl	8005314 <HAL_GetTick>
 8007318:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	0399      	lsls	r1, r3, #14
 800731e:	f57f af71 	bpl.w	8007204 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007322:	f7fd fff7 	bl	8005314 <HAL_GetTick>
 8007326:	1b80      	subs	r0, r0, r6
 8007328:	2864      	cmp	r0, #100	; 0x64
 800732a:	d9f6      	bls.n	800731a <HAL_RCC_OscConfig+0x126>
 800732c:	e7e6      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800732e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007332:	d107      	bne.n	8007344 <HAL_RCC_OscConfig+0x150>
 8007334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	e7cf      	b.n	80072e4 <HAL_RCC_OscConfig+0xf0>
 8007344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007350:	e7f6      	b.n	8007340 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007352:	4b50      	ldr	r3, [pc, #320]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 8007354:	68e1      	ldr	r1, [r4, #12]
 8007356:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007358:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800735a:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800735e:	d003      	beq.n	8007368 <HAL_RCC_OscConfig+0x174>
 8007360:	2a18      	cmp	r2, #24
 8007362:	d121      	bne.n	80073a8 <HAL_RCC_OscConfig+0x1b4>
 8007364:	0782      	lsls	r2, r0, #30
 8007366:	d11f      	bne.n	80073a8 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	075b      	lsls	r3, r3, #29
 800736c:	d502      	bpl.n	8007374 <HAL_RCC_OscConfig+0x180>
 800736e:	2900      	cmp	r1, #0
 8007370:	f43f af43 	beq.w	80071fa <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007374:	4d47      	ldr	r5, [pc, #284]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 8007376:	682a      	ldr	r2, [r5, #0]
 8007378:	f022 0219 	bic.w	r2, r2, #25
 800737c:	430a      	orrs	r2, r1
 800737e:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8007380:	f7fd ffc8 	bl	8005314 <HAL_GetTick>
 8007384:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007386:	682b      	ldr	r3, [r5, #0]
 8007388:	075f      	lsls	r7, r3, #29
 800738a:	d507      	bpl.n	800739c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738c:	686b      	ldr	r3, [r5, #4]
 800738e:	6922      	ldr	r2, [r4, #16]
 8007390:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007394:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007398:	606b      	str	r3, [r5, #4]
 800739a:	e737      	b.n	800720c <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800739c:	f7fd ffba 	bl	8005314 <HAL_GetTick>
 80073a0:	1b80      	subs	r0, r0, r6
 80073a2:	2802      	cmp	r0, #2
 80073a4:	d9ef      	bls.n	8007386 <HAL_RCC_OscConfig+0x192>
 80073a6:	e7a9      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073a8:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073aa:	b181      	cbz	r1, 80073ce <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073ac:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073b0:	4d38      	ldr	r5, [pc, #224]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073b2:	430a      	orrs	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80073b6:	f7fd ffad 	bl	8005314 <HAL_GetTick>
 80073ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	0758      	lsls	r0, r3, #29
 80073c0:	d4e4      	bmi.n	800738c <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073c2:	f7fd ffa7 	bl	8005314 <HAL_GetTick>
 80073c6:	1b80      	subs	r0, r0, r6
 80073c8:	2802      	cmp	r0, #2
 80073ca:	d9f7      	bls.n	80073bc <HAL_RCC_OscConfig+0x1c8>
 80073cc:	e796      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 80073ce:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073d2:	4e30      	ldr	r6, [pc, #192]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_DISABLE();
 80073d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80073d6:	f7fd ff9d 	bl	8005314 <HAL_GetTick>
 80073da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80073dc:	6833      	ldr	r3, [r6, #0]
 80073de:	0759      	lsls	r1, r3, #29
 80073e0:	f57f af14 	bpl.w	800720c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073e4:	f7fd ff96 	bl	8005314 <HAL_GetTick>
 80073e8:	1b40      	subs	r0, r0, r5
 80073ea:	2802      	cmp	r0, #2
 80073ec:	d9f6      	bls.n	80073dc <HAL_RCC_OscConfig+0x1e8>
 80073ee:	e785      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80073f0:	69e2      	ldr	r2, [r4, #28]
 80073f2:	b1c2      	cbz	r2, 8007426 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 80073f4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073f6:	4d27      	ldr	r5, [pc, #156]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_ENABLE();
 80073f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80073fe:	f7fd ff89 	bl	8005314 <HAL_GetTick>
 8007402:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	05df      	lsls	r7, r3, #23
 8007408:	d507      	bpl.n	800741a <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800740a:	68eb      	ldr	r3, [r5, #12]
 800740c:	6a22      	ldr	r2, [r4, #32]
 800740e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007412:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007416:	60eb      	str	r3, [r5, #12]
 8007418:	e718      	b.n	800724c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800741a:	f7fd ff7b 	bl	8005314 <HAL_GetTick>
 800741e:	1b80      	subs	r0, r0, r6
 8007420:	2802      	cmp	r0, #2
 8007422:	d9ef      	bls.n	8007404 <HAL_RCC_OscConfig+0x210>
 8007424:	e76a      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 8007426:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007428:	4e1a      	ldr	r6, [pc, #104]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_DISABLE();
 800742a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800742e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007430:	f7fd ff70 	bl	8005314 <HAL_GetTick>
 8007434:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007436:	6833      	ldr	r3, [r6, #0]
 8007438:	05d8      	lsls	r0, r3, #23
 800743a:	f57f af07 	bpl.w	800724c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800743e:	f7fd ff69 	bl	8005314 <HAL_GetTick>
 8007442:	1b40      	subs	r0, r0, r5
 8007444:	2802      	cmp	r0, #2
 8007446:	d9f6      	bls.n	8007436 <HAL_RCC_OscConfig+0x242>
 8007448:	e758      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800744a:	6963      	ldr	r3, [r4, #20]
 800744c:	4d11      	ldr	r5, [pc, #68]	; (8007494 <HAL_RCC_OscConfig+0x2a0>)
 800744e:	b183      	cbz	r3, 8007472 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 8007450:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007458:	f7fd ff5c 	bl	8005314 <HAL_GetTick>
 800745c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800745e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007460:	079b      	lsls	r3, r3, #30
 8007462:	f53f aef7 	bmi.w	8007254 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007466:	f7fd ff55 	bl	8005314 <HAL_GetTick>
 800746a:	1b80      	subs	r0, r0, r6
 800746c:	2802      	cmp	r0, #2
 800746e:	d9f6      	bls.n	800745e <HAL_RCC_OscConfig+0x26a>
 8007470:	e744      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_LSI_DISABLE();
 8007472:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007474:	f023 0301 	bic.w	r3, r3, #1
 8007478:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800747a:	f7fd ff4b 	bl	8005314 <HAL_GetTick>
 800747e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007480:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007482:	079f      	lsls	r7, r3, #30
 8007484:	f57f aee6 	bpl.w	8007254 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007488:	f7fd ff44 	bl	8005314 <HAL_GetTick>
 800748c:	1b80      	subs	r0, r0, r6
 800748e:	2802      	cmp	r0, #2
 8007490:	d9f6      	bls.n	8007480 <HAL_RCC_OscConfig+0x28c>
 8007492:	e733      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
 8007494:	58024400 	.word	0x58024400
 8007498:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800749c:	69a3      	ldr	r3, [r4, #24]
 800749e:	4d83      	ldr	r5, [pc, #524]	; (80076ac <HAL_RCC_OscConfig+0x4b8>)
 80074a0:	b183      	cbz	r3, 80074c4 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_HSI48_ENABLE();
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80074aa:	f7fd ff33 	bl	8005314 <HAL_GetTick>
 80074ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	0498      	lsls	r0, r3, #18
 80074b4:	f53f aed2 	bmi.w	800725c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074b8:	f7fd ff2c 	bl	8005314 <HAL_GetTick>
 80074bc:	1b80      	subs	r0, r0, r6
 80074be:	2802      	cmp	r0, #2
 80074c0:	d9f6      	bls.n	80074b0 <HAL_RCC_OscConfig+0x2bc>
 80074c2:	e71b      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80074cc:	f7fd ff22 	bl	8005314 <HAL_GetTick>
 80074d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074d2:	682b      	ldr	r3, [r5, #0]
 80074d4:	0499      	lsls	r1, r3, #18
 80074d6:	f57f aec1 	bpl.w	800725c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074da:	f7fd ff1b 	bl	8005314 <HAL_GetTick>
 80074de:	1b80      	subs	r0, r0, r6
 80074e0:	2802      	cmp	r0, #2
 80074e2:	d9f6      	bls.n	80074d2 <HAL_RCC_OscConfig+0x2de>
 80074e4:	e70a      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074e6:	f7fd ff15 	bl	8005314 <HAL_GetTick>
 80074ea:	1b80      	subs	r0, r0, r6
 80074ec:	2864      	cmp	r0, #100	; 0x64
 80074ee:	f67f aec0 	bls.w	8007272 <HAL_RCC_OscConfig+0x7e>
 80074f2:	e703      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074f4:	b9b3      	cbnz	r3, 8007524 <HAL_RCC_OscConfig+0x330>
 80074f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074f8:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	672b      	str	r3, [r5, #112]	; 0x70
 8007502:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007504:	f023 0304 	bic.w	r3, r3, #4
 8007508:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800750a:	f7fd ff03 	bl	8005314 <HAL_GetTick>
 800750e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007510:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007512:	0798      	lsls	r0, r3, #30
 8007514:	f57f aec4 	bpl.w	80072a0 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007518:	f7fd fefc 	bl	8005314 <HAL_GetTick>
 800751c:	1b80      	subs	r0, r0, r6
 800751e:	42b8      	cmp	r0, r7
 8007520:	d9f6      	bls.n	8007510 <HAL_RCC_OscConfig+0x31c>
 8007522:	e6eb      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007524:	2b05      	cmp	r3, #5
 8007526:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007528:	d103      	bne.n	8007532 <HAL_RCC_OscConfig+0x33e>
 800752a:	f043 0304 	orr.w	r3, r3, #4
 800752e:	672b      	str	r3, [r5, #112]	; 0x70
 8007530:	e6a8      	b.n	8007284 <HAL_RCC_OscConfig+0x90>
 8007532:	f023 0301 	bic.w	r3, r3, #1
 8007536:	672b      	str	r3, [r5, #112]	; 0x70
 8007538:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800753a:	f023 0304 	bic.w	r3, r3, #4
 800753e:	e6a4      	b.n	800728a <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007540:	f7fd fee8 	bl	8005314 <HAL_GetTick>
 8007544:	1b40      	subs	r0, r0, r5
 8007546:	42b8      	cmp	r0, r7
 8007548:	f67f aea6 	bls.w	8007298 <HAL_RCC_OscConfig+0xa4>
 800754c:	e6d6      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800754e:	4d57      	ldr	r5, [pc, #348]	; (80076ac <HAL_RCC_OscConfig+0x4b8>)
 8007550:	692b      	ldr	r3, [r5, #16]
 8007552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007556:	2b18      	cmp	r3, #24
 8007558:	d07a      	beq.n	8007650 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 800755a:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800755c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800755e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007562:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007564:	d167      	bne.n	8007636 <HAL_RCC_OscConfig+0x442>
        tickstart = HAL_GetTick();
 8007566:	f7fd fed5 	bl	8005314 <HAL_GetTick>
 800756a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	0199      	lsls	r1, r3, #6
 8007570:	d45b      	bmi.n	800762a <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007572:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007574:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007576:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800757a:	f023 0303 	bic.w	r3, r3, #3
 800757e:	4313      	orrs	r3, r2
 8007580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007582:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007586:	62ab      	str	r3, [r5, #40]	; 0x28
 8007588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800758a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800758c:	3b01      	subs	r3, #1
 800758e:	3a01      	subs	r2, #1
 8007590:	025b      	lsls	r3, r3, #9
 8007592:	0412      	lsls	r2, r2, #16
 8007594:	b29b      	uxth	r3, r3
 8007596:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800759a:	4313      	orrs	r3, r2
 800759c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800759e:	3a01      	subs	r2, #1
 80075a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a4:	4313      	orrs	r3, r2
 80075a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80075a8:	3a01      	subs	r2, #1
 80075aa:	0612      	lsls	r2, r2, #24
 80075ac:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80075b0:	4313      	orrs	r3, r2
 80075b2:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80075b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80075be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80075c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80075c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80075cc:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80075d2:	f023 030c 	bic.w	r3, r3, #12
 80075d6:	4313      	orrs	r3, r2
 80075d8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80075de:	f023 0302 	bic.w	r3, r3, #2
 80075e2:	4313      	orrs	r3, r2
 80075e4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075fc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80075fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800760c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800760e:	f7fd fe81 	bl	8005314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007612:	4d26      	ldr	r5, [pc, #152]	; (80076ac <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8007614:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	019a      	lsls	r2, r3, #6
 800761a:	f53f ae45 	bmi.w	80072a8 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800761e:	f7fd fe79 	bl	8005314 <HAL_GetTick>
 8007622:	1b00      	subs	r0, r0, r4
 8007624:	2802      	cmp	r0, #2
 8007626:	d9f6      	bls.n	8007616 <HAL_RCC_OscConfig+0x422>
 8007628:	e668      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800762a:	f7fd fe73 	bl	8005314 <HAL_GetTick>
 800762e:	1b80      	subs	r0, r0, r6
 8007630:	2802      	cmp	r0, #2
 8007632:	d99b      	bls.n	800756c <HAL_RCC_OscConfig+0x378>
 8007634:	e662      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 8007636:	f7fd fe6d 	bl	8005314 <HAL_GetTick>
 800763a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	019b      	lsls	r3, r3, #6
 8007640:	f57f ae32 	bpl.w	80072a8 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007644:	f7fd fe66 	bl	8005314 <HAL_GetTick>
 8007648:	1b00      	subs	r0, r0, r4
 800764a:	2802      	cmp	r0, #2
 800764c:	d9f6      	bls.n	800763c <HAL_RCC_OscConfig+0x448>
 800764e:	e655      	b.n	80072fc <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007650:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007652:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007654:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007656:	f43f ae52 	beq.w	80072fe <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800765a:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800765e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007660:	4281      	cmp	r1, r0
 8007662:	f47f adca 	bne.w	80071fa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007666:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800766a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800766c:	428a      	cmp	r2, r1
 800766e:	f47f adc4 	bne.w	80071fa <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007672:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007674:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8007678:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800767a:	4291      	cmp	r1, r2
 800767c:	f47f adbd 	bne.w	80071fa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007680:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007682:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8007686:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007688:	4291      	cmp	r1, r2
 800768a:	f47f adb6 	bne.w	80071fa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800768e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007690:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8007694:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007696:	4291      	cmp	r1, r2
 8007698:	f47f adaf 	bne.w	80071fa <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800769c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800769e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80076a2:	3801      	subs	r0, #1
  return HAL_OK;
 80076a4:	1a18      	subs	r0, r3, r0
 80076a6:	bf18      	it	ne
 80076a8:	2001      	movne	r0, #1
 80076aa:	e628      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
 80076ac:	58024400 	.word	0x58024400

080076b0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076b0:	4b48      	ldr	r3, [pc, #288]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x124>)
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80076b8:	2a10      	cmp	r2, #16
{
 80076ba:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076bc:	f000 8086 	beq.w	80077cc <HAL_RCC_GetSysClockFreq+0x11c>
 80076c0:	2a18      	cmp	r2, #24
 80076c2:	d00c      	beq.n	80076de <HAL_RCC_GetSysClockFreq+0x2e>
 80076c4:	2a00      	cmp	r2, #0
 80076c6:	f040 8083 	bne.w	80077d0 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4842      	ldr	r0, [pc, #264]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x128>)
 80076ce:	f012 0f20 	tst.w	r2, #32
 80076d2:	d003      	beq.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80076da:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80076dc:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076de:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076e0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80076e4:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076e8:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076ec:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 80076ee:	d0f5      	beq.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076f0:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076f4:	f002 0201 	and.w	r2, r2, #1
 80076f8:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076fc:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007700:	4362      	muls	r2, r4
 8007702:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007706:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800770a:	2901      	cmp	r1, #1
 800770c:	ee07 2a90 	vmov	s15, r2
 8007710:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8007714:	d04c      	beq.n	80077b0 <HAL_RCC_GetSysClockFreq+0x100>
 8007716:	2902      	cmp	r1, #2
 8007718:	d03c      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0xe4>
 800771a:	2900      	cmp	r1, #0
 800771c:	d148      	bne.n	80077b0 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	0692      	lsls	r2, r2, #26
 8007722:	d527      	bpl.n	8007774 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007724:	6819      	ldr	r1, [r3, #0]
 8007726:	4a2c      	ldr	r2, [pc, #176]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x128>)
 8007728:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800772e:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007734:	ee07 2a10 	vmov	s14, r2
 8007738:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800773c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007740:	ee06 3a90 	vmov	s13, r3
 8007744:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007750:	4b20      	ldr	r3, [pc, #128]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007752:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800775c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800775e:	ee07 3a10 	vmov	s14, r3
 8007762:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007766:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800776a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800776e:	ee17 0a90 	vmov	r0, s15
 8007772:	e7b3      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a10 	vmov	s14, r3
 800777e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007786:	ee77 7a86 	vadd.f32	s15, s15, s12
 800778a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80077dc <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800778e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007792:	e7dd      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779a:	ee07 3a10 	vmov	s14, r3
 800779e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80077aa:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80077e0 <HAL_RCC_GetSysClockFreq+0x130>
 80077ae:	e7ee      	b.n	800778e <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b6:	ee07 3a10 	vmov	s14, r3
 80077ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80077c6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80077e4 <HAL_RCC_GetSysClockFreq+0x134>
 80077ca:	e7e0      	b.n	800778e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077cc:	4806      	ldr	r0, [pc, #24]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80077ce:	e785      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80077d0:	4806      	ldr	r0, [pc, #24]	; (80077ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80077d2:	e783      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x2c>
 80077d4:	58024400 	.word	0x58024400
 80077d8:	03d09000 	.word	0x03d09000
 80077dc:	4c742400 	.word	0x4c742400
 80077e0:	4b989680 	.word	0x4b989680
 80077e4:	4a742400 	.word	0x4a742400
 80077e8:	01312d00 	.word	0x01312d00
 80077ec:	003d0900 	.word	0x003d0900

080077f0 <HAL_RCC_ClockConfig>:
{
 80077f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80077f6:	4604      	mov	r4, r0
 80077f8:	b910      	cbnz	r0, 8007800 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80077fa:	2001      	movs	r0, #1
}
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007800:	4a88      	ldr	r2, [pc, #544]	; (8007a24 <HAL_RCC_ClockConfig+0x234>)
 8007802:	6813      	ldr	r3, [r2, #0]
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	428b      	cmp	r3, r1
 800780a:	f0c0 8093 	bcc.w	8007934 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	075f      	lsls	r7, r3, #29
 8007812:	f100 809b 	bmi.w	800794c <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007816:	071e      	lsls	r6, r3, #28
 8007818:	d50b      	bpl.n	8007832 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800781a:	4983      	ldr	r1, [pc, #524]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 800781c:	6966      	ldr	r6, [r4, #20]
 800781e:	69c8      	ldr	r0, [r1, #28]
 8007820:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007824:	4286      	cmp	r6, r0
 8007826:	d904      	bls.n	8007832 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007828:	69ca      	ldr	r2, [r1, #28]
 800782a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800782e:	4332      	orrs	r2, r6
 8007830:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007832:	06d8      	lsls	r0, r3, #27
 8007834:	d50b      	bpl.n	800784e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007836:	497c      	ldr	r1, [pc, #496]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 8007838:	69a6      	ldr	r6, [r4, #24]
 800783a:	69c8      	ldr	r0, [r1, #28]
 800783c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8007840:	4286      	cmp	r6, r0
 8007842:	d904      	bls.n	800784e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007844:	69ca      	ldr	r2, [r1, #28]
 8007846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800784a:	4332      	orrs	r2, r6
 800784c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800784e:	0699      	lsls	r1, r3, #26
 8007850:	d50b      	bpl.n	800786a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007852:	4975      	ldr	r1, [pc, #468]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 8007854:	69e6      	ldr	r6, [r4, #28]
 8007856:	6a08      	ldr	r0, [r1, #32]
 8007858:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800785c:	4286      	cmp	r6, r0
 800785e:	d904      	bls.n	800786a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007860:	6a0a      	ldr	r2, [r1, #32]
 8007862:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007866:	4332      	orrs	r2, r6
 8007868:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800786a:	079a      	lsls	r2, r3, #30
 800786c:	d50b      	bpl.n	8007886 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800786e:	496e      	ldr	r1, [pc, #440]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 8007870:	68e6      	ldr	r6, [r4, #12]
 8007872:	6988      	ldr	r0, [r1, #24]
 8007874:	f000 000f 	and.w	r0, r0, #15
 8007878:	4286      	cmp	r6, r0
 800787a:	d904      	bls.n	8007886 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800787c:	698a      	ldr	r2, [r1, #24]
 800787e:	f022 020f 	bic.w	r2, r2, #15
 8007882:	4332      	orrs	r2, r6
 8007884:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007886:	07df      	lsls	r7, r3, #31
 8007888:	d46e      	bmi.n	8007968 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	079e      	lsls	r6, r3, #30
 800788e:	f100 80a1 	bmi.w	80079d4 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007892:	4964      	ldr	r1, [pc, #400]	; (8007a24 <HAL_RCC_ClockConfig+0x234>)
 8007894:	680a      	ldr	r2, [r1, #0]
 8007896:	f002 020f 	and.w	r2, r2, #15
 800789a:	42aa      	cmp	r2, r5
 800789c:	f200 80a8 	bhi.w	80079f0 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078a0:	0758      	lsls	r0, r3, #29
 80078a2:	f100 80b1 	bmi.w	8007a08 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a6:	0719      	lsls	r1, r3, #28
 80078a8:	d50b      	bpl.n	80078c2 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078aa:	495f      	ldr	r1, [pc, #380]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 80078ac:	6965      	ldr	r5, [r4, #20]
 80078ae:	69c8      	ldr	r0, [r1, #28]
 80078b0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80078b4:	4285      	cmp	r5, r0
 80078b6:	d204      	bcs.n	80078c2 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078b8:	69ca      	ldr	r2, [r1, #28]
 80078ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80078be:	432a      	orrs	r2, r5
 80078c0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c2:	06da      	lsls	r2, r3, #27
 80078c4:	d50b      	bpl.n	80078de <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078c6:	4958      	ldr	r1, [pc, #352]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 80078c8:	69a5      	ldr	r5, [r4, #24]
 80078ca:	69c8      	ldr	r0, [r1, #28]
 80078cc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80078d0:	4285      	cmp	r5, r0
 80078d2:	d204      	bcs.n	80078de <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078d4:	69ca      	ldr	r2, [r1, #28]
 80078d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078da:	432a      	orrs	r2, r5
 80078dc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078de:	069b      	lsls	r3, r3, #26
 80078e0:	d50b      	bpl.n	80078fa <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078e2:	4a51      	ldr	r2, [pc, #324]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 80078e4:	69e0      	ldr	r0, [r4, #28]
 80078e6:	6a11      	ldr	r1, [r2, #32]
 80078e8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80078ec:	4288      	cmp	r0, r1
 80078ee:	d204      	bcs.n	80078fa <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078f0:	6a13      	ldr	r3, [r2, #32]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	4303      	orrs	r3, r0
 80078f8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078fa:	f7ff fed9 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 80078fe:	494a      	ldr	r1, [pc, #296]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 8007900:	4a4a      	ldr	r2, [pc, #296]	; (8007a2c <HAL_RCC_ClockConfig+0x23c>)
 8007902:	698b      	ldr	r3, [r1, #24]
 8007904:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007908:	5cd3      	ldrb	r3, [r2, r3]
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007910:	698b      	ldr	r3, [r1, #24]
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	5cd3      	ldrb	r3, [r2, r3]
 8007918:	4a45      	ldr	r2, [pc, #276]	; (8007a30 <HAL_RCC_ClockConfig+0x240>)
 800791a:	f003 031f 	and.w	r3, r3, #31
 800791e:	fa20 f303 	lsr.w	r3, r0, r3
 8007922:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007924:	4b43      	ldr	r3, [pc, #268]	; (8007a34 <HAL_RCC_ClockConfig+0x244>)
 8007926:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8007928:	4b43      	ldr	r3, [pc, #268]	; (8007a38 <HAL_RCC_ClockConfig+0x248>)
}
 800792a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	f7f9 bf2a 	b.w	8001788 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007934:	6813      	ldr	r3, [r2, #0]
 8007936:	f023 030f 	bic.w	r3, r3, #15
 800793a:	430b      	orrs	r3, r1
 800793c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793e:	6813      	ldr	r3, [r2, #0]
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	428b      	cmp	r3, r1
 8007946:	f47f af58 	bne.w	80077fa <HAL_RCC_ClockConfig+0xa>
 800794a:	e760      	b.n	800780e <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800794c:	4936      	ldr	r1, [pc, #216]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 800794e:	6926      	ldr	r6, [r4, #16]
 8007950:	6988      	ldr	r0, [r1, #24]
 8007952:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007956:	4286      	cmp	r6, r0
 8007958:	f67f af5d 	bls.w	8007816 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800795c:	698a      	ldr	r2, [r1, #24]
 800795e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007962:	4332      	orrs	r2, r6
 8007964:	618a      	str	r2, [r1, #24]
 8007966:	e756      	b.n	8007816 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007968:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 800796a:	68a1      	ldr	r1, [r4, #8]
 800796c:	699a      	ldr	r2, [r3, #24]
 800796e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8007972:	430a      	orrs	r2, r1
 8007974:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007976:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007978:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800797a:	2a02      	cmp	r2, #2
 800797c:	d11d      	bne.n	80079ba <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800797e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007982:	f43f af3a 	beq.w	80077fa <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007986:	4e28      	ldr	r6, [pc, #160]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007988:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800798c:	6933      	ldr	r3, [r6, #16]
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	4313      	orrs	r3, r2
 8007994:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8007996:	f7fd fcbd 	bl	8005314 <HAL_GetTick>
 800799a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800799c:	6933      	ldr	r3, [r6, #16]
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079a4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80079a8:	f43f af6f 	beq.w	800788a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079ac:	f7fd fcb2 	bl	8005314 <HAL_GetTick>
 80079b0:	1bc0      	subs	r0, r0, r7
 80079b2:	4540      	cmp	r0, r8
 80079b4:	d9f2      	bls.n	800799c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 80079b6:	2003      	movs	r0, #3
 80079b8:	e720      	b.n	80077fc <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ba:	2a03      	cmp	r2, #3
 80079bc:	d102      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80079c2:	e7de      	b.n	8007982 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079c4:	2a01      	cmp	r2, #1
 80079c6:	d102      	bne.n	80079ce <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80079cc:	e7d9      	b.n	8007982 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ce:	f013 0f04 	tst.w	r3, #4
 80079d2:	e7d6      	b.n	8007982 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079d4:	4914      	ldr	r1, [pc, #80]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 80079d6:	68e6      	ldr	r6, [r4, #12]
 80079d8:	6988      	ldr	r0, [r1, #24]
 80079da:	f000 000f 	and.w	r0, r0, #15
 80079de:	4286      	cmp	r6, r0
 80079e0:	f4bf af57 	bcs.w	8007892 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079e4:	698a      	ldr	r2, [r1, #24]
 80079e6:	f022 020f 	bic.w	r2, r2, #15
 80079ea:	4332      	orrs	r2, r6
 80079ec:	618a      	str	r2, [r1, #24]
 80079ee:	e750      	b.n	8007892 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f0:	680a      	ldr	r2, [r1, #0]
 80079f2:	f022 020f 	bic.w	r2, r2, #15
 80079f6:	432a      	orrs	r2, r5
 80079f8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	680a      	ldr	r2, [r1, #0]
 80079fc:	f002 020f 	and.w	r2, r2, #15
 8007a00:	42aa      	cmp	r2, r5
 8007a02:	f47f aefa 	bne.w	80077fa <HAL_RCC_ClockConfig+0xa>
 8007a06:	e74b      	b.n	80078a0 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a08:	4907      	ldr	r1, [pc, #28]	; (8007a28 <HAL_RCC_ClockConfig+0x238>)
 8007a0a:	6925      	ldr	r5, [r4, #16]
 8007a0c:	6988      	ldr	r0, [r1, #24]
 8007a0e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007a12:	4285      	cmp	r5, r0
 8007a14:	f4bf af47 	bcs.w	80078a6 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a18:	698a      	ldr	r2, [r1, #24]
 8007a1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a1e:	432a      	orrs	r2, r5
 8007a20:	618a      	str	r2, [r1, #24]
 8007a22:	e740      	b.n	80078a6 <HAL_RCC_ClockConfig+0xb6>
 8007a24:	52002000 	.word	0x52002000
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	0801d180 	.word	0x0801d180
 8007a30:	24000054 	.word	0x24000054
 8007a34:	24000050 	.word	0x24000050
 8007a38:	2400005c 	.word	0x2400005c

08007a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a3c:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a3e:	4c0c      	ldr	r4, [pc, #48]	; (8007a70 <HAL_RCC_GetHCLKFreq+0x34>)
 8007a40:	f7ff fe36 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 8007a44:	490b      	ldr	r1, [pc, #44]	; (8007a74 <HAL_RCC_GetHCLKFreq+0x38>)
 8007a46:	69a3      	ldr	r3, [r4, #24]
 8007a48:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007a4c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a4e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a50:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a54:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a58:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a5c:	5ccb      	ldrb	r3, [r1, r3]
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	fa22 f003 	lsr.w	r0, r2, r3
 8007a66:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007a68:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a6a:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <HAL_RCC_GetHCLKFreq+0x40>)
 8007a6c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007a6e:	bd10      	pop	{r4, pc}
 8007a70:	58024400 	.word	0x58024400
 8007a74:	0801d180 	.word	0x0801d180
 8007a78:	24000054 	.word	0x24000054
 8007a7c:	24000050 	.word	0x24000050

08007a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a80:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a82:	f7ff ffdb 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007a88:	4a05      	ldr	r2, [pc, #20]	; (8007aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007a90:	5cd3      	ldrb	r3, [r2, r3]
 8007a92:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a96:	40d8      	lsrs	r0, r3
 8007a98:	bd08      	pop	{r3, pc}
 8007a9a:	bf00      	nop
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	0801d180 	.word	0x0801d180

08007aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007aa4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007aa6:	f7ff ffc9 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007aac:	4a05      	ldr	r2, [pc, #20]	; (8007ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007ab4:	5cd3      	ldrb	r3, [r2, r3]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007aba:	40d8      	lsrs	r0, r3
 8007abc:	bd08      	pop	{r3, pc}
 8007abe:	bf00      	nop
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	0801d180 	.word	0x0801d180

08007ac8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007ac8:	233f      	movs	r3, #63	; 0x3f
 8007aca:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <HAL_RCC_GetClockConfig+0x4c>)
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	f002 0207 	and.w	r2, r2, #7
 8007ad4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8007adc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ade:	699a      	ldr	r2, [r3, #24]
 8007ae0:	f002 020f 	and.w	r2, r2, #15
 8007ae4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ae6:	699a      	ldr	r2, [r3, #24]
 8007ae8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007aec:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007af4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007afc:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b04:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b06:	4b04      	ldr	r3, [pc, #16]	; (8007b18 <HAL_RCC_GetClockConfig+0x50>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	600b      	str	r3, [r1, #0]
}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	58024400 	.word	0x58024400
 8007b18:	52002000 	.word	0x52002000

08007b1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b1e:	4c3a      	ldr	r4, [pc, #232]	; (8007c08 <RCCEx_PLL2_Config+0xec>)
{
 8007b20:	4606      	mov	r6, r0
 8007b22:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d069      	beq.n	8007c02 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b34:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b36:	f7fd fbed 	bl	8005314 <HAL_GetTick>
 8007b3a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	011a      	lsls	r2, r3, #4
 8007b40:	d44b      	bmi.n	8007bda <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b44:	6832      	ldr	r2, [r6, #0]
 8007b46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b4a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007b4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b50:	68b3      	ldr	r3, [r6, #8]
 8007b52:	68f2      	ldr	r2, [r6, #12]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	3a01      	subs	r2, #1
 8007b58:	025b      	lsls	r3, r3, #9
 8007b5a:	0412      	lsls	r2, r2, #16
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007b62:	4313      	orrs	r3, r2
 8007b64:	6872      	ldr	r2, [r6, #4]
 8007b66:	3a01      	subs	r2, #1
 8007b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	6932      	ldr	r2, [r6, #16]
 8007b70:	3a01      	subs	r2, #1
 8007b72:	0612      	lsls	r2, r2, #24
 8007b74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b7e:	6972      	ldr	r2, [r6, #20]
 8007b80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b84:	4313      	orrs	r3, r2
 8007b86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b8a:	69b2      	ldr	r2, [r6, #24]
 8007b8c:	f023 0320 	bic.w	r3, r3, #32
 8007b90:	4313      	orrs	r3, r2
 8007b92:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b96:	f023 0310 	bic.w	r3, r3, #16
 8007b9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b9e:	69f2      	ldr	r2, [r6, #28]
 8007ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ba4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ba8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007bac:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007bb0:	f043 0310 	orr.w	r3, r3, #16
 8007bb4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007bb8:	b9b5      	cbnz	r5, 8007be8 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bc0:	4c11      	ldr	r4, [pc, #68]	; (8007c08 <RCCEx_PLL2_Config+0xec>)
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bca:	f7fd fba3 	bl	8005314 <HAL_GetTick>
 8007bce:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	d50f      	bpl.n	8007bf6 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	e005      	b.n	8007be6 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bda:	f7fd fb9b 	bl	8005314 <HAL_GetTick>
 8007bde:	1bc0      	subs	r0, r0, r7
 8007be0:	2802      	cmp	r0, #2
 8007be2:	d9ab      	bls.n	8007b3c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8007be4:	2003      	movs	r0, #3
}
 8007be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8007be8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bea:	bf0c      	ite	eq
 8007bec:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bf0:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007bf4:	e7e3      	b.n	8007bbe <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bf6:	f7fd fb8d 	bl	8005314 <HAL_GetTick>
 8007bfa:	1b40      	subs	r0, r0, r5
 8007bfc:	2802      	cmp	r0, #2
 8007bfe:	d9e7      	bls.n	8007bd0 <RCCEx_PLL2_Config+0xb4>
 8007c00:	e7f0      	b.n	8007be4 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8007c02:	2001      	movs	r0, #1
 8007c04:	e7ef      	b.n	8007be6 <RCCEx_PLL2_Config+0xca>
 8007c06:	bf00      	nop
 8007c08:	58024400 	.word	0x58024400

08007c0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c0e:	4c3a      	ldr	r4, [pc, #232]	; (8007cf8 <RCCEx_PLL3_Config+0xec>)
{
 8007c10:	4606      	mov	r6, r0
 8007c12:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d069      	beq.n	8007cf2 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c26:	f7fd fb75 	bl	8005314 <HAL_GetTick>
 8007c2a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	009a      	lsls	r2, r3, #2
 8007c30:	d44b      	bmi.n	8007cca <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c34:	6832      	ldr	r2, [r6, #0]
 8007c36:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007c3a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007c3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c40:	68b3      	ldr	r3, [r6, #8]
 8007c42:	68f2      	ldr	r2, [r6, #12]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	3a01      	subs	r2, #1
 8007c48:	025b      	lsls	r3, r3, #9
 8007c4a:	0412      	lsls	r2, r2, #16
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007c52:	4313      	orrs	r3, r2
 8007c54:	6872      	ldr	r2, [r6, #4]
 8007c56:	3a01      	subs	r2, #1
 8007c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	6932      	ldr	r2, [r6, #16]
 8007c60:	3a01      	subs	r2, #1
 8007c62:	0612      	lsls	r2, r2, #24
 8007c64:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c6e:	6972      	ldr	r2, [r6, #20]
 8007c70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c74:	4313      	orrs	r3, r2
 8007c76:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c7a:	69b2      	ldr	r2, [r6, #24]
 8007c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c80:	4313      	orrs	r3, r2
 8007c82:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c8a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c8e:	69f2      	ldr	r2, [r6, #28]
 8007c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007c98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007c9c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ca6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007ca8:	b9b5      	cbnz	r5, 8007cd8 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007caa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cae:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cb0:	4c11      	ldr	r4, [pc, #68]	; (8007cf8 <RCCEx_PLL3_Config+0xec>)
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cba:	f7fd fb2b 	bl	8005314 <HAL_GetTick>
 8007cbe:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	d50f      	bpl.n	8007ce6 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e005      	b.n	8007cd6 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cca:	f7fd fb23 	bl	8005314 <HAL_GetTick>
 8007cce:	1bc0      	subs	r0, r0, r7
 8007cd0:	2802      	cmp	r0, #2
 8007cd2:	d9ab      	bls.n	8007c2c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8007cd4:	2003      	movs	r0, #3
}
 8007cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cd8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cda:	bf0c      	ite	eq
 8007cdc:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ce0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007ce4:	e7e3      	b.n	8007cae <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ce6:	f7fd fb15 	bl	8005314 <HAL_GetTick>
 8007cea:	1b40      	subs	r0, r0, r5
 8007cec:	2802      	cmp	r0, #2
 8007cee:	d9e7      	bls.n	8007cc0 <RCCEx_PLL3_Config+0xb4>
 8007cf0:	e7f0      	b.n	8007cd4 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	e7ef      	b.n	8007cd6 <RCCEx_PLL3_Config+0xca>
 8007cf6:	bf00      	nop
 8007cf8:	58024400 	.word	0x58024400

08007cfc <HAL_RCCEx_PeriphCLKConfig>:
{
 8007cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d00:	6806      	ldr	r6, [r0, #0]
{
 8007d02:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d04:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8007d08:	d009      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d0a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d10:	d02c      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8007d12:	d811      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007d14:	b1e3      	cbz	r3, 8007d50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1a:	d01f      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007d1c:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d1e:	682b      	ldr	r3, [r5, #0]
 8007d20:	05d8      	lsls	r0, r3, #23
 8007d22:	f140 80d7 	bpl.w	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d26:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	f200 80d2 	bhi.w	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8007d2e:	e8df f003 	tbb	[pc, r3]
 8007d32:	2922      	.short	0x2922
 8007d34:	27ca      	.short	0x27ca
 8007d36:	27          	.byte	0x27
 8007d37:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d3c:	d1ee      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d3e:	4ab6      	ldr	r2, [pc, #728]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d40:	2600      	movs	r6, #0
 8007d42:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007d44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007d46:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	6513      	str	r3, [r2, #80]	; 0x50
 8007d4e:	e7e6      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d50:	4ab1      	ldr	r2, [pc, #708]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d58:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007d5a:	e7f0      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	3004      	adds	r0, #4
 8007d60:	f7ff fedc 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d64:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d1d9      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22>
 8007d6a:	e7e8      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	3024      	adds	r0, #36	; 0x24
 8007d70:	f7ff ff4c 	bl	8007c0c <RCCEx_PLL3_Config>
 8007d74:	e7f6      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d76:	4aa8      	ldr	r2, [pc, #672]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d80:	4634      	mov	r4, r6
 8007d82:	e004      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d84:	2100      	movs	r1, #0
 8007d86:	1d28      	adds	r0, r5, #4
 8007d88:	f7ff fec8 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d8c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	f040 80a2 	bne.w	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d94:	4aa0      	ldr	r2, [pc, #640]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d96:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007d98:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007da2:	682b      	ldr	r3, [r5, #0]
 8007da4:	0559      	lsls	r1, r3, #21
 8007da6:	d510      	bpl.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007da8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8007dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007db0:	f000 80b3 	beq.w	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007db4:	f200 8092 	bhi.w	8007edc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 80a2 	beq.w	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc2:	f000 80a4 	beq.w	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007dc6:	2601      	movs	r6, #1
 8007dc8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007dca:	682b      	ldr	r3, [r5, #0]
 8007dcc:	051a      	lsls	r2, r3, #20
 8007dce:	d510      	bpl.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007dd0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8007dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dd8:	f000 80c6 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007ddc:	f200 80a5 	bhi.w	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80b5 	beq.w	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dea:	f000 80b7 	beq.w	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007dee:	2601      	movs	r6, #1
 8007df0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	019b      	lsls	r3, r3, #6
 8007df6:	d50d      	bpl.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8007df8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	f000 80ce 	beq.w	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8007e00:	f200 80ba 	bhi.w	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 80ba 	beq.w	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	f000 80c0 	beq.w	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8007e10:	2601      	movs	r6, #1
 8007e12:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	04df      	lsls	r7, r3, #19
 8007e18:	d50f      	bpl.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e20:	f000 80e0 	beq.w	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007e24:	f200 80c2 	bhi.w	8007fac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80cf 	beq.w	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e32:	f000 80d1 	beq.w	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007e36:	2601      	movs	r6, #1
 8007e38:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e3a:	682b      	ldr	r3, [r5, #0]
 8007e3c:	0498      	lsls	r0, r3, #18
 8007e3e:	d50f      	bpl.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e40:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8007e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e46:	f000 80ef 	beq.w	8008028 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8007e4a:	f200 80d3 	bhi.w	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80d9 	beq.w	8008006 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8007e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e58:	f000 80e0 	beq.w	800801c <HAL_RCCEx_PeriphCLKConfig+0x320>
 8007e5c:	2601      	movs	r6, #1
 8007e5e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	0459      	lsls	r1, r3, #17
 8007e64:	d510      	bpl.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e66:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8007e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e6e:	f000 80fc 	beq.w	800806a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007e72:	f200 80e1 	bhi.w	8008038 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80e7 	beq.w	800804a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e80:	f000 80ed 	beq.w	800805e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007e84:	2601      	movs	r6, #1
 8007e86:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	041a      	lsls	r2, r3, #16
 8007e8c:	d50d      	bpl.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8007e8e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8007e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e94:	f000 80f1 	beq.w	800807a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9c:	f000 80fb 	beq.w	8008096 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80ef 	beq.w	8008084 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007ea6:	2601      	movs	r6, #1
 8007ea8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007eaa:	682b      	ldr	r3, [r5, #0]
 8007eac:	01db      	lsls	r3, r3, #7
 8007eae:	f140 8108 	bpl.w	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8007eb2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	f200 8148 	bhi.w	800814a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007eba:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ebe:	00f9      	.short	0x00f9
 8007ec0:	014000f4 	.word	0x014000f4
 8007ec4:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007ecc:	f7ff fe9e 	bl	8007c0c <RCCEx_PLL3_Config>
 8007ed0:	e75c      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ed2:	2601      	movs	r6, #1
 8007ed4:	4634      	mov	r4, r6
 8007ed6:	e764      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8007ed8:	4626      	mov	r6, r4
 8007eda:	e762      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007edc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ee0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007ee4:	d003      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007eea:	f47f af6c 	bne.w	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 8007eee:	b9d4      	cbnz	r4, 8007f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ef0:	4a49      	ldr	r2, [pc, #292]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007ef2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8007ef6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ef8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8007efc:	430b      	orrs	r3, r1
 8007efe:	6593      	str	r3, [r2, #88]	; 0x58
 8007f00:	e763      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f02:	4a45      	ldr	r2, [pc, #276]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007f0c:	e7ef      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	1d28      	adds	r0, r5, #4
 8007f12:	f7ff fe03 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f16:	4604      	mov	r4, r0
      break;
 8007f18:	e7e9      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007f20:	f7ff fe74 	bl	8007c0c <RCCEx_PLL3_Config>
 8007f24:	e7f7      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007f26:	4626      	mov	r6, r4
 8007f28:	e74f      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f2e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007f32:	d003      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f38:	f47f af59 	bne.w	8007dee <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 8007f3c:	b9d4      	cbnz	r4, 8007f74 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f3e:	4a36      	ldr	r2, [pc, #216]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f40:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8007f44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007f4e:	e750      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f50:	4a31      	ldr	r2, [pc, #196]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f58:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007f5a:	e7ef      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	1d28      	adds	r0, r5, #4
 8007f60:	f7ff fddc 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f64:	4604      	mov	r4, r0
      break;
 8007f66:	e7e9      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007f6e:	f7ff fe4d 	bl	8007c0c <RCCEx_PLL3_Config>
 8007f72:	e7f7      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007f74:	4626      	mov	r6, r4
 8007f76:	e73c      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 8007f78:	2b30      	cmp	r3, #48	; 0x30
 8007f7a:	f47f af49 	bne.w	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 8007f7e:	b99c      	cbnz	r4, 8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007f80:	4a25      	ldr	r2, [pc, #148]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f82:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007f84:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007f86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f8e:	e741      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f90:	4a21      	ldr	r2, [pc, #132]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007f92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f98:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007f9a:	e7f0      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f9c:	2102      	movs	r1, #2
 8007f9e:	1d28      	adds	r0, r5, #4
 8007fa0:	f7ff fdbc 	bl	8007b1c <RCCEx_PLL2_Config>
 8007fa4:	4604      	mov	r4, r0
      break;
 8007fa6:	e7ea      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007fa8:	4626      	mov	r6, r4
 8007faa:	e733      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fb0:	d003      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fb6:	f47f af3e 	bne.w	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8007fba:	b9cc      	cbnz	r4, 8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007fbc:	4a16      	ldr	r2, [pc, #88]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007fbe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8007fc0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6513      	str	r3, [r2, #80]	; 0x50
 8007fca:	e736      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fcc:	4a12      	ldr	r2, [pc, #72]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007fce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007fd6:	e7f0      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fd8:	2100      	movs	r1, #0
 8007fda:	1d28      	adds	r0, r5, #4
 8007fdc:	f7ff fd9e 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fe0:	4604      	mov	r4, r0
      break;
 8007fe2:	e7ea      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007fea:	f7ff fe0f 	bl	8007c0c <RCCEx_PLL3_Config>
 8007fee:	e7f7      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8007ff0:	4626      	mov	r6, r4
 8007ff2:	e722      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ff4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ff8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007ffc:	d003      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8007ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008002:	f47f af2b 	bne.w	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8008006:	b9ac      	cbnz	r4, 8008034 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008008:	4a03      	ldr	r2, [pc, #12]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800800a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800800c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800800e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008012:	430b      	orrs	r3, r1
 8008014:	6513      	str	r3, [r2, #80]	; 0x50
 8008016:	e723      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8008018:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800801c:	2101      	movs	r1, #1
 800801e:	1d28      	adds	r0, r5, #4
 8008020:	f7ff fd7c 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008024:	4604      	mov	r4, r0
      break;
 8008026:	e7ee      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008028:	2101      	movs	r1, #1
 800802a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800802e:	f7ff fded 	bl	8007c0c <RCCEx_PLL3_Config>
 8008032:	e7f7      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8008034:	4626      	mov	r6, r4
 8008036:	e713      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008038:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800803c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008040:	d003      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008042:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008046:	f47f af1d 	bne.w	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 800804a:	b9a4      	cbnz	r4, 8008076 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800804c:	4a7f      	ldr	r2, [pc, #508]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800804e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8008052:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008054:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008058:	430b      	orrs	r3, r1
 800805a:	6593      	str	r3, [r2, #88]	; 0x58
 800805c:	e714      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800805e:	2101      	movs	r1, #1
 8008060:	1d28      	adds	r0, r5, #4
 8008062:	f7ff fd5b 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008066:	4604      	mov	r4, r0
      break;
 8008068:	e7ef      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800806a:	2101      	movs	r1, #1
 800806c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008070:	f7ff fdcc 	bl	8007c0c <RCCEx_PLL3_Config>
 8008074:	e7f7      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008076:	4626      	mov	r6, r4
 8008078:	e706      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800807a:	4a74      	ldr	r2, [pc, #464]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800807c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800807e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008082:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008084:	b96c      	cbnz	r4, 80080a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008086:	4a71      	ldr	r2, [pc, #452]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008088:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800808a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800808c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008090:	430b      	orrs	r3, r1
 8008092:	6513      	str	r3, [r2, #80]	; 0x50
 8008094:	e709      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008096:	2101      	movs	r1, #1
 8008098:	1d28      	adds	r0, r5, #4
 800809a:	f7ff fd3f 	bl	8007b1c <RCCEx_PLL2_Config>
 800809e:	4604      	mov	r4, r0
      break;
 80080a0:	e7f0      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80080a2:	4626      	mov	r6, r4
 80080a4:	e701      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a6:	4a69      	ldr	r2, [pc, #420]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80080a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80080aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80080b0:	2c00      	cmp	r4, #0
 80080b2:	d14d      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080b4:	4a65      	ldr	r2, [pc, #404]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80080b6:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80080b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	430b      	orrs	r3, r1
 80080c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	025f      	lsls	r7, r3, #9
 80080c6:	d54d      	bpl.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080c8:	4f61      	ldr	r7, [pc, #388]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80080d2:	f7fd f91f 	bl	8005314 <HAL_GetTick>
 80080d6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	05d8      	lsls	r0, r3, #23
 80080dc:	d53a      	bpl.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 80080de:	2c00      	cmp	r4, #0
 80080e0:	d16c      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080e2:	4b5a      	ldr	r3, [pc, #360]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80080e4:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 80080e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080ea:	4042      	eors	r2, r0
 80080ec:	f412 7f40 	tst.w	r2, #768	; 0x300
 80080f0:	d00b      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80080f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80080fa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80080fe:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008100:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008102:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008106:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8008108:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800810a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800810e:	d040      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008110:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8008114:	494d      	ldr	r1, [pc, #308]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008116:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800811a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800811e:	d149      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8008120:	6908      	ldr	r0, [r1, #16]
 8008122:	4a4c      	ldr	r2, [pc, #304]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8008124:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008128:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800812c:	4302      	orrs	r2, r0
 800812e:	610a      	str	r2, [r1, #16]
 8008130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008134:	4a45      	ldr	r2, [pc, #276]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008136:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008138:	430b      	orrs	r3, r1
 800813a:	6713      	str	r3, [r2, #112]	; 0x70
 800813c:	e012      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800813e:	2102      	movs	r1, #2
 8008140:	1d28      	adds	r0, r5, #4
 8008142:	f7ff fceb 	bl	8007b1c <RCCEx_PLL2_Config>
 8008146:	4604      	mov	r4, r0
      break;
 8008148:	e7b2      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800814a:	2601      	movs	r6, #1
 800814c:	4634      	mov	r4, r6
 800814e:	e7b8      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8008150:	4626      	mov	r6, r4
 8008152:	e7b6      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008154:	f7fd f8de 	bl	8005314 <HAL_GetTick>
 8008158:	eba0 0008 	sub.w	r0, r0, r8
 800815c:	2864      	cmp	r0, #100	; 0x64
 800815e:	d9bb      	bls.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8008160:	2603      	movs	r6, #3
 8008162:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	07da      	lsls	r2, r3, #31
 8008168:	d508      	bpl.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 800816a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800816c:	2b10      	cmp	r3, #16
 800816e:	d03c      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008170:	d826      	bhi.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008172:	b35b      	cbz	r3, 80081cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008174:	2b08      	cmp	r3, #8
 8008176:	d032      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008178:	2601      	movs	r6, #1
 800817a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	079b      	lsls	r3, r3, #30
 8008180:	d548      	bpl.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008182:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008184:	2b05      	cmp	r3, #5
 8008186:	d85b      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8008188:	e8df f003 	tbb	[pc, r3]
 800818c:	3c54373c 	.word	0x3c54373c
 8008190:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 8008192:	f7fd f8bf 	bl	8005314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008196:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800824c <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 800819a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800819c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081a0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80081a4:	0799      	lsls	r1, r3, #30
 80081a6:	d4b3      	bmi.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a8:	f7fd f8b4 	bl	8005314 <HAL_GetTick>
 80081ac:	1bc0      	subs	r0, r0, r7
 80081ae:	4548      	cmp	r0, r9
 80081b0:	d9f6      	bls.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80081b2:	e7d5      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081b4:	690a      	ldr	r2, [r1, #16]
 80081b6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80081ba:	e7b8      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80081bc:	4626      	mov	r6, r4
 80081be:	e7d1      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 80081c0:	f023 0208 	bic.w	r2, r3, #8
 80081c4:	2a20      	cmp	r2, #32
 80081c6:	d001      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80081c8:	2b18      	cmp	r3, #24
 80081ca:	d1d5      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 80081cc:	b99c      	cbnz	r4, 80081f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081ce:	4a1f      	ldr	r2, [pc, #124]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80081d0:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80081d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081d4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80081d8:	430b      	orrs	r3, r1
 80081da:	6553      	str	r3, [r2, #84]	; 0x54
 80081dc:	e7ce      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081de:	2101      	movs	r1, #1
 80081e0:	1d28      	adds	r0, r5, #4
 80081e2:	f7ff fc9b 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081e6:	4604      	mov	r4, r0
      break;
 80081e8:	e7f0      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081ea:	2101      	movs	r1, #1
 80081ec:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80081f0:	f7ff fd0c 	bl	8007c0c <RCCEx_PLL3_Config>
 80081f4:	e7f7      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80081f6:	4626      	mov	r6, r4
 80081f8:	e7c0      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081fa:	2101      	movs	r1, #1
 80081fc:	1d28      	adds	r0, r5, #4
 80081fe:	f7ff fc8d 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008202:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008204:	b9fc      	cbnz	r4, 8008246 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008206:	4a11      	ldr	r2, [pc, #68]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8008208:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800820a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800820c:	f023 0307 	bic.w	r3, r3, #7
 8008210:	430b      	orrs	r3, r1
 8008212:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	075f      	lsls	r7, r3, #29
 8008218:	d52e      	bpl.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800821a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800821e:	2b05      	cmp	r3, #5
 8008220:	f200 8134 	bhi.w	800848c <HAL_RCCEx_PeriphCLKConfig+0x790>
 8008224:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008228:	0018001d 	.word	0x0018001d
 800822c:	001d012c 	.word	0x001d012c
 8008230:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008234:	2101      	movs	r1, #1
 8008236:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800823a:	f7ff fce7 	bl	8007c0c <RCCEx_PLL3_Config>
 800823e:	e7e0      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008240:	2601      	movs	r6, #1
 8008242:	4634      	mov	r4, r6
 8008244:	e7e6      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008246:	4626      	mov	r6, r4
 8008248:	e7e4      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
 8008250:	58024800 	.word	0x58024800
 8008254:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008258:	2101      	movs	r1, #1
 800825a:	1d28      	adds	r0, r5, #4
 800825c:	f7ff fc5e 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008260:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008262:	2c00      	cmp	r4, #0
 8008264:	f040 8115 	bne.w	8008492 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008268:	4ab8      	ldr	r2, [pc, #736]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800826a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800826e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008270:	f023 0307 	bic.w	r3, r3, #7
 8008274:	430b      	orrs	r3, r1
 8008276:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	0698      	lsls	r0, r3, #26
 800827c:	d510      	bpl.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800827e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8008282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008286:	f000 811f 	beq.w	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800828a:	f200 8104 	bhi.w	8008496 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 810a 	beq.w	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8008294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008298:	f000 8110 	beq.w	80084bc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800829c:	2601      	movs	r6, #1
 800829e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	0659      	lsls	r1, r3, #25
 80082a4:	d510      	bpl.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80082a6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80082aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ae:	f000 812c 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80082b2:	f200 8111 	bhi.w	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 8117 	beq.w	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80082bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c0:	f000 811d 	beq.w	80084fe <HAL_RCCEx_PeriphCLKConfig+0x802>
 80082c4:	2601      	movs	r6, #1
 80082c6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	061a      	lsls	r2, r3, #24
 80082cc:	d510      	bpl.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80082ce:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80082d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d6:	f000 813b 	beq.w	8008550 <HAL_RCCEx_PeriphCLKConfig+0x854>
 80082da:	f200 811e 	bhi.w	800851a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 8124 	beq.w	800852c <HAL_RCCEx_PeriphCLKConfig+0x830>
 80082e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e8:	f000 812a 	beq.w	8008540 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80082ec:	2601      	movs	r6, #1
 80082ee:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	071b      	lsls	r3, r3, #28
 80082f4:	d512      	bpl.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80082f6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80082f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fc:	d107      	bne.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082fe:	2102      	movs	r1, #2
 8008300:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008304:	f7ff fc82 	bl	8007c0c <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8008308:	2800      	cmp	r0, #0
 800830a:	bf18      	it	ne
 800830c:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800830e:	4a8f      	ldr	r2, [pc, #572]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008310:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8008312:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008314:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008318:	430b      	orrs	r3, r1
 800831a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	06df      	lsls	r7, r3, #27
 8008320:	d514      	bpl.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008322:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832a:	d107      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800832c:	2102      	movs	r1, #2
 800832e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008332:	f7ff fc6b 	bl	8007c0c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8008336:	2800      	cmp	r0, #0
 8008338:	bf18      	it	ne
 800833a:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800833c:	4a83      	ldr	r2, [pc, #524]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800833e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8008342:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008348:	430b      	orrs	r3, r1
 800834a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	0318      	lsls	r0, r3, #12
 8008350:	d51a      	bpl.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 8008352:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8008356:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800835a:	f000 8101 	beq.w	8008560 <HAL_RCCEx_PeriphCLKConfig+0x864>
 800835e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8008362:	d006      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008364:	2900      	cmp	r1, #0
 8008366:	f040 8101 	bne.w	800856c <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800836a:	1d28      	adds	r0, r5, #4
 800836c:	f7ff fbd6 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008370:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008372:	2c00      	cmp	r4, #0
 8008374:	f040 80fd 	bne.w	8008572 <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008378:	4a74      	ldr	r2, [pc, #464]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800837a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800837e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008380:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008384:	430b      	orrs	r3, r1
 8008386:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	0359      	lsls	r1, r3, #13
 800838c:	d51c      	bpl.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 800838e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8008392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008396:	f000 80ee 	beq.w	8008576 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800839a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800839e:	d008      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80083a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a4:	f040 80ee 	bne.w	8008584 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a8:	4a68      	ldr	r2, [pc, #416]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80083aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80083ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80083b2:	2c00      	cmp	r4, #0
 80083b4:	f040 80e9 	bne.w	800858a <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083b8:	4a64      	ldr	r2, [pc, #400]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80083ba:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80083be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80083c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80083c4:	430b      	orrs	r3, r1
 80083c6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	03da      	lsls	r2, r3, #15
 80083cc:	d509      	bpl.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 80083ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80dc 	beq.w	800858e <HAL_RCCEx_PeriphCLKConfig+0x892>
 80083d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083da:	f000 80e6 	beq.w	80085aa <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 80083de:	2601      	movs	r6, #1
 80083e0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083e2:	682b      	ldr	r3, [r5, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	d507      	bpl.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80083e8:	2102      	movs	r1, #2
 80083ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80083ee:	f7ff fc0d 	bl	8007c0c <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80083f2:	2800      	cmp	r0, #0
 80083f4:	bf18      	it	ne
 80083f6:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	039f      	lsls	r7, r3, #14
 80083fc:	d50a      	bpl.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 80083fe:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8008400:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008404:	f000 80e7 	beq.w	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8008408:	f200 80d7 	bhi.w	80085ba <HAL_RCCEx_PeriphCLKConfig+0x8be>
 800840c:	2900      	cmp	r1, #0
 800840e:	f000 80da 	beq.w	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8008412:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008414:	02d8      	lsls	r0, r3, #11
 8008416:	d506      	bpl.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008418:	494c      	ldr	r1, [pc, #304]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800841a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800841c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800841e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008422:	4302      	orrs	r2, r0
 8008424:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008426:	0299      	lsls	r1, r3, #10
 8008428:	d506      	bpl.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800842a:	4948      	ldr	r1, [pc, #288]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800842c:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800842e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008430:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008434:	4302      	orrs	r2, r0
 8008436:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008438:	005a      	lsls	r2, r3, #1
 800843a:	d509      	bpl.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800843c:	4a43      	ldr	r2, [pc, #268]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800843e:	6911      	ldr	r1, [r2, #16]
 8008440:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008444:	6111      	str	r1, [r2, #16]
 8008446:	6911      	ldr	r1, [r2, #16]
 8008448:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 800844c:	4301      	orrs	r1, r0
 800844e:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008450:	2b00      	cmp	r3, #0
 8008452:	da06      	bge.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008454:	493d      	ldr	r1, [pc, #244]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008456:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8008458:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800845a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800845e:	4302      	orrs	r2, r0
 8008460:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	d507      	bpl.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008466:	4a39      	ldr	r2, [pc, #228]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008468:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800846c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800846e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008472:	430b      	orrs	r3, r1
 8008474:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008476:	1e30      	subs	r0, r6, #0
 8008478:	bf18      	it	ne
 800847a:	2001      	movne	r0, #1
 800847c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008480:	2101      	movs	r1, #1
 8008482:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008486:	f7ff fbc1 	bl	8007c0c <RCCEx_PLL3_Config>
 800848a:	e6e9      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800848c:	2601      	movs	r6, #1
 800848e:	4634      	mov	r4, r6
 8008490:	e6f2      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008492:	4626      	mov	r6, r4
 8008494:	e6f0      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008496:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800849a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800849e:	d003      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80084a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084a4:	f47f aefa 	bne.w	800829c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 80084a8:	b9a4      	cbnz	r4, 80084d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084aa:	4a28      	ldr	r2, [pc, #160]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80084ac:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80084b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80084b2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80084b6:	430b      	orrs	r3, r1
 80084b8:	6553      	str	r3, [r2, #84]	; 0x54
 80084ba:	e6f1      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084bc:	2100      	movs	r1, #0
 80084be:	1d28      	adds	r0, r5, #4
 80084c0:	f7ff fb2c 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084c4:	4604      	mov	r4, r0
      break;
 80084c6:	e7ef      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084c8:	2102      	movs	r1, #2
 80084ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80084ce:	f7ff fb9d 	bl	8007c0c <RCCEx_PLL3_Config>
 80084d2:	e7f7      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80084d4:	4626      	mov	r6, r4
 80084d6:	e6e3      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80084d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084dc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80084e0:	d003      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80084e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084e6:	f47f aeed 	bne.w	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 80084ea:	b9a4      	cbnz	r4, 8008516 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084ec:	4a17      	ldr	r2, [pc, #92]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80084ee:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80084f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80084f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80084f8:	430b      	orrs	r3, r1
 80084fa:	6593      	str	r3, [r2, #88]	; 0x58
 80084fc:	e6e4      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084fe:	2100      	movs	r1, #0
 8008500:	1d28      	adds	r0, r5, #4
 8008502:	f7ff fb0b 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008506:	4604      	mov	r4, r0
      break;
 8008508:	e7ef      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800850a:	2102      	movs	r1, #2
 800850c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008510:	f7ff fb7c 	bl	8007c0c <RCCEx_PLL3_Config>
 8008514:	e7f7      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008516:	4626      	mov	r6, r4
 8008518:	e6d6      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800851a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800851e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008522:	d003      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8008524:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008528:	f47f aee0 	bne.w	80082ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 800852c:	b9b4      	cbnz	r4, 800855c <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800852e:	4a07      	ldr	r2, [pc, #28]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8008530:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8008534:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008536:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800853a:	430b      	orrs	r3, r1
 800853c:	6593      	str	r3, [r2, #88]	; 0x58
 800853e:	e6d7      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008540:	2100      	movs	r1, #0
 8008542:	1d28      	adds	r0, r5, #4
 8008544:	f7ff faea 	bl	8007b1c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008548:	4604      	mov	r4, r0
      break;
 800854a:	e7ef      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x830>
 800854c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008550:	2102      	movs	r1, #2
 8008552:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008556:	f7ff fb59 	bl	8007c0c <RCCEx_PLL3_Config>
 800855a:	e7f5      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800855c:	4626      	mov	r6, r4
 800855e:	e6c7      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008560:	2102      	movs	r1, #2
 8008562:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008566:	f7ff fb51 	bl	8007c0c <RCCEx_PLL3_Config>
 800856a:	e701      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 800856c:	2601      	movs	r6, #1
 800856e:	4634      	mov	r4, r6
 8008570:	e70a      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008572:	4626      	mov	r6, r4
 8008574:	e708      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008576:	2101      	movs	r1, #1
 8008578:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800857c:	f7ff fb46 	bl	8007c0c <RCCEx_PLL3_Config>
 8008580:	4604      	mov	r4, r0
      break;
 8008582:	e716      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 8008584:	2601      	movs	r6, #1
 8008586:	4634      	mov	r4, r6
 8008588:	e71e      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800858a:	4626      	mov	r6, r4
 800858c:	e71c      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800858e:	4a16      	ldr	r2, [pc, #88]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008590:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008596:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008598:	b96c      	cbnz	r4, 80085b6 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800859a:	4a13      	ldr	r2, [pc, #76]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800859c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800859e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80085a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085a4:	430b      	orrs	r3, r1
 80085a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085a8:	e71b      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085aa:	2102      	movs	r1, #2
 80085ac:	1d28      	adds	r0, r5, #4
 80085ae:	f7ff fab5 	bl	8007b1c <RCCEx_PLL2_Config>
 80085b2:	4604      	mov	r4, r0
      break;
 80085b4:	e7f0      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80085b6:	4626      	mov	r6, r4
 80085b8:	e713      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 80085ba:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80085be:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80085c2:	f47f af26 	bne.w	8008412 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 80085c6:	b964      	cbnz	r4, 80085e2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085c8:	4807      	ldr	r0, [pc, #28]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80085ca:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80085cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80085d0:	430a      	orrs	r2, r1
 80085d2:	6542      	str	r2, [r0, #84]	; 0x54
 80085d4:	e71e      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d6:	4804      	ldr	r0, [pc, #16]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80085d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80085da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80085de:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80085e0:	e7f1      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80085e2:	4626      	mov	r6, r4
 80085e4:	e716      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x718>
 80085e6:	bf00      	nop
 80085e8:	58024400 	.word	0x58024400

080085ec <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ec:	6a03      	ldr	r3, [r0, #32]
 80085ee:	f023 0301 	bic.w	r3, r3, #1
{
 80085f2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085fc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8008600:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008606:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800860a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800860c:	688d      	ldr	r5, [r1, #8]
 800860e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008610:	4d1b      	ldr	r5, [pc, #108]	; (8008680 <TIM_OC1_SetConfig+0x94>)
 8008612:	42a8      	cmp	r0, r5
 8008614:	d00f      	beq.n	8008636 <TIM_OC1_SetConfig+0x4a>
 8008616:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800861a:	42a8      	cmp	r0, r5
 800861c:	d00b      	beq.n	8008636 <TIM_OC1_SetConfig+0x4a>
 800861e:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8008622:	42a8      	cmp	r0, r5
 8008624:	d007      	beq.n	8008636 <TIM_OC1_SetConfig+0x4a>
 8008626:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800862a:	42a8      	cmp	r0, r5
 800862c:	d003      	beq.n	8008636 <TIM_OC1_SetConfig+0x4a>
 800862e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008632:	42a8      	cmp	r0, r5
 8008634:	d11e      	bne.n	8008674 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008636:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008638:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800863c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863e:	4d10      	ldr	r5, [pc, #64]	; (8008680 <TIM_OC1_SetConfig+0x94>)
 8008640:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008642:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008646:	d00f      	beq.n	8008668 <TIM_OC1_SetConfig+0x7c>
 8008648:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800864c:	42a8      	cmp	r0, r5
 800864e:	d00b      	beq.n	8008668 <TIM_OC1_SetConfig+0x7c>
 8008650:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8008654:	42a8      	cmp	r0, r5
 8008656:	d007      	beq.n	8008668 <TIM_OC1_SetConfig+0x7c>
 8008658:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800865c:	42a8      	cmp	r0, r5
 800865e:	d003      	beq.n	8008668 <TIM_OC1_SetConfig+0x7c>
 8008660:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008664:	42a8      	cmp	r0, r5
 8008666:	d105      	bne.n	8008674 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008668:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800866c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008670:	4334      	orrs	r4, r6
 8008672:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008674:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008676:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008678:	684a      	ldr	r2, [r1, #4]
 800867a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867c:	6203      	str	r3, [r0, #32]
}
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	40010000 	.word	0x40010000

08008684 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008684:	6a03      	ldr	r3, [r0, #32]
 8008686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800868a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800868c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008690:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008692:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8008698:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800869a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800869e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80086a2:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086a4:	688d      	ldr	r5, [r1, #8]
 80086a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086aa:	4d16      	ldr	r5, [pc, #88]	; (8008704 <TIM_OC3_SetConfig+0x80>)
 80086ac:	42a8      	cmp	r0, r5
 80086ae:	d003      	beq.n	80086b8 <TIM_OC3_SetConfig+0x34>
 80086b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086b4:	42a8      	cmp	r0, r5
 80086b6:	d10d      	bne.n	80086d4 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086b8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c2:	4d10      	ldr	r5, [pc, #64]	; (8008704 <TIM_OC3_SetConfig+0x80>)
 80086c4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80086c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ca:	d00e      	beq.n	80086ea <TIM_OC3_SetConfig+0x66>
 80086cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086d0:	42a8      	cmp	r0, r5
 80086d2:	d00a      	beq.n	80086ea <TIM_OC3_SetConfig+0x66>
 80086d4:	4d0c      	ldr	r5, [pc, #48]	; (8008708 <TIM_OC3_SetConfig+0x84>)
 80086d6:	42a8      	cmp	r0, r5
 80086d8:	d007      	beq.n	80086ea <TIM_OC3_SetConfig+0x66>
 80086da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086de:	42a8      	cmp	r0, r5
 80086e0:	d003      	beq.n	80086ea <TIM_OC3_SetConfig+0x66>
 80086e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80086e6:	42a8      	cmp	r0, r5
 80086e8:	d106      	bne.n	80086f8 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086ea:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ee:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80086f2:	4334      	orrs	r4, r6
 80086f4:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086fc:	684a      	ldr	r2, [r1, #4]
 80086fe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008700:	6203      	str	r3, [r0, #32]
}
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	40010000 	.word	0x40010000
 8008708:	40014000 	.word	0x40014000

0800870c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800870c:	6a03      	ldr	r3, [r0, #32]
 800870e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8008712:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008714:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008716:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800871a:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800871c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008720:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008722:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008726:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800872a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800872e:	688d      	ldr	r5, [r1, #8]
 8008730:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008734:	4d0e      	ldr	r5, [pc, #56]	; (8008770 <TIM_OC4_SetConfig+0x64>)
 8008736:	42a8      	cmp	r0, r5
 8008738:	d00f      	beq.n	800875a <TIM_OC4_SetConfig+0x4e>
 800873a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800873e:	42a8      	cmp	r0, r5
 8008740:	d00b      	beq.n	800875a <TIM_OC4_SetConfig+0x4e>
 8008742:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8008746:	42a8      	cmp	r0, r5
 8008748:	d007      	beq.n	800875a <TIM_OC4_SetConfig+0x4e>
 800874a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800874e:	42a8      	cmp	r0, r5
 8008750:	d003      	beq.n	800875a <TIM_OC4_SetConfig+0x4e>
 8008752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008756:	42a8      	cmp	r0, r5
 8008758:	d104      	bne.n	8008764 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800875a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800875e:	694d      	ldr	r5, [r1, #20]
 8008760:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008764:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008766:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008768:	684a      	ldr	r2, [r1, #4]
 800876a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876c:	6203      	str	r3, [r0, #32]
}
 800876e:	bd30      	pop	{r4, r5, pc}
 8008770:	40010000 	.word	0x40010000

08008774 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008774:	6a03      	ldr	r3, [r0, #32]
 8008776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800877a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800877c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008782:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008784:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8008788:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800878a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800878e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008792:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008794:	688d      	ldr	r5, [r1, #8]
 8008796:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879a:	4d0f      	ldr	r5, [pc, #60]	; (80087d8 <TIM_OC5_SetConfig+0x64>)
 800879c:	42a8      	cmp	r0, r5
 800879e:	d00f      	beq.n	80087c0 <TIM_OC5_SetConfig+0x4c>
 80087a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087a4:	42a8      	cmp	r0, r5
 80087a6:	d00b      	beq.n	80087c0 <TIM_OC5_SetConfig+0x4c>
 80087a8:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80087ac:	42a8      	cmp	r0, r5
 80087ae:	d007      	beq.n	80087c0 <TIM_OC5_SetConfig+0x4c>
 80087b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087b4:	42a8      	cmp	r0, r5
 80087b6:	d003      	beq.n	80087c0 <TIM_OC5_SetConfig+0x4c>
 80087b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087bc:	42a8      	cmp	r0, r5
 80087be:	d104      	bne.n	80087ca <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087c0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087c4:	694d      	ldr	r5, [r1, #20]
 80087c6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087cc:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087ce:	684a      	ldr	r2, [r1, #4]
 80087d0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d2:	6203      	str	r3, [r0, #32]
}
 80087d4:	bd30      	pop	{r4, r5, pc}
 80087d6:	bf00      	nop
 80087d8:	40010000 	.word	0x40010000

080087dc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087dc:	6a03      	ldr	r3, [r0, #32]
 80087de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80087e2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ea:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087f2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80087f6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087fe:	688d      	ldr	r5, [r1, #8]
 8008800:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008804:	4d0e      	ldr	r5, [pc, #56]	; (8008840 <TIM_OC6_SetConfig+0x64>)
 8008806:	42a8      	cmp	r0, r5
 8008808:	d00f      	beq.n	800882a <TIM_OC6_SetConfig+0x4e>
 800880a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800880e:	42a8      	cmp	r0, r5
 8008810:	d00b      	beq.n	800882a <TIM_OC6_SetConfig+0x4e>
 8008812:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8008816:	42a8      	cmp	r0, r5
 8008818:	d007      	beq.n	800882a <TIM_OC6_SetConfig+0x4e>
 800881a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800881e:	42a8      	cmp	r0, r5
 8008820:	d003      	beq.n	800882a <TIM_OC6_SetConfig+0x4e>
 8008822:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008826:	42a8      	cmp	r0, r5
 8008828:	d104      	bne.n	8008834 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800882a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800882e:	694d      	ldr	r5, [r1, #20]
 8008830:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008834:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008836:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008838:	684a      	ldr	r2, [r1, #4]
 800883a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883c:	6203      	str	r3, [r0, #32]
}
 800883e:	bd30      	pop	{r4, r5, pc}
 8008840:	40010000 	.word	0x40010000

08008844 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008844:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008848:	2b01      	cmp	r3, #1
 800884a:	d13b      	bne.n	80088c4 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800884c:	2302      	movs	r3, #2
 800884e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008852:	6803      	ldr	r3, [r0, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	f042 0201 	orr.w	r2, r2, #1
 800885a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800885c:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <HAL_TIM_Base_Start_IT+0x84>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d022      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008866:	d01f      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008868:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800886c:	4293      	cmp	r3, r2
 800886e:	d01b      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008874:	4293      	cmp	r3, r2
 8008876:	d017      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800887c:	4293      	cmp	r3, r2
 800887e:	d013      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008880:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008884:	4293      	cmp	r3, r2
 8008886:	d00f      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008888:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800888c:	4293      	cmp	r3, r2
 800888e:	d00b      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008890:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008894:	4293      	cmp	r3, r2
 8008896:	d007      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 8008898:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x64>
 80088a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d107      	bne.n	80088b8 <HAL_TIM_Base_Start_IT+0x74>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088a8:	6899      	ldr	r1, [r3, #8]
 80088aa:	4a08      	ldr	r2, [pc, #32]	; (80088cc <HAL_TIM_Base_Start_IT+0x88>)
 80088ac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ae:	2a06      	cmp	r2, #6
 80088b0:	d006      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x7c>
 80088b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80088b6:	d003      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0x7c>
    __HAL_TIM_ENABLE(htim);
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	f042 0201 	orr.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80088c0:	2000      	movs	r0, #0
}
 80088c2:	4770      	bx	lr
    return HAL_ERROR;
 80088c4:	2001      	movs	r0, #1
 80088c6:	4770      	bx	lr
 80088c8:	40010000 	.word	0x40010000
 80088cc:	00010007 	.word	0x00010007

080088d0 <HAL_TIM_OC_DelayElapsedCallback>:
 80088d0:	4770      	bx	lr

080088d2 <HAL_TIM_IC_CaptureCallback>:
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80088d4:	4770      	bx	lr

080088d6 <HAL_TIM_TriggerCallback>:
 80088d6:	4770      	bx	lr

080088d8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088d8:	6803      	ldr	r3, [r0, #0]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	0791      	lsls	r1, r2, #30
{
 80088de:	b510      	push	{r4, lr}
 80088e0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088e2:	d50f      	bpl.n	8008904 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	0792      	lsls	r2, r2, #30
 80088e8:	d50c      	bpl.n	8008904 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088ea:	f06f 0202 	mvn.w	r2, #2
 80088ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f0:	2201      	movs	r2, #1
 80088f2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	0799      	lsls	r1, r3, #30
 80088f8:	f000 8085 	beq.w	8008a06 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80088fc:	f7ff ffe9 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008900:	2300      	movs	r3, #0
 8008902:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	0752      	lsls	r2, r2, #29
 800890a:	d510      	bpl.n	800892e <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	0750      	lsls	r0, r2, #29
 8008910:	d50d      	bpl.n	800892e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008912:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8008916:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800891a:	2202      	movs	r2, #2
 800891c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008924:	d075      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008926:	f7ff ffd4 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892a:	2300      	movs	r3, #0
 800892c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	0711      	lsls	r1, r2, #28
 8008934:	d50f      	bpl.n	8008956 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	0712      	lsls	r2, r2, #28
 800893a:	d50c      	bpl.n	8008956 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800893c:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8008940:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008944:	2204      	movs	r2, #4
 8008946:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	079b      	lsls	r3, r3, #30
 800894c:	d067      	beq.n	8008a1e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800894e:	f7ff ffc0 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008952:	2300      	movs	r3, #0
 8008954:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	691a      	ldr	r2, [r3, #16]
 800895a:	06d0      	lsls	r0, r2, #27
 800895c:	d510      	bpl.n	8008980 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	06d1      	lsls	r1, r2, #27
 8008962:	d50d      	bpl.n	8008980 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008964:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8008968:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800896a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800896c:	2208      	movs	r2, #8
 800896e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008976:	d058      	beq.n	8008a2a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8008978:	f7ff ffab 	bl	80088d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897c:	2300      	movs	r3, #0
 800897e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	691a      	ldr	r2, [r3, #16]
 8008984:	07d2      	lsls	r2, r2, #31
 8008986:	d508      	bpl.n	800899a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	07d0      	lsls	r0, r2, #31
 800898c:	d505      	bpl.n	800899a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800898e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8008992:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008994:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008996:	f7f8 fa91 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	691a      	ldr	r2, [r3, #16]
 800899e:	0611      	lsls	r1, r2, #24
 80089a0:	d508      	bpl.n	80089b4 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	0612      	lsls	r2, r2, #24
 80089a6:	d505      	bpl.n	80089b4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80089ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80089b0:	f000 fb29 	bl	8009006 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	05d0      	lsls	r0, r2, #23
 80089ba:	d508      	bpl.n	80089ce <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	0611      	lsls	r1, r2, #24
 80089c0:	d505      	bpl.n	80089ce <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80089c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80089ca:	f000 fb1d 	bl	8009008 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	0652      	lsls	r2, r2, #25
 80089d4:	d508      	bpl.n	80089e8 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	0650      	lsls	r0, r2, #25
 80089da:	d505      	bpl.n	80089e8 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80089e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80089e4:	f7ff ff77 	bl	80088d6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	0691      	lsls	r1, r2, #26
 80089ee:	d522      	bpl.n	8008a36 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	0692      	lsls	r2, r2, #26
 80089f4:	d51f      	bpl.n	8008a36 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089f6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80089fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089fc:	611a      	str	r2, [r3, #16]
}
 80089fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008a02:	f000 baff 	b.w	8009004 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a06:	f7ff ff63 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7ff ff62 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a10:	e776      	b.n	8008900 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a12:	f7ff ff5d 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7ff ff5c 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a1c:	e785      	b.n	800892a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1e:	f7ff ff57 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff ff56 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a28:	e793      	b.n	8008952 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a2a:	f7ff ff51 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7ff ff50 	bl	80088d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008a34:	e7a2      	b.n	800897c <HAL_TIM_IRQHandler+0xa4>
}
 8008a36:	bd10      	pop	{r4, pc}

08008a38 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a38:	4a34      	ldr	r2, [pc, #208]	; (8008b0c <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8008a3a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a3c:	4290      	cmp	r0, r2
 8008a3e:	d012      	beq.n	8008a66 <TIM_Base_SetConfig+0x2e>
 8008a40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a44:	d00f      	beq.n	8008a66 <TIM_Base_SetConfig+0x2e>
 8008a46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008a4a:	4290      	cmp	r0, r2
 8008a4c:	d00b      	beq.n	8008a66 <TIM_Base_SetConfig+0x2e>
 8008a4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a52:	4290      	cmp	r0, r2
 8008a54:	d007      	beq.n	8008a66 <TIM_Base_SetConfig+0x2e>
 8008a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a5a:	4290      	cmp	r0, r2
 8008a5c:	d003      	beq.n	8008a66 <TIM_Base_SetConfig+0x2e>
 8008a5e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008a62:	4290      	cmp	r0, r2
 8008a64:	d119      	bne.n	8008a9a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8008a66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a6c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a6e:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <TIM_Base_SetConfig+0xd4>)
 8008a70:	4290      	cmp	r0, r2
 8008a72:	d025      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008a74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a78:	d022      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008a7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008a7e:	4290      	cmp	r0, r2
 8008a80:	d01e      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008a82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a86:	4290      	cmp	r0, r2
 8008a88:	d01a      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a8e:	4290      	cmp	r0, r2
 8008a90:	d016      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008a92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008a96:	4290      	cmp	r0, r2
 8008a98:	d012      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008a9a:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <TIM_Base_SetConfig+0xd8>)
 8008a9c:	4290      	cmp	r0, r2
 8008a9e:	d00f      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d00b      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008aa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008aac:	4290      	cmp	r0, r2
 8008aae:	d007      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008ab0:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8008ab4:	4290      	cmp	r0, r2
 8008ab6:	d003      	beq.n	8008ac0 <TIM_Base_SetConfig+0x88>
 8008ab8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008abc:	4290      	cmp	r0, r2
 8008abe:	d103      	bne.n	8008ac8 <TIM_Base_SetConfig+0x90>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ac4:	68ca      	ldr	r2, [r1, #12]
 8008ac6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ac8:	694a      	ldr	r2, [r1, #20]
 8008aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ace:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ad0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ad2:	688b      	ldr	r3, [r1, #8]
 8008ad4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008ad6:	680b      	ldr	r3, [r1, #0]
 8008ad8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ada:	4b0c      	ldr	r3, [pc, #48]	; (8008b0c <TIM_Base_SetConfig+0xd4>)
 8008adc:	4298      	cmp	r0, r3
 8008ade:	d00f      	beq.n	8008b00 <TIM_Base_SetConfig+0xc8>
 8008ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ae4:	4298      	cmp	r0, r3
 8008ae6:	d00b      	beq.n	8008b00 <TIM_Base_SetConfig+0xc8>
 8008ae8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8008aec:	4298      	cmp	r0, r3
 8008aee:	d007      	beq.n	8008b00 <TIM_Base_SetConfig+0xc8>
 8008af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af4:	4298      	cmp	r0, r3
 8008af6:	d003      	beq.n	8008b00 <TIM_Base_SetConfig+0xc8>
 8008af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008afc:	4298      	cmp	r0, r3
 8008afe:	d101      	bne.n	8008b04 <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8008b00:	690b      	ldr	r3, [r1, #16]
 8008b02:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008b04:	2301      	movs	r3, #1
 8008b06:	6143      	str	r3, [r0, #20]
}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40014000 	.word	0x40014000

08008b14 <HAL_TIM_Base_Init>:
{
 8008b14:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008b16:	4604      	mov	r4, r0
 8008b18:	b350      	cbz	r0, 8008b70 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b22:	b91b      	cbnz	r3, 8008b2c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008b24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008b28:	f7f8 fd9c 	bl	8001664 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008b2c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b2e:	6820      	ldr	r0, [r4, #0]
 8008b30:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8008b32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b36:	f7ff ff7f 	bl	8008a38 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b3a:	2301      	movs	r3, #1
  return HAL_OK;
 8008b3c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b3e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008b46:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008b4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008b4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008b52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b62:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008b66:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008b6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008b6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b70:	2001      	movs	r0, #1
 8008b72:	e7fc      	b.n	8008b6e <HAL_TIM_Base_Init+0x5a>

08008b74 <HAL_TIM_PWM_Init>:
{
 8008b74:	b510      	push	{r4, lr}
  if (htim == NULL)
 8008b76:	4604      	mov	r4, r0
 8008b78:	b350      	cbz	r0, 8008bd0 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b82:	b91b      	cbnz	r3, 8008b8c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008b84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008b88:	f7f8 fd2e 	bl	80015e8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8008b92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b96:	f7ff ff4f 	bl	8008a38 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b9a:	2301      	movs	r3, #1
  return HAL_OK;
 8008b9c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ba2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008ba6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008baa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008bae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008bb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bc2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008bc6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008bca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008bce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	e7fc      	b.n	8008bce <HAL_TIM_PWM_Init+0x5a>

08008bd4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bd4:	6a03      	ldr	r3, [r0, #32]
 8008bd6:	f023 0310 	bic.w	r3, r3, #16
{
 8008bda:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bdc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008bde:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008be0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008be2:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8008be4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008bee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bf6:	688d      	ldr	r5, [r1, #8]
 8008bf8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bfc:	4d16      	ldr	r5, [pc, #88]	; (8008c58 <TIM_OC2_SetConfig+0x84>)
 8008bfe:	42a8      	cmp	r0, r5
 8008c00:	d003      	beq.n	8008c0a <TIM_OC2_SetConfig+0x36>
 8008c02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c06:	42a8      	cmp	r0, r5
 8008c08:	d10d      	bne.n	8008c26 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c0a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c14:	4d10      	ldr	r5, [pc, #64]	; (8008c58 <TIM_OC2_SetConfig+0x84>)
 8008c16:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1c:	d00e      	beq.n	8008c3c <TIM_OC2_SetConfig+0x68>
 8008c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c22:	42a8      	cmp	r0, r5
 8008c24:	d00a      	beq.n	8008c3c <TIM_OC2_SetConfig+0x68>
 8008c26:	4d0d      	ldr	r5, [pc, #52]	; (8008c5c <TIM_OC2_SetConfig+0x88>)
 8008c28:	42a8      	cmp	r0, r5
 8008c2a:	d007      	beq.n	8008c3c <TIM_OC2_SetConfig+0x68>
 8008c2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c30:	42a8      	cmp	r0, r5
 8008c32:	d003      	beq.n	8008c3c <TIM_OC2_SetConfig+0x68>
 8008c34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c38:	42a8      	cmp	r0, r5
 8008c3a:	d106      	bne.n	8008c4a <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c3c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c40:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8008c44:	4334      	orrs	r4, r6
 8008c46:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8008c4a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008c4c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008c4e:	684a      	ldr	r2, [r1, #4]
 8008c50:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008c52:	6203      	str	r3, [r0, #32]
}
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	bf00      	nop
 8008c58:	40010000 	.word	0x40010000
 8008c5c:	40014000 	.word	0x40014000

08008c60 <HAL_TIM_PWM_ConfigChannel>:
{
 8008c60:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8008c62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8008c66:	4605      	mov	r5, r0
 8008c68:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d07a      	beq.n	8008d64 <HAL_TIM_PWM_ConfigChannel+0x104>
 8008c6e:	2201      	movs	r2, #1
  switch (Channel)
 8008c70:	2c0c      	cmp	r4, #12
  __HAL_LOCK(htim);
 8008c72:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 8008c76:	d053      	beq.n	8008d20 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8008c78:	d809      	bhi.n	8008c8e <HAL_TIM_PWM_ConfigChannel+0x2e>
 8008c7a:	2c04      	cmp	r4, #4
 8008c7c:	d02e      	beq.n	8008cdc <HAL_TIM_PWM_ConfigChannel+0x7c>
 8008c7e:	2c08      	cmp	r4, #8
 8008c80:	d03d      	beq.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x9e>
 8008c82:	b1cc      	cbz	r4, 8008cb8 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_UNLOCK(htim);
 8008c84:	2300      	movs	r3, #0
 8008c86:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8008c8e:	2c10      	cmp	r4, #16
 8008c90:	d057      	beq.n	8008d42 <HAL_TIM_PWM_ConfigChannel+0xe2>
 8008c92:	2c14      	cmp	r4, #20
 8008c94:	d1f6      	bne.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c96:	6800      	ldr	r0, [r0, #0]
 8008c98:	f7ff fda0 	bl	80087dc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c9c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c9e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008cb6:	e053      	b.n	8008d60 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cb8:	6800      	ldr	r0, [r0, #0]
 8008cba:	f7ff fc97 	bl	80085ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cbe:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cc0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	f042 0208 	orr.w	r2, r2, #8
 8008cc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cca:	699a      	ldr	r2, [r3, #24]
 8008ccc:	f022 0204 	bic.w	r2, r2, #4
 8008cd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cd6:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd8:	2200      	movs	r2, #0
      break;
 8008cda:	e7d3      	b.n	8008c84 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cdc:	6800      	ldr	r0, [r0, #0]
 8008cde:	f7ff ff79 	bl	8008bd4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ce2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ce4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ce6:	699a      	ldr	r2, [r3, #24]
 8008ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cee:	699a      	ldr	r2, [r3, #24]
 8008cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cf6:	699a      	ldr	r2, [r3, #24]
 8008cf8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008cfc:	e7eb      	b.n	8008cd6 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cfe:	6800      	ldr	r0, [r0, #0]
 8008d00:	f7ff fcc0 	bl	8008684 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d04:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d06:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d08:	69da      	ldr	r2, [r3, #28]
 8008d0a:	f042 0208 	orr.w	r2, r2, #8
 8008d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d10:	69da      	ldr	r2, [r3, #28]
 8008d12:	f022 0204 	bic.w	r2, r2, #4
 8008d16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d18:	69da      	ldr	r2, [r3, #28]
 8008d1a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d1c:	61da      	str	r2, [r3, #28]
      break;
 8008d1e:	e7db      	b.n	8008cd8 <HAL_TIM_PWM_ConfigChannel+0x78>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d20:	6800      	ldr	r0, [r0, #0]
 8008d22:	f7ff fcf3 	bl	800870c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d26:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d28:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d2a:	69da      	ldr	r2, [r3, #28]
 8008d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d32:	69da      	ldr	r2, [r3, #28]
 8008d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d3a:	69da      	ldr	r2, [r3, #28]
 8008d3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008d40:	e7ec      	b.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d42:	6800      	ldr	r0, [r0, #0]
 8008d44:	f7ff fd16 	bl	8008774 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d48:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d4a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d4e:	f042 0208 	orr.w	r2, r2, #8
 8008d52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d56:	f022 0204 	bic.w	r2, r2, #4
 8008d5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d5e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d60:	655a      	str	r2, [r3, #84]	; 0x54
 8008d62:	e7b9      	b.n	8008cd8 <HAL_TIM_PWM_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 8008d64:	2202      	movs	r2, #2
 8008d66:	e790      	b.n	8008c8a <HAL_TIM_PWM_ConfigChannel+0x2a>

08008d68 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d68:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d6c:	6a03      	ldr	r3, [r0, #32]
{
 8008d6e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d70:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d72:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d74:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8008d76:	ea23 0304 	bic.w	r3, r3, r4
 8008d7a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d7c:	6a03      	ldr	r3, [r0, #32]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	6202      	str	r2, [r0, #32]
}
 8008d82:	bd10      	pop	{r4, pc}

08008d84 <HAL_TIM_OC_Start>:
{
 8008d84:	b510      	push	{r4, lr}
 8008d86:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d88:	b929      	cbnz	r1, 8008d96 <HAL_TIM_OC_Start+0x12>
 8008d8a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d031      	beq.n	8008df6 <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8008d92:	2001      	movs	r0, #1
}
 8008d94:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d96:	2904      	cmp	r1, #4
 8008d98:	d107      	bne.n	8008daa <HAL_TIM_OC_Start+0x26>
 8008d9a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d1f7      	bne.n	8008d92 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da2:	2302      	movs	r3, #2
 8008da4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008da8:	e028      	b.n	8008dfc <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008daa:	2908      	cmp	r1, #8
 8008dac:	d107      	bne.n	8008dbe <HAL_TIM_OC_Start+0x3a>
 8008dae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d1ed      	bne.n	8008d92 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db6:	2302      	movs	r3, #2
 8008db8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008dbc:	e01e      	b.n	8008dfc <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dbe:	290c      	cmp	r1, #12
 8008dc0:	d107      	bne.n	8008dd2 <HAL_TIM_OC_Start+0x4e>
 8008dc2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d1e3      	bne.n	8008d92 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dca:	2302      	movs	r3, #2
 8008dcc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008dd0:	e014      	b.n	8008dfc <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dd2:	2910      	cmp	r1, #16
 8008dd4:	d107      	bne.n	8008de6 <HAL_TIM_OC_Start+0x62>
 8008dd6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d1d9      	bne.n	8008d92 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dde:	2302      	movs	r3, #2
 8008de0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008de4:	e00a      	b.n	8008dfc <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008de6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d1d1      	bne.n	8008d92 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dee:	2302      	movs	r3, #2
 8008df0:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008df4:	e002      	b.n	8008dfc <HAL_TIM_OC_Start+0x78>
 8008df6:	2302      	movs	r3, #2
 8008df8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	6820      	ldr	r0, [r4, #0]
 8008e00:	f7ff ffb2 	bl	8008d68 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	4a26      	ldr	r2, [pc, #152]	; (8008ea0 <HAL_TIM_OC_Start+0x11c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d019      	beq.n	8008e40 <HAL_TIM_OC_Start+0xbc>
 8008e0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d015      	beq.n	8008e40 <HAL_TIM_OC_Start+0xbc>
 8008e14:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d011      	beq.n	8008e40 <HAL_TIM_OC_Start+0xbc>
 8008e1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00d      	beq.n	8008e40 <HAL_TIM_OC_Start+0xbc>
 8008e24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_TIM_OC_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e30:	d10e      	bne.n	8008e50 <HAL_TIM_OC_Start+0xcc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e32:	6899      	ldr	r1, [r3, #8]
 8008e34:	4a1b      	ldr	r2, [pc, #108]	; (8008ea4 <HAL_TIM_OC_Start+0x120>)
 8008e36:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e38:	2a06      	cmp	r2, #6
 8008e3a:	d12d      	bne.n	8008e98 <HAL_TIM_OC_Start+0x114>
  return HAL_OK;
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e7a9      	b.n	8008d94 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8008e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e46:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e48:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <HAL_TIM_OC_Start+0x11c>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d1ee      	bne.n	8008e2c <HAL_TIM_OC_Start+0xa8>
 8008e4e:	e7f0      	b.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e50:	4a15      	ldr	r2, [pc, #84]	; (8008ea8 <HAL_TIM_OC_Start+0x124>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d0ed      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d0e9      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d0e5      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d0e1      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e6e:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d0dd      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e76:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d0d9      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e7e:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d0d5      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
 8008e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d0d1      	beq.n	8008e32 <HAL_TIM_OC_Start+0xae>
    __HAL_TIM_ENABLE(htim);
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e7d1      	b.n	8008e3c <HAL_TIM_OC_Start+0xb8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008e9c:	d1f7      	bne.n	8008e8e <HAL_TIM_OC_Start+0x10a>
 8008e9e:	e7cd      	b.n	8008e3c <HAL_TIM_OC_Start+0xb8>
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	00010007 	.word	0x00010007
 8008ea8:	40000400 	.word	0x40000400

08008eac <HAL_TIM_PWM_Start>:
 8008eac:	f7ff bf6a 	b.w	8008d84 <HAL_TIM_OC_Start>

08008eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008eb0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eb2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	f04f 0302 	mov.w	r3, #2
 8008ebc:	d045      	beq.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ec2:	4d23      	ldr	r5, [pc, #140]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 8008ec4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ec6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8008ec8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008eca:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ecc:	d003      	beq.n	8008ed6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8008ece:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ed2:	42ab      	cmp	r3, r5
 8008ed4:	d103      	bne.n	8008ede <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ed6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008eda:	684d      	ldr	r5, [r1, #4]
 8008edc:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ede:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ee0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ee4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ee6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee8:	4a19      	ldr	r2, [pc, #100]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d022      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef2:	d01f      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008ef4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d01b      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d017      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f0c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00f      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f14:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00b      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f1c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d007      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f24:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d104      	bne.n	8008f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f34:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f36:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f3a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f44:	2300      	movs	r3, #0
 8008f46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8008f4a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8008f4c:	bd30      	pop	{r4, r5, pc}
 8008f4e:	bf00      	nop
 8008f50:	40010000 	.word	0x40010000

08008f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f54:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f56:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d04c      	beq.n	8008ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f5e:	68cb      	ldr	r3, [r1, #12]
 8008f60:	688a      	ldr	r2, [r1, #8]
 8008f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f66:	4c25      	ldr	r4, [pc, #148]	; (8008ffc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f6a:	684a      	ldr	r2, [r1, #4]
 8008f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f72:	680a      	ldr	r2, [r1, #0]
 8008f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f7a:	690a      	ldr	r2, [r1, #16]
 8008f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f82:	694a      	ldr	r2, [r1, #20]
 8008f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f8a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f92:	698a      	ldr	r2, [r1, #24]
 8008f94:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8008f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f9c:	6802      	ldr	r2, [r0, #0]
 8008f9e:	42a2      	cmp	r2, r4
 8008fa0:	d002      	beq.n	8008fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8008fa2:	4d17      	ldr	r5, [pc, #92]	; (8009000 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008fa4:	42aa      	cmp	r2, r5
 8008fa6:	d121      	bne.n	8008fec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fac:	69cd      	ldr	r5, [r1, #28]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fae:	42a2      	cmp	r2, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fb0:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fb4:	d002      	beq.n	8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8008fb6:	4c12      	ldr	r4, [pc, #72]	; (8009000 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008fb8:	42a2      	cmp	r2, r4
 8008fba:	d117      	bne.n	8008fec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fbc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008fbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fc2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fc6:	6a0c      	ldr	r4, [r1, #32]
 8008fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fcc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fce:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008fd0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008fd4:	4323      	orrs	r3, r4
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008fd6:	4c09      	ldr	r4, [pc, #36]	; (8008ffc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008fd8:	42a2      	cmp	r2, r4
 8008fda:	d003      	beq.n	8008fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x90>
 8008fdc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008fe0:	42a2      	cmp	r2, r4
 8008fe2:	d103      	bne.n	8008fec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fe8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008fea:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fec:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008ff4:	4618      	mov	r0, r3
}
 8008ff6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8008ff8:	2002      	movs	r0, #2
 8008ffa:	e7fc      	b.n	8008ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xa2>
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40010400 	.word	0x40010400

08009004 <HAL_TIMEx_CommutCallback>:
 8009004:	4770      	bx	lr

08009006 <HAL_TIMEx_BreakCallback>:
 8009006:	4770      	bx	lr

08009008 <HAL_TIMEx_Break2Callback>:
 8009008:	4770      	bx	lr
	...

0800900c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800900c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800900e:	4b05      	ldr	r3, [pc, #20]	; (8009024 <SysTick_Handler+0x18>)
 8009010:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009012:	f001 fe43 	bl	800ac9c <xTaskGetSchedulerState>
 8009016:	2801      	cmp	r0, #1
 8009018:	d003      	beq.n	8009022 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800901a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800901e:	f000 bbd9 	b.w	80097d4 <xPortSysTickHandler>
}
 8009022:	bd08      	pop	{r3, pc}
 8009024:	e000e010 	.word	0xe000e010

08009028 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009028:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800902c:	b92b      	cbnz	r3, 800903a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800902e:	4b06      	ldr	r3, [pc, #24]	; (8009048 <osKernelInitialize+0x20>)
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	b928      	cbnz	r0, 8009040 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009034:	2201      	movs	r2, #1
 8009036:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009038:	4770      	bx	lr
    stat = osErrorISR;
 800903a:	f06f 0005 	mvn.w	r0, #5
 800903e:	4770      	bx	lr
    } else {
      stat = osError;
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	240024fc 	.word	0x240024fc

0800904c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800904c:	b510      	push	{r4, lr}
 800904e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009052:	b95c      	cbnz	r4, 800906c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009054:	4b08      	ldr	r3, [pc, #32]	; (8009078 <osKernelStart+0x2c>)
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	2a01      	cmp	r2, #1
 800905a:	d10a      	bne.n	8009072 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800905c:	4a07      	ldr	r2, [pc, #28]	; (800907c <osKernelStart+0x30>)
 800905e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009060:	2202      	movs	r2, #2
 8009062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009064:	f001 fcc0 	bl	800a9e8 <vTaskStartScheduler>
      stat = osOK;
 8009068:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800906a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800906c:	f06f 0005 	mvn.w	r0, #5
 8009070:	e7fb      	b.n	800906a <osKernelStart+0x1e>
      stat = osError;
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8009076:	e7f8      	b.n	800906a <osKernelStart+0x1e>
 8009078:	240024fc 	.word	0x240024fc
 800907c:	e000ed00 	.word	0xe000ed00

08009080 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009082:	4614      	mov	r4, r2
 8009084:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009086:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009088:	460b      	mov	r3, r1
  hTask = NULL;
 800908a:	9205      	str	r2, [sp, #20]
 800908c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009090:	b9d2      	cbnz	r2, 80090c8 <osThreadNew+0x48>
 8009092:	b1c8      	cbz	r0, 80090c8 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009094:	2c00      	cmp	r4, #0
 8009096:	d02f      	beq.n	80090f8 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009098:	69a5      	ldr	r5, [r4, #24]
 800909a:	2d00      	cmp	r5, #0
 800909c:	bf08      	it	eq
 800909e:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090a0:	1e69      	subs	r1, r5, #1
 80090a2:	46ac      	mov	ip, r5
 80090a4:	2937      	cmp	r1, #55	; 0x37
 80090a6:	d82b      	bhi.n	8009100 <osThreadNew+0x80>
 80090a8:	6861      	ldr	r1, [r4, #4]
 80090aa:	07c9      	lsls	r1, r1, #31
 80090ac:	d428      	bmi.n	8009100 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80090ae:	6966      	ldr	r6, [r4, #20]
 80090b0:	b16e      	cbz	r6, 80090ce <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090b2:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80090b4:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090b6:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80090ba:	b157      	cbz	r7, 80090d2 <osThreadNew+0x52>
 80090bc:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80090c0:	d902      	bls.n	80090c8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090c2:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090c4:	b104      	cbz	r4, 80090c8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090c6:	b9ee      	cbnz	r6, 8009104 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090c8:	9805      	ldr	r0, [sp, #20]
}
 80090ca:	b007      	add	sp, #28
 80090cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80090ce:	2280      	movs	r2, #128	; 0x80
 80090d0:	e7f0      	b.n	80090b4 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090d2:	f1be 0f00 	cmp.w	lr, #0
 80090d6:	d1f7      	bne.n	80090c8 <osThreadNew+0x48>
      if (mem == 0) {
 80090d8:	6924      	ldr	r4, [r4, #16]
 80090da:	2c00      	cmp	r4, #0
 80090dc:	d1f4      	bne.n	80090c8 <osThreadNew+0x48>
 80090de:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090e0:	a905      	add	r1, sp, #20
 80090e2:	b292      	uxth	r2, r2
 80090e4:	e9cd c100 	strd	ip, r1, [sp]
 80090e8:	4621      	mov	r1, r4
 80090ea:	f001 faf7 	bl	800a6dc <xTaskCreate>
 80090ee:	2801      	cmp	r0, #1
            hTask = NULL;
 80090f0:	bf1c      	itt	ne
 80090f2:	2300      	movne	r3, #0
 80090f4:	9305      	strne	r3, [sp, #20]
 80090f6:	e7e7      	b.n	80090c8 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 80090f8:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80090fc:	2280      	movs	r2, #128	; 0x80
 80090fe:	e7ef      	b.n	80090e0 <osThreadNew+0x60>
        return (NULL);
 8009100:	4610      	mov	r0, r2
 8009102:	e7e2      	b.n	80090ca <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009104:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8009108:	9500      	str	r5, [sp, #0]
 800910a:	f001 faaf 	bl	800a66c <xTaskCreateStatic>
 800910e:	9005      	str	r0, [sp, #20]
 8009110:	e7da      	b.n	80090c8 <osThreadNew+0x48>

08009112 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009112:	b510      	push	{r4, lr}
 8009114:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009118:	b924      	cbnz	r4, 8009124 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800911a:	b110      	cbz	r0, 8009122 <osDelay+0x10>
      vTaskDelay(ticks);
 800911c:	f001 fc24 	bl	800a968 <vTaskDelay>
    stat = osOK;
 8009120:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 8009122:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009124:	f06f 0005 	mvn.w	r0, #5
 8009128:	e7fb      	b.n	8009122 <osDelay+0x10>

0800912a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800912a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800912c:	4604      	mov	r4, r0
 800912e:	460e      	mov	r6, r1
 8009130:	4615      	mov	r5, r2
 8009132:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009136:	b11a      	cbz	r2, 8009140 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8009138:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800913a:	4620      	mov	r0, r4
 800913c:	b003      	add	sp, #12
 800913e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009140:	2800      	cmp	r0, #0
 8009142:	d0f9      	beq.n	8009138 <osSemaphoreNew+0xe>
 8009144:	4288      	cmp	r0, r1
 8009146:	d3f7      	bcc.n	8009138 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8009148:	b1e5      	cbz	r5, 8009184 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800914a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800914e:	b1bb      	cbz	r3, 8009180 <osSemaphoreNew+0x56>
 8009150:	2f4f      	cmp	r7, #79	; 0x4f
 8009152:	d9f1      	bls.n	8009138 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8009154:	2801      	cmp	r0, #1
 8009156:	d12a      	bne.n	80091ae <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009158:	2103      	movs	r1, #3
 800915a:	9100      	str	r1, [sp, #0]
 800915c:	4611      	mov	r1, r2
 800915e:	f000 fce7 	bl	8009b30 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8009162:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009164:	2800      	cmp	r0, #0
 8009166:	d0e7      	beq.n	8009138 <osSemaphoreNew+0xe>
 8009168:	b1de      	cbz	r6, 80091a2 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800916a:	2300      	movs	r3, #0
 800916c:	461a      	mov	r2, r3
 800916e:	4619      	mov	r1, r3
 8009170:	f000 fd94 	bl	8009c9c <xQueueGenericSend>
 8009174:	2801      	cmp	r0, #1
 8009176:	d014      	beq.n	80091a2 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8009178:	4620      	mov	r0, r4
 800917a:	f001 f8d5 	bl	800a328 <vQueueDelete>
 800917e:	e7db      	b.n	8009138 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009180:	2f00      	cmp	r7, #0
 8009182:	d1d9      	bne.n	8009138 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8009184:	2c01      	cmp	r4, #1
 8009186:	d105      	bne.n	8009194 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8009188:	2203      	movs	r2, #3
 800918a:	2100      	movs	r1, #0
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fd1d 	bl	8009bcc <xQueueGenericCreate>
 8009192:	e7e6      	b.n	8009162 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009194:	4620      	mov	r0, r4
 8009196:	4631      	mov	r1, r6
 8009198:	f000 fd61 	bl	8009c5e <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800919c:	4604      	mov	r4, r0
 800919e:	2800      	cmp	r0, #0
 80091a0:	d0ca      	beq.n	8009138 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 80091a2:	b955      	cbnz	r5, 80091ba <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 80091a4:	4629      	mov	r1, r5
 80091a6:	4620      	mov	r0, r4
 80091a8:	f001 f894 	bl	800a2d4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80091ac:	e7c5      	b.n	800913a <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80091ae:	461a      	mov	r2, r3
 80091b0:	f000 fd33 	bl	8009c1a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80091b4:	4604      	mov	r4, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0be      	beq.n	8009138 <osSemaphoreNew+0xe>
          name = attr->name;
 80091ba:	682d      	ldr	r5, [r5, #0]
 80091bc:	e7f2      	b.n	80091a4 <osSemaphoreNew+0x7a>
	...

080091c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80091c0:	b513      	push	{r0, r1, r4, lr}
 80091c2:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80091c4:	b1f8      	cbz	r0, 8009206 <osSemaphoreAcquire+0x46>
 80091c6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80091ca:	b1a3      	cbz	r3, 80091f6 <osSemaphoreAcquire+0x36>
    if (timeout != 0U) {
 80091cc:	b9d9      	cbnz	r1, 8009206 <osSemaphoreAcquire+0x46>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80091ce:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80091d0:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80091d2:	f001 f82f 	bl	800a234 <xQueueReceiveFromISR>
 80091d6:	2801      	cmp	r0, #1
 80091d8:	d112      	bne.n	8009200 <osSemaphoreAcquire+0x40>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80091da:	9b01      	ldr	r3, [sp, #4]
 80091dc:	b913      	cbnz	r3, 80091e4 <osSemaphoreAcquire+0x24>
  stat = osOK;
 80091de:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80091e0:	b002      	add	sp, #8
 80091e2:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80091e4:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <osSemaphoreAcquire+0x54>)
 80091e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	e7f3      	b.n	80091de <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80091f6:	f000 ff59 	bl	800a0ac <xQueueSemaphoreTake>
 80091fa:	2801      	cmp	r0, #1
 80091fc:	d0ef      	beq.n	80091de <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 80091fe:	b92c      	cbnz	r4, 800920c <osSemaphoreAcquire+0x4c>
        stat = osErrorResource;
 8009200:	f06f 0002 	mvn.w	r0, #2
 8009204:	e7ec      	b.n	80091e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009206:	f06f 0003 	mvn.w	r0, #3
 800920a:	e7e9      	b.n	80091e0 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800920c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009210:	e7e6      	b.n	80091e0 <osSemaphoreAcquire+0x20>
 8009212:	bf00      	nop
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009218:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800921a:	b300      	cbz	r0, 800925e <osSemaphoreRelease+0x46>
 800921c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009220:	b1a3      	cbz	r3, 800924c <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 8009222:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009224:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8009226:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009228:	f000 fe4c 	bl	8009ec4 <xQueueGiveFromISR>
 800922c:	2801      	cmp	r0, #1
 800922e:	d113      	bne.n	8009258 <osSemaphoreRelease+0x40>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	b913      	cbnz	r3, 800923a <osSemaphoreRelease+0x22>
  stat = osOK;
 8009234:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8009236:	b002      	add	sp, #8
 8009238:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <osSemaphoreRelease+0x4c>)
 800923c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	e7f3      	b.n	8009234 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800924c:	461a      	mov	r2, r3
 800924e:	4619      	mov	r1, r3
 8009250:	f000 fd24 	bl	8009c9c <xQueueGenericSend>
 8009254:	2801      	cmp	r0, #1
 8009256:	d0ed      	beq.n	8009234 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8009258:	f06f 0002 	mvn.w	r0, #2
 800925c:	e7eb      	b.n	8009236 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800925e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8009262:	e7e8      	b.n	8009236 <osSemaphoreRelease+0x1e>
 8009264:	e000ed04 	.word	0xe000ed04

08009268 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800926a:	4606      	mov	r6, r0
 800926c:	460d      	mov	r5, r1
 800926e:	4614      	mov	r4, r2
 8009270:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009274:	b11f      	cbz	r7, 800927e <osMessageQueueNew+0x16>
  hQueue = NULL;
 8009276:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009278:	4628      	mov	r0, r5
 800927a:	b003      	add	sp, #12
 800927c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800927e:	2800      	cmp	r0, #0
 8009280:	d0f9      	beq.n	8009276 <osMessageQueueNew+0xe>
 8009282:	2900      	cmp	r1, #0
 8009284:	d0f7      	beq.n	8009276 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8009286:	b1da      	cbz	r2, 80092c0 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009288:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800928c:	b183      	cbz	r3, 80092b0 <osMessageQueueNew+0x48>
 800928e:	2a4f      	cmp	r2, #79	; 0x4f
 8009290:	d9f1      	bls.n	8009276 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009292:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009294:	2a00      	cmp	r2, #0
 8009296:	d0ee      	beq.n	8009276 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009298:	4345      	muls	r5, r0
 800929a:	6966      	ldr	r6, [r4, #20]
 800929c:	42ae      	cmp	r6, r5
 800929e:	d3ea      	bcc.n	8009276 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092a0:	9700      	str	r7, [sp, #0]
 80092a2:	f000 fc45 	bl	8009b30 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80092a6:	4605      	mov	r5, r0
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0e4      	beq.n	8009276 <osMessageQueueNew+0xe>
        name = attr->name;
 80092ac:	6824      	ldr	r4, [r4, #0]
 80092ae:	e011      	b.n	80092d4 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092b0:	2a00      	cmp	r2, #0
 80092b2:	d1e0      	bne.n	8009276 <osMessageQueueNew+0xe>
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1dd      	bne.n	8009276 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092ba:	6963      	ldr	r3, [r4, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1da      	bne.n	8009276 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80092c0:	4629      	mov	r1, r5
 80092c2:	2200      	movs	r2, #0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 fc81 	bl	8009bcc <xQueueGenericCreate>
    if (hQueue != NULL) {
 80092ca:	4605      	mov	r5, r0
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d0d2      	beq.n	8009276 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80092d0:	2c00      	cmp	r4, #0
 80092d2:	d1eb      	bne.n	80092ac <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80092d4:	4621      	mov	r1, r4
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 fffc 	bl	800a2d4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80092dc:	e7cc      	b.n	8009278 <osMessageQueueNew+0x10>
	...

080092e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80092e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092e2:	461c      	mov	r4, r3
 80092e4:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80092e8:	b1b6      	cbz	r6, 8009318 <osMessageQueuePut+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092ea:	b308      	cbz	r0, 8009330 <osMessageQueuePut+0x50>
 80092ec:	b301      	cbz	r1, 8009330 <osMessageQueuePut+0x50>
 80092ee:	b9fb      	cbnz	r3, 8009330 <osMessageQueuePut+0x50>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092f0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80092f2:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092f4:	f000 fd84 	bl	8009e00 <xQueueGenericSendFromISR>
 80092f8:	2801      	cmp	r0, #1
 80092fa:	d116      	bne.n	800932a <osMessageQueuePut+0x4a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80092fc:	9b01      	ldr	r3, [sp, #4]
 80092fe:	b913      	cbnz	r3, 8009306 <osMessageQueuePut+0x26>
  stat = osOK;
 8009300:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009302:	b002      	add	sp, #8
 8009304:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8009306:	4b0d      	ldr	r3, [pc, #52]	; (800933c <osMessageQueuePut+0x5c>)
 8009308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	e7f3      	b.n	8009300 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009318:	b150      	cbz	r0, 8009330 <osMessageQueuePut+0x50>
 800931a:	b149      	cbz	r1, 8009330 <osMessageQueuePut+0x50>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800931c:	4633      	mov	r3, r6
 800931e:	4622      	mov	r2, r4
 8009320:	f000 fcbc 	bl	8009c9c <xQueueGenericSend>
 8009324:	2801      	cmp	r0, #1
 8009326:	d0eb      	beq.n	8009300 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8009328:	b92c      	cbnz	r4, 8009336 <osMessageQueuePut+0x56>
          stat = osErrorResource;
 800932a:	f06f 0002 	mvn.w	r0, #2
 800932e:	e7e8      	b.n	8009302 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 8009330:	f06f 0003 	mvn.w	r0, #3
 8009334:	e7e5      	b.n	8009302 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 8009336:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800933a:	e7e2      	b.n	8009302 <osMessageQueuePut+0x22>
 800933c:	e000ed04 	.word	0xe000ed04

08009340 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009342:	461c      	mov	r4, r3
 8009344:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009348:	b1b3      	cbz	r3, 8009378 <osMessageQueueGet+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800934a:	b300      	cbz	r0, 800938e <osMessageQueueGet+0x4e>
 800934c:	b1f9      	cbz	r1, 800938e <osMessageQueueGet+0x4e>
 800934e:	b9f4      	cbnz	r4, 800938e <osMessageQueueGet+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009350:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009352:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009354:	f000 ff6e 	bl	800a234 <xQueueReceiveFromISR>
 8009358:	2801      	cmp	r0, #1
 800935a:	d115      	bne.n	8009388 <osMessageQueueGet+0x48>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	b913      	cbnz	r3, 8009366 <osMessageQueueGet+0x26>
  stat = osOK;
 8009360:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009362:	b003      	add	sp, #12
 8009364:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8009366:	4b0d      	ldr	r3, [pc, #52]	; (800939c <osMessageQueueGet+0x5c>)
 8009368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	e7f3      	b.n	8009360 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009378:	b148      	cbz	r0, 800938e <osMessageQueueGet+0x4e>
 800937a:	b141      	cbz	r1, 800938e <osMessageQueueGet+0x4e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800937c:	4622      	mov	r2, r4
 800937e:	f000 fdf5 	bl	8009f6c <xQueueReceive>
 8009382:	2801      	cmp	r0, #1
 8009384:	d0ec      	beq.n	8009360 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 8009386:	b92c      	cbnz	r4, 8009394 <osMessageQueueGet+0x54>
          stat = osErrorResource;
 8009388:	f06f 0002 	mvn.w	r0, #2
 800938c:	e7e9      	b.n	8009362 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800938e:	f06f 0003 	mvn.w	r0, #3
 8009392:	e7e6      	b.n	8009362 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 8009394:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009398:	e7e3      	b.n	8009362 <osMessageQueueGet+0x22>
 800939a:	bf00      	nop
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093a0:	4b03      	ldr	r3, [pc, #12]	; (80093b0 <vApplicationGetIdleTaskMemory+0x10>)
 80093a2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093a4:	4b03      	ldr	r3, [pc, #12]	; (80093b4 <vApplicationGetIdleTaskMemory+0x14>)
 80093a6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093a8:	2380      	movs	r3, #128	; 0x80
 80093aa:	6013      	str	r3, [r2, #0]
}
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	2400249c 	.word	0x2400249c
 80093b4:	2400229c 	.word	0x2400229c

080093b8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093b8:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <vApplicationGetTimerTaskMemory+0x10>)
 80093ba:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093bc:	4b03      	ldr	r3, [pc, #12]	; (80093cc <vApplicationGetTimerTaskMemory+0x14>)
 80093be:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093c4:	6013      	str	r3, [r2, #0]
}
 80093c6:	4770      	bx	lr
 80093c8:	24002900 	.word	0x24002900
 80093cc:	24002500 	.word	0x24002500

080093d0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093d0:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <prvInsertBlockIntoFreeList+0x40>)
{
 80093d2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093d4:	461a      	mov	r2, r3
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4283      	cmp	r3, r0
 80093da:	d3fb      	bcc.n	80093d4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093dc:	6854      	ldr	r4, [r2, #4]
 80093de:	1911      	adds	r1, r2, r4
 80093e0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093e2:	bf01      	itttt	eq
 80093e4:	6841      	ldreq	r1, [r0, #4]
 80093e6:	4610      	moveq	r0, r2
 80093e8:	1909      	addeq	r1, r1, r4
 80093ea:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093ec:	6844      	ldr	r4, [r0, #4]
 80093ee:	1901      	adds	r1, r0, r4
 80093f0:	428b      	cmp	r3, r1
 80093f2:	d107      	bne.n	8009404 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093f4:	4907      	ldr	r1, [pc, #28]	; (8009414 <prvInsertBlockIntoFreeList+0x44>)
 80093f6:	6809      	ldr	r1, [r1, #0]
 80093f8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093fa:	bf1f      	itttt	ne
 80093fc:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093fe:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009400:	1909      	addne	r1, r1, r4
 8009402:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009404:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009406:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009408:	bf18      	it	ne
 800940a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800940c:	bd10      	pop	{r4, pc}
 800940e:	bf00      	nop
 8009410:	24006578 	.word	0x24006578
 8009414:	24002960 	.word	0x24002960

08009418 <pvPortMalloc>:
{
 8009418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800941e:	f001 f98b 	bl	800a738 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009422:	4b3e      	ldr	r3, [pc, #248]	; (800951c <pvPortMalloc+0x104>)
 8009424:	483e      	ldr	r0, [pc, #248]	; (8009520 <pvPortMalloc+0x108>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	469c      	mov	ip, r3
 800942a:	b9d2      	cbnz	r2, 8009462 <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 800942c:	4a3d      	ldr	r2, [pc, #244]	; (8009524 <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 800942e:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009430:	4b3d      	ldr	r3, [pc, #244]	; (8009528 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009432:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8009434:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009436:	bf1c      	itt	ne
 8009438:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800943a:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800943e:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 8009440:	4b3a      	ldr	r3, [pc, #232]	; (800952c <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009442:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8009446:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800944a:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800944c:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009450:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009454:	4b36      	ldr	r3, [pc, #216]	; (8009530 <pvPortMalloc+0x118>)
 8009456:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009458:	4b36      	ldr	r3, [pc, #216]	; (8009534 <pvPortMalloc+0x11c>)
 800945a:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800945c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009460:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009462:	6807      	ldr	r7, [r0, #0]
 8009464:	4227      	tst	r7, r4
 8009466:	d153      	bne.n	8009510 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 8009468:	2c00      	cmp	r4, #0
 800946a:	d044      	beq.n	80094f6 <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800946c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009470:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009472:	bf1c      	itt	ne
 8009474:	f023 0307 	bicne.w	r3, r3, #7
 8009478:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800947a:	2b00      	cmp	r3, #0
 800947c:	d048      	beq.n	8009510 <pvPortMalloc+0xf8>
 800947e:	4a2d      	ldr	r2, [pc, #180]	; (8009534 <pvPortMalloc+0x11c>)
 8009480:	6816      	ldr	r6, [r2, #0]
 8009482:	4690      	mov	r8, r2
 8009484:	429e      	cmp	r6, r3
 8009486:	d343      	bcc.n	8009510 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 8009488:	4a27      	ldr	r2, [pc, #156]	; (8009528 <pvPortMalloc+0x110>)
 800948a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800948c:	6869      	ldr	r1, [r5, #4]
 800948e:	4299      	cmp	r1, r3
 8009490:	d201      	bcs.n	8009496 <pvPortMalloc+0x7e>
 8009492:	6828      	ldr	r0, [r5, #0]
 8009494:	b9a8      	cbnz	r0, 80094c2 <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 8009496:	f8dc 0000 	ldr.w	r0, [ip]
 800949a:	42a8      	cmp	r0, r5
 800949c:	d038      	beq.n	8009510 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800949e:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094a0:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094a2:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094a4:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094a6:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094a8:	d912      	bls.n	80094d0 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094aa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ac:	0742      	lsls	r2, r0, #29
 80094ae:	d00b      	beq.n	80094c8 <pvPortMalloc+0xb0>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	e7fe      	b.n	80094c0 <pvPortMalloc+0xa8>
 80094c2:	462a      	mov	r2, r5
 80094c4:	4605      	mov	r5, r0
 80094c6:	e7e1      	b.n	800948c <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094c8:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094ca:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094cc:	f7ff ff80 	bl	80093d0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094d0:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094d2:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094d4:	4916      	ldr	r1, [pc, #88]	; (8009530 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094d6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094d8:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 80094da:	4a17      	ldr	r2, [pc, #92]	; (8009538 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 80094dc:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094de:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80094e0:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80094e2:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094e4:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094e6:	f8c8 6000 	str.w	r6, [r8]
					xNumberOfSuccessfulAllocations++;
 80094ea:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094ee:	bf38      	it	cc
 80094f0:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094f2:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 80094f4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80094f6:	f001 f9c3 	bl	800a880 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094fa:	0763      	lsls	r3, r4, #29
 80094fc:	d00a      	beq.n	8009514 <pvPortMalloc+0xfc>
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	e7fe      	b.n	800950e <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 8009510:	2400      	movs	r4, #0
 8009512:	e7f0      	b.n	80094f6 <pvPortMalloc+0xde>
}
 8009514:	4620      	mov	r0, r4
 8009516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800951a:	bf00      	nop
 800951c:	24002960 	.word	0x24002960
 8009520:	24006564 	.word	0x24006564
 8009524:	24002964 	.word	0x24002964
 8009528:	24006578 	.word	0x24006578
 800952c:	2400655c 	.word	0x2400655c
 8009530:	2400656c 	.word	0x2400656c
 8009534:	24006568 	.word	0x24006568
 8009538:	24006570 	.word	0x24006570

0800953c <vPortFree>:
{
 800953c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800953e:	4604      	mov	r4, r0
 8009540:	b390      	cbz	r0, 80095a8 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009542:	4a1a      	ldr	r2, [pc, #104]	; (80095ac <vPortFree+0x70>)
 8009544:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009548:	6812      	ldr	r2, [r2, #0]
 800954a:	4213      	tst	r3, r2
 800954c:	d108      	bne.n	8009560 <vPortFree+0x24>
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	e7fe      	b.n	800955e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009560:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009564:	b141      	cbz	r1, 8009578 <vPortFree+0x3c>
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	e7fe      	b.n	8009576 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009578:	ea23 0302 	bic.w	r3, r3, r2
 800957c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009580:	f001 f8da 	bl	800a738 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009584:	4a0a      	ldr	r2, [pc, #40]	; (80095b0 <vPortFree+0x74>)
 8009586:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800958a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800958e:	6811      	ldr	r1, [r2, #0]
 8009590:	440b      	add	r3, r1
 8009592:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009594:	f7ff ff1c 	bl	80093d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009598:	4a06      	ldr	r2, [pc, #24]	; (80095b4 <vPortFree+0x78>)
 800959a:	6813      	ldr	r3, [r2, #0]
 800959c:	3301      	adds	r3, #1
}
 800959e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80095a2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80095a4:	f001 b96c 	b.w	800a880 <xTaskResumeAll>
}
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	bf00      	nop
 80095ac:	24006564 	.word	0x24006564
 80095b0:	24006568 	.word	0x24006568
 80095b4:	24006574 	.word	0x24006574

080095b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095b8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095bc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095c0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095c2:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095c4:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095cc:	4770      	bx	lr

080095ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095d2:	4770      	bx	lr

080095d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80095d4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095d6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80095d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80095e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80095e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80095e6:	3301      	adds	r3, #1
 80095e8:	6003      	str	r3, [r0, #0]
}
 80095ea:	4770      	bx	lr

080095ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095ec:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095ee:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095f0:	1c63      	adds	r3, r4, #1
 80095f2:	d10a      	bne.n	800960a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80095f4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095fa:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80095fc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80095fe:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009600:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009602:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009604:	3301      	adds	r3, #1
 8009606:	6003      	str	r3, [r0, #0]
}
 8009608:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800960a:	f100 0208 	add.w	r2, r0, #8
 800960e:	4613      	mov	r3, r2
 8009610:	6852      	ldr	r2, [r2, #4]
 8009612:	6815      	ldr	r5, [r2, #0]
 8009614:	42a5      	cmp	r5, r4
 8009616:	d9fa      	bls.n	800960e <vListInsert+0x22>
 8009618:	e7ed      	b.n	80095f6 <vListInsert+0xa>

0800961a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800961a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800961c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009620:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009622:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009624:	6859      	ldr	r1, [r3, #4]
 8009626:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009628:	bf08      	it	eq
 800962a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800962c:	2200      	movs	r2, #0
 800962e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	3a01      	subs	r2, #1
 8009634:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009636:	6818      	ldr	r0, [r3, #0]
}
 8009638:	4770      	bx	lr
	...

0800963c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800963c:	4808      	ldr	r0, [pc, #32]	; (8009660 <prvPortStartFirstTask+0x24>)
 800963e:	6800      	ldr	r0, [r0, #0]
 8009640:	6800      	ldr	r0, [r0, #0]
 8009642:	f380 8808 	msr	MSP, r0
 8009646:	f04f 0000 	mov.w	r0, #0
 800964a:	f380 8814 	msr	CONTROL, r0
 800964e:	b662      	cpsie	i
 8009650:	b661      	cpsie	f
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	df00      	svc	0
 800965c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800965e:	0000      	.short	0x0000
 8009660:	e000ed08 	.word	0xe000ed08

08009664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009674 <vPortEnableVFP+0x10>
 8009668:	6801      	ldr	r1, [r0, #0]
 800966a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800966e:	6001      	str	r1, [r0, #0]
 8009670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009672:	0000      	.short	0x0000
 8009674:	e000ed88 	.word	0xe000ed88

08009678 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8009678:	2300      	movs	r3, #0
{
 800967a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800967c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800967e:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <prvTaskExitError+0x3c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	d008      	beq.n	8009698 <prvTaskExitError+0x20>
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	e7fe      	b.n	8009696 <prvTaskExitError+0x1e>
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0fc      	beq.n	80096a8 <prvTaskExitError+0x30>
}
 80096ae:	b002      	add	sp, #8
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	24000060 	.word	0x24000060

080096b8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096bc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096c0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80096c4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096c6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096c8:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096ca:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096cc:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096ce:	f06f 0302 	mvn.w	r3, #2
 80096d2:	6203      	str	r3, [r0, #32]
}
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	08009679 	.word	0x08009679
 80096dc:	00000000 	.word	0x00000000

080096e0 <SVC_Handler>:
	__asm volatile (
 80096e0:	4b07      	ldr	r3, [pc, #28]	; (8009700 <pxCurrentTCBConst2>)
 80096e2:	6819      	ldr	r1, [r3, #0]
 80096e4:	6808      	ldr	r0, [r1, #0]
 80096e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ea:	f380 8809 	msr	PSP, r0
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8811 	msr	BASEPRI, r0
 80096fa:	4770      	bx	lr
 80096fc:	f3af 8000 	nop.w

08009700 <pxCurrentTCBConst2>:
 8009700:	24006588 	.word	0x24006588

08009704 <vPortEnterCritical>:
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009714:	4a0a      	ldr	r2, [pc, #40]	; (8009740 <vPortEnterCritical+0x3c>)
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800971a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800971c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800971e:	d10d      	bne.n	800973c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009720:	4b08      	ldr	r3, [pc, #32]	; (8009744 <vPortEnterCritical+0x40>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009728:	d008      	beq.n	800973c <vPortEnterCritical+0x38>
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	e7fe      	b.n	800973a <vPortEnterCritical+0x36>
}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	24000060 	.word	0x24000060
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009748:	4a08      	ldr	r2, [pc, #32]	; (800976c <vPortExitCritical+0x24>)
 800974a:	6813      	ldr	r3, [r2, #0]
 800974c:	b943      	cbnz	r3, 8009760 <vPortExitCritical+0x18>
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	e7fe      	b.n	800975e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009760:	3b01      	subs	r3, #1
 8009762:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009764:	b90b      	cbnz	r3, 800976a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009766:	f383 8811 	msr	BASEPRI, r3
}
 800976a:	4770      	bx	lr
 800976c:	24000060 	.word	0x24000060

08009770 <PendSV_Handler>:
	__asm volatile
 8009770:	f3ef 8009 	mrs	r0, PSP
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	4b15      	ldr	r3, [pc, #84]	; (80097d0 <pxCurrentTCBConst>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	f01e 0f10 	tst.w	lr, #16
 8009780:	bf08      	it	eq
 8009782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	6010      	str	r0, [r2, #0]
 800978c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009794:	f380 8811 	msr	BASEPRI, r0
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f001 f96c 	bl	800aa7c <vTaskSwitchContext>
 80097a4:	f04f 0000 	mov.w	r0, #0
 80097a8:	f380 8811 	msr	BASEPRI, r0
 80097ac:	bc09      	pop	{r0, r3}
 80097ae:	6819      	ldr	r1, [r3, #0]
 80097b0:	6808      	ldr	r0, [r1, #0]
 80097b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b6:	f01e 0f10 	tst.w	lr, #16
 80097ba:	bf08      	it	eq
 80097bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097c0:	f380 8809 	msr	PSP, r0
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w

080097d0 <pxCurrentTCBConst>:
 80097d0:	24006588 	.word	0x24006588

080097d4 <xPortSysTickHandler>:
{
 80097d4:	b508      	push	{r3, lr}
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80097e6:	f000 ffb5 	bl	800a754 <xTaskIncrementTick>
 80097ea:	b118      	cbz	r0, 80097f4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ec:	4b03      	ldr	r3, [pc, #12]	; (80097fc <xPortSysTickHandler+0x28>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80097f4:	2300      	movs	r3, #0
 80097f6:	f383 8811 	msr	BASEPRI, r3
}
 80097fa:	bd08      	pop	{r3, pc}
 80097fc:	e000ed04 	.word	0xe000ed04

08009800 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009800:	2300      	movs	r3, #0
 8009802:	4a08      	ldr	r2, [pc, #32]	; (8009824 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009804:	4908      	ldr	r1, [pc, #32]	; (8009828 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009808:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800980a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800980e:	4b07      	ldr	r3, [pc, #28]	; (800982c <vPortSetupTimerInterrupt+0x2c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	fbb3 f3f1 	udiv	r3, r3, r1
 8009816:	4906      	ldr	r1, [pc, #24]	; (8009830 <vPortSetupTimerInterrupt+0x30>)
 8009818:	3b01      	subs	r3, #1
 800981a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800981c:	2307      	movs	r3, #7
 800981e:	6013      	str	r3, [r2, #0]
}
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	e000e010 	.word	0xe000e010
 8009828:	e000e018 	.word	0xe000e018
 800982c:	24000050 	.word	0x24000050
 8009830:	e000e014 	.word	0xe000e014

08009834 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009834:	4b37      	ldr	r3, [pc, #220]	; (8009914 <xPortStartScheduler+0xe0>)
 8009836:	4a38      	ldr	r2, [pc, #224]	; (8009918 <xPortStartScheduler+0xe4>)
{
 8009838:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800983a:	6819      	ldr	r1, [r3, #0]
 800983c:	4291      	cmp	r1, r2
 800983e:	d108      	bne.n	8009852 <xPortStartScheduler+0x1e>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	e7fe      	b.n	8009850 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	4b31      	ldr	r3, [pc, #196]	; (800991c <xPortStartScheduler+0xe8>)
 8009856:	429a      	cmp	r2, r3
 8009858:	d108      	bne.n	800986c <xPortStartScheduler+0x38>
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	e7fe      	b.n	800986a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800986c:	4b2c      	ldr	r3, [pc, #176]	; (8009920 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800986e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009870:	781a      	ldrb	r2, [r3, #0]
 8009872:	b2d2      	uxtb	r2, r2
 8009874:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009876:	22ff      	movs	r2, #255	; 0xff
 8009878:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800987a:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800987c:	4a29      	ldr	r2, [pc, #164]	; (8009924 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009884:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009888:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800988c:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800988e:	2307      	movs	r3, #7
 8009890:	4a25      	ldr	r2, [pc, #148]	; (8009928 <xPortStartScheduler+0xf4>)
 8009892:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009894:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009898:	1e5c      	subs	r4, r3, #1
 800989a:	0600      	lsls	r0, r0, #24
 800989c:	d40c      	bmi.n	80098b8 <xPortStartScheduler+0x84>
 800989e:	b111      	cbz	r1, 80098a6 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	d011      	beq.n	80098ca <xPortStartScheduler+0x96>
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	e7fe      	b.n	80098b6 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80098bc:	2101      	movs	r1, #1
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f88d 3003 	strb.w	r3, [sp, #3]
 80098c6:	4623      	mov	r3, r4
 80098c8:	e7e4      	b.n	8009894 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098ca:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 80098ce:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098d0:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098d2:	9b01      	ldr	r3, [sp, #4]
 80098d4:	4a12      	ldr	r2, [pc, #72]	; (8009920 <xPortStartScheduler+0xec>)
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098da:	4b14      	ldr	r3, [pc, #80]	; (800992c <xPortStartScheduler+0xf8>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80098e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80098ea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80098ec:	f7ff ff88 	bl	8009800 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80098f0:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <xPortStartScheduler+0xfc>)
 80098f2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80098f4:	f7ff feb6 	bl	8009664 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098f8:	4a0e      	ldr	r2, [pc, #56]	; (8009934 <xPortStartScheduler+0x100>)
 80098fa:	6813      	ldr	r3, [r2, #0]
 80098fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009900:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8009902:	f7ff fe9b 	bl	800963c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009906:	f001 f8b9 	bl	800aa7c <vTaskSwitchContext>
	prvTaskExitError();
 800990a:	f7ff feb5 	bl	8009678 <prvTaskExitError>
}
 800990e:	4620      	mov	r0, r4
 8009910:	b002      	add	sp, #8
 8009912:	bd10      	pop	{r4, pc}
 8009914:	e000ed00 	.word	0xe000ed00
 8009918:	410fc271 	.word	0x410fc271
 800991c:	410fc270 	.word	0x410fc270
 8009920:	e000e400 	.word	0xe000e400
 8009924:	24006580 	.word	0x24006580
 8009928:	24006584 	.word	0x24006584
 800992c:	e000ed20 	.word	0xe000ed20
 8009930:	24000060 	.word	0x24000060
 8009934:	e000ef34 	.word	0xe000ef34

08009938 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009938:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800993c:	2b0f      	cmp	r3, #15
 800993e:	d90e      	bls.n	800995e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009940:	4a10      	ldr	r2, [pc, #64]	; (8009984 <vPortValidateInterruptPriority+0x4c>)
 8009942:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009944:	4a10      	ldr	r2, [pc, #64]	; (8009988 <vPortValidateInterruptPriority+0x50>)
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d908      	bls.n	800995e <vPortValidateInterruptPriority+0x26>
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	e7fe      	b.n	800995c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800995e:	4b0b      	ldr	r3, [pc, #44]	; (800998c <vPortValidateInterruptPriority+0x54>)
 8009960:	4a0b      	ldr	r2, [pc, #44]	; (8009990 <vPortValidateInterruptPriority+0x58>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6812      	ldr	r2, [r2, #0]
 8009966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800996a:	4293      	cmp	r3, r2
 800996c:	d908      	bls.n	8009980 <vPortValidateInterruptPriority+0x48>
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	e7fe      	b.n	800997e <vPortValidateInterruptPriority+0x46>
	}
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	e000e3f0 	.word	0xe000e3f0
 8009988:	24006580 	.word	0x24006580
 800998c:	e000ed0c 	.word	0xe000ed0c
 8009990:	24006584 	.word	0x24006584

08009994 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009994:	b510      	push	{r4, lr}
 8009996:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009998:	f7ff feb4 	bl	8009704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800999c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800999e:	f7ff fed3 	bl	8009748 <vPortExitCritical>

	return xReturn;
}
 80099a2:	fab4 f084 	clz	r0, r4
 80099a6:	0940      	lsrs	r0, r0, #5
 80099a8:	bd10      	pop	{r4, pc}

080099aa <prvCopyDataToQueue>:
{
 80099aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ac:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80099b0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099b2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099b4:	b952      	cbnz	r2, 80099cc <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099b6:	6807      	ldr	r7, [r0, #0]
 80099b8:	bb47      	cbnz	r7, 8009a0c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099ba:	6880      	ldr	r0, [r0, #8]
 80099bc:	f001 f9c0 	bl	800ad40 <xTaskPriorityDisinherit>
 80099c0:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099c2:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099c4:	3601      	adds	r6, #1
}
 80099c6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099c8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80099ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80099cc:	b965      	cbnz	r5, 80099e8 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099ce:	6840      	ldr	r0, [r0, #4]
 80099d0:	f011 fbd2 	bl	801b178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099d4:	6863      	ldr	r3, [r4, #4]
 80099d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80099d8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099da:	68a2      	ldr	r2, [r4, #8]
 80099dc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099de:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099e0:	d3f0      	bcc.n	80099c4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	6063      	str	r3, [r4, #4]
 80099e6:	e7ed      	b.n	80099c4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099e8:	68c0      	ldr	r0, [r0, #12]
 80099ea:	f011 fbc5 	bl	801b178 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80099f0:	68e3      	ldr	r3, [r4, #12]
 80099f2:	4251      	negs	r1, r2
 80099f4:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099fa:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099fc:	bf3e      	ittt	cc
 80099fe:	68a3      	ldrcc	r3, [r4, #8]
 8009a00:	185b      	addcc	r3, r3, r1
 8009a02:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009a04:	2d02      	cmp	r5, #2
 8009a06:	d101      	bne.n	8009a0c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a08:	b116      	cbz	r6, 8009a10 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8009a0a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009a0c:	2500      	movs	r5, #0
 8009a0e:	e7d9      	b.n	80099c4 <prvCopyDataToQueue+0x1a>
 8009a10:	4635      	mov	r5, r6
 8009a12:	e7d7      	b.n	80099c4 <prvCopyDataToQueue+0x1a>

08009a14 <prvCopyDataFromQueue>:
{
 8009a14:	4603      	mov	r3, r0
 8009a16:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009a1a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a1c:	b162      	cbz	r2, 8009a38 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a1e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a20:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a22:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a24:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a26:	60dc      	str	r4, [r3, #12]
}
 8009a28:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a2c:	bf24      	itt	cs
 8009a2e:	6819      	ldrcs	r1, [r3, #0]
 8009a30:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a32:	68d9      	ldr	r1, [r3, #12]
 8009a34:	f011 bba0 	b.w	801b178 <memcpy>
}
 8009a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <prvUnlockQueue>:
{
 8009a3e:	b570      	push	{r4, r5, r6, lr}
 8009a40:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009a42:	f7ff fe5f 	bl	8009704 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009a46:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a4a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8009a4e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	dc14      	bgt.n	8009a7e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8009a54:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a56:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009a5e:	f7ff fe73 	bl	8009748 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009a62:	f7ff fe4f 	bl	8009704 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009a66:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009a6a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	dc12      	bgt.n	8009a96 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8009a70:	23ff      	movs	r3, #255	; 0xff
 8009a72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009a7a:	f7ff be65 	b.w	8009748 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0e7      	beq.n	8009a54 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a84:	4630      	mov	r0, r6
 8009a86:	f001 f877 	bl	800ab78 <xTaskRemoveFromEventList>
 8009a8a:	b108      	cbz	r0, 8009a90 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009a8c:	f001 f900 	bl	800ac90 <vTaskMissedYield>
			--cTxLock;
 8009a90:	3d01      	subs	r5, #1
 8009a92:	b26d      	sxtb	r5, r5
 8009a94:	e7dc      	b.n	8009a50 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0e9      	beq.n	8009a70 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f001 f86b 	bl	800ab78 <xTaskRemoveFromEventList>
 8009aa2:	b108      	cbz	r0, 8009aa8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009aa4:	f001 f8f4 	bl	800ac90 <vTaskMissedYield>
				--cRxLock;
 8009aa8:	3d01      	subs	r5, #1
 8009aaa:	b26d      	sxtb	r5, r5
 8009aac:	e7de      	b.n	8009a6c <prvUnlockQueue+0x2e>
	...

08009ab0 <xQueueGenericReset>:
{
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	b940      	cbnz	r0, 8009aca <xQueueGenericReset+0x1a>
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	e7fe      	b.n	8009ac8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009aca:	f7ff fe1b 	bl	8009704 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ad4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ad6:	434b      	muls	r3, r1
 8009ad8:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ada:	1a5b      	subs	r3, r3, r1
 8009adc:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ade:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ae0:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ae2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ae4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ae6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009ae8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009af0:	b995      	cbnz	r5, 8009b18 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	b163      	cbz	r3, 8009b10 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009af6:	f104 0010 	add.w	r0, r4, #16
 8009afa:	f001 f83d 	bl	800ab78 <xTaskRemoveFromEventList>
 8009afe:	b138      	cbz	r0, 8009b10 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8009b00:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <xQueueGenericReset+0x7c>)
 8009b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8009b10:	f7ff fe1a 	bl	8009748 <vPortExitCritical>
}
 8009b14:	2001      	movs	r0, #1
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b18:	f104 0010 	add.w	r0, r4, #16
 8009b1c:	f7ff fd4c 	bl	80095b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b24:	f7ff fd48 	bl	80095b8 <vListInitialise>
 8009b28:	e7f2      	b.n	8009b10 <xQueueGenericReset+0x60>
 8009b2a:	bf00      	nop
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <xQueueGenericCreateStatic>:
	{
 8009b30:	b513      	push	{r0, r1, r4, lr}
 8009b32:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b34:	b940      	cbnz	r0, 8009b48 <xQueueGenericCreateStatic+0x18>
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	e7fe      	b.n	8009b46 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8009b48:	b943      	cbnz	r3, 8009b5c <xQueueGenericCreateStatic+0x2c>
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	e7fe      	b.n	8009b5a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b5c:	b14a      	cbz	r2, 8009b72 <xQueueGenericCreateStatic+0x42>
 8009b5e:	b991      	cbnz	r1, 8009b86 <xQueueGenericCreateStatic+0x56>
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	e7fe      	b.n	8009b70 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b72:	b141      	cbz	r1, 8009b86 <xQueueGenericCreateStatic+0x56>
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	e7fe      	b.n	8009b84 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b86:	2350      	movs	r3, #80	; 0x50
 8009b88:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b8a:	9b01      	ldr	r3, [sp, #4]
 8009b8c:	2b50      	cmp	r3, #80	; 0x50
 8009b8e:	d008      	beq.n	8009ba2 <xQueueGenericCreateStatic+0x72>
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	e7fe      	b.n	8009ba0 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ba2:	2900      	cmp	r1, #0
 8009ba4:	bf08      	it	eq
 8009ba6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ba8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009baa:	2301      	movs	r3, #1
 8009bac:	6022      	str	r2, [r4, #0]
 8009bae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009bb2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff ff79 	bl	8009ab0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009bbe:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8009bc2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009bc4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8009bc8:	b002      	add	sp, #8
 8009bca:	bd10      	pop	{r4, pc}

08009bcc <xQueueGenericCreate>:
	{
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	460d      	mov	r5, r1
 8009bd0:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	b940      	cbnz	r0, 8009be8 <xQueueGenericCreate+0x1c>
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	e7fe      	b.n	8009be6 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009bea:	3050      	adds	r0, #80	; 0x50
 8009bec:	f7ff fc14 	bl	8009418 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	b170      	cbz	r0, 8009c12 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bfa:	b165      	cbz	r5, 8009c16 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bfc:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c00:	2101      	movs	r1, #1
 8009c02:	4620      	mov	r0, r4
 8009c04:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8009c06:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c0a:	f7ff ff51 	bl	8009ab0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009c0e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8009c12:	4620      	mov	r0, r4
 8009c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c16:	4603      	mov	r3, r0
 8009c18:	e7f2      	b.n	8009c00 <xQueueGenericCreate+0x34>

08009c1a <xQueueCreateCountingSemaphoreStatic>:
	{
 8009c1a:	b513      	push	{r0, r1, r4, lr}
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009c20:	b940      	cbnz	r0, 8009c34 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	e7fe      	b.n	8009c32 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c34:	4288      	cmp	r0, r1
 8009c36:	d208      	bcs.n	8009c4a <xQueueCreateCountingSemaphoreStatic+0x30>
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	e7fe      	b.n	8009c48 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	9200      	str	r2, [sp, #0]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4611      	mov	r1, r2
 8009c52:	f7ff ff6d 	bl	8009b30 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8009c56:	b100      	cbz	r0, 8009c5a <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c58:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009c5a:	b002      	add	sp, #8
 8009c5c:	bd10      	pop	{r4, pc}

08009c5e <xQueueCreateCountingSemaphore>:
	{
 8009c5e:	b510      	push	{r4, lr}
 8009c60:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009c62:	b940      	cbnz	r0, 8009c76 <xQueueCreateCountingSemaphore+0x18>
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	e7fe      	b.n	8009c74 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c76:	4288      	cmp	r0, r1
 8009c78:	d208      	bcs.n	8009c8c <xQueueCreateCountingSemaphore+0x2e>
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	e7fe      	b.n	8009c8a <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	2100      	movs	r1, #0
 8009c90:	f7ff ff9c 	bl	8009bcc <xQueueGenericCreate>
		if( xHandle != NULL )
 8009c94:	b100      	cbz	r0, 8009c98 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c96:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009c98:	bd10      	pop	{r4, pc}
	...

08009c9c <xQueueGenericSend>:
{
 8009c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	4688      	mov	r8, r1
 8009ca2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009ca4:	4604      	mov	r4, r0
{
 8009ca6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009ca8:	b940      	cbnz	r0, 8009cbc <xQueueGenericSend+0x20>
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	e7fe      	b.n	8009cba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cbc:	b951      	cbnz	r1, 8009cd4 <xQueueGenericSend+0x38>
 8009cbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009cc0:	b143      	cbz	r3, 8009cd4 <xQueueGenericSend+0x38>
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	e7fe      	b.n	8009cd2 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cd4:	2f02      	cmp	r7, #2
 8009cd6:	d10b      	bne.n	8009cf0 <xQueueGenericSend+0x54>
 8009cd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d008      	beq.n	8009cf0 <xQueueGenericSend+0x54>
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	e7fe      	b.n	8009cee <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cf0:	f000 ffd4 	bl	800ac9c <xTaskGetSchedulerState>
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	b950      	cbnz	r0, 8009d0e <xQueueGenericSend+0x72>
 8009cf8:	9b01      	ldr	r3, [sp, #4]
 8009cfa:	b14b      	cbz	r3, 8009d10 <xQueueGenericSend+0x74>
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	e7fe      	b.n	8009d0c <xQueueGenericSend+0x70>
 8009d0e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009d10:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8009d14:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009dfc <xQueueGenericSend+0x160>
 8009d18:	e037      	b.n	8009d8a <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d1a:	9d01      	ldr	r5, [sp, #4]
 8009d1c:	b91d      	cbnz	r5, 8009d26 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 8009d1e:	f7ff fd13 	bl	8009748 <vPortExitCritical>
			return errQUEUE_FULL;
 8009d22:	2000      	movs	r0, #0
 8009d24:	e050      	b.n	8009dc8 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 8009d26:	b916      	cbnz	r6, 8009d2e <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d28:	a802      	add	r0, sp, #8
 8009d2a:	f000 ff69 	bl	800ac00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009d2e:	f7ff fd0b 	bl	8009748 <vPortExitCritical>
		vTaskSuspendAll();
 8009d32:	f000 fd01 	bl	800a738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d36:	f7ff fce5 	bl	8009704 <vPortEnterCritical>
 8009d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d3e:	2bff      	cmp	r3, #255	; 0xff
 8009d40:	d101      	bne.n	8009d46 <xQueueGenericSend+0xaa>
 8009d42:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8009d46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d4a:	2bff      	cmp	r3, #255	; 0xff
 8009d4c:	d101      	bne.n	8009d52 <xQueueGenericSend+0xb6>
 8009d4e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8009d52:	f7ff fcf9 	bl	8009748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d56:	a901      	add	r1, sp, #4
 8009d58:	a802      	add	r0, sp, #8
 8009d5a:	f000 ff5d 	bl	800ac18 <xTaskCheckForTimeOut>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d146      	bne.n	8009df0 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d62:	f7ff fccf 	bl	8009704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009d68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d12f      	bne.n	8009dce <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009d6e:	f7ff fceb 	bl	8009748 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d72:	9901      	ldr	r1, [sp, #4]
 8009d74:	f104 0010 	add.w	r0, r4, #16
 8009d78:	f000 fec6 	bl	800ab08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7ff fe5e 	bl	8009a3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d82:	f000 fd7d 	bl	800a880 <xTaskResumeAll>
 8009d86:	b350      	cbz	r0, 8009dde <xQueueGenericSend+0x142>
 8009d88:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009d8a:	f7ff fcbb 	bl	8009704 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d301      	bcc.n	8009d9a <xQueueGenericSend+0xfe>
 8009d96:	2f02      	cmp	r7, #2
 8009d98:	d1bf      	bne.n	8009d1a <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d9a:	463a      	mov	r2, r7
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f7ff fe03 	bl	80099aa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da6:	b11b      	cbz	r3, 8009db0 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009da8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dac:	f000 fee4 	bl	800ab78 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009db0:	b138      	cbz	r0, 8009dc2 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8009db2:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <xQueueGenericSend+0x160>)
 8009db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009dc2:	f7ff fcc1 	bl	8009748 <vPortExitCritical>
				return pdPASS;
 8009dc6:	2001      	movs	r0, #1
}
 8009dc8:	b004      	add	sp, #16
 8009dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8009dce:	f7ff fcbb 	bl	8009748 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7ff fe33 	bl	8009a3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dd8:	f000 fd52 	bl	800a880 <xTaskResumeAll>
 8009ddc:	e7d4      	b.n	8009d88 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 8009dde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009de2:	f8ca 3000 	str.w	r3, [sl]
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	e7cb      	b.n	8009d88 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff fe24 	bl	8009a3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009df6:	f000 fd43 	bl	800a880 <xTaskResumeAll>
 8009dfa:	e792      	b.n	8009d22 <xQueueGenericSend+0x86>
 8009dfc:	e000ed04 	.word	0xe000ed04

08009e00 <xQueueGenericSendFromISR>:
{
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	4689      	mov	r9, r1
 8009e06:	4690      	mov	r8, r2
 8009e08:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	b940      	cbnz	r0, 8009e20 <xQueueGenericSendFromISR+0x20>
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	e7fe      	b.n	8009e1e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e20:	b951      	cbnz	r1, 8009e38 <xQueueGenericSendFromISR+0x38>
 8009e22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009e24:	b143      	cbz	r3, 8009e38 <xQueueGenericSendFromISR+0x38>
 8009e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	e7fe      	b.n	8009e36 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e38:	2f02      	cmp	r7, #2
 8009e3a:	d10b      	bne.n	8009e54 <xQueueGenericSendFromISR+0x54>
 8009e3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d008      	beq.n	8009e54 <xQueueGenericSendFromISR+0x54>
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	e7fe      	b.n	8009e52 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e54:	f7ff fd70 	bl	8009938 <vPortValidateInterruptPriority>
	__asm volatile
 8009e58:	f3ef 8611 	mrs	r6, BASEPRI
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d301      	bcc.n	8009e78 <xQueueGenericSendFromISR+0x78>
 8009e74:	2f02      	cmp	r7, #2
 8009e76:	d123      	bne.n	8009ec0 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e78:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e7c:	463a      	mov	r2, r7
 8009e7e:	4649      	mov	r1, r9
 8009e80:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e82:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e86:	f7ff fd90 	bl	80099aa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009e8a:	1c6b      	adds	r3, r5, #1
 8009e8c:	d113      	bne.n	8009eb6 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e90:	b90b      	cbnz	r3, 8009e96 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8009e92:	2001      	movs	r0, #1
 8009e94:	e00b      	b.n	8009eae <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e9a:	f000 fe6d 	bl	800ab78 <xTaskRemoveFromEventList>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d0f7      	beq.n	8009e92 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8009ea2:	f1b8 0f00 	cmp.w	r8, #0
 8009ea6:	d0f4      	beq.n	8009e92 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8009eae:	f386 8811 	msr	BASEPRI, r6
}
 8009eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009eb6:	3501      	adds	r5, #1
 8009eb8:	b26d      	sxtb	r5, r5
 8009eba:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8009ebe:	e7e8      	b.n	8009e92 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	e7f4      	b.n	8009eae <xQueueGenericSendFromISR+0xae>

08009ec4 <xQueueGiveFromISR>:
{
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009ec8:	4604      	mov	r4, r0
 8009eca:	b940      	cbnz	r0, 8009ede <xQueueGiveFromISR+0x1a>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	e7fe      	b.n	8009edc <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ede:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009ee0:	b143      	cbz	r3, 8009ef4 <xQueueGiveFromISR+0x30>
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	e7fe      	b.n	8009ef2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009ef4:	6803      	ldr	r3, [r0, #0]
 8009ef6:	b953      	cbnz	r3, 8009f0e <xQueueGiveFromISR+0x4a>
 8009ef8:	6883      	ldr	r3, [r0, #8]
 8009efa:	b143      	cbz	r3, 8009f0e <xQueueGiveFromISR+0x4a>
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	e7fe      	b.n	8009f0c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f0e:	f7ff fd13 	bl	8009938 <vPortValidateInterruptPriority>
	__asm volatile
 8009f12:	f3ef 8611 	mrs	r6, BASEPRI
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d91c      	bls.n	8009f68 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f32:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8009f34:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f36:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f38:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009f3a:	d110      	bne.n	8009f5e <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3e:	b90b      	cbnz	r3, 8009f44 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8009f40:	2001      	movs	r0, #1
 8009f42:	e009      	b.n	8009f58 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f48:	f000 fe16 	bl	800ab78 <xTaskRemoveFromEventList>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d0f7      	beq.n	8009f40 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	d0f5      	beq.n	8009f40 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f54:	2001      	movs	r0, #1
 8009f56:	6028      	str	r0, [r5, #0]
	__asm volatile
 8009f58:	f386 8811 	msr	BASEPRI, r6
}
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f5e:	3301      	adds	r3, #1
 8009f60:	b25b      	sxtb	r3, r3
 8009f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f66:	e7eb      	b.n	8009f40 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e7f5      	b.n	8009f58 <xQueueGiveFromISR+0x94>

08009f6c <xQueueReceive>:
{
 8009f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f70:	b085      	sub	sp, #20
 8009f72:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8009f74:	4604      	mov	r4, r0
{
 8009f76:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009f78:	b940      	cbnz	r0, 8009f8c <xQueueReceive+0x20>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	e7fe      	b.n	8009f8a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f8c:	b951      	cbnz	r1, 8009fa4 <xQueueReceive+0x38>
 8009f8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009f90:	b143      	cbz	r3, 8009fa4 <xQueueReceive+0x38>
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	e7fe      	b.n	8009fa2 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fa4:	f000 fe7a 	bl	800ac9c <xTaskGetSchedulerState>
 8009fa8:	4606      	mov	r6, r0
 8009faa:	b950      	cbnz	r0, 8009fc2 <xQueueReceive+0x56>
 8009fac:	9b01      	ldr	r3, [sp, #4]
 8009fae:	b14b      	cbz	r3, 8009fc4 <xQueueReceive+0x58>
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	e7fe      	b.n	8009fc0 <xQueueReceive+0x54>
 8009fc2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009fc4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8009fc8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800a0a8 <xQueueReceive+0x13c>
 8009fcc:	e03b      	b.n	800a046 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fce:	9d01      	ldr	r5, [sp, #4]
 8009fd0:	b91d      	cbnz	r5, 8009fda <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8009fd2:	f7ff fbb9 	bl	8009748 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e052      	b.n	800a080 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 8009fda:	b916      	cbnz	r6, 8009fe2 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fdc:	a802      	add	r0, sp, #8
 8009fde:	f000 fe0f 	bl	800ac00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009fe2:	f7ff fbb1 	bl	8009748 <vPortExitCritical>
		vTaskSuspendAll();
 8009fe6:	f000 fba7 	bl	800a738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fea:	f7ff fb8b 	bl	8009704 <vPortEnterCritical>
 8009fee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009ff2:	2bff      	cmp	r3, #255	; 0xff
 8009ff4:	d101      	bne.n	8009ffa <xQueueReceive+0x8e>
 8009ff6:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8009ffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ffe:	2bff      	cmp	r3, #255	; 0xff
 800a000:	d101      	bne.n	800a006 <xQueueReceive+0x9a>
 800a002:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800a006:	f7ff fb9f 	bl	8009748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a00a:	a901      	add	r1, sp, #4
 800a00c:	a802      	add	r0, sp, #8
 800a00e:	f000 fe03 	bl	800ac18 <xTaskCheckForTimeOut>
 800a012:	2800      	cmp	r0, #0
 800a014:	d13d      	bne.n	800a092 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a016:	4620      	mov	r0, r4
 800a018:	f7ff fcbc 	bl	8009994 <prvIsQueueEmpty>
 800a01c:	b398      	cbz	r0, 800a086 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a01e:	9901      	ldr	r1, [sp, #4]
 800a020:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a024:	f000 fd70 	bl	800ab08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a028:	4620      	mov	r0, r4
 800a02a:	f7ff fd08 	bl	8009a3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a02e:	f000 fc27 	bl	800a880 <xTaskResumeAll>
 800a032:	b938      	cbnz	r0, 800a044 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 800a034:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a038:	f8c9 3000 	str.w	r3, [r9]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a046:	f7ff fb5d 	bl	8009704 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a04a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	d0be      	beq.n	8009fce <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a050:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a052:	4639      	mov	r1, r7
 800a054:	4620      	mov	r0, r4
 800a056:	f7ff fcdd 	bl	8009a14 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a05a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	b163      	cbz	r3, 800a07a <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a060:	f104 0010 	add.w	r0, r4, #16
 800a064:	f000 fd88 	bl	800ab78 <xTaskRemoveFromEventList>
 800a068:	b138      	cbz	r0, 800a07a <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800a06a:	4b0f      	ldr	r3, [pc, #60]	; (800a0a8 <xQueueReceive+0x13c>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a07a:	f7ff fb65 	bl	8009748 <vPortExitCritical>
				return pdPASS;
 800a07e:	2001      	movs	r0, #1
}
 800a080:	b005      	add	sp, #20
 800a082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800a086:	4620      	mov	r0, r4
 800a088:	f7ff fcd9 	bl	8009a3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a08c:	f000 fbf8 	bl	800a880 <xTaskResumeAll>
 800a090:	e7d8      	b.n	800a044 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff fcd3 	bl	8009a3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a098:	f000 fbf2 	bl	800a880 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a09c:	4620      	mov	r0, r4
 800a09e:	f7ff fc79 	bl	8009994 <prvIsQueueEmpty>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d0ce      	beq.n	800a044 <xQueueReceive+0xd8>
 800a0a6:	e796      	b.n	8009fd6 <xQueueReceive+0x6a>
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <xQueueSemaphoreTake>:
{
 800a0ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800a0b0:	4604      	mov	r4, r0
{
 800a0b2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a0b4:	b940      	cbnz	r0, 800a0c8 <xQueueSemaphoreTake+0x1c>
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	e7fe      	b.n	800a0c6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a0c8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800a0ca:	b145      	cbz	r5, 800a0de <xQueueSemaphoreTake+0x32>
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	e7fe      	b.n	800a0dc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0de:	f000 fddd 	bl	800ac9c <xTaskGetSchedulerState>
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	b950      	cbnz	r0, 800a0fc <xQueueSemaphoreTake+0x50>
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	b16b      	cbz	r3, 800a106 <xQueueSemaphoreTake+0x5a>
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	e7fe      	b.n	800a0fa <xQueueSemaphoreTake+0x4e>
 800a0fc:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800a0fe:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800a100:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800a230 <xQueueSemaphoreTake+0x184>
 800a104:	e051      	b.n	800a1aa <xQueueSemaphoreTake+0xfe>
 800a106:	4605      	mov	r5, r0
 800a108:	e7f9      	b.n	800a0fe <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a10a:	9b01      	ldr	r3, [sp, #4]
 800a10c:	b963      	cbnz	r3, 800a128 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a10e:	b145      	cbz	r5, 800a122 <xQueueSemaphoreTake+0x76>
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	e7fe      	b.n	800a120 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 800a122:	f7ff fb11 	bl	8009748 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a126:	e05e      	b.n	800a1e6 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800a128:	b916      	cbnz	r6, 800a130 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a12a:	a802      	add	r0, sp, #8
 800a12c:	f000 fd68 	bl	800ac00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a130:	f7ff fb0a 	bl	8009748 <vPortExitCritical>
		vTaskSuspendAll();
 800a134:	f000 fb00 	bl	800a738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a138:	f7ff fae4 	bl	8009704 <vPortEnterCritical>
 800a13c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a140:	2bff      	cmp	r3, #255	; 0xff
 800a142:	d101      	bne.n	800a148 <xQueueSemaphoreTake+0x9c>
 800a144:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a148:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a14c:	2bff      	cmp	r3, #255	; 0xff
 800a14e:	d101      	bne.n	800a154 <xQueueSemaphoreTake+0xa8>
 800a150:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a154:	f7ff faf8 	bl	8009748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a158:	a901      	add	r1, sp, #4
 800a15a:	a802      	add	r0, sp, #8
 800a15c:	f000 fd5c 	bl	800ac18 <xTaskCheckForTimeOut>
 800a160:	2800      	cmp	r0, #0
 800a162:	d14a      	bne.n	800a1fa <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a164:	4620      	mov	r0, r4
 800a166:	f7ff fc15 	bl	8009994 <prvIsQueueEmpty>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d03f      	beq.n	800a1ee <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	b93b      	cbnz	r3, 800a182 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 800a172:	f7ff fac7 	bl	8009704 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a176:	68a0      	ldr	r0, [r4, #8]
 800a178:	f000 fda0 	bl	800acbc <xTaskPriorityInherit>
 800a17c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a17e:	f7ff fae3 	bl	8009748 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a182:	9901      	ldr	r1, [sp, #4]
 800a184:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a188:	f000 fcbe 	bl	800ab08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a18c:	4620      	mov	r0, r4
 800a18e:	f7ff fc56 	bl	8009a3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a192:	f000 fb75 	bl	800a880 <xTaskResumeAll>
 800a196:	b938      	cbnz	r0, 800a1a8 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800a198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a19c:	f8c8 3000 	str.w	r3, [r8]
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a1aa:	f7ff faab 	bl	8009704 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a1ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0aa      	beq.n	800a10a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	b913      	cbnz	r3, 800a1c2 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a1bc:	f000 fe56 	bl	800ae6c <pvTaskIncrementMutexHeldCount>
 800a1c0:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	b163      	cbz	r3, 800a1e0 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c6:	f104 0010 	add.w	r0, r4, #16
 800a1ca:	f000 fcd5 	bl	800ab78 <xTaskRemoveFromEventList>
 800a1ce:	b138      	cbz	r0, 800a1e0 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800a1d0:	4b17      	ldr	r3, [pc, #92]	; (800a230 <xQueueSemaphoreTake+0x184>)
 800a1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800a1e0:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800a1e2:	f7ff fab1 	bl	8009748 <vPortExitCritical>
}
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	b004      	add	sp, #16
 800a1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f7ff fc25 	bl	8009a3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1f4:	f000 fb44 	bl	800a880 <xTaskResumeAll>
 800a1f8:	e7d6      	b.n	800a1a8 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff fc1f 	bl	8009a3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a200:	f000 fb3e 	bl	800a880 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a204:	4620      	mov	r0, r4
 800a206:	f7ff fbc5 	bl	8009994 <prvIsQueueEmpty>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d0cc      	beq.n	800a1a8 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800a20e:	2d00      	cmp	r5, #0
 800a210:	d0e9      	beq.n	800a1e6 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800a212:	f7ff fa77 	bl	8009704 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a216:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a218:	b119      	cbz	r1, 800a222 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a21a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a21c:	6819      	ldr	r1, [r3, #0]
 800a21e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a222:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800a224:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a226:	f000 fdcf 	bl	800adc8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a22a:	f7ff fa8d 	bl	8009748 <vPortExitCritical>
 800a22e:	e7da      	b.n	800a1e6 <xQueueSemaphoreTake+0x13a>
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <xQueueReceiveFromISR>:
{
 800a234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a238:	4689      	mov	r9, r1
 800a23a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800a23c:	4605      	mov	r5, r0
 800a23e:	b940      	cbnz	r0, 800a252 <xQueueReceiveFromISR+0x1e>
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	e7fe      	b.n	800a250 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a252:	b951      	cbnz	r1, 800a26a <xQueueReceiveFromISR+0x36>
 800a254:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a256:	b143      	cbz	r3, 800a26a <xQueueReceiveFromISR+0x36>
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	e7fe      	b.n	800a268 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a26a:	f7ff fb65 	bl	8009938 <vPortValidateInterruptPriority>
	__asm volatile
 800a26e:	f3ef 8711 	mrs	r7, BASEPRI
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a282:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a284:	b31c      	cbz	r4, 800a2ce <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a286:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a28a:	4649      	mov	r1, r9
 800a28c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a28e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800a290:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a292:	f7ff fbbf 	bl	8009a14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a296:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a298:	1c73      	adds	r3, r6, #1
 800a29a:	d113      	bne.n	800a2c4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a29c:	692b      	ldr	r3, [r5, #16]
 800a29e:	b90b      	cbnz	r3, 800a2a4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	e00b      	b.n	800a2bc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2a4:	f105 0010 	add.w	r0, r5, #16
 800a2a8:	f000 fc66 	bl	800ab78 <xTaskRemoveFromEventList>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d0f7      	beq.n	800a2a0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800a2b0:	f1b8 0f00 	cmp.w	r8, #0
 800a2b4:	d0f4      	beq.n	800a2a0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a2bc:	f387 8811 	msr	BASEPRI, r7
}
 800a2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a2c4:	3601      	adds	r6, #1
 800a2c6:	b276      	sxtb	r6, r6
 800a2c8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800a2cc:	e7e8      	b.n	800a2a0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	e7f4      	b.n	800a2bc <xQueueReceiveFromISR+0x88>
	...

0800a2d4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2d4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2d6:	4a07      	ldr	r2, [pc, #28]	; (800a2f4 <vQueueAddToRegistry+0x20>)
	{
 800a2d8:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2da:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800a2de:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800a2e2:	b91d      	cbnz	r5, 800a2ec <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a2e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a2e8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a2ea:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d1f3      	bne.n	800a2da <vQueueAddToRegistry+0x6>
 800a2f2:	e7fa      	b.n	800a2ea <vQueueAddToRegistry+0x16>
 800a2f4:	24007200 	.word	0x24007200

0800a2f8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2f8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a2fa:	4909      	ldr	r1, [pc, #36]	; (800a320 <vQueueUnregisterQueue+0x28>)
	{
 800a2fc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a2fe:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800a302:	00dc      	lsls	r4, r3, #3
 800a304:	4282      	cmp	r2, r0
 800a306:	d106      	bne.n	800a316 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a308:	4a06      	ldr	r2, [pc, #24]	; (800a324 <vQueueUnregisterQueue+0x2c>)
 800a30a:	2100      	movs	r1, #0
 800a30c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a310:	4422      	add	r2, r4
 800a312:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a314:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a316:	3301      	adds	r3, #1
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d1f0      	bne.n	800a2fe <vQueueUnregisterQueue+0x6>
 800a31c:	e7fa      	b.n	800a314 <vQueueUnregisterQueue+0x1c>
 800a31e:	bf00      	nop
 800a320:	24007204 	.word	0x24007204
 800a324:	24007200 	.word	0x24007200

0800a328 <vQueueDelete>:
{
 800a328:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800a32a:	b940      	cbnz	r0, 800a33e <vQueueDelete+0x16>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	e7fe      	b.n	800a33c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800a33e:	f7ff ffdb 	bl	800a2f8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a342:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800a346:	b91b      	cbnz	r3, 800a350 <vQueueDelete+0x28>
}
 800a348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800a34c:	f7ff b8f6 	b.w	800953c <vPortFree>
}
 800a350:	bd10      	pop	{r4, pc}

0800a352 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a352:	b570      	push	{r4, r5, r6, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	460d      	mov	r5, r1
 800a358:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a35a:	f7ff f9d3 	bl	8009704 <vPortEnterCritical>
 800a35e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a362:	2bff      	cmp	r3, #255	; 0xff
 800a364:	d102      	bne.n	800a36c <vQueueWaitForMessageRestricted+0x1a>
 800a366:	2300      	movs	r3, #0
 800a368:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a36c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a370:	2bff      	cmp	r3, #255	; 0xff
 800a372:	d102      	bne.n	800a37a <vQueueWaitForMessageRestricted+0x28>
 800a374:	2300      	movs	r3, #0
 800a376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a37a:	f7ff f9e5 	bl	8009748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a37e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a380:	b92b      	cbnz	r3, 800a38e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a382:	4632      	mov	r2, r6
 800a384:	4629      	mov	r1, r5
 800a386:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a38a:	f000 fbd7 	bl	800ab3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a38e:	4620      	mov	r0, r4
	}
 800a390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800a394:	f7ff bb53 	b.w	8009a3e <prvUnlockQueue>

0800a398 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a39e:	f7ff f9b1 	bl	8009704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3a2:	4b2e      	ldr	r3, [pc, #184]	; (800a45c <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800a3a4:	4d2e      	ldr	r5, [pc, #184]	; (800a460 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	4f2e      	ldr	r7, [pc, #184]	; (800a464 <prvAddNewTaskToReadyList+0xcc>)
 800a3aa:	3201      	adds	r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a3ae:	682e      	ldr	r6, [r5, #0]
 800a3b0:	2e00      	cmp	r6, #0
 800a3b2:	d148      	bne.n	800a446 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3b4:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d11f      	bne.n	800a3fc <prvAddNewTaskToReadyList+0x64>
 800a3bc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3be:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	f7ff f8f9 	bl	80095b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3c6:	f108 0814 	add.w	r8, r8, #20
 800a3ca:	2e38      	cmp	r6, #56	; 0x38
 800a3cc:	d1f7      	bne.n	800a3be <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3ce:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a490 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800a3d2:	4e25      	ldr	r6, [pc, #148]	; (800a468 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	f7ff f8ef 	bl	80095b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7ff f8ec 	bl	80095b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3e0:	4822      	ldr	r0, [pc, #136]	; (800a46c <prvAddNewTaskToReadyList+0xd4>)
 800a3e2:	f7ff f8e9 	bl	80095b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3e6:	4822      	ldr	r0, [pc, #136]	; (800a470 <prvAddNewTaskToReadyList+0xd8>)
 800a3e8:	f7ff f8e6 	bl	80095b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3ec:	4821      	ldr	r0, [pc, #132]	; (800a474 <prvAddNewTaskToReadyList+0xdc>)
 800a3ee:	f7ff f8e3 	bl	80095b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3f2:	4b21      	ldr	r3, [pc, #132]	; (800a478 <prvAddNewTaskToReadyList+0xe0>)
 800a3f4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3f8:	4b20      	ldr	r3, [pc, #128]	; (800a47c <prvAddNewTaskToReadyList+0xe4>)
 800a3fa:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800a3fc:	4a20      	ldr	r2, [pc, #128]	; (800a480 <prvAddNewTaskToReadyList+0xe8>)
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	3301      	adds	r3, #1
 800a402:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a404:	4a1f      	ldr	r2, [pc, #124]	; (800a484 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a406:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a408:	6811      	ldr	r1, [r2, #0]
 800a40a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a40c:	428b      	cmp	r3, r1
 800a40e:	d900      	bls.n	800a412 <prvAddNewTaskToReadyList+0x7a>
 800a410:	6013      	str	r3, [r2, #0]
 800a412:	2014      	movs	r0, #20
 800a414:	1d21      	adds	r1, r4, #4
 800a416:	fb00 7003 	mla	r0, r0, r3, r7
 800a41a:	f7ff f8db 	bl	80095d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a41e:	f7ff f993 	bl	8009748 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a422:	4b19      	ldr	r3, [pc, #100]	; (800a488 <prvAddNewTaskToReadyList+0xf0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	b163      	cbz	r3, 800a442 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a42e:	429a      	cmp	r2, r3
 800a430:	d207      	bcs.n	800a442 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800a432:	4b16      	ldr	r3, [pc, #88]	; (800a48c <prvAddNewTaskToReadyList+0xf4>)
 800a434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	f3bf 8f6f 	isb	sy
}
 800a442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800a446:	4b10      	ldr	r3, [pc, #64]	; (800a488 <prvAddNewTaskToReadyList+0xf0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1d6      	bne.n	800a3fc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a44e:	682b      	ldr	r3, [r5, #0]
 800a450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a454:	429a      	cmp	r2, r3
 800a456:	d8d1      	bhi.n	800a3fc <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800a458:	602c      	str	r4, [r5, #0]
 800a45a:	e7cf      	b.n	800a3fc <prvAddNewTaskToReadyList+0x64>
 800a45c:	240069f4 	.word	0x240069f4
 800a460:	24006588 	.word	0x24006588
 800a464:	24006594 	.word	0x24006594
 800a468:	24006a1c 	.word	0x24006a1c
 800a46c:	24006a3c 	.word	0x24006a3c
 800a470:	24006a68 	.word	0x24006a68
 800a474:	24006a54 	.word	0x24006a54
 800a478:	2400658c 	.word	0x2400658c
 800a47c:	24006590 	.word	0x24006590
 800a480:	24006a00 	.word	0x24006a00
 800a484:	24006a04 	.word	0x24006a04
 800a488:	24006a50 	.word	0x24006a50
 800a48c:	e000ed04 	.word	0xe000ed04
 800a490:	24006a08 	.word	0x24006a08

0800a494 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a494:	4a06      	ldr	r2, [pc, #24]	; (800a4b0 <prvResetNextTaskUnblockTime+0x1c>)
 800a496:	6813      	ldr	r3, [r2, #0]
 800a498:	6819      	ldr	r1, [r3, #0]
 800a49a:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <prvResetNextTaskUnblockTime+0x20>)
 800a49c:	b919      	cbnz	r1, 800a4a6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a49e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4a2:	601a      	str	r2, [r3, #0]
	}
}
 800a4a4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a6:	6812      	ldr	r2, [r2, #0]
 800a4a8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4aa:	68d2      	ldr	r2, [r2, #12]
 800a4ac:	6852      	ldr	r2, [r2, #4]
 800a4ae:	e7f8      	b.n	800a4a2 <prvResetNextTaskUnblockTime+0xe>
 800a4b0:	2400658c 	.word	0x2400658c
 800a4b4:	24006a30 	.word	0x24006a30

0800a4b8 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4bc:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4c4:	21a5      	movs	r1, #165	; 0xa5
 800a4c6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4c8:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4ca:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a4ce:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a4d4:	f010 fe5e 	bl	801b194 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a4da:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4dc:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	d037      	beq.n	800a554 <prvInitialiseNewTask.isra.0+0x9c>
 800a4e4:	1e6b      	subs	r3, r5, #1
 800a4e6:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800a4ea:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4ec:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a4f0:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800a4f4:	7819      	ldrb	r1, [r3, #0]
 800a4f6:	b109      	cbz	r1, 800a4fc <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4f8:	42ab      	cmp	r3, r5
 800a4fa:	d1f7      	bne.n	800a4ec <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a502:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800a504:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a508:	1d20      	adds	r0, r4, #4
 800a50a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800a50c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800a510:	bf28      	it	cs
 800a512:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a514:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a516:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a518:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a51c:	f7ff f857 	bl	80095ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a520:	f104 0018 	add.w	r0, r4, #24
 800a524:	f7ff f853 	bl	80095ce <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800a528:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a52c:	463a      	mov	r2, r7
 800a52e:	4631      	mov	r1, r6
 800a530:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a532:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a534:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a536:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800a538:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a53c:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a540:	f7ff f8ba 	bl	80096b8 <pxPortInitialiseStack>
 800a544:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a546:	f1b8 0f00 	cmp.w	r8, #0
 800a54a:	d001      	beq.n	800a550 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a54c:	f8c8 4000 	str.w	r4, [r8]
}
 800a550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a554:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800a558:	e7d3      	b.n	800a502 <prvInitialiseNewTask.isra.0+0x4a>

0800a55a <prvDeleteTCB>:
	{
 800a55a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a55c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800a560:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a562:	b93b      	cbnz	r3, 800a574 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800a564:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a566:	f7fe ffe9 	bl	800953c <vPortFree>
				vPortFree( pxTCB );
 800a56a:	4620      	mov	r0, r4
	}
 800a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800a570:	f7fe bfe4 	b.w	800953c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a574:	2b01      	cmp	r3, #1
 800a576:	d0f9      	beq.n	800a56c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d008      	beq.n	800a58e <prvDeleteTCB+0x34>
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	e7fe      	b.n	800a58c <prvDeleteTCB+0x32>
	}
 800a58e:	bd10      	pop	{r4, pc}

0800a590 <prvIdleTask>:
{
 800a590:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a592:	4e14      	ldr	r6, [pc, #80]	; (800a5e4 <prvIdleTask+0x54>)
				taskYIELD();
 800a594:	4f14      	ldr	r7, [pc, #80]	; (800a5e8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a596:	4c15      	ldr	r4, [pc, #84]	; (800a5ec <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800a598:	4d15      	ldr	r5, [pc, #84]	; (800a5f0 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	b96b      	cbnz	r3, 800a5ba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a59e:	4b15      	ldr	r3, [pc, #84]	; (800a5f4 <prvIdleTask+0x64>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d906      	bls.n	800a5b4 <prvIdleTask+0x24>
				taskYIELD();
 800a5a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800a5b4:	f7f6 f8b8 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a5b8:	e7ed      	b.n	800a596 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800a5ba:	f7ff f8a3 	bl	8009704 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5be:	68f3      	ldr	r3, [r6, #12]
 800a5c0:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5c4:	f108 0004 	add.w	r0, r8, #4
 800a5c8:	f7ff f827 	bl	800961a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a5d8:	f7ff f8b6 	bl	8009748 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a5dc:	4640      	mov	r0, r8
 800a5de:	f7ff ffbc 	bl	800a55a <prvDeleteTCB>
 800a5e2:	e7da      	b.n	800a59a <prvIdleTask+0xa>
 800a5e4:	24006a68 	.word	0x24006a68
 800a5e8:	e000ed04 	.word	0xe000ed04
 800a5ec:	240069f8 	.word	0x240069f8
 800a5f0:	240069f4 	.word	0x240069f4
 800a5f4:	24006594 	.word	0x24006594

0800a5f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5fa:	4b16      	ldr	r3, [pc, #88]	; (800a654 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800a5fc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5fe:	4e16      	ldr	r6, [pc, #88]	; (800a658 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800a600:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800a602:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a604:	6830      	ldr	r0, [r6, #0]
 800a606:	3004      	adds	r0, #4
 800a608:	f7ff f807 	bl	800961a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a60c:	1c63      	adds	r3, r4, #1
 800a60e:	4633      	mov	r3, r6
 800a610:	d107      	bne.n	800a622 <prvAddCurrentTaskToDelayedList+0x2a>
 800a612:	b137      	cbz	r7, 800a622 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a614:	6831      	ldr	r1, [r6, #0]
 800a616:	4811      	ldr	r0, [pc, #68]	; (800a65c <prvAddCurrentTaskToDelayedList+0x64>)
 800a618:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a61a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a61e:	f7fe bfd9 	b.w	80095d4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a622:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800a628:	d307      	bcc.n	800a63a <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a62a:	4a0d      	ldr	r2, [pc, #52]	; (800a660 <prvAddCurrentTaskToDelayedList+0x68>)
 800a62c:	6810      	ldr	r0, [r2, #0]
 800a62e:	6819      	ldr	r1, [r3, #0]
}
 800a630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a634:	3104      	adds	r1, #4
 800a636:	f7fe bfd9 	b.w	80095ec <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a63a:	4a0a      	ldr	r2, [pc, #40]	; (800a664 <prvAddCurrentTaskToDelayedList+0x6c>)
 800a63c:	6810      	ldr	r0, [r2, #0]
 800a63e:	6819      	ldr	r1, [r3, #0]
 800a640:	3104      	adds	r1, #4
 800a642:	f7fe ffd3 	bl	80095ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <prvAddCurrentTaskToDelayedList+0x70>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	42a2      	cmp	r2, r4
 800a64c:	d900      	bls.n	800a650 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800a64e:	601c      	str	r4, [r3, #0]
}
 800a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a652:	bf00      	nop
 800a654:	24006a7c 	.word	0x24006a7c
 800a658:	24006588 	.word	0x24006588
 800a65c:	24006a54 	.word	0x24006a54
 800a660:	24006590 	.word	0x24006590
 800a664:	2400658c 	.word	0x2400658c
 800a668:	24006a30 	.word	0x24006a30

0800a66c <xTaskCreateStatic>:
	{
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a674:	b945      	cbnz	r5, 800a688 <xTaskCreateStatic+0x1c>
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	e7fe      	b.n	800a686 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a688:	b944      	cbnz	r4, 800a69c <xTaskCreateStatic+0x30>
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	e7fe      	b.n	800a69a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a69c:	2660      	movs	r6, #96	; 0x60
 800a69e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6a0:	9e05      	ldr	r6, [sp, #20]
 800a6a2:	2e60      	cmp	r6, #96	; 0x60
 800a6a4:	d008      	beq.n	800a6b8 <xTaskCreateStatic+0x4c>
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	e7fe      	b.n	800a6b6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6b8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6ba:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6bc:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6be:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6c2:	ad04      	add	r5, sp, #16
 800a6c4:	9402      	str	r4, [sp, #8]
 800a6c6:	9501      	str	r5, [sp, #4]
 800a6c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a6ca:	9500      	str	r5, [sp, #0]
 800a6cc:	f7ff fef4 	bl	800a4b8 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f7ff fe61 	bl	800a398 <prvAddNewTaskToReadyList>
	}
 800a6d6:	9804      	ldr	r0, [sp, #16]
 800a6d8:	b006      	add	sp, #24
 800a6da:	bd70      	pop	{r4, r5, r6, pc}

0800a6dc <xTaskCreate>:
	{
 800a6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6e4:	0090      	lsls	r0, r2, #2
	{
 800a6e6:	4688      	mov	r8, r1
 800a6e8:	4616      	mov	r6, r2
 800a6ea:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6ec:	f7fe fe94 	bl	8009418 <pvPortMalloc>
			if( pxStack != NULL )
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	b1e8      	cbz	r0, 800a730 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6f4:	2060      	movs	r0, #96	; 0x60
 800a6f6:	f7fe fe8f 	bl	8009418 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	b1a8      	cbz	r0, 800a72a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6fe:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800a700:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a702:	4632      	mov	r2, r6
 800a704:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a706:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a70c:	9002      	str	r0, [sp, #8]
 800a70e:	4638      	mov	r0, r7
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	464b      	mov	r3, r9
 800a718:	f7ff fece 	bl	800a4b8 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a71c:	4620      	mov	r0, r4
 800a71e:	f7ff fe3b 	bl	800a398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a722:	2001      	movs	r0, #1
	}
 800a724:	b005      	add	sp, #20
 800a726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a72a:	4628      	mov	r0, r5
 800a72c:	f7fe ff06 	bl	800953c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a730:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a734:	e7f6      	b.n	800a724 <xTaskCreate+0x48>
	...

0800a738 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a738:	4a02      	ldr	r2, [pc, #8]	; (800a744 <vTaskSuspendAll+0xc>)
 800a73a:	6813      	ldr	r3, [r2, #0]
 800a73c:	3301      	adds	r3, #1
 800a73e:	6013      	str	r3, [r2, #0]
}
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	240069fc 	.word	0x240069fc

0800a748 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a748:	4b01      	ldr	r3, [pc, #4]	; (800a750 <xTaskGetTickCount+0x8>)
 800a74a:	6818      	ldr	r0, [r3, #0]
}
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	24006a7c 	.word	0x24006a7c

0800a754 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a754:	4b3f      	ldr	r3, [pc, #252]	; (800a854 <xTaskIncrementTick+0x100>)
 800a756:	681b      	ldr	r3, [r3, #0]
{
 800a758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d172      	bne.n	800a846 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a760:	4b3d      	ldr	r3, [pc, #244]	; (800a858 <xTaskIncrementTick+0x104>)
 800a762:	681d      	ldr	r5, [r3, #0]
 800a764:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a766:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a768:	b9bd      	cbnz	r5, 800a79a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a76a:	4b3c      	ldr	r3, [pc, #240]	; (800a85c <xTaskIncrementTick+0x108>)
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	6812      	ldr	r2, [r2, #0]
 800a770:	b142      	cbz	r2, 800a784 <xTaskIncrementTick+0x30>
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	e7fe      	b.n	800a782 <xTaskIncrementTick+0x2e>
 800a784:	4a36      	ldr	r2, [pc, #216]	; (800a860 <xTaskIncrementTick+0x10c>)
 800a786:	6819      	ldr	r1, [r3, #0]
 800a788:	6810      	ldr	r0, [r2, #0]
 800a78a:	6018      	str	r0, [r3, #0]
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	4a35      	ldr	r2, [pc, #212]	; (800a864 <xTaskIncrementTick+0x110>)
 800a790:	6813      	ldr	r3, [r2, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	f7ff fe7d 	bl	800a494 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a79a:	4e33      	ldr	r6, [pc, #204]	; (800a868 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800a79c:	2400      	movs	r4, #0
 800a79e:	4f33      	ldr	r7, [pc, #204]	; (800a86c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7a0:	6833      	ldr	r3, [r6, #0]
 800a7a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a878 <xTaskIncrementTick+0x124>
 800a7a6:	429d      	cmp	r5, r3
 800a7a8:	d211      	bcs.n	800a7ce <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b0:	2314      	movs	r3, #20
 800a7b2:	4353      	muls	r3, r2
 800a7b4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800a7b6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800a7b8:	4b2d      	ldr	r3, [pc, #180]	; (800a870 <xTaskIncrementTick+0x11c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800a7bc:	bf28      	it	cs
 800a7be:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bf18      	it	ne
 800a7c4:	2401      	movne	r4, #1
}
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	b003      	add	sp, #12
 800a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a85c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800a7d2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a87c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7d6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	b91b      	cbnz	r3, 800a7e6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7de:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e2:	6033      	str	r3, [r6, #0]
					break;
 800a7e4:	e7e1      	b.n	800a7aa <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7e6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7f0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800a7f4:	4295      	cmp	r5, r2
 800a7f6:	d201      	bcs.n	800a7fc <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800a7f8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7fa:	e7d6      	b.n	800a7aa <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7fc:	f10b 0104 	add.w	r1, fp, #4
 800a800:	4608      	mov	r0, r1
 800a802:	9101      	str	r1, [sp, #4]
 800a804:	f7fe ff09 	bl	800961a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a808:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800a80c:	9901      	ldr	r1, [sp, #4]
 800a80e:	b122      	cbz	r2, 800a81a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a810:	f10b 0018 	add.w	r0, fp, #24
 800a814:	f7fe ff01 	bl	800961a <uxListRemove>
 800a818:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800a81a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800a81e:	f8da 2000 	ldr.w	r2, [sl]
 800a822:	4290      	cmp	r0, r2
 800a824:	d901      	bls.n	800a82a <xTaskIncrementTick+0xd6>
 800a826:	f8ca 0000 	str.w	r0, [sl]
 800a82a:	2314      	movs	r3, #20
 800a82c:	fb03 7000 	mla	r0, r3, r0, r7
 800a830:	f7fe fed0 	bl	80095d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a834:	f8d8 1000 	ldr.w	r1, [r8]
 800a838:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a83c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800a83e:	429a      	cmp	r2, r3
 800a840:	bf28      	it	cs
 800a842:	2401      	movcs	r4, #1
 800a844:	e7c7      	b.n	800a7d6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800a846:	4a0b      	ldr	r2, [pc, #44]	; (800a874 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800a848:	2400      	movs	r4, #0
		++xPendedTicks;
 800a84a:	6813      	ldr	r3, [r2, #0]
 800a84c:	3301      	adds	r3, #1
 800a84e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800a850:	e7b9      	b.n	800a7c6 <xTaskIncrementTick+0x72>
 800a852:	bf00      	nop
 800a854:	240069fc 	.word	0x240069fc
 800a858:	24006a7c 	.word	0x24006a7c
 800a85c:	2400658c 	.word	0x2400658c
 800a860:	24006590 	.word	0x24006590
 800a864:	24006a34 	.word	0x24006a34
 800a868:	24006a30 	.word	0x24006a30
 800a86c:	24006594 	.word	0x24006594
 800a870:	24006a80 	.word	0x24006a80
 800a874:	24006a38 	.word	0x24006a38
 800a878:	24006588 	.word	0x24006588
 800a87c:	24006a04 	.word	0x24006a04

0800a880 <xTaskResumeAll>:
{
 800a880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800a882:	4c30      	ldr	r4, [pc, #192]	; (800a944 <xTaskResumeAll+0xc4>)
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	b943      	cbnz	r3, 800a89a <xTaskResumeAll+0x1a>
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	e7fe      	b.n	800a898 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a89a:	f7fe ff33 	bl	8009704 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8a4:	6824      	ldr	r4, [r4, #0]
 800a8a6:	b12c      	cbz	r4, 800a8b4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800a8a8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a8aa:	f7fe ff4d 	bl	8009748 <vPortExitCritical>
}
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	b003      	add	sp, #12
 800a8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8b4:	4b24      	ldr	r3, [pc, #144]	; (800a948 <xTaskResumeAll+0xc8>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f5      	beq.n	800a8a8 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8bc:	4d23      	ldr	r5, [pc, #140]	; (800a94c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800a8be:	4e24      	ldr	r6, [pc, #144]	; (800a950 <xTaskResumeAll+0xd0>)
 800a8c0:	4f24      	ldr	r7, [pc, #144]	; (800a954 <xTaskResumeAll+0xd4>)
 800a8c2:	e01e      	b.n	800a902 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c4:	68eb      	ldr	r3, [r5, #12]
 800a8c6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8c8:	f104 0018 	add.w	r0, r4, #24
 800a8cc:	f7fe fea5 	bl	800961a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8d0:	1d21      	adds	r1, r4, #4
 800a8d2:	4608      	mov	r0, r1
 800a8d4:	9101      	str	r1, [sp, #4]
 800a8d6:	f7fe fea0 	bl	800961a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8dc:	6832      	ldr	r2, [r6, #0]
 800a8de:	9901      	ldr	r1, [sp, #4]
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d900      	bls.n	800a8e6 <xTaskResumeAll+0x66>
 800a8e4:	6033      	str	r3, [r6, #0]
 800a8e6:	2014      	movs	r0, #20
 800a8e8:	fb00 7003 	mla	r0, r0, r3, r7
 800a8ec:	f7fe fe72 	bl	80095d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8f0:	4b19      	ldr	r3, [pc, #100]	; (800a958 <xTaskResumeAll+0xd8>)
 800a8f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d302      	bcc.n	800a902 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800a8fc:	4b17      	ldr	r3, [pc, #92]	; (800a95c <xTaskResumeAll+0xdc>)
 800a8fe:	2201      	movs	r2, #1
 800a900:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a902:	682b      	ldr	r3, [r5, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1dd      	bne.n	800a8c4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800a908:	b10c      	cbz	r4, 800a90e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800a90a:	f7ff fdc3 	bl	800a494 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a90e:	4d14      	ldr	r5, [pc, #80]	; (800a960 <xTaskResumeAll+0xe0>)
 800a910:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a912:	b144      	cbz	r4, 800a926 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800a914:	4e11      	ldr	r6, [pc, #68]	; (800a95c <xTaskResumeAll+0xdc>)
 800a916:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a918:	f7ff ff1c 	bl	800a754 <xTaskIncrementTick>
 800a91c:	b100      	cbz	r0, 800a920 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800a91e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a920:	3c01      	subs	r4, #1
 800a922:	d1f9      	bne.n	800a918 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800a924:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a926:	4b0d      	ldr	r3, [pc, #52]	; (800a95c <xTaskResumeAll+0xdc>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0bc      	beq.n	800a8a8 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800a92e:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <xTaskResumeAll+0xe4>)
 800a930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a93e:	2401      	movs	r4, #1
 800a940:	e7b3      	b.n	800a8aa <xTaskResumeAll+0x2a>
 800a942:	bf00      	nop
 800a944:	240069fc 	.word	0x240069fc
 800a948:	240069f4 	.word	0x240069f4
 800a94c:	24006a3c 	.word	0x24006a3c
 800a950:	24006a04 	.word	0x24006a04
 800a954:	24006594 	.word	0x24006594
 800a958:	24006588 	.word	0x24006588
 800a95c:	24006a80 	.word	0x24006a80
 800a960:	24006a38 	.word	0x24006a38
 800a964:	e000ed04 	.word	0xe000ed04

0800a968 <vTaskDelay>:
	{
 800a968:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a96a:	b940      	cbnz	r0, 800a97e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800a96c:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <vTaskDelay+0x40>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	f3bf 8f6f 	isb	sy
	}
 800a97c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a97e:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <vTaskDelay+0x44>)
 800a980:	6819      	ldr	r1, [r3, #0]
 800a982:	b141      	cbz	r1, 800a996 <vTaskDelay+0x2e>
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	e7fe      	b.n	800a994 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a996:	f7ff fecf 	bl	800a738 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a99a:	f7ff fe2d 	bl	800a5f8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a99e:	f7ff ff6f 	bl	800a880 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d0e2      	beq.n	800a96c <vTaskDelay+0x4>
 800a9a6:	e7e9      	b.n	800a97c <vTaskDelay+0x14>
 800a9a8:	e000ed04 	.word	0xe000ed04
 800a9ac:	240069fc 	.word	0x240069fc

0800a9b0 <vTaskSetApplicationTaskTag>:
	{
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	460d      	mov	r5, r1
		if( xTask == NULL )
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	b908      	cbnz	r0, 800a9bc <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <vTaskSetApplicationTaskTag+0x1c>)
 800a9ba:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800a9bc:	f7fe fea2 	bl	8009704 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800a9c0:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800a9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800a9c6:	f7fe bebf 	b.w	8009748 <vPortExitCritical>
 800a9ca:	bf00      	nop
 800a9cc:	24006588 	.word	0x24006588

0800a9d0 <xTaskCallApplicationTaskHook>:
	{
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	4608      	mov	r0, r1
		if( xTask == NULL )
 800a9d4:	b90b      	cbnz	r3, 800a9da <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800a9d6:	4b03      	ldr	r3, [pc, #12]	; (800a9e4 <xTaskCallApplicationTaskHook+0x14>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800a9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9dc:	b103      	cbz	r3, 800a9e0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800a9de:	4718      	bx	r3
	}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	4770      	bx	lr
 800a9e4:	24006588 	.word	0x24006588

0800a9e8 <vTaskStartScheduler>:
{
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9ec:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ee:	aa07      	add	r2, sp, #28
 800a9f0:	a906      	add	r1, sp, #24
 800a9f2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9f8:	f7fe fcd2 	bl	80093a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9fc:	9b05      	ldr	r3, [sp, #20]
 800a9fe:	9a07      	ldr	r2, [sp, #28]
 800aa00:	9302      	str	r3, [sp, #8]
 800aa02:	9b06      	ldr	r3, [sp, #24]
 800aa04:	4917      	ldr	r1, [pc, #92]	; (800aa64 <vTaskStartScheduler+0x7c>)
 800aa06:	4818      	ldr	r0, [pc, #96]	; (800aa68 <vTaskStartScheduler+0x80>)
 800aa08:	e9cd 4300 	strd	r4, r3, [sp]
 800aa0c:	4623      	mov	r3, r4
 800aa0e:	f7ff fe2d 	bl	800a66c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800aa12:	b1d0      	cbz	r0, 800aa4a <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800aa14:	f000 fa88 	bl	800af28 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800aa18:	2801      	cmp	r0, #1
 800aa1a:	d118      	bne.n	800aa4e <vTaskStartScheduler+0x66>
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <vTaskStartScheduler+0x84>)
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 800aa32:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa36:	4b0e      	ldr	r3, [pc, #56]	; (800aa70 <vTaskStartScheduler+0x88>)
 800aa38:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa3a:	4b0e      	ldr	r3, [pc, #56]	; (800aa74 <vTaskStartScheduler+0x8c>)
 800aa3c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800aa3e:	4b0e      	ldr	r3, [pc, #56]	; (800aa78 <vTaskStartScheduler+0x90>)
 800aa40:	6818      	ldr	r0, [r3, #0]
 800aa42:	f7ff ffc5 	bl	800a9d0 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800aa46:	f7fe fef5 	bl	8009834 <xPortStartScheduler>
}
 800aa4a:	b008      	add	sp, #32
 800aa4c:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d1fb      	bne.n	800aa4a <vTaskStartScheduler+0x62>
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	e7fe      	b.n	800aa62 <vTaskStartScheduler+0x7a>
 800aa64:	0801d190 	.word	0x0801d190
 800aa68:	0800a591 	.word	0x0800a591
 800aa6c:	24006a30 	.word	0x24006a30
 800aa70:	24006a50 	.word	0x24006a50
 800aa74:	24006a7c 	.word	0x24006a7c
 800aa78:	24006588 	.word	0x24006588

0800aa7c <vTaskSwitchContext>:
{
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa7e:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <vTaskSwitchContext+0x78>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <vTaskSwitchContext+0x7c>)
 800aa84:	b112      	cbz	r2, 800aa8c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]
}
 800aa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800aa8c:	4e1b      	ldr	r6, [pc, #108]	; (800aafc <vTaskSwitchContext+0x80>)
 800aa8e:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 800aa90:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800aa92:	6830      	ldr	r0, [r6, #0]
 800aa94:	f7ff ff9c 	bl	800a9d0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa98:	4d19      	ldr	r5, [pc, #100]	; (800ab00 <vTaskSwitchContext+0x84>)
 800aa9a:	4a1a      	ldr	r2, [pc, #104]	; (800ab04 <vTaskSwitchContext+0x88>)
 800aa9c:	f04f 0c14 	mov.w	ip, #20
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	4617      	mov	r7, r2
 800aaa4:	fb0c f103 	mul.w	r1, ip, r3
 800aaa8:	5854      	ldr	r4, [r2, r1]
 800aaaa:	1850      	adds	r0, r2, r1
 800aaac:	b1ac      	cbz	r4, 800aada <vTaskSwitchContext+0x5e>
 800aaae:	6844      	ldr	r4, [r0, #4]
 800aab0:	3108      	adds	r1, #8
 800aab2:	6864      	ldr	r4, [r4, #4]
 800aab4:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800aab6:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab8:	4294      	cmp	r4, r2
 800aaba:	6044      	str	r4, [r0, #4]
 800aabc:	bf04      	itt	eq
 800aabe:	6862      	ldreq	r2, [r4, #4]
 800aac0:	6042      	streq	r2, [r0, #4]
 800aac2:	2214      	movs	r2, #20
 800aac4:	fb02 7203 	mla	r2, r2, r3, r7
 800aac8:	6852      	ldr	r2, [r2, #4]
 800aaca:	68d2      	ldr	r2, [r2, #12]
 800aacc:	6032      	str	r2, [r6, #0]
 800aace:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 800aad0:	6830      	ldr	r0, [r6, #0]
}
 800aad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800aad6:	f7ff bf7b 	b.w	800a9d0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aada:	b943      	cbnz	r3, 800aaee <vTaskSwitchContext+0x72>
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	e7fe      	b.n	800aaec <vTaskSwitchContext+0x70>
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	e7d8      	b.n	800aaa4 <vTaskSwitchContext+0x28>
 800aaf2:	bf00      	nop
 800aaf4:	240069fc 	.word	0x240069fc
 800aaf8:	24006a80 	.word	0x24006a80
 800aafc:	24006588 	.word	0x24006588
 800ab00:	24006a04 	.word	0x24006a04
 800ab04:	24006594 	.word	0x24006594

0800ab08 <vTaskPlaceOnEventList>:
{
 800ab08:	b510      	push	{r4, lr}
 800ab0a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ab0c:	b940      	cbnz	r0, 800ab20 <vTaskPlaceOnEventList+0x18>
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	e7fe      	b.n	800ab1e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab20:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <vTaskPlaceOnEventList+0x30>)
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	3118      	adds	r1, #24
 800ab26:	f7fe fd61 	bl	80095ec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	2101      	movs	r1, #1
}
 800ab2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab32:	f7ff bd61 	b.w	800a5f8 <prvAddCurrentTaskToDelayedList>
 800ab36:	bf00      	nop
 800ab38:	24006588 	.word	0x24006588

0800ab3c <vTaskPlaceOnEventListRestricted>:
	{
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	460d      	mov	r5, r1
 800ab40:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800ab42:	b940      	cbnz	r0, 800ab56 <vTaskPlaceOnEventListRestricted+0x1a>
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	e7fe      	b.n	800ab54 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab56:	4b07      	ldr	r3, [pc, #28]	; (800ab74 <vTaskPlaceOnEventListRestricted+0x38>)
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	3118      	adds	r1, #24
 800ab5c:	f7fe fd3a 	bl	80095d4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ab60:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab62:	4621      	mov	r1, r4
 800ab64:	bf0c      	ite	eq
 800ab66:	4628      	moveq	r0, r5
 800ab68:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ab6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab70:	f7ff bd42 	b.w	800a5f8 <prvAddCurrentTaskToDelayedList>
 800ab74:	24006588 	.word	0x24006588

0800ab78 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab78:	68c3      	ldr	r3, [r0, #12]
{
 800ab7a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ab7e:	b944      	cbnz	r4, 800ab92 <xTaskRemoveFromEventList+0x1a>
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	e7fe      	b.n	800ab90 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab92:	f104 0118 	add.w	r1, r4, #24
 800ab96:	4608      	mov	r0, r1
 800ab98:	9101      	str	r1, [sp, #4]
 800ab9a:	f7fe fd3e 	bl	800961a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab9e:	4b12      	ldr	r3, [pc, #72]	; (800abe8 <xTaskRemoveFromEventList+0x70>)
 800aba0:	9901      	ldr	r1, [sp, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	b9e3      	cbnz	r3, 800abe0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aba6:	1d21      	adds	r1, r4, #4
 800aba8:	4608      	mov	r0, r1
 800abaa:	9101      	str	r1, [sp, #4]
 800abac:	f7fe fd35 	bl	800961a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abb0:	4a0e      	ldr	r2, [pc, #56]	; (800abec <xTaskRemoveFromEventList+0x74>)
 800abb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800abb4:	6810      	ldr	r0, [r2, #0]
 800abb6:	9901      	ldr	r1, [sp, #4]
 800abb8:	4283      	cmp	r3, r0
 800abba:	d900      	bls.n	800abbe <xTaskRemoveFromEventList+0x46>
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	4a0c      	ldr	r2, [pc, #48]	; (800abf0 <xTaskRemoveFromEventList+0x78>)
 800abc0:	2014      	movs	r0, #20
 800abc2:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abc6:	f7fe fd05 	bl	80095d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abca:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <xTaskRemoveFromEventList+0x7c>)
 800abcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d906      	bls.n	800abe4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800abd6:	2001      	movs	r0, #1
 800abd8:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <xTaskRemoveFromEventList+0x80>)
 800abda:	6018      	str	r0, [r3, #0]
}
 800abdc:	b002      	add	sp, #8
 800abde:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abe0:	4806      	ldr	r0, [pc, #24]	; (800abfc <xTaskRemoveFromEventList+0x84>)
 800abe2:	e7f0      	b.n	800abc6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800abe4:	2000      	movs	r0, #0
	return xReturn;
 800abe6:	e7f9      	b.n	800abdc <xTaskRemoveFromEventList+0x64>
 800abe8:	240069fc 	.word	0x240069fc
 800abec:	24006a04 	.word	0x24006a04
 800abf0:	24006594 	.word	0x24006594
 800abf4:	24006588 	.word	0x24006588
 800abf8:	24006a80 	.word	0x24006a80
 800abfc:	24006a3c 	.word	0x24006a3c

0800ac00 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac00:	4b03      	ldr	r3, [pc, #12]	; (800ac10 <vTaskInternalSetTimeOutState+0x10>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac06:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <vTaskInternalSetTimeOutState+0x14>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6043      	str	r3, [r0, #4]
}
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	24006a34 	.word	0x24006a34
 800ac14:	24006a7c 	.word	0x24006a7c

0800ac18 <xTaskCheckForTimeOut>:
{
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	b940      	cbnz	r0, 800ac32 <xTaskCheckForTimeOut+0x1a>
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	e7fe      	b.n	800ac30 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ac32:	b941      	cbnz	r1, 800ac46 <xTaskCheckForTimeOut+0x2e>
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	e7fe      	b.n	800ac44 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ac46:	f7fe fd5d 	bl	8009704 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ac4a:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <xTaskCheckForTimeOut+0x70>)
 800ac4c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	d010      	beq.n	800ac76 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac54:	480d      	ldr	r0, [pc, #52]	; (800ac8c <xTaskCheckForTimeOut+0x74>)
 800ac56:	682e      	ldr	r6, [r5, #0]
 800ac58:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac5a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac5c:	4286      	cmp	r6, r0
 800ac5e:	d001      	beq.n	800ac64 <xTaskCheckForTimeOut+0x4c>
 800ac60:	428a      	cmp	r2, r1
 800ac62:	d90f      	bls.n	800ac84 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac64:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac66:	4283      	cmp	r3, r0
 800ac68:	d90a      	bls.n	800ac80 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ac6a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac6c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ac6e:	4413      	add	r3, r2
 800ac70:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac72:	f7ff ffc5 	bl	800ac00 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ac76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ac78:	f7fe fd66 	bl	8009748 <vPortExitCritical>
}
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ac84:	2401      	movs	r4, #1
 800ac86:	e7f7      	b.n	800ac78 <xTaskCheckForTimeOut+0x60>
 800ac88:	24006a7c 	.word	0x24006a7c
 800ac8c:	24006a34 	.word	0x24006a34

0800ac90 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ac90:	4b01      	ldr	r3, [pc, #4]	; (800ac98 <vTaskMissedYield+0x8>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
}
 800ac96:	4770      	bx	lr
 800ac98:	24006a80 	.word	0x24006a80

0800ac9c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <xTaskGetSchedulerState+0x18>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	b133      	cbz	r3, 800acb0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca2:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <xTaskGetSchedulerState+0x1c>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800aca8:	bf0c      	ite	eq
 800acaa:	2002      	moveq	r0, #2
 800acac:	2000      	movne	r0, #0
 800acae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800acb0:	2001      	movs	r0, #1
	}
 800acb2:	4770      	bx	lr
 800acb4:	24006a50 	.word	0x24006a50
 800acb8:	240069fc 	.word	0x240069fc

0800acbc <xTaskPriorityInherit>:
	{
 800acbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800acbe:	4604      	mov	r4, r0
 800acc0:	b348      	cbz	r0, 800ad16 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800acc2:	4a1c      	ldr	r2, [pc, #112]	; (800ad34 <xTaskPriorityInherit+0x78>)
 800acc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800acc6:	6811      	ldr	r1, [r2, #0]
 800acc8:	4616      	mov	r6, r2
 800acca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800accc:	428b      	cmp	r3, r1
 800acce:	d228      	bcs.n	800ad22 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800acd0:	6982      	ldr	r2, [r0, #24]
 800acd2:	2a00      	cmp	r2, #0
 800acd4:	db04      	blt.n	800ace0 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd6:	6832      	ldr	r2, [r6, #0]
 800acd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acda:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800acde:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ace0:	2214      	movs	r2, #20
 800ace2:	4d15      	ldr	r5, [pc, #84]	; (800ad38 <xTaskPriorityInherit+0x7c>)
 800ace4:	fb02 5303 	mla	r3, r2, r3, r5
 800ace8:	6962      	ldr	r2, [r4, #20]
 800acea:	429a      	cmp	r2, r3
 800acec:	d115      	bne.n	800ad1a <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acee:	1d21      	adds	r1, r4, #4
 800acf0:	4608      	mov	r0, r1
 800acf2:	9101      	str	r1, [sp, #4]
 800acf4:	f7fe fc91 	bl	800961a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800acf8:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800acfa:	4a10      	ldr	r2, [pc, #64]	; (800ad3c <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800acfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800acfe:	6810      	ldr	r0, [r2, #0]
 800ad00:	9901      	ldr	r1, [sp, #4]
 800ad02:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad04:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad06:	d900      	bls.n	800ad0a <xTaskPriorityInherit+0x4e>
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	2014      	movs	r0, #20
 800ad0c:	fb00 5003 	mla	r0, r0, r3, r5
 800ad10:	f7fe fc60 	bl	80095d4 <vListInsertEnd>
				xReturn = pdTRUE;
 800ad14:	2001      	movs	r0, #1
	}
 800ad16:	b002      	add	sp, #8
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad1a:	6833      	ldr	r3, [r6, #0]
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad20:	e7f8      	b.n	800ad14 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ad22:	6813      	ldr	r3, [r2, #0]
 800ad24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ad26:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	bf2c      	ite	cs
 800ad2c:	2000      	movcs	r0, #0
 800ad2e:	2001      	movcc	r0, #1
 800ad30:	e7f1      	b.n	800ad16 <xTaskPriorityInherit+0x5a>
 800ad32:	bf00      	nop
 800ad34:	24006588 	.word	0x24006588
 800ad38:	24006594 	.word	0x24006594
 800ad3c:	24006a04 	.word	0x24006a04

0800ad40 <xTaskPriorityDisinherit>:
	{
 800ad40:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800ad42:	b910      	cbnz	r0, 800ad4a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800ad44:	2000      	movs	r0, #0
	}
 800ad46:	b002      	add	sp, #8
 800ad48:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ad4a:	4b1c      	ldr	r3, [pc, #112]	; (800adbc <xTaskPriorityDisinherit+0x7c>)
 800ad4c:	681c      	ldr	r4, [r3, #0]
 800ad4e:	4284      	cmp	r4, r0
 800ad50:	d008      	beq.n	800ad64 <xTaskPriorityDisinherit+0x24>
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	e7fe      	b.n	800ad62 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad66:	b943      	cbnz	r3, 800ad7a <xTaskPriorityDisinherit+0x3a>
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	e7fe      	b.n	800ad78 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ad7c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad7e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ad80:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad82:	4291      	cmp	r1, r2
 800ad84:	d0de      	beq.n	800ad44 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1dc      	bne.n	800ad44 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad8a:	1d21      	adds	r1, r4, #4
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	9101      	str	r1, [sp, #4]
 800ad90:	f7fe fc43 	bl	800961a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800ad96:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad9c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad9e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ada0:	4a07      	ldr	r2, [pc, #28]	; (800adc0 <xTaskPriorityDisinherit+0x80>)
 800ada2:	6810      	ldr	r0, [r2, #0]
 800ada4:	4283      	cmp	r3, r0
 800ada6:	d900      	bls.n	800adaa <xTaskPriorityDisinherit+0x6a>
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	4a06      	ldr	r2, [pc, #24]	; (800adc4 <xTaskPriorityDisinherit+0x84>)
 800adac:	2014      	movs	r0, #20
 800adae:	fb00 2003 	mla	r0, r0, r3, r2
 800adb2:	f7fe fc0f 	bl	80095d4 <vListInsertEnd>
					xReturn = pdTRUE;
 800adb6:	2001      	movs	r0, #1
		return xReturn;
 800adb8:	e7c5      	b.n	800ad46 <xTaskPriorityDisinherit+0x6>
 800adba:	bf00      	nop
 800adbc:	24006588 	.word	0x24006588
 800adc0:	24006a04 	.word	0x24006a04
 800adc4:	24006594 	.word	0x24006594

0800adc8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800adc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800adca:	4604      	mov	r4, r0
 800adcc:	2800      	cmp	r0, #0
 800adce:	d044      	beq.n	800ae5a <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800add0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800add2:	b942      	cbnz	r2, 800ade6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	e7fe      	b.n	800ade4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ade6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ade8:	4299      	cmp	r1, r3
 800adea:	bf38      	it	cc
 800adec:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800adee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800adf0:	428b      	cmp	r3, r1
 800adf2:	d032      	beq.n	800ae5a <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800adf4:	2a01      	cmp	r2, #1
 800adf6:	d130      	bne.n	800ae5a <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800adf8:	4a19      	ldr	r2, [pc, #100]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800adfa:	6812      	ldr	r2, [r2, #0]
 800adfc:	4282      	cmp	r2, r0
 800adfe:	d108      	bne.n	800ae12 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	e7fe      	b.n	800ae10 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae12:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae14:	4d13      	ldr	r5, [pc, #76]	; (800ae64 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae16:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae18:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ae1c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae1e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae22:	bfa8      	it	ge
 800ae24:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae28:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae2a:	bfa8      	it	ge
 800ae2c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d113      	bne.n	800ae5a <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae32:	1d01      	adds	r1, r0, #4
 800ae34:	4608      	mov	r0, r1
 800ae36:	9101      	str	r1, [sp, #4]
 800ae38:	f7fe fbef 	bl	800961a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ae3c:	4a0a      	ldr	r2, [pc, #40]	; (800ae68 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800ae3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae40:	6810      	ldr	r0, [r2, #0]
 800ae42:	9901      	ldr	r1, [sp, #4]
 800ae44:	4283      	cmp	r3, r0
 800ae46:	d900      	bls.n	800ae4a <vTaskPriorityDisinheritAfterTimeout+0x82>
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	2014      	movs	r0, #20
 800ae4c:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ae50:	b003      	add	sp, #12
 800ae52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800ae56:	f7fe bbbd 	b.w	80095d4 <vListInsertEnd>
	}
 800ae5a:	b003      	add	sp, #12
 800ae5c:	bd30      	pop	{r4, r5, pc}
 800ae5e:	bf00      	nop
 800ae60:	24006588 	.word	0x24006588
 800ae64:	24006594 	.word	0x24006594
 800ae68:	24006a04 	.word	0x24006a04

0800ae6c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ae6c:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <pvTaskIncrementMutexHeldCount+0x14>)
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	b11a      	cbz	r2, 800ae7a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae72:	6819      	ldr	r1, [r3, #0]
 800ae74:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ae76:	3201      	adds	r2, #1
 800ae78:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800ae7a:	6818      	ldr	r0, [r3, #0]
	}
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	24006588 	.word	0x24006588

0800ae84 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ae86:	4c11      	ldr	r4, [pc, #68]	; (800aecc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ae88:	f7fe fc3c 	bl	8009704 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ae8c:	6825      	ldr	r5, [r4, #0]
 800ae8e:	b9bd      	cbnz	r5, 800aec0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae90:	4f0f      	ldr	r7, [pc, #60]	; (800aed0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ae92:	4e10      	ldr	r6, [pc, #64]	; (800aed4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7fe fb8f 	bl	80095b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7fe fb8c 	bl	80095b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aea0:	4b0d      	ldr	r3, [pc, #52]	; (800aed8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aea2:	4a0e      	ldr	r2, [pc, #56]	; (800aedc <prvCheckForValidListAndQueue+0x58>)
 800aea4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800aea6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aea8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <prvCheckForValidListAndQueue+0x5c>)
 800aeac:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aeae:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <prvCheckForValidListAndQueue+0x60>)
 800aeb0:	9500      	str	r5, [sp, #0]
 800aeb2:	f7fe fe3d 	bl	8009b30 <xQueueGenericCreateStatic>
 800aeb6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aeb8:	b110      	cbz	r0, 800aec0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aeba:	490b      	ldr	r1, [pc, #44]	; (800aee8 <prvCheckForValidListAndQueue+0x64>)
 800aebc:	f7ff fa0a 	bl	800a2d4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800aec0:	b003      	add	sp, #12
 800aec2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800aec6:	f7fe bc3f 	b.w	8009748 <vPortExitCritical>
 800aeca:	bf00      	nop
 800aecc:	24006ba8 	.word	0x24006ba8
 800aed0:	24006b2c 	.word	0x24006b2c
 800aed4:	24006b40 	.word	0x24006b40
 800aed8:	24006a84 	.word	0x24006a84
 800aedc:	24006a8c 	.word	0x24006a8c
 800aee0:	24006a88 	.word	0x24006a88
 800aee4:	24006b58 	.word	0x24006b58
 800aee8:	0801d195 	.word	0x0801d195

0800aeec <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800aeec:	4291      	cmp	r1, r2
{
 800aeee:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aef0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aef2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800aef4:	d80a      	bhi.n	800af0c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef6:	1ad2      	subs	r2, r2, r3
 800aef8:	6983      	ldr	r3, [r0, #24]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d20d      	bcs.n	800af1a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aefe:	1d01      	adds	r1, r0, #4
 800af00:	4b07      	ldr	r3, [pc, #28]	; (800af20 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af02:	6818      	ldr	r0, [r3, #0]
 800af04:	f7fe fb72 	bl	80095ec <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800af08:	2000      	movs	r0, #0
}
 800af0a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d201      	bcs.n	800af14 <prvInsertTimerInActiveList+0x28>
 800af10:	4299      	cmp	r1, r3
 800af12:	d202      	bcs.n	800af1a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af14:	1d01      	adds	r1, r0, #4
 800af16:	4b03      	ldr	r3, [pc, #12]	; (800af24 <prvInsertTimerInActiveList+0x38>)
 800af18:	e7f3      	b.n	800af02 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800af1a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800af1c:	e7f5      	b.n	800af0a <prvInsertTimerInActiveList+0x1e>
 800af1e:	bf00      	nop
 800af20:	24006a88 	.word	0x24006a88
 800af24:	24006a84 	.word	0x24006a84

0800af28 <xTimerCreateTimerTask>:
{
 800af28:	b510      	push	{r4, lr}
 800af2a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800af2c:	f7ff ffaa 	bl	800ae84 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800af30:	4b12      	ldr	r3, [pc, #72]	; (800af7c <xTimerCreateTimerTask+0x54>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	b1b3      	cbz	r3, 800af64 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af36:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af38:	aa07      	add	r2, sp, #28
 800af3a:	a906      	add	r1, sp, #24
 800af3c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af3e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af42:	f7fe fa39 	bl	80093b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af46:	9b05      	ldr	r3, [sp, #20]
 800af48:	9a07      	ldr	r2, [sp, #28]
 800af4a:	9302      	str	r3, [sp, #8]
 800af4c:	9b06      	ldr	r3, [sp, #24]
 800af4e:	490c      	ldr	r1, [pc, #48]	; (800af80 <xTimerCreateTimerTask+0x58>)
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	2302      	movs	r3, #2
 800af54:	480b      	ldr	r0, [pc, #44]	; (800af84 <xTimerCreateTimerTask+0x5c>)
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	4623      	mov	r3, r4
 800af5a:	f7ff fb87 	bl	800a66c <xTaskCreateStatic>
 800af5e:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <xTimerCreateTimerTask+0x60>)
 800af60:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800af62:	b940      	cbnz	r0, 800af76 <xTimerCreateTimerTask+0x4e>
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800af74:	e7fe      	b.n	800af74 <xTimerCreateTimerTask+0x4c>
}
 800af76:	2001      	movs	r0, #1
 800af78:	b008      	add	sp, #32
 800af7a:	bd10      	pop	{r4, pc}
 800af7c:	24006ba8 	.word	0x24006ba8
 800af80:	0801d19a 	.word	0x0801d19a
 800af84:	0800b05d 	.word	0x0800b05d
 800af88:	24006bac 	.word	0x24006bac

0800af8c <xTimerGenericCommand>:
{
 800af8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800af8e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800af90:	4604      	mov	r4, r0
{
 800af92:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800af94:	b940      	cbnz	r0, 800afa8 <xTimerGenericCommand+0x1c>
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	e7fe      	b.n	800afa6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800afa8:	4d0c      	ldr	r5, [pc, #48]	; (800afdc <xTimerGenericCommand+0x50>)
 800afaa:	6828      	ldr	r0, [r5, #0]
 800afac:	b178      	cbz	r0, 800afce <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afae:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afb0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afb2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afb6:	dc0c      	bgt.n	800afd2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afb8:	f7ff fe70 	bl	800ac9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afbc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afbe:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afc0:	4669      	mov	r1, sp
 800afc2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afc4:	bf0c      	ite	eq
 800afc6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afc8:	461a      	movne	r2, r3
 800afca:	f7fe fe67 	bl	8009c9c <xQueueGenericSend>
}
 800afce:	b004      	add	sp, #16
 800afd0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800afd2:	2300      	movs	r3, #0
 800afd4:	4669      	mov	r1, sp
 800afd6:	f7fe ff13 	bl	8009e00 <xQueueGenericSendFromISR>
 800afda:	e7f8      	b.n	800afce <xTimerGenericCommand+0x42>
 800afdc:	24006ba8 	.word	0x24006ba8

0800afe0 <prvSwitchTimerLists>:
{
 800afe0:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afe2:	4d1c      	ldr	r5, [pc, #112]	; (800b054 <prvSwitchTimerLists+0x74>)
{
 800afe4:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afe6:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	b92a      	cbnz	r2, 800affa <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 800afee:	4a1a      	ldr	r2, [pc, #104]	; (800b058 <prvSwitchTimerLists+0x78>)
 800aff0:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aff2:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800aff4:	6029      	str	r1, [r5, #0]
}
 800aff6:	b005      	add	sp, #20
 800aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800affa:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800affc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800affe:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b000:	1d21      	adds	r1, r4, #4
 800b002:	4608      	mov	r0, r1
 800b004:	9103      	str	r1, [sp, #12]
 800b006:	f7fe fb08 	bl	800961a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b00a:	6a23      	ldr	r3, [r4, #32]
 800b00c:	4620      	mov	r0, r4
 800b00e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b010:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b014:	9903      	ldr	r1, [sp, #12]
 800b016:	f013 0f04 	tst.w	r3, #4
 800b01a:	d0e5      	beq.n	800afe8 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b01c:	69a3      	ldr	r3, [r4, #24]
 800b01e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800b020:	429e      	cmp	r6, r3
 800b022:	d205      	bcs.n	800b030 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b024:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b026:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b028:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b02a:	f7fe fadf 	bl	80095ec <vListInsert>
 800b02e:	e7db      	b.n	800afe8 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b030:	2300      	movs	r3, #0
 800b032:	4632      	mov	r2, r6
 800b034:	4620      	mov	r0, r4
 800b036:	9700      	str	r7, [sp, #0]
 800b038:	4619      	mov	r1, r3
 800b03a:	f7ff ffa7 	bl	800af8c <xTimerGenericCommand>
				configASSERT( xResult );
 800b03e:	2800      	cmp	r0, #0
 800b040:	d1d2      	bne.n	800afe8 <prvSwitchTimerLists+0x8>
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	e7fe      	b.n	800b052 <prvSwitchTimerLists+0x72>
 800b054:	24006a84 	.word	0x24006a84
 800b058:	24006a88 	.word	0x24006a88

0800b05c <prvTimerTask>:
{
 800b05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b060:	4f77      	ldr	r7, [pc, #476]	; (800b240 <prvTimerTask+0x1e4>)
{
 800b062:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800b064:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800b250 <prvTimerTask+0x1f4>
 800b068:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	f8d3 b000 	ldr.w	fp, [r3]
 800b070:	f1bb 0f00 	cmp.w	fp, #0
 800b074:	d028      	beq.n	800b0c8 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b076:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b078:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b07a:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 800b07e:	4e71      	ldr	r6, [pc, #452]	; (800b244 <prvTimerTask+0x1e8>)
	vTaskSuspendAll();
 800b080:	f7ff fb5a 	bl	800a738 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800b084:	f7ff fb60 	bl	800a748 <xTaskGetTickCount>
 800b088:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800b08a:	6833      	ldr	r3, [r6, #0]
 800b08c:	46b0      	mov	r8, r6
 800b08e:	4298      	cmp	r0, r3
 800b090:	d31c      	bcc.n	800b0cc <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800b092:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b094:	b31c      	cbz	r4, 800b0de <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b096:	4b6c      	ldr	r3, [pc, #432]	; (800b248 <prvTimerTask+0x1ec>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681c      	ldr	r4, [r3, #0]
 800b09c:	fab4 f484 	clz	r4, r4
 800b0a0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b0a2:	4b6a      	ldr	r3, [pc, #424]	; (800b24c <prvTimerTask+0x1f0>)
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	ebab 0105 	sub.w	r1, fp, r5
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	f7ff f951 	bl	800a352 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b0b0:	f7ff fbe6 	bl	800a880 <xTaskResumeAll>
 800b0b4:	b978      	cbnz	r0, 800b0d6 <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800b0b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0ba:	f8ca 3000 	str.w	r3, [sl]
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	e006      	b.n	800b0d6 <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0c8:	2401      	movs	r4, #1
 800b0ca:	e7d8      	b.n	800b07e <prvTimerTask+0x22>
		prvSwitchTimerLists();
 800b0cc:	f7ff ff88 	bl	800afe0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800b0d0:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800b0d2:	f7ff fbd5 	bl	800a880 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0d6:	4e5d      	ldr	r6, [pc, #372]	; (800b24c <prvTimerTask+0x1f0>)
 800b0d8:	f04f 0b00 	mov.w	fp, #0
 800b0dc:	e035      	b.n	800b14a <prvTimerTask+0xee>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b0de:	4583      	cmp	fp, r0
 800b0e0:	d8df      	bhi.n	800b0a2 <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 800b0e2:	f7ff fbcd 	bl	800a880 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e6:	f8d9 3000 	ldr.w	r3, [r9]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0ee:	1d30      	adds	r0, r6, #4
 800b0f0:	f7fe fa93 	bl	800961a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0f4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800b0f8:	0758      	lsls	r0, r3, #29
 800b0fa:	d518      	bpl.n	800b12e <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0fc:	69b1      	ldr	r1, [r6, #24]
 800b0fe:	465b      	mov	r3, fp
 800b100:	462a      	mov	r2, r5
 800b102:	4630      	mov	r0, r6
 800b104:	4459      	add	r1, fp
 800b106:	f7ff fef1 	bl	800aeec <prvInsertTimerInActiveList>
 800b10a:	b1a0      	cbz	r0, 800b136 <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b10c:	4623      	mov	r3, r4
 800b10e:	465a      	mov	r2, fp
 800b110:	4621      	mov	r1, r4
 800b112:	4630      	mov	r0, r6
 800b114:	9400      	str	r4, [sp, #0]
 800b116:	f7ff ff39 	bl	800af8c <xTimerGenericCommand>
			configASSERT( xResult );
 800b11a:	b960      	cbnz	r0, 800b136 <prvTimerTask+0xda>
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	e7fe      	b.n	800b12c <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b12e:	f023 0301 	bic.w	r3, r3, #1
 800b132:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b136:	6a33      	ldr	r3, [r6, #32]
 800b138:	4630      	mov	r0, r6
 800b13a:	4798      	blx	r3
}
 800b13c:	e7cb      	b.n	800b0d6 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	9905      	ldr	r1, [sp, #20]
 800b142:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b144:	9b02      	ldr	r3, [sp, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	da0a      	bge.n	800b160 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b14a:	2200      	movs	r2, #0
 800b14c:	a902      	add	r1, sp, #8
 800b14e:	6830      	ldr	r0, [r6, #0]
 800b150:	f7fe ff0c 	bl	8009f6c <xQueueReceive>
 800b154:	2800      	cmp	r0, #0
 800b156:	d088      	beq.n	800b06a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b158:	9b02      	ldr	r3, [sp, #8]
 800b15a:	9804      	ldr	r0, [sp, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dbee      	blt.n	800b13e <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b160:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b162:	6963      	ldr	r3, [r4, #20]
 800b164:	b9a3      	cbnz	r3, 800b190 <prvTimerTask+0x134>
	xTimeNow = xTaskGetTickCount();
 800b166:	f7ff faef 	bl	800a748 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b16a:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800b16e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800b170:	4298      	cmp	r0, r3
 800b172:	d201      	bcs.n	800b178 <prvTimerTask+0x11c>
		prvSwitchTimerLists();
 800b174:	f7ff ff34 	bl	800afe0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800b17e:	2b09      	cmp	r3, #9
 800b180:	d8e3      	bhi.n	800b14a <prvTimerTask+0xee>
 800b182:	e8df f003 	tbb	[pc, r3]
 800b186:	0909      	.short	0x0909
 800b188:	543b3409 	.word	0x543b3409
 800b18c:	3b340909 	.word	0x3b340909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b190:	1d20      	adds	r0, r4, #4
 800b192:	f7fe fa42 	bl	800961a <uxListRemove>
 800b196:	e7e6      	b.n	800b166 <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b198:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b19c:	462a      	mov	r2, r5
 800b19e:	69a1      	ldr	r1, [r4, #24]
 800b1a0:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1a2:	f043 0301 	orr.w	r3, r3, #1
 800b1a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	4419      	add	r1, r3
 800b1ae:	f7ff fe9d 	bl	800aeec <prvInsertTimerInActiveList>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d0c9      	beq.n	800b14a <prvTimerTask+0xee>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1b6:	6a23      	ldr	r3, [r4, #32]
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b1c0:	0759      	lsls	r1, r3, #29
 800b1c2:	d5c2      	bpl.n	800b14a <prvTimerTask+0xee>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1c4:	69a2      	ldr	r2, [r4, #24]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9903      	ldr	r1, [sp, #12]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f8cd b000 	str.w	fp, [sp]
 800b1d0:	440a      	add	r2, r1
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	f7ff feda 	bl	800af8c <xTimerGenericCommand>
							configASSERT( xResult );
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d1b6      	bne.n	800b14a <prvTimerTask+0xee>
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	e7fe      	b.n	800b1ec <prvTimerTask+0x190>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1f2:	f023 0301 	bic.w	r3, r3, #1
 800b1f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b1fa:	e7a6      	b.n	800b14a <prvTimerTask+0xee>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1fc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b200:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b202:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b206:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b208:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b20c:	b941      	cbnz	r1, 800b220 <prvTimerTask+0x1c4>
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	e7fe      	b.n	800b21e <prvTimerTask+0x1c2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b220:	462b      	mov	r3, r5
 800b222:	462a      	mov	r2, r5
 800b224:	4429      	add	r1, r5
 800b226:	4620      	mov	r0, r4
 800b228:	f7ff fe60 	bl	800aeec <prvInsertTimerInActiveList>
					break;
 800b22c:	e78d      	b.n	800b14a <prvTimerTask+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b22e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b232:	079a      	lsls	r2, r3, #30
 800b234:	d4dd      	bmi.n	800b1f2 <prvTimerTask+0x196>
							vPortFree( pxTimer );
 800b236:	4620      	mov	r0, r4
 800b238:	f7fe f980 	bl	800953c <vPortFree>
 800b23c:	e785      	b.n	800b14a <prvTimerTask+0xee>
 800b23e:	bf00      	nop
 800b240:	24006a84 	.word	0x24006a84
 800b244:	24006b54 	.word	0x24006b54
 800b248:	24006a88 	.word	0x24006a88
 800b24c:	24006ba8 	.word	0x24006ba8
 800b250:	e000ed04 	.word	0xe000ed04

0800b254 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800b254:	8880      	ldrh	r0, [r0, #4]
 800b256:	4770      	bx	lr

0800b258 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800b258:	2300      	movs	r3, #0
 800b25a:	8083      	strh	r3, [r0, #4]
 800b25c:	4770      	bx	lr
	...

0800b260 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	6803      	ldr	r3, [r0, #0]
 800b264:	460e      	mov	r6, r1
 800b266:	2100      	movs	r1, #0
 800b268:	4605      	mov	r5, r0
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	4798      	blx	r3
 800b26e:	4604      	mov	r4, r0
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	4628      	mov	r0, r5
 800b274:	1b34      	subs	r4, r6, r4
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	b2a4      	uxth	r4, r4
 800b27a:	4798      	blx	r3
 800b27c:	88ab      	ldrh	r3, [r5, #4]
 800b27e:	fbb4 f4f0 	udiv	r4, r4, r0
 800b282:	42a3      	cmp	r3, r4
 800b284:	d805      	bhi.n	800b292 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800b286:	4b0e      	ldr	r3, [pc, #56]	; (800b2c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800b288:	211e      	movs	r1, #30
 800b28a:	4a0e      	ldr	r2, [pc, #56]	; (800b2c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800b28c:	480e      	ldr	r0, [pc, #56]	; (800b2c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800b28e:	f00f fef5 	bl	801b07c <__assert_func>
 800b292:	682b      	ldr	r3, [r5, #0]
 800b294:	2100      	movs	r1, #0
 800b296:	4628      	mov	r0, r5
 800b298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29a:	4798      	blx	r3
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	4607      	mov	r7, r0
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	4798      	blx	r3
 800b2a6:	1bf3      	subs	r3, r6, r7
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	fbb3 f2f0 	udiv	r2, r3, r0
 800b2ae:	fb02 3010 	mls	r0, r2, r0, r3
 800b2b2:	b118      	cbz	r0, 800b2bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800b2b4:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800b2b6:	211f      	movs	r1, #31
 800b2b8:	4a02      	ldr	r2, [pc, #8]	; (800b2c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800b2ba:	e7e7      	b.n	800b28c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800b2bc:	4620      	mov	r0, r4
 800b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c0:	0801d1a2 	.word	0x0801d1a2
 800b2c4:	0801d30e 	.word	0x0801d30e
 800b2c8:	0801d1b7 	.word	0x0801d1b7
 800b2cc:	0801d1e5 	.word	0x0801d1e5

0800b2d0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	6803      	ldr	r3, [r0, #0]
 800b2d4:	460d      	mov	r5, r1
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	4798      	blx	r3
 800b2dc:	4285      	cmp	r5, r0
 800b2de:	d905      	bls.n	800b2ec <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800b2e0:	4b0c      	ldr	r3, [pc, #48]	; (800b314 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800b2e2:	2130      	movs	r1, #48	; 0x30
 800b2e4:	4a0c      	ldr	r2, [pc, #48]	; (800b318 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800b2e6:	480d      	ldr	r0, [pc, #52]	; (800b31c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800b2e8:	f00f fec8 	bl	801b07c <__assert_func>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	88a5      	ldrh	r5, [r4, #4]
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	4798      	blx	r3
 800b2f6:	4285      	cmp	r5, r0
 800b2f8:	d303      	bcc.n	800b302 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800b2fa:	4b09      	ldr	r3, [pc, #36]	; (800b320 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800b2fc:	2131      	movs	r1, #49	; 0x31
 800b2fe:	4a06      	ldr	r2, [pc, #24]	; (800b318 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800b300:	e7f1      	b.n	800b2e6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	4620      	mov	r0, r4
 800b306:	88a1      	ldrh	r1, [r4, #4]
 800b308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30a:	4798      	blx	r3
 800b30c:	88a3      	ldrh	r3, [r4, #4]
 800b30e:	3301      	adds	r3, #1
 800b310:	80a3      	strh	r3, [r4, #4]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	0801d25f 	.word	0x0801d25f
 800b318:	0801d351 	.word	0x0801d351
 800b31c:	0801d1b7 	.word	0x0801d1b7
 800b320:	0801d276 	.word	0x0801d276

0800b324 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	6803      	ldr	r3, [r0, #0]
 800b328:	4616      	mov	r6, r2
 800b32a:	4604      	mov	r4, r0
 800b32c:	460d      	mov	r5, r1
 800b32e:	6a1b      	ldr	r3, [r3, #32]
 800b330:	4798      	blx	r3
 800b332:	4286      	cmp	r6, r0
 800b334:	d905      	bls.n	800b342 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800b336:	4b06      	ldr	r3, [pc, #24]	; (800b350 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800b338:	213a      	movs	r1, #58	; 0x3a
 800b33a:	4a06      	ldr	r2, [pc, #24]	; (800b354 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800b33c:	4806      	ldr	r0, [pc, #24]	; (800b358 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800b33e:	f00f fe9d 	bl	801b07c <__assert_func>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	4629      	mov	r1, r5
 800b346:	4620      	mov	r0, r4
 800b348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b34e:	4718      	bx	r3
 800b350:	0801d25f 	.word	0x0801d25f
 800b354:	0801d2c4 	.word	0x0801d2c4
 800b358:	0801d1b7 	.word	0x0801d1b7

0800b35c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800b35c:	4770      	bx	lr
	...

0800b360 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800b360:	4a02      	ldr	r2, [pc, #8]	; (800b36c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800b362:	6002      	str	r2, [r0, #0]
 800b364:	2200      	movs	r2, #0
 800b366:	8082      	strh	r2, [r0, #4]
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	0801d298 	.word	0x0801d298

0800b370 <_ZN8touchgfx9Container13getFirstChildEv>:
 800b370:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b372:	4770      	bx	lr

0800b374 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800b374:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b376:	2000      	movs	r0, #0
 800b378:	b12b      	cbz	r3, 800b386 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800b37a:	b920      	cbnz	r0, 800b386 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800b37c:	1a5a      	subs	r2, r3, r1
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	4250      	negs	r0, r2
 800b382:	4150      	adcs	r0, r2
 800b384:	e7f8      	b.n	800b378 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800b386:	4770      	bx	lr

0800b388 <_ZN8touchgfx9Container9removeAllEv>:
 800b388:	2200      	movs	r2, #0
 800b38a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b38c:	b123      	cbz	r3, 800b398 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800b38e:	6999      	ldr	r1, [r3, #24]
 800b390:	6281      	str	r1, [r0, #40]	; 0x28
 800b392:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800b396:	e7f8      	b.n	800b38a <_ZN8touchgfx9Container9removeAllEv+0x2>
 800b398:	4770      	bx	lr

0800b39a <_ZN8touchgfx9Container6unlinkEv>:
 800b39a:	2300      	movs	r3, #0
 800b39c:	6283      	str	r3, [r0, #40]	; 0x28
 800b39e:	4770      	bx	lr

0800b3a0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	8002      	strh	r2, [r0, #0]
 800b3a4:	8042      	strh	r2, [r0, #2]
 800b3a6:	8082      	strh	r2, [r0, #4]
 800b3a8:	80c2      	strh	r2, [r0, #6]
 800b3aa:	4770      	bx	lr

0800b3ac <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	4616      	mov	r6, r2
 800b3b2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b3b4:	b13c      	cbz	r4, 800b3c6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	4632      	mov	r2, r6
 800b3bc:	4629      	mov	r1, r5
 800b3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3c0:	4798      	blx	r3
 800b3c2:	69a4      	ldr	r4, [r4, #24]
 800b3c4:	e7f6      	b.n	800b3b4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}

0800b3c8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b3ce:	b134      	cbz	r4, 800b3de <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	4798      	blx	r3
 800b3da:	69a4      	ldr	r4, [r4, #24]
 800b3dc:	e7f7      	b.n	800b3ce <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800b3de:	bd38      	pop	{r3, r4, r5, pc}

0800b3e0 <_ZN8touchgfx9ContainerD1Ev>:
 800b3e0:	4770      	bx	lr

0800b3e2 <_ZN8touchgfx9ContainerD0Ev>:
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	212c      	movs	r1, #44	; 0x2c
 800b3e8:	f00f fd32 	bl	801ae50 <_ZdlPvj>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	bd10      	pop	{r4, pc}

0800b3f0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800b3f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3f2:	b19b      	cbz	r3, 800b41c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800b3f4:	428b      	cmp	r3, r1
 800b3f6:	d109      	bne.n	800b40c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800b3f8:	699a      	ldr	r2, [r3, #24]
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	6159      	str	r1, [r3, #20]
 800b3fe:	6282      	str	r2, [r0, #40]	; 0x28
 800b400:	b902      	cbnz	r2, 800b404 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800b402:	4770      	bx	lr
 800b404:	6199      	str	r1, [r3, #24]
 800b406:	4770      	bx	lr
 800b408:	4613      	mov	r3, r2
 800b40a:	b13a      	cbz	r2, 800b41c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	428a      	cmp	r2, r1
 800b410:	d1fa      	bne.n	800b408 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800b412:	698a      	ldr	r2, [r1, #24]
 800b414:	619a      	str	r2, [r3, #24]
 800b416:	2300      	movs	r3, #0
 800b418:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800b41c:	4770      	bx	lr

0800b41e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800b41e:	b410      	push	{r4}
 800b420:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b422:	4604      	mov	r4, r0
 800b424:	b92b      	cbnz	r3, 800b432 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800b426:	6803      	ldr	r3, [r0, #0]
 800b428:	4611      	mov	r1, r2
 800b42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b430:	4718      	bx	r3
 800b432:	b941      	cbnz	r1, 800b446 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800b434:	6193      	str	r3, [r2, #24]
 800b436:	6282      	str	r2, [r0, #40]	; 0x28
 800b438:	6154      	str	r4, [r2, #20]
 800b43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	4603      	mov	r3, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	d0f9      	beq.n	800b43a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800b446:	4299      	cmp	r1, r3
 800b448:	6998      	ldr	r0, [r3, #24]
 800b44a:	d1f9      	bne.n	800b440 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800b44c:	6190      	str	r0, [r2, #24]
 800b44e:	618a      	str	r2, [r1, #24]
 800b450:	e7f2      	b.n	800b438 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800b454 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800b454:	4288      	cmp	r0, r1
 800b456:	b508      	push	{r3, lr}
 800b458:	d105      	bne.n	800b466 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800b45a:	4b11      	ldr	r3, [pc, #68]	; (800b4a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800b45c:	2123      	movs	r1, #35	; 0x23
 800b45e:	4a11      	ldr	r2, [pc, #68]	; (800b4a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b460:	4811      	ldr	r0, [pc, #68]	; (800b4a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800b462:	f00f fe0b 	bl	801b07c <__assert_func>
 800b466:	694b      	ldr	r3, [r1, #20]
 800b468:	b11b      	cbz	r3, 800b472 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800b46a:	4b10      	ldr	r3, [pc, #64]	; (800b4ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800b46c:	2124      	movs	r1, #36	; 0x24
 800b46e:	4a0d      	ldr	r2, [pc, #52]	; (800b4a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b470:	e7f6      	b.n	800b460 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800b472:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800b476:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b478:	b913      	cbnz	r3, 800b480 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800b47a:	6281      	str	r1, [r0, #40]	; 0x28
 800b47c:	bd08      	pop	{r3, pc}
 800b47e:	4613      	mov	r3, r2
 800b480:	699a      	ldr	r2, [r3, #24]
 800b482:	b12a      	cbz	r2, 800b490 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800b484:	428b      	cmp	r3, r1
 800b486:	d1fa      	bne.n	800b47e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800b48a:	2135      	movs	r1, #53	; 0x35
 800b48c:	4a05      	ldr	r2, [pc, #20]	; (800b4a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b48e:	e7e7      	b.n	800b460 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800b490:	428b      	cmp	r3, r1
 800b492:	d103      	bne.n	800b49c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800b494:	4b06      	ldr	r3, [pc, #24]	; (800b4b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800b496:	2138      	movs	r1, #56	; 0x38
 800b498:	4a02      	ldr	r2, [pc, #8]	; (800b4a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800b49a:	e7e1      	b.n	800b460 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800b49c:	6199      	str	r1, [r3, #24]
 800b49e:	e7ed      	b.n	800b47c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800b4a0:	0801d38f 	.word	0x0801d38f
 800b4a4:	0801d4e4 	.word	0x0801d4e4
 800b4a8:	0801d3bb 	.word	0x0801d3bb
 800b4ac:	0801d3ee 	.word	0x0801d3ee
 800b4b0:	0801d424 	.word	0x0801d424

0800b4b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	461f      	mov	r7, r3
 800b4ba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b4be:	460d      	mov	r5, r1
 800b4c0:	4616      	mov	r6, r2
 800b4c2:	b103      	cbz	r3, 800b4c6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800b4c4:	6038      	str	r0, [r7, #0]
 800b4c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b4c8:	b314      	cbz	r4, 800b510 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800b4ca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b4ce:	b1eb      	cbz	r3, 800b50c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b4d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b4d4:	428d      	cmp	r5, r1
 800b4d6:	db19      	blt.n	800b50c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b4d8:	b289      	uxth	r1, r1
 800b4da:	8923      	ldrh	r3, [r4, #8]
 800b4dc:	440b      	add	r3, r1
 800b4de:	b21b      	sxth	r3, r3
 800b4e0:	429d      	cmp	r5, r3
 800b4e2:	da13      	bge.n	800b50c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b4e4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800b4e8:	4296      	cmp	r6, r2
 800b4ea:	db0f      	blt.n	800b50c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b4ec:	b292      	uxth	r2, r2
 800b4ee:	8963      	ldrh	r3, [r4, #10]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	b21b      	sxth	r3, r3
 800b4f4:	429e      	cmp	r6, r3
 800b4f6:	da09      	bge.n	800b50c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	1ab2      	subs	r2, r6, r2
 800b4fc:	1a69      	subs	r1, r5, r1
 800b4fe:	4620      	mov	r0, r4
 800b500:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800b504:	b212      	sxth	r2, r2
 800b506:	463b      	mov	r3, r7
 800b508:	b209      	sxth	r1, r1
 800b50a:	47c0      	blx	r8
 800b50c:	69a4      	ldr	r4, [r4, #24]
 800b50e:	e7db      	b.n	800b4c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b514 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800b514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	4c6d      	ldr	r4, [pc, #436]	; (800b6d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800b51a:	b0a1      	sub	sp, #132	; 0x84
 800b51c:	4606      	mov	r6, r0
 800b51e:	6824      	ldr	r4, [r4, #0]
 800b520:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800b522:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800b526:	2400      	movs	r4, #0
 800b528:	9303      	str	r3, [sp, #12]
 800b52a:	802c      	strh	r4, [r5, #0]
 800b52c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800b52e:	802c      	strh	r4, [r5, #0]
 800b530:	601c      	str	r4, [r3, #0]
 800b532:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800b536:	f7ff ffbd 	bl	800b4b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800b53a:	f1b9 0f03 	cmp.w	r9, #3
 800b53e:	f340 80c1 	ble.w	800b6c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800b542:	4631      	mov	r1, r6
 800b544:	a80c      	add	r0, sp, #48	; 0x30
 800b546:	f004 fff1 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b54a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800b54e:	9306      	str	r3, [sp, #24]
 800b550:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b554:	9307      	str	r3, [sp, #28]
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	f8d3 a000 	ldr.w	sl, [r3]
 800b55c:	f1ba 0f00 	cmp.w	sl, #0
 800b560:	f000 80b3 	beq.w	800b6ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800b564:	4651      	mov	r1, sl
 800b566:	a810      	add	r0, sp, #64	; 0x40
 800b568:	f004 ffe0 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b56c:	2002      	movs	r0, #2
 800b56e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800b572:	9b01      	ldr	r3, [sp, #4]
 800b574:	9a06      	ldr	r2, [sp, #24]
 800b576:	fb91 f1f0 	sdiv	r1, r1, r0
 800b57a:	189d      	adds	r5, r3, r2
 800b57c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800b580:	9a07      	ldr	r2, [sp, #28]
 800b582:	4419      	add	r1, r3
 800b584:	9b02      	ldr	r3, [sp, #8]
 800b586:	4413      	add	r3, r2
 800b588:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800b58c:	1a6d      	subs	r5, r5, r1
 800b58e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800b592:	fb92 f2f0 	sdiv	r2, r2, r0
 800b596:	440a      	add	r2, r1
 800b598:	1a9b      	subs	r3, r3, r2
 800b59a:	435b      	muls	r3, r3
 800b59c:	fb05 3505 	mla	r5, r5, r5, r3
 800b5a0:	4f4c      	ldr	r7, [pc, #304]	; (800b6d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800b5a2:	ac10      	add	r4, sp, #64	; 0x40
 800b5a4:	f1b9 0f0c 	cmp.w	r9, #12
 800b5a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b5b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5b4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800b5b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5bc:	f04f 0303 	mov.w	r3, #3
 800b5c0:	bfd8      	it	le
 800b5c2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800b5c6:	f04f 0400 	mov.w	r4, #0
 800b5ca:	f8cd 9000 	str.w	r9, [sp]
 800b5ce:	bfcc      	ite	gt
 800b5d0:	4698      	movgt	r8, r3
 800b5d2:	fb92 f8f3 	sdivle	r8, r2, r3
 800b5d6:	1c63      	adds	r3, r4, #1
 800b5d8:	aa10      	add	r2, sp, #64	; 0x40
 800b5da:	f004 0401 	and.w	r4, r4, #1
 800b5de:	f04f 0b00 	mov.w	fp, #0
 800b5e2:	9308      	str	r3, [sp, #32]
 800b5e4:	9b00      	ldr	r3, [sp, #0]
 800b5e6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800b5ea:	fb93 f3f8 	sdiv	r3, r3, r8
 800b5ee:	3404      	adds	r4, #4
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	9304      	str	r3, [sp, #16]
 800b5f4:	9a04      	ldr	r2, [sp, #16]
 800b5f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b5fa:	fb13 f302 	smulbb	r3, r3, r2
 800b5fe:	9a01      	ldr	r2, [sp, #4]
 800b600:	b29b      	uxth	r3, r3
 800b602:	1899      	adds	r1, r3, r2
 800b604:	9305      	str	r3, [sp, #20]
 800b606:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b60a:	b209      	sxth	r1, r1
 800b60c:	4299      	cmp	r1, r3
 800b60e:	db4d      	blt.n	800b6ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b610:	8932      	ldrh	r2, [r6, #8]
 800b612:	4413      	add	r3, r2
 800b614:	b21b      	sxth	r3, r3
 800b616:	4299      	cmp	r1, r3
 800b618:	da48      	bge.n	800b6ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b61a:	9b04      	ldr	r3, [sp, #16]
 800b61c:	6827      	ldr	r7, [r4, #0]
 800b61e:	fb17 f703 	smulbb	r7, r7, r3
 800b622:	9b02      	ldr	r3, [sp, #8]
 800b624:	b2bf      	uxth	r7, r7
 800b626:	18fa      	adds	r2, r7, r3
 800b628:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b62c:	b212      	sxth	r2, r2
 800b62e:	429a      	cmp	r2, r3
 800b630:	db3c      	blt.n	800b6ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b632:	8970      	ldrh	r0, [r6, #10]
 800b634:	4403      	add	r3, r0
 800b636:	b21b      	sxth	r3, r3
 800b638:	429a      	cmp	r2, r3
 800b63a:	da37      	bge.n	800b6ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b63c:	2300      	movs	r3, #0
 800b63e:	4630      	mov	r0, r6
 800b640:	930b      	str	r3, [sp, #44]	; 0x2c
 800b642:	ab0b      	add	r3, sp, #44	; 0x2c
 800b644:	f7ff ff36 	bl	800b4b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800b648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b64a:	b37a      	cbz	r2, 800b6ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b64c:	4552      	cmp	r2, sl
 800b64e:	d02d      	beq.n	800b6ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800b650:	4611      	mov	r1, r2
 800b652:	a80e      	add	r0, sp, #56	; 0x38
 800b654:	9209      	str	r2, [sp, #36]	; 0x24
 800b656:	f004 ff69 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b65a:	f04f 0e02 	mov.w	lr, #2
 800b65e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800b662:	9a06      	ldr	r2, [sp, #24]
 800b664:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800b668:	9b01      	ldr	r3, [sp, #4]
 800b66a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800b66e:	4413      	add	r3, r2
 800b670:	9a07      	ldr	r2, [sp, #28]
 800b672:	fb91 f1fe 	sdiv	r1, r1, lr
 800b676:	fb9c fcfe 	sdiv	ip, ip, lr
 800b67a:	4401      	add	r1, r0
 800b67c:	1a58      	subs	r0, r3, r1
 800b67e:	9b02      	ldr	r3, [sp, #8]
 800b680:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800b684:	4413      	add	r3, r2
 800b686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b688:	448c      	add	ip, r1
 800b68a:	eba3 030c 	sub.w	r3, r3, ip
 800b68e:	435b      	muls	r3, r3
 800b690:	fb00 3300 	mla	r3, r0, r0, r3
 800b694:	42ab      	cmp	r3, r5
 800b696:	d208      	bcs.n	800b6aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800b698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b69a:	461d      	mov	r5, r3
 800b69c:	9803      	ldr	r0, [sp, #12]
 800b69e:	6001      	str	r1, [r0, #0]
 800b6a0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b6a2:	9805      	ldr	r0, [sp, #20]
 800b6a4:	8008      	strh	r0, [r1, #0]
 800b6a6:	992b      	ldr	r1, [sp, #172]	; 0xac
 800b6a8:	800f      	strh	r7, [r1, #0]
 800b6aa:	4692      	mov	sl, r2
 800b6ac:	f10b 0b01 	add.w	fp, fp, #1
 800b6b0:	3408      	adds	r4, #8
 800b6b2:	f1bb 0f04 	cmp.w	fp, #4
 800b6b6:	d19d      	bne.n	800b5f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	9c08      	ldr	r4, [sp, #32]
 800b6bc:	444b      	add	r3, r9
 800b6be:	4544      	cmp	r4, r8
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	d188      	bne.n	800b5d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800b6c4:	b021      	add	sp, #132	; 0x84
 800b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ca:	f04f 35ff 	mov.w	r5, #4294967295
 800b6ce:	e767      	b.n	800b5a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800b6d0:	24006bbc 	.word	0x24006bbc
 800b6d4:	0801c188 	.word	0x0801c188

0800b6d8 <_ZN8touchgfx4RectaNERKS0_>:
 800b6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6dc:	f9b1 7000 	ldrsh.w	r7, [r1]
 800b6e0:	888c      	ldrh	r4, [r1, #4]
 800b6e2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800b6e6:	443c      	add	r4, r7
 800b6e8:	b2a4      	uxth	r4, r4
 800b6ea:	fa0f f884 	sxth.w	r8, r4
 800b6ee:	45c1      	cmp	r9, r8
 800b6f0:	da2f      	bge.n	800b752 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b6f2:	8882      	ldrh	r2, [r0, #4]
 800b6f4:	444a      	add	r2, r9
 800b6f6:	b292      	uxth	r2, r2
 800b6f8:	fa0f fe82 	sxth.w	lr, r2
 800b6fc:	4577      	cmp	r7, lr
 800b6fe:	da28      	bge.n	800b752 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b700:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800b704:	88cb      	ldrh	r3, [r1, #6]
 800b706:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800b70a:	442b      	add	r3, r5
 800b70c:	b21b      	sxth	r3, r3
 800b70e:	429e      	cmp	r6, r3
 800b710:	da1f      	bge.n	800b752 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b712:	88c3      	ldrh	r3, [r0, #6]
 800b714:	4433      	add	r3, r6
 800b716:	b29b      	uxth	r3, r3
 800b718:	fa0f fc83 	sxth.w	ip, r3
 800b71c:	4565      	cmp	r5, ip
 800b71e:	da18      	bge.n	800b752 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800b720:	454f      	cmp	r7, r9
 800b722:	bfb8      	it	lt
 800b724:	464f      	movlt	r7, r9
 800b726:	42b5      	cmp	r5, r6
 800b728:	bfb8      	it	lt
 800b72a:	4635      	movlt	r5, r6
 800b72c:	45f0      	cmp	r8, lr
 800b72e:	bfd8      	it	le
 800b730:	4622      	movle	r2, r4
 800b732:	1bd2      	subs	r2, r2, r7
 800b734:	8082      	strh	r2, [r0, #4]
 800b736:	884a      	ldrh	r2, [r1, #2]
 800b738:	88c9      	ldrh	r1, [r1, #6]
 800b73a:	8007      	strh	r7, [r0, #0]
 800b73c:	440a      	add	r2, r1
 800b73e:	8045      	strh	r5, [r0, #2]
 800b740:	b292      	uxth	r2, r2
 800b742:	b211      	sxth	r1, r2
 800b744:	458c      	cmp	ip, r1
 800b746:	bfa8      	it	ge
 800b748:	4613      	movge	r3, r2
 800b74a:	1b5b      	subs	r3, r3, r5
 800b74c:	80c3      	strh	r3, [r0, #6]
 800b74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b752:	2300      	movs	r3, #0
 800b754:	8003      	strh	r3, [r0, #0]
 800b756:	8043      	strh	r3, [r0, #2]
 800b758:	8083      	strh	r3, [r0, #4]
 800b75a:	80c3      	strh	r3, [r0, #6]
 800b75c:	e7f7      	b.n	800b74e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800b75e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800b75e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	dd06      	ble.n	800b774 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800b766:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b76a:	2800      	cmp	r0, #0
 800b76c:	bfcc      	ite	gt
 800b76e:	2000      	movgt	r0, #0
 800b770:	2001      	movle	r0, #1
 800b772:	4770      	bx	lr
 800b774:	2001      	movs	r0, #1
 800b776:	4770      	bx	lr

0800b778 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800b782:	8003      	strh	r3, [r0, #0]
 800b784:	8043      	strh	r3, [r0, #2]
 800b786:	8083      	strh	r3, [r0, #4]
 800b788:	80c3      	strh	r3, [r0, #6]
 800b78a:	2d00      	cmp	r5, #0
 800b78c:	d040      	beq.n	800b810 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800b78e:	1d28      	adds	r0, r5, #4
 800b790:	f7ff ffe5 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b794:	b988      	cbnz	r0, 800b7ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800b796:	4620      	mov	r0, r4
 800b798:	f7ff ffe1 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b79c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800b7a0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800b7a4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800b7a8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800b7ac:	b138      	cbz	r0, 800b7be <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800b7ae:	8022      	strh	r2, [r4, #0]
 800b7b0:	8063      	strh	r3, [r4, #2]
 800b7b2:	f8a4 e004 	strh.w	lr, [r4, #4]
 800b7b6:	f8a4 c006 	strh.w	ip, [r4, #6]
 800b7ba:	69ad      	ldr	r5, [r5, #24]
 800b7bc:	e7e5      	b.n	800b78a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800b7be:	f9b4 0000 	ldrsh.w	r0, [r4]
 800b7c2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b7c6:	4290      	cmp	r0, r2
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800b7ce:	460e      	mov	r6, r1
 800b7d0:	bfa8      	it	ge
 800b7d2:	4617      	movge	r7, r2
 800b7d4:	4299      	cmp	r1, r3
 800b7d6:	4472      	add	r2, lr
 800b7d8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800b7dc:	bfa8      	it	ge
 800b7de:	461e      	movge	r6, r3
 800b7e0:	4440      	add	r0, r8
 800b7e2:	4471      	add	r1, lr
 800b7e4:	4463      	add	r3, ip
 800b7e6:	b200      	sxth	r0, r0
 800b7e8:	8027      	strh	r7, [r4, #0]
 800b7ea:	b212      	sxth	r2, r2
 800b7ec:	8066      	strh	r6, [r4, #2]
 800b7ee:	b209      	sxth	r1, r1
 800b7f0:	b21b      	sxth	r3, r3
 800b7f2:	4290      	cmp	r0, r2
 800b7f4:	bfac      	ite	ge
 800b7f6:	ebc7 0200 	rsbge	r2, r7, r0
 800b7fa:	ebc7 0202 	rsblt	r2, r7, r2
 800b7fe:	4299      	cmp	r1, r3
 800b800:	bfac      	ite	ge
 800b802:	ebc6 0301 	rsbge	r3, r6, r1
 800b806:	ebc6 0303 	rsblt	r3, r6, r3
 800b80a:	80a2      	strh	r2, [r4, #4]
 800b80c:	80e3      	strh	r3, [r4, #6]
 800b80e:	e7d4      	b.n	800b7ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800b810:	4620      	mov	r0, r4
 800b812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b816 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800b816:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b81a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b81e:	b383      	cbz	r3, 800b882 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800b820:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b822:	b374      	cbz	r4, 800b882 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800b824:	f9b1 5000 	ldrsh.w	r5, [r1]
 800b828:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800b82c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800b830:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800b834:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b838:	b303      	cbz	r3, 800b87c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800b83a:	4668      	mov	r0, sp
 800b83c:	1d21      	adds	r1, r4, #4
 800b83e:	f8ad 5000 	strh.w	r5, [sp]
 800b842:	f8ad 6002 	strh.w	r6, [sp, #2]
 800b846:	f8ad 7004 	strh.w	r7, [sp, #4]
 800b84a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800b84e:	f7ff ff43 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800b852:	4668      	mov	r0, sp
 800b854:	f7ff ff83 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b858:	b980      	cbnz	r0, 800b87c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800b85a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b85e:	4669      	mov	r1, sp
 800b860:	88a2      	ldrh	r2, [r4, #4]
 800b862:	4620      	mov	r0, r4
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	88e2      	ldrh	r2, [r4, #6]
 800b868:	f8ad 3000 	strh.w	r3, [sp]
 800b86c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b870:	1a9b      	subs	r3, r3, r2
 800b872:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	4798      	blx	r3
 800b87c:	69a4      	ldr	r4, [r4, #24]
 800b87e:	2c00      	cmp	r4, #0
 800b880:	d1d8      	bne.n	800b834 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800b882:	b002      	add	sp, #8
 800b884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b888 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800b888:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b88a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b88e:	460d      	mov	r5, r1
 800b890:	4616      	mov	r6, r2
 800b892:	b323      	cbz	r3, 800b8de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b894:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b896:	b314      	cbz	r4, 800b8de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b898:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b89c:	b1eb      	cbz	r3, 800b8da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b89e:	6828      	ldr	r0, [r5, #0]
 800b8a0:	466b      	mov	r3, sp
 800b8a2:	6869      	ldr	r1, [r5, #4]
 800b8a4:	c303      	stmia	r3!, {r0, r1}
 800b8a6:	4668      	mov	r0, sp
 800b8a8:	1d21      	adds	r1, r4, #4
 800b8aa:	f7ff ff15 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800b8ae:	4668      	mov	r0, sp
 800b8b0:	f7ff ff55 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800b8b4:	b988      	cbnz	r0, 800b8da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b8b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8ba:	4669      	mov	r1, sp
 800b8bc:	88a2      	ldrh	r2, [r4, #4]
 800b8be:	4620      	mov	r0, r4
 800b8c0:	1a9b      	subs	r3, r3, r2
 800b8c2:	88e2      	ldrh	r2, [r4, #6]
 800b8c4:	f8ad 3000 	strh.w	r3, [sp]
 800b8c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	4632      	mov	r2, r6
 800b8d0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d8:	4798      	blx	r3
 800b8da:	69a4      	ldr	r4, [r4, #24]
 800b8dc:	e7db      	b.n	800b896 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800b8de:	b002      	add	sp, #8
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}

0800b8e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800b8e2:	6803      	ldr	r3, [r0, #0]
 800b8e4:	b513      	push	{r0, r1, r4, lr}
 800b8e6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e9cd 3300 	strd	r3, r3, [sp]
 800b8f0:	466b      	mov	r3, sp
 800b8f2:	47a0      	blx	r4
 800b8f4:	b002      	add	sp, #8
 800b8f6:	bd10      	pop	{r4, pc}

0800b8f8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b8fe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b902:	4770      	bx	lr

0800b904 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800b904:	2301      	movs	r3, #1
 800b906:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b90a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b90e:	4770      	bx	lr

0800b910 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800b910:	6843      	ldr	r3, [r0, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	725a      	strb	r2, [r3, #9]
 800b916:	6840      	ldr	r0, [r0, #4]
 800b918:	6803      	ldr	r3, [r0, #0]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	4718      	bx	r3

0800b91e <_ZN8touchgfx3HAL8flushDMAEv>:
 800b91e:	6840      	ldr	r0, [r0, #4]
 800b920:	6803      	ldr	r3, [r0, #0]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	4718      	bx	r3

0800b926 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800b926:	b530      	push	{r4, r5, lr}
 800b928:	b08b      	sub	sp, #44	; 0x2c
 800b92a:	6804      	ldr	r4, [r0, #0]
 800b92c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800b930:	9509      	str	r5, [sp, #36]	; 0x24
 800b932:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800b936:	9508      	str	r5, [sp, #32]
 800b938:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800b93c:	9507      	str	r5, [sp, #28]
 800b93e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800b942:	9506      	str	r5, [sp, #24]
 800b944:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800b948:	9505      	str	r5, [sp, #20]
 800b94a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800b94e:	9504      	str	r5, [sp, #16]
 800b950:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800b954:	9503      	str	r5, [sp, #12]
 800b956:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800b95a:	9502      	str	r5, [sp, #8]
 800b95c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800b960:	e9cd 3500 	strd	r3, r5, [sp]
 800b964:	4613      	mov	r3, r2
 800b966:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800b968:	2200      	movs	r2, #0
 800b96a:	47a0      	blx	r4
 800b96c:	b00b      	add	sp, #44	; 0x2c
 800b96e:	bd30      	pop	{r4, r5, pc}

0800b970 <_ZN8touchgfx3HAL10beginFrameEv>:
 800b970:	4b04      	ldr	r3, [pc, #16]	; (800b984 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	b123      	cbz	r3, 800b980 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800b976:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800b97a:	f080 0001 	eor.w	r0, r0, #1
 800b97e:	4770      	bx	lr
 800b980:	2001      	movs	r0, #1
 800b982:	4770      	bx	lr
 800b984:	24006bba 	.word	0x24006bba

0800b988 <_ZN8touchgfx3HAL8endFrameEv>:
 800b988:	b510      	push	{r4, lr}
 800b98a:	4604      	mov	r4, r0
 800b98c:	6840      	ldr	r0, [r0, #4]
 800b98e:	6803      	ldr	r3, [r0, #0]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	4798      	blx	r3
 800b994:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800b998:	b113      	cbz	r3, 800b9a0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800b99a:	2301      	movs	r3, #1
 800b99c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b9a0:	bd10      	pop	{r4, pc}

0800b9a2 <_ZN8touchgfx3HAL10initializeEv>:
 800b9a2:	b510      	push	{r4, lr}
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	f7f6 f9db 	bl	8001d60 <_ZN8touchgfx10OSWrappers10initializeEv>
 800b9aa:	6860      	ldr	r0, [r4, #4]
 800b9ac:	6803      	ldr	r3, [r0, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	4798      	blx	r3
 800b9b2:	68e0      	ldr	r0, [r4, #12]
 800b9b4:	6803      	ldr	r3, [r0, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	4798      	blx	r3
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	4620      	mov	r0, r4
 800b9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c4:	4718      	bx	r3
	...

0800b9c8 <_ZN8touchgfx3HAL4tickEv>:
 800b9c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b9ca:	6803      	ldr	r3, [r0, #0]
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	4d5c      	ldr	r5, [pc, #368]	; (800bb40 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800b9d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9d4:	4798      	blx	r3
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f000 8097 	beq.w	800bb0a <_ZN8touchgfx3HAL4tickEv+0x142>
 800b9dc:	2001      	movs	r0, #1
 800b9de:	2600      	movs	r6, #0
 800b9e0:	f7f6 f83c 	bl	8001a5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b9e4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800b9e8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800b9ec:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b9f0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b9f4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800b9f8:	b133      	cbz	r3, 800ba08 <_ZN8touchgfx3HAL4tickEv+0x40>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba02:	4798      	blx	r3
 800ba04:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800ba08:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800ba0c:	2601      	movs	r6, #1
 800ba0e:	6862      	ldr	r2, [r4, #4]
 800ba10:	f083 0301 	eor.w	r3, r3, #1
 800ba14:	702e      	strb	r6, [r5, #0]
 800ba16:	7253      	strb	r3, [r2, #9]
 800ba18:	f003 fd6e 	bl	800f4f8 <_ZN8touchgfx11Application11getInstanceEv>
 800ba1c:	6803      	ldr	r3, [r0, #0]
 800ba1e:	4631      	mov	r1, r6
 800ba20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba22:	4798      	blx	r3
 800ba24:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800ba28:	b90b      	cbnz	r3, 800ba2e <_ZN8touchgfx3HAL4tickEv+0x66>
 800ba2a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800ba2e:	f003 fd63 	bl	800f4f8 <_ZN8touchgfx11Application11getInstanceEv>
 800ba32:	6803      	ldr	r3, [r0, #0]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	4798      	blx	r3
 800ba38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba3a:	6803      	ldr	r3, [r0, #0]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	4798      	blx	r3
 800ba40:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800ba44:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ba50:	b10a      	cbz	r2, 800ba56 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1eb      	bne.n	800ba2e <_ZN8touchgfx3HAL4tickEv+0x66>
 800ba56:	4a3b      	ldr	r2, [pc, #236]	; (800bb44 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ba58:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800ba5c:	7813      	ldrb	r3, [r2, #0]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	b25b      	sxtb	r3, r3
 800ba62:	4299      	cmp	r1, r3
 800ba64:	7013      	strb	r3, [r2, #0]
 800ba66:	dc10      	bgt.n	800ba8a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	68e0      	ldr	r0, [r4, #12]
 800ba6c:	a902      	add	r1, sp, #8
 800ba6e:	7013      	strb	r3, [r2, #0]
 800ba70:	aa03      	add	r2, sp, #12
 800ba72:	6803      	ldr	r3, [r0, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	4798      	blx	r3
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d051      	beq.n	800bb22 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800ba7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba82:	4620      	mov	r0, r4
 800ba84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ba88:	4798      	blx	r3
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	6960      	ldr	r0, [r4, #20]
 800ba8e:	f88d 3007 	strb.w	r3, [sp, #7]
 800ba92:	b158      	cbz	r0, 800baac <_ZN8touchgfx3HAL4tickEv+0xe4>
 800ba94:	6803      	ldr	r3, [r0, #0]
 800ba96:	f10d 0107 	add.w	r1, sp, #7
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	4798      	blx	r3
 800ba9e:	b128      	cbz	r0, 800baac <_ZN8touchgfx3HAL4tickEv+0xe4>
 800baa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baa2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800baa6:	6803      	ldr	r3, [r0, #0]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	4798      	blx	r3
 800baac:	f104 001c 	add.w	r0, r4, #28
 800bab0:	f00f f8f6 	bl	801aca0 <_ZN8touchgfx8Gestures4tickEv>
 800bab4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800bab8:	b30b      	cbz	r3, 800bafe <_ZN8touchgfx3HAL4tickEv+0x136>
 800baba:	6920      	ldr	r0, [r4, #16]
 800babc:	6803      	ldr	r3, [r0, #0]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	4798      	blx	r3
 800bac2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bac4:	4606      	mov	r6, r0
 800bac6:	b903      	cbnz	r3, 800baca <_ZN8touchgfx3HAL4tickEv+0x102>
 800bac8:	6720      	str	r0, [r4, #112]	; 0x70
 800baca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bacc:	4a1e      	ldr	r2, [pc, #120]	; (800bb48 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800bace:	1af3      	subs	r3, r6, r3
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d914      	bls.n	800bafe <_ZN8touchgfx3HAL4tickEv+0x136>
 800bad4:	6920      	ldr	r0, [r4, #16]
 800bad6:	6803      	ldr	r3, [r0, #0]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	4798      	blx	r3
 800badc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bade:	2264      	movs	r2, #100	; 0x64
 800bae0:	1af3      	subs	r3, r6, r3
 800bae2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bae6:	fbb0 f0f3 	udiv	r0, r0, r3
 800baea:	2800      	cmp	r0, #0
 800baec:	dc1e      	bgt.n	800bb2c <_ZN8touchgfx3HAL4tickEv+0x164>
 800baee:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800baf2:	6920      	ldr	r0, [r4, #16]
 800baf4:	2100      	movs	r1, #0
 800baf6:	6803      	ldr	r3, [r0, #0]
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	4798      	blx	r3
 800bafc:	6726      	str	r6, [r4, #112]	; 0x70
 800bafe:	f003 fcfb 	bl	800f4f8 <_ZN8touchgfx11Application11getInstanceEv>
 800bb02:	6803      	ldr	r3, [r0, #0]
 800bb04:	2100      	movs	r1, #0
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	4798      	blx	r3
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb12:	4798      	blx	r3
 800bb14:	2001      	movs	r0, #1
 800bb16:	f7f5 ffb9 	bl	8001a8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	702b      	strb	r3, [r5, #0]
 800bb1e:	b004      	add	sp, #16
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb26:	4620      	mov	r0, r4
 800bb28:	4798      	blx	r3
 800bb2a:	e7ae      	b.n	800ba8a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800bb2c:	2863      	cmp	r0, #99	; 0x63
 800bb2e:	bfcb      	itete	gt
 800bb30:	2300      	movgt	r3, #0
 800bb32:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800bb36:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800bb3a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800bb3e:	e7d8      	b.n	800baf2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800bb40:	24006bc0 	.word	0x24006bc0
 800bb44:	24006bc1 	.word	0x24006bc1
 800bb48:	05f5e100 	.word	0x05f5e100

0800bb4c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800bb4c:	f7f6 b938 	b.w	8001dc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800bb50 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800bb50:	6581      	str	r1, [r0, #88]	; 0x58
 800bb52:	301c      	adds	r0, #28
 800bb54:	f00f b8a2 	b.w	801ac9c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800bb58 <_ZN8touchgfx3HAL5touchEll>:
 800bb58:	b530      	push	{r4, r5, lr}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	a804      	add	r0, sp, #16
 800bb60:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800bb64:	f003 fa62 	bl	800f02c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	a906      	add	r1, sp, #24
 800bb6c:	a803      	add	r0, sp, #12
 800bb6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bb72:	9b05      	ldr	r3, [sp, #20]
 800bb74:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800bb78:	f003 faaa 	bl	800f0d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800bb7c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800bb80:	f104 001c 	add.w	r0, r4, #28
 800bb84:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800bb88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800bb8c:	b189      	cbz	r1, 800bbb2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800bb8e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	4613      	mov	r3, r2
 800bb96:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	f00f f88e 	bl	801acbc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800bba0:	b128      	cbz	r0, 800bbae <_ZN8touchgfx3HAL5touchEll+0x56>
 800bba2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800bba6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800bba8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800bbac:	6623      	str	r3, [r4, #96]	; 0x60
 800bbae:	b007      	add	sp, #28
 800bbb0:	bd30      	pop	{r4, r5, pc}
 800bbb2:	f00f f8c7 	bl	801ad44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800bbbc:	e7f1      	b.n	800bba2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800bbbe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800bbbe:	b510      	push	{r4, lr}
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d046      	beq.n	800bc52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800bbc4:	ea81 0002 	eor.w	r0, r1, r2
 800bbc8:	07c4      	lsls	r4, r0, #31
 800bbca:	d508      	bpl.n	800bbde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800bbcc:	440b      	add	r3, r1
 800bbce:	3a01      	subs	r2, #1
 800bbd0:	428b      	cmp	r3, r1
 800bbd2:	d93e      	bls.n	800bc52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800bbd4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800bbd8:	f801 0b01 	strb.w	r0, [r1], #1
 800bbdc:	e7f8      	b.n	800bbd0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800bbde:	07d0      	lsls	r0, r2, #31
 800bbe0:	bf42      	ittt	mi
 800bbe2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800bbe6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800bbea:	f801 0b01 	strbmi.w	r0, [r1], #1
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d911      	bls.n	800bc16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800bbf2:	ea81 0402 	eor.w	r4, r1, r2
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	07a4      	lsls	r4, r4, #30
 800bbfa:	d022      	beq.n	800bc42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800bbfc:	f023 0401 	bic.w	r4, r3, #1
 800bc00:	440c      	add	r4, r1
 800bc02:	428c      	cmp	r4, r1
 800bc04:	4602      	mov	r2, r0
 800bc06:	d904      	bls.n	800bc12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800bc08:	8812      	ldrh	r2, [r2, #0]
 800bc0a:	3002      	adds	r0, #2
 800bc0c:	f821 2b02 	strh.w	r2, [r1], #2
 800bc10:	e7f7      	b.n	800bc02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800bc12:	f003 0301 	and.w	r3, r3, #1
 800bc16:	f023 0003 	bic.w	r0, r3, #3
 800bc1a:	4408      	add	r0, r1
 800bc1c:	4288      	cmp	r0, r1
 800bc1e:	4614      	mov	r4, r2
 800bc20:	d904      	bls.n	800bc2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800bc22:	6824      	ldr	r4, [r4, #0]
 800bc24:	3204      	adds	r2, #4
 800bc26:	f841 4b04 	str.w	r4, [r1], #4
 800bc2a:	e7f7      	b.n	800bc1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800bc2c:	f003 0303 	and.w	r3, r3, #3
 800bc30:	3a01      	subs	r2, #1
 800bc32:	440b      	add	r3, r1
 800bc34:	428b      	cmp	r3, r1
 800bc36:	d90c      	bls.n	800bc52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800bc38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800bc3c:	f801 0b01 	strb.w	r0, [r1], #1
 800bc40:	e7f8      	b.n	800bc34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800bc42:	0790      	lsls	r0, r2, #30
 800bc44:	d0e7      	beq.n	800bc16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800bc46:	f832 0b02 	ldrh.w	r0, [r2], #2
 800bc4a:	3b02      	subs	r3, #2
 800bc4c:	f821 0b02 	strh.w	r0, [r1], #2
 800bc50:	e7e1      	b.n	800bc16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800bc52:	2001      	movs	r0, #1
 800bc54:	bd10      	pop	{r4, pc}

0800bc56 <_ZN8touchgfx3HAL7noTouchEv>:
 800bc56:	b510      	push	{r4, lr}
 800bc58:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	b153      	cbz	r3, 800bc76 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800bc60:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800bc64:	2101      	movs	r1, #1
 800bc66:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800bc6a:	301c      	adds	r0, #28
 800bc6c:	f00f f86a 	bl	801ad44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800bc70:	2300      	movs	r3, #0
 800bc72:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800bc76:	bd10      	pop	{r4, pc}

0800bc78 <_ZN8touchgfx3HAL3lcdEv>:
 800bc78:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bc80:	b10a      	cbz	r2, 800bc86 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800bc82:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bc84:	b900      	cbnz	r0, 800bc88 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800bc86:	6898      	ldr	r0, [r3, #8]
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	24006bbc 	.word	0x24006bbc

0800bc90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800bc90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4604      	mov	r4, r0
 800bc96:	6980      	ldr	r0, [r0, #24]
 800bc98:	b085      	sub	sp, #20
 800bc9a:	460f      	mov	r7, r1
 800bc9c:	4690      	mov	r8, r2
 800bc9e:	4699      	mov	r9, r3
 800bca0:	b930      	cbnz	r0, 800bcb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800bca2:	4b1c      	ldr	r3, [pc, #112]	; (800bd14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800bca4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800bca8:	4a1b      	ldr	r2, [pc, #108]	; (800bd18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800bcaa:	481c      	ldr	r0, [pc, #112]	; (800bd1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800bcac:	f00f f9e6 	bl	801b07c <__assert_func>
 800bcb0:	ad04      	add	r5, sp, #16
 800bcb2:	2600      	movs	r6, #0
 800bcb4:	f845 6d04 	str.w	r6, [r5, #-4]!
 800bcb8:	6806      	ldr	r6, [r0, #0]
 800bcba:	9501      	str	r5, [sp, #4]
 800bcbc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800bcc0:	9500      	str	r5, [sp, #0]
 800bcc2:	6835      	ldr	r5, [r6, #0]
 800bcc4:	47a8      	blx	r5
 800bcc6:	4d16      	ldr	r5, [pc, #88]	; (800bd20 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800bcc8:	4606      	mov	r6, r0
 800bcca:	f8a5 9000 	strh.w	r9, [r5]
 800bcce:	f7ff ffd3 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800bcd2:	6803      	ldr	r3, [r0, #0]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	4798      	blx	r3
 800bcd8:	2801      	cmp	r0, #1
 800bcda:	d012      	beq.n	800bd02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800bcdc:	d306      	bcc.n	800bcec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800bcde:	280d      	cmp	r0, #13
 800bce0:	d80b      	bhi.n	800bcfa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800bce2:	4b10      	ldr	r3, [pc, #64]	; (800bd24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800bce4:	f240 1167 	movw	r1, #359	; 0x167
 800bce8:	4a0b      	ldr	r2, [pc, #44]	; (800bd18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800bcea:	e7de      	b.n	800bcaa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800bcec:	882b      	ldrh	r3, [r5, #0]
 800bcee:	fb08 7203 	mla	r2, r8, r3, r7
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800bcf8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	b005      	add	sp, #20
 800bcfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd02:	882a      	ldrh	r2, [r5, #0]
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	fb08 7202 	mla	r2, r8, r2, r7
 800bd0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800bd0e:	1a9a      	subs	r2, r3, r2
 800bd10:	63e2      	str	r2, [r4, #60]	; 0x3c
 800bd12:	e7f2      	b.n	800bcfa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800bd14:	0801d68c 	.word	0x0801d68c
 800bd18:	0801d94a 	.word	0x0801d94a
 800bd1c:	0801d6d1 	.word	0x0801d6d1
 800bd20:	24006bb6 	.word	0x24006bb6
 800bd24:	0801d6f7 	.word	0x0801d6f7

0800bd28 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800bd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd2a:	b08b      	sub	sp, #44	; 0x2c
 800bd2c:	4617      	mov	r7, r2
 800bd2e:	4604      	mov	r4, r0
 800bd30:	460e      	mov	r6, r1
 800bd32:	461d      	mov	r5, r3
 800bd34:	f7ff ffa0 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800bd38:	6803      	ldr	r3, [r0, #0]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	4798      	blx	r3
 800bd3e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800bd42:	9007      	str	r0, [sp, #28]
 800bd44:	4631      	mov	r1, r6
 800bd46:	6822      	ldr	r2, [r4, #0]
 800bd48:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800bd4c:	4b0c      	ldr	r3, [pc, #48]	; (800bd80 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800bd4e:	4620      	mov	r0, r4
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	9306      	str	r3, [sp, #24]
 800bd54:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800bd5e:	9304      	str	r3, [sp, #16]
 800bd60:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800bd64:	9303      	str	r3, [sp, #12]
 800bd66:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800bd6a:	9302      	str	r3, [sp, #8]
 800bd6c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800bd70:	e9cd 5300 	strd	r5, r3, [sp]
 800bd74:	463b      	mov	r3, r7
 800bd76:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800bd78:	2200      	movs	r2, #0
 800bd7a:	47a8      	blx	r5
 800bd7c:	b00b      	add	sp, #44	; 0x2c
 800bd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd80:	24006bb6 	.word	0x24006bb6

0800bd84 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800bd84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd88:	4698      	mov	r8, r3
 800bd8a:	6803      	ldr	r3, [r0, #0]
 800bd8c:	b08b      	sub	sp, #44	; 0x2c
 800bd8e:	4617      	mov	r7, r2
 800bd90:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800bd92:	460e      	mov	r6, r1
 800bd94:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800bd96:	4604      	mov	r4, r0
 800bd98:	f8b3 9000 	ldrh.w	r9, [r3]
 800bd9c:	f7ff ff6c 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800bda0:	6803      	ldr	r3, [r0, #0]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	4798      	blx	r3
 800bda6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bdaa:	2200      	movs	r2, #0
 800bdac:	4631      	mov	r1, r6
 800bdae:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800bdba:	2301      	movs	r3, #1
 800bdbc:	9305      	str	r3, [sp, #20]
 800bdbe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800bdc2:	9304      	str	r3, [sp, #16]
 800bdc4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800bdc8:	9303      	str	r3, [sp, #12]
 800bdca:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800bdce:	9302      	str	r3, [sp, #8]
 800bdd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800bdd4:	e9cd 8300 	strd	r8, r3, [sp]
 800bdd8:	463b      	mov	r3, r7
 800bdda:	47a8      	blx	r5
 800bddc:	b00b      	add	sp, #44	; 0x2c
 800bdde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bde2:	bf00      	nop
 800bde4:	24006bb6 	.word	0x24006bb6

0800bde8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800bde8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdec:	4698      	mov	r8, r3
 800bdee:	6803      	ldr	r3, [r0, #0]
 800bdf0:	b087      	sub	sp, #28
 800bdf2:	460e      	mov	r6, r1
 800bdf4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800bdf6:	4617      	mov	r7, r2
 800bdf8:	4b0f      	ldr	r3, [pc, #60]	; (800be38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	f8b3 9000 	ldrh.w	r9, [r3]
 800be00:	f7ff ff3a 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800be04:	6803      	ldr	r3, [r0, #0]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	4798      	blx	r3
 800be0a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800be0e:	463a      	mov	r2, r7
 800be10:	4631      	mov	r1, r6
 800be12:	f8cd 900c 	str.w	r9, [sp, #12]
 800be16:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800be1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800be1e:	4620      	mov	r0, r4
 800be20:	9302      	str	r3, [sp, #8]
 800be22:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	4643      	mov	r3, r8
 800be30:	47a8      	blx	r5
 800be32:	b007      	add	sp, #28
 800be34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be38:	24006bb6 	.word	0x24006bb6

0800be3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	4604      	mov	r4, r0
 800be42:	b08f      	sub	sp, #60	; 0x3c
 800be44:	4610      	mov	r0, r2
 800be46:	460d      	mov	r5, r1
 800be48:	4691      	mov	r9, r2
 800be4a:	461e      	mov	r6, r3
 800be4c:	f006 fc4a 	bl	80126e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800be50:	2800      	cmp	r0, #0
 800be52:	f000 809c 	beq.w	800bf8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	4620      	mov	r0, r4
 800be5a:	f8df b194 	ldr.w	fp, [pc, #404]	; 800bff0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800be5e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800be62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be64:	4798      	blx	r3
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	4620      	mov	r0, r4
 800be6a:	f8df a188 	ldr.w	sl, [pc, #392]	; 800bff4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	4798      	blx	r3
 800be72:	f8bb 3000 	ldrh.w	r3, [fp]
 800be76:	4f5b      	ldr	r7, [pc, #364]	; (800bfe4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	f8ba 3000 	ldrh.w	r3, [sl]
 800be7e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800be82:	4640      	mov	r0, r8
 800be84:	9302      	str	r3, [sp, #8]
 800be86:	883b      	ldrh	r3, [r7, #0]
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	4b57      	ldr	r3, [pc, #348]	; (800bfe8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800be8c:	881a      	ldrh	r2, [r3, #0]
 800be8e:	9305      	str	r3, [sp, #20]
 800be90:	9204      	str	r2, [sp, #16]
 800be92:	f006 fce1 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800be96:	8038      	strh	r0, [r7, #0]
 800be98:	4640      	mov	r0, r8
 800be9a:	f006 fd17 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800be9e:	9b05      	ldr	r3, [sp, #20]
 800bea0:	8018      	strh	r0, [r3, #0]
 800bea2:	4b52      	ldr	r3, [pc, #328]	; (800bfec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d174      	bne.n	800bf94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800beaa:	883b      	ldrh	r3, [r7, #0]
 800beac:	f8aa 0000 	strh.w	r0, [sl]
 800beb0:	f8ab 3000 	strh.w	r3, [fp]
 800beb4:	4648      	mov	r0, r9
 800beb6:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800beba:	f006 fc13 	bl	80126e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800bebe:	2200      	movs	r2, #0
 800bec0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800bec4:	4611      	mov	r1, r2
 800bec6:	4628      	mov	r0, r5
 800bec8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800becc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800bed0:	f7f6 fe9e 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 800bed4:	2301      	movs	r3, #1
 800bed6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800beda:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800bede:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dd5c      	ble.n	800bfa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800bee6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800beea:	2b00      	cmp	r3, #0
 800beec:	dd58      	ble.n	800bfa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800beee:	462a      	mov	r2, r5
 800bef0:	ab0a      	add	r3, sp, #40	; 0x28
 800bef2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800bef6:	6851      	ldr	r1, [r2, #4]
 800bef8:	c303      	stmia	r3!, {r0, r1}
 800befa:	4631      	mov	r1, r6
 800befc:	a80a      	add	r0, sp, #40	; 0x28
 800befe:	f7ff fbeb 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800bf02:	4b38      	ldr	r3, [pc, #224]	; (800bfe4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800bf04:	2100      	movs	r1, #0
 800bf06:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bf0a:	4b37      	ldr	r3, [pc, #220]	; (800bfe8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800bf0c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800bf10:	aa0a      	add	r2, sp, #40	; 0x28
 800bf12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf16:	910c      	str	r1, [sp, #48]	; 0x30
 800bf18:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800bf1c:	ab08      	add	r3, sp, #32
 800bf1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf22:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf26:	4618      	mov	r0, r3
 800bf28:	a90c      	add	r1, sp, #48	; 0x30
 800bf2a:	f7ff fbd5 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800bf2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d13c      	bne.n	800bfae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800bf34:	2000      	movs	r0, #0
 800bf36:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800bf3a:	2600      	movs	r6, #0
 800bf3c:	696b      	ldr	r3, [r5, #20]
 800bf3e:	a908      	add	r1, sp, #32
 800bf40:	682a      	ldr	r2, [r5, #0]
 800bf42:	4628      	mov	r0, r5
 800bf44:	9305      	str	r3, [sp, #20]
 800bf46:	616e      	str	r6, [r5, #20]
 800bf48:	6892      	ldr	r2, [r2, #8]
 800bf4a:	4790      	blx	r2
 800bf4c:	9b05      	ldr	r3, [sp, #20]
 800bf4e:	4652      	mov	r2, sl
 800bf50:	4649      	mov	r1, r9
 800bf52:	616b      	str	r3, [r5, #20]
 800bf54:	4628      	mov	r0, r5
 800bf56:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800bf5a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800bf5e:	f7f6 fe57 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 800bf62:	9a01      	ldr	r2, [sp, #4]
 800bf64:	4b22      	ldr	r3, [pc, #136]	; (800bff0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800bf66:	4620      	mov	r0, r4
 800bf68:	801a      	strh	r2, [r3, #0]
 800bf6a:	9a02      	ldr	r2, [sp, #8]
 800bf6c:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800bf6e:	801a      	strh	r2, [r3, #0]
 800bf70:	9a03      	ldr	r2, [sp, #12]
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800bf74:	801a      	strh	r2, [r3, #0]
 800bf76:	4b1c      	ldr	r3, [pc, #112]	; (800bfe8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800bf78:	9a04      	ldr	r2, [sp, #16]
 800bf7a:	801a      	strh	r2, [r3, #0]
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800bf82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf84:	4798      	blx	r3
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	4620      	mov	r0, r4
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	4798      	blx	r3
 800bf8e:	b00f      	add	sp, #60	; 0x3c
 800bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf94:	883b      	ldrh	r3, [r7, #0]
 800bf96:	f8ab 0000 	strh.w	r0, [fp]
 800bf9a:	f8aa 3000 	strh.w	r3, [sl]
 800bf9e:	e789      	b.n	800beb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800bfa0:	462a      	mov	r2, r5
 800bfa2:	ab0a      	add	r3, sp, #40	; 0x28
 800bfa4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800bfa8:	6851      	ldr	r1, [r2, #4]
 800bfaa:	c303      	stmia	r3!, {r0, r1}
 800bfac:	e7a9      	b.n	800bf02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800bfae:	a807      	add	r0, sp, #28
 800bfb0:	f006 fde4 	bl	8012b7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bfb8:	6803      	ldr	r3, [r0, #0]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	4798      	blx	r3
 800bfbe:	4286      	cmp	r6, r0
 800bfc0:	d1b8      	bne.n	800bf34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800bfc2:	f7ff fe59 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800bfc6:	6803      	ldr	r3, [r0, #0]
 800bfc8:	4606      	mov	r6, r0
 800bfca:	a807      	add	r0, sp, #28
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	9305      	str	r3, [sp, #20]
 800bfd0:	f006 fdd4 	bl	8012b7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800bfd4:	9b05      	ldr	r3, [sp, #20]
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4798      	blx	r3
 800bfdc:	f080 0001 	eor.w	r0, r0, #1
 800bfe0:	b2c0      	uxtb	r0, r0
 800bfe2:	e7a8      	b.n	800bf36 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800bfe4:	24006bb0 	.word	0x24006bb0
 800bfe8:	24006bb2 	.word	0x24006bb2
 800bfec:	24006bb4 	.word	0x24006bb4
 800bff0:	24006bb6 	.word	0x24006bb6
 800bff4:	24006bb8 	.word	0x24006bb8

0800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800bff8:	4b07      	ldr	r3, [pc, #28]	; (800c018 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800bffa:	b510      	push	{r4, lr}
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	4604      	mov	r4, r0
 800c000:	b13b      	cbz	r3, 800c012 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c002:	6803      	ldr	r3, [r0, #0]
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	4798      	blx	r3
 800c008:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c00a:	4283      	cmp	r3, r0
 800c00c:	d101      	bne.n	800c012 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c00e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c010:	bd10      	pop	{r4, pc}
 800c012:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c014:	e7fc      	b.n	800c010 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800c016:	bf00      	nop
 800c018:	24006bba 	.word	0x24006bba

0800c01c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c020:	b088      	sub	sp, #32
 800c022:	4692      	mov	sl, r2
 800c024:	461d      	mov	r5, r3
 800c026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c02a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800c02e:	2400      	movs	r4, #0
 800c030:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800c034:	4606      	mov	r6, r0
 800c036:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800c03a:	fb09 a505 	mla	r5, r9, r5, sl
 800c03e:	9403      	str	r4, [sp, #12]
 800c040:	f8ad 8014 	strh.w	r8, [sp, #20]
 800c044:	f8ad 7016 	strh.w	r7, [sp, #22]
 800c048:	f88d 401c 	strb.w	r4, [sp, #28]
 800c04c:	e9cd 3100 	strd	r3, r1, [sp]
 800c050:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c054:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c058:	f7ff ffce 	bl	800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c05c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c060:	f8ad 901a 	strh.w	r9, [sp, #26]
 800c064:	f88d 401e 	strb.w	r4, [sp, #30]
 800c068:	9504      	str	r5, [sp, #16]
 800c06a:	f88d 401d 	strb.w	r4, [sp, #29]
 800c06e:	f88d 401f 	strb.w	r4, [sp, #31]
 800c072:	f1b8 0f00 	cmp.w	r8, #0
 800c076:	d000      	beq.n	800c07a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800c078:	b937      	cbnz	r7, 800c088 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800c07a:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800c07c:	f240 210b 	movw	r1, #523	; 0x20b
 800c080:	4a0c      	ldr	r2, [pc, #48]	; (800c0b4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800c082:	480d      	ldr	r0, [pc, #52]	; (800c0b8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800c084:	f00e fffa 	bl	801b07c <__assert_func>
 800c088:	6833      	ldr	r3, [r6, #0]
 800c08a:	4630      	mov	r0, r6
 800c08c:	9c00      	ldr	r4, [sp, #0]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c090:	4798      	blx	r3
 800c092:	4220      	tst	r0, r4
 800c094:	d104      	bne.n	800c0a0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800c096:	4b09      	ldr	r3, [pc, #36]	; (800c0bc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800c098:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800c09c:	4a05      	ldr	r2, [pc, #20]	; (800c0b4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800c09e:	e7f0      	b.n	800c082 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800c0a0:	6870      	ldr	r0, [r6, #4]
 800c0a2:	4669      	mov	r1, sp
 800c0a4:	6803      	ldr	r3, [r0, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	4798      	blx	r3
 800c0aa:	b008      	add	sp, #32
 800c0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b0:	0801d51f 	.word	0x0801d51f
 800c0b4:	0801d77f 	.word	0x0801d77f
 800c0b8:	0801d6d1 	.word	0x0801d6d1
 800c0bc:	0801d557 	.word	0x0801d557

0800c0c0 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	b089      	sub	sp, #36	; 0x24
 800c0c6:	4693      	mov	fp, r2
 800c0c8:	461d      	mov	r5, r3
 800c0ca:	2400      	movs	r4, #0
 800c0cc:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800c0d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0d4:	468a      	mov	sl, r1
 800c0d6:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800c0da:	fb09 b505 	mla	r5, r9, r5, fp
 800c0de:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	9403      	str	r4, [sp, #12]
 800c0e6:	e9cd 3400 	strd	r3, r4, [sp]
 800c0ea:	f7ff ff85 	bl	800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c0ee:	f8ad 8014 	strh.w	r8, [sp, #20]
 800c0f2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c0f6:	f8ad 7016 	strh.w	r7, [sp, #22]
 800c0fa:	f8ad 4018 	strh.w	r4, [sp, #24]
 800c0fe:	9504      	str	r5, [sp, #16]
 800c100:	f8ad 901a 	strh.w	r9, [sp, #26]
 800c104:	f8cd a00c 	str.w	sl, [sp, #12]
 800c108:	f8ad 401c 	strh.w	r4, [sp, #28]
 800c10c:	f88d 401e 	strb.w	r4, [sp, #30]
 800c110:	f88d 401f 	strb.w	r4, [sp, #31]
 800c114:	f1b8 0f00 	cmp.w	r8, #0
 800c118:	d000      	beq.n	800c11c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800c11a:	b937      	cbnz	r7, 800c12a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800c11c:	4b0d      	ldr	r3, [pc, #52]	; (800c154 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800c11e:	f240 2121 	movw	r1, #545	; 0x221
 800c122:	4a0d      	ldr	r2, [pc, #52]	; (800c158 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800c124:	480d      	ldr	r0, [pc, #52]	; (800c15c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800c126:	f00e ffa9 	bl	801b07c <__assert_func>
 800c12a:	6833      	ldr	r3, [r6, #0]
 800c12c:	4630      	mov	r0, r6
 800c12e:	9c00      	ldr	r4, [sp, #0]
 800c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c132:	4798      	blx	r3
 800c134:	4220      	tst	r0, r4
 800c136:	d104      	bne.n	800c142 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800c138:	4b09      	ldr	r3, [pc, #36]	; (800c160 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800c13a:	f240 2122 	movw	r1, #546	; 0x222
 800c13e:	4a06      	ldr	r2, [pc, #24]	; (800c158 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800c140:	e7f0      	b.n	800c124 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800c142:	6870      	ldr	r0, [r6, #4]
 800c144:	4669      	mov	r1, sp
 800c146:	6803      	ldr	r3, [r0, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	4798      	blx	r3
 800c14c:	b009      	add	sp, #36	; 0x24
 800c14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c152:	bf00      	nop
 800c154:	0801d59c 	.word	0x0801d59c
 800c158:	0801d7f5 	.word	0x0801d7f5
 800c15c:	0801d6d1 	.word	0x0801d6d1
 800c160:	0801d5d4 	.word	0x0801d5d4

0800c164 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800c164:	b508      	push	{r3, lr}
 800c166:	290d      	cmp	r1, #13
 800c168:	d817      	bhi.n	800c19a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800c16a:	e8df f001 	tbb	[pc, r1]
 800c16e:	090b      	.short	0x090b
 800c170:	0d0d0d07 	.word	0x0d0d0d07
 800c174:	1414140d 	.word	0x1414140d
 800c178:	0d0d1414 	.word	0x0d0d1414
 800c17c:	2020      	movs	r0, #32
 800c17e:	bd08      	pop	{r3, pc}
 800c180:	2018      	movs	r0, #24
 800c182:	e7fc      	b.n	800c17e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c184:	2010      	movs	r0, #16
 800c186:	e7fa      	b.n	800c17e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c188:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800c18a:	f240 2182 	movw	r1, #642	; 0x282
 800c18e:	4a05      	ldr	r2, [pc, #20]	; (800c1a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800c190:	4805      	ldr	r0, [pc, #20]	; (800c1a8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800c192:	f00e ff73 	bl	801b07c <__assert_func>
 800c196:	2008      	movs	r0, #8
 800c198:	e7f1      	b.n	800c17e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c19a:	2000      	movs	r0, #0
 800c19c:	e7ef      	b.n	800c17e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800c19e:	bf00      	nop
 800c1a0:	0801d74d 	.word	0x0801d74d
 800c1a4:	0801db20 	.word	0x0801db20
 800c1a8:	0801d6d1 	.word	0x0801d6d1

0800c1ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	460d      	mov	r5, r1
 800c1b0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800c1b4:	4616      	mov	r6, r2
 800c1b6:	461c      	mov	r4, r3
 800c1b8:	f7ff ffd4 	bl	800c164 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800c1bc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c1c0:	10c0      	asrs	r0, r0, #3
 800c1c2:	fb06 5101 	mla	r1, r6, r1, r5
 800c1c6:	fb00 4001 	mla	r0, r0, r1, r4
 800c1ca:	bd70      	pop	{r4, r5, r6, pc}

0800c1cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800c1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d0:	b08a      	sub	sp, #40	; 0x28
 800c1d2:	f04f 0c00 	mov.w	ip, #0
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	469a      	mov	sl, r3
 800c1da:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800c1de:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800c1e2:	2d0b      	cmp	r5, #11
 800c1e4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800c1e8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c1ec:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800c1f0:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800c1f4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800c1f8:	f8cd c014 	str.w	ip, [sp, #20]
 800c1fc:	d12d      	bne.n	800c25a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800c1fe:	2080      	movs	r0, #128	; 0x80
 800c200:	9204      	str	r2, [sp, #16]
 800c202:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800c206:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c20a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800c20e:	f8ad 701c 	strh.w	r7, [sp, #28]
 800c212:	f8ad 601e 	strh.w	r6, [sp, #30]
 800c216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c21a:	4620      	mov	r0, r4
 800c21c:	f7ff feec 	bl	800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c220:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800c224:	4603      	mov	r3, r0
 800c226:	4651      	mov	r1, sl
 800c228:	4620      	mov	r0, r4
 800c22a:	e9cd 9800 	strd	r9, r8, [sp]
 800c22e:	f7ff ffbd 	bl	800c1ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c232:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800c236:	9006      	str	r0, [sp, #24]
 800c238:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800c23c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800c240:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800c244:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800c248:	b107      	cbz	r7, 800c24c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800c24a:	b9d6      	cbnz	r6, 800c282 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800c24c:	4b17      	ldr	r3, [pc, #92]	; (800c2ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800c24e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800c252:	4a17      	ldr	r2, [pc, #92]	; (800c2b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800c254:	4817      	ldr	r0, [pc, #92]	; (800c2b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800c256:	f00e ff11 	bl	801b07c <__assert_func>
 800c25a:	2d02      	cmp	r5, #2
 800c25c:	d108      	bne.n	800c270 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800c25e:	2bff      	cmp	r3, #255	; 0xff
 800c260:	d104      	bne.n	800c26c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800c262:	2800      	cmp	r0, #0
 800c264:	bf14      	ite	ne
 800c266:	2040      	movne	r0, #64	; 0x40
 800c268:	2020      	moveq	r0, #32
 800c26a:	e7c9      	b.n	800c200 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c26c:	2040      	movs	r0, #64	; 0x40
 800c26e:	e7c7      	b.n	800c200 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c270:	2bff      	cmp	r3, #255	; 0xff
 800c272:	d104      	bne.n	800c27e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800c274:	2800      	cmp	r0, #0
 800c276:	bf14      	ite	ne
 800c278:	2004      	movne	r0, #4
 800c27a:	2001      	moveq	r0, #1
 800c27c:	e7c0      	b.n	800c200 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c27e:	2004      	movs	r0, #4
 800c280:	e7be      	b.n	800c200 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	4620      	mov	r0, r4
 800c286:	9d02      	ldr	r5, [sp, #8]
 800c288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28a:	4798      	blx	r3
 800c28c:	4228      	tst	r0, r5
 800c28e:	d104      	bne.n	800c29a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800c292:	f240 11d5 	movw	r1, #469	; 0x1d5
 800c296:	4a06      	ldr	r2, [pc, #24]	; (800c2b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800c298:	e7dc      	b.n	800c254 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800c29a:	6860      	ldr	r0, [r4, #4]
 800c29c:	a902      	add	r1, sp, #8
 800c29e:	6803      	ldr	r3, [r0, #0]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	4798      	blx	r3
 800c2a4:	b00a      	add	sp, #40	; 0x28
 800c2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0801d51f 	.word	0x0801d51f
 800c2b0:	0801d9ae 	.word	0x0801d9ae
 800c2b4:	0801d6d1 	.word	0x0801d6d1
 800c2b8:	0801d557 	.word	0x0801d557

0800c2bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	b08b      	sub	sp, #44	; 0x2c
 800c2c2:	469b      	mov	fp, r3
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	4692      	mov	sl, r2
 800c2c8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800c2d2:	4689      	mov	r9, r1
 800c2d4:	2fff      	cmp	r7, #255	; 0xff
 800c2d6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800c2da:	9605      	str	r6, [sp, #20]
 800c2dc:	bf14      	ite	ne
 800c2de:	2308      	movne	r3, #8
 800c2e0:	2302      	moveq	r3, #2
 800c2e2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800c2e6:	f7ff fe87 	bl	800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c2ea:	465a      	mov	r2, fp
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	4651      	mov	r1, sl
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	e9cd 8500 	strd	r8, r5, [sp]
 800c2f6:	f7ff ff59 	bl	800c1ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c2fa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c2fe:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800c302:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c306:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800c30a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800c30e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c312:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800c316:	9d02      	ldr	r5, [sp, #8]
 800c318:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	9006      	str	r0, [sp, #24]
 800c320:	4620      	mov	r0, r4
 800c322:	f8ad 6020 	strh.w	r6, [sp, #32]
 800c326:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800c32a:	f8cd 9014 	str.w	r9, [sp, #20]
 800c32e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800c332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c334:	4798      	blx	r3
 800c336:	4228      	tst	r0, r5
 800c338:	d106      	bne.n	800c348 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800c33a:	4b07      	ldr	r3, [pc, #28]	; (800c358 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800c33c:	f240 2137 	movw	r1, #567	; 0x237
 800c340:	4a06      	ldr	r2, [pc, #24]	; (800c35c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800c342:	4807      	ldr	r0, [pc, #28]	; (800c360 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800c344:	f00e fe9a 	bl	801b07c <__assert_func>
 800c348:	6860      	ldr	r0, [r4, #4]
 800c34a:	a902      	add	r1, sp, #8
 800c34c:	6803      	ldr	r3, [r0, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	4798      	blx	r3
 800c352:	b00b      	add	sp, #44	; 0x2c
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	0801d557 	.word	0x0801d557
 800c35c:	0801da85 	.word	0x0801da85
 800c360:	0801d6d1 	.word	0x0801d6d1

0800c364 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800c364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c368:	461f      	mov	r7, r3
 800c36a:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800c36c:	460d      	mov	r5, r1
 800c36e:	4616      	mov	r6, r2
 800c370:	f8b3 8000 	ldrh.w	r8, [r3]
 800c374:	4604      	mov	r4, r0
 800c376:	f7ff fc7f 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800c37a:	6803      	ldr	r3, [r0, #0]
 800c37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37e:	4798      	blx	r3
 800c380:	463b      	mov	r3, r7
 800c382:	4632      	mov	r2, r6
 800c384:	4629      	mov	r1, r5
 800c386:	e9cd 8000 	strd	r8, r0, [sp]
 800c38a:	4620      	mov	r0, r4
 800c38c:	f7ff ff0e 	bl	800c1ac <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800c390:	b002      	add	sp, #8
 800c392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c396:	bf00      	nop
 800c398:	24006bb6 	.word	0x24006bb6

0800c39c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	4698      	mov	r8, r3
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	4617      	mov	r7, r2
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800c3ae:	9303      	str	r3, [sp, #12]
 800c3b0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800c3b4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800c3b8:	f8ad 6014 	strh.w	r6, [sp, #20]
 800c3bc:	f8ad 5016 	strh.w	r5, [sp, #22]
 800c3c0:	e9cd 3100 	strd	r3, r1, [sp]
 800c3c4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c3c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c3cc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800c3d0:	f88d 301c 	strb.w	r3, [sp, #28]
 800c3d4:	f7ff fe10 	bl	800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c3d8:	4642      	mov	r2, r8
 800c3da:	4603      	mov	r3, r0
 800c3dc:	4639      	mov	r1, r7
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f7ff ffc0 	bl	800c364 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c3e4:	4b18      	ldr	r3, [pc, #96]	; (800c448 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800c3e6:	9004      	str	r0, [sp, #16]
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c3ee:	f7ff fc43 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800c3f2:	6803      	ldr	r3, [r0, #0]
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f6:	4798      	blx	r3
 800c3f8:	f88d 001e 	strb.w	r0, [sp, #30]
 800c3fc:	f88d 001d 	strb.w	r0, [sp, #29]
 800c400:	b106      	cbz	r6, 800c404 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800c402:	b935      	cbnz	r5, 800c412 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800c404:	4b11      	ldr	r3, [pc, #68]	; (800c44c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800c406:	f240 11f1 	movw	r1, #497	; 0x1f1
 800c40a:	4a11      	ldr	r2, [pc, #68]	; (800c450 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800c40c:	4811      	ldr	r0, [pc, #68]	; (800c454 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800c40e:	f00e fe35 	bl	801b07c <__assert_func>
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	4620      	mov	r0, r4
 800c416:	9d00      	ldr	r5, [sp, #0]
 800c418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41a:	4798      	blx	r3
 800c41c:	4228      	tst	r0, r5
 800c41e:	d104      	bne.n	800c42a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800c420:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800c422:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800c426:	4a0a      	ldr	r2, [pc, #40]	; (800c450 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800c428:	e7f0      	b.n	800c40c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800c42a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c42c:	4669      	mov	r1, sp
 800c42e:	6860      	ldr	r0, [r4, #4]
 800c430:	9303      	str	r3, [sp, #12]
 800c432:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800c436:	f88d 301f 	strb.w	r3, [sp, #31]
 800c43a:	6803      	ldr	r3, [r0, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	4798      	blx	r3
 800c440:	b008      	add	sp, #32
 800c442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c446:	bf00      	nop
 800c448:	24006bb6 	.word	0x24006bb6
 800c44c:	0801d51f 	.word	0x0801d51f
 800c450:	0801d85a 	.word	0x0801d85a
 800c454:	0801d6d1 	.word	0x0801d6d1
 800c458:	0801d557 	.word	0x0801d557

0800c45c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c45e:	b08b      	sub	sp, #44	; 0x2c
 800c460:	4604      	mov	r4, r0
 800c462:	466b      	mov	r3, sp
 800c464:	e883 0006 	stmia.w	r3, {r1, r2}
 800c468:	4b20      	ldr	r3, [pc, #128]	; (800c4ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	b933      	cbnz	r3, 800c47c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800c46e:	4b20      	ldr	r3, [pc, #128]	; (800c4f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800c470:	f44f 7112 	mov.w	r1, #584	; 0x248
 800c474:	4a1f      	ldr	r2, [pc, #124]	; (800c4f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800c476:	4820      	ldr	r0, [pc, #128]	; (800c4f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800c478:	f00e fe00 	bl	801b07c <__assert_func>
 800c47c:	2301      	movs	r3, #1
 800c47e:	2500      	movs	r5, #0
 800c480:	f8bd 6000 	ldrh.w	r6, [sp]
 800c484:	9302      	str	r3, [sp, #8]
 800c486:	6803      	ldr	r3, [r0, #0]
 800c488:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800c48c:	9505      	str	r5, [sp, #20]
 800c48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c490:	4798      	blx	r3
 800c492:	463a      	mov	r2, r7
 800c494:	4631      	mov	r1, r6
 800c496:	4603      	mov	r3, r0
 800c498:	4620      	mov	r0, r4
 800c49a:	f7ff ff63 	bl	800c364 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c49e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c4a0:	9003      	str	r0, [sp, #12]
 800c4a2:	9306      	str	r3, [sp, #24]
 800c4a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c4a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c4ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c4b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c4b4:	4b11      	ldr	r3, [pc, #68]	; (800c4fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c4bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c4c0:	f7ff fbda 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800c4c4:	6803      	ldr	r3, [r0, #0]
 800c4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c8:	4798      	blx	r3
 800c4ca:	23ff      	movs	r3, #255	; 0xff
 800c4cc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800c4d0:	a902      	add	r1, sp, #8
 800c4d2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800c4d6:	6860      	ldr	r0, [r4, #4]
 800c4d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c4dc:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800c4e0:	6803      	ldr	r3, [r0, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	4798      	blx	r3
 800c4e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c4e8:	b00b      	add	sp, #44	; 0x2c
 800c4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ec:	24006bbb 	.word	0x24006bbb
 800c4f0:	0801d61e 	.word	0x0801d61e
 800c4f4:	0801d904 	.word	0x0801d904
 800c4f8:	0801d6d1 	.word	0x0801d6d1
 800c4fc:	24006bb6 	.word	0x24006bb6

0800c500 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c504:	b08a      	sub	sp, #40	; 0x28
 800c506:	2600      	movs	r6, #0
 800c508:	4604      	mov	r4, r0
 800c50a:	466d      	mov	r5, sp
 800c50c:	9605      	str	r6, [sp, #20]
 800c50e:	e885 0006 	stmia.w	r5, {r1, r2}
 800c512:	461d      	mov	r5, r3
 800c514:	2301      	movs	r3, #1
 800c516:	f8bd 7000 	ldrh.w	r7, [sp]
 800c51a:	9302      	str	r3, [sp, #8]
 800c51c:	6803      	ldr	r3, [r0, #0]
 800c51e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800c522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c524:	4798      	blx	r3
 800c526:	4642      	mov	r2, r8
 800c528:	4639      	mov	r1, r7
 800c52a:	4603      	mov	r3, r0
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7ff ff19 	bl	800c364 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c532:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c536:	9003      	str	r0, [sp, #12]
 800c538:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c53c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c540:	9506      	str	r5, [sp, #24]
 800c542:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c546:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c550:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c554:	f7ff fb90 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800c558:	6803      	ldr	r3, [r0, #0]
 800c55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55c:	4798      	blx	r3
 800c55e:	23ff      	movs	r3, #255	; 0xff
 800c560:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800c564:	a902      	add	r1, sp, #8
 800c566:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800c56a:	6860      	ldr	r0, [r4, #4]
 800c56c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c570:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800c574:	6803      	ldr	r3, [r0, #0]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	4798      	blx	r3
 800c57a:	4628      	mov	r0, r5
 800c57c:	b00a      	add	sp, #40	; 0x28
 800c57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c582:	bf00      	nop
 800c584:	24006bb6 	.word	0x24006bb6

0800c588 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800c58e:	4604      	mov	r4, r0
 800c590:	b19b      	cbz	r3, 800c5ba <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800c592:	2002      	movs	r0, #2
 800c594:	f7f5 fa92 	bl	8001abc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800c598:	2300      	movs	r3, #0
 800c59a:	4620      	mov	r0, r4
 800c59c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c5a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800c5aa:	f7ff fd25 	bl	800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	462b      	mov	r3, r5
 800c5b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5b8:	4718      	bx	r3
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}

0800c5bc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	4605      	mov	r5, r0
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	2003      	movs	r0, #3
 800c5c4:	b149      	cbz	r1, 800c5da <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800c5c6:	f7f5 fa49 	bl	8001a5c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c5ca:	6928      	ldr	r0, [r5, #16]
 800c5cc:	b168      	cbz	r0, 800c5ea <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800c5ce:	6803      	ldr	r3, [r0, #0]
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	695b      	ldr	r3, [r3, #20]
 800c5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5d8:	4718      	bx	r3
 800c5da:	f7f5 fa57 	bl	8001a8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c5de:	6928      	ldr	r0, [r5, #16]
 800c5e0:	b118      	cbz	r0, 800c5ea <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800c5e2:	6803      	ldr	r3, [r0, #0]
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	e7f4      	b.n	800c5d4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}

0800c5ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	428a      	cmp	r2, r1
 800c5f8:	d008      	beq.n	800c60c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800c5fa:	2a01      	cmp	r2, #1
 800c5fc:	6803      	ldr	r3, [r0, #0]
 800c5fe:	d106      	bne.n	800c60e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800c600:	b929      	cbnz	r1, 800c60e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800c602:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c606:	4798      	blx	r3
 800c608:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800c60c:	bd38      	pop	{r3, r4, r5, pc}
 800c60e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c612:	4620      	mov	r0, r4
 800c614:	e7f7      	b.n	800c606 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800c618 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800c618:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800c61a:	b510      	push	{r4, lr}
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	4604      	mov	r4, r0
 800c620:	b95b      	cbnz	r3, 800c63a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c622:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800c626:	2b02      	cmp	r3, #2
 800c628:	d007      	beq.n	800c63a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c62a:	6840      	ldr	r0, [r0, #4]
 800c62c:	f000 f93a 	bl	800c8a4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800c630:	b118      	cbz	r0, 800c63a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c632:	6862      	ldr	r2, [r4, #4]
 800c634:	7a53      	ldrb	r3, [r2, #9]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d0fc      	beq.n	800c634 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800c63a:	f7f5 fbb9 	bl	8001db0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c63e:	4620      	mov	r0, r4
 800c640:	2100      	movs	r1, #0
 800c642:	f7ff ffd3 	bl	800c5ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800c646:	4620      	mov	r0, r4
 800c648:	f7ff fcd6 	bl	800bff8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop
 800c650:	24006bba 	.word	0x24006bba

0800c654 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800c654:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800c658:	1a13      	subs	r3, r2, r0
 800c65a:	4258      	negs	r0, r3
 800c65c:	4158      	adcs	r0, r3
 800c65e:	4770      	bx	lr

0800c660 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800c660:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800c664:	1a9b      	subs	r3, r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	bfdc      	itt	le
 800c66a:	6882      	ldrle	r2, [r0, #8]
 800c66c:	189b      	addle	r3, r3, r2
 800c66e:	2b01      	cmp	r3, #1
 800c670:	bfcc      	ite	gt
 800c672:	2000      	movgt	r0, #0
 800c674:	2001      	movle	r0, #1
 800c676:	4770      	bx	lr

0800c678 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800c678:	6902      	ldr	r2, [r0, #16]
 800c67a:	6840      	ldr	r0, [r0, #4]
 800c67c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800c680:	4770      	bx	lr

0800c682 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800c682:	6803      	ldr	r3, [r0, #0]
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	4718      	bx	r3

0800c688 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800c688:	4770      	bx	lr

0800c68a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800c68a:	4770      	bx	lr

0800c68c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800c68c:	4770      	bx	lr
	...

0800c690 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800c690:	2301      	movs	r3, #1
 800c692:	b570      	push	{r4, r5, r6, lr}
 800c694:	7203      	strb	r3, [r0, #8]
 800c696:	4604      	mov	r4, r0
 800c698:	6840      	ldr	r0, [r0, #4]
 800c69a:	6803      	ldr	r3, [r0, #0]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	4798      	blx	r3
 800c6a0:	6803      	ldr	r3, [r0, #0]
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	2b40      	cmp	r3, #64	; 0x40
 800c6a6:	d039      	beq.n	800c71c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6a8:	d815      	bhi.n	800c6d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d022      	beq.n	800c6f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800c6ae:	d808      	bhi.n	800c6c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d033      	beq.n	800c71c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d108      	bne.n	800c6ca <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6be:	4798      	blx	r3
 800c6c0:	e025      	b.n	800c70e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800c6c2:	2b08      	cmp	r3, #8
 800c6c4:	d01e      	beq.n	800c704 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800c6c6:	2b20      	cmp	r3, #32
 800c6c8:	d028      	beq.n	800c71c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6ca:	4b17      	ldr	r3, [pc, #92]	; (800c728 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800c6cc:	218b      	movs	r1, #139	; 0x8b
 800c6ce:	4a17      	ldr	r2, [pc, #92]	; (800c72c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800c6d0:	4817      	ldr	r0, [pc, #92]	; (800c730 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800c6d2:	f00e fcd3 	bl	801b07c <__assert_func>
 800c6d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6da:	d01f      	beq.n	800c71c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6dc:	d804      	bhi.n	800c6e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800c6de:	2b80      	cmp	r3, #128	; 0x80
 800c6e0:	d01c      	beq.n	800c71c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e6:	e7ef      	b.n	800c6c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800c6e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ec:	d016      	beq.n	800c71c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800c6ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6f2:	e7e0      	b.n	800c6b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	7f01      	ldrb	r1, [r0, #28]
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	4798      	blx	r3
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c702:	e006      	b.n	800c712 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	7f01      	ldrb	r1, [r0, #28]
 800c708:	4620      	mov	r0, r4
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	4798      	blx	r3
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c712:	4629      	mov	r1, r5
 800c714:	4620      	mov	r0, r4
 800c716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c71a:	4718      	bx	r3
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	4620      	mov	r0, r4
 800c720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c722:	4798      	blx	r3
 800c724:	e7eb      	b.n	800c6fe <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800c726:	bf00      	nop
 800c728:	0801db69 	.word	0x0801db69
 800c72c:	0801dc28 	.word	0x0801dc28
 800c730:	0801db8e 	.word	0x0801db8e

0800c734 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	4604      	mov	r4, r0
 800c738:	460e      	mov	r6, r1
 800c73a:	6860      	ldr	r0, [r4, #4]
 800c73c:	6803      	ldr	r3, [r0, #0]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	4798      	blx	r3
 800c742:	2800      	cmp	r0, #0
 800c744:	d1f9      	bne.n	800c73a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800c746:	4d0d      	ldr	r5, [pc, #52]	; (800c77c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800c748:	6828      	ldr	r0, [r5, #0]
 800c74a:	6803      	ldr	r3, [r0, #0]
 800c74c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c74e:	4798      	blx	r3
 800c750:	f7f5 fb3c 	bl	8001dcc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800c754:	6828      	ldr	r0, [r5, #0]
 800c756:	2101      	movs	r1, #1
 800c758:	f7ff ff48 	bl	800c5ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800c75c:	6860      	ldr	r0, [r4, #4]
 800c75e:	4631      	mov	r1, r6
 800c760:	6803      	ldr	r3, [r0, #0]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	4798      	blx	r3
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	4620      	mov	r0, r4
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	4798      	blx	r3
 800c76e:	6828      	ldr	r0, [r5, #0]
 800c770:	6803      	ldr	r3, [r0, #0]
 800c772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c778:	4718      	bx	r3
 800c77a:	bf00      	nop
 800c77c:	24006bbc 	.word	0x24006bbc

0800c780 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800c780:	b508      	push	{r3, lr}
 800c782:	f7f5 fb15 	bl	8001db0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c78a:	f7f5 bb19 	b.w	8001dc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c78e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800c78e:	b510      	push	{r4, lr}
 800c790:	4604      	mov	r4, r0
 800c792:	2114      	movs	r1, #20
 800c794:	f00e fb5c 	bl	801ae50 <_ZdlPvj>
 800c798:	4620      	mov	r0, r4
 800c79a:	bd10      	pop	{r4, pc}

0800c79c <_ZN8touchgfx13DMA_Interface5startEv>:
 800c79c:	b510      	push	{r4, lr}
 800c79e:	4604      	mov	r4, r0
 800c7a0:	6840      	ldr	r0, [r0, #4]
 800c7a2:	6803      	ldr	r3, [r0, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4798      	blx	r3
 800c7a8:	b948      	cbnz	r0, 800c7be <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c7aa:	7a63      	ldrb	r3, [r4, #9]
 800c7ac:	b13b      	cbz	r3, 800c7be <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c7ae:	7a23      	ldrb	r3, [r4, #8]
 800c7b0:	b92b      	cbnz	r3, 800c7be <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7bc:	4718      	bx	r3
 800c7be:	bd10      	pop	{r4, pc}

0800c7c0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	1a9b      	subs	r3, r3, r2
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bfdc      	itt	le
 800c7ce:	6880      	ldrle	r0, [r0, #8]
 800c7d0:	181b      	addle	r3, r3, r0
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	dd13      	ble.n	800c7fe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800c7d6:	6874      	ldr	r4, [r6, #4]
 800c7d8:	460d      	mov	r5, r1
 800c7da:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800c7de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c7e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c7ea:	68f3      	ldr	r3, [r6, #12]
 800c7ec:	68b2      	ldr	r2, [r6, #8]
 800c7ee:	f3bf 8f5b 	dmb	ish
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	bfd8      	it	le
 800c7f8:	1a9b      	suble	r3, r3, r2
 800c7fa:	60f3      	str	r3, [r6, #12]
 800c7fc:	bd70      	pop	{r4, r5, r6, pc}
 800c7fe:	4b03      	ldr	r3, [pc, #12]	; (800c80c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800c800:	2139      	movs	r1, #57	; 0x39
 800c802:	4a03      	ldr	r2, [pc, #12]	; (800c810 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800c804:	4803      	ldr	r0, [pc, #12]	; (800c814 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800c806:	f00e fc39 	bl	801b07c <__assert_func>
 800c80a:	bf00      	nop
 800c80c:	0801dbb4 	.word	0x0801dbb4
 800c810:	0801dc58 	.word	0x0801dc58
 800c814:	0801db8e 	.word	0x0801db8e

0800c818 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800c818:	b510      	push	{r4, lr}
 800c81a:	6803      	ldr	r3, [r0, #0]
 800c81c:	4604      	mov	r4, r0
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4798      	blx	r3
 800c822:	b128      	cbz	r0, 800c830 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800c824:	4b07      	ldr	r3, [pc, #28]	; (800c844 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800c826:	213f      	movs	r1, #63	; 0x3f
 800c828:	4a07      	ldr	r2, [pc, #28]	; (800c848 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800c82a:	4808      	ldr	r0, [pc, #32]	; (800c84c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800c82c:	f00e fc26 	bl	801b07c <__assert_func>
 800c830:	6923      	ldr	r3, [r4, #16]
 800c832:	68a2      	ldr	r2, [r4, #8]
 800c834:	f3bf 8f5b 	dmb	ish
 800c838:	3301      	adds	r3, #1
 800c83a:	429a      	cmp	r2, r3
 800c83c:	bfd8      	it	le
 800c83e:	1a9b      	suble	r3, r3, r2
 800c840:	6123      	str	r3, [r4, #16]
 800c842:	bd10      	pop	{r4, pc}
 800c844:	0801dbd7 	.word	0x0801dbd7
 800c848:	0801dca6 	.word	0x0801dca6
 800c84c:	0801db8e 	.word	0x0801db8e

0800c850 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	4604      	mov	r4, r0
 800c854:	6840      	ldr	r0, [r0, #4]
 800c856:	6803      	ldr	r3, [r0, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4798      	blx	r3
 800c85c:	4605      	mov	r5, r0
 800c85e:	b930      	cbnz	r0, 800c86e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800c860:	7a23      	ldrb	r3, [r4, #8]
 800c862:	b123      	cbz	r3, 800c86e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800c864:	6860      	ldr	r0, [r4, #4]
 800c866:	6803      	ldr	r3, [r0, #0]
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	4798      	blx	r3
 800c86c:	7225      	strb	r5, [r4, #8]
 800c86e:	6860      	ldr	r0, [r4, #4]
 800c870:	6803      	ldr	r3, [r0, #0]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4798      	blx	r3
 800c876:	b928      	cbnz	r0, 800c884 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	4620      	mov	r0, r4
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c882:	4718      	bx	r3
 800c884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c888:	f7f5 baa8 	b.w	8001ddc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800c88c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800c88c:	b510      	push	{r4, lr}
 800c88e:	6082      	str	r2, [r0, #8]
 800c890:	2200      	movs	r2, #0
 800c892:	4c03      	ldr	r4, [pc, #12]	; (800c8a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800c894:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800c898:	e9c0 4100 	strd	r4, r1, [r0]
 800c89c:	bd10      	pop	{r4, pc}
 800c89e:	bf00      	nop
 800c8a0:	0801dc0c 	.word	0x0801dc0c

0800c8a4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800c8a4:	6840      	ldr	r0, [r0, #4]
 800c8a6:	6803      	ldr	r3, [r0, #0]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4718      	bx	r3

0800c8ac <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800c8ac:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800c8b0:	4770      	bx	lr

0800c8b2 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800c8b2:	4770      	bx	lr

0800c8b4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800c8b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c8b8:	b133      	cbz	r3, 800c8c8 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800c8ba:	790b      	ldrb	r3, [r1, #4]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	bf01      	itttt	eq
 800c8c0:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800c8c2:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800c8c4:	8603      	strheq	r3, [r0, #48]	; 0x30
 800c8c6:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800c8c8:	f00e ba9e 	b.w	801ae08 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800c8cc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800c8cc:	8813      	ldrh	r3, [r2, #0]
 800c8ce:	8683      	strh	r3, [r0, #52]	; 0x34
 800c8d0:	f000 bcb2 	b.w	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800c8d4 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800c8d4:	b510      	push	{r4, lr}
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	2138      	movs	r1, #56	; 0x38
 800c8da:	f00e fab9 	bl	801ae50 <_ZdlPvj>
 800c8de:	4620      	mov	r0, r4
 800c8e0:	bd10      	pop	{r4, pc}

0800c8e2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800c8e2:	b510      	push	{r4, lr}
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c8e8:	b150      	cbz	r0, 800c900 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800c8ea:	6803      	ldr	r3, [r0, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	4798      	blx	r3
 800c8f0:	b130      	cbz	r0, 800c900 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800c8f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	6803      	ldr	r3, [r0, #0]
 800c8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	4718      	bx	r3
 800c900:	bd10      	pop	{r4, pc}
	...

0800c904 <_ZNK8touchgfx6Bitmap5getIdEv>:
 800c904:	b508      	push	{r3, lr}
 800c906:	4b05      	ldr	r3, [pc, #20]	; (800c91c <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	b92b      	cbnz	r3, 800c918 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 800c90c:	4b04      	ldr	r3, [pc, #16]	; (800c920 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 800c90e:	2187      	movs	r1, #135	; 0x87
 800c910:	4a04      	ldr	r2, [pc, #16]	; (800c924 <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 800c912:	4805      	ldr	r0, [pc, #20]	; (800c928 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 800c914:	f00e fbb2 	bl	801b07c <__assert_func>
 800c918:	8800      	ldrh	r0, [r0, #0]
 800c91a:	bd08      	pop	{r3, pc}
 800c91c:	24006c44 	.word	0x24006c44
 800c920:	0801dcd6 	.word	0x0801dcd6
 800c924:	0801dda8 	.word	0x0801dda8
 800c928:	0801dd12 	.word	0x0801dd12

0800c92c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	4604      	mov	r4, r0
 800c930:	f100 0534 	add.w	r5, r0, #52	; 0x34
 800c934:	b169      	cbz	r1, 800c952 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 800c936:	302e      	adds	r0, #46	; 0x2e
 800c938:	f7ff ffe4 	bl	800c904 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c93c:	4606      	mov	r6, r0
 800c93e:	4628      	mov	r0, r5
 800c940:	f7ff ffe0 	bl	800c904 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c944:	4286      	cmp	r6, r0
 800c946:	d003      	beq.n	800c950 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 800c948:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800c94a:	8623      	strh	r3, [r4, #48]	; 0x30
 800c94c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800c94e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800c950:	bd70      	pop	{r4, r5, r6, pc}
 800c952:	3030      	adds	r0, #48	; 0x30
 800c954:	f7ff ffd6 	bl	800c904 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c958:	4606      	mov	r6, r0
 800c95a:	4628      	mov	r0, r5
 800c95c:	f7ff ffd2 	bl	800c904 <_ZNK8touchgfx6Bitmap5getIdEv>
 800c960:	4286      	cmp	r6, r0
 800c962:	bf1f      	itttt	ne
 800c964:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 800c966:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 800c968:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 800c96a:	8623      	strhne	r3, [r4, #48]	; 0x30
 800c96c:	e7f0      	b.n	800c950 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0800c96e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 800c96e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800c972:	4770      	bx	lr

0800c974 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 800c974:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800c978:	4770      	bx	lr

0800c97a <_ZN8touchgfx13ScalableImageD1Ev>:
 800c97a:	4770      	bx	lr

0800c97c <_ZN8touchgfx13ScalableImageD0Ev>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	212c      	movs	r1, #44	; 0x2c
 800c982:	f00e fa65 	bl	801ae50 <_ZdlPvj>
 800c986:	4620      	mov	r0, r4
 800c988:	bd10      	pop	{r4, pc}

0800c98a <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 800c98a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c98c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800c990:	4605      	mov	r5, r0
 800c992:	2bff      	cmp	r3, #255	; 0xff
 800c994:	d007      	beq.n	800c9a6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 800c996:	2300      	movs	r3, #0
 800c998:	802b      	strh	r3, [r5, #0]
 800c99a:	806b      	strh	r3, [r5, #2]
 800c99c:	80ab      	strh	r3, [r5, #4]
 800c99e:	80eb      	strh	r3, [r5, #6]
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	b004      	add	sp, #16
 800c9a4:	bd70      	pop	{r4, r5, r6, pc}
 800c9a6:	f101 0426 	add.w	r4, r1, #38	; 0x26
 800c9aa:	4668      	mov	r0, sp
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	f005 ffc7 	bl	8012940 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800c9b2:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f005 ff4e 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c9bc:	4286      	cmp	r6, r0
 800c9be:	d1ea      	bne.n	800c996 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	a802      	add	r0, sp, #8
 800c9c4:	f005 ffbc 	bl	8012940 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800c9c8:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f005 ff7d 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c9d2:	4286      	cmp	r6, r0
 800c9d4:	d1df      	bne.n	800c996 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f005 ffb1 	bl	8012940 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800c9de:	e7df      	b.n	800c9a0 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>

0800c9e0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2501      	movs	r5, #1
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	8083      	strh	r3, [r0, #4]
 800c9ea:	80c3      	strh	r3, [r0, #6]
 800c9ec:	8103      	strh	r3, [r0, #8]
 800c9ee:	8143      	strh	r3, [r0, #10]
 800c9f0:	8183      	strh	r3, [r0, #12]
 800c9f2:	81c3      	strh	r3, [r0, #14]
 800c9f4:	8203      	strh	r3, [r0, #16]
 800c9f6:	8243      	strh	r3, [r0, #18]
 800c9f8:	61c3      	str	r3, [r0, #28]
 800c9fa:	8403      	strh	r3, [r0, #32]
 800c9fc:	8443      	strh	r3, [r0, #34]	; 0x22
 800c9fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800ca02:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 800ca06:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800ca0a:	4b07      	ldr	r3, [pc, #28]	; (800ca28 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 800ca0c:	6003      	str	r3, [r0, #0]
 800ca0e:	880b      	ldrh	r3, [r1, #0]
 800ca10:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ca12:	23ff      	movs	r3, #255	; 0xff
 800ca14:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800ca18:	f000 ff35 	bl	800d886 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ca1c:	4b03      	ldr	r3, [pc, #12]	; (800ca2c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 800ca1e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800ca22:	4620      	mov	r0, r4
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	0801e148 	.word	0x0801e148
 800ca2c:	0801dde4 	.word	0x0801dde4

0800ca30 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 800ca30:	4603      	mov	r3, r0
 800ca32:	3026      	adds	r0, #38	; 0x26
 800ca34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ca38:	b90b      	cbnz	r3, 800ca3e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 800ca3a:	f003 be15 	b.w	8010668 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800ca3e:	f003 be23 	b.w	8010688 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0800ca44 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 800ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	4604      	mov	r4, r0
 800ca4a:	469b      	mov	fp, r3
 800ca4c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800ca50:	b0b3      	sub	sp, #204	; 0xcc
 800ca52:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ca56:	f9b1 6000 	ldrsh.w	r6, [r1]
 800ca5a:	8888      	ldrh	r0, [r1, #4]
 800ca5c:	9206      	str	r2, [sp, #24]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4430      	add	r0, r6
 800ca62:	9211      	str	r2, [sp, #68]	; 0x44
 800ca64:	b280      	uxth	r0, r0
 800ca66:	fa0f fe80 	sxth.w	lr, r0
 800ca6a:	4596      	cmp	lr, r2
 800ca6c:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 800ca70:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 800ca74:	f340 811a 	ble.w	800ccac <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800ca78:	45b4      	cmp	ip, r6
 800ca7a:	f340 8117 	ble.w	800ccac <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800ca7e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ca82:	88ca      	ldrh	r2, [r1, #6]
 800ca84:	442a      	add	r2, r5
 800ca86:	b292      	uxth	r2, r2
 800ca88:	b211      	sxth	r1, r2
 800ca8a:	2900      	cmp	r1, #0
 800ca8c:	f340 810e 	ble.w	800ccac <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800ca90:	42ab      	cmp	r3, r5
 800ca92:	f340 810b 	ble.w	800ccac <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800ca96:	45f4      	cmp	ip, lr
 800ca98:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800ca9c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800caa0:	bfb8      	it	lt
 800caa2:	fa1f f08c 	uxthlt.w	r0, ip
 800caa6:	428b      	cmp	r3, r1
 800caa8:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 800caac:	bfb8      	it	lt
 800caae:	b29a      	uxthlt	r2, r3
 800cab0:	1b80      	subs	r0, r0, r6
 800cab2:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 800cab6:	1b52      	subs	r2, r2, r5
 800cab8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800cabc:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800cac0:	ab11      	add	r3, sp, #68	; 0x44
 800cac2:	ad13      	add	r5, sp, #76	; 0x4c
 800cac4:	6822      	ldr	r2, [r4, #0]
 800cac6:	1d26      	adds	r6, r4, #4
 800cac8:	9307      	str	r3, [sp, #28]
 800caca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cacc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cad0:	e885 0003 	stmia.w	r5, {r0, r1}
 800cad4:	4629      	mov	r1, r5
 800cad6:	4620      	mov	r0, r4
 800cad8:	4790      	blx	r2
 800cada:	4621      	mov	r1, r4
 800cadc:	a815      	add	r0, sp, #84	; 0x54
 800cade:	f003 fd25 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cae2:	a815      	add	r0, sp, #84	; 0x54
 800cae4:	f002 fb22 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800cae8:	9b07      	ldr	r3, [sp, #28]
 800caea:	4631      	mov	r1, r6
 800caec:	4618      	mov	r0, r3
 800caee:	f002 fb61 	bl	800f1b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800caf2:	4628      	mov	r0, r5
 800caf4:	f104 0526 	add.w	r5, r4, #38	; 0x26
 800caf8:	f002 fb18 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800cafc:	4628      	mov	r0, r5
 800cafe:	f005 ffb3 	bl	8012a68 <_ZNK8touchgfx6Bitmap7getDataEv>
 800cb02:	9007      	str	r0, [sp, #28]
 800cb04:	2800      	cmp	r0, #0
 800cb06:	f000 80ce 	beq.w	800cca6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 800cb0a:	f8db 2000 	ldr.w	r2, [fp]
 800cb0e:	a90d      	add	r1, sp, #52	; 0x34
 800cb10:	a809      	add	r0, sp, #36	; 0x24
 800cb12:	9209      	str	r2, [sp, #36]	; 0x24
 800cb14:	f8db 2004 	ldr.w	r2, [fp, #4]
 800cb18:	920a      	str	r2, [sp, #40]	; 0x28
 800cb1a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800cb1e:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb20:	f8db 200c 	ldr.w	r2, [fp, #12]
 800cb24:	920c      	str	r2, [sp, #48]	; 0x30
 800cb26:	f8da 2000 	ldr.w	r2, [sl]
 800cb2a:	920d      	str	r2, [sp, #52]	; 0x34
 800cb2c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800cb30:	920e      	str	r2, [sp, #56]	; 0x38
 800cb32:	f8da 2008 	ldr.w	r2, [sl, #8]
 800cb36:	920f      	str	r2, [sp, #60]	; 0x3c
 800cb38:	f8da 200c 	ldr.w	r2, [sl, #12]
 800cb3c:	9210      	str	r2, [sp, #64]	; 0x40
 800cb3e:	4632      	mov	r2, r6
 800cb40:	f002 fb1c 	bl	800f17c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb44:	4632      	mov	r2, r6
 800cb46:	a90e      	add	r1, sp, #56	; 0x38
 800cb48:	a80a      	add	r0, sp, #40	; 0x28
 800cb4a:	f002 fb17 	bl	800f17c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb4e:	4632      	mov	r2, r6
 800cb50:	a90f      	add	r1, sp, #60	; 0x3c
 800cb52:	a80b      	add	r0, sp, #44	; 0x2c
 800cb54:	f002 fb12 	bl	800f17c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb58:	4632      	mov	r2, r6
 800cb5a:	a910      	add	r1, sp, #64	; 0x40
 800cb5c:	a80c      	add	r0, sp, #48	; 0x30
 800cb5e:	f002 fb0d 	bl	800f17c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800cb62:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800cb66:	edd7 3a00 	vldr	s7, [r7]
 800cb6a:	eef0 6a67 	vmov.f32	s13, s15
 800cb6e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800cb72:	ed97 5a01 	vldr	s10, [r7, #4]
 800cb76:	eeb0 7a67 	vmov.f32	s14, s15
 800cb7a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800cb7e:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 800cb82:	edd9 2a00 	vldr	s5, [r9]
 800cb86:	eeb0 6a67 	vmov.f32	s12, s15
 800cb8a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800cb8e:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800cb92:	ed98 3a00 	vldr	s6, [r8]
 800cb96:	ed99 4a01 	vldr	s8, [r9, #4]
 800cb9a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cb9e:	edd8 4a01 	vldr	s9, [r8, #4]
 800cba2:	edd9 5a02 	vldr	s11, [r9, #8]
 800cba6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800cbaa:	ee16 6a10 	vmov	r6, s12
 800cbae:	eeb0 6a67 	vmov.f32	s12, s15
 800cbb2:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800cbb6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 800cbba:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cbbe:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 800cbc2:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 800cbc6:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 800cbca:	ee16 0a10 	vmov	r0, s12
 800cbce:	eeb0 6a67 	vmov.f32	s12, s15
 800cbd2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800cbd6:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 800cbda:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cbde:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800cbe2:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 800cbe6:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800cbea:	ee16 1a10 	vmov	r1, s12
 800cbee:	eeb0 6a67 	vmov.f32	s12, s15
 800cbf2:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800cbf6:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 800cbfa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cbfe:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800cc02:	f8d8 b008 	ldr.w	fp, [r8, #8]
 800cc06:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800cc0a:	68ff      	ldr	r7, [r7, #12]
 800cc0c:	ee16 2a10 	vmov	r2, s12
 800cc10:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 800cc14:	9624      	str	r6, [sp, #144]	; 0x90
 800cc16:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800cc1a:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800cc1e:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 800cc22:	4628      	mov	r0, r5
 800cc24:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 800cc28:	9b06      	ldr	r3, [sp, #24]
 800cc2a:	922d      	str	r2, [sp, #180]	; 0xb4
 800cc2c:	4a21      	ldr	r2, [pc, #132]	; (800ccb4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 800cc2e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc30:	8812      	ldrh	r2, [r2, #0]
 800cc32:	9b07      	ldr	r3, [sp, #28]
 800cc34:	9218      	str	r2, [sp, #96]	; 0x60
 800cc36:	9319      	str	r3, [sp, #100]	; 0x64
 800cc38:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 800cc3c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 800cc40:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800cc44:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 800cc48:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 800cc4c:	9731      	str	r7, [sp, #196]	; 0xc4
 800cc4e:	f005 ff3d 	bl	8012acc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800cc52:	901a      	str	r0, [sp, #104]	; 0x68
 800cc54:	4628      	mov	r0, r5
 800cc56:	f005 fdff 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cc5a:	901b      	str	r0, [sp, #108]	; 0x6c
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	f005 fe35 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cc62:	901c      	str	r0, [sp, #112]	; 0x70
 800cc64:	4628      	mov	r0, r5
 800cc66:	f005 fdf7 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cc6a:	4b13      	ldr	r3, [pc, #76]	; (800ccb8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 800cc6c:	901d      	str	r0, [sp, #116]	; 0x74
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cc74:	b10a      	cbz	r2, 800cc7a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 800cc76:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800cc78:	b905      	cbnz	r5, 800cc7c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 800cc7a:	689d      	ldr	r5, [r3, #8]
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800cc82:	f7ff fed5 	bl	800ca30 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 800cc86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc8a:	aa1e      	add	r2, sp, #120	; 0x78
 800cc8c:	a917      	add	r1, sp, #92	; 0x5c
 800cc8e:	9304      	str	r3, [sp, #16]
 800cc90:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cc94:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cc98:	ab13      	add	r3, sp, #76	; 0x4c
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	ab15      	add	r3, sp, #84	; 0x54
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	ab19      	add	r3, sp, #100	; 0x64
 800cca4:	47b0      	blx	r6
 800cca6:	b033      	add	sp, #204	; 0xcc
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	2300      	movs	r3, #0
 800ccae:	9312      	str	r3, [sp, #72]	; 0x48
 800ccb0:	e706      	b.n	800cac0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 800ccb2:	bf00      	nop
 800ccb4:	24006bb6 	.word	0x24006bb6
 800ccb8:	24006bbc 	.word	0x24006bbc

0800ccbc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	ed2d 8b04 	vpush	{d8-d9}
 800ccc2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ccc6:	b098      	sub	sp, #96	; 0x60
 800ccc8:	4604      	mov	r4, r0
 800ccca:	460e      	mov	r6, r1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d065      	beq.n	800cd9c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 800ccd0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800ccd4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800ccd8:	ed9f 8a37 	vldr	s16, [pc, #220]	; 800cdb8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 800ccdc:	ee09 3a10 	vmov	s18, r3
 800cce0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800cce4:	4628      	mov	r0, r5
 800cce6:	ee08 3a90 	vmov	s17, r3
 800ccea:	4b34      	ldr	r3, [pc, #208]	; (800cdbc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 800ccec:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800ccf0:	930c      	str	r3, [sp, #48]	; 0x30
 800ccf2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800ccf6:	930d      	str	r3, [sp, #52]	; 0x34
 800ccf8:	930e      	str	r3, [sp, #56]	; 0x38
 800ccfa:	ee39 9a08 	vadd.f32	s18, s18, s16
 800ccfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd00:	f005 fdaa 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cd04:	ee07 0a90 	vmov	s15, r0
 800cd08:	4628      	mov	r0, r5
 800cd0a:	ee78 8a88 	vadd.f32	s17, s17, s16
 800cd0e:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800cd12:	f005 fddb 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cd16:	4b2a      	ldr	r3, [pc, #168]	; (800cdc0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 800cd18:	ee07 0a90 	vmov	s15, r0
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd22:	eef0 7a48 	vmov.f32	s15, s16
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d13c      	bne.n	800cda4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 800cd2a:	eef0 6a69 	vmov.f32	s13, s19
 800cd2e:	ee19 3a90 	vmov	r3, s19
 800cd32:	eeb0 6a47 	vmov.f32	s12, s14
 800cd36:	eef0 5a47 	vmov.f32	s11, s14
 800cd3a:	eef0 9a48 	vmov.f32	s19, s16
 800cd3e:	eeb0 7a48 	vmov.f32	s14, s16
 800cd42:	9314      	str	r3, [sp, #80]	; 0x50
 800cd44:	ab14      	add	r3, sp, #80	; 0x50
 800cd46:	2200      	movs	r2, #0
 800cd48:	4631      	mov	r1, r6
 800cd4a:	9303      	str	r3, [sp, #12]
 800cd4c:	ab10      	add	r3, sp, #64	; 0x40
 800cd4e:	4620      	mov	r0, r4
 800cd50:	edcd 7a04 	vstr	s15, [sp, #16]
 800cd54:	9302      	str	r3, [sp, #8]
 800cd56:	ab0c      	add	r3, sp, #48	; 0x30
 800cd58:	ed8d 9a05 	vstr	s18, [sp, #20]
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	ab08      	add	r3, sp, #32
 800cd60:	ed8d 9a06 	vstr	s18, [sp, #24]
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	ab04      	add	r3, sp, #16
 800cd68:	edcd 7a07 	vstr	s15, [sp, #28]
 800cd6c:	edcd 7a08 	vstr	s15, [sp, #32]
 800cd70:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 800cd74:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800cd78:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 800cd7c:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800cd80:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 800cd84:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800cd88:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800cd8c:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 800cd90:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 800cd94:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 800cd98:	f7ff fe54 	bl	800ca44 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800cd9c:	b018      	add	sp, #96	; 0x60
 800cd9e:	ecbd 8b04 	vpop	{d8-d9}
 800cda2:	bd70      	pop	{r4, r5, r6, pc}
 800cda4:	eef0 6a47 	vmov.f32	s13, s14
 800cda8:	ee18 3a10 	vmov	r3, s16
 800cdac:	eef0 5a69 	vmov.f32	s11, s19
 800cdb0:	eeb0 6a48 	vmov.f32	s12, s16
 800cdb4:	e7c5      	b.n	800cd42 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 800cdb6:	bf00      	nop
 800cdb8:	00000000 	.word	0x00000000
 800cdbc:	42c80000 	.word	0x42c80000
 800cdc0:	24006bb4 	.word	0x24006bb4

0800cdc4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	8002      	strh	r2, [r0, #0]
 800cdc8:	8042      	strh	r2, [r0, #2]
 800cdca:	8082      	strh	r2, [r0, #4]
 800cdcc:	80c2      	strh	r2, [r0, #6]
 800cdce:	4770      	bx	lr

0800cdd0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	6803      	ldr	r3, [r0, #0]
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	4615      	mov	r5, r2
 800cdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdda:	4798      	blx	r3
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	4629      	mov	r1, r5
 800cde0:	4620      	mov	r0, r4
 800cde2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cde4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cde8:	4718      	bx	r3

0800cdea <_ZN8touchgfx8TextAreaD1Ev>:
 800cdea:	4770      	bx	lr

0800cdec <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800cdec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdf2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800cdf4:	4299      	cmp	r1, r3
 800cdf6:	d029      	beq.n	800ce4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	b92b      	cbnz	r3, 800ce0a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800cdfe:	4b15      	ldr	r3, [pc, #84]	; (800ce54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800ce00:	21ae      	movs	r1, #174	; 0xae
 800ce02:	4a15      	ldr	r2, [pc, #84]	; (800ce58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800ce04:	4815      	ldr	r0, [pc, #84]	; (800ce5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800ce06:	f00e f939 	bl	801b07c <__assert_func>
 800ce0a:	4a15      	ldr	r2, [pc, #84]	; (800ce60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800ce0c:	8812      	ldrh	r2, [r2, #0]
 800ce0e:	428a      	cmp	r2, r1
 800ce10:	d803      	bhi.n	800ce1a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800ce12:	4b14      	ldr	r3, [pc, #80]	; (800ce64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800ce14:	21af      	movs	r1, #175	; 0xaf
 800ce16:	4a10      	ldr	r2, [pc, #64]	; (800ce58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800ce18:	e7f4      	b.n	800ce04 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800ce1a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800ce1e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800ce22:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800ce24:	7854      	ldrb	r4, [r2, #1]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800ce2c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	69de      	ldr	r6, [r3, #28]
 800ce34:	4b0d      	ldr	r3, [pc, #52]	; (800ce6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800ce36:	6818      	ldr	r0, [r3, #0]
 800ce38:	f7f6 fd82 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4602      	mov	r2, r0
 800ce40:	4621      	mov	r1, r4
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b0      	blx	r6
 800ce48:	b002      	add	sp, #8
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	e7fb      	b.n	800ce48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800ce50:	24006c0c 	.word	0x24006c0c
 800ce54:	0801cd10 	.word	0x0801cd10
 800ce58:	0801dec4 	.word	0x0801dec4
 800ce5c:	0801cd9e 	.word	0x0801cd9e
 800ce60:	24006c10 	.word	0x24006c10
 800ce64:	0801cdc7 	.word	0x0801cdc7
 800ce68:	24006c14 	.word	0x24006c14
 800ce6c:	24006c18 	.word	0x24006c18

0800ce70 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	6803      	ldr	r3, [r0, #0]
 800ce74:	4604      	mov	r4, r0
 800ce76:	b28d      	uxth	r5, r1
 800ce78:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800ce7a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800ce7c:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	b92b      	cbnz	r3, 800ce8e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800ce82:	4b10      	ldr	r3, [pc, #64]	; (800cec4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800ce84:	21ae      	movs	r1, #174	; 0xae
 800ce86:	4a10      	ldr	r2, [pc, #64]	; (800cec8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800ce88:	4810      	ldr	r0, [pc, #64]	; (800cecc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800ce8a:	f00e f8f7 	bl	801b07c <__assert_func>
 800ce8e:	4910      	ldr	r1, [pc, #64]	; (800ced0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800ce90:	8809      	ldrh	r1, [r1, #0]
 800ce92:	4291      	cmp	r1, r2
 800ce94:	d803      	bhi.n	800ce9e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800ce96:	4b0f      	ldr	r3, [pc, #60]	; (800ced4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800ce98:	21af      	movs	r1, #175	; 0xaf
 800ce9a:	4a0b      	ldr	r2, [pc, #44]	; (800cec8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800ce9c:	e7f4      	b.n	800ce88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800ce9e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800cea2:	4b0d      	ldr	r3, [pc, #52]	; (800ced8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ceaa:	6803      	ldr	r3, [r0, #0]
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	4798      	blx	r3
 800ceb0:	1a29      	subs	r1, r5, r0
 800ceb2:	4633      	mov	r3, r6
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	b209      	sxth	r1, r1
 800ceb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cebc:	4718      	bx	r3
 800cebe:	bf00      	nop
 800cec0:	24006c0c 	.word	0x24006c0c
 800cec4:	0801cd10 	.word	0x0801cd10
 800cec8:	0801dec4 	.word	0x0801dec4
 800cecc:	0801cd9e 	.word	0x0801cd9e
 800ced0:	24006c10 	.word	0x24006c10
 800ced4:	0801cdc7 	.word	0x0801cdc7
 800ced8:	24006c14 	.word	0x24006c14

0800cedc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800cedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cee4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800cee6:	b08c      	sub	sp, #48	; 0x30
 800cee8:	4604      	mov	r4, r0
 800ceea:	4293      	cmp	r3, r2
 800ceec:	4688      	mov	r8, r1
 800ceee:	d05f      	beq.n	800cfb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800cef0:	4e31      	ldr	r6, [pc, #196]	; (800cfb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800cef2:	6832      	ldr	r2, [r6, #0]
 800cef4:	b92a      	cbnz	r2, 800cf02 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800cef6:	4b31      	ldr	r3, [pc, #196]	; (800cfbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800cef8:	21ae      	movs	r1, #174	; 0xae
 800cefa:	4a31      	ldr	r2, [pc, #196]	; (800cfc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800cefc:	4831      	ldr	r0, [pc, #196]	; (800cfc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800cefe:	f00e f8bd 	bl	801b07c <__assert_func>
 800cf02:	4d31      	ldr	r5, [pc, #196]	; (800cfc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800cf04:	8829      	ldrh	r1, [r5, #0]
 800cf06:	4299      	cmp	r1, r3
 800cf08:	d803      	bhi.n	800cf12 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800cf0a:	4b30      	ldr	r3, [pc, #192]	; (800cfcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800cf0c:	21af      	movs	r1, #175	; 0xaf
 800cf0e:	4a2c      	ldr	r2, [pc, #176]	; (800cfc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800cf10:	e7f4      	b.n	800cefc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800cf12:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800cf16:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800cf1a:	4b2d      	ldr	r3, [pc, #180]	; (800cfd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf22:	2a00      	cmp	r2, #0
 800cf24:	d044      	beq.n	800cfb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800cf26:	784b      	ldrb	r3, [r1, #1]
 800cf28:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800cf2c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800cf30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800cf34:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800cf38:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800cf3c:	4b25      	ldr	r3, [pc, #148]	; (800cfd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800cf3e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800cf48:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800cf4c:	9207      	str	r2, [sp, #28]
 800cf4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800cf50:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cf54:	f88d a020 	strb.w	sl, [sp, #32]
 800cf58:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800cf5c:	9009      	str	r0, [sp, #36]	; 0x24
 800cf5e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800cf62:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800cf66:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800cf6a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800cf6e:	b10a      	cbz	r2, 800cf74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800cf70:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800cf72:	b907      	cbnz	r7, 800cf76 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800cf74:	689f      	ldr	r7, [r3, #8]
 800cf76:	f10d 0914 	add.w	r9, sp, #20
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	4648      	mov	r0, r9
 800cf7e:	f003 fad5 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cf82:	6833      	ldr	r3, [r6, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d0b6      	beq.n	800cef6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800cf88:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800cf8a:	882b      	ldrh	r3, [r5, #0]
 800cf8c:	428b      	cmp	r3, r1
 800cf8e:	d9bc      	bls.n	800cf0a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800cf90:	4b11      	ldr	r3, [pc, #68]	; (800cfd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800cf92:	6818      	ldr	r0, [r3, #0]
 800cf94:	f7f6 fcd4 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	9001      	str	r0, [sp, #4]
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cfa2:	ab07      	add	r3, sp, #28
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	4643      	mov	r3, r8
 800cfa8:	e899 0006 	ldmia.w	r9, {r1, r2}
 800cfac:	f7f6 fc7a 	bl	80038a4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800cfb0:	b00c      	add	sp, #48	; 0x30
 800cfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb6:	bf00      	nop
 800cfb8:	24006c0c 	.word	0x24006c0c
 800cfbc:	0801cd10 	.word	0x0801cd10
 800cfc0:	0801dec4 	.word	0x0801dec4
 800cfc4:	0801cd9e 	.word	0x0801cd9e
 800cfc8:	24006c10 	.word	0x24006c10
 800cfcc:	0801cdc7 	.word	0x0801cdc7
 800cfd0:	24006c14 	.word	0x24006c14
 800cfd4:	24006bbc 	.word	0x24006bbc
 800cfd8:	24006c18 	.word	0x24006c18

0800cfdc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800cfdc:	b40e      	push	{r1, r2, r3}
 800cfde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800cfe8:	b09c      	sub	sp, #112	; 0x70
 800cfea:	4604      	mov	r4, r0
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d06b      	beq.n	800d0c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800cff0:	aa26      	add	r2, sp, #152	; 0x98
 800cff2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800d0dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800cff6:	9202      	str	r2, [sp, #8]
 800cff8:	f8da 2000 	ldr.w	r2, [sl]
 800cffc:	b92a      	cbnz	r2, 800d00a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800cffe:	4b33      	ldr	r3, [pc, #204]	; (800d0cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800d000:	21ae      	movs	r1, #174	; 0xae
 800d002:	4a33      	ldr	r2, [pc, #204]	; (800d0d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800d004:	4833      	ldr	r0, [pc, #204]	; (800d0d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800d006:	f00e f839 	bl	801b07c <__assert_func>
 800d00a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800d0e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800d00e:	f8b8 1000 	ldrh.w	r1, [r8]
 800d012:	4299      	cmp	r1, r3
 800d014:	d803      	bhi.n	800d01e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800d016:	4b30      	ldr	r3, [pc, #192]	; (800d0d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800d018:	21af      	movs	r1, #175	; 0xaf
 800d01a:	4a2d      	ldr	r2, [pc, #180]	; (800d0d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800d01c:	e7f2      	b.n	800d004 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800d01e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800d0e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800d022:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d026:	f8d9 3000 	ldr.w	r3, [r9]
 800d02a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	4628      	mov	r0, r5
 800d032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d034:	4798      	blx	r3
 800d036:	4606      	mov	r6, r0
 800d038:	b207      	sxth	r7, r0
 800d03a:	a803      	add	r0, sp, #12
 800d03c:	f003 fe50 	bl	8010ce0 <_ZN8touchgfx12TextProviderC1Ev>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	4628      	mov	r0, r5
 800d044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d046:	4798      	blx	r3
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	4683      	mov	fp, r0
 800d04c:	4628      	mov	r0, r5
 800d04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d050:	4798      	blx	r3
 800d052:	465b      	mov	r3, fp
 800d054:	9000      	str	r0, [sp, #0]
 800d056:	a803      	add	r0, sp, #12
 800d058:	9925      	ldr	r1, [sp, #148]	; 0x94
 800d05a:	9a02      	ldr	r2, [sp, #8]
 800d05c:	f003 fe93 	bl	8010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d060:	f8da 3000 	ldr.w	r3, [sl]
 800d064:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0c8      	beq.n	800cffe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800d06c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800d06e:	f8b8 0000 	ldrh.w	r0, [r8]
 800d072:	4290      	cmp	r0, r2
 800d074:	d9cf      	bls.n	800d016 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800d076:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800d07a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800d07e:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800d082:	786a      	ldrb	r2, [r5, #1]
 800d084:	8925      	ldrh	r5, [r4, #8]
 800d086:	f8d9 3000 	ldr.w	r3, [r9]
 800d08a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800d08e:	eba5 050c 	sub.w	r5, r5, ip
 800d092:	b22d      	sxth	r5, r5
 800d094:	9500      	str	r5, [sp, #0]
 800d096:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d09a:	a803      	add	r0, sp, #12
 800d09c:	f001 fd61 	bl	800eb62 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800d0a0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800d0a4:	b203      	sxth	r3, r0
 800d0a6:	18b9      	adds	r1, r7, r2
 800d0a8:	2900      	cmp	r1, #0
 800d0aa:	dd0b      	ble.n	800d0c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	fb13 f302 	smulbb	r3, r3, r2
 800d0b2:	fb16 3300 	smlabb	r3, r6, r0, r3
 800d0b6:	b21f      	sxth	r7, r3
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	b01c      	add	sp, #112	; 0x70
 800d0bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	b003      	add	sp, #12
 800d0c2:	4770      	bx	lr
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	dcf7      	bgt.n	800d0b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800d0c8:	2700      	movs	r7, #0
 800d0ca:	e7f5      	b.n	800d0b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800d0cc:	0801cd10 	.word	0x0801cd10
 800d0d0:	0801dec4 	.word	0x0801dec4
 800d0d4:	0801cd9e 	.word	0x0801cd9e
 800d0d8:	0801cdc7 	.word	0x0801cdc7
 800d0dc:	24006c0c 	.word	0x24006c0c
 800d0e0:	24006c10 	.word	0x24006c10
 800d0e4:	24006c14 	.word	0x24006c14

0800d0e8 <_ZN8touchgfx8TextAreaD0Ev>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	213c      	movs	r1, #60	; 0x3c
 800d0ee:	f00d feaf 	bl	801ae50 <_ZdlPvj>
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	bd10      	pop	{r4, pc}
	...

0800d0f8 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800d0f8:	b570      	push	{r4, r5, r6, lr}
 800d0fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0fe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d100:	4604      	mov	r4, r0
 800d102:	4299      	cmp	r1, r3
 800d104:	d01e      	beq.n	800d144 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800d106:	6803      	ldr	r3, [r0, #0]
 800d108:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800d10a:	4b0f      	ldr	r3, [pc, #60]	; (800d148 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	b92b      	cbnz	r3, 800d11c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800d110:	4b0e      	ldr	r3, [pc, #56]	; (800d14c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800d112:	21ae      	movs	r1, #174	; 0xae
 800d114:	4a0e      	ldr	r2, [pc, #56]	; (800d150 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800d116:	480f      	ldr	r0, [pc, #60]	; (800d154 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800d118:	f00d ffb0 	bl	801b07c <__assert_func>
 800d11c:	4b0e      	ldr	r3, [pc, #56]	; (800d158 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800d11e:	881b      	ldrh	r3, [r3, #0]
 800d120:	428b      	cmp	r3, r1
 800d122:	d803      	bhi.n	800d12c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800d124:	4b0d      	ldr	r3, [pc, #52]	; (800d15c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800d126:	21af      	movs	r1, #175	; 0xaf
 800d128:	4a09      	ldr	r2, [pc, #36]	; (800d150 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800d12a:	e7f4      	b.n	800d116 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800d12c:	4b0c      	ldr	r3, [pc, #48]	; (800d160 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800d12e:	6818      	ldr	r0, [r3, #0]
 800d130:	f7f6 fc06 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800d134:	2300      	movs	r3, #0
 800d136:	4601      	mov	r1, r0
 800d138:	46ac      	mov	ip, r5
 800d13a:	4620      	mov	r0, r4
 800d13c:	461a      	mov	r2, r3
 800d13e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d142:	4760      	bx	ip
 800d144:	2000      	movs	r0, #0
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	24006c0c 	.word	0x24006c0c
 800d14c:	0801cd10 	.word	0x0801cd10
 800d150:	0801dec4 	.word	0x0801dec4
 800d154:	0801cd9e 	.word	0x0801cd9e
 800d158:	24006c10 	.word	0x24006c10
 800d15c:	0801cdc7 	.word	0x0801cdc7
 800d160:	24006c18 	.word	0x24006c18

0800d164 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	6803      	ldr	r3, [r0, #0]
 800d168:	4604      	mov	r4, r0
 800d16a:	4615      	mov	r5, r2
 800d16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d16e:	4798      	blx	r3
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	4629      	mov	r1, r5
 800d174:	4620      	mov	r0, r4
 800d176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d17c:	4718      	bx	r3

0800d17e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800d17e:	b538      	push	{r3, r4, r5, lr}
 800d180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d184:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800d186:	4604      	mov	r4, r0
 800d188:	429a      	cmp	r2, r3
 800d18a:	d014      	beq.n	800d1b6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800d18c:	6803      	ldr	r3, [r0, #0]
 800d18e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d190:	4798      	blx	r3
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	4605      	mov	r5, r0
 800d196:	4620      	mov	r0, r4
 800d198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d19a:	4798      	blx	r3
 800d19c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d1a0:	b22d      	sxth	r5, r5
 800d1a2:	4601      	mov	r1, r0
 800d1a4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800d1a8:	bf06      	itte	eq
 800d1aa:	4602      	moveq	r2, r0
 800d1ac:	4629      	moveq	r1, r5
 800d1ae:	462a      	movne	r2, r5
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f7ff ffd7 	bl	800d164 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}

0800d1b8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800d1b8:	888a      	ldrh	r2, [r1, #4]
 800d1ba:	8582      	strh	r2, [r0, #44]	; 0x2c
 800d1bc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800d1c0:	b922      	cbnz	r2, 800d1cc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800d1c2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d1c6:	b90b      	cbnz	r3, 800d1cc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800d1c8:	f7ff bfd9 	b.w	800d17e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800d1cc:	4770      	bx	lr

0800d1ce <_ZNK8touchgfx3Box12getSolidRectEv>:
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	8083      	strh	r3, [r0, #4]
 800d1d2:	80c3      	strh	r3, [r0, #6]
 800d1d4:	8003      	strh	r3, [r0, #0]
 800d1d6:	8043      	strh	r3, [r0, #2]
 800d1d8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800d1dc:	2bff      	cmp	r3, #255	; 0xff
 800d1de:	bf01      	itttt	eq
 800d1e0:	890b      	ldrheq	r3, [r1, #8]
 800d1e2:	8083      	strheq	r3, [r0, #4]
 800d1e4:	894b      	ldrheq	r3, [r1, #10]
 800d1e6:	80c3      	strheq	r3, [r0, #6]
 800d1e8:	4770      	bx	lr
	...

0800d1ec <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800d1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	466b      	mov	r3, sp
 800d1f2:	6808      	ldr	r0, [r1, #0]
 800d1f4:	6849      	ldr	r1, [r1, #4]
 800d1f6:	c303      	stmia	r3!, {r0, r1}
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	4669      	mov	r1, sp
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d200:	4798      	blx	r3
 800d202:	4b08      	ldr	r3, [pc, #32]	; (800d224 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d20a:	b10a      	cbz	r2, 800d210 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800d20c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d20e:	b900      	cbnz	r0, 800d212 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800d210:	6898      	ldr	r0, [r3, #8]
 800d212:	6803      	ldr	r3, [r0, #0]
 800d214:	4669      	mov	r1, sp
 800d216:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d218:	699d      	ldr	r5, [r3, #24]
 800d21a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d21e:	47a8      	blx	r5
 800d220:	b003      	add	sp, #12
 800d222:	bd30      	pop	{r4, r5, pc}
 800d224:	24006bbc 	.word	0x24006bbc

0800d228 <_ZN8touchgfx3BoxD1Ev>:
 800d228:	4770      	bx	lr

0800d22a <_ZN8touchgfx3BoxD0Ev>:
 800d22a:	b510      	push	{r4, lr}
 800d22c:	4604      	mov	r4, r0
 800d22e:	212c      	movs	r1, #44	; 0x2c
 800d230:	f00d fe0e 	bl	801ae50 <_ZdlPvj>
 800d234:	4620      	mov	r0, r4
 800d236:	bd10      	pop	{r4, pc}

0800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	880b      	ldrh	r3, [r1, #0]
 800d23c:	4605      	mov	r5, r0
 800d23e:	4604      	mov	r4, r0
 800d240:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800d242:	8813      	ldrh	r3, [r2, #0]
 800d244:	f825 3f30 	strh.w	r3, [r5, #48]!
 800d248:	4628      	mov	r0, r5
 800d24a:	f005 fb05 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d24e:	4606      	mov	r6, r0
 800d250:	4628      	mov	r0, r5
 800d252:	f005 fb3b 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	4605      	mov	r5, r0
 800d25a:	b231      	sxth	r1, r6
 800d25c:	4620      	mov	r0, r4
 800d25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d260:	4798      	blx	r3
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	b229      	sxth	r1, r5
 800d266:	4620      	mov	r0, r4
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d26e:	4718      	bx	r3

0800d270 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800d270:	b510      	push	{r4, lr}
 800d272:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800d276:	4604      	mov	r4, r0
 800d278:	2bff      	cmp	r3, #255	; 0xff
 800d27a:	d006      	beq.n	800d28a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800d27c:	2300      	movs	r3, #0
 800d27e:	8003      	strh	r3, [r0, #0]
 800d280:	8043      	strh	r3, [r0, #2]
 800d282:	8083      	strh	r3, [r0, #4]
 800d284:	80c3      	strh	r3, [r0, #6]
 800d286:	4620      	mov	r0, r4
 800d288:	bd10      	pop	{r4, pc}
 800d28a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800d28e:	b11b      	cbz	r3, 800d298 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800d290:	3130      	adds	r1, #48	; 0x30
 800d292:	f005 fb55 	bl	8012940 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d296:	e7f6      	b.n	800d286 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800d298:	312e      	adds	r1, #46	; 0x2e
 800d29a:	e7fa      	b.n	800d292 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800d29c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800d2a4:	b08a      	sub	sp, #40	; 0x28
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	4688      	mov	r8, r1
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d044      	beq.n	800d338 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800d2ae:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800d2b0:	a805      	add	r0, sp, #20
 800d2b2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d2b6:	f005 facf 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	b206      	sxth	r6, r0
 800d2be:	a805      	add	r0, sp, #20
 800d2c0:	f005 fb04 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d2c4:	f9b8 2000 	ldrsh.w	r2, [r8]
 800d2c8:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	fa0f fc80 	sxth.w	ip, r0
 800d2d2:	4417      	add	r7, r2
 800d2d4:	9306      	str	r3, [sp, #24]
 800d2d6:	b2bf      	uxth	r7, r7
 800d2d8:	fa0f fe87 	sxth.w	lr, r7
 800d2dc:	459e      	cmp	lr, r3
 800d2de:	dd2d      	ble.n	800d33c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d2e0:	4296      	cmp	r6, r2
 800d2e2:	dd2b      	ble.n	800d33c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d2e4:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800d2e8:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800d2ec:	4419      	add	r1, r3
 800d2ee:	b289      	uxth	r1, r1
 800d2f0:	fa0f f881 	sxth.w	r8, r1
 800d2f4:	f1b8 0f00 	cmp.w	r8, #0
 800d2f8:	dd20      	ble.n	800d33c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d2fa:	459c      	cmp	ip, r3
 800d2fc:	dd1e      	ble.n	800d33c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800d2fe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800d302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d306:	4576      	cmp	r6, lr
 800d308:	bfa8      	it	ge
 800d30a:	463d      	movge	r5, r7
 800d30c:	45c4      	cmp	ip, r8
 800d30e:	bfa8      	it	ge
 800d310:	4608      	movge	r0, r1
 800d312:	f8ad 2018 	strh.w	r2, [sp, #24]
 800d316:	1aad      	subs	r5, r5, r2
 800d318:	1ac0      	subs	r0, r0, r3
 800d31a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d31e:	f8ad 501c 	strh.w	r5, [sp, #28]
 800d322:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d326:	4b1f      	ldr	r3, [pc, #124]	; (800d3a4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	b953      	cbnz	r3, 800d342 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800d32c:	4b1e      	ldr	r3, [pc, #120]	; (800d3a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800d32e:	2187      	movs	r1, #135	; 0x87
 800d330:	4a1e      	ldr	r2, [pc, #120]	; (800d3ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800d332:	481f      	ldr	r0, [pc, #124]	; (800d3b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800d334:	f00d fea2 	bl	801b07c <__assert_func>
 800d338:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800d33a:	e7b9      	b.n	800d2b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800d33c:	2300      	movs	r3, #0
 800d33e:	9307      	str	r3, [sp, #28]
 800d340:	e7f1      	b.n	800d326 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800d342:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d026      	beq.n	800d39c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800d34e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d352:	2b00      	cmp	r3, #0
 800d354:	dd22      	ble.n	800d39c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800d356:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	dd1e      	ble.n	800d39c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800d35e:	2300      	movs	r3, #0
 800d360:	a908      	add	r1, sp, #32
 800d362:	4620      	mov	r0, r4
 800d364:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36c:	4798      	blx	r3
 800d36e:	4b11      	ldr	r3, [pc, #68]	; (800d3b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d376:	b10a      	cbz	r2, 800d37c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800d378:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d37a:	b900      	cbnz	r0, 800d37e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800d37c:	6898      	ldr	r0, [r3, #8]
 800d37e:	2501      	movs	r5, #1
 800d380:	6801      	ldr	r1, [r0, #0]
 800d382:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800d386:	9502      	str	r5, [sp, #8]
 800d388:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800d38c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800d390:	9401      	str	r4, [sp, #4]
 800d392:	ac06      	add	r4, sp, #24
 800d394:	9400      	str	r4, [sp, #0]
 800d396:	688c      	ldr	r4, [r1, #8]
 800d398:	a905      	add	r1, sp, #20
 800d39a:	47a0      	blx	r4
 800d39c:	b00a      	add	sp, #40	; 0x28
 800d39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a2:	bf00      	nop
 800d3a4:	24006c44 	.word	0x24006c44
 800d3a8:	0801dcd6 	.word	0x0801dcd6
 800d3ac:	0801df58 	.word	0x0801df58
 800d3b0:	0801dd12 	.word	0x0801dd12
 800d3b4:	24006bbc 	.word	0x24006bbc

0800d3b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 800d3b8:	4770      	bx	lr
	...

0800d3bc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800d3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3c2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	4299      	cmp	r1, r3
 800d3c8:	d02a      	beq.n	800d420 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800d3ca:	4b16      	ldr	r3, [pc, #88]	; (800d424 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	b92b      	cbnz	r3, 800d3dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800d3d0:	4b15      	ldr	r3, [pc, #84]	; (800d428 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800d3d2:	21ae      	movs	r1, #174	; 0xae
 800d3d4:	4a15      	ldr	r2, [pc, #84]	; (800d42c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800d3d6:	4816      	ldr	r0, [pc, #88]	; (800d430 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800d3d8:	f00d fe50 	bl	801b07c <__assert_func>
 800d3dc:	4a15      	ldr	r2, [pc, #84]	; (800d434 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800d3de:	8812      	ldrh	r2, [r2, #0]
 800d3e0:	428a      	cmp	r2, r1
 800d3e2:	d803      	bhi.n	800d3ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800d3e4:	4b14      	ldr	r3, [pc, #80]	; (800d438 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800d3e6:	21af      	movs	r1, #175	; 0xaf
 800d3e8:	4a10      	ldr	r2, [pc, #64]	; (800d42c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800d3ea:	e7f4      	b.n	800d3d6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800d3ec:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800d3f0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800d3f4:	4b11      	ldr	r3, [pc, #68]	; (800d43c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800d3f6:	7854      	ldrb	r4, [r2, #1]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800d3fe:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800d402:	682b      	ldr	r3, [r5, #0]
 800d404:	69df      	ldr	r7, [r3, #28]
 800d406:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800d408:	6818      	ldr	r0, [r3, #0]
 800d40a:	f7f6 fa99 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800d40e:	2300      	movs	r3, #0
 800d410:	4602      	mov	r2, r0
 800d412:	4621      	mov	r1, r4
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	4628      	mov	r0, r5
 800d418:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800d41a:	47b8      	blx	r7
 800d41c:	b003      	add	sp, #12
 800d41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d420:	2000      	movs	r0, #0
 800d422:	e7fb      	b.n	800d41c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800d424:	24006c0c 	.word	0x24006c0c
 800d428:	0801cd10 	.word	0x0801cd10
 800d42c:	0801e004 	.word	0x0801e004
 800d430:	0801cd9e 	.word	0x0801cd9e
 800d434:	24006c10 	.word	0x24006c10
 800d438:	0801cdc7 	.word	0x0801cdc7
 800d43c:	24006c14 	.word	0x24006c14
 800d440:	24006c18 	.word	0x24006c18

0800d444 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d44a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800d44c:	4604      	mov	r4, r0
 800d44e:	4299      	cmp	r1, r3
 800d450:	d01e      	beq.n	800d490 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800d452:	6803      	ldr	r3, [r0, #0]
 800d454:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800d456:	4b0f      	ldr	r3, [pc, #60]	; (800d494 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	b92b      	cbnz	r3, 800d468 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 800d45c:	4b0e      	ldr	r3, [pc, #56]	; (800d498 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800d45e:	21ae      	movs	r1, #174	; 0xae
 800d460:	4a0e      	ldr	r2, [pc, #56]	; (800d49c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800d462:	480f      	ldr	r0, [pc, #60]	; (800d4a0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800d464:	f00d fe0a 	bl	801b07c <__assert_func>
 800d468:	4b0e      	ldr	r3, [pc, #56]	; (800d4a4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	428b      	cmp	r3, r1
 800d46e:	d803      	bhi.n	800d478 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 800d470:	4b0d      	ldr	r3, [pc, #52]	; (800d4a8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 800d472:	21af      	movs	r1, #175	; 0xaf
 800d474:	4a09      	ldr	r2, [pc, #36]	; (800d49c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800d476:	e7f4      	b.n	800d462 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 800d478:	4b0c      	ldr	r3, [pc, #48]	; (800d4ac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 800d47a:	6818      	ldr	r0, [r3, #0]
 800d47c:	f7f6 fa60 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800d480:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d482:	4601      	mov	r1, r0
 800d484:	46ac      	mov	ip, r5
 800d486:	4620      	mov	r0, r4
 800d488:	2300      	movs	r3, #0
 800d48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d48e:	4760      	bx	ip
 800d490:	2000      	movs	r0, #0
 800d492:	bd70      	pop	{r4, r5, r6, pc}
 800d494:	24006c0c 	.word	0x24006c0c
 800d498:	0801cd10 	.word	0x0801cd10
 800d49c:	0801e004 	.word	0x0801e004
 800d4a0:	0801cd9e 	.word	0x0801cd9e
 800d4a4:	24006c10 	.word	0x24006c10
 800d4a8:	0801cdc7 	.word	0x0801cdc7
 800d4ac:	24006c18 	.word	0x24006c18

0800d4b0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	2140      	movs	r1, #64	; 0x40
 800d4b6:	f00d fccb 	bl	801ae50 <_ZdlPvj>
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	bd10      	pop	{r4, pc}
	...

0800d4c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800d4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4c8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800d4ca:	b08c      	sub	sp, #48	; 0x30
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	460e      	mov	r6, r1
 800d4d2:	d05d      	beq.n	800d590 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800d4d4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800d5b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 800d4d8:	f8d8 2000 	ldr.w	r2, [r8]
 800d4dc:	b92a      	cbnz	r2, 800d4ea <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 800d4de:	4b2e      	ldr	r3, [pc, #184]	; (800d598 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 800d4e0:	21ae      	movs	r1, #174	; 0xae
 800d4e2:	4a2e      	ldr	r2, [pc, #184]	; (800d59c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800d4e4:	482e      	ldr	r0, [pc, #184]	; (800d5a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 800d4e6:	f00d fdc9 	bl	801b07c <__assert_func>
 800d4ea:	4f2e      	ldr	r7, [pc, #184]	; (800d5a4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 800d4ec:	8839      	ldrh	r1, [r7, #0]
 800d4ee:	4299      	cmp	r1, r3
 800d4f0:	d803      	bhi.n	800d4fa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 800d4f2:	4b2d      	ldr	r3, [pc, #180]	; (800d5a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 800d4f4:	21af      	movs	r1, #175	; 0xaf
 800d4f6:	4a29      	ldr	r2, [pc, #164]	; (800d59c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800d4f8:	e7f4      	b.n	800d4e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 800d4fa:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800d4fe:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d502:	4b2a      	ldr	r3, [pc, #168]	; (800d5ac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d50a:	2a00      	cmp	r2, #0
 800d50c:	d040      	beq.n	800d590 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800d50e:	784b      	ldrb	r3, [r1, #1]
 800d510:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 800d514:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800d518:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800d51c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800d520:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d524:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800d528:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800d52c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800d530:	ad05      	add	r5, sp, #20
 800d532:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800d534:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800d538:	9207      	str	r2, [sp, #28]
 800d53a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800d53e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800d542:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800d546:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800d54a:	f88d a020 	strb.w	sl, [sp, #32]
 800d54e:	9009      	str	r0, [sp, #36]	; 0x24
 800d550:	f7fe fb92 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800d554:	4621      	mov	r1, r4
 800d556:	4681      	mov	r9, r0
 800d558:	4628      	mov	r0, r5
 800d55a:	f002 ffe7 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d55e:	f8d8 3000 	ldr.w	r3, [r8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0bb      	beq.n	800d4de <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 800d566:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800d568:	883b      	ldrh	r3, [r7, #0]
 800d56a:	428b      	cmp	r3, r1
 800d56c:	d9c1      	bls.n	800d4f2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 800d56e:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 800d570:	6818      	ldr	r0, [r3, #0]
 800d572:	f7f6 f9e5 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800d576:	2300      	movs	r3, #0
 800d578:	9303      	str	r3, [sp, #12]
 800d57a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d57c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800d580:	ab07      	add	r3, sp, #28
 800d582:	4648      	mov	r0, r9
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	4633      	mov	r3, r6
 800d588:	e895 0006 	ldmia.w	r5, {r1, r2}
 800d58c:	f7f6 f98a 	bl	80038a4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800d590:	b00c      	add	sp, #48	; 0x30
 800d592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d596:	bf00      	nop
 800d598:	0801cd10 	.word	0x0801cd10
 800d59c:	0801e004 	.word	0x0801e004
 800d5a0:	0801cd9e 	.word	0x0801cd9e
 800d5a4:	24006c10 	.word	0x24006c10
 800d5a8:	0801cdc7 	.word	0x0801cdc7
 800d5ac:	24006c14 	.word	0x24006c14
 800d5b0:	24006c18 	.word	0x24006c18
 800d5b4:	24006c0c 	.word	0x24006c0c

0800d5b8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800d5b8:	4770      	bx	lr

0800d5ba <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800d5ba:	b510      	push	{r4, lr}
 800d5bc:	4604      	mov	r4, r0
 800d5be:	2134      	movs	r1, #52	; 0x34
 800d5c0:	f00d fc46 	bl	801ae50 <_ZdlPvj>
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	bd10      	pop	{r4, pc}

0800d5c8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800d5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	460e      	mov	r6, r1
 800d5d2:	b08e      	sub	sp, #56	; 0x38
 800d5d4:	b218      	sxth	r0, r3
 800d5d6:	8921      	ldrh	r1, [r4, #8]
 800d5d8:	005b      	lsls	r3, r3, #1
 800d5da:	8962      	ldrh	r2, [r4, #10]
 800d5dc:	f8ad 0000 	strh.w	r0, [sp]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	f8ad 0002 	strh.w	r0, [sp, #2]
 800d5e6:	1ac9      	subs	r1, r1, r3
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	b209      	sxth	r1, r1
 800d5ec:	b21b      	sxth	r3, r3
 800d5ee:	2900      	cmp	r1, #0
 800d5f0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800d5f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d5f8:	dd5e      	ble.n	800d6b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	dd5c      	ble.n	800d6b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800d5fe:	6830      	ldr	r0, [r6, #0]
 800d600:	ab02      	add	r3, sp, #8
 800d602:	6871      	ldr	r1, [r6, #4]
 800d604:	c303      	stmia	r3!, {r0, r1}
 800d606:	4669      	mov	r1, sp
 800d608:	a802      	add	r0, sp, #8
 800d60a:	f7fe f865 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800d60e:	4620      	mov	r0, r4
 800d610:	a902      	add	r1, sp, #8
 800d612:	f7ff fdeb 	bl	800d1ec <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800d616:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800d618:	2800      	cmp	r0, #0
 800d61a:	d05f      	beq.n	800d6dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800d61c:	8963      	ldrh	r3, [r4, #10]
 800d61e:	b202      	sxth	r2, r0
 800d620:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d624:	2500      	movs	r5, #0
 800d626:	1a1f      	subs	r7, r3, r0
 800d628:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800d62c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d630:	b21b      	sxth	r3, r3
 800d632:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800d636:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800d63a:	af04      	add	r7, sp, #16
 800d63c:	1a09      	subs	r1, r1, r0
 800d63e:	9506      	str	r5, [sp, #24]
 800d640:	f8ad 201e 	strh.w	r2, [sp, #30]
 800d644:	f8ad 5020 	strh.w	r5, [sp, #32]
 800d648:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800d64c:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800d650:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800d654:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800d658:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800d65c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800d660:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800d664:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d668:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d66c:	ab06      	add	r3, sp, #24
 800d66e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d672:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d676:	e887 0003 	stmia.w	r7, {r0, r1}
 800d67a:	4631      	mov	r1, r6
 800d67c:	4638      	mov	r0, r7
 800d67e:	f7fe f82b 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800d682:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d686:	2b00      	cmp	r3, #0
 800d688:	dd12      	ble.n	800d6b0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800d68a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	dd0e      	ble.n	800d6b0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	4639      	mov	r1, r7
 800d696:	4620      	mov	r0, r4
 800d698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d69a:	4798      	blx	r3
 800d69c:	f7fe faec 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800d6a0:	6803      	ldr	r3, [r0, #0]
 800d6a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800d6aa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d6ae:	47c0      	blx	r8
 800d6b0:	3501      	adds	r5, #1
 800d6b2:	2d04      	cmp	r5, #4
 800d6b4:	d1da      	bne.n	800d66c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800d6b6:	e011      	b.n	800d6dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800d6b8:	6830      	ldr	r0, [r6, #0]
 800d6ba:	ab06      	add	r3, sp, #24
 800d6bc:	6871      	ldr	r1, [r6, #4]
 800d6be:	c303      	stmia	r3!, {r0, r1}
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	a906      	add	r1, sp, #24
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c8:	4798      	blx	r3
 800d6ca:	f7fe fad5 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 800d6ce:	6803      	ldr	r3, [r0, #0]
 800d6d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d6d2:	a906      	add	r1, sp, #24
 800d6d4:	699d      	ldr	r5, [r3, #24]
 800d6d6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d6da:	47a8      	blx	r5
 800d6dc:	b00e      	add	sp, #56	; 0x38
 800d6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d6e2 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 800d6e2:	4770      	bx	lr

0800d6e4 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	213c      	movs	r1, #60	; 0x3c
 800d6ea:	f00d fbb1 	bl	801ae50 <_ZdlPvj>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	bd10      	pop	{r4, pc}

0800d6f2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 800d6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f6:	461c      	mov	r4, r3
 800d6f8:	4606      	mov	r6, r0
 800d6fa:	9f06      	ldr	r7, [sp, #24]
 800d6fc:	f7ff fd9c 	bl	800d238 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800d700:	8823      	ldrh	r3, [r4, #0]
 800d702:	f04f 0802 	mov.w	r8, #2
 800d706:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 800d70a:	4638      	mov	r0, r7
 800d70c:	86b3      	strh	r3, [r6, #52]	; 0x34
 800d70e:	883b      	ldrh	r3, [r7, #0]
 800d710:	fb95 f5f8 	sdiv	r5, r5, r8
 800d714:	86f3      	strh	r3, [r6, #54]	; 0x36
 800d716:	b2ad      	uxth	r5, r5
 800d718:	f005 f89e 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d71c:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 800d720:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 800d724:	fb94 f4f8 	sdiv	r4, r4, r8
 800d728:	b2a4      	uxth	r4, r4
 800d72a:	8730      	strh	r0, [r6, #56]	; 0x38
 800d72c:	4638      	mov	r0, r7
 800d72e:	f005 f8cd 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d732:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 800d736:	8770      	strh	r0, [r6, #58]	; 0x3a
 800d738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d73c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 800d73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d740:	4604      	mov	r4, r0
 800d742:	b08c      	sub	sp, #48	; 0x30
 800d744:	460d      	mov	r5, r1
 800d746:	f7ff fda9 	bl	800d29c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800d74a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d74e:	b33b      	cbz	r3, 800d7a0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 800d750:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800d752:	a805      	add	r0, sp, #20
 800d754:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d758:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 800d75c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 800d760:	f005 f87a 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d764:	4606      	mov	r6, r0
 800d766:	a805      	add	r0, sp, #20
 800d768:	f005 f8b0 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d76c:	6869      	ldr	r1, [r5, #4]
 800d76e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d772:	ab08      	add	r3, sp, #32
 800d774:	6828      	ldr	r0, [r5, #0]
 800d776:	ad08      	add	r5, sp, #32
 800d778:	f8ad 8018 	strh.w	r8, [sp, #24]
 800d77c:	f8ad 701a 	strh.w	r7, [sp, #26]
 800d780:	f8ad 601c 	strh.w	r6, [sp, #28]
 800d784:	c303      	stmia	r3!, {r0, r1}
 800d786:	a906      	add	r1, sp, #24
 800d788:	4628      	mov	r0, r5
 800d78a:	f7fd ffa5 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800d78e:	4b25      	ldr	r3, [pc, #148]	; (800d824 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	b93b      	cbnz	r3, 800d7a4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 800d794:	4b24      	ldr	r3, [pc, #144]	; (800d828 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 800d796:	2187      	movs	r1, #135	; 0x87
 800d798:	4a24      	ldr	r2, [pc, #144]	; (800d82c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 800d79a:	4825      	ldr	r0, [pc, #148]	; (800d830 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 800d79c:	f00d fc6e 	bl	801b07c <__assert_func>
 800d7a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800d7a2:	e7d6      	b.n	800d752 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 800d7a4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d035      	beq.n	800d81c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800d7b0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dd31      	ble.n	800d81c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800d7b8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dd2d      	ble.n	800d81c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	a90a      	add	r1, sp, #40	; 0x28
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ce:	4798      	blx	r3
 800d7d0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d7d4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800d7d6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d7da:	1a9b      	subs	r3, r3, r2
 800d7dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d7e0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d7e2:	1ac9      	subs	r1, r1, r3
 800d7e4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800d7e8:	4912      	ldr	r1, [pc, #72]	; (800d834 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 800d7ea:	6809      	ldr	r1, [r1, #0]
 800d7ec:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 800d7f0:	b108      	cbz	r0, 800d7f6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 800d7f2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800d7f4:	b900      	cbnz	r0, 800d7f8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 800d7f6:	6888      	ldr	r0, [r1, #8]
 800d7f8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800d7fc:	2601      	movs	r6, #1
 800d7fe:	440b      	add	r3, r1
 800d800:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800d804:	440a      	add	r2, r1
 800d806:	6801      	ldr	r1, [r0, #0]
 800d808:	9602      	str	r6, [sp, #8]
 800d80a:	b21b      	sxth	r3, r3
 800d80c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800d810:	b212      	sxth	r2, r2
 800d812:	e9cd 5400 	strd	r5, r4, [sp]
 800d816:	688c      	ldr	r4, [r1, #8]
 800d818:	a905      	add	r1, sp, #20
 800d81a:	47a0      	blx	r4
 800d81c:	b00c      	add	sp, #48	; 0x30
 800d81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d822:	bf00      	nop
 800d824:	24006c44 	.word	0x24006c44
 800d828:	0801dcd6 	.word	0x0801dcd6
 800d82c:	0801e10c 	.word	0x0801e10c
 800d830:	0801dd12 	.word	0x0801dd12
 800d834:	24006bbc 	.word	0x24006bbc

0800d838 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 800d838:	2101      	movs	r1, #1
 800d83a:	2200      	movs	r2, #0
 800d83c:	b510      	push	{r4, lr}
 800d83e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800d842:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800d846:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d84a:	4c0d      	ldr	r4, [pc, #52]	; (800d880 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 800d84c:	8082      	strh	r2, [r0, #4]
 800d84e:	80c2      	strh	r2, [r0, #6]
 800d850:	8102      	strh	r2, [r0, #8]
 800d852:	8142      	strh	r2, [r0, #10]
 800d854:	8182      	strh	r2, [r0, #12]
 800d856:	81c2      	strh	r2, [r0, #14]
 800d858:	8202      	strh	r2, [r0, #16]
 800d85a:	8242      	strh	r2, [r0, #18]
 800d85c:	61c2      	str	r2, [r0, #28]
 800d85e:	8402      	strh	r2, [r0, #32]
 800d860:	8442      	strh	r2, [r0, #34]	; 0x22
 800d862:	6282      	str	r2, [r0, #40]	; 0x28
 800d864:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800d868:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800d86a:	8601      	strh	r1, [r0, #48]	; 0x30
 800d86c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800d870:	6004      	str	r4, [r0, #0]
 800d872:	8681      	strh	r1, [r0, #52]	; 0x34
 800d874:	86c1      	strh	r1, [r0, #54]	; 0x36
 800d876:	8702      	strh	r2, [r0, #56]	; 0x38
 800d878:	8742      	strh	r2, [r0, #58]	; 0x3a
 800d87a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800d87e:	bd10      	pop	{r4, pc}
 800d880:	0801e0a0 	.word	0x0801e0a0

0800d884 <_ZN8touchgfx5ImageD1Ev>:
 800d884:	4770      	bx	lr

0800d886 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800d886:	b570      	push	{r4, r5, r6, lr}
 800d888:	880b      	ldrh	r3, [r1, #0]
 800d88a:	460d      	mov	r5, r1
 800d88c:	4604      	mov	r4, r0
 800d88e:	84c3      	strh	r3, [r0, #38]	; 0x26
 800d890:	4608      	mov	r0, r1
 800d892:	f004 ffe1 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d896:	4606      	mov	r6, r0
 800d898:	4628      	mov	r0, r5
 800d89a:	f005 f817 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	b231      	sxth	r1, r6
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a8:	4798      	blx	r3
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	b229      	sxth	r1, r5
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8b6:	4718      	bx	r3

0800d8b8 <_ZN8touchgfx5ImageD0Ev>:
 800d8b8:	b510      	push	{r4, lr}
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	212c      	movs	r1, #44	; 0x2c
 800d8be:	f00d fac7 	bl	801ae50 <_ZdlPvj>
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	bd10      	pop	{r4, pc}

0800d8c6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800d8c6:	b510      	push	{r4, lr}
 800d8c8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	2bff      	cmp	r3, #255	; 0xff
 800d8d0:	d006      	beq.n	800d8e0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	8003      	strh	r3, [r0, #0]
 800d8d6:	8043      	strh	r3, [r0, #2]
 800d8d8:	8083      	strh	r3, [r0, #4]
 800d8da:	80c3      	strh	r3, [r0, #6]
 800d8dc:	4620      	mov	r0, r4
 800d8de:	bd10      	pop	{r4, pc}
 800d8e0:	3126      	adds	r1, #38	; 0x26
 800d8e2:	f005 f82d 	bl	8012940 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d8e6:	e7f9      	b.n	800d8dc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800d8e8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800d8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	2500      	movs	r5, #0
 800d8f2:	460f      	mov	r7, r1
 800d8f4:	f854 3b26 	ldr.w	r3, [r4], #38
 800d8f8:	a904      	add	r1, sp, #16
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d902:	4798      	blx	r3
 800d904:	4620      	mov	r0, r4
 800d906:	f004 ffa7 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d90a:	4680      	mov	r8, r0
 800d90c:	4620      	mov	r0, r4
 800d90e:	f004 ffdd 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d912:	9506      	str	r5, [sp, #24]
 800d914:	ad06      	add	r5, sp, #24
 800d916:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d91a:	4639      	mov	r1, r7
 800d91c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800d920:	4628      	mov	r0, r5
 800d922:	f7fd fed9 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800d926:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	dd19      	ble.n	800d962 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d92e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d932:	2b00      	cmp	r3, #0
 800d934:	dd15      	ble.n	800d962 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d936:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d93e:	b10a      	cbz	r2, 800d944 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800d940:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d942:	b900      	cbnz	r0, 800d946 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800d944:	6898      	ldr	r0, [r3, #8]
 800d946:	2701      	movs	r7, #1
 800d948:	6801      	ldr	r1, [r0, #0]
 800d94a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d94e:	9702      	str	r7, [sp, #8]
 800d950:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800d954:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d958:	e9cd 5600 	strd	r5, r6, [sp]
 800d95c:	688d      	ldr	r5, [r1, #8]
 800d95e:	4621      	mov	r1, r4
 800d960:	47a8      	blx	r5
 800d962:	b008      	add	sp, #32
 800d964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d968:	24006bbc 	.word	0x24006bbc

0800d96c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 800d96c:	4770      	bx	lr

0800d96e <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800d96e:	b510      	push	{r4, lr}
 800d970:	4604      	mov	r4, r0
 800d972:	2148      	movs	r1, #72	; 0x48
 800d974:	f00d fa6c 	bl	801ae50 <_ZdlPvj>
 800d978:	4620      	mov	r0, r4
 800d97a:	bd10      	pop	{r4, pc}

0800d97c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 800d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d980:	4604      	mov	r4, r0
 800d982:	b08c      	sub	sp, #48	; 0x30
 800d984:	4688      	mov	r8, r1
 800d986:	f7ff fc89 	bl	800d29c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800d98a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800d98c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d990:	4293      	cmp	r3, r2
 800d992:	f000 809a 	beq.w	800daca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800d996:	4e55      	ldr	r6, [pc, #340]	; (800daec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 800d998:	6832      	ldr	r2, [r6, #0]
 800d99a:	b92a      	cbnz	r2, 800d9a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 800d99c:	4b54      	ldr	r3, [pc, #336]	; (800daf0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 800d99e:	21ae      	movs	r1, #174	; 0xae
 800d9a0:	4a54      	ldr	r2, [pc, #336]	; (800daf4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800d9a2:	4855      	ldr	r0, [pc, #340]	; (800daf8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 800d9a4:	f00d fb6a 	bl	801b07c <__assert_func>
 800d9a8:	4d54      	ldr	r5, [pc, #336]	; (800dafc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 800d9aa:	8829      	ldrh	r1, [r5, #0]
 800d9ac:	4299      	cmp	r1, r3
 800d9ae:	d803      	bhi.n	800d9b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 800d9b0:	4b53      	ldr	r3, [pc, #332]	; (800db00 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 800d9b2:	21af      	movs	r1, #175	; 0xaf
 800d9b4:	4a4f      	ldr	r2, [pc, #316]	; (800daf4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800d9b6:	e7f4      	b.n	800d9a2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 800d9b8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d9bc:	f04f 0c02 	mov.w	ip, #2
 800d9c0:	4b50      	ldr	r3, [pc, #320]	; (800db04 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 800d9c2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9cc:	f1be 0f01 	cmp.w	lr, #1
 800d9d0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800d9d4:	f04f 0300 	mov.w	r3, #0
 800d9d8:	b208      	sxth	r0, r1
 800d9da:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d9de:	9303      	str	r3, [sp, #12]
 800d9e0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d9e4:	d074      	beq.n	800dad0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800d9e6:	f1be 0f03 	cmp.w	lr, #3
 800d9ea:	d071      	beq.n	800dad0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800d9ec:	1a52      	subs	r2, r2, r1
 800d9ee:	f8ad 3010 	strh.w	r3, [sp, #16]
 800d9f2:	f8ad 0012 	strh.w	r0, [sp, #18]
 800d9f6:	fb92 f2fc 	sdiv	r2, r2, ip
 800d9fa:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d9fe:	f10d 090c 	add.w	r9, sp, #12
 800da02:	f10d 0a14 	add.w	sl, sp, #20
 800da06:	e899 0003 	ldmia.w	r9, {r0, r1}
 800da0a:	e88a 0003 	stmia.w	sl, {r0, r1}
 800da0e:	4641      	mov	r1, r8
 800da10:	4650      	mov	r0, sl
 800da12:	f7fd fe61 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800da16:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	dd55      	ble.n	800daca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800da1e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800da22:	2b00      	cmp	r3, #0
 800da24:	dd51      	ble.n	800daca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800da26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800da2a:	4649      	mov	r1, r9
 800da2c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800da30:	4620      	mov	r0, r4
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800da38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800da40:	1a9b      	subs	r3, r3, r2
 800da42:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4a:	4798      	blx	r3
 800da4c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d047      	beq.n	800dae4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 800da54:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800da58:	6833      	ldr	r3, [r6, #0]
 800da5a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d09c      	beq.n	800d99c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 800da62:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800da64:	882d      	ldrh	r5, [r5, #0]
 800da66:	428d      	cmp	r5, r1
 800da68:	d9a2      	bls.n	800d9b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 800da6a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800da6e:	6812      	ldr	r2, [r2, #0]
 800da70:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 800da74:	785b      	ldrb	r3, [r3, #1]
 800da76:	9209      	str	r2, [sp, #36]	; 0x24
 800da78:	f3c3 0501 	ubfx	r5, r3, #0, #2
 800da7c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800da80:	9707      	str	r7, [sp, #28]
 800da82:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800da86:	2300      	movs	r3, #0
 800da88:	f88d 5020 	strb.w	r5, [sp, #32]
 800da8c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800da90:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800da94:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800da98:	4b1b      	ldr	r3, [pc, #108]	; (800db08 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 800da9a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800daa4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800daa8:	b10a      	cbz	r2, 800daae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 800daaa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800daac:	b904      	cbnz	r4, 800dab0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 800daae:	689c      	ldr	r4, [r3, #8]
 800dab0:	4b16      	ldr	r3, [pc, #88]	; (800db0c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 800dab2:	6818      	ldr	r0, [r3, #0]
 800dab4:	f7f5 ff44 	bl	8003940 <_ZNK8touchgfx5Texts7getTextEt>
 800dab8:	ab07      	add	r3, sp, #28
 800daba:	9001      	str	r0, [sp, #4]
 800dabc:	4620      	mov	r0, r4
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	4653      	mov	r3, sl
 800dac2:	e899 0006 	ldmia.w	r9, {r1, r2}
 800dac6:	f7f5 feed 	bl	80038a4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800daca:	b00c      	add	sp, #48	; 0x30
 800dacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad0:	1a5b      	subs	r3, r3, r1
 800dad2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800dad6:	f8ad 2012 	strh.w	r2, [sp, #18]
 800dada:	fb93 f3fc 	sdiv	r3, r3, ip
 800dade:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dae2:	e78c      	b.n	800d9fe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 800dae4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800dae8:	e7b6      	b.n	800da58 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 800daea:	bf00      	nop
 800daec:	24006c0c 	.word	0x24006c0c
 800daf0:	0801cd10 	.word	0x0801cd10
 800daf4:	0801e218 	.word	0x0801e218
 800daf8:	0801cd9e 	.word	0x0801cd9e
 800dafc:	24006c10 	.word	0x24006c10
 800db00:	0801cdc7 	.word	0x0801cdc7
 800db04:	24006c14 	.word	0x24006c14
 800db08:	24006bbc 	.word	0x24006bbc
 800db0c:	24006c18 	.word	0x24006c18

0800db10 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 800db10:	2101      	movs	r1, #1
 800db12:	2200      	movs	r2, #0
 800db14:	b510      	push	{r4, lr}
 800db16:	4c13      	ldr	r4, [pc, #76]	; (800db64 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 800db18:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800db1c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800db20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800db24:	6004      	str	r4, [r0, #0]
 800db26:	4c10      	ldr	r4, [pc, #64]	; (800db68 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800db28:	8082      	strh	r2, [r0, #4]
 800db2a:	80c2      	strh	r2, [r0, #6]
 800db2c:	8102      	strh	r2, [r0, #8]
 800db2e:	8142      	strh	r2, [r0, #10]
 800db30:	8182      	strh	r2, [r0, #12]
 800db32:	81c2      	strh	r2, [r0, #14]
 800db34:	8202      	strh	r2, [r0, #16]
 800db36:	8242      	strh	r2, [r0, #18]
 800db38:	61c2      	str	r2, [r0, #28]
 800db3a:	8402      	strh	r2, [r0, #32]
 800db3c:	8442      	strh	r2, [r0, #34]	; 0x22
 800db3e:	6282      	str	r2, [r0, #40]	; 0x28
 800db40:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800db44:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800db46:	8601      	strh	r1, [r0, #48]	; 0x30
 800db48:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800db4c:	6344      	str	r4, [r0, #52]	; 0x34
 800db4e:	8701      	strh	r1, [r0, #56]	; 0x38
 800db50:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800db54:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800db58:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800db5c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800db60:	bd10      	pop	{r4, pc}
 800db62:	bf00      	nop
 800db64:	0801e1b0 	.word	0x0801e1b0
 800db68:	0801c910 	.word	0x0801c910

0800db6c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800db6c:	b510      	push	{r4, lr}
 800db6e:	6803      	ldr	r3, [r0, #0]
 800db70:	460c      	mov	r4, r1
 800db72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db74:	4798      	blx	r3
 800db76:	1b03      	subs	r3, r0, r4
 800db78:	4258      	negs	r0, r3
 800db7a:	4158      	adcs	r0, r3
 800db7c:	bd10      	pop	{r4, pc}
	...

0800db80 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800db80:	4b01      	ldr	r3, [pc, #4]	; (800db88 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800db82:	6019      	str	r1, [r3, #0]
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	24006bc4 	.word	0x24006bc4

0800db8c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	4696      	mov	lr, r2
 800db92:	b097      	sub	sp, #92	; 0x5c
 800db94:	4605      	mov	r5, r0
 800db96:	4614      	mov	r4, r2
 800db98:	460e      	mov	r6, r1
 800db9a:	461f      	mov	r7, r3
 800db9c:	f10d 0c1c 	add.w	ip, sp, #28
 800dba0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800dba4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800dba8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800dbac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbb4:	f8de 3000 	ldr.w	r3, [lr]
 800dbb8:	f104 0e14 	add.w	lr, r4, #20
 800dbbc:	f8cc 3000 	str.w	r3, [ip]
 800dbc0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800dbc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbcc:	f8de 3000 	ldr.w	r3, [lr]
 800dbd0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800dbd4:	f8cc 3000 	str.w	r3, [ip]
 800dbd8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800dbdc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbe0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbe4:	f8de 3000 	ldr.w	r3, [lr]
 800dbe8:	4631      	mov	r1, r6
 800dbea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dbec:	4628      	mov	r0, r5
 800dbee:	f8cc 3000 	str.w	r3, [ip]
 800dbf2:	682b      	ldr	r3, [r5, #0]
 800dbf4:	9201      	str	r2, [sp, #4]
 800dbf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dbf8:	f8cd 8008 	str.w	r8, [sp, #8]
 800dbfc:	9200      	str	r2, [sp, #0]
 800dbfe:	aa07      	add	r2, sp, #28
 800dc00:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800dc04:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800dc08:	463b      	mov	r3, r7
 800dc0a:	47d8      	blx	fp
 800dc0c:	46a6      	mov	lr, r4
 800dc0e:	f10d 0c1c 	add.w	ip, sp, #28
 800dc12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc1a:	f8de 3000 	ldr.w	r3, [lr]
 800dc1e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800dc22:	343c      	adds	r4, #60	; 0x3c
 800dc24:	f8cc 3000 	str.w	r3, [ip]
 800dc28:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800dc2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc34:	f8de 3000 	ldr.w	r3, [lr]
 800dc38:	f8cc 3000 	str.w	r3, [ip]
 800dc3c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800dc40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	4631      	mov	r1, r6
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f8cc 3000 	str.w	r3, [ip]
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800dc56:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc58:	f8cd 8008 	str.w	r8, [sp, #8]
 800dc5c:	9201      	str	r2, [sp, #4]
 800dc5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc60:	9200      	str	r2, [sp, #0]
 800dc62:	aa07      	add	r2, sp, #28
 800dc64:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800dc66:	463b      	mov	r3, r7
 800dc68:	47a0      	blx	r4
 800dc6a:	b017      	add	sp, #92	; 0x5c
 800dc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800dc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc74:	b08d      	sub	sp, #52	; 0x34
 800dc76:	4688      	mov	r8, r1
 800dc78:	f8d3 c000 	ldr.w	ip, [r3]
 800dc7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc7e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800dc82:	680f      	ldr	r7, [r1, #0]
 800dc84:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800dc88:	eba7 070c 	sub.w	r7, r7, ip
 800dc8c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800dc90:	edd3 6a07 	vldr	s13, [r3, #28]
 800dc94:	42bc      	cmp	r4, r7
 800dc96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc98:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800dc9c:	bfa8      	it	ge
 800dc9e:	463c      	movge	r4, r7
 800dca0:	f9b1 9000 	ldrsh.w	r9, [r1]
 800dca4:	f9ba 1000 	ldrsh.w	r1, [sl]
 800dca8:	ee07 4a90 	vmov	s15, r4
 800dcac:	eb09 0e0c 	add.w	lr, r9, ip
 800dcb0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800dcb4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800dcb8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800dcbc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800dcc0:	4571      	cmp	r1, lr
 800dcc2:	ee25 4a04 	vmul.f32	s8, s10, s8
 800dcc6:	ee65 4a24 	vmul.f32	s9, s10, s9
 800dcca:	ee25 5a27 	vmul.f32	s10, s10, s15
 800dcce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dcd2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800dcd6:	ee32 1a05 	vadd.f32	s2, s4, s10
 800dcda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dcde:	ee36 0a84 	vadd.f32	s0, s13, s8
 800dce2:	ee61 1a87 	vmul.f32	s3, s3, s14
 800dce6:	ee22 2a07 	vmul.f32	s4, s4, s14
 800dcea:	f340 808c 	ble.w	800de06 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800dcee:	eba1 060e 	sub.w	r6, r1, lr
 800dcf2:	fb96 f5f4 	sdiv	r5, r6, r4
 800dcf6:	ee07 5a10 	vmov	s14, r5
 800dcfa:	2d00      	cmp	r5, #0
 800dcfc:	fb04 6615 	mls	r6, r4, r5, r6
 800dd00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dd04:	eea7 0a04 	vfma.f32	s0, s14, s8
 800dd08:	eee7 0a24 	vfma.f32	s1, s14, s9
 800dd0c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800dd10:	dd12      	ble.n	800dd38 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800dd12:	ee70 6a44 	vsub.f32	s13, s0, s8
 800dd16:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800dd1a:	ee31 2a45 	vsub.f32	s4, s2, s10
 800dd1e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800dd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd26:	bf14      	ite	ne
 800dd28:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800dd2c:	eeb0 7a67 	vmoveq.f32	s14, s15
 800dd30:	ee61 1a87 	vmul.f32	s3, s3, s14
 800dd34:	ee22 2a07 	vmul.f32	s4, s4, s14
 800dd38:	fb05 f204 	mul.w	r2, r5, r4
 800dd3c:	1abf      	subs	r7, r7, r2
 800dd3e:	4494      	add	ip, r2
 800dd40:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800dd44:	4411      	add	r1, r2
 800dd46:	eb09 020c 	add.w	r2, r9, ip
 800dd4a:	b209      	sxth	r1, r1
 800dd4c:	443a      	add	r2, r7
 800dd4e:	428a      	cmp	r2, r1
 800dd50:	bfc4      	itt	gt
 800dd52:	eba1 0209 	subgt.w	r2, r1, r9
 800dd56:	eba2 070c 	subgt.w	r7, r2, ip
 800dd5a:	2f00      	cmp	r7, #0
 800dd5c:	dd50      	ble.n	800de00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800dd5e:	fb97 f1f4 	sdiv	r1, r7, r4
 800dd62:	fb04 7211 	mls	r2, r4, r1, r7
 800dd66:	b90a      	cbnz	r2, 800dd6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800dd68:	3901      	subs	r1, #1
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800dd70:	6840      	ldr	r0, [r0, #4]
 800dd72:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800dd76:	44b6      	add	lr, r6
 800dd78:	f8d0 a000 	ldr.w	sl, [r0]
 800dd7c:	2900      	cmp	r1, #0
 800dd7e:	bfcc      	ite	gt
 800dd80:	46a1      	movgt	r9, r4
 800dd82:	4691      	movle	r9, r2
 800dd84:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd86:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dd88:	fb04 e505 	mla	r5, r4, r5, lr
 800dd8c:	eef0 6a42 	vmov.f32	s13, s4
 800dd90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800dd94:	9008      	str	r0, [sp, #32]
 800dd96:	eeb0 7a61 	vmov.f32	s14, s3
 800dd9a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800dda2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800dda6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800ddaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ddac:	445b      	add	r3, fp
 800ddae:	9307      	str	r3, [sp, #28]
 800ddb0:	ee16 3a90 	vmov	r3, s13
 800ddb4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800ddb8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800ddbc:	ee21 3a23 	vmul.f32	s6, s2, s7
 800ddc0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800ddc4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ddc8:	ee17 7a90 	vmov	r7, s15
 800ddcc:	ee73 7a42 	vsub.f32	s15, s6, s4
 800ddd0:	fb97 f7f4 	sdiv	r7, r7, r4
 800ddd4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ddd8:	ee17 ca90 	vmov	ip, s15
 800dddc:	fb9c fcf4 	sdiv	ip, ip, r4
 800dde0:	fb0c 3306 	mla	r3, ip, r6, r3
 800dde4:	9302      	str	r3, [sp, #8]
 800dde6:	ee17 3a10 	vmov	r3, s14
 800ddea:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800ddee:	fb07 3706 	mla	r7, r7, r6, r3
 800ddf2:	eba9 0306 	sub.w	r3, r9, r6
 800ddf6:	e9cd 4700 	strd	r4, r7, [sp]
 800ddfa:	f8da 4008 	ldr.w	r4, [sl, #8]
 800ddfe:	47a0      	blx	r4
 800de00:	b00d      	add	sp, #52	; 0x34
 800de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de06:	2500      	movs	r5, #0
 800de08:	462e      	mov	r6, r5
 800de0a:	e799      	b.n	800dd40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800de0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800de0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de10:	b0db      	sub	sp, #364	; 0x16c
 800de12:	461d      	mov	r5, r3
 800de14:	4614      	mov	r4, r2
 800de16:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800de1a:	910f      	str	r1, [sp, #60]	; 0x3c
 800de1c:	4629      	mov	r1, r5
 800de1e:	930a      	str	r3, [sp, #40]	; 0x28
 800de20:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800de24:	9009      	str	r0, [sp, #36]	; 0x24
 800de26:	930b      	str	r3, [sp, #44]	; 0x2c
 800de28:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800de2c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800de30:	9310      	str	r3, [sp, #64]	; 0x40
 800de32:	6803      	ldr	r3, [r0, #0]
 800de34:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800de36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de3a:	47b8      	blx	r7
 800de3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3e:	6058      	str	r0, [r3, #4]
 800de40:	2800      	cmp	r0, #0
 800de42:	f000 83a1 	beq.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800de46:	682b      	ldr	r3, [r5, #0]
 800de48:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800de4c:	ed94 7a02 	vldr	s14, [r4, #8]
 800de50:	9314      	str	r3, [sp, #80]	; 0x50
 800de52:	686b      	ldr	r3, [r5, #4]
 800de54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de58:	9315      	str	r3, [sp, #84]	; 0x54
 800de5a:	4bc1      	ldr	r3, [pc, #772]	; (800e160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800de5c:	7819      	ldrb	r1, [r3, #0]
 800de5e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800de62:	2900      	cmp	r1, #0
 800de64:	bf16      	itet	ne
 800de66:	4619      	movne	r1, r3
 800de68:	4611      	moveq	r1, r2
 800de6a:	4613      	movne	r3, r2
 800de6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de70:	9116      	str	r1, [sp, #88]	; 0x58
 800de72:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800de76:	f240 8387 	bls.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800de7a:	ed94 7a07 	vldr	s14, [r4, #28]
 800de7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de86:	f240 837f 	bls.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800de8a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800de8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de96:	f240 8377 	bls.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800de9a:	6822      	ldr	r2, [r4, #0]
 800de9c:	4bb1      	ldr	r3, [pc, #708]	; (800e164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800de9e:	429a      	cmp	r2, r3
 800dea0:	f2c0 8372 	blt.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dea4:	49b0      	ldr	r1, [pc, #704]	; (800e168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800dea6:	6963      	ldr	r3, [r4, #20]
 800dea8:	428a      	cmp	r2, r1
 800deaa:	f300 836d 	bgt.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800deae:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800deb2:	48ae      	ldr	r0, [pc, #696]	; (800e16c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800deb4:	33ff      	adds	r3, #255	; 0xff
 800deb6:	4283      	cmp	r3, r0
 800deb8:	f200 8366 	bhi.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800debc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800debe:	4dac      	ldr	r5, [pc, #688]	; (800e170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800dec0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800dec4:	33ff      	adds	r3, #255	; 0xff
 800dec6:	42ab      	cmp	r3, r5
 800dec8:	f200 835e 	bhi.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800decc:	6862      	ldr	r2, [r4, #4]
 800dece:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800ded2:	33ff      	adds	r3, #255	; 0xff
 800ded4:	4283      	cmp	r3, r0
 800ded6:	f200 8357 	bhi.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800deda:	69a1      	ldr	r1, [r4, #24]
 800dedc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800dee0:	33ff      	adds	r3, #255	; 0xff
 800dee2:	4283      	cmp	r3, r0
 800dee4:	f200 8350 	bhi.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800deea:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800deee:	30ff      	adds	r0, #255	; 0xff
 800def0:	42a8      	cmp	r0, r5
 800def2:	f200 8349 	bhi.w	800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800def6:	428a      	cmp	r2, r1
 800def8:	f280 8110 	bge.w	800e11c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800defc:	429a      	cmp	r2, r3
 800defe:	f300 8119 	bgt.w	800e134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800df02:	4299      	cmp	r1, r3
 800df04:	f280 811d 	bge.w	800e142 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800df08:	2502      	movs	r5, #2
 800df0a:	2701      	movs	r7, #1
 800df0c:	46a9      	mov	r9, r5
 800df0e:	46b8      	mov	r8, r7
 800df10:	f04f 0a00 	mov.w	sl, #0
 800df14:	4621      	mov	r1, r4
 800df16:	a849      	add	r0, sp, #292	; 0x124
 800df18:	f003 fcb2 	bl	8011880 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800df1c:	4622      	mov	r2, r4
 800df1e:	4653      	mov	r3, sl
 800df20:	a949      	add	r1, sp, #292	; 0x124
 800df22:	f8cd 9000 	str.w	r9, [sp]
 800df26:	a819      	add	r0, sp, #100	; 0x64
 800df28:	f003 fdda 	bl	8011ae0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df2c:	4622      	mov	r2, r4
 800df2e:	4653      	mov	r3, sl
 800df30:	a949      	add	r1, sp, #292	; 0x124
 800df32:	f8cd 8000 	str.w	r8, [sp]
 800df36:	a829      	add	r0, sp, #164	; 0xa4
 800df38:	f003 fdd2 	bl	8011ae0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df3c:	4643      	mov	r3, r8
 800df3e:	4622      	mov	r2, r4
 800df40:	a949      	add	r1, sp, #292	; 0x124
 800df42:	f8cd 9000 	str.w	r9, [sp]
 800df46:	a839      	add	r0, sp, #228	; 0xe4
 800df48:	f003 fdca 	bl	8011ae0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800df4c:	42af      	cmp	r7, r5
 800df4e:	af12      	add	r7, sp, #72	; 0x48
 800df50:	bfb7      	itett	lt
 800df52:	2300      	movlt	r3, #0
 800df54:	2301      	movge	r3, #1
 800df56:	ad29      	addlt	r5, sp, #164	; 0xa4
 800df58:	ac19      	addlt	r4, sp, #100	; 0x64
 800df5a:	bfb1      	iteee	lt
 800df5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800df5e:	ad19      	addge	r5, sp, #100	; 0x64
 800df60:	930e      	strge	r3, [sp, #56]	; 0x38
 800df62:	ac29      	addge	r4, sp, #164	; 0xa4
 800df64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df66:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df6a:	e887 0003 	stmia.w	r7, {r0, r1}
 800df6e:	b928      	cbnz	r0, 800df7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800df70:	4b80      	ldr	r3, [pc, #512]	; (800e174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800df72:	6818      	ldr	r0, [r3, #0]
 800df74:	6803      	ldr	r3, [r0, #0]
 800df76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df78:	4798      	blx	r3
 800df7a:	6038      	str	r0, [r7, #0]
 800df7c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800df7e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800df82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df86:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800df88:	930c      	str	r3, [sp, #48]	; 0x30
 800df8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df8c:	6963      	ldr	r3, [r4, #20]
 800df8e:	440b      	add	r3, r1
 800df90:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800df94:	4408      	add	r0, r1
 800df96:	b200      	sxth	r0, r0
 800df98:	4283      	cmp	r3, r0
 800df9a:	900d      	str	r0, [sp, #52]	; 0x34
 800df9c:	f280 80dd 	bge.w	800e15a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800dfa0:	428b      	cmp	r3, r1
 800dfa2:	da08      	bge.n	800dfb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dfa4:	2a00      	cmp	r2, #0
 800dfa6:	dd06      	ble.n	800dfb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dfa8:	1acb      	subs	r3, r1, r3
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	f2c0 80e4 	blt.w	800e178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f300 80e2 	bgt.w	800e17a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800dfb6:	6967      	ldr	r7, [r4, #20]
 800dfb8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800dfbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfbe:	443b      	add	r3, r7
 800dfc0:	461f      	mov	r7, r3
 800dfc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfc4:	1bdf      	subs	r7, r3, r7
 800dfc6:	4297      	cmp	r7, r2
 800dfc8:	bfa8      	it	ge
 800dfca:	4617      	movge	r7, r2
 800dfcc:	2f00      	cmp	r7, #0
 800dfce:	f340 8166 	ble.w	800e29e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800dfd2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800dfd4:	6829      	ldr	r1, [r5, #0]
 800dfd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dfda:	f9bb 3000 	ldrsh.w	r3, [fp]
 800dfde:	4411      	add	r1, r2
 800dfe0:	6820      	ldr	r0, [r4, #0]
 800dfe2:	4299      	cmp	r1, r3
 800dfe4:	dd1a      	ble.n	800e01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800dfe6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800dfea:	4402      	add	r2, r0
 800dfec:	440b      	add	r3, r1
 800dfee:	b21b      	sxth	r3, r3
 800dff0:	429a      	cmp	r2, r3
 800dff2:	dc13      	bgt.n	800e01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800dff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dff6:	a912      	add	r1, sp, #72	; 0x48
 800dff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	9206      	str	r2, [sp, #24]
 800e000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e002:	9500      	str	r5, [sp, #0]
 800e004:	9205      	str	r2, [sp, #20]
 800e006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e008:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e00c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e00e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e012:	aa49      	add	r2, sp, #292	; 0x124
 800e014:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800e018:	4623      	mov	r3, r4
 800e01a:	47c8      	blx	r9
 800e01c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800e020:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e024:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800e028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e02c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e030:	68a1      	ldr	r1, [r4, #8]
 800e032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e036:	ed94 6a08 	vldr	s12, [r4, #32]
 800e03a:	edd4 6a07 	vldr	s13, [r4, #28]
 800e03e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e042:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e046:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e04a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e04e:	edc4 6a07 	vstr	s13, [r4, #28]
 800e052:	441a      	add	r2, r3
 800e054:	6963      	ldr	r3, [r4, #20]
 800e056:	3301      	adds	r3, #1
 800e058:	6022      	str	r2, [r4, #0]
 800e05a:	6163      	str	r3, [r4, #20]
 800e05c:	69a3      	ldr	r3, [r4, #24]
 800e05e:	3b01      	subs	r3, #1
 800e060:	61a3      	str	r3, [r4, #24]
 800e062:	6923      	ldr	r3, [r4, #16]
 800e064:	440b      	add	r3, r1
 800e066:	68e1      	ldr	r1, [r4, #12]
 800e068:	428b      	cmp	r3, r1
 800e06a:	6123      	str	r3, [r4, #16]
 800e06c:	db15      	blt.n	800e09a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800e06e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800e072:	3201      	adds	r2, #1
 800e074:	1a5b      	subs	r3, r3, r1
 800e076:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e07a:	6022      	str	r2, [r4, #0]
 800e07c:	6123      	str	r3, [r4, #16]
 800e07e:	edc4 6a07 	vstr	s13, [r4, #28]
 800e082:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800e086:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e08a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e08e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e092:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e096:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e09a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800e09e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800e0a2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800e0a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0aa:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800e0ae:	68a9      	ldr	r1, [r5, #8]
 800e0b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0b4:	ed95 6a08 	vldr	s12, [r5, #32]
 800e0b8:	edd5 6a07 	vldr	s13, [r5, #28]
 800e0bc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e0c0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e0c4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e0c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0cc:	edc5 6a07 	vstr	s13, [r5, #28]
 800e0d0:	441a      	add	r2, r3
 800e0d2:	696b      	ldr	r3, [r5, #20]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	602a      	str	r2, [r5, #0]
 800e0d8:	616b      	str	r3, [r5, #20]
 800e0da:	69ab      	ldr	r3, [r5, #24]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	61ab      	str	r3, [r5, #24]
 800e0e0:	692b      	ldr	r3, [r5, #16]
 800e0e2:	440b      	add	r3, r1
 800e0e4:	68e9      	ldr	r1, [r5, #12]
 800e0e6:	428b      	cmp	r3, r1
 800e0e8:	612b      	str	r3, [r5, #16]
 800e0ea:	db15      	blt.n	800e118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800e0ec:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800e0f0:	3201      	adds	r2, #1
 800e0f2:	1a5b      	subs	r3, r3, r1
 800e0f4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e0f8:	602a      	str	r2, [r5, #0]
 800e0fa:	612b      	str	r3, [r5, #16]
 800e0fc:	edc5 6a07 	vstr	s13, [r5, #28]
 800e100:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800e104:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e108:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e10c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800e110:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e114:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e118:	3f01      	subs	r7, #1
 800e11a:	e757      	b.n	800dfcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800e11c:	4299      	cmp	r1, r3
 800e11e:	dc13      	bgt.n	800e148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800e120:	429a      	cmp	r2, r3
 800e122:	da14      	bge.n	800e14e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800e124:	2502      	movs	r5, #2
 800e126:	2703      	movs	r7, #3
 800e128:	f04f 0800 	mov.w	r8, #0
 800e12c:	46a9      	mov	r9, r5
 800e12e:	f04f 0a01 	mov.w	sl, #1
 800e132:	e6ef      	b.n	800df14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800e134:	2501      	movs	r5, #1
 800e136:	2700      	movs	r7, #0
 800e138:	46a9      	mov	r9, r5
 800e13a:	46b8      	mov	r8, r7
 800e13c:	f04f 0a02 	mov.w	sl, #2
 800e140:	e6e8      	b.n	800df14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800e142:	2501      	movs	r5, #1
 800e144:	2702      	movs	r7, #2
 800e146:	e6e1      	b.n	800df0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800e148:	2500      	movs	r5, #0
 800e14a:	2701      	movs	r7, #1
 800e14c:	e7f4      	b.n	800e138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800e14e:	2702      	movs	r7, #2
 800e150:	2503      	movs	r5, #3
 800e152:	f04f 0900 	mov.w	r9, #0
 800e156:	46b8      	mov	r8, r7
 800e158:	e7e9      	b.n	800e12e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800e15a:	4613      	mov	r3, r2
 800e15c:	e728      	b.n	800dfb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800e15e:	bf00      	nop
 800e160:	24006bb4 	.word	0x24006bb4
 800e164:	fffd8f01 	.word	0xfffd8f01
 800e168:	00027100 	.word	0x00027100
 800e16c:	0004e1ff 	.word	0x0004e1ff
 800e170:	0004e1fe 	.word	0x0004e1fe
 800e174:	24006bbc 	.word	0x24006bbc
 800e178:	4613      	mov	r3, r2
 800e17a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800e17c:	469e      	mov	lr, r3
 800e17e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e180:	469c      	mov	ip, r3
 800e182:	9111      	str	r1, [sp, #68]	; 0x44
 800e184:	f04f 0900 	mov.w	r9, #0
 800e188:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800e18c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800e190:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800e194:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800e198:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800e19c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e1a0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800e1a4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800e1a8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800e1ac:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800e1b0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800e1b4:	f1bc 0f00 	cmp.w	ip, #0
 800e1b8:	d147      	bne.n	800e24a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800e1ba:	eb03 0c07 	add.w	ip, r3, r7
 800e1be:	1ad7      	subs	r7, r2, r3
 800e1c0:	f1b9 0f00 	cmp.w	r9, #0
 800e1c4:	d009      	beq.n	800e1da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800e1c6:	9029      	str	r0, [sp, #164]	; 0xa4
 800e1c8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800e1cc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800e1d0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800e1d4:	912d      	str	r1, [sp, #180]	; 0xb4
 800e1d6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800e1da:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e1dc:	f04f 0800 	mov.w	r8, #0
 800e1e0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800e1e4:	9111      	str	r1, [sp, #68]	; 0x44
 800e1e6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800e1ea:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800e1ee:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800e1f2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800e1f6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800e1fa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800e1fe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800e202:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800e206:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800e20a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800e20e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800e212:	f1be 0f00 	cmp.w	lr, #0
 800e216:	d031      	beq.n	800e27c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800e218:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e21a:	4450      	add	r0, sl
 800e21c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e220:	4431      	add	r1, r6
 800e222:	ee37 7a04 	vadd.f32	s14, s14, s8
 800e226:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e22a:	4549      	cmp	r1, r9
 800e22c:	db08      	blt.n	800e240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800e22e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e232:	3001      	adds	r0, #1
 800e234:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e238:	eba1 0109 	sub.w	r1, r1, r9
 800e23c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e240:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e244:	f04f 0801 	mov.w	r8, #1
 800e248:	e7e3      	b.n	800e212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800e24a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e24c:	4450      	add	r0, sl
 800e24e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e252:	4431      	add	r1, r6
 800e254:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e258:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800e25c:	4541      	cmp	r1, r8
 800e25e:	db08      	blt.n	800e272 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800e260:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e264:	3001      	adds	r0, #1
 800e266:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e26a:	eba1 0108 	sub.w	r1, r1, r8
 800e26e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e272:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e276:	f04f 0901 	mov.w	r9, #1
 800e27a:	e79b      	b.n	800e1b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800e27c:	449c      	add	ip, r3
 800e27e:	1aff      	subs	r7, r7, r3
 800e280:	f1b8 0f00 	cmp.w	r8, #0
 800e284:	d009      	beq.n	800e29a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800e286:	9019      	str	r0, [sp, #100]	; 0x64
 800e288:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800e28c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800e290:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800e294:	911d      	str	r1, [sp, #116]	; 0x74
 800e296:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800e29a:	1ad2      	subs	r2, r2, r3
 800e29c:	e68b      	b.n	800dfb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800e29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2a0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 80d1 	beq.w	800e44a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800e2a8:	ad19      	add	r5, sp, #100	; 0x64
 800e2aa:	ac39      	add	r4, sp, #228	; 0xe4
 800e2ac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e2ae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800e2b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2b6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2ba:	6963      	ldr	r3, [r4, #20]
 800e2bc:	440b      	add	r3, r1
 800e2be:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800e2c2:	4408      	add	r0, r1
 800e2c4:	b200      	sxth	r0, r0
 800e2c6:	4283      	cmp	r3, r0
 800e2c8:	900d      	str	r0, [sp, #52]	; 0x34
 800e2ca:	f280 80c1 	bge.w	800e450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800e2ce:	428b      	cmp	r3, r1
 800e2d0:	da08      	bge.n	800e2e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e2d2:	2a00      	cmp	r2, #0
 800e2d4:	dd06      	ble.n	800e2e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e2d6:	1acb      	subs	r3, r1, r3
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	f2c0 80bb 	blt.w	800e454 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f300 80b9 	bgt.w	800e456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800e2e4:	6967      	ldr	r7, [r4, #20]
 800e2e6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800e2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2ec:	443b      	add	r3, r7
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2f2:	1bdf      	subs	r7, r3, r7
 800e2f4:	4297      	cmp	r7, r2
 800e2f6:	bfa8      	it	ge
 800e2f8:	4617      	movge	r7, r2
 800e2fa:	2f00      	cmp	r7, #0
 800e2fc:	f340 813c 	ble.w	800e578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800e300:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e302:	6829      	ldr	r1, [r5, #0]
 800e304:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e308:	f9bb 3000 	ldrsh.w	r3, [fp]
 800e30c:	4411      	add	r1, r2
 800e30e:	6820      	ldr	r0, [r4, #0]
 800e310:	4299      	cmp	r1, r3
 800e312:	dd1a      	ble.n	800e34a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e314:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800e318:	4402      	add	r2, r0
 800e31a:	440b      	add	r3, r1
 800e31c:	b21b      	sxth	r3, r3
 800e31e:	429a      	cmp	r2, r3
 800e320:	dc13      	bgt.n	800e34a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e322:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e324:	a912      	add	r1, sp, #72	; 0x48
 800e326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	9206      	str	r2, [sp, #24]
 800e32e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e330:	9500      	str	r5, [sp, #0]
 800e332:	9205      	str	r2, [sp, #20]
 800e334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e336:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e33a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e33c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e340:	aa49      	add	r2, sp, #292	; 0x124
 800e342:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800e346:	4623      	mov	r3, r4
 800e348:	47c8      	blx	r9
 800e34a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800e34e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e352:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800e356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e35a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e35e:	68a1      	ldr	r1, [r4, #8]
 800e360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e364:	ed94 6a08 	vldr	s12, [r4, #32]
 800e368:	edd4 6a07 	vldr	s13, [r4, #28]
 800e36c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e370:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e374:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e378:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e37c:	edc4 6a07 	vstr	s13, [r4, #28]
 800e380:	441a      	add	r2, r3
 800e382:	6963      	ldr	r3, [r4, #20]
 800e384:	3301      	adds	r3, #1
 800e386:	6022      	str	r2, [r4, #0]
 800e388:	6163      	str	r3, [r4, #20]
 800e38a:	69a3      	ldr	r3, [r4, #24]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	61a3      	str	r3, [r4, #24]
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	440b      	add	r3, r1
 800e394:	68e1      	ldr	r1, [r4, #12]
 800e396:	428b      	cmp	r3, r1
 800e398:	6123      	str	r3, [r4, #16]
 800e39a:	db15      	blt.n	800e3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800e39c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800e3a0:	3201      	adds	r2, #1
 800e3a2:	1a5b      	subs	r3, r3, r1
 800e3a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e3a8:	6022      	str	r2, [r4, #0]
 800e3aa:	6123      	str	r3, [r4, #16]
 800e3ac:	edc4 6a07 	vstr	s13, [r4, #28]
 800e3b0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800e3b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e3b8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800e3bc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e3c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3c4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800e3c8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800e3cc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800e3d0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800e3d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3d8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800e3dc:	68a9      	ldr	r1, [r5, #8]
 800e3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3e2:	ed95 6a08 	vldr	s12, [r5, #32]
 800e3e6:	edd5 6a07 	vldr	s13, [r5, #28]
 800e3ea:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e3ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e3f2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e3f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3fa:	edc5 6a07 	vstr	s13, [r5, #28]
 800e3fe:	441a      	add	r2, r3
 800e400:	696b      	ldr	r3, [r5, #20]
 800e402:	3301      	adds	r3, #1
 800e404:	602a      	str	r2, [r5, #0]
 800e406:	616b      	str	r3, [r5, #20]
 800e408:	69ab      	ldr	r3, [r5, #24]
 800e40a:	3b01      	subs	r3, #1
 800e40c:	61ab      	str	r3, [r5, #24]
 800e40e:	692b      	ldr	r3, [r5, #16]
 800e410:	440b      	add	r3, r1
 800e412:	68e9      	ldr	r1, [r5, #12]
 800e414:	428b      	cmp	r3, r1
 800e416:	612b      	str	r3, [r5, #16]
 800e418:	db15      	blt.n	800e446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800e41a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800e41e:	3201      	adds	r2, #1
 800e420:	1a5b      	subs	r3, r3, r1
 800e422:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e426:	602a      	str	r2, [r5, #0]
 800e428:	612b      	str	r3, [r5, #16]
 800e42a:	edc5 6a07 	vstr	s13, [r5, #28]
 800e42e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800e432:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e436:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800e43a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800e43e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e442:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800e446:	3f01      	subs	r7, #1
 800e448:	e757      	b.n	800e2fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800e44a:	ad39      	add	r5, sp, #228	; 0xe4
 800e44c:	ac19      	add	r4, sp, #100	; 0x64
 800e44e:	e72d      	b.n	800e2ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800e450:	4613      	mov	r3, r2
 800e452:	e744      	b.n	800e2de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800e454:	4613      	mov	r3, r2
 800e456:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800e458:	469e      	mov	lr, r3
 800e45a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800e45e:	461f      	mov	r7, r3
 800e460:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800e464:	f04f 0900 	mov.w	r9, #0
 800e468:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800e46c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800e470:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800e474:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800e478:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800e47c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800e47e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800e482:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800e486:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800e48a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800e48e:	960e      	str	r6, [sp, #56]	; 0x38
 800e490:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800e494:	2f00      	cmp	r7, #0
 800e496:	d146      	bne.n	800e526 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800e498:	449c      	add	ip, r3
 800e49a:	1ad7      	subs	r7, r2, r3
 800e49c:	f1b9 0f00 	cmp.w	r9, #0
 800e4a0:	d009      	beq.n	800e4b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800e4a2:	9039      	str	r0, [sp, #228]	; 0xe4
 800e4a4:	913d      	str	r1, [sp, #244]	; 0xf4
 800e4a6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800e4aa:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800e4ae:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800e4b2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800e4b6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e4b8:	f04f 0800 	mov.w	r8, #0
 800e4bc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800e4c0:	910e      	str	r1, [sp, #56]	; 0x38
 800e4c2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800e4c6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800e4ca:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800e4ce:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800e4d2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800e4d6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800e4da:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800e4de:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800e4e2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800e4e6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800e4ea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800e4ee:	f1be 0f00 	cmp.w	lr, #0
 800e4f2:	d030      	beq.n	800e556 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800e4f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e4f6:	4450      	add	r0, sl
 800e4f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e4fc:	4431      	add	r1, r6
 800e4fe:	ee37 7a04 	vadd.f32	s14, s14, s8
 800e502:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e506:	4549      	cmp	r1, r9
 800e508:	db08      	blt.n	800e51c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800e50a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e50e:	3001      	adds	r0, #1
 800e510:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e514:	eba1 0109 	sub.w	r1, r1, r9
 800e518:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e51c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e520:	f04f 0801 	mov.w	r8, #1
 800e524:	e7e3      	b.n	800e4ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800e526:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e528:	4450      	add	r0, sl
 800e52a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e52e:	4431      	add	r1, r6
 800e530:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e534:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800e538:	4541      	cmp	r1, r8
 800e53a:	db08      	blt.n	800e54e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800e53c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e540:	3001      	adds	r0, #1
 800e542:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e546:	eba1 0108 	sub.w	r1, r1, r8
 800e54a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e54e:	3f01      	subs	r7, #1
 800e550:	f04f 0901 	mov.w	r9, #1
 800e554:	e79e      	b.n	800e494 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800e556:	449c      	add	ip, r3
 800e558:	1aff      	subs	r7, r7, r3
 800e55a:	f1b8 0f00 	cmp.w	r8, #0
 800e55e:	d009      	beq.n	800e574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800e560:	9019      	str	r0, [sp, #100]	; 0x64
 800e562:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800e566:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800e56a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800e56e:	911d      	str	r1, [sp, #116]	; 0x74
 800e570:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800e574:	1ad2      	subs	r2, r2, r3
 800e576:	e6b5      	b.n	800e2e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	b923      	cbnz	r3, 800e588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e57e:	4b04      	ldr	r3, [pc, #16]	; (800e590 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800e580:	6818      	ldr	r0, [r3, #0]
 800e582:	6803      	ldr	r3, [r0, #0]
 800e584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e586:	4798      	blx	r3
 800e588:	b05b      	add	sp, #364	; 0x16c
 800e58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58e:	bf00      	nop
 800e590:	24006bbc 	.word	0x24006bbc

0800e594 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	4604      	mov	r4, r0
 800e598:	2500      	movs	r5, #0
 800e59a:	9804      	ldr	r0, [sp, #16]
 800e59c:	7223      	strb	r3, [r4, #8]
 800e59e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e5a2:	8025      	strh	r5, [r4, #0]
 800e5a4:	6061      	str	r1, [r4, #4]
 800e5a6:	7263      	strb	r3, [r4, #9]
 800e5a8:	60e0      	str	r0, [r4, #12]
 800e5aa:	8222      	strh	r2, [r4, #16]
 800e5ac:	8265      	strh	r5, [r4, #18]
 800e5ae:	82a5      	strh	r5, [r4, #20]
 800e5b0:	82e5      	strh	r5, [r4, #22]
 800e5b2:	8325      	strh	r5, [r4, #24]
 800e5b4:	8365      	strh	r5, [r4, #26]
 800e5b6:	83a5      	strh	r5, [r4, #28]
 800e5b8:	77a5      	strb	r5, [r4, #30]
 800e5ba:	6803      	ldr	r3, [r0, #0]
 800e5bc:	695b      	ldr	r3, [r3, #20]
 800e5be:	4798      	blx	r3
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	b1f8      	cbz	r0, 800e604 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800e5c4:	68e0      	ldr	r0, [r4, #12]
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	6803      	ldr	r3, [r0, #0]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	4798      	blx	r3
 800e5ce:	7b43      	ldrb	r3, [r0, #13]
 800e5d0:	7a82      	ldrb	r2, [r0, #10]
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	005b      	lsls	r3, r3, #1
 800e5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	83a3      	strh	r3, [r4, #28]
 800e5de:	7a63      	ldrb	r3, [r4, #9]
 800e5e0:	2b04      	cmp	r3, #4
 800e5e2:	d10f      	bne.n	800e604 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800e5e4:	68e0      	ldr	r0, [r4, #12]
 800e5e6:	462a      	mov	r2, r5
 800e5e8:	4631      	mov	r1, r6
 800e5ea:	6803      	ldr	r3, [r0, #0]
 800e5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ee:	4798      	blx	r3
 800e5f0:	7b6b      	ldrb	r3, [r5, #13]
 800e5f2:	005b      	lsls	r3, r3, #1
 800e5f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e5f8:	7aab      	ldrb	r3, [r5, #10]
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	4418      	add	r0, r3
 800e5fe:	8ba3      	ldrh	r3, [r4, #28]
 800e600:	4418      	add	r0, r3
 800e602:	83a0      	strh	r0, [r4, #28]
 800e604:	4620      	mov	r0, r4
 800e606:	bd70      	pop	{r4, r5, r6, pc}

0800e608 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e60c:	2400      	movs	r4, #0
 800e60e:	b085      	sub	sp, #20
 800e610:	4681      	mov	r9, r0
 800e612:	4688      	mov	r8, r1
 800e614:	4692      	mov	sl, r2
 800e616:	469b      	mov	fp, r3
 800e618:	4627      	mov	r7, r4
 800e61a:	4625      	mov	r5, r4
 800e61c:	4626      	mov	r6, r4
 800e61e:	4554      	cmp	r4, sl
 800e620:	da2a      	bge.n	800e678 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e622:	2300      	movs	r3, #0
 800e624:	9303      	str	r3, [sp, #12]
 800e626:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e62a:	429d      	cmp	r5, r3
 800e62c:	d004      	beq.n	800e638 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800e62e:	f242 030b 	movw	r3, #8203	; 0x200b
 800e632:	429d      	cmp	r5, r3
 800e634:	bf18      	it	ne
 800e636:	462f      	movne	r7, r5
 800e638:	ab03      	add	r3, sp, #12
 800e63a:	4642      	mov	r2, r8
 800e63c:	4659      	mov	r1, fp
 800e63e:	4648      	mov	r0, r9
 800e640:	f002 fea2 	bl	8011388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e644:	4605      	mov	r5, r0
 800e646:	b1b8      	cbz	r0, 800e678 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e648:	280a      	cmp	r0, #10
 800e64a:	d015      	beq.n	800e678 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e64c:	9a03      	ldr	r2, [sp, #12]
 800e64e:	b18a      	cbz	r2, 800e674 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800e650:	7b50      	ldrb	r0, [r2, #13]
 800e652:	4639      	mov	r1, r7
 800e654:	7a93      	ldrb	r3, [r2, #10]
 800e656:	0040      	lsls	r0, r0, #1
 800e658:	8895      	ldrh	r5, [r2, #4]
 800e65a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800e65e:	4303      	orrs	r3, r0
 800e660:	4640      	mov	r0, r8
 800e662:	9301      	str	r3, [sp, #4]
 800e664:	f8d8 3000 	ldr.w	r3, [r8]
 800e668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e66a:	4798      	blx	r3
 800e66c:	9b01      	ldr	r3, [sp, #4]
 800e66e:	4418      	add	r0, r3
 800e670:	4406      	add	r6, r0
 800e672:	b2b6      	uxth	r6, r6
 800e674:	3401      	adds	r4, #1
 800e676:	e7d2      	b.n	800e61e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800e678:	4630      	mov	r0, r6
 800e67a:	b005      	add	sp, #20
 800e67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e680 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800e680:	2a02      	cmp	r2, #2
 800e682:	b530      	push	{r4, r5, lr}
 800e684:	d011      	beq.n	800e6aa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800e686:	2a03      	cmp	r2, #3
 800e688:	d01c      	beq.n	800e6c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800e68a:	2a01      	cmp	r2, #1
 800e68c:	d10c      	bne.n	800e6a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e68e:	888b      	ldrh	r3, [r1, #4]
 800e690:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800e694:	8801      	ldrh	r1, [r0, #0]
 800e696:	1a9b      	subs	r3, r3, r2
 800e698:	8844      	ldrh	r4, [r0, #2]
 800e69a:	1a5b      	subs	r3, r3, r1
 800e69c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e6a0:	8004      	strh	r4, [r0, #0]
 800e6a2:	8043      	strh	r3, [r0, #2]
 800e6a4:	8081      	strh	r1, [r0, #4]
 800e6a6:	80c2      	strh	r2, [r0, #6]
 800e6a8:	bd30      	pop	{r4, r5, pc}
 800e6aa:	88cb      	ldrh	r3, [r1, #6]
 800e6ac:	88c2      	ldrh	r2, [r0, #6]
 800e6ae:	1a9b      	subs	r3, r3, r2
 800e6b0:	8842      	ldrh	r2, [r0, #2]
 800e6b2:	1a9b      	subs	r3, r3, r2
 800e6b4:	888a      	ldrh	r2, [r1, #4]
 800e6b6:	8881      	ldrh	r1, [r0, #4]
 800e6b8:	8043      	strh	r3, [r0, #2]
 800e6ba:	1a52      	subs	r2, r2, r1
 800e6bc:	8801      	ldrh	r1, [r0, #0]
 800e6be:	1a52      	subs	r2, r2, r1
 800e6c0:	8002      	strh	r2, [r0, #0]
 800e6c2:	e7f1      	b.n	800e6a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e6c4:	88cb      	ldrh	r3, [r1, #6]
 800e6c6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800e6ca:	8841      	ldrh	r1, [r0, #2]
 800e6cc:	1a9b      	subs	r3, r3, r2
 800e6ce:	f9b0 5000 	ldrsh.w	r5, [r0]
 800e6d2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800e6d6:	1a5b      	subs	r3, r3, r1
 800e6d8:	8045      	strh	r5, [r0, #2]
 800e6da:	8082      	strh	r2, [r0, #4]
 800e6dc:	8003      	strh	r3, [r0, #0]
 800e6de:	80c4      	strh	r4, [r0, #6]
 800e6e0:	e7e2      	b.n	800e6a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800e6e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800e6e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e6:	b09f      	sub	sp, #124	; 0x7c
 800e6e8:	9116      	str	r1, [sp, #88]	; 0x58
 800e6ea:	9317      	str	r3, [sp, #92]	; 0x5c
 800e6ec:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e6ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e6f0:	8809      	ldrh	r1, [r1, #0]
 800e6f2:	889b      	ldrh	r3, [r3, #4]
 800e6f4:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800e6f8:	440b      	add	r3, r1
 800e6fa:	9212      	str	r2, [sp, #72]	; 0x48
 800e6fc:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800e700:	b21b      	sxth	r3, r3
 800e702:	9011      	str	r0, [sp, #68]	; 0x44
 800e704:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800e708:	9310      	str	r3, [sp, #64]	; 0x40
 800e70a:	f8d8 3000 	ldr.w	r3, [r8]
 800e70e:	7a59      	ldrb	r1, [r3, #9]
 800e710:	7a1b      	ldrb	r3, [r3, #8]
 800e712:	9114      	str	r1, [sp, #80]	; 0x50
 800e714:	9315      	str	r3, [sp, #84]	; 0x54
 800e716:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e718:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e71c:	2a00      	cmp	r2, #0
 800e71e:	d067      	beq.n	800e7f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800e720:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e724:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e726:	2b04      	cmp	r3, #4
 800e728:	bf14      	ite	ne
 800e72a:	2301      	movne	r3, #1
 800e72c:	2302      	moveq	r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	f04f 0900 	mov.w	r9, #0
 800e734:	930f      	str	r3, [sp, #60]	; 0x3c
 800e736:	464c      	mov	r4, r9
 800e738:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e73c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800e740:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800e744:	4293      	cmp	r3, r2
 800e746:	f280 808c 	bge.w	800e862 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800e74a:	2300      	movs	r3, #0
 800e74c:	931c      	str	r3, [sp, #112]	; 0x70
 800e74e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e752:	429c      	cmp	r4, r3
 800e754:	d006      	beq.n	800e764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800e756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e758:	f242 020b 	movw	r2, #8203	; 0x200b
 800e75c:	4294      	cmp	r4, r2
 800e75e:	bf18      	it	ne
 800e760:	4623      	movne	r3, r4
 800e762:	930d      	str	r3, [sp, #52]	; 0x34
 800e764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e766:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e768:	f8d8 2000 	ldr.w	r2, [r8]
 800e76c:	428b      	cmp	r3, r1
 800e76e:	db41      	blt.n	800e7f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800e770:	6813      	ldr	r3, [r2, #0]
 800e772:	4610      	mov	r0, r2
 800e774:	695b      	ldr	r3, [r3, #20]
 800e776:	4798      	blx	r3
 800e778:	4604      	mov	r4, r0
 800e77a:	f8d8 0000 	ldr.w	r0, [r8]
 800e77e:	aa1d      	add	r2, sp, #116	; 0x74
 800e780:	4621      	mov	r1, r4
 800e782:	6803      	ldr	r3, [r0, #0]
 800e784:	689e      	ldr	r6, [r3, #8]
 800e786:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800e78a:	47b0      	blx	r6
 800e78c:	901c      	str	r0, [sp, #112]	; 0x70
 800e78e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e792:	429c      	cmp	r4, r3
 800e794:	f000 80ea 	beq.w	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e798:	f242 030b 	movw	r3, #8203	; 0x200b
 800e79c:	429c      	cmp	r4, r3
 800e79e:	f000 80e5 	beq.w	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e7a2:	2c00      	cmp	r4, #0
 800e7a4:	f000 80f7 	beq.w	800e996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e7a8:	2c0a      	cmp	r4, #10
 800e7aa:	d060      	beq.n	800e86e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800e7ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e7ae:	b36a      	cbz	r2, 800e80c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800e7b0:	8894      	ldrh	r4, [r2, #4]
 800e7b2:	f1bb 0f00 	cmp.w	fp, #0
 800e7b6:	d03b      	beq.n	800e830 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800e7b8:	f892 900d 	ldrb.w	r9, [r2, #13]
 800e7bc:	f1bb 0f01 	cmp.w	fp, #1
 800e7c0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800e7c4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800e7c8:	f892 900a 	ldrb.w	r9, [r2, #10]
 800e7cc:	ea49 0903 	orr.w	r9, r9, r3
 800e7d0:	d134      	bne.n	800e83c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800e7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7d4:	eba5 0509 	sub.w	r5, r5, r9
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d14f      	bne.n	800e87c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800e7dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e7de:	eb09 0305 	add.w	r3, r9, r5
 800e7e2:	4413      	add	r3, r2
 800e7e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e7e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	da51      	bge.n	800e892 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800e7ee:	e038      	b.n	800e862 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800e7f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7f2:	e79d      	b.n	800e730 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800e7f4:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800e7f8:	4659      	mov	r1, fp
 800e7fa:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e7fc:	9301      	str	r3, [sp, #4]
 800e7fe:	ab1d      	add	r3, sp, #116	; 0x74
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	ab1c      	add	r3, sp, #112	; 0x70
 800e804:	f002 fe18 	bl	8011438 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800e808:	4604      	mov	r4, r0
 800e80a:	e7c0      	b.n	800e78e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800e80c:	f8d8 0000 	ldr.w	r0, [r8]
 800e810:	6803      	ldr	r3, [r0, #0]
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	4798      	blx	r3
 800e816:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e81a:	4298      	cmp	r0, r3
 800e81c:	f000 80a6 	beq.w	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e820:	f242 030b 	movw	r3, #8203	; 0x200b
 800e824:	4298      	cmp	r0, r3
 800e826:	f000 80a1 	beq.w	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e82a:	f1bb 0f00 	cmp.w	fp, #0
 800e82e:	d100      	bne.n	800e832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800e830:	444d      	add	r5, r9
 800e832:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e834:	2a00      	cmp	r2, #0
 800e836:	d1bf      	bne.n	800e7b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800e838:	4691      	mov	r9, r2
 800e83a:	e097      	b.n	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f000 80ab 	beq.w	800e99a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800e844:	f1bb 0f00 	cmp.w	fp, #0
 800e848:	d118      	bne.n	800e87c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800e84a:	f8d8 0000 	ldr.w	r0, [r8]
 800e84e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e850:	6803      	ldr	r3, [r0, #0]
 800e852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e854:	4798      	blx	r3
 800e856:	4405      	add	r5, r0
 800e858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e85a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e85c:	1aeb      	subs	r3, r5, r3
 800e85e:	4293      	cmp	r3, r2
 800e860:	dd17      	ble.n	800e892 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800e862:	2c00      	cmp	r4, #0
 800e864:	f000 8097 	beq.w	800e996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e868:	2c0a      	cmp	r4, #10
 800e86a:	f040 8085 	bne.w	800e978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800e86e:	240a      	movs	r4, #10
 800e870:	fab4 f084 	clz	r0, r4
 800e874:	0940      	lsrs	r0, r0, #5
 800e876:	b01f      	add	sp, #124	; 0x7c
 800e878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87c:	f8d8 0000 	ldr.w	r0, [r8]
 800e880:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e882:	6803      	ldr	r3, [r0, #0]
 800e884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e886:	4798      	blx	r3
 800e888:	f1bb 0f01 	cmp.w	fp, #1
 800e88c:	eba5 0500 	sub.w	r5, r5, r0
 800e890:	d0a4      	beq.n	800e7dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800e892:	981c      	ldr	r0, [sp, #112]	; 0x70
 800e894:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e896:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800e89a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e89e:	7b43      	ldrb	r3, [r0, #13]
 800e8a0:	4429      	add	r1, r5
 800e8a2:	015b      	lsls	r3, r3, #5
 800e8a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e8a8:	7983      	ldrb	r3, [r0, #6]
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	440b      	add	r3, r1
 800e8ae:	42b3      	cmp	r3, r6
 800e8b0:	db5c      	blt.n	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8b4:	4299      	cmp	r1, r3
 800e8b6:	da59      	bge.n	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e8b8:	f8d8 0000 	ldr.w	r0, [r8]
 800e8bc:	42ae      	cmp	r6, r5
 800e8be:	6803      	ldr	r3, [r0, #0]
 800e8c0:	bfcc      	ite	gt
 800e8c2:	1b76      	subgt	r6, r6, r5
 800e8c4:	2600      	movle	r6, #0
 800e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c8:	bfc8      	it	gt
 800e8ca:	b2b6      	uxthgt	r6, r6
 800e8cc:	4798      	blx	r3
 800e8ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e8d0:	7b5a      	ldrb	r2, [r3, #13]
 800e8d2:	00d1      	lsls	r1, r2, #3
 800e8d4:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800e8d8:	7a19      	ldrb	r1, [r3, #8]
 800e8da:	4339      	orrs	r1, r7
 800e8dc:	0657      	lsls	r7, r2, #25
 800e8de:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800e8e0:	bf48      	it	mi
 800e8e2:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800e8e6:	4407      	add	r7, r0
 800e8e8:	bf48      	it	mi
 800e8ea:	b209      	sxthmi	r1, r1
 800e8ec:	1a7f      	subs	r7, r7, r1
 800e8ee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e8f0:	b2bf      	uxth	r7, r7
 800e8f2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800e8f6:	fa0f fa87 	sxth.w	sl, r7
 800e8fa:	4551      	cmp	r1, sl
 800e8fc:	dd3a      	ble.n	800e974 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800e8fe:	0112      	lsls	r2, r2, #4
 800e900:	79d8      	ldrb	r0, [r3, #7]
 800e902:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800e906:	4302      	orrs	r2, r0
 800e908:	4492      	add	sl, r2
 800e90a:	4551      	cmp	r1, sl
 800e90c:	dc2e      	bgt.n	800e96c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800e90e:	1bcf      	subs	r7, r1, r7
 800e910:	468a      	mov	sl, r1
 800e912:	b2bf      	uxth	r7, r7
 800e914:	9319      	str	r3, [sp, #100]	; 0x64
 800e916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e918:	f8d8 0000 	ldr.w	r0, [r8]
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	6801      	ldr	r1, [r0, #0]
 800e920:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e922:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e924:	9313      	str	r3, [sp, #76]	; 0x4c
 800e926:	9218      	str	r2, [sp, #96]	; 0x60
 800e928:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800e92a:	4788      	blx	r1
 800e92c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e930:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e932:	910b      	str	r1, [sp, #44]	; 0x2c
 800e934:	f898 100e 	ldrb.w	r1, [r8, #14]
 800e938:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e93a:	910a      	str	r1, [sp, #40]	; 0x28
 800e93c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800e940:	9109      	str	r1, [sp, #36]	; 0x24
 800e942:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e946:	9305      	str	r3, [sp, #20]
 800e948:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e94a:	9206      	str	r2, [sp, #24]
 800e94c:	e9cd a601 	strd	sl, r6, [sp, #4]
 800e950:	442e      	add	r6, r5
 800e952:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800e956:	b236      	sxth	r6, r6
 800e958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e95a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800e95e:	9600      	str	r6, [sp, #0]
 800e960:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e96a:	47b0      	blx	r6
 800e96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e96e:	3301      	adds	r3, #1
 800e970:	930e      	str	r3, [sp, #56]	; 0x38
 800e972:	e6e5      	b.n	800e740 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800e974:	2700      	movs	r7, #0
 800e976:	e7cd      	b.n	800e914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800e978:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e97a:	3501      	adds	r5, #1
 800e97c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e97e:	429d      	cmp	r5, r3
 800e980:	f6bf af76 	bge.w	800e870 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800e984:	4659      	mov	r1, fp
 800e986:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e988:	f7f4 ff48 	bl	800381c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e98c:	4604      	mov	r4, r0
 800e98e:	b110      	cbz	r0, 800e996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800e990:	280a      	cmp	r0, #10
 800e992:	d1f2      	bne.n	800e97a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800e994:	e76b      	b.n	800e86e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800e996:	2400      	movs	r4, #0
 800e998:	e76a      	b.n	800e870 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800e99a:	f1bb 0f00 	cmp.w	fp, #0
 800e99e:	f43f af5b 	beq.w	800e858 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800e9a2:	e776      	b.n	800e892 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800e9a4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800e9a4:	b530      	push	{r4, r5, lr}
 800e9a6:	8a44      	ldrh	r4, [r0, #18]
 800e9a8:	8ac5      	ldrh	r5, [r0, #22]
 800e9aa:	82c3      	strh	r3, [r0, #22]
 800e9ac:	442c      	add	r4, r5
 800e9ae:	1ae4      	subs	r4, r4, r3
 800e9b0:	8b03      	ldrh	r3, [r0, #24]
 800e9b2:	8244      	strh	r4, [r0, #18]
 800e9b4:	8a84      	ldrh	r4, [r0, #20]
 800e9b6:	4422      	add	r2, r4
 800e9b8:	440c      	add	r4, r1
 800e9ba:	1a59      	subs	r1, r3, r1
 800e9bc:	8342      	strh	r2, [r0, #26]
 800e9be:	8284      	strh	r4, [r0, #20]
 800e9c0:	8301      	strh	r1, [r0, #24]
 800e9c2:	bd30      	pop	{r4, r5, pc}

0800e9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800e9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c8:	7a43      	ldrb	r3, [r0, #9]
 800e9ca:	b087      	sub	sp, #28
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	1eda      	subs	r2, r3, #3
 800e9d2:	b2d2      	uxtb	r2, r2
 800e9d4:	2900      	cmp	r1, #0
 800e9d6:	d036      	beq.n	800ea46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800e9d8:	2a01      	cmp	r2, #1
 800e9da:	d932      	bls.n	800ea42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800e9dc:	1e58      	subs	r0, r3, #1
 800e9de:	f1d0 0b00 	rsbs	fp, r0, #0
 800e9e2:	eb4b 0b00 	adc.w	fp, fp, r0
 800e9e6:	1e99      	subs	r1, r3, #2
 800e9e8:	424b      	negs	r3, r1
 800e9ea:	414b      	adcs	r3, r1
 800e9ec:	9303      	str	r3, [sp, #12]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800e9f4:	2500      	movs	r5, #0
 800e9f6:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800e9fa:	46a9      	mov	r9, r5
 800e9fc:	8265      	strh	r5, [r4, #18]
 800e9fe:	82a5      	strh	r5, [r4, #20]
 800ea00:	2300      	movs	r3, #0
 800ea02:	9305      	str	r3, [sp, #20]
 800ea04:	8823      	ldrh	r3, [r4, #0]
 800ea06:	2b20      	cmp	r3, #32
 800ea08:	d02b      	beq.n	800ea62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800ea0a:	eba3 020a 	sub.w	r2, r3, sl
 800ea0e:	4256      	negs	r6, r2
 800ea10:	4156      	adcs	r6, r2
 800ea12:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d004      	beq.n	800ea24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800ea1a:	4553      	cmp	r3, sl
 800ea1c:	bf16      	itet	ne
 800ea1e:	4699      	movne	r9, r3
 800ea20:	2601      	moveq	r6, #1
 800ea22:	2600      	movne	r6, #0
 800ea24:	ab05      	add	r3, sp, #20
 800ea26:	68e2      	ldr	r2, [r4, #12]
 800ea28:	7a21      	ldrb	r1, [r4, #8]
 800ea2a:	6860      	ldr	r0, [r4, #4]
 800ea2c:	f002 fcac 	bl	8011388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ea30:	8020      	strh	r0, [r4, #0]
 800ea32:	b9c8      	cbnz	r0, 800ea68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800ea34:	8b22      	ldrh	r2, [r4, #24]
 800ea36:	2300      	movs	r3, #0
 800ea38:	4611      	mov	r1, r2
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f7ff ffb2 	bl	800e9a4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800ea40:	e066      	b.n	800eb10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800ea42:	468b      	mov	fp, r1
 800ea44:	e7cf      	b.n	800e9e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800ea46:	3b01      	subs	r3, #1
 800ea48:	2a01      	cmp	r2, #1
 800ea4a:	9103      	str	r1, [sp, #12]
 800ea4c:	468b      	mov	fp, r1
 800ea4e:	bf8c      	ite	hi
 800ea50:	2200      	movhi	r2, #0
 800ea52:	2201      	movls	r2, #1
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	9202      	str	r2, [sp, #8]
 800ea58:	bf8c      	ite	hi
 800ea5a:	2300      	movhi	r3, #0
 800ea5c:	2301      	movls	r3, #1
 800ea5e:	9301      	str	r3, [sp, #4]
 800ea60:	e7c8      	b.n	800e9f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800ea62:	4699      	mov	r9, r3
 800ea64:	2601      	movs	r6, #1
 800ea66:	e7dd      	b.n	800ea24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800ea68:	8ae3      	ldrh	r3, [r4, #22]
 800ea6a:	280a      	cmp	r0, #10
 800ea6c:	f103 0301 	add.w	r3, r3, #1
 800ea70:	82e3      	strh	r3, [r4, #22]
 800ea72:	d0df      	beq.n	800ea34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800ea74:	9a05      	ldr	r2, [sp, #20]
 800ea76:	bb42      	cbnz	r2, 800eaca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800ea78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ea7c:	4298      	cmp	r0, r3
 800ea7e:	d001      	beq.n	800ea84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800ea80:	4550      	cmp	r0, sl
 800ea82:	d1bd      	bne.n	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800ea84:	8823      	ldrh	r3, [r4, #0]
 800ea86:	8b21      	ldrh	r1, [r4, #24]
 800ea88:	2b20      	cmp	r3, #32
 800ea8a:	d001      	beq.n	800ea90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800ea8c:	4553      	cmp	r3, sl
 800ea8e:	d131      	bne.n	800eaf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800ea90:	2e00      	cmp	r6, #0
 800ea92:	bf0a      	itet	eq
 800ea94:	460d      	moveq	r5, r1
 800ea96:	4630      	movne	r0, r6
 800ea98:	2001      	moveq	r0, #1
 800ea9a:	440a      	add	r2, r1
 800ea9c:	8aa3      	ldrh	r3, [r4, #20]
 800ea9e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800eaa2:	b292      	uxth	r2, r2
 800eaa4:	8322      	strh	r2, [r4, #24]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	2f00      	cmp	r7, #0
 800eaaa:	d03a      	beq.n	800eb22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800eaac:	f1bb 0f00 	cmp.w	fp, #0
 800eab0:	d102      	bne.n	800eab8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800eab2:	9903      	ldr	r1, [sp, #12]
 800eab4:	b301      	cbz	r1, 800eaf8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800eab6:	b1f8      	cbz	r0, 800eaf8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800eab8:	8ba1      	ldrh	r1, [r4, #28]
 800eaba:	4419      	add	r1, r3
 800eabc:	458c      	cmp	ip, r1
 800eabe:	da2a      	bge.n	800eb16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800eac0:	8a61      	ldrh	r1, [r4, #18]
 800eac2:	b341      	cbz	r1, 800eb16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800eac4:	4563      	cmp	r3, ip
 800eac6:	dd9b      	ble.n	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eac8:	e01c      	b.n	800eb04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800eaca:	8893      	ldrh	r3, [r2, #4]
 800eacc:	4649      	mov	r1, r9
 800eace:	8023      	strh	r3, [r4, #0]
 800ead0:	f892 800d 	ldrb.w	r8, [r2, #13]
 800ead4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800ead8:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800eadc:	f892 800a 	ldrb.w	r8, [r2, #10]
 800eae0:	ea48 0800 	orr.w	r8, r8, r0
 800eae4:	68e0      	ldr	r0, [r4, #12]
 800eae6:	6803      	ldr	r3, [r0, #0]
 800eae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaea:	4798      	blx	r3
 800eaec:	eb08 0200 	add.w	r2, r8, r0
 800eaf0:	b292      	uxth	r2, r2
 800eaf2:	e7c7      	b.n	800ea84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	e7d0      	b.n	800ea9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800eaf8:	4563      	cmp	r3, ip
 800eafa:	dd81      	ble.n	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eafc:	8a63      	ldrh	r3, [r4, #18]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f43f af7e 	beq.w	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb04:	2301      	movs	r3, #1
 800eb06:	8ba2      	ldrh	r2, [r4, #28]
 800eb08:	77a3      	strb	r3, [r4, #30]
 800eb0a:	8b63      	ldrh	r3, [r4, #26]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	8363      	strh	r3, [r4, #26]
 800eb10:	b007      	add	sp, #28
 800eb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb16:	2300      	movs	r3, #0
 800eb18:	4611      	mov	r1, r2
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f7ff ff42 	bl	800e9a4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800eb20:	e76e      	b.n	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb22:	4563      	cmp	r3, ip
 800eb24:	dd14      	ble.n	800eb50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800eb26:	9b02      	ldr	r3, [sp, #8]
 800eb28:	b113      	cbz	r3, 800eb30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	460a      	mov	r2, r1
 800eb2e:	e783      	b.n	800ea38 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800eb30:	9b01      	ldr	r3, [sp, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f43f af64 	beq.w	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	f47f af61 	bne.w	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb3e:	b116      	cbz	r6, 800eb46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800eb40:	2301      	movs	r3, #1
 800eb42:	462a      	mov	r2, r5
 800eb44:	e779      	b.n	800ea3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800eb46:	8a63      	ldrh	r3, [r4, #18]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f43f af59 	beq.w	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb4e:	e7df      	b.n	800eb10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	f47f af55 	bne.w	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb56:	2e00      	cmp	r6, #0
 800eb58:	f43f af52 	beq.w	800ea00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	462a      	mov	r2, r5
 800eb60:	e7db      	b.n	800eb1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800eb62 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800eb62:	b530      	push	{r4, r5, lr}
 800eb64:	4605      	mov	r5, r0
 800eb66:	b08b      	sub	sp, #44	; 0x2c
 800eb68:	b191      	cbz	r1, 800eb90 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800eb6a:	2401      	movs	r4, #1
 800eb6c:	e9cd 3100 	strd	r3, r1, [sp]
 800eb70:	4613      	mov	r3, r2
 800eb72:	4601      	mov	r1, r0
 800eb74:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800eb78:	a802      	add	r0, sp, #8
 800eb7a:	f7ff fd0b 	bl	800e594 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800eb7e:	2100      	movs	r1, #0
 800eb80:	a802      	add	r0, sp, #8
 800eb82:	f7ff ff1f 	bl	800e9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800eb86:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800eb8a:	b163      	cbz	r3, 800eba6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800eb8c:	3401      	adds	r4, #1
 800eb8e:	e7f6      	b.n	800eb7e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800eb90:	2401      	movs	r4, #1
 800eb92:	f002 fcf3 	bl	801157c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800eb96:	280a      	cmp	r0, #10
 800eb98:	4628      	mov	r0, r5
 800eb9a:	bf08      	it	eq
 800eb9c:	3401      	addeq	r4, #1
 800eb9e:	f002 fced 	bl	801157c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d1f7      	bne.n	800eb96 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800eba6:	b2a0      	uxth	r0, r4
 800eba8:	b00b      	add	sp, #44	; 0x2c
 800ebaa:	bd30      	pop	{r4, r5, pc}

0800ebac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb0:	b0e5      	sub	sp, #404	; 0x194
 800ebb2:	4689      	mov	r9, r1
 800ebb4:	461c      	mov	r4, r3
 800ebb6:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800ebba:	900a      	str	r0, [sp, #40]	; 0x28
 800ebbc:	f1ba 0f00 	cmp.w	sl, #0
 800ebc0:	f000 80b4 	beq.w	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f000 80b0 	beq.w	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ebcc:	7ba3      	ldrb	r3, [r4, #14]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 80ac 	beq.w	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ebd4:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800ebd8:	6810      	ldr	r0, [r2, #0]
 800ebda:	6851      	ldr	r1, [r2, #4]
 800ebdc:	2500      	movs	r5, #0
 800ebde:	4643      	mov	r3, r8
 800ebe0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800ebe4:	950f      	str	r5, [sp, #60]	; 0x3c
 800ebe6:	af19      	add	r7, sp, #100	; 0x64
 800ebe8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ebec:	79a2      	ldrb	r2, [r4, #6]
 800ebee:	c303      	stmia	r3!, {r0, r1}
 800ebf0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800ebf4:	a90f      	add	r1, sp, #60	; 0x3c
 800ebf6:	4640      	mov	r0, r8
 800ebf8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ebfc:	f7ff fd40 	bl	800e680 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800ec00:	a90f      	add	r1, sp, #60	; 0x3c
 800ec02:	79a2      	ldrb	r2, [r4, #6]
 800ec04:	4608      	mov	r0, r1
 800ec06:	f7ff fd3b 	bl	800e680 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	f002 f868 	bl	8010ce0 <_ZN8touchgfx12TextProviderC1Ev>
 800ec10:	6820      	ldr	r0, [r4, #0]
 800ec12:	6803      	ldr	r3, [r0, #0]
 800ec14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec16:	4798      	blx	r3
 800ec18:	4606      	mov	r6, r0
 800ec1a:	6820      	ldr	r0, [r4, #0]
 800ec1c:	6803      	ldr	r3, [r0, #0]
 800ec1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec20:	4798      	blx	r3
 800ec22:	4633      	mov	r3, r6
 800ec24:	9000      	str	r0, [sp, #0]
 800ec26:	4651      	mov	r1, sl
 800ec28:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	f002 f8ab 	bl	8010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec30:	7923      	ldrb	r3, [r4, #4]
 800ec32:	6820      	ldr	r0, [r4, #0]
 800ec34:	9308      	str	r3, [sp, #32]
 800ec36:	6803      	ldr	r3, [r0, #0]
 800ec38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3a:	4798      	blx	r3
 800ec3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec40:	181e      	adds	r6, r3, r0
 800ec42:	42ae      	cmp	r6, r5
 800ec44:	dd06      	ble.n	800ec54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800ec46:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800ec4a:	4282      	cmp	r2, r0
 800ec4c:	bfa4      	itt	ge
 800ec4e:	189d      	addge	r5, r3, r2
 800ec50:	fb95 f5f6 	sdivge	r5, r5, r6
 800ec54:	a832      	add	r0, sp, #200	; 0xc8
 800ec56:	f002 f843 	bl	8010ce0 <_ZN8touchgfx12TextProviderC1Ev>
 800ec5a:	7c23      	ldrb	r3, [r4, #16]
 800ec5c:	b17b      	cbz	r3, 800ec7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800ec5e:	6820      	ldr	r0, [r4, #0]
 800ec60:	6803      	ldr	r3, [r0, #0]
 800ec62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec64:	4798      	blx	r3
 800ec66:	4683      	mov	fp, r0
 800ec68:	6820      	ldr	r0, [r4, #0]
 800ec6a:	6803      	ldr	r3, [r0, #0]
 800ec6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec6e:	4798      	blx	r3
 800ec70:	465b      	mov	r3, fp
 800ec72:	9000      	str	r0, [sp, #0]
 800ec74:	4651      	mov	r1, sl
 800ec76:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800ec78:	a832      	add	r0, sp, #200	; 0xc8
 800ec7a:	f002 f884 	bl	8010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec7e:	7be1      	ldrb	r1, [r4, #15]
 800ec80:	a811      	add	r0, sp, #68	; 0x44
 800ec82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ec86:	7963      	ldrb	r3, [r4, #5]
 800ec88:	1a52      	subs	r2, r2, r1
 800ec8a:	7c21      	ldrb	r1, [r4, #16]
 800ec8c:	9101      	str	r1, [sp, #4]
 800ec8e:	b292      	uxth	r2, r2
 800ec90:	6821      	ldr	r1, [r4, #0]
 800ec92:	9100      	str	r1, [sp, #0]
 800ec94:	a932      	add	r1, sp, #200	; 0xc8
 800ec96:	f7ff fc7d 	bl	800e594 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800ec9a:	7c23      	ldrb	r3, [r4, #16]
 800ec9c:	b9bb      	cbnz	r3, 800ecce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800ec9e:	fa1f fa86 	uxth.w	sl, r6
 800eca2:	2d00      	cmp	r5, #0
 800eca4:	dd45      	ble.n	800ed32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800eca6:	4638      	mov	r0, r7
 800eca8:	f002 fc68 	bl	801157c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	d03d      	beq.n	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ecb0:	280a      	cmp	r0, #10
 800ecb2:	d1f6      	bne.n	800eca2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ecb4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ecb8:	3d01      	subs	r5, #1
 800ecba:	4453      	add	r3, sl
 800ecbc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ecc0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ecc4:	eba3 030a 	sub.w	r3, r3, sl
 800ecc8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800eccc:	e7e9      	b.n	800eca2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ecce:	0073      	lsls	r3, r6, #1
 800ecd0:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800ecd4:	fa1f fa86 	uxth.w	sl, r6
 800ecd8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecda:	2d00      	cmp	r5, #0
 800ecdc:	dd29      	ble.n	800ed32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ecde:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ece2:	a811      	add	r0, sp, #68	; 0x44
 800ece4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece6:	428b      	cmp	r3, r1
 800ece8:	bfd4      	ite	le
 800ecea:	2100      	movle	r1, #0
 800ecec:	2101      	movgt	r1, #1
 800ecee:	f7ff fe69 	bl	800e9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ecf2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	455b      	cmp	r3, fp
 800ecfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecfe:	d005      	beq.n	800ed0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800ed00:	7961      	ldrb	r1, [r4, #5]
 800ed02:	4638      	mov	r0, r7
 800ed04:	f7f4 fd8a 	bl	800381c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ed08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed0a:	e7f4      	b.n	800ecf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800ed0c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ed10:	3d01      	subs	r5, #1
 800ed12:	4453      	add	r3, sl
 800ed14:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ed18:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ed1c:	eba3 030a 	sub.w	r3, r3, sl
 800ed20:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ed24:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1d6      	bne.n	800ecda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800ed2c:	b065      	add	sp, #404	; 0x194
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800ed36:	ad4b      	add	r5, sp, #300	; 0x12c
 800ed38:	f04f 0b00 	mov.w	fp, #0
 800ed3c:	7c23      	ldrb	r3, [r4, #16]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d067      	beq.n	800ee12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800ed42:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ed46:	a811      	add	r0, sp, #68	; 0x44
 800ed48:	458a      	cmp	sl, r1
 800ed4a:	bfd4      	ite	le
 800ed4c:	2100      	movle	r1, #0
 800ed4e:	2101      	movgt	r1, #1
 800ed50:	f7ff fe38 	bl	800e9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ed54:	9b08      	ldr	r3, [sp, #32]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d056      	beq.n	800ee08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800ed5a:	7c23      	ldrb	r3, [r4, #16]
 800ed5c:	2264      	movs	r2, #100	; 0x64
 800ed5e:	4639      	mov	r1, r7
 800ed60:	4628      	mov	r0, r5
 800ed62:	9309      	str	r3, [sp, #36]	; 0x24
 800ed64:	f00c fa08 	bl	801b178 <memcpy>
 800ed68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d059      	beq.n	800ee22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 800ed6e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800ed72:	7922      	ldrb	r2, [r4, #4]
 800ed74:	2a01      	cmp	r2, #1
 800ed76:	d13d      	bne.n	800edf4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800ed78:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800ed7c:	1ac0      	subs	r0, r0, r3
 800ed7e:	2302      	movs	r3, #2
 800ed80:	fb90 f0f3 	sdiv	r0, r0, r3
 800ed84:	b200      	sxth	r0, r0
 800ed86:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ed8a:	4418      	add	r0, r3
 800ed8c:	7c23      	ldrb	r3, [r4, #16]
 800ed8e:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d03a      	beq.n	800ee0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800ed96:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800ed9a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800ed9e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800eda2:	9500      	str	r5, [sp, #0]
 800eda4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eda6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800edaa:	e9cd b703 	strd	fp, r7, [sp, #12]
 800edae:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800edb2:	464a      	mov	r2, r9
 800edb4:	2100      	movs	r1, #0
 800edb6:	f7ff fc94 	bl	800e6e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800edba:	2800      	cmp	r0, #0
 800edbc:	d1b6      	bne.n	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800edbe:	b2b2      	uxth	r2, r6
 800edc0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800edc4:	4611      	mov	r1, r2
 800edc6:	4413      	add	r3, r2
 800edc8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800edcc:	b21b      	sxth	r3, r3
 800edce:	1a52      	subs	r2, r2, r1
 800edd0:	7c21      	ldrb	r1, [r4, #16]
 800edd2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800edd6:	b212      	sxth	r2, r2
 800edd8:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 800eddc:	b109      	cbz	r1, 800ede2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 800edde:	42b2      	cmp	r2, r6
 800ede0:	dba4      	blt.n	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ede2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800ede6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800edea:	440a      	add	r2, r1
 800edec:	b212      	sxth	r2, r2
 800edee:	4293      	cmp	r3, r2
 800edf0:	dda4      	ble.n	800ed3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 800edf2:	e79b      	b.n	800ed2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800edf4:	2a02      	cmp	r2, #2
 800edf6:	d105      	bne.n	800ee04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 800edf8:	7be2      	ldrb	r2, [r4, #15]
 800edfa:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800edfe:	1a80      	subs	r0, r0, r2
 800ee00:	1ac0      	subs	r0, r0, r3
 800ee02:	e7bf      	b.n	800ed84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 800ee04:	2000      	movs	r0, #0
 800ee06:	e7be      	b.n	800ed86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800ee08:	7be0      	ldrb	r0, [r4, #15]
 800ee0a:	e7bc      	b.n	800ed86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800ee0c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ee10:	e7c3      	b.n	800ed9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 800ee12:	9b08      	ldr	r3, [sp, #32]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d0f7      	beq.n	800ee08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800ee18:	2264      	movs	r2, #100	; 0x64
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	f00c f9ab 	bl	801b178 <memcpy>
 800ee22:	2300      	movs	r3, #0
 800ee24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ee28:	6821      	ldr	r1, [r4, #0]
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	f7ff fbec 	bl	800e608 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800ee30:	b203      	sxth	r3, r0
 800ee32:	e79e      	b.n	800ed72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0800ee34 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	b510      	push	{r4, lr}
 800ee38:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ee3c:	d00b      	beq.n	800ee56 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800ee3e:	2b03      	cmp	r3, #3
 800ee40:	d00e      	beq.n	800ee60 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d001      	beq.n	800ee4a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800ee46:	1860      	adds	r0, r4, r1
 800ee48:	bd10      	pop	{r4, pc}
 800ee4a:	8880      	ldrh	r0, [r0, #4]
 800ee4c:	4420      	add	r0, r4
 800ee4e:	b200      	sxth	r0, r0
 800ee50:	1a80      	subs	r0, r0, r2
 800ee52:	3801      	subs	r0, #1
 800ee54:	e7f8      	b.n	800ee48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800ee56:	8880      	ldrh	r0, [r0, #4]
 800ee58:	4420      	add	r0, r4
 800ee5a:	b200      	sxth	r0, r0
 800ee5c:	1a40      	subs	r0, r0, r1
 800ee5e:	e7f8      	b.n	800ee52 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ee60:	18a0      	adds	r0, r4, r2
 800ee62:	e7f1      	b.n	800ee48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800ee64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	b510      	push	{r4, lr}
 800ee68:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800ee6c:	d006      	beq.n	800ee7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800ee6e:	2b03      	cmp	r3, #3
 800ee70:	d00a      	beq.n	800ee88 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	bf14      	ite	ne
 800ee76:	18a0      	addne	r0, r4, r2
 800ee78:	1860      	addeq	r0, r4, r1
 800ee7a:	bd10      	pop	{r4, pc}
 800ee7c:	88c0      	ldrh	r0, [r0, #6]
 800ee7e:	4420      	add	r0, r4
 800ee80:	b200      	sxth	r0, r0
 800ee82:	1a80      	subs	r0, r0, r2
 800ee84:	3801      	subs	r0, #1
 800ee86:	e7f8      	b.n	800ee7a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800ee88:	88c0      	ldrh	r0, [r0, #6]
 800ee8a:	4420      	add	r0, r4
 800ee8c:	b200      	sxth	r0, r0
 800ee8e:	1a40      	subs	r0, r0, r1
 800ee90:	e7f8      	b.n	800ee84 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800ee94 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800ee94:	4b01      	ldr	r3, [pc, #4]	; (800ee9c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	4770      	bx	lr
 800ee9c:	24006bc4 	.word	0x24006bc4

0800eea0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800eea0:	4603      	mov	r3, r0
 800eea2:	b1c8      	cbz	r0, 800eed8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800eea4:	0c02      	lsrs	r2, r0, #16
 800eea6:	0412      	lsls	r2, r2, #16
 800eea8:	b9a2      	cbnz	r2, 800eed4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800eeaa:	0403      	lsls	r3, r0, #16
 800eeac:	2010      	movs	r0, #16
 800eeae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800eeb2:	bf04      	itt	eq
 800eeb4:	021b      	lsleq	r3, r3, #8
 800eeb6:	3008      	addeq	r0, #8
 800eeb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800eebc:	bf04      	itt	eq
 800eebe:	011b      	lsleq	r3, r3, #4
 800eec0:	3004      	addeq	r0, #4
 800eec2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800eec6:	bf04      	itt	eq
 800eec8:	009b      	lsleq	r3, r3, #2
 800eeca:	3002      	addeq	r0, #2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	db04      	blt.n	800eeda <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800eed0:	3001      	adds	r0, #1
 800eed2:	4770      	bx	lr
 800eed4:	2000      	movs	r0, #0
 800eed6:	e7ea      	b.n	800eeae <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800eed8:	2020      	movs	r0, #32
 800eeda:	4770      	bx	lr

0800eedc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800eedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee0:	b087      	sub	sp, #28
 800eee2:	4681      	mov	r9, r0
 800eee4:	4698      	mov	r8, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	460d      	mov	r5, r1
 800eeea:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800eeee:	b981      	cbnz	r1, 800ef12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800eef0:	b14b      	cbz	r3, 800ef06 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800eef2:	460b      	mov	r3, r1
 800eef4:	464a      	mov	r2, r9
 800eef6:	4641      	mov	r1, r8
 800eef8:	e9cd 4700 	strd	r4, r7, [sp]
 800eefc:	f7ff ffee 	bl	800eedc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ef00:	b007      	add	sp, #28
 800ef02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef06:	f04f 33ff 	mov.w	r3, #4294967295
 800ef0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ef0e:	603b      	str	r3, [r7, #0]
 800ef10:	e7f6      	b.n	800ef00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ef12:	fa32 fa01 	lsrs.w	sl, r2, r1
 800ef16:	d107      	bne.n	800ef28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800ef18:	fb09 f602 	mul.w	r6, r9, r2
 800ef1c:	fbb6 f0f4 	udiv	r0, r6, r4
 800ef20:	fb04 6610 	mls	r6, r4, r0, r6
 800ef24:	603e      	str	r6, [r7, #0]
 800ef26:	e7eb      	b.n	800ef00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ef28:	2601      	movs	r6, #1
 800ef2a:	fa09 fb01 	lsl.w	fp, r9, r1
 800ef2e:	408e      	lsls	r6, r1
 800ef30:	fbbb f3f4 	udiv	r3, fp, r4
 800ef34:	3e01      	subs	r6, #1
 800ef36:	9302      	str	r3, [sp, #8]
 800ef38:	fb0a f303 	mul.w	r3, sl, r3
 800ef3c:	4016      	ands	r6, r2
 800ef3e:	9303      	str	r3, [sp, #12]
 800ef40:	4630      	mov	r0, r6
 800ef42:	f7ff ffad 	bl	800eea0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ef46:	464a      	mov	r2, r9
 800ef48:	460b      	mov	r3, r1
 800ef4a:	4601      	mov	r1, r0
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	e9cd 4700 	strd	r4, r7, [sp]
 800ef52:	f7ff ffc3 	bl	800eedc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ef56:	9b02      	ldr	r3, [sp, #8]
 800ef58:	4606      	mov	r6, r0
 800ef5a:	eb05 0108 	add.w	r1, r5, r8
 800ef5e:	fb04 bb13 	mls	fp, r4, r3, fp
 800ef62:	4658      	mov	r0, fp
 800ef64:	f7ff ff9c 	bl	800eea0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ef68:	ab05      	add	r3, sp, #20
 800ef6a:	465a      	mov	r2, fp
 800ef6c:	e9cd 4300 	strd	r4, r3, [sp]
 800ef70:	4603      	mov	r3, r0
 800ef72:	4650      	mov	r0, sl
 800ef74:	f7ff ffb2 	bl	800eedc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ef78:	6839      	ldr	r1, [r7, #0]
 800ef7a:	9a05      	ldr	r2, [sp, #20]
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	4411      	add	r1, r2
 800ef80:	fbb1 f2f4 	udiv	r2, r1, r4
 800ef84:	18d3      	adds	r3, r2, r3
 800ef86:	fb04 1412 	mls	r4, r4, r2, r1
 800ef8a:	441e      	add	r6, r3
 800ef8c:	603c      	str	r4, [r7, #0]
 800ef8e:	4430      	add	r0, r6
 800ef90:	e7b6      	b.n	800ef00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800ef92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800ef92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef96:	b085      	sub	sp, #20
 800ef98:	f1b0 0900 	subs.w	r9, r0, #0
 800ef9c:	461d      	mov	r5, r3
 800ef9e:	4617      	mov	r7, r2
 800efa0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800efa2:	bfbb      	ittet	lt
 800efa4:	f1c9 0900 	rsblt	r9, r9, #0
 800efa8:	f04f 36ff 	movlt.w	r6, #4294967295
 800efac:	2601      	movge	r6, #1
 800efae:	6823      	ldrlt	r3, [r4, #0]
 800efb0:	bfbc      	itt	lt
 800efb2:	425b      	neglt	r3, r3
 800efb4:	6023      	strlt	r3, [r4, #0]
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	da04      	bge.n	800efc4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	4257      	negs	r7, r2
 800efbe:	4276      	negs	r6, r6
 800efc0:	425b      	negs	r3, r3
 800efc2:	6023      	str	r3, [r4, #0]
 800efc4:	2d00      	cmp	r5, #0
 800efc6:	4638      	mov	r0, r7
 800efc8:	bfba      	itte	lt
 800efca:	426d      	neglt	r5, r5
 800efcc:	f04f 38ff 	movlt.w	r8, #4294967295
 800efd0:	f04f 0801 	movge.w	r8, #1
 800efd4:	f7ff ff64 	bl	800eea0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800efd8:	ab03      	add	r3, sp, #12
 800efda:	463a      	mov	r2, r7
 800efdc:	e9cd 5300 	strd	r5, r3, [sp]
 800efe0:	4603      	mov	r3, r0
 800efe2:	4648      	mov	r0, r9
 800efe4:	f7ff ff7a 	bl	800eedc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	9a03      	ldr	r2, [sp, #12]
 800efec:	4546      	cmp	r6, r8
 800efee:	441a      	add	r2, r3
 800eff0:	fb92 f3f5 	sdiv	r3, r2, r5
 800eff4:	4418      	add	r0, r3
 800eff6:	fb05 2313 	mls	r3, r5, r3, r2
 800effa:	bf18      	it	ne
 800effc:	4240      	negne	r0, r0
 800effe:	1c72      	adds	r2, r6, #1
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	d105      	bne.n	800f010 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800f004:	2b00      	cmp	r3, #0
 800f006:	f1c3 0200 	rsb	r2, r3, #0
 800f00a:	db0b      	blt.n	800f024 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800f00c:	6022      	str	r2, [r4, #0]
 800f00e:	e006      	b.n	800f01e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f010:	2e01      	cmp	r6, #1
 800f012:	d104      	bne.n	800f01e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f014:	2b00      	cmp	r3, #0
 800f016:	da02      	bge.n	800f01e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f018:	442b      	add	r3, r5
 800f01a:	3801      	subs	r0, #1
 800f01c:	6023      	str	r3, [r4, #0]
 800f01e:	b005      	add	sp, #20
 800f020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f024:	3801      	subs	r0, #1
 800f026:	1b52      	subs	r2, r2, r5
 800f028:	e7f0      	b.n	800f00c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800f02c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800f02c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f030:	4c1c      	ldr	r4, [pc, #112]	; (800f0a4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800f032:	4605      	mov	r5, r0
 800f034:	6807      	ldr	r7, [r0, #0]
 800f036:	69a3      	ldr	r3, [r4, #24]
 800f038:	b92b      	cbnz	r3, 800f046 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800f03a:	6840      	ldr	r0, [r0, #4]
 800f03c:	e9c5 7000 	strd	r7, r0, [r5]
 800f040:	b004      	add	sp, #16
 800f042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f046:	f04f 0802 	mov.w	r8, #2
 800f04a:	68a2      	ldr	r2, [r4, #8]
 800f04c:	ae04      	add	r6, sp, #16
 800f04e:	6820      	ldr	r0, [r4, #0]
 800f050:	fb93 f1f8 	sdiv	r1, r3, r8
 800f054:	440a      	add	r2, r1
 800f056:	69e1      	ldr	r1, [r4, #28]
 800f058:	f846 2d04 	str.w	r2, [r6, #-4]!
 800f05c:	463a      	mov	r2, r7
 800f05e:	9600      	str	r6, [sp, #0]
 800f060:	f7ff ff97 	bl	800ef92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f064:	69a3      	ldr	r3, [r4, #24]
 800f066:	4607      	mov	r7, r0
 800f068:	686a      	ldr	r2, [r5, #4]
 800f06a:	6a21      	ldr	r1, [r4, #32]
 800f06c:	9600      	str	r6, [sp, #0]
 800f06e:	6860      	ldr	r0, [r4, #4]
 800f070:	f7ff ff8f 	bl	800ef92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f074:	69a3      	ldr	r3, [r4, #24]
 800f076:	6962      	ldr	r2, [r4, #20]
 800f078:	4407      	add	r7, r0
 800f07a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f07c:	9600      	str	r6, [sp, #0]
 800f07e:	68e0      	ldr	r0, [r4, #12]
 800f080:	fb93 f8f8 	sdiv	r8, r3, r8
 800f084:	4442      	add	r2, r8
 800f086:	9203      	str	r2, [sp, #12]
 800f088:	682a      	ldr	r2, [r5, #0]
 800f08a:	f7ff ff82 	bl	800ef92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f08e:	4680      	mov	r8, r0
 800f090:	9600      	str	r6, [sp, #0]
 800f092:	69a3      	ldr	r3, [r4, #24]
 800f094:	686a      	ldr	r2, [r5, #4]
 800f096:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f098:	6920      	ldr	r0, [r4, #16]
 800f09a:	f7ff ff7a 	bl	800ef92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f09e:	4440      	add	r0, r8
 800f0a0:	e7cc      	b.n	800f03c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800f0a2:	bf00      	nop
 800f0a4:	24006bc8 	.word	0x24006bc8

0800f0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800f0a8:	4b07      	ldr	r3, [pc, #28]	; (800f0c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d109      	bne.n	800f0c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800f0b0:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f0b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f0b8:	8003      	strh	r3, [r0, #0]
 800f0ba:	4b04      	ldr	r3, [pc, #16]	; (800f0cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	1a9b      	subs	r3, r3, r2
 800f0c2:	800b      	strh	r3, [r1, #0]
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	24006bb4 	.word	0x24006bb4
 800f0cc:	24006bb8 	.word	0x24006bb8

0800f0d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800f0d0:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800f0d2:	b510      	push	{r4, lr}
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d108      	bne.n	800f0ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800f0da:	4b06      	ldr	r3, [pc, #24]	; (800f0f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800f0dc:	880c      	ldrh	r4, [r1, #0]
 800f0de:	881b      	ldrh	r3, [r3, #0]
 800f0e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	1b1b      	subs	r3, r3, r4
 800f0e8:	8003      	strh	r3, [r0, #0]
 800f0ea:	800a      	strh	r2, [r1, #0]
 800f0ec:	bd10      	pop	{r4, pc}
 800f0ee:	bf00      	nop
 800f0f0:	24006bb4 	.word	0x24006bb4
 800f0f4:	24006bb8 	.word	0x24006bb8

0800f0f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800f0f8:	4b0a      	ldr	r3, [pc, #40]	; (800f124 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800f0fa:	b510      	push	{r4, lr}
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d10e      	bne.n	800f120 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800f102:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f106:	8843      	ldrh	r3, [r0, #2]
 800f108:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f10c:	18ca      	adds	r2, r1, r3
 800f10e:	4b06      	ldr	r3, [pc, #24]	; (800f128 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800f110:	8044      	strh	r4, [r0, #2]
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	1a9b      	subs	r3, r3, r2
 800f116:	8003      	strh	r3, [r0, #0]
 800f118:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f11c:	8081      	strh	r1, [r0, #4]
 800f11e:	80c3      	strh	r3, [r0, #6]
 800f120:	bd10      	pop	{r4, pc}
 800f122:	bf00      	nop
 800f124:	24006bb4 	.word	0x24006bb4
 800f128:	24006bb8 	.word	0x24006bb8

0800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800f12c:	4b08      	ldr	r3, [pc, #32]	; (800f150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d10c      	bne.n	800f14e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800f134:	8803      	ldrh	r3, [r0, #0]
 800f136:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800f13a:	8842      	ldrh	r2, [r0, #2]
 800f13c:	8002      	strh	r2, [r0, #0]
 800f13e:	185a      	adds	r2, r3, r1
 800f140:	4b04      	ldr	r3, [pc, #16]	; (800f154 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	1a9b      	subs	r3, r3, r2
 800f146:	8043      	strh	r3, [r0, #2]
 800f148:	88c3      	ldrh	r3, [r0, #6]
 800f14a:	80c1      	strh	r1, [r0, #6]
 800f14c:	8083      	strh	r3, [r0, #4]
 800f14e:	4770      	bx	lr
 800f150:	24006bb4 	.word	0x24006bb4
 800f154:	24006bb8 	.word	0x24006bb8

0800f158 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800f158:	4b07      	ldr	r3, [pc, #28]	; (800f178 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800f15a:	b510      	push	{r4, lr}
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d108      	bne.n	800f174 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800f162:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f166:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f16a:	8003      	strh	r3, [r0, #0]
 800f16c:	8893      	ldrh	r3, [r2, #4]
 800f16e:	3b01      	subs	r3, #1
 800f170:	1b1b      	subs	r3, r3, r4
 800f172:	800b      	strh	r3, [r1, #0]
 800f174:	bd10      	pop	{r4, pc}
 800f176:	bf00      	nop
 800f178:	24006bb4 	.word	0x24006bb4

0800f17c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 800f17c:	4b0b      	ldr	r3, [pc, #44]	; (800f1ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	2b01      	cmp	r3, #1
 800f182:	d111      	bne.n	800f1a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 800f184:	680b      	ldr	r3, [r1, #0]
 800f186:	ed90 7a00 	vldr	s14, [r0]
 800f18a:	6003      	str	r3, [r0, #0]
 800f18c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800f190:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f1b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 800f194:	ee07 3a90 	vmov	s15, r3
 800f198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f19c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f1a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1a4:	edc1 7a00 	vstr	s15, [r1]
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	24006bb4 	.word	0x24006bb4
 800f1b0:	38d1b717 	.word	0x38d1b717

0800f1b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800f1b4:	4b0a      	ldr	r3, [pc, #40]	; (800f1e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800f1b6:	460a      	mov	r2, r1
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d10d      	bne.n	800f1dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800f1c0:	8881      	ldrh	r1, [r0, #4]
 800f1c2:	8803      	ldrh	r3, [r0, #0]
 800f1c4:	440b      	add	r3, r1
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	f821 3b02 	strh.w	r3, [r1], #2
 800f1ce:	f7ff ffc3 	bl	800f158 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800f1d2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f1d6:	88c2      	ldrh	r2, [r0, #6]
 800f1d8:	80c3      	strh	r3, [r0, #6]
 800f1da:	8082      	strh	r2, [r0, #4]
 800f1dc:	bd10      	pop	{r4, pc}
 800f1de:	bf00      	nop
 800f1e0:	24006bb4 	.word	0x24006bb4

0800f1e4 <_ZN8touchgfx11Application13requestRedrawEv>:
 800f1e4:	4b06      	ldr	r3, [pc, #24]	; (800f200 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f1ec:	4b05      	ldr	r3, [pc, #20]	; (800f204 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800f1ee:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800f1f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1f6:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800f1fa:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800f1fe:	4770      	bx	lr
 800f200:	24006bb0 	.word	0x24006bb0
 800f204:	24006bb2 	.word	0x24006bb2

0800f208 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800f208:	4b03      	ldr	r3, [pc, #12]	; (800f218 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800f20a:	6818      	ldr	r0, [r3, #0]
 800f20c:	b110      	cbz	r0, 800f214 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800f20e:	6803      	ldr	r3, [r0, #0]
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	4718      	bx	r3
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop
 800f218:	24006bf8 	.word	0x24006bf8

0800f21c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800f21c:	4770      	bx	lr
	...

0800f220 <_ZN8touchgfx11Application4drawEv>:
 800f220:	4b09      	ldr	r3, [pc, #36]	; (800f248 <_ZN8touchgfx11Application4drawEv+0x28>)
 800f222:	b507      	push	{r0, r1, r2, lr}
 800f224:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f228:	2100      	movs	r1, #0
 800f22a:	4b08      	ldr	r3, [pc, #32]	; (800f24c <_ZN8touchgfx11Application4drawEv+0x2c>)
 800f22c:	9100      	str	r1, [sp, #0]
 800f22e:	4669      	mov	r1, sp
 800f230:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f234:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f238:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f23c:	6803      	ldr	r3, [r0, #0]
 800f23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f240:	4798      	blx	r3
 800f242:	b003      	add	sp, #12
 800f244:	f85d fb04 	ldr.w	pc, [sp], #4
 800f248:	24006bb0 	.word	0x24006bb0
 800f24c:	24006bb2 	.word	0x24006bb2

0800f250 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800f250:	4b03      	ldr	r3, [pc, #12]	; (800f260 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800f252:	6818      	ldr	r0, [r3, #0]
 800f254:	b110      	cbz	r0, 800f25c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800f256:	6803      	ldr	r3, [r0, #0]
 800f258:	69db      	ldr	r3, [r3, #28]
 800f25a:	4718      	bx	r3
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	24006bf8 	.word	0x24006bf8

0800f264 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800f264:	4b03      	ldr	r3, [pc, #12]	; (800f274 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800f266:	6818      	ldr	r0, [r3, #0]
 800f268:	b110      	cbz	r0, 800f270 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800f26a:	6803      	ldr	r3, [r0, #0]
 800f26c:	6a1b      	ldr	r3, [r3, #32]
 800f26e:	4718      	bx	r3
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	24006bf8 	.word	0x24006bf8

0800f278 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800f278:	4b03      	ldr	r3, [pc, #12]	; (800f288 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800f27a:	6818      	ldr	r0, [r3, #0]
 800f27c:	b110      	cbz	r0, 800f284 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800f27e:	6803      	ldr	r3, [r0, #0]
 800f280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f282:	4718      	bx	r3
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	24006bf8 	.word	0x24006bf8

0800f28c <_ZN8touchgfx11ApplicationD1Ev>:
 800f28c:	4770      	bx	lr

0800f28e <_ZN8touchgfx11ApplicationD0Ev>:
 800f28e:	b510      	push	{r4, lr}
 800f290:	4604      	mov	r4, r0
 800f292:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f296:	f00b fddb 	bl	801ae50 <_ZdlPvj>
 800f29a:	4620      	mov	r0, r4
 800f29c:	bd10      	pop	{r4, pc}
	...

0800f2a0 <_ZN8touchgfx11Application15handleTickEventEv>:
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	4d38      	ldr	r5, [pc, #224]	; (800f384 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	6828      	ldr	r0, [r5, #0]
 800f2a8:	b140      	cbz	r0, 800f2bc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f2aa:	7a03      	ldrb	r3, [r0, #8]
 800f2ac:	b933      	cbnz	r3, 800f2bc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f2ae:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800f2b2:	6803      	ldr	r3, [r0, #0]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2ba:	4718      	bx	r3
 800f2bc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800f2c0:	b97b      	cbnz	r3, 800f2e2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2c2:	b170      	cbz	r0, 800f2e2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2c4:	7a03      	ldrb	r3, [r0, #8]
 800f2c6:	b163      	cbz	r3, 800f2e2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2c8:	4b2f      	ldr	r3, [pc, #188]	; (800f388 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800f2ca:	6818      	ldr	r0, [r3, #0]
 800f2cc:	b110      	cbz	r0, 800f2d4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800f2ce:	6803      	ldr	r3, [r0, #0]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	4798      	blx	r3
 800f2d4:	6828      	ldr	r0, [r5, #0]
 800f2d6:	6803      	ldr	r3, [r0, #0]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	4798      	blx	r3
 800f2dc:	2301      	movs	r3, #1
 800f2de:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800f2e2:	2500      	movs	r5, #0
 800f2e4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800f2e8:	42a8      	cmp	r0, r5
 800f2ea:	dd0c      	ble.n	800f306 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800f2ec:	1963      	adds	r3, r4, r5
 800f2ee:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800f2f2:	b132      	cbz	r2, 800f302 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800f2f4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800f2f8:	4413      	add	r3, r2
 800f2fa:	6858      	ldr	r0, [r3, #4]
 800f2fc:	6803      	ldr	r3, [r0, #0]
 800f2fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f300:	4798      	blx	r3
 800f302:	3501      	adds	r5, #1
 800f304:	e7ee      	b.n	800f2e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800f306:	2300      	movs	r3, #0
 800f308:	461a      	mov	r2, r3
 800f30a:	4298      	cmp	r0, r3
 800f30c:	d10f      	bne.n	800f32e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 800f30e:	1d25      	adds	r5, r4, #4
 800f310:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800f314:	4291      	cmp	r1, r2
 800f316:	dd2d      	ble.n	800f374 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 800f318:	1e48      	subs	r0, r1, #1
 800f31a:	b280      	uxth	r0, r0
 800f31c:	4288      	cmp	r0, r1
 800f31e:	d31a      	bcc.n	800f356 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800f320:	4b1a      	ldr	r3, [pc, #104]	; (800f38c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800f322:	f240 11a9 	movw	r1, #425	; 0x1a9
 800f326:	4a1a      	ldr	r2, [pc, #104]	; (800f390 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800f328:	481a      	ldr	r0, [pc, #104]	; (800f394 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800f32a:	f00b fea7 	bl	801b07c <__assert_func>
 800f32e:	18e1      	adds	r1, r4, r3
 800f330:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800f334:	b16d      	cbz	r5, 800f352 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800f336:	429a      	cmp	r2, r3
 800f338:	d00a      	beq.n	800f350 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800f33a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800f33e:	4431      	add	r1, r6
 800f340:	684e      	ldr	r6, [r1, #4]
 800f342:	b291      	uxth	r1, r2
 800f344:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f348:	604e      	str	r6, [r1, #4]
 800f34a:	18a1      	adds	r1, r4, r2
 800f34c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800f350:	3201      	adds	r2, #1
 800f352:	3301      	adds	r3, #1
 800f354:	e7d9      	b.n	800f30a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800f356:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800f35a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800f35e:	3304      	adds	r3, #4
 800f360:	428b      	cmp	r3, r1
 800f362:	d004      	beq.n	800f36e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 800f364:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800f368:	f843 6c04 	str.w	r6, [r3, #-4]
 800f36c:	e7f8      	b.n	800f360 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800f36e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800f372:	e7cd      	b.n	800f310 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800f374:	4b04      	ldr	r3, [pc, #16]	; (800f388 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	b110      	cbz	r0, 800f380 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800f37a:	6803      	ldr	r3, [r0, #0]
 800f37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f37e:	e79a      	b.n	800f2b6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800f380:	bd70      	pop	{r4, r5, r6, pc}
 800f382:	bf00      	nop
 800f384:	24006bfc 	.word	0x24006bfc
 800f388:	24006bf8 	.word	0x24006bf8
 800f38c:	0801e27a 	.word	0x0801e27a
 800f390:	0801e464 	.word	0x0801e464
 800f394:	0801e288 	.word	0x0801e288

0800f398 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	4606      	mov	r6, r0
 800f39c:	460c      	mov	r4, r1
 800f39e:	b929      	cbnz	r1, 800f3ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800f3a0:	4b0c      	ldr	r3, [pc, #48]	; (800f3d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800f3a2:	2167      	movs	r1, #103	; 0x67
 800f3a4:	4a0c      	ldr	r2, [pc, #48]	; (800f3d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800f3a6:	480d      	ldr	r0, [pc, #52]	; (800f3dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800f3a8:	f00b fe68 	bl	801b07c <__assert_func>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4d0c      	ldr	r5, [pc, #48]	; (800f3e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800f3b0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800f3b4:	6828      	ldr	r0, [r5, #0]
 800f3b6:	b110      	cbz	r0, 800f3be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800f3b8:	6803      	ldr	r3, [r0, #0]
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	4798      	blx	r3
 800f3be:	602c      	str	r4, [r5, #0]
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	4798      	blx	r3
 800f3c8:	6833      	ldr	r3, [r6, #0]
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3d2:	4718      	bx	r3
 800f3d4:	0801e246 	.word	0x0801e246
 800f3d8:	0801e324 	.word	0x0801e324
 800f3dc:	0801e250 	.word	0x0801e250
 800f3e0:	24006bf8 	.word	0x24006bf8

0800f3e4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f3ea:	888a      	ldrh	r2, [r1, #4]
 800f3ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f3f0:	4422      	add	r2, r4
 800f3f2:	b212      	sxth	r2, r2
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	da15      	bge.n	800f424 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f3f8:	8882      	ldrh	r2, [r0, #4]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	b21b      	sxth	r3, r3
 800f3fe:	429c      	cmp	r4, r3
 800f400:	da10      	bge.n	800f424 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f402:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f406:	88c9      	ldrh	r1, [r1, #6]
 800f408:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f40c:	4419      	add	r1, r3
 800f40e:	b209      	sxth	r1, r1
 800f410:	428a      	cmp	r2, r1
 800f412:	da07      	bge.n	800f424 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f414:	88c0      	ldrh	r0, [r0, #6]
 800f416:	4410      	add	r0, r2
 800f418:	b200      	sxth	r0, r0
 800f41a:	4283      	cmp	r3, r0
 800f41c:	bfac      	ite	ge
 800f41e:	2000      	movge	r0, #0
 800f420:	2001      	movlt	r0, #1
 800f422:	bd10      	pop	{r4, pc}
 800f424:	2000      	movs	r0, #0
 800f426:	e7fc      	b.n	800f422 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800f428 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800f428:	b570      	push	{r4, r5, r6, lr}
 800f42a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f42e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f432:	42ac      	cmp	r4, r5
 800f434:	db18      	blt.n	800f468 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f436:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800f43a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f43e:	429a      	cmp	r2, r3
 800f440:	db12      	blt.n	800f468 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f442:	8886      	ldrh	r6, [r0, #4]
 800f444:	4435      	add	r5, r6
 800f446:	888e      	ldrh	r6, [r1, #4]
 800f448:	4434      	add	r4, r6
 800f44a:	b22d      	sxth	r5, r5
 800f44c:	b224      	sxth	r4, r4
 800f44e:	42a5      	cmp	r5, r4
 800f450:	db0a      	blt.n	800f468 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800f452:	88c0      	ldrh	r0, [r0, #6]
 800f454:	4418      	add	r0, r3
 800f456:	88cb      	ldrh	r3, [r1, #6]
 800f458:	441a      	add	r2, r3
 800f45a:	b200      	sxth	r0, r0
 800f45c:	b212      	sxth	r2, r2
 800f45e:	4290      	cmp	r0, r2
 800f460:	bfb4      	ite	lt
 800f462:	2000      	movlt	r0, #0
 800f464:	2001      	movge	r0, #1
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	2000      	movs	r0, #0
 800f46a:	e7fc      	b.n	800f466 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800f46c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	4604      	mov	r4, r0
 800f470:	4608      	mov	r0, r1
 800f472:	460d      	mov	r5, r1
 800f474:	f7fc f973 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f478:	b978      	cbnz	r0, 800f49a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800f47a:	4620      	mov	r0, r4
 800f47c:	f7fc f96f 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f480:	f9b5 6000 	ldrsh.w	r6, [r5]
 800f484:	b150      	cbz	r0, 800f49c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800f486:	8026      	strh	r6, [r4, #0]
 800f488:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800f48c:	8063      	strh	r3, [r4, #2]
 800f48e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f492:	80a3      	strh	r3, [r4, #4]
 800f494:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f498:	80e3      	strh	r3, [r4, #6]
 800f49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f49c:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f4a0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f4a4:	42b1      	cmp	r1, r6
 800f4a6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f4aa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800f4ae:	460f      	mov	r7, r1
 800f4b0:	88ed      	ldrh	r5, [r5, #6]
 800f4b2:	bfa8      	it	ge
 800f4b4:	4637      	movge	r7, r6
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	4466      	add	r6, ip
 800f4bc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f4c0:	bfa8      	it	ge
 800f4c2:	4610      	movge	r0, r2
 800f4c4:	442a      	add	r2, r5
 800f4c6:	88e5      	ldrh	r5, [r4, #6]
 800f4c8:	4461      	add	r1, ip
 800f4ca:	b236      	sxth	r6, r6
 800f4cc:	8027      	strh	r7, [r4, #0]
 800f4ce:	442b      	add	r3, r5
 800f4d0:	b209      	sxth	r1, r1
 800f4d2:	b212      	sxth	r2, r2
 800f4d4:	8060      	strh	r0, [r4, #2]
 800f4d6:	b21b      	sxth	r3, r3
 800f4d8:	428e      	cmp	r6, r1
 800f4da:	bfac      	ite	ge
 800f4dc:	ebc7 0106 	rsbge	r1, r7, r6
 800f4e0:	ebc7 0101 	rsblt	r1, r7, r1
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	bfac      	ite	ge
 800f4e8:	ebc0 0202 	rsbge	r2, r0, r2
 800f4ec:	ebc0 0203 	rsblt	r2, r0, r3
 800f4f0:	80a1      	strh	r1, [r4, #4]
 800f4f2:	80e2      	strh	r2, [r4, #6]
 800f4f4:	e7d1      	b.n	800f49a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800f4f8 <_ZN8touchgfx11Application11getInstanceEv>:
 800f4f8:	4b01      	ldr	r3, [pc, #4]	; (800f500 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800f4fa:	6818      	ldr	r0, [r3, #0]
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	24006c08 	.word	0x24006c08

0800f504 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800f504:	2300      	movs	r3, #0
 800f506:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800f50a:	30a8      	adds	r0, #168	; 0xa8
 800f50c:	f820 3c24 	strh.w	r3, [r0, #-36]
 800f510:	f802 3b01 	strb.w	r3, [r2], #1
 800f514:	4282      	cmp	r2, r0
 800f516:	d1fb      	bne.n	800f510 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800f518:	4770      	bx	lr

0800f51a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800f51a:	4603      	mov	r3, r0
 800f51c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800f520:	2200      	movs	r2, #0
 800f522:	801a      	strh	r2, [r3, #0]
 800f524:	3308      	adds	r3, #8
 800f526:	f823 2c06 	strh.w	r2, [r3, #-6]
 800f52a:	f823 2c04 	strh.w	r2, [r3, #-4]
 800f52e:	f823 2c02 	strh.w	r2, [r3, #-2]
 800f532:	428b      	cmp	r3, r1
 800f534:	d1f5      	bne.n	800f522 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800f536:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800f53a:	4770      	bx	lr

0800f53c <_ZN8touchgfx11ApplicationC1Ev>:
 800f53c:	b570      	push	{r4, r5, r6, lr}
 800f53e:	4b1a      	ldr	r3, [pc, #104]	; (800f5a8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800f540:	2500      	movs	r5, #0
 800f542:	4604      	mov	r4, r0
 800f544:	30a8      	adds	r0, #168	; 0xa8
 800f546:	f840 3ca8 	str.w	r3, [r0, #-168]
 800f54a:	f820 5c24 	strh.w	r5, [r0, #-36]
 800f54e:	f7ff ffe4 	bl	800f51a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f552:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800f556:	f7ff ffe0 	bl	800f51a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f55a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800f55e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800f562:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800f566:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800f56a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800f56e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 800f572:	490e      	ldr	r1, [pc, #56]	; (800f5ac <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800f574:	480e      	ldr	r0, [pc, #56]	; (800f5b0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800f576:	f00b fb3f 	bl	801abf8 <CRC_Lock>
 800f57a:	4e0e      	ldr	r6, [pc, #56]	; (800f5b4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800f57c:	4b0e      	ldr	r3, [pc, #56]	; (800f5b8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800f57e:	b158      	cbz	r0, 800f598 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 800f580:	801d      	strh	r5, [r3, #0]
 800f582:	2300      	movs	r3, #0
 800f584:	4a0d      	ldr	r2, [pc, #52]	; (800f5bc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800f586:	4620      	mov	r0, r4
 800f588:	6013      	str	r3, [r2, #0]
 800f58a:	4a0d      	ldr	r2, [pc, #52]	; (800f5c0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800f58c:	6033      	str	r3, [r6, #0]
 800f58e:	6013      	str	r3, [r2, #0]
 800f590:	f7ff ffb8 	bl	800f504 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800f594:	4620      	mov	r0, r4
 800f596:	bd70      	pop	{r4, r5, r6, pc}
 800f598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f59c:	2002      	movs	r0, #2
 800f59e:	801a      	strh	r2, [r3, #0]
 800f5a0:	6030      	str	r0, [r6, #0]
 800f5a2:	f001 fa23 	bl	80109ec <_ZN8touchgfx6Screen4drawEv>
 800f5a6:	e7ec      	b.n	800f582 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 800f5a8:	0801e2e8 	.word	0x0801e2e8
 800f5ac:	b5e8b5cd 	.word	0xb5e8b5cd
 800f5b0:	f407a5c2 	.word	0xf407a5c2
 800f5b4:	24006bf8 	.word	0x24006bf8
 800f5b8:	24000064 	.word	0x24000064
 800f5bc:	24006c08 	.word	0x24006c08
 800f5c0:	24006bfc 	.word	0x24006bfc

0800f5c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800f5c4:	b510      	push	{r4, lr}
 800f5c6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800f5ca:	428b      	cmp	r3, r1
 800f5cc:	d806      	bhi.n	800f5dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 800f5ce:	4b0b      	ldr	r3, [pc, #44]	; (800f5fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 800f5d0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800f5d4:	4a0a      	ldr	r2, [pc, #40]	; (800f600 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 800f5d6:	480b      	ldr	r0, [pc, #44]	; (800f604 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 800f5d8:	f00b fd50 	bl	801b07c <__assert_func>
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	428b      	cmp	r3, r1
 800f5e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800f5e6:	d908      	bls.n	800f5fa <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 800f5e8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f5ec:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800f5f6:	685a      	ldr	r2, [r3, #4]
 800f5f8:	6062      	str	r2, [r4, #4]
 800f5fa:	bd10      	pop	{r4, pc}
 800f5fc:	0801e27a 	.word	0x0801e27a
 800f600:	0801e368 	.word	0x0801e368
 800f604:	0801e288 	.word	0x0801e288

0800f608 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800f608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f60a:	466b      	mov	r3, sp
 800f60c:	4604      	mov	r4, r0
 800f60e:	e883 0006 	stmia.w	r3, {r1, r2}
 800f612:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800f616:	2a07      	cmp	r2, #7
 800f618:	d906      	bls.n	800f628 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800f61a:	4b09      	ldr	r3, [pc, #36]	; (800f640 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800f61c:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800f620:	4a08      	ldr	r2, [pc, #32]	; (800f644 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800f622:	4809      	ldr	r0, [pc, #36]	; (800f648 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800f624:	f00b fd2a 	bl	801b07c <__assert_func>
 800f628:	1c51      	adds	r1, r2, #1
 800f62a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800f62e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800f632:	cb03      	ldmia	r3!, {r0, r1}
 800f634:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800f638:	6069      	str	r1, [r5, #4]
 800f63a:	b003      	add	sp, #12
 800f63c:	bd30      	pop	{r4, r5, pc}
 800f63e:	bf00      	nop
 800f640:	0801e2b1 	.word	0x0801e2b1
 800f644:	0801e3fe 	.word	0x0801e3fe
 800f648:	0801e288 	.word	0x0801e288

0800f64c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800f64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f650:	b08d      	sub	sp, #52	; 0x34
 800f652:	4683      	mov	fp, r0
 800f654:	ac08      	add	r4, sp, #32
 800f656:	4620      	mov	r0, r4
 800f658:	e884 0006 	stmia.w	r4, {r1, r2}
 800f65c:	f7fc f87f 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f660:	2800      	cmp	r0, #0
 800f662:	d16a      	bne.n	800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f664:	9402      	str	r4, [sp, #8]
 800f666:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800f66a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800f66e:	2400      	movs	r4, #0
 800f670:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800f674:	9301      	str	r3, [sp, #4]
 800f676:	36a0      	adds	r6, #160	; 0xa0
 800f678:	42a5      	cmp	r5, r4
 800f67a:	d00d      	beq.n	800f698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 800f67c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800f680:	9802      	ldr	r0, [sp, #8]
 800f682:	f7ff fed1 	bl	800f428 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f686:	b128      	cbz	r0, 800f694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800f688:	1e69      	subs	r1, r5, #1
 800f68a:	9801      	ldr	r0, [sp, #4]
 800f68c:	1b09      	subs	r1, r1, r4
 800f68e:	b289      	uxth	r1, r1
 800f690:	f7ff ff98 	bl	800f5c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f694:	3401      	adds	r4, #1
 800f696:	e7ef      	b.n	800f678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f698:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800f69c:	1e7b      	subs	r3, r7, #1
 800f69e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800f6a2:	9703      	str	r7, [sp, #12]
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	2400      	movs	r4, #0
 800f6a8:	4655      	mov	r5, sl
 800f6aa:	9704      	str	r7, [sp, #16]
 800f6ac:	4626      	mov	r6, r4
 800f6ae:	9b04      	ldr	r3, [sp, #16]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d078      	beq.n	800f7a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 800f6b4:	9902      	ldr	r1, [sp, #8]
 800f6b6:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800f6ba:	f7ff fe93 	bl	800f3e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f6be:	b360      	cbz	r0, 800f71a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800f6c0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800f6c4:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800f6c8:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800f6cc:	45e6      	cmp	lr, ip
 800f6ce:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800f6d2:	db35      	blt.n	800f740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800f6d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f6d8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800f6dc:	4472      	add	r2, lr
 800f6de:	4463      	add	r3, ip
 800f6e0:	b212      	sxth	r2, r2
 800f6e2:	b21b      	sxth	r3, r3
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	dc2b      	bgt.n	800f740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800f6e8:	fa1f f288 	uxth.w	r2, r8
 800f6ec:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800f6f0:	45c1      	cmp	r9, r8
 800f6f2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f6f6:	4413      	add	r3, r2
 800f6f8:	fa1f fc89 	uxth.w	ip, r9
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	fa0f fe83 	sxth.w	lr, r3
 800f702:	db0f      	blt.n	800f724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 800f704:	eba3 030c 	sub.w	r3, r3, ip
 800f708:	1ac9      	subs	r1, r1, r3
 800f70a:	b209      	sxth	r1, r1
 800f70c:	2900      	cmp	r1, #0
 800f70e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800f712:	dd12      	ble.n	800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f714:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800f718:	4604      	mov	r4, r0
 800f71a:	9b04      	ldr	r3, [sp, #16]
 800f71c:	3d08      	subs	r5, #8
 800f71e:	3b01      	subs	r3, #1
 800f720:	9304      	str	r3, [sp, #16]
 800f722:	e7c4      	b.n	800f6ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800f724:	4461      	add	r1, ip
 800f726:	b209      	sxth	r1, r1
 800f728:	4571      	cmp	r1, lr
 800f72a:	dc3a      	bgt.n	800f7a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f72c:	eba2 020c 	sub.w	r2, r2, ip
 800f730:	b212      	sxth	r2, r2
 800f732:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800f736:	2a00      	cmp	r2, #0
 800f738:	dcee      	bgt.n	800f718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800f73a:	b00d      	add	sp, #52	; 0x34
 800f73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f740:	45c1      	cmp	r9, r8
 800f742:	db2e      	blt.n	800f7a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f744:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f748:	4499      	add	r9, r3
 800f74a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800f74e:	4498      	add	r8, r3
 800f750:	fa0f f989 	sxth.w	r9, r9
 800f754:	fa0f f888 	sxth.w	r8, r8
 800f758:	45c1      	cmp	r9, r8
 800f75a:	dc22      	bgt.n	800f7a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f75c:	fa1f f28c 	uxth.w	r2, ip
 800f760:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800f764:	45e6      	cmp	lr, ip
 800f766:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800f76a:	4413      	add	r3, r2
 800f76c:	fa1f f88e 	uxth.w	r8, lr
 800f770:	b29b      	uxth	r3, r3
 800f772:	fa0f f983 	sxth.w	r9, r3
 800f776:	db0a      	blt.n	800f78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 800f778:	eba3 0308 	sub.w	r3, r3, r8
 800f77c:	1ac9      	subs	r1, r1, r3
 800f77e:	b209      	sxth	r1, r1
 800f780:	2900      	cmp	r1, #0
 800f782:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800f786:	ddd8      	ble.n	800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800f788:	f8ad 9020 	strh.w	r9, [sp, #32]
 800f78c:	e7c4      	b.n	800f718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800f78e:	4441      	add	r1, r8
 800f790:	b209      	sxth	r1, r1
 800f792:	4549      	cmp	r1, r9
 800f794:	dc05      	bgt.n	800f7a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800f796:	eba2 0208 	sub.w	r2, r2, r8
 800f79a:	b212      	sxth	r2, r2
 800f79c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800f7a0:	e7c9      	b.n	800f736 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	e7b9      	b.n	800f71a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800f7a6:	2c00      	cmp	r4, #0
 800f7a8:	f47f af7d 	bne.w	800f6a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800f7ac:	2e00      	cmp	r6, #0
 800f7ae:	f000 81dc 	beq.w	800fb6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f7b2:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800f7b6:	4655      	mov	r5, sl
 800f7b8:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800f7bc:	b2b9      	uxth	r1, r7
 800f7be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f7c2:	b2b3      	uxth	r3, r6
 800f7c4:	9104      	str	r1, [sp, #16]
 800f7c6:	9804      	ldr	r0, [sp, #16]
 800f7c8:	441a      	add	r2, r3
 800f7ca:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f7ce:	b292      	uxth	r2, r2
 800f7d0:	4401      	add	r1, r0
 800f7d2:	fa0f f882 	sxth.w	r8, r2
 800f7d6:	b289      	uxth	r1, r1
 800f7d8:	9105      	str	r1, [sp, #20]
 800f7da:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800f7de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f7e2:	9b03      	ldr	r3, [sp, #12]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d054      	beq.n	800f892 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800f7e8:	9902      	ldr	r1, [sp, #8]
 800f7ea:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800f7ee:	f7ff fdf9 	bl	800f3e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f7f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7f6:	b1d8      	cbz	r0, 800f830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f7f8:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800f7fc:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800f800:	4576      	cmp	r6, lr
 800f802:	dc26      	bgt.n	800f852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f804:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800f808:	44f4      	add	ip, lr
 800f80a:	fa0f fc8c 	sxth.w	ip, ip
 800f80e:	45e0      	cmp	r8, ip
 800f810:	db1f      	blt.n	800f852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f812:	428f      	cmp	r7, r1
 800f814:	fa1f fc81 	uxth.w	ip, r1
 800f818:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800f81c:	dc0f      	bgt.n	800f83e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800f81e:	9805      	ldr	r0, [sp, #20]
 800f820:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800f824:	eba0 0c0c 	sub.w	ip, r0, ip
 800f828:	eba1 010c 	sub.w	r1, r1, ip
 800f82c:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800f830:	4620      	mov	r0, r4
 800f832:	9903      	ldr	r1, [sp, #12]
 800f834:	3d08      	subs	r5, #8
 800f836:	4604      	mov	r4, r0
 800f838:	3901      	subs	r1, #1
 800f83a:	9103      	str	r1, [sp, #12]
 800f83c:	e7cf      	b.n	800f7de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 800f83e:	4461      	add	r1, ip
 800f840:	b209      	sxth	r1, r1
 800f842:	4549      	cmp	r1, r9
 800f844:	dcf5      	bgt.n	800f832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f846:	9904      	ldr	r1, [sp, #16]
 800f848:	eba1 0c0c 	sub.w	ip, r1, ip
 800f84c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800f850:	e7ee      	b.n	800f830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f852:	428f      	cmp	r7, r1
 800f854:	dced      	bgt.n	800f832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f856:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800f85a:	4461      	add	r1, ip
 800f85c:	b209      	sxth	r1, r1
 800f85e:	4589      	cmp	r9, r1
 800f860:	dbe7      	blt.n	800f832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f862:	4576      	cmp	r6, lr
 800f864:	fa1f fc8e 	uxth.w	ip, lr
 800f868:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800f86c:	dc08      	bgt.n	800f880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 800f86e:	eba2 0c0c 	sub.w	ip, r2, ip
 800f872:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800f876:	eba1 010c 	sub.w	r1, r1, ip
 800f87a:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800f87e:	e7d7      	b.n	800f830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f880:	4461      	add	r1, ip
 800f882:	b209      	sxth	r1, r1
 800f884:	4588      	cmp	r8, r1
 800f886:	dbd4      	blt.n	800f832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f888:	eba3 0c0c 	sub.w	ip, r3, ip
 800f88c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800f890:	e7ce      	b.n	800f830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f892:	2c00      	cmp	r4, #0
 800f894:	f000 8169 	beq.w	800fb6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f898:	9b00      	ldr	r3, [sp, #0]
 800f89a:	3301      	adds	r3, #1
 800f89c:	f000 8165 	beq.w	800fb6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800f8a0:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800f8a4:	9802      	ldr	r0, [sp, #8]
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	f7ff fdbe 	bl	800f428 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f8ac:	b120      	cbz	r0, 800f8b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 800f8ae:	f8bd 1000 	ldrh.w	r1, [sp]
 800f8b2:	9801      	ldr	r0, [sp, #4]
 800f8b4:	f7ff fe86 	bl	800f5c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f8b8:	9902      	ldr	r1, [sp, #8]
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f7ff fd92 	bl	800f3e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	f000 809b 	beq.w	800f9fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 800f8c6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800f8ca:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800f8ce:	fa1f f288 	uxth.w	r2, r8
 800f8d2:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800f8d6:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800f8da:	19d5      	adds	r5, r2, r7
 800f8dc:	b2a1      	uxth	r1, r4
 800f8de:	45a0      	cmp	r8, r4
 800f8e0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800f8e4:	fa1f f985 	uxth.w	r9, r5
 800f8e8:	440b      	add	r3, r1
 800f8ea:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800f8ee:	fa0f f589 	sxth.w	r5, r9
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	9503      	str	r5, [sp, #12]
 800f8f6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800f8fa:	9507      	str	r5, [sp, #28]
 800f8fc:	f340 809d 	ble.w	800fa3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800f900:	1a52      	subs	r2, r2, r1
 800f902:	4584      	cmp	ip, r0
 800f904:	fa0f fe83 	sxth.w	lr, r3
 800f908:	b292      	uxth	r2, r2
 800f90a:	b215      	sxth	r5, r2
 800f90c:	dd2f      	ble.n	800f96e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800f90e:	9e00      	ldr	r6, [sp, #0]
 800f910:	fa1f fc8c 	uxth.w	ip, ip
 800f914:	b280      	uxth	r0, r0
 800f916:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800f91a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800f91e:	9e03      	ldr	r6, [sp, #12]
 800f920:	ebac 0300 	sub.w	r3, ip, r0
 800f924:	448c      	add	ip, r1
 800f926:	eba6 060e 	sub.w	r6, r6, lr
 800f92a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800f92e:	b29b      	uxth	r3, r3
 800f930:	4470      	add	r0, lr
 800f932:	fa0f fc8c 	sxth.w	ip, ip
 800f936:	b21c      	sxth	r4, r3
 800f938:	b200      	sxth	r0, r0
 800f93a:	4366      	muls	r6, r4
 800f93c:	ebac 0000 	sub.w	r0, ip, r0
 800f940:	4368      	muls	r0, r5
 800f942:	4286      	cmp	r6, r0
 800f944:	db09      	blt.n	800f95a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 800f946:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800f94a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800f94e:	4417      	add	r7, r2
 800f950:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f954:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800f958:	e685      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f95a:	440b      	add	r3, r1
 800f95c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800f960:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f964:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800f968:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800f96c:	e67b      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f96e:	9e03      	ldr	r6, [sp, #12]
 800f970:	45b6      	cmp	lr, r6
 800f972:	da28      	bge.n	800f9c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 800f974:	9b00      	ldr	r3, [sp, #0]
 800f976:	eba6 060e 	sub.w	r6, r6, lr
 800f97a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800f97e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800f982:	eb04 030c 	add.w	r3, r4, ip
 800f986:	fa1f f883 	uxth.w	r8, r3
 800f98a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800f98e:	4403      	add	r3, r0
 800f990:	fa0f f988 	sxth.w	r9, r8
 800f994:	eba0 000c 	sub.w	r0, r0, ip
 800f998:	eba3 0308 	sub.w	r3, r3, r8
 800f99c:	4368      	muls	r0, r5
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	fa0f f883 	sxth.w	r8, r3
 800f9a4:	fb08 f606 	mul.w	r6, r8, r6
 800f9a8:	42b0      	cmp	r0, r6
 800f9aa:	dc06      	bgt.n	800f9ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 800f9ac:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800f9b0:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800f9b4:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800f9b8:	e7c9      	b.n	800f94e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 800f9ba:	4423      	add	r3, r4
 800f9bc:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800f9c0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f9c4:	e64f      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800f9c6:	eba3 0309 	sub.w	r3, r3, r9
 800f9ca:	9807      	ldr	r0, [sp, #28]
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	2806      	cmp	r0, #6
 800f9d0:	fa0f fc83 	sxth.w	ip, r3
 800f9d4:	d818      	bhi.n	800fa08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 800f9d6:	4652      	mov	r2, sl
 800f9d8:	ab0a      	add	r3, sp, #40	; 0x28
 800f9da:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800f9de:	6851      	ldr	r1, [r2, #4]
 800f9e0:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800f9e4:	c303      	stmia	r3!, {r0, r1}
 800f9e6:	9b03      	ldr	r3, [sp, #12]
 800f9e8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800f9ec:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800f9f0:	ab0a      	add	r3, sp, #40	; 0x28
 800f9f2:	9801      	ldr	r0, [sp, #4]
 800f9f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f9f8:	f7ff fe06 	bl	800f608 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800f9fc:	9b00      	ldr	r3, [sp, #0]
 800f9fe:	f1aa 0a08 	sub.w	sl, sl, #8
 800fa02:	3b01      	subs	r3, #1
 800fa04:	9300      	str	r3, [sp, #0]
 800fa06:	e747      	b.n	800f898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800fa08:	9800      	ldr	r0, [sp, #0]
 800fa0a:	45ac      	cmp	ip, r5
 800fa0c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800fa10:	db0c      	blt.n	800fa2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 800fa12:	4417      	add	r7, r2
 800fa14:	4458      	add	r0, fp
 800fa16:	f8ad 4020 	strh.w	r4, [sp, #32]
 800fa1a:	b2bf      	uxth	r7, r7
 800fa1c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800fa20:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800fa24:	440f      	add	r7, r1
 800fa26:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800fa2a:	e61c      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fa2c:	4458      	add	r0, fp
 800fa2e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800fa32:	443b      	add	r3, r7
 800fa34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800fa38:	e615      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fa3a:	fa1f f18c 	uxth.w	r1, ip
 800fa3e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800fa42:	b282      	uxth	r2, r0
 800fa44:	4584      	cmp	ip, r0
 800fa46:	eb01 0e05 	add.w	lr, r1, r5
 800fa4a:	9204      	str	r2, [sp, #16]
 800fa4c:	fa1f fe8e 	uxth.w	lr, lr
 800fa50:	9e04      	ldr	r6, [sp, #16]
 800fa52:	fa0f f28e 	sxth.w	r2, lr
 800fa56:	9205      	str	r2, [sp, #20]
 800fa58:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800fa5c:	4432      	add	r2, r6
 800fa5e:	b292      	uxth	r2, r2
 800fa60:	9206      	str	r2, [sp, #24]
 800fa62:	da26      	bge.n	800fab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800fa64:	eba3 0309 	sub.w	r3, r3, r9
 800fa68:	eba2 020e 	sub.w	r2, r2, lr
 800fa6c:	eba0 000c 	sub.w	r0, r0, ip
 800fa70:	eba4 0408 	sub.w	r4, r4, r8
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	b292      	uxth	r2, r2
 800fa78:	fa0f fa83 	sxth.w	sl, r3
 800fa7c:	b211      	sxth	r1, r2
 800fa7e:	fb0a f000 	mul.w	r0, sl, r0
 800fa82:	434c      	muls	r4, r1
 800fa84:	42a0      	cmp	r0, r4
 800fa86:	9800      	ldr	r0, [sp, #0]
 800fa88:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800fa8c:	dc06      	bgt.n	800fa9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 800fa8e:	4458      	add	r0, fp
 800fa90:	9a05      	ldr	r2, [sp, #20]
 800fa92:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800fa96:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800fa9a:	e7ca      	b.n	800fa32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800fa9c:	eb0b 0300 	add.w	r3, fp, r0
 800faa0:	9903      	ldr	r1, [sp, #12]
 800faa2:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800faa6:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800faaa:	442a      	add	r2, r5
 800faac:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800fab0:	e5d9      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fab2:	9e04      	ldr	r6, [sp, #16]
 800fab4:	9a03      	ldr	r2, [sp, #12]
 800fab6:	1b89      	subs	r1, r1, r6
 800fab8:	b21e      	sxth	r6, r3
 800faba:	b289      	uxth	r1, r1
 800fabc:	4296      	cmp	r6, r2
 800fabe:	fa0f fc81 	sxth.w	ip, r1
 800fac2:	dd25      	ble.n	800fb10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 800fac4:	eba3 0309 	sub.w	r3, r3, r9
 800fac8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800facc:	9e05      	ldr	r6, [sp, #20]
 800face:	eba4 0408 	sub.w	r4, r4, r8
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	eba6 0902 	sub.w	r9, r6, r2
 800fad8:	fb0c f404 	mul.w	r4, ip, r4
 800fadc:	b218      	sxth	r0, r3
 800fade:	9a00      	ldr	r2, [sp, #0]
 800fae0:	fb00 f909 	mul.w	r9, r0, r9
 800fae4:	00d2      	lsls	r2, r2, #3
 800fae6:	454c      	cmp	r4, r9
 800fae8:	db03      	blt.n	800faf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 800faea:	445a      	add	r2, fp
 800faec:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800faf0:	e79f      	b.n	800fa32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800faf2:	eb0b 0302 	add.w	r3, fp, r2
 800faf6:	9a03      	ldr	r2, [sp, #12]
 800faf8:	4429      	add	r1, r5
 800fafa:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800fafe:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800fb02:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800fb06:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800fb0a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fb0e:	e5aa      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fb10:	9b06      	ldr	r3, [sp, #24]
 800fb12:	9c07      	ldr	r4, [sp, #28]
 800fb14:	eba3 020e 	sub.w	r2, r3, lr
 800fb18:	2c06      	cmp	r4, #6
 800fb1a:	b292      	uxth	r2, r2
 800fb1c:	b213      	sxth	r3, r2
 800fb1e:	d80d      	bhi.n	800fb3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 800fb20:	4651      	mov	r1, sl
 800fb22:	aa0a      	add	r2, sp, #40	; 0x28
 800fb24:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800fb28:	6849      	ldr	r1, [r1, #4]
 800fb2a:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800fb2e:	9b05      	ldr	r3, [sp, #20]
 800fb30:	c203      	stmia	r2!, {r0, r1}
 800fb32:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800fb36:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800fb3a:	e759      	b.n	800f9f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 800fb3c:	9c00      	ldr	r4, [sp, #0]
 800fb3e:	4563      	cmp	r3, ip
 800fb40:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800fb44:	db0d      	blt.n	800fb62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 800fb46:	4429      	add	r1, r5
 800fb48:	9a04      	ldr	r2, [sp, #16]
 800fb4a:	445c      	add	r4, fp
 800fb4c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800fb50:	b289      	uxth	r1, r1
 800fb52:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800fb56:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800fb5a:	4411      	add	r1, r2
 800fb5c:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800fb60:	e581      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fb62:	445c      	add	r4, fp
 800fb64:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800fb68:	e79f      	b.n	800faaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 800fb6a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800fb6e:	2f07      	cmp	r7, #7
 800fb70:	d806      	bhi.n	800fb80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800fb72:	ab08      	add	r3, sp, #32
 800fb74:	9801      	ldr	r0, [sp, #4]
 800fb76:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fb7a:	f7ff fd45 	bl	800f608 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fb7e:	e5dc      	b.n	800f73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800fb80:	f107 39ff 	add.w	r9, r7, #4294967295
 800fb84:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800fb88:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800fb8c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800fb90:	f04f 35ff 	mov.w	r5, #4294967295
 800fb94:	2400      	movs	r4, #0
 800fb96:	9304      	str	r3, [sp, #16]
 800fb98:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800fb9c:	f109 32ff 	add.w	r2, r9, #4294967295
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	4690      	mov	r8, r2
 800fba4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800fba8:	9303      	str	r3, [sp, #12]
 800fbaa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800fbae:	f1b8 3fff 	cmp.w	r8, #4294967295
 800fbb2:	6818      	ldr	r0, [r3, #0]
 800fbb4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fbb8:	9206      	str	r2, [sp, #24]
 800fbba:	bf16      	itet	ne
 800fbbc:	9904      	ldrne	r1, [sp, #16]
 800fbbe:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800fbc2:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800fbc6:	9305      	str	r3, [sp, #20]
 800fbc8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800fbcc:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800fbd0:	fb16 f601 	smulbb	r6, r6, r1
 800fbd4:	6859      	ldr	r1, [r3, #4]
 800fbd6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800fbda:	4671      	mov	r1, lr
 800fbdc:	a80a      	add	r0, sp, #40	; 0x28
 800fbde:	f7ff fc45 	bl	800f46c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fbe2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800fbe6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800fbea:	9b03      	ldr	r3, [sp, #12]
 800fbec:	9a00      	ldr	r2, [sp, #0]
 800fbee:	fb11 f100 	smulbb	r1, r1, r0
 800fbf2:	2008      	movs	r0, #8
 800fbf4:	fb02 6603 	mla	r6, r2, r3, r6
 800fbf8:	1b8e      	subs	r6, r1, r6
 800fbfa:	fb91 f1f0 	sdiv	r1, r1, r0
 800fbfe:	42b1      	cmp	r1, r6
 800fc00:	dc21      	bgt.n	800fc46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800fc02:	4556      	cmp	r6, sl
 800fc04:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800fc08:	da03      	bge.n	800fc12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 800fc0a:	b1e6      	cbz	r6, 800fc46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800fc0c:	46b2      	mov	sl, r6
 800fc0e:	4645      	mov	r5, r8
 800fc10:	464c      	mov	r4, r9
 800fc12:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc16:	f118 0f02 	cmn.w	r8, #2
 800fc1a:	d1c8      	bne.n	800fbae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 800fc1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fc20:	f1a7 0708 	sub.w	r7, r7, #8
 800fc24:	4691      	mov	r9, r2
 800fc26:	d1b7      	bne.n	800fb98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800fc28:	9b01      	ldr	r3, [sp, #4]
 800fc2a:	b2a6      	uxth	r6, r4
 800fc2c:	00e4      	lsls	r4, r4, #3
 800fc2e:	1918      	adds	r0, r3, r4
 800fc30:	1c6b      	adds	r3, r5, #1
 800fc32:	d10b      	bne.n	800fc4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 800fc34:	4601      	mov	r1, r0
 800fc36:	9802      	ldr	r0, [sp, #8]
 800fc38:	f7ff fc18 	bl	800f46c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	9801      	ldr	r0, [sp, #4]
 800fc40:	f7ff fcc0 	bl	800f5c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fc44:	e50f      	b.n	800f666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800fc46:	4645      	mov	r5, r8
 800fc48:	464c      	mov	r4, r9
 800fc4a:	e7ed      	b.n	800fc28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 800fc4c:	9b01      	ldr	r3, [sp, #4]
 800fc4e:	00ed      	lsls	r5, r5, #3
 800fc50:	445c      	add	r4, fp
 800fc52:	1959      	adds	r1, r3, r5
 800fc54:	445d      	add	r5, fp
 800fc56:	f7ff fc09 	bl	800f46c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fc5a:	9b02      	ldr	r3, [sp, #8]
 800fc5c:	cb03      	ldmia	r3!, {r0, r1}
 800fc5e:	9b02      	ldr	r3, [sp, #8]
 800fc60:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800fc64:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800fc68:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800fc6c:	6861      	ldr	r1, [r4, #4]
 800fc6e:	c303      	stmia	r3!, {r0, r1}
 800fc70:	e7e4      	b.n	800fc3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0800fc74 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800fc74:	4b1d      	ldr	r3, [pc, #116]	; (800fcec <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800fc76:	b530      	push	{r4, r5, lr}
 800fc78:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fc7c:	b085      	sub	sp, #20
 800fc7e:	4b1c      	ldr	r3, [pc, #112]	; (800fcf0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800fc80:	460c      	mov	r4, r1
 800fc82:	2100      	movs	r1, #0
 800fc84:	4605      	mov	r5, r0
 800fc86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc8a:	6820      	ldr	r0, [r4, #0]
 800fc8c:	9100      	str	r1, [sp, #0]
 800fc8e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fc92:	ab02      	add	r3, sp, #8
 800fc94:	6861      	ldr	r1, [r4, #4]
 800fc96:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fc9a:	c303      	stmia	r3!, {r0, r1}
 800fc9c:	4669      	mov	r1, sp
 800fc9e:	a802      	add	r0, sp, #8
 800fca0:	f7fb fd1a 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800fca4:	ab02      	add	r3, sp, #8
 800fca6:	cb03      	ldmia	r3!, {r0, r1}
 800fca8:	4b12      	ldr	r3, [pc, #72]	; (800fcf4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800fcaa:	6020      	str	r0, [r4, #0]
 800fcac:	6818      	ldr	r0, [r3, #0]
 800fcae:	6061      	str	r1, [r4, #4]
 800fcb0:	b138      	cbz	r0, 800fcc2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800fcb2:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 800fcb6:	b133      	cbz	r3, 800fcc6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800fcb8:	6821      	ldr	r1, [r4, #0]
 800fcba:	4628      	mov	r0, r5
 800fcbc:	6862      	ldr	r2, [r4, #4]
 800fcbe:	f7ff fcc5 	bl	800f64c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fcc2:	b005      	add	sp, #20
 800fcc4:	bd30      	pop	{r4, r5, pc}
 800fcc6:	6803      	ldr	r3, [r0, #0]
 800fcc8:	4621      	mov	r1, r4
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	4798      	blx	r3
 800fcce:	4b0a      	ldr	r3, [pc, #40]	; (800fcf8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800fcd0:	6818      	ldr	r0, [r3, #0]
 800fcd2:	b118      	cbz	r0, 800fcdc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800fcd4:	6803      	ldr	r3, [r0, #0]
 800fcd6:	4621      	mov	r1, r4
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	4798      	blx	r3
 800fcdc:	4b07      	ldr	r3, [pc, #28]	; (800fcfc <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800fcde:	4621      	mov	r1, r4
 800fce0:	6818      	ldr	r0, [r3, #0]
 800fce2:	6803      	ldr	r3, [r0, #0]
 800fce4:	69db      	ldr	r3, [r3, #28]
 800fce6:	4798      	blx	r3
 800fce8:	e7eb      	b.n	800fcc2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800fcea:	bf00      	nop
 800fcec:	24006bb0 	.word	0x24006bb0
 800fcf0:	24006bb2 	.word	0x24006bb2
 800fcf4:	24006bf8 	.word	0x24006bf8
 800fcf8:	24006bf4 	.word	0x24006bf4
 800fcfc:	24006bbc 	.word	0x24006bbc

0800fd00 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	4604      	mov	r4, r0
 800fd06:	b09b      	sub	sp, #108	; 0x6c
 800fd08:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 800fd0c:	b129      	cbz	r1, 800fd1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800fd14:	b01b      	add	sp, #108	; 0x6c
 800fd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800fd1e:	4630      	mov	r0, r6
 800fd20:	f7fb fd1d 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd24:	4605      	mov	r5, r0
 800fd26:	b940      	cbnz	r0, 800fd3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 800fd28:	4620      	mov	r0, r4
 800fd2a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800fd2e:	f7ff fc8d 	bl	800f64c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fd32:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800fd36:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800fd3a:	4ba6      	ldr	r3, [pc, #664]	; (800ffd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	b33b      	cbz	r3, 800fd90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800fd40:	4da5      	ldr	r5, [pc, #660]	; (800ffd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800fd42:	4628      	mov	r0, r5
 800fd44:	f7fb fd0b 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd48:	4606      	mov	r6, r0
 800fd4a:	bb08      	cbnz	r0, 800fd90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	f7ff f9d3 	bl	800f0f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fd52:	6829      	ldr	r1, [r5, #0]
 800fd54:	686a      	ldr	r2, [r5, #4]
 800fd56:	4620      	mov	r0, r4
 800fd58:	f7ff fc78 	bl	800f64c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fd5c:	802e      	strh	r6, [r5, #0]
 800fd5e:	806e      	strh	r6, [r5, #2]
 800fd60:	80ae      	strh	r6, [r5, #4]
 800fd62:	80ee      	strh	r6, [r5, #6]
 800fd64:	4f9d      	ldr	r7, [pc, #628]	; (800ffdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800fd66:	a809      	add	r0, sp, #36	; 0x24
 800fd68:	f7ff fbd7 	bl	800f51a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800fd6c:	883d      	ldrh	r5, [r7, #0]
 800fd6e:	462e      	mov	r6, r5
 800fd70:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fd74:	42b3      	cmp	r3, r6
 800fd76:	d910      	bls.n	800fd9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 800fd78:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800fd7c:	3601      	adds	r6, #1
 800fd7e:	a809      	add	r0, sp, #36	; 0x24
 800fd80:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800fd84:	b2b6      	uxth	r6, r6
 800fd86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800fd8a:	f7ff fc3d 	bl	800f608 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fd8e:	e7ef      	b.n	800fd70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800fd90:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1e5      	bne.n	800fd64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 800fd98:	e7bc      	b.n	800fd14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fd9a:	462e      	mov	r6, r5
 800fd9c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800fda0:	42b3      	cmp	r3, r6
 800fda2:	d90b      	bls.n	800fdbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 800fda4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800fda8:	3601      	adds	r6, #1
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800fdb0:	b2b6      	uxth	r6, r6
 800fdb2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800fdb6:	f7ff fc49 	bl	800f64c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fdba:	e7ef      	b.n	800fd9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800fdbc:	4a88      	ldr	r2, [pc, #544]	; (800ffe0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800fdbe:	6813      	ldr	r3, [r2, #0]
 800fdc0:	4690      	mov	r8, r2
 800fdc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	f040 8094 	bne.w	800fef4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 800fdcc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800fdd0:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800fdd4:	f04f 0900 	mov.w	r9, #0
 800fdd8:	33aa      	adds	r3, #170	; 0xaa
 800fdda:	42a8      	cmp	r0, r5
 800fddc:	f103 0308 	add.w	r3, r3, #8
 800fde0:	dd0a      	ble.n	800fdf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 800fde2:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800fde6:	3501      	adds	r5, #1
 800fde8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800fdec:	440a      	add	r2, r1
 800fdee:	b212      	sxth	r2, r2
 800fdf0:	4591      	cmp	r9, r2
 800fdf2:	bfb8      	it	lt
 800fdf4:	4691      	movlt	r9, r2
 800fdf6:	e7f0      	b.n	800fdda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 800fdf8:	4b7a      	ldr	r3, [pc, #488]	; (800ffe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800fdfa:	4e7b      	ldr	r6, [pc, #492]	; (800ffe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800fdfc:	881d      	ldrh	r5, [r3, #0]
 800fdfe:	2300      	movs	r3, #0
 800fe00:	2d0f      	cmp	r5, #15
 800fe02:	bf8c      	ite	hi
 800fe04:	08ed      	lsrhi	r5, r5, #3
 800fe06:	2501      	movls	r5, #1
 800fe08:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fe0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fe10:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800fe14:	f8d8 0000 	ldr.w	r0, [r8]
 800fe18:	440b      	add	r3, r1
 800fe1a:	6802      	ldr	r2, [r0, #0]
 800fe1c:	b21b      	sxth	r3, r3
 800fe1e:	4599      	cmp	r9, r3
 800fe20:	dd4b      	ble.n	800feba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 800fe22:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800fe26:	4798      	blx	r3
 800fe28:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800fe2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fe30:	4413      	add	r3, r2
 800fe32:	b21b      	sxth	r3, r3
 800fe34:	195a      	adds	r2, r3, r5
 800fe36:	4290      	cmp	r0, r2
 800fe38:	da07      	bge.n	800fe4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800fe3a:	4581      	cmp	r9, r0
 800fe3c:	dd05      	ble.n	800fe4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800fe3e:	4298      	cmp	r0, r3
 800fe40:	da33      	bge.n	800feaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	dd31      	ble.n	800feaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800fe46:	4648      	mov	r0, r9
 800fe48:	e004      	b.n	800fe54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 800fe4a:	4298      	cmp	r0, r3
 800fe4c:	dbfb      	blt.n	800fe46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 800fe4e:	4548      	cmp	r0, r9
 800fe50:	bfa8      	it	ge
 800fe52:	4648      	movge	r0, r9
 800fe54:	f9b6 2000 	ldrsh.w	r2, [r6]
 800fe58:	2100      	movs	r1, #0
 800fe5a:	1ac0      	subs	r0, r0, r3
 800fe5c:	f8b7 a000 	ldrh.w	sl, [r7]
 800fe60:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fe64:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe68:	f8ad 2018 	strh.w	r2, [sp, #24]
 800fe6c:	f8ad 001a 	strh.w	r0, [sp, #26]
 800fe70:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800fe74:	4553      	cmp	r3, sl
 800fe76:	d9c9      	bls.n	800fe0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800fe78:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800fe7c:	ab07      	add	r3, sp, #28
 800fe7e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800fe82:	6851      	ldr	r1, [r2, #4]
 800fe84:	c303      	stmia	r3!, {r0, r1}
 800fe86:	a807      	add	r0, sp, #28
 800fe88:	a905      	add	r1, sp, #20
 800fe8a:	f7fb fc25 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 800fe8e:	a807      	add	r0, sp, #28
 800fe90:	f7fb fc65 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe94:	b920      	cbnz	r0, 800fea0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 800fe96:	6823      	ldr	r3, [r4, #0]
 800fe98:	a907      	add	r1, sp, #28
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe9e:	4798      	blx	r3
 800fea0:	f10a 0a01 	add.w	sl, sl, #1
 800fea4:	fa1f fa8a 	uxth.w	sl, sl
 800fea8:	e7e2      	b.n	800fe70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 800feaa:	f8d8 0000 	ldr.w	r0, [r8]
 800feae:	2101      	movs	r1, #1
 800feb0:	6803      	ldr	r3, [r0, #0]
 800feb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feb6:	4798      	blx	r3
 800feb8:	e7a8      	b.n	800fe0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800feba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800febc:	4798      	blx	r3
 800febe:	4b4b      	ldr	r3, [pc, #300]	; (800ffec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f43f af26 	beq.w	800fd14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fec8:	2300      	movs	r3, #0
 800feca:	883d      	ldrh	r5, [r7, #0]
 800fecc:	34ea      	adds	r4, #234	; 0xea
 800fece:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800fed2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800fed6:	42ab      	cmp	r3, r5
 800fed8:	f67f af1c 	bls.w	800fd14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800fedc:	ab1a      	add	r3, sp, #104	; 0x68
 800fede:	4620      	mov	r0, r4
 800fee0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fee4:	3501      	adds	r5, #1
 800fee6:	3b44      	subs	r3, #68	; 0x44
 800fee8:	b2ad      	uxth	r5, r5
 800feea:	e893 0006 	ldmia.w	r3, {r1, r2}
 800feee:	f7ff fb8b 	bl	800f608 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fef2:	e7ee      	b.n	800fed2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	f040 813d 	bne.w	8010174 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 800fefa:	4b3d      	ldr	r3, [pc, #244]	; (800fff0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d02c      	beq.n	800ff5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 800ff02:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 800ff06:	883a      	ldrh	r2, [r7, #0]
 800ff08:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800ff0c:	3201      	adds	r2, #1
 800ff0e:	b292      	uxth	r2, r2
 800ff10:	2900      	cmp	r1, #0
 800ff12:	d0d4      	beq.n	800febe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800ff14:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800ff18:	4610      	mov	r0, r2
 800ff1a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800ff1e:	f04f 0a00 	mov.w	sl, #0
 800ff22:	441d      	add	r5, r3
 800ff24:	b22d      	sxth	r5, r5
 800ff26:	b283      	uxth	r3, r0
 800ff28:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 800ff2c:	4299      	cmp	r1, r3
 800ff2e:	f240 80c3 	bls.w	80100b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 800ff32:	4426      	add	r6, r4
 800ff34:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 800ff38:	4684      	mov	ip, r0
 800ff3a:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 800ff3e:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 800ff42:	4573      	cmp	r3, lr
 800ff44:	f340 80a5 	ble.w	8010092 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 800ff48:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 800ff4c:	4475      	add	r5, lr
 800ff4e:	b22d      	sxth	r5, r5
 800ff50:	429d      	cmp	r5, r3
 800ff52:	bfa8      	it	ge
 800ff54:	461d      	movge	r5, r3
 800ff56:	3001      	adds	r0, #1
 800ff58:	46e2      	mov	sl, ip
 800ff5a:	e7e4      	b.n	800ff26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 800ff5c:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800ff60:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800ff64:	f1bb 0f00 	cmp.w	fp, #0
 800ff68:	d0a9      	beq.n	800febe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800ff6a:	883b      	ldrh	r3, [r7, #0]
 800ff6c:	2600      	movs	r6, #0
 800ff6e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800ff72:	3301      	adds	r3, #1
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	b299      	uxth	r1, r3
 800ff78:	00f5      	lsls	r5, r6, #3
 800ff7a:	458b      	cmp	fp, r1
 800ff7c:	d93a      	bls.n	800fff4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 800ff7e:	4425      	add	r5, r4
 800ff80:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800ff84:	469c      	mov	ip, r3
 800ff86:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800ff8a:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800ff8e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800ff92:	4408      	add	r0, r1
 800ff94:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800ff98:	4471      	add	r1, lr
 800ff9a:	b200      	sxth	r0, r0
 800ff9c:	b209      	sxth	r1, r1
 800ff9e:	4288      	cmp	r0, r1
 800ffa0:	da06      	bge.n	800ffb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 800ffa2:	4586      	cmp	lr, r0
 800ffa4:	4672      	mov	r2, lr
 800ffa6:	bfb8      	it	lt
 800ffa8:	4602      	movlt	r2, r0
 800ffaa:	3301      	adds	r3, #1
 800ffac:	4666      	mov	r6, ip
 800ffae:	e7e2      	b.n	800ff76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 800ffb0:	d10b      	bne.n	800ffca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 800ffb2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800ffb6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800ffba:	458c      	cmp	ip, r1
 800ffbc:	bfb4      	ite	lt
 800ffbe:	469c      	movlt	ip, r3
 800ffc0:	46b4      	movge	ip, r6
 800ffc2:	4572      	cmp	r2, lr
 800ffc4:	bfb8      	it	lt
 800ffc6:	4672      	movlt	r2, lr
 800ffc8:	e7ef      	b.n	800ffaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800ffca:	428a      	cmp	r2, r1
 800ffcc:	46b4      	mov	ip, r6
 800ffce:	bfb8      	it	lt
 800ffd0:	460a      	movlt	r2, r1
 800ffd2:	e7ea      	b.n	800ffaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800ffd4:	24006bf4 	.word	0x24006bf4
 800ffd8:	24006c00 	.word	0x24006c00
 800ffdc:	24000064 	.word	0x24000064
 800ffe0:	24006bbc 	.word	0x24006bbc
 800ffe4:	24006bb2 	.word	0x24006bb2
 800ffe8:	24006bb0 	.word	0x24006bb0
 800ffec:	24006bba 	.word	0x24006bba
 800fff0:	24006bb4 	.word	0x24006bb4
 800fff4:	1961      	adds	r1, r4, r5
 800fff6:	ab07      	add	r3, sp, #28
 800fff8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800fffc:	6849      	ldr	r1, [r1, #4]
 800fffe:	c303      	stmia	r3!, {r0, r1}
 8010000:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010004:	a807      	add	r0, sp, #28
 8010006:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801000a:	2b13      	cmp	r3, #19
 801000c:	440b      	add	r3, r1
 801000e:	bfd8      	it	le
 8010010:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8010014:	1a9b      	subs	r3, r3, r2
 8010016:	f8ad 201c 	strh.w	r2, [sp, #28]
 801001a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801001e:	f7ff f885 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010022:	a807      	add	r0, sp, #28
 8010024:	f7fb fb9b 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010028:	2800      	cmp	r0, #0
 801002a:	d199      	bne.n	800ff60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801002c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010030:	4425      	add	r5, r4
 8010032:	f8d8 0000 	ldr.w	r0, [r8]
 8010036:	f1bc 0f14 	cmp.w	ip, #20
 801003a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801003e:	f8d0 e000 	ldr.w	lr, [r0]
 8010042:	bfa8      	it	ge
 8010044:	f04f 0c14 	movge.w	ip, #20
 8010048:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801004c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010050:	fa1f fc8c 	uxth.w	ip, ip
 8010054:	f8cd c000 	str.w	ip, [sp]
 8010058:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801005c:	47d0      	blx	sl
 801005e:	4682      	mov	sl, r0
 8010060:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010064:	a807      	add	r0, sp, #28
 8010066:	f7ff f847 	bl	800f0f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	4620      	mov	r0, r4
 801006e:	a907      	add	r1, sp, #28
 8010070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010072:	4798      	blx	r3
 8010074:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8010078:	eba0 000a 	sub.w	r0, r0, sl
 801007c:	b200      	sxth	r0, r0
 801007e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8010082:	2800      	cmp	r0, #0
 8010084:	f47f af6c 	bne.w	800ff60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8010088:	b2b1      	uxth	r1, r6
 801008a:	4648      	mov	r0, r9
 801008c:	f7ff fa9a 	bl	800f5c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010090:	e766      	b.n	800ff60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8010092:	d10c      	bne.n	80100ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8010094:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8010098:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801009c:	45b4      	cmp	ip, r6
 801009e:	bfb4      	ite	lt
 80100a0:	4684      	movlt	ip, r0
 80100a2:	46d4      	movge	ip, sl
 80100a4:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 80100a8:	4433      	add	r3, r6
 80100aa:	b21b      	sxth	r3, r3
 80100ac:	e750      	b.n	800ff50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 80100ae:	4575      	cmp	r5, lr
 80100b0:	46d4      	mov	ip, sl
 80100b2:	bfa8      	it	ge
 80100b4:	4675      	movge	r5, lr
 80100b6:	e74e      	b.n	800ff56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 80100b8:	eb0b 0006 	add.w	r0, fp, r6
 80100bc:	4426      	add	r6, r4
 80100be:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 80100c2:	f1b9 0f13 	cmp.w	r9, #19
 80100c6:	bfdc      	itt	le
 80100c8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 80100cc:	444d      	addle	r5, r9
 80100ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80100d2:	bfd8      	it	le
 80100d4:	b22d      	sxthle	r5, r5
 80100d6:	f7fb fb42 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 80100da:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80100de:	2800      	cmp	r0, #0
 80100e0:	f47f af16 	bne.w	800ff10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 80100e4:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80100e8:	fa1f f989 	uxth.w	r9, r9
 80100ec:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80100f0:	eba5 050c 	sub.w	r5, r5, ip
 80100f4:	fa1f f28c 	uxth.w	r2, ip
 80100f8:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 80100fc:	eb02 0009 	add.w	r0, r2, r9
 8010100:	2d14      	cmp	r5, #20
 8010102:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8010106:	bfa8      	it	ge
 8010108:	2514      	movge	r5, #20
 801010a:	b200      	sxth	r0, r0
 801010c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010110:	b289      	uxth	r1, r1
 8010112:	fa1f fe85 	uxth.w	lr, r5
 8010116:	eba0 000c 	sub.w	r0, r0, ip
 801011a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801011e:	4586      	cmp	lr, r0
 8010120:	f8d8 0000 	ldr.w	r0, [r8]
 8010124:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010128:	b29b      	uxth	r3, r3
 801012a:	bfb8      	it	lt
 801012c:	46f1      	movlt	r9, lr
 801012e:	6805      	ldr	r5, [r0, #0]
 8010130:	f8cd 9000 	str.w	r9, [sp]
 8010134:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8010138:	47a8      	blx	r5
 801013a:	6823      	ldr	r3, [r4, #0]
 801013c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010140:	a907      	add	r1, sp, #28
 8010142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010144:	4620      	mov	r0, r4
 8010146:	4798      	blx	r3
 8010148:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801014c:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8010150:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8010154:	1a5b      	subs	r3, r3, r1
 8010156:	440a      	add	r2, r1
 8010158:	b21b      	sxth	r3, r3
 801015a:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801015e:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8010162:	2b00      	cmp	r3, #0
 8010164:	f47f aecf 	bne.w	800ff06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8010168:	fa1f f18a 	uxth.w	r1, sl
 801016c:	4658      	mov	r0, fp
 801016e:	f7ff fa29 	bl	800f5c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010172:	e6c8      	b.n	800ff06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8010174:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010178:	42ab      	cmp	r3, r5
 801017a:	f67f aea0 	bls.w	800febe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801017e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8010182:	ab07      	add	r3, sp, #28
 8010184:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8010188:	6851      	ldr	r1, [r2, #4]
 801018a:	c303      	stmia	r3!, {r0, r1}
 801018c:	a807      	add	r0, sp, #28
 801018e:	f7fb fae6 	bl	800b75e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010192:	b920      	cbnz	r0, 801019e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8010194:	6823      	ldr	r3, [r4, #0]
 8010196:	a907      	add	r1, sp, #28
 8010198:	4620      	mov	r0, r4
 801019a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801019c:	4798      	blx	r3
 801019e:	3501      	adds	r5, #1
 80101a0:	b2ad      	uxth	r5, r5
 80101a2:	e7e7      	b.n	8010174 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

080101a4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80101a4:	4b03      	ldr	r3, [pc, #12]	; (80101b4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80101a6:	2200      	movs	r2, #0
 80101a8:	801a      	strh	r2, [r3, #0]
 80101aa:	805a      	strh	r2, [r3, #2]
 80101ac:	809a      	strh	r2, [r3, #4]
 80101ae:	80da      	strh	r2, [r3, #6]
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	24006c00 	.word	0x24006c00

080101b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101bc:	b09d      	sub	sp, #116	; 0x74
 80101be:	4606      	mov	r6, r0
 80101c0:	4614      	mov	r4, r2
 80101c2:	468a      	mov	sl, r1
 80101c4:	a803      	add	r0, sp, #12
 80101c6:	461d      	mov	r5, r3
 80101c8:	f000 fd8a 	bl	8010ce0 <_ZN8touchgfx12TextProviderC1Ev>
 80101cc:	6833      	ldr	r3, [r6, #0]
 80101ce:	4630      	mov	r0, r6
 80101d0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80101d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101d6:	4798      	blx	r3
 80101d8:	6833      	ldr	r3, [r6, #0]
 80101da:	4607      	mov	r7, r0
 80101dc:	4630      	mov	r0, r6
 80101de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101e0:	4798      	blx	r3
 80101e2:	462a      	mov	r2, r5
 80101e4:	2500      	movs	r5, #0
 80101e6:	4621      	mov	r1, r4
 80101e8:	9000      	str	r0, [sp, #0]
 80101ea:	463b      	mov	r3, r7
 80101ec:	462c      	mov	r4, r5
 80101ee:	46a9      	mov	r9, r5
 80101f0:	46a8      	mov	r8, r5
 80101f2:	a803      	add	r0, sp, #12
 80101f4:	f000 fdc7 	bl	8010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80101f8:	2300      	movs	r3, #0
 80101fa:	9302      	str	r3, [sp, #8]
 80101fc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010200:	429c      	cmp	r4, r3
 8010202:	d002      	beq.n	801020a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8010204:	455c      	cmp	r4, fp
 8010206:	bf18      	it	ne
 8010208:	4625      	movne	r5, r4
 801020a:	ab02      	add	r3, sp, #8
 801020c:	4632      	mov	r2, r6
 801020e:	4651      	mov	r1, sl
 8010210:	a803      	add	r0, sp, #12
 8010212:	f001 f8b9 	bl	8011388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010216:	4604      	mov	r4, r0
 8010218:	b108      	cbz	r0, 801021e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801021a:	280a      	cmp	r0, #10
 801021c:	d10a      	bne.n	8010234 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801021e:	45c1      	cmp	r9, r8
 8010220:	bf38      	it	cc
 8010222:	46c1      	movcc	r9, r8
 8010224:	f04f 0800 	mov.w	r8, #0
 8010228:	2c00      	cmp	r4, #0
 801022a:	d1e5      	bne.n	80101f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801022c:	4648      	mov	r0, r9
 801022e:	b01d      	add	sp, #116	; 0x74
 8010230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010234:	9a02      	ldr	r2, [sp, #8]
 8010236:	2a00      	cmp	r2, #0
 8010238:	d0de      	beq.n	80101f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801023a:	7b57      	ldrb	r7, [r2, #13]
 801023c:	4629      	mov	r1, r5
 801023e:	6833      	ldr	r3, [r6, #0]
 8010240:	007f      	lsls	r7, r7, #1
 8010242:	8894      	ldrh	r4, [r2, #4]
 8010244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010246:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801024a:	7a97      	ldrb	r7, [r2, #10]
 801024c:	4307      	orrs	r7, r0
 801024e:	4630      	mov	r0, r6
 8010250:	4798      	blx	r3
 8010252:	4438      	add	r0, r7
 8010254:	4480      	add	r8, r0
 8010256:	fa1f f888 	uxth.w	r8, r8
 801025a:	e7e5      	b.n	8010228 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801025c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801025c:	b508      	push	{r3, lr}
 801025e:	6803      	ldr	r3, [r0, #0]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	4798      	blx	r3
 8010264:	b128      	cbz	r0, 8010272 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8010266:	7b43      	ldrb	r3, [r0, #13]
 8010268:	7a80      	ldrb	r0, [r0, #10]
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010270:	4318      	orrs	r0, r3
 8010272:	bd08      	pop	{r3, pc}

08010274 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8010274:	b40e      	push	{r1, r2, r3}
 8010276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010278:	b09e      	sub	sp, #120	; 0x78
 801027a:	4605      	mov	r5, r0
 801027c:	ab23      	add	r3, sp, #140	; 0x8c
 801027e:	a805      	add	r0, sp, #20
 8010280:	f853 4b04 	ldr.w	r4, [r3], #4
 8010284:	9303      	str	r3, [sp, #12]
 8010286:	f000 fd2b 	bl	8010ce0 <_ZN8touchgfx12TextProviderC1Ev>
 801028a:	682b      	ldr	r3, [r5, #0]
 801028c:	4628      	mov	r0, r5
 801028e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010290:	4798      	blx	r3
 8010292:	682b      	ldr	r3, [r5, #0]
 8010294:	4606      	mov	r6, r0
 8010296:	4628      	mov	r0, r5
 8010298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801029a:	4798      	blx	r3
 801029c:	4633      	mov	r3, r6
 801029e:	4621      	mov	r1, r4
 80102a0:	ae1e      	add	r6, sp, #120	; 0x78
 80102a2:	2400      	movs	r4, #0
 80102a4:	9000      	str	r0, [sp, #0]
 80102a6:	9a03      	ldr	r2, [sp, #12]
 80102a8:	a805      	add	r0, sp, #20
 80102aa:	f000 fd6c 	bl	8010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80102ae:	f846 4d68 	str.w	r4, [r6, #-104]!
 80102b2:	462a      	mov	r2, r5
 80102b4:	4633      	mov	r3, r6
 80102b6:	4621      	mov	r1, r4
 80102b8:	a805      	add	r0, sp, #20
 80102ba:	f001 f865 	bl	8011388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80102be:	b300      	cbz	r0, 8010302 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80102c0:	280a      	cmp	r0, #10
 80102c2:	d01a      	beq.n	80102fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80102c4:	9f04      	ldr	r7, [sp, #16]
 80102c6:	b1c7      	cbz	r7, 80102fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80102c8:	7b78      	ldrb	r0, [r7, #13]
 80102ca:	7a3b      	ldrb	r3, [r7, #8]
 80102cc:	00c1      	lsls	r1, r0, #3
 80102ce:	88aa      	ldrh	r2, [r5, #4]
 80102d0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80102d4:	4319      	orrs	r1, r3
 80102d6:	0643      	lsls	r3, r0, #25
 80102d8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80102dc:	bf48      	it	mi
 80102de:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80102e2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80102e6:	bf48      	it	mi
 80102e8:	b219      	sxthmi	r1, r3
 80102ea:	79fb      	ldrb	r3, [r7, #7]
 80102ec:	4303      	orrs	r3, r0
 80102ee:	4413      	add	r3, r2
 80102f0:	1a5b      	subs	r3, r3, r1
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	42a3      	cmp	r3, r4
 80102f6:	bfc8      	it	gt
 80102f8:	b21c      	sxthgt	r4, r3
 80102fa:	4633      	mov	r3, r6
 80102fc:	462a      	mov	r2, r5
 80102fe:	2100      	movs	r1, #0
 8010300:	e7da      	b.n	80102b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8010302:	b2a0      	uxth	r0, r4
 8010304:	b01e      	add	sp, #120	; 0x78
 8010306:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801030a:	b003      	add	sp, #12
 801030c:	4770      	bx	lr

0801030e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801030e:	b40e      	push	{r1, r2, r3}
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	b09d      	sub	sp, #116	; 0x74
 8010314:	4604      	mov	r4, r0
 8010316:	ab21      	add	r3, sp, #132	; 0x84
 8010318:	a803      	add	r0, sp, #12
 801031a:	f853 5b04 	ldr.w	r5, [r3], #4
 801031e:	9302      	str	r3, [sp, #8]
 8010320:	f000 fcde 	bl	8010ce0 <_ZN8touchgfx12TextProviderC1Ev>
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	4620      	mov	r0, r4
 8010328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801032a:	4798      	blx	r3
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	4606      	mov	r6, r0
 8010330:	4620      	mov	r0, r4
 8010332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010334:	2401      	movs	r4, #1
 8010336:	4798      	blx	r3
 8010338:	4633      	mov	r3, r6
 801033a:	9000      	str	r0, [sp, #0]
 801033c:	4629      	mov	r1, r5
 801033e:	9a02      	ldr	r2, [sp, #8]
 8010340:	a803      	add	r0, sp, #12
 8010342:	f000 fd20 	bl	8010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010346:	a803      	add	r0, sp, #12
 8010348:	f001 f918 	bl	801157c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801034c:	b2a3      	uxth	r3, r4
 801034e:	b138      	cbz	r0, 8010360 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8010350:	280a      	cmp	r0, #10
 8010352:	a803      	add	r0, sp, #12
 8010354:	bf04      	itt	eq
 8010356:	3301      	addeq	r3, #1
 8010358:	b21c      	sxtheq	r4, r3
 801035a:	f001 f90f 	bl	801157c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801035e:	e7f5      	b.n	801034c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8010360:	4618      	mov	r0, r3
 8010362:	b01d      	add	sp, #116	; 0x74
 8010364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010368:	b003      	add	sp, #12
 801036a:	4770      	bx	lr

0801036c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801036c:	b40e      	push	{r1, r2, r3}
 801036e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010370:	b09e      	sub	sp, #120	; 0x78
 8010372:	4604      	mov	r4, r0
 8010374:	ab23      	add	r3, sp, #140	; 0x8c
 8010376:	a805      	add	r0, sp, #20
 8010378:	f853 5b04 	ldr.w	r5, [r3], #4
 801037c:	9303      	str	r3, [sp, #12]
 801037e:	f000 fcaf 	bl	8010ce0 <_ZN8touchgfx12TextProviderC1Ev>
 8010382:	6823      	ldr	r3, [r4, #0]
 8010384:	4620      	mov	r0, r4
 8010386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010388:	4798      	blx	r3
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	4606      	mov	r6, r0
 801038e:	4620      	mov	r0, r4
 8010390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010392:	4798      	blx	r3
 8010394:	4633      	mov	r3, r6
 8010396:	4629      	mov	r1, r5
 8010398:	9000      	str	r0, [sp, #0]
 801039a:	9a03      	ldr	r2, [sp, #12]
 801039c:	a805      	add	r0, sp, #20
 801039e:	f000 fcf2 	bl	8010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80103a2:	ad1e      	add	r5, sp, #120	; 0x78
 80103a4:	2100      	movs	r1, #0
 80103a6:	26ff      	movs	r6, #255	; 0xff
 80103a8:	4622      	mov	r2, r4
 80103aa:	a805      	add	r0, sp, #20
 80103ac:	f845 1d68 	str.w	r1, [r5, #-104]!
 80103b0:	462b      	mov	r3, r5
 80103b2:	f000 ffe9 	bl	8011388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80103b6:	b1d8      	cbz	r0, 80103f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80103b8:	280a      	cmp	r0, #10
 80103ba:	d012      	beq.n	80103e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80103bc:	9804      	ldr	r0, [sp, #16]
 80103be:	b180      	cbz	r0, 80103e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80103c0:	7b47      	ldrb	r7, [r0, #13]
 80103c2:	7922      	ldrb	r2, [r4, #4]
 80103c4:	00fb      	lsls	r3, r7, #3
 80103c6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80103ca:	7a03      	ldrb	r3, [r0, #8]
 80103cc:	430b      	orrs	r3, r1
 80103ce:	0679      	lsls	r1, r7, #25
 80103d0:	bf44      	itt	mi
 80103d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80103d6:	b21b      	sxthmi	r3, r3
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	429e      	cmp	r6, r3
 80103de:	bf28      	it	cs
 80103e0:	461e      	movcs	r6, r3
 80103e2:	462b      	mov	r3, r5
 80103e4:	4622      	mov	r2, r4
 80103e6:	2100      	movs	r1, #0
 80103e8:	a805      	add	r0, sp, #20
 80103ea:	f000 ffcd 	bl	8011388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80103ee:	e7e2      	b.n	80103b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80103f0:	4630      	mov	r0, r6
 80103f2:	b01e      	add	sp, #120	; 0x78
 80103f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80103f8:	b003      	add	sp, #12
 80103fa:	4770      	bx	lr

080103fc <_ZNK8touchgfx8Drawable10invalidateEv>:
 80103fc:	b513      	push	{r0, r1, r4, lr}
 80103fe:	6803      	ldr	r3, [r0, #0]
 8010400:	2400      	movs	r4, #0
 8010402:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010406:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801040a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801040e:	4669      	mov	r1, sp
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	9400      	str	r4, [sp, #0]
 8010414:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010418:	4798      	blx	r3
 801041a:	b002      	add	sp, #8
 801041c:	bd10      	pop	{r4, pc}

0801041e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801041e:	b538      	push	{r3, r4, r5, lr}
 8010420:	680b      	ldr	r3, [r1, #0]
 8010422:	460c      	mov	r4, r1
 8010424:	4605      	mov	r5, r0
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	4798      	blx	r3
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	4620      	mov	r0, r4
 801042e:	4629      	mov	r1, r5
 8010430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010432:	4798      	blx	r3
 8010434:	4628      	mov	r0, r5
 8010436:	bd38      	pop	{r3, r4, r5, pc}

08010438 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8010438:	b410      	push	{r4}
 801043a:	880a      	ldrh	r2, [r1, #0]
 801043c:	8884      	ldrh	r4, [r0, #4]
 801043e:	4422      	add	r2, r4
 8010440:	800a      	strh	r2, [r1, #0]
 8010442:	884a      	ldrh	r2, [r1, #2]
 8010444:	88c4      	ldrh	r4, [r0, #6]
 8010446:	4422      	add	r2, r4
 8010448:	804a      	strh	r2, [r1, #2]
 801044a:	6940      	ldr	r0, [r0, #20]
 801044c:	b120      	cbz	r0, 8010458 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801044e:	6803      	ldr	r3, [r0, #0]
 8010450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010456:	4718      	bx	r3
 8010458:	f85d 4b04 	ldr.w	r4, [sp], #4
 801045c:	4770      	bx	lr

0801045e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801045e:	b570      	push	{r4, r5, r6, lr}
 8010460:	8882      	ldrh	r2, [r0, #4]
 8010462:	460c      	mov	r4, r1
 8010464:	880b      	ldrh	r3, [r1, #0]
 8010466:	4605      	mov	r5, r0
 8010468:	4413      	add	r3, r2
 801046a:	800b      	strh	r3, [r1, #0]
 801046c:	884b      	ldrh	r3, [r1, #2]
 801046e:	88c2      	ldrh	r2, [r0, #6]
 8010470:	4413      	add	r3, r2
 8010472:	804b      	strh	r3, [r1, #2]
 8010474:	1d01      	adds	r1, r0, #4
 8010476:	4620      	mov	r0, r4
 8010478:	f7fb f92e 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 801047c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	dd0b      	ble.n	801049c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010484:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010488:	2b00      	cmp	r3, #0
 801048a:	dd07      	ble.n	801049c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801048c:	6968      	ldr	r0, [r5, #20]
 801048e:	b128      	cbz	r0, 801049c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010490:	6803      	ldr	r3, [r0, #0]
 8010492:	4621      	mov	r1, r4
 8010494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801049a:	4718      	bx	r3
 801049c:	bd70      	pop	{r4, r5, r6, pc}
	...

080104a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80104a0:	b570      	push	{r4, r5, r6, lr}
 80104a2:	8882      	ldrh	r2, [r0, #4]
 80104a4:	460c      	mov	r4, r1
 80104a6:	880b      	ldrh	r3, [r1, #0]
 80104a8:	4605      	mov	r5, r0
 80104aa:	4413      	add	r3, r2
 80104ac:	800b      	strh	r3, [r1, #0]
 80104ae:	884b      	ldrh	r3, [r1, #2]
 80104b0:	88c2      	ldrh	r2, [r0, #6]
 80104b2:	4413      	add	r3, r2
 80104b4:	804b      	strh	r3, [r1, #2]
 80104b6:	1d01      	adds	r1, r0, #4
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7fb f90d 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 80104be:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	dd15      	ble.n	80104f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80104c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	dd11      	ble.n	80104f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80104ce:	6968      	ldr	r0, [r5, #20]
 80104d0:	b128      	cbz	r0, 80104de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80104d2:	6803      	ldr	r3, [r0, #0]
 80104d4:	691b      	ldr	r3, [r3, #16]
 80104d6:	4621      	mov	r1, r4
 80104d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104dc:	4718      	bx	r3
 80104de:	4b05      	ldr	r3, [pc, #20]	; (80104f4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3304      	adds	r3, #4
 80104e4:	429d      	cmp	r5, r3
 80104e6:	d104      	bne.n	80104f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80104e8:	f7ff f806 	bl	800f4f8 <_ZN8touchgfx11Application11getInstanceEv>
 80104ec:	6803      	ldr	r3, [r0, #0]
 80104ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104f0:	e7f1      	b.n	80104d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 80104f2:	bd70      	pop	{r4, r5, r6, pc}
 80104f4:	24006bf8 	.word	0x24006bf8

080104f8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	4604      	mov	r4, r0
 80104fc:	4616      	mov	r6, r2
 80104fe:	460d      	mov	r5, r1
 8010500:	b901      	cbnz	r1, 8010504 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8010502:	b192      	cbz	r2, 801052a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8010504:	6823      	ldr	r3, [r4, #0]
 8010506:	4620      	mov	r0, r4
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	4798      	blx	r3
 801050c:	88e2      	ldrh	r2, [r4, #6]
 801050e:	88a1      	ldrh	r1, [r4, #4]
 8010510:	4620      	mov	r0, r4
 8010512:	4432      	add	r2, r6
 8010514:	4429      	add	r1, r5
 8010516:	b212      	sxth	r2, r2
 8010518:	b209      	sxth	r1, r1
 801051a:	f7f2 fb79 	bl	8002c10 <_ZN8touchgfx8Drawable5setXYEss>
 801051e:	6823      	ldr	r3, [r4, #0]
 8010520:	4620      	mov	r0, r4
 8010522:	695b      	ldr	r3, [r3, #20]
 8010524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010528:	4718      	bx	r3
 801052a:	bd70      	pop	{r4, r5, r6, pc}

0801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801052c:	b510      	push	{r4, lr}
 801052e:	2300      	movs	r3, #0
 8010530:	4604      	mov	r4, r0
 8010532:	4608      	mov	r0, r1
 8010534:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8010538:	8023      	strh	r3, [r4, #0]
 801053a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801053e:	8063      	strh	r3, [r4, #2]
 8010540:	6803      	ldr	r3, [r0, #0]
 8010542:	80a1      	strh	r1, [r4, #4]
 8010544:	4621      	mov	r1, r4
 8010546:	80e2      	strh	r2, [r4, #6]
 8010548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801054a:	4798      	blx	r3
 801054c:	4620      	mov	r0, r4
 801054e:	bd10      	pop	{r4, pc}

08010550 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8010550:	b530      	push	{r4, r5, lr}
 8010552:	8083      	strh	r3, [r0, #4]
 8010554:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010558:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801055c:	7183      	strb	r3, [r0, #6]
 801055e:	79c3      	ldrb	r3, [r0, #7]
 8010560:	6101      	str	r1, [r0, #16]
 8010562:	f365 0306 	bfi	r3, r5, #0, #7
 8010566:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801056a:	8282      	strh	r2, [r0, #20]
 801056c:	f365 13c7 	bfi	r3, r5, #7, #1
 8010570:	71c3      	strb	r3, [r0, #7]
 8010572:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8010576:	7203      	strb	r3, [r0, #8]
 8010578:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801057c:	7243      	strb	r3, [r0, #9]
 801057e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010582:	8143      	strh	r3, [r0, #10]
 8010584:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8010588:	8183      	strh	r3, [r0, #12]
 801058a:	4b01      	ldr	r3, [pc, #4]	; (8010590 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801058c:	6003      	str	r3, [r0, #0]
 801058e:	bd30      	pop	{r4, r5, pc}
 8010590:	0801e564 	.word	0x0801e564

08010594 <_ZNK8touchgfx9ConstFont4findEt>:
 8010594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010596:	6904      	ldr	r4, [r0, #16]
 8010598:	b3bc      	cbz	r4, 801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801059a:	88a3      	ldrh	r3, [r4, #4]
 801059c:	8a82      	ldrh	r2, [r0, #20]
 801059e:	1acb      	subs	r3, r1, r3
 80105a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80105a4:	d431      	bmi.n	801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105a6:	4293      	cmp	r3, r2
 80105a8:	dd0c      	ble.n	80105c4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80105aa:	230e      	movs	r3, #14
 80105ac:	fb03 4302 	mla	r3, r3, r2, r4
 80105b0:	889b      	ldrh	r3, [r3, #4]
 80105b2:	1a5b      	subs	r3, r3, r1
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	429a      	cmp	r2, r3
 80105b8:	db27      	blt.n	801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	bfbc      	itt	lt
 80105be:	2302      	movlt	r3, #2
 80105c0:	fb92 f3f3 	sdivlt	r3, r2, r3
 80105c4:	2500      	movs	r5, #0
 80105c6:	260e      	movs	r6, #14
 80105c8:	4295      	cmp	r5, r2
 80105ca:	dc1e      	bgt.n	801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105cc:	fb06 4003 	mla	r0, r6, r3, r4
 80105d0:	8887      	ldrh	r7, [r0, #4]
 80105d2:	42b9      	cmp	r1, r7
 80105d4:	d01a      	beq.n	801060c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80105d6:	d20d      	bcs.n	80105f4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80105d8:	1e5a      	subs	r2, r3, #1
 80105da:	4295      	cmp	r5, r2
 80105dc:	dc15      	bgt.n	801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105de:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80105e2:	1a5b      	subs	r3, r3, r1
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	429a      	cmp	r2, r3
 80105e8:	db0f      	blt.n	801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105ea:	429d      	cmp	r5, r3
 80105ec:	ddec      	ble.n	80105c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80105ee:	1953      	adds	r3, r2, r5
 80105f0:	105b      	asrs	r3, r3, #1
 80105f2:	e7e9      	b.n	80105c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80105f4:	1c5d      	adds	r5, r3, #1
 80105f6:	42aa      	cmp	r2, r5
 80105f8:	db07      	blt.n	801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80105fa:	8a43      	ldrh	r3, [r0, #18]
 80105fc:	1acb      	subs	r3, r1, r3
 80105fe:	442b      	add	r3, r5
 8010600:	429d      	cmp	r5, r3
 8010602:	dc02      	bgt.n	801060a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8010604:	429a      	cmp	r2, r3
 8010606:	dadf      	bge.n	80105c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8010608:	e7f1      	b.n	80105ee <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801060a:	2000      	movs	r0, #0
 801060c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801060e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801060e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010610:	4604      	mov	r4, r0
 8010612:	4617      	mov	r7, r2
 8010614:	461e      	mov	r6, r3
 8010616:	b911      	cbnz	r1, 801061e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8010618:	2500      	movs	r5, #0
 801061a:	4628      	mov	r0, r5
 801061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801061e:	290a      	cmp	r1, #10
 8010620:	d0fa      	beq.n	8010618 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010622:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8010626:	4291      	cmp	r1, r2
 8010628:	d0f6      	beq.n	8010618 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801062a:	f242 020b 	movw	r2, #8203	; 0x200b
 801062e:	4291      	cmp	r1, r2
 8010630:	d0f2      	beq.n	8010618 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010632:	f7ff ffaf 	bl	8010594 <_ZNK8touchgfx9ConstFont4findEt>
 8010636:	4605      	mov	r5, r0
 8010638:	b950      	cbnz	r0, 8010650 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801063a:	6823      	ldr	r3, [r4, #0]
 801063c:	4620      	mov	r0, r4
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	4798      	blx	r3
 8010642:	4601      	mov	r1, r0
 8010644:	4620      	mov	r0, r4
 8010646:	f7ff ffa5 	bl	8010594 <_ZNK8touchgfx9ConstFont4findEt>
 801064a:	4605      	mov	r5, r0
 801064c:	2800      	cmp	r0, #0
 801064e:	d0e3      	beq.n	8010618 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010650:	6823      	ldr	r3, [r4, #0]
 8010652:	4629      	mov	r1, r5
 8010654:	4620      	mov	r0, r4
 8010656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010658:	4798      	blx	r3
 801065a:	6038      	str	r0, [r7, #0]
 801065c:	6823      	ldr	r3, [r4, #0]
 801065e:	4620      	mov	r0, r4
 8010660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010662:	4798      	blx	r3
 8010664:	7030      	strb	r0, [r6, #0]
 8010666:	e7d8      	b.n	801061a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08010668 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	4605      	mov	r5, r0
 801066c:	f002 fa86 	bl	8012b7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010670:	4604      	mov	r4, r0
 8010672:	4628      	mov	r0, r5
 8010674:	f002 f9be 	bl	80129f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8010678:	2800      	cmp	r0, #0
 801067a:	bf14      	ite	ne
 801067c:	2002      	movne	r0, #2
 801067e:	2000      	moveq	r0, #0
 8010680:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8010684:	b280      	uxth	r0, r0
 8010686:	bd38      	pop	{r3, r4, r5, pc}

08010688 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8010688:	b538      	push	{r3, r4, r5, lr}
 801068a:	4605      	mov	r5, r0
 801068c:	f002 fa76 	bl	8012b7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010690:	4604      	mov	r4, r0
 8010692:	4628      	mov	r0, r5
 8010694:	f002 f9ae 	bl	80129f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8010698:	2800      	cmp	r0, #0
 801069a:	bf14      	ite	ne
 801069c:	2002      	movne	r0, #2
 801069e:	2000      	moveq	r0, #0
 80106a0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80106a4:	f040 0001 	orr.w	r0, r0, #1
 80106a8:	b280      	uxth	r0, r0
 80106aa:	bd38      	pop	{r3, r4, r5, pc}

080106ac <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80106ac:	2000      	movs	r0, #0
 80106ae:	4770      	bx	lr

080106b0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80106b0:	2001      	movs	r0, #1
 80106b2:	4770      	bx	lr

080106b4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80106b4:	2002      	movs	r0, #2
 80106b6:	4770      	bx	lr

080106b8 <_ZN8touchgfx6ScreenD1Ev>:
 80106b8:	4770      	bx	lr

080106ba <_ZN8touchgfx12GestureEventD1Ev>:
 80106ba:	4770      	bx	lr

080106bc <_ZN8touchgfx9DragEventD1Ev>:
 80106bc:	4770      	bx	lr

080106be <_ZN8touchgfx10ClickEventD1Ev>:
 80106be:	4770      	bx	lr

080106c0 <_ZN8touchgfx10ClickEventD0Ev>:
 80106c0:	b510      	push	{r4, lr}
 80106c2:	4604      	mov	r4, r0
 80106c4:	210c      	movs	r1, #12
 80106c6:	f00a fbc3 	bl	801ae50 <_ZdlPvj>
 80106ca:	4620      	mov	r0, r4
 80106cc:	bd10      	pop	{r4, pc}

080106ce <_ZN8touchgfx9DragEventD0Ev>:
 80106ce:	b510      	push	{r4, lr}
 80106d0:	4604      	mov	r4, r0
 80106d2:	2110      	movs	r1, #16
 80106d4:	f00a fbbc 	bl	801ae50 <_ZdlPvj>
 80106d8:	4620      	mov	r0, r4
 80106da:	bd10      	pop	{r4, pc}

080106dc <_ZN8touchgfx12GestureEventD0Ev>:
 80106dc:	b510      	push	{r4, lr}
 80106de:	4604      	mov	r4, r0
 80106e0:	210c      	movs	r1, #12
 80106e2:	f00a fbb5 	bl	801ae50 <_ZdlPvj>
 80106e6:	4620      	mov	r0, r4
 80106e8:	bd10      	pop	{r4, pc}

080106ea <_ZN8touchgfx6ScreenD0Ev>:
 80106ea:	b510      	push	{r4, lr}
 80106ec:	4604      	mov	r4, r0
 80106ee:	213c      	movs	r1, #60	; 0x3c
 80106f0:	f00a fbae 	bl	801ae50 <_ZdlPvj>
 80106f4:	4620      	mov	r0, r4
 80106f6:	bd10      	pop	{r4, pc}

080106f8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80106f8:	b530      	push	{r4, r5, lr}
 80106fa:	460d      	mov	r5, r1
 80106fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80106fe:	b087      	sub	sp, #28
 8010700:	4604      	mov	r4, r0
 8010702:	b301      	cbz	r1, 8010746 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8010704:	a801      	add	r0, sp, #4
 8010706:	f7ff ff11 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801070a:	892a      	ldrh	r2, [r5, #8]
 801070c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010710:	7928      	ldrb	r0, [r5, #4]
 8010712:	1ad2      	subs	r2, r2, r3
 8010714:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010716:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801071a:	441a      	add	r2, r3
 801071c:	896b      	ldrh	r3, [r5, #10]
 801071e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8010722:	f88d 0010 	strb.w	r0, [sp, #16]
 8010726:	1b5b      	subs	r3, r3, r5
 8010728:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801072a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801072c:	442b      	add	r3, r5
 801072e:	4d07      	ldr	r5, [pc, #28]	; (801074c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8010730:	f8ad 1012 	strh.w	r1, [sp, #18]
 8010734:	a903      	add	r1, sp, #12
 8010736:	9503      	str	r5, [sp, #12]
 8010738:	f8ad 2014 	strh.w	r2, [sp, #20]
 801073c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010740:	6803      	ldr	r3, [r0, #0]
 8010742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010744:	4798      	blx	r3
 8010746:	b007      	add	sp, #28
 8010748:	bd30      	pop	{r4, r5, pc}
 801074a:	bf00      	nop
 801074c:	0801e5e4 	.word	0x0801e5e4

08010750 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8010750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010754:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010756:	b08a      	sub	sp, #40	; 0x28
 8010758:	4604      	mov	r4, r0
 801075a:	460d      	mov	r5, r1
 801075c:	b113      	cbz	r3, 8010764 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801075e:	790b      	ldrb	r3, [r1, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d044      	beq.n	80107ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8010764:	f104 0804 	add.w	r8, r4, #4
 8010768:	a803      	add	r0, sp, #12
 801076a:	4641      	mov	r1, r8
 801076c:	f7ff fede 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010770:	792b      	ldrb	r3, [r5, #4]
 8010772:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8010776:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801077a:	b983      	cbnz	r3, 801079e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801077c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8010780:	892a      	ldrh	r2, [r5, #8]
 8010782:	88e9      	ldrh	r1, [r5, #6]
 8010784:	4640      	mov	r0, r8
 8010786:	1b92      	subs	r2, r2, r6
 8010788:	9301      	str	r3, [sp, #4]
 801078a:	1bc9      	subs	r1, r1, r7
 801078c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8010790:	b212      	sxth	r2, r2
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	b209      	sxth	r1, r1
 8010796:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801079a:	f7fa febb 	bl	800b514 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801079e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80107a0:	b329      	cbz	r1, 80107ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80107a2:	a805      	add	r0, sp, #20
 80107a4:	f7ff fec2 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80107a8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80107ac:	792b      	ldrb	r3, [r5, #4]
 80107ae:	a907      	add	r1, sp, #28
 80107b0:	1abf      	subs	r7, r7, r2
 80107b2:	88ea      	ldrh	r2, [r5, #6]
 80107b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80107b6:	4417      	add	r7, r2
 80107b8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80107ba:	f88d 3020 	strb.w	r3, [sp, #32]
 80107be:	4417      	add	r7, r2
 80107c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80107c4:	1ab6      	subs	r6, r6, r2
 80107c6:	892a      	ldrh	r2, [r5, #8]
 80107c8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80107cc:	4416      	add	r6, r2
 80107ce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80107d0:	4416      	add	r6, r2
 80107d2:	4a08      	ldr	r2, [pc, #32]	; (80107f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80107d4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80107d8:	2600      	movs	r6, #0
 80107da:	9207      	str	r2, [sp, #28]
 80107dc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80107e0:	6803      	ldr	r3, [r0, #0]
 80107e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107e4:	4798      	blx	r3
 80107e6:	792b      	ldrb	r3, [r5, #4]
 80107e8:	b10b      	cbz	r3, 80107ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80107ea:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80107ee:	b00a      	add	sp, #40	; 0x28
 80107f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f4:	0801e5bc 	.word	0x0801e5bc

080107f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80107f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107fc:	460c      	mov	r4, r1
 80107fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010800:	b088      	sub	sp, #32
 8010802:	4605      	mov	r5, r0
 8010804:	2900      	cmp	r1, #0
 8010806:	d06d      	beq.n	80108e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8010808:	4668      	mov	r0, sp
 801080a:	f7ff fe8f 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801080e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8010810:	88e3      	ldrh	r3, [r4, #6]
 8010812:	f9bd 8000 	ldrsh.w	r8, [sp]
 8010816:	440b      	add	r3, r1
 8010818:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801081c:	b21b      	sxth	r3, r3
 801081e:	4543      	cmp	r3, r8
 8010820:	db31      	blt.n	8010886 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010822:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8010826:	44c4      	add	ip, r8
 8010828:	fa0f fc8c 	sxth.w	ip, ip
 801082c:	4563      	cmp	r3, ip
 801082e:	da2a      	bge.n	8010886 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010830:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8010832:	8926      	ldrh	r6, [r4, #8]
 8010834:	4416      	add	r6, r2
 8010836:	b236      	sxth	r6, r6
 8010838:	42be      	cmp	r6, r7
 801083a:	db24      	blt.n	8010886 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801083c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010840:	4438      	add	r0, r7
 8010842:	b200      	sxth	r0, r0
 8010844:	4286      	cmp	r6, r0
 8010846:	da1e      	bge.n	8010886 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010848:	8963      	ldrh	r3, [r4, #10]
 801084a:	4419      	add	r1, r3
 801084c:	b209      	sxth	r1, r1
 801084e:	4541      	cmp	r1, r8
 8010850:	db08      	blt.n	8010864 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010852:	4561      	cmp	r1, ip
 8010854:	da06      	bge.n	8010864 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010856:	89a3      	ldrh	r3, [r4, #12]
 8010858:	441a      	add	r2, r3
 801085a:	b212      	sxth	r2, r2
 801085c:	42ba      	cmp	r2, r7
 801085e:	db01      	blt.n	8010864 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010860:	4282      	cmp	r2, r0
 8010862:	db10      	blt.n	8010886 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010864:	4b21      	ldr	r3, [pc, #132]	; (80108ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8010866:	a904      	add	r1, sp, #16
 8010868:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801086a:	9304      	str	r3, [sp, #16]
 801086c:	2302      	movs	r3, #2
 801086e:	f88d 3014 	strb.w	r3, [sp, #20]
 8010872:	2300      	movs	r3, #0
 8010874:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010878:	f8ad 3018 	strh.w	r3, [sp, #24]
 801087c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010880:	6803      	ldr	r3, [r0, #0]
 8010882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010884:	4798      	blx	r3
 8010886:	1d29      	adds	r1, r5, #4
 8010888:	a802      	add	r0, sp, #8
 801088a:	f7ff fe4f 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801088e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010892:	88e0      	ldrh	r0, [r4, #6]
 8010894:	eba3 0808 	sub.w	r8, r3, r8
 8010898:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801089c:	7921      	ldrb	r1, [r4, #4]
 801089e:	fa1f f888 	uxth.w	r8, r8
 80108a2:	1bdf      	subs	r7, r3, r7
 80108a4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80108a8:	b2bb      	uxth	r3, r7
 80108aa:	4440      	add	r0, r8
 80108ac:	8922      	ldrh	r2, [r4, #8]
 80108ae:	8967      	ldrh	r7, [r4, #10]
 80108b0:	4460      	add	r0, ip
 80108b2:	89a4      	ldrh	r4, [r4, #12]
 80108b4:	441a      	add	r2, r3
 80108b6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80108b8:	44b8      	add	r8, r7
 80108ba:	4423      	add	r3, r4
 80108bc:	f8ad 0016 	strh.w	r0, [sp, #22]
 80108c0:	4432      	add	r2, r6
 80108c2:	44e0      	add	r8, ip
 80108c4:	4433      	add	r3, r6
 80108c6:	4c0a      	ldr	r4, [pc, #40]	; (80108f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80108c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80108ca:	f88d 1014 	strb.w	r1, [sp, #20]
 80108ce:	a904      	add	r1, sp, #16
 80108d0:	9404      	str	r4, [sp, #16]
 80108d2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80108d6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80108da:	f8ad 301c 	strh.w	r3, [sp, #28]
 80108de:	6803      	ldr	r3, [r0, #0]
 80108e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108e2:	4798      	blx	r3
 80108e4:	b008      	add	sp, #32
 80108e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ea:	bf00      	nop
 80108ec:	0801e5bc 	.word	0x0801e5bc
 80108f0:	0801e5d0 	.word	0x0801e5d0

080108f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80108f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108f6:	4604      	mov	r4, r0
 80108f8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80108fc:	3201      	adds	r2, #1
 80108fe:	d112      	bne.n	8010926 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8010900:	2500      	movs	r5, #0
 8010902:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010906:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801090a:	6803      	ldr	r3, [r0, #0]
 801090c:	9500      	str	r5, [sp, #0]
 801090e:	466d      	mov	r5, sp
 8010910:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010914:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010918:	4629      	mov	r1, r5
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	4798      	blx	r3
 801091e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010922:	e884 0003 	stmia.w	r4, {r0, r1}
 8010926:	4620      	mov	r0, r4
 8010928:	b003      	add	sp, #12
 801092a:	bd30      	pop	{r4, r5, pc}

0801092c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801092c:	b513      	push	{r0, r1, r4, lr}
 801092e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8010932:	4604      	mov	r4, r0
 8010934:	3301      	adds	r3, #1
 8010936:	d109      	bne.n	801094c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8010938:	4601      	mov	r1, r0
 801093a:	4668      	mov	r0, sp
 801093c:	f7ff fdf6 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010940:	f8bd 3000 	ldrh.w	r3, [sp]
 8010944:	8423      	strh	r3, [r4, #32]
 8010946:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801094a:	8463      	strh	r3, [r4, #34]	; 0x22
 801094c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8010950:	b002      	add	sp, #8
 8010952:	bd10      	pop	{r4, pc}

08010954 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8010954:	b513      	push	{r0, r1, r4, lr}
 8010956:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801095a:	4604      	mov	r4, r0
 801095c:	3301      	adds	r3, #1
 801095e:	d109      	bne.n	8010974 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8010960:	4601      	mov	r1, r0
 8010962:	4668      	mov	r0, sp
 8010964:	f7ff fde2 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010968:	f8bd 3000 	ldrh.w	r3, [sp]
 801096c:	8423      	strh	r3, [r4, #32]
 801096e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010972:	8463      	strh	r3, [r4, #34]	; 0x22
 8010974:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8010978:	b002      	add	sp, #8
 801097a:	bd10      	pop	{r4, pc}

0801097c <_ZN8touchgfx6ScreenC1Ev>:
 801097c:	b570      	push	{r4, r5, r6, lr}
 801097e:	4b17      	ldr	r3, [pc, #92]	; (80109dc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8010980:	4605      	mov	r5, r0
 8010982:	4a17      	ldr	r2, [pc, #92]	; (80109e0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8010984:	2101      	movs	r1, #1
 8010986:	f845 3b04 	str.w	r3, [r5], #4
 801098a:	2300      	movs	r3, #0
 801098c:	6042      	str	r2, [r0, #4]
 801098e:	4604      	mov	r4, r0
 8010990:	8103      	strh	r3, [r0, #8]
 8010992:	8143      	strh	r3, [r0, #10]
 8010994:	8183      	strh	r3, [r0, #12]
 8010996:	81c3      	strh	r3, [r0, #14]
 8010998:	8203      	strh	r3, [r0, #16]
 801099a:	8243      	strh	r3, [r0, #18]
 801099c:	8283      	strh	r3, [r0, #20]
 801099e:	82c3      	strh	r3, [r0, #22]
 80109a0:	6203      	str	r3, [r0, #32]
 80109a2:	8483      	strh	r3, [r0, #36]	; 0x24
 80109a4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80109a6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80109aa:	6343      	str	r3, [r0, #52]	; 0x34
 80109ac:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80109b0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80109b4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80109b8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80109bc:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80109be:	4628      	mov	r0, r5
 80109c0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80109c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80109c6:	4a08      	ldr	r2, [pc, #32]	; (80109e8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80109c8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80109cc:	4798      	blx	r3
 80109ce:	6863      	ldr	r3, [r4, #4]
 80109d0:	4628      	mov	r0, r5
 80109d2:	4631      	mov	r1, r6
 80109d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109d6:	4798      	blx	r3
 80109d8:	4620      	mov	r0, r4
 80109da:	bd70      	pop	{r4, r5, r6, pc}
 80109dc:	0801e5f8 	.word	0x0801e5f8
 80109e0:	0801d460 	.word	0x0801d460
 80109e4:	24006bb2 	.word	0x24006bb2
 80109e8:	24006bb0 	.word	0x24006bb0

080109ec <_ZN8touchgfx6Screen4drawEv>:
 80109ec:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80109ee:	b507      	push	{r0, r1, r2, lr}
 80109f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80109f4:	2100      	movs	r1, #0
 80109f6:	4b08      	ldr	r3, [pc, #32]	; (8010a18 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80109f8:	9100      	str	r1, [sp, #0]
 80109fa:	4669      	mov	r1, sp
 80109fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a00:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010a04:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010a08:	6803      	ldr	r3, [r0, #0]
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	4798      	blx	r3
 8010a0e:	b003      	add	sp, #12
 8010a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a14:	24006bb0 	.word	0x24006bb0
 8010a18:	24006bb2 	.word	0x24006bb2

08010a1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8010a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a20:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010a24:	b089      	sub	sp, #36	; 0x24
 8010a26:	4680      	mov	r8, r0
 8010a28:	460c      	mov	r4, r1
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	4615      	mov	r5, r2
 8010a2e:	dd0e      	ble.n	8010a4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010a30:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	dd0a      	ble.n	8010a4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010a38:	4628      	mov	r0, r5
 8010a3a:	f7ff ff5b 	bl	80108f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010a3e:	4621      	mov	r1, r4
 8010a40:	f7fe fcd0 	bl	800f3e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010a44:	69eb      	ldr	r3, [r5, #28]
 8010a46:	b928      	cbnz	r0, 8010a54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8010a48:	461d      	mov	r5, r3
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1f4      	bne.n	8010a38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8010a4e:	b009      	add	sp, #36	; 0x24
 8010a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a54:	ae04      	add	r6, sp, #16
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f000 80b5 	beq.w	8010bc6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010a5c:	682b      	ldr	r3, [r5, #0]
 8010a5e:	4629      	mov	r1, r5
 8010a60:	a802      	add	r0, sp, #8
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	4798      	blx	r3
 8010a66:	4628      	mov	r0, r5
 8010a68:	f7ff ff60 	bl	801092c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010a6c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8010a70:	4407      	add	r7, r0
 8010a72:	4628      	mov	r0, r5
 8010a74:	f7ff ff6e 	bl	8010954 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010a78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010a7c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010a80:	b23f      	sxth	r7, r7
 8010a82:	4418      	add	r0, r3
 8010a84:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010a88:	4621      	mov	r1, r4
 8010a8a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010a8e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010a92:	4630      	mov	r0, r6
 8010a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a98:	f8ad 7010 	strh.w	r7, [sp, #16]
 8010a9c:	f7fa fe1c 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	f7ff ff27 	bl	80108f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010aa6:	ab06      	add	r3, sp, #24
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010aae:	e883 0003 	stmia.w	r3, {r0, r1}
 8010ab2:	4611      	mov	r1, r2
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fa fe0f 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 8010aba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010abe:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010ac2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8010ac6:	4299      	cmp	r1, r3
 8010ac8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8010acc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8010ad0:	d10b      	bne.n	8010aea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010ad2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010ad6:	4552      	cmp	r2, sl
 8010ad8:	d107      	bne.n	8010aea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010ada:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010ade:	455a      	cmp	r2, fp
 8010ae0:	d103      	bne.n	8010aea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8010ae2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010ae6:	454a      	cmp	r2, r9
 8010ae8:	d06d      	beq.n	8010bc6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010aea:	f1bb 0f00 	cmp.w	fp, #0
 8010aee:	dd65      	ble.n	8010bbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8010af0:	f1b9 0f00 	cmp.w	r9, #0
 8010af4:	dd62      	ble.n	8010bbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8010af6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010afa:	fa1f f08a 	uxth.w	r0, sl
 8010afe:	4552      	cmp	r2, sl
 8010b00:	9000      	str	r0, [sp, #0]
 8010b02:	da12      	bge.n	8010b2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	9b00      	ldr	r3, [sp, #0]
 8010b08:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010b0c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010b10:	1a9a      	subs	r2, r3, r2
 8010b12:	f8ad 1010 	strh.w	r1, [sp, #16]
 8010b16:	4631      	mov	r1, r6
 8010b18:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010b1c:	4640      	mov	r0, r8
 8010b1e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8010b22:	69ea      	ldr	r2, [r5, #28]
 8010b24:	f7ff ff7a 	bl	8010a1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010b28:	9b01      	ldr	r3, [sp, #4]
 8010b2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010b2e:	b29f      	uxth	r7, r3
 8010b30:	429a      	cmp	r2, r3
 8010b32:	da0d      	bge.n	8010b50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8010b34:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010b38:	1aba      	subs	r2, r7, r2
 8010b3a:	f8ad a012 	strh.w	sl, [sp, #18]
 8010b3e:	4631      	mov	r1, r6
 8010b40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010b44:	4640      	mov	r0, r8
 8010b46:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010b4a:	69ea      	ldr	r2, [r5, #28]
 8010b4c:	f7ff ff66 	bl	8010a1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010b50:	8822      	ldrh	r2, [r4, #0]
 8010b52:	445f      	add	r7, fp
 8010b54:	88a3      	ldrh	r3, [r4, #4]
 8010b56:	b2bf      	uxth	r7, r7
 8010b58:	4413      	add	r3, r2
 8010b5a:	b23a      	sxth	r2, r7
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	b219      	sxth	r1, r3
 8010b60:	4291      	cmp	r1, r2
 8010b62:	dd0d      	ble.n	8010b80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8010b64:	1bdb      	subs	r3, r3, r7
 8010b66:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010b6a:	f8ad a012 	strh.w	sl, [sp, #18]
 8010b6e:	4631      	mov	r1, r6
 8010b70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010b74:	4640      	mov	r0, r8
 8010b76:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010b7a:	69ea      	ldr	r2, [r5, #28]
 8010b7c:	f7ff ff4e 	bl	8010a1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010b80:	88e2      	ldrh	r2, [r4, #6]
 8010b82:	8863      	ldrh	r3, [r4, #2]
 8010b84:	4413      	add	r3, r2
 8010b86:	9a00      	ldr	r2, [sp, #0]
 8010b88:	444a      	add	r2, r9
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	fa1f f982 	uxth.w	r9, r2
 8010b90:	b219      	sxth	r1, r3
 8010b92:	fa0f f289 	sxth.w	r2, r9
 8010b96:	428a      	cmp	r2, r1
 8010b98:	da15      	bge.n	8010bc6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8010b9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010b9e:	eba3 0309 	sub.w	r3, r3, r9
 8010ba2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010ba6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010baa:	4631      	mov	r1, r6
 8010bac:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010bb0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010bb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010bb8:	69ea      	ldr	r2, [r5, #28]
 8010bba:	e001      	b.n	8010bc0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8010bbc:	69ea      	ldr	r2, [r5, #28]
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	4640      	mov	r0, r8
 8010bc2:	f7ff ff2b 	bl	8010a1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f7ff fe94 	bl	80108f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010bcc:	6861      	ldr	r1, [r4, #4]
 8010bce:	4602      	mov	r2, r0
 8010bd0:	4633      	mov	r3, r6
 8010bd2:	6820      	ldr	r0, [r4, #0]
 8010bd4:	c303      	stmia	r3!, {r0, r1}
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f7fa fd7d 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 8010bde:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f77f af33 	ble.w	8010a4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010be8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f77f af2e 	ble.w	8010a4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f7ff fe9a 	bl	801092c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010bf8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010bfc:	1a18      	subs	r0, r3, r0
 8010bfe:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010c02:	4628      	mov	r0, r5
 8010c04:	f7ff fea6 	bl	8010954 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010c08:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010c0c:	4631      	mov	r1, r6
 8010c0e:	1a18      	subs	r0, r3, r0
 8010c10:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010c14:	4628      	mov	r0, r5
 8010c16:	682b      	ldr	r3, [r5, #0]
 8010c18:	689b      	ldr	r3, [r3, #8]
 8010c1a:	4798      	blx	r3
 8010c1c:	e717      	b.n	8010a4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08010c1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8010c1e:	b570      	push	{r4, r5, r6, lr}
 8010c20:	1d06      	adds	r6, r0, #4
 8010c22:	b086      	sub	sp, #24
 8010c24:	460c      	mov	r4, r1
 8010c26:	2300      	movs	r3, #0
 8010c28:	4631      	mov	r1, r6
 8010c2a:	4605      	mov	r5, r0
 8010c2c:	a802      	add	r0, sp, #8
 8010c2e:	9301      	str	r3, [sp, #4]
 8010c30:	f7ff fc7c 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010c34:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010c38:	8822      	ldrh	r2, [r4, #0]
 8010c3a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8010c3e:	1ad2      	subs	r2, r2, r3
 8010c40:	8863      	ldrh	r3, [r4, #2]
 8010c42:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010c46:	1a5b      	subs	r3, r3, r1
 8010c48:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8010c4c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010c50:	aa01      	add	r2, sp, #4
 8010c52:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010c56:	4630      	mov	r0, r6
 8010c58:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010c5c:	a904      	add	r1, sp, #16
 8010c5e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010c62:	f7fa fe11 	bl	800b888 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8010c66:	9a01      	ldr	r2, [sp, #4]
 8010c68:	b11a      	cbz	r2, 8010c72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8010c6a:	4621      	mov	r1, r4
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	f7ff fed5 	bl	8010a1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010c72:	b006      	add	sp, #24
 8010c74:	bd70      	pop	{r4, r5, r6, pc}

08010c76 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010c76:	4602      	mov	r2, r0
 8010c78:	b530      	push	{r4, r5, lr}
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	b085      	sub	sp, #20
 8010c7e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8010c82:	460d      	mov	r5, r1
 8010c84:	466b      	mov	r3, sp
 8010c86:	6851      	ldr	r1, [r2, #4]
 8010c88:	c303      	stmia	r3!, {r0, r1}
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	4668      	mov	r0, sp
 8010c8e:	f7fa fd23 	bl	800b6d8 <_ZN8touchgfx4RectaNERKS0_>
 8010c92:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010c96:	b12b      	cbz	r3, 8010ca4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8010c98:	4669      	mov	r1, sp
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f7ff ffbf 	bl	8010c1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8010ca0:	b005      	add	sp, #20
 8010ca2:	bd30      	pop	{r4, r5, pc}
 8010ca4:	3404      	adds	r4, #4
 8010ca6:	a802      	add	r0, sp, #8
 8010ca8:	4621      	mov	r1, r4
 8010caa:	f7ff fc3f 	bl	801052c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010cae:	f8bd 3000 	ldrh.w	r3, [sp]
 8010cb2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010cb6:	4669      	mov	r1, sp
 8010cb8:	4620      	mov	r0, r4
 8010cba:	1a9b      	subs	r3, r3, r2
 8010cbc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010cc0:	f8ad 3000 	strh.w	r3, [sp]
 8010cc4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010cc8:	1a9b      	subs	r3, r3, r2
 8010cca:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010cce:	f7fa fda2 	bl	800b816 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8010cd2:	e7e5      	b.n	8010ca0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08010cd4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	680a      	ldr	r2, [r1, #0]
 8010cd8:	1d01      	adds	r1, r0, #4
 8010cda:	6992      	ldr	r2, [r2, #24]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	4710      	bx	r2

08010ce0 <_ZN8touchgfx12TextProviderC1Ev>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	2500      	movs	r5, #0
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	220e      	movs	r2, #14
 8010cea:	7403      	strb	r3, [r0, #16]
 8010cec:	4629      	mov	r1, r5
 8010cee:	6145      	str	r5, [r0, #20]
 8010cf0:	7605      	strb	r5, [r0, #24]
 8010cf2:	83c5      	strh	r5, [r0, #30]
 8010cf4:	8405      	strh	r5, [r0, #32]
 8010cf6:	86c5      	strh	r5, [r0, #54]	; 0x36
 8010cf8:	8705      	strh	r5, [r0, #56]	; 0x38
 8010cfa:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8010cfc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8010d00:	e9c0 5500 	strd	r5, r5, [r0]
 8010d04:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8010d08:	304c      	adds	r0, #76	; 0x4c
 8010d0a:	f00a fa43 	bl	801b194 <memset>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	4620      	mov	r0, r4
 8010d12:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8010d16:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8010d1a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8010d1e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8010d22:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8010d26:	f7f2 fdbb 	bl	80038a0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	bd38      	pop	{r3, r4, r5, pc}

08010d2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010d2e:	b530      	push	{r4, r5, lr}
 8010d30:	2500      	movs	r5, #0
 8010d32:	2401      	movs	r4, #1
 8010d34:	6843      	ldr	r3, [r0, #4]
 8010d36:	b913      	cbnz	r3, 8010d3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8010d38:	6803      	ldr	r3, [r0, #0]
 8010d3a:	b313      	cbz	r3, 8010d82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010d3c:	6043      	str	r3, [r0, #4]
 8010d3e:	7e03      	ldrb	r3, [r0, #24]
 8010d40:	b143      	cbz	r3, 8010d54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8010d42:	6943      	ldr	r3, [r0, #20]
 8010d44:	b12b      	cbz	r3, 8010d52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010d46:	881a      	ldrh	r2, [r3, #0]
 8010d48:	b11a      	cbz	r2, 8010d52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010d4a:	1c9a      	adds	r2, r3, #2
 8010d4c:	6142      	str	r2, [r0, #20]
 8010d4e:	8818      	ldrh	r0, [r3, #0]
 8010d50:	bd30      	pop	{r4, r5, pc}
 8010d52:	7605      	strb	r5, [r0, #24]
 8010d54:	6843      	ldr	r3, [r0, #4]
 8010d56:	8819      	ldrh	r1, [r3, #0]
 8010d58:	b199      	cbz	r1, 8010d82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010d5a:	1c9a      	adds	r2, r3, #2
 8010d5c:	2902      	cmp	r1, #2
 8010d5e:	6042      	str	r2, [r0, #4]
 8010d60:	d1f5      	bne.n	8010d4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8010d62:	7c03      	ldrb	r3, [r0, #16]
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	d8e5      	bhi.n	8010d34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010d68:	1c5a      	adds	r2, r3, #1
 8010d6a:	3302      	adds	r3, #2
 8010d6c:	7402      	strb	r2, [r0, #16]
 8010d6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010d72:	6143      	str	r3, [r0, #20]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d0dd      	beq.n	8010d34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d0da      	beq.n	8010d34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010d7e:	7604      	strb	r4, [r0, #24]
 8010d80:	e7d8      	b.n	8010d34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010d82:	2000      	movs	r0, #0
 8010d84:	e7e4      	b.n	8010d50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08010d86 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8010d86:	b430      	push	{r4, r5}
 8010d88:	6815      	ldr	r5, [r2, #0]
 8010d8a:	6085      	str	r5, [r0, #8]
 8010d8c:	6852      	ldr	r2, [r2, #4]
 8010d8e:	6443      	str	r3, [r0, #68]	; 0x44
 8010d90:	60c2      	str	r2, [r0, #12]
 8010d92:	2200      	movs	r2, #0
 8010d94:	9b02      	ldr	r3, [sp, #8]
 8010d96:	7402      	strb	r2, [r0, #16]
 8010d98:	6001      	str	r1, [r0, #0]
 8010d9a:	6483      	str	r3, [r0, #72]	; 0x48
 8010d9c:	6042      	str	r2, [r0, #4]
 8010d9e:	6142      	str	r2, [r0, #20]
 8010da0:	7602      	strb	r2, [r0, #24]
 8010da2:	8702      	strh	r2, [r0, #56]	; 0x38
 8010da4:	8402      	strh	r2, [r0, #32]
 8010da6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8010daa:	bc30      	pop	{r4, r5}
 8010dac:	f7f2 bd78 	b.w	80038a0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08010db0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010db2:	4605      	mov	r5, r0
 8010db4:	4608      	mov	r0, r1
 8010db6:	b1f1      	cbz	r1, 8010df6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8010db8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	f101 0708 	add.w	r7, r1, #8
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	6818      	ldr	r0, [r3, #0]
 8010dc6:	3308      	adds	r3, #8
 8010dc8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010dcc:	4626      	mov	r6, r4
 8010dce:	42bb      	cmp	r3, r7
 8010dd0:	c603      	stmia	r6!, {r0, r1}
 8010dd2:	4634      	mov	r4, r6
 8010dd4:	d1f6      	bne.n	8010dc4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8010dd6:	6818      	ldr	r0, [r3, #0]
 8010dd8:	6030      	str	r0, [r6, #0]
 8010dda:	4610      	mov	r0, r2
 8010ddc:	889b      	ldrh	r3, [r3, #4]
 8010dde:	80b3      	strh	r3, [r6, #4]
 8010de0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8010de4:	015b      	lsls	r3, r3, #5
 8010de6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010dea:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8010dee:	430b      	orrs	r3, r1
 8010df0:	425b      	negs	r3, r3
 8010df2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8010df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010df8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010df8:	b538      	push	{r3, r4, r5, lr}
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	6811      	ldr	r1, [r2, #0]
 8010dfe:	4610      	mov	r0, r2
 8010e00:	68cd      	ldr	r5, [r1, #12]
 8010e02:	4619      	mov	r1, r3
 8010e04:	47a8      	blx	r5
 8010e06:	2800      	cmp	r0, #0
 8010e08:	bf08      	it	eq
 8010e0a:	4620      	moveq	r0, r4
 8010e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010e10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8010e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e12:	4604      	mov	r4, r0
 8010e14:	4615      	mov	r5, r2
 8010e16:	4608      	mov	r0, r1
 8010e18:	b93a      	cbnz	r2, 8010e2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8010e1a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8010e1e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8010e22:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8010e26:	4628      	mov	r0, r5
 8010e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e2a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8010e2e:	8893      	ldrh	r3, [r2, #4]
 8010e30:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8010e34:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8010e38:	79ee      	ldrb	r6, [r5, #7]
 8010e3a:	4316      	orrs	r6, r2
 8010e3c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8010e40:	189a      	adds	r2, r3, r2
 8010e42:	b2b7      	uxth	r7, r6
 8010e44:	b291      	uxth	r1, r2
 8010e46:	291d      	cmp	r1, #29
 8010e48:	f200 8084 	bhi.w	8010f54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	10f6      	asrs	r6, r6, #3
 8010e50:	408a      	lsls	r2, r1
 8010e52:	4978      	ldr	r1, [pc, #480]	; (8011034 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8010e54:	420a      	tst	r2, r1
 8010e56:	d12e      	bne.n	8010eb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8010e58:	f412 7f60 	tst.w	r2, #896	; 0x380
 8010e5c:	d07a      	beq.n	8010f54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010e5e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8010e62:	462b      	mov	r3, r5
 8010e64:	f105 0e08 	add.w	lr, r5, #8
 8010e68:	4615      	mov	r5, r2
 8010e6a:	6818      	ldr	r0, [r3, #0]
 8010e6c:	3308      	adds	r3, #8
 8010e6e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8010e72:	4694      	mov	ip, r2
 8010e74:	4573      	cmp	r3, lr
 8010e76:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010e7a:	4662      	mov	r2, ip
 8010e7c:	d1f5      	bne.n	8010e6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8010e7e:	6818      	ldr	r0, [r3, #0]
 8010e80:	f8cc 0000 	str.w	r0, [ip]
 8010e84:	889b      	ldrh	r3, [r3, #4]
 8010e86:	f8ac 3004 	strh.w	r3, [ip, #4]
 8010e8a:	b2b3      	uxth	r3, r6
 8010e8c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010e90:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8010e94:	1aca      	subs	r2, r1, r3
 8010e96:	1bcf      	subs	r7, r1, r7
 8010e98:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8010e9c:	b292      	uxth	r2, r2
 8010e9e:	1afb      	subs	r3, r7, r3
 8010ea0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8010ea4:	10d2      	asrs	r2, r2, #3
 8010ea6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8010eaa:	4302      	orrs	r2, r0
 8010eac:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8010eb0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8010eb4:	e7b7      	b.n	8010e26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010eb6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010eb8:	b92b      	cbnz	r3, 8010ec6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8010eba:	4b5f      	ldr	r3, [pc, #380]	; (8011038 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8010ebc:	21c0      	movs	r1, #192	; 0xc0
 8010ebe:	4a5f      	ldr	r2, [pc, #380]	; (801103c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8010ec0:	485f      	ldr	r0, [pc, #380]	; (8011040 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8010ec2:	f00a f8db 	bl	801b07c <__assert_func>
 8010ec6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010ec8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010ecc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8010ece:	f640 6333 	movw	r3, #3635	; 0xe33
 8010ed2:	4299      	cmp	r1, r3
 8010ed4:	d110      	bne.n	8010ef8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8010ed6:	6803      	ldr	r3, [r0, #0]
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	4798      	blx	r3
 8010edc:	7b41      	ldrb	r1, [r0, #13]
 8010ede:	00cb      	lsls	r3, r1, #3
 8010ee0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010ee4:	7a03      	ldrb	r3, [r0, #8]
 8010ee6:	0648      	lsls	r0, r1, #25
 8010ee8:	ea43 0302 	orr.w	r3, r3, r2
 8010eec:	bf44      	itt	mi
 8010eee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010ef2:	b21b      	sxthmi	r3, r3
 8010ef4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010ef8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010efc:	462a      	mov	r2, r5
 8010efe:	f105 0c08 	add.w	ip, r5, #8
 8010f02:	443b      	add	r3, r7
 8010f04:	4433      	add	r3, r6
 8010f06:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4635      	mov	r5, r6
 8010f0e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010f12:	6810      	ldr	r0, [r2, #0]
 8010f14:	3208      	adds	r2, #8
 8010f16:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010f1a:	4637      	mov	r7, r6
 8010f1c:	4562      	cmp	r2, ip
 8010f1e:	c703      	stmia	r7!, {r0, r1}
 8010f20:	463e      	mov	r6, r7
 8010f22:	d1f6      	bne.n	8010f12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8010f24:	6810      	ldr	r0, [r2, #0]
 8010f26:	6038      	str	r0, [r7, #0]
 8010f28:	8892      	ldrh	r2, [r2, #4]
 8010f2a:	80ba      	strh	r2, [r7, #4]
 8010f2c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010f30:	10db      	asrs	r3, r3, #3
 8010f32:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8010f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8010f44:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8010f48:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8010f4c:	1a9b      	subs	r3, r3, r2
 8010f4e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8010f52:	e768      	b.n	8010e26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010f54:	f023 0204 	bic.w	r2, r3, #4
 8010f58:	f640 611b 	movw	r1, #3611	; 0xe1b
 8010f5c:	428a      	cmp	r2, r1
 8010f5e:	d003      	beq.n	8010f68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8010f60:	f640 621d 	movw	r2, #3613	; 0xe1d
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d120      	bne.n	8010faa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	4629      	mov	r1, r5
 8010f6e:	4620      	mov	r0, r4
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	f7ff ff41 	bl	8010df8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010f76:	7b41      	ldrb	r1, [r0, #13]
 8010f78:	00cb      	lsls	r3, r1, #3
 8010f7a:	0649      	lsls	r1, r1, #25
 8010f7c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010f80:	7a03      	ldrb	r3, [r0, #8]
 8010f82:	ea43 0302 	orr.w	r3, r3, r2
 8010f86:	bf44      	itt	mi
 8010f88:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010f8c:	b21b      	sxthmi	r3, r3
 8010f8e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010f92:	7b6b      	ldrb	r3, [r5, #13]
 8010f94:	7aaa      	ldrb	r2, [r5, #10]
 8010f96:	005b      	lsls	r3, r3, #1
 8010f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	115a      	asrs	r2, r3, #5
 8010fa0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8010fa4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8010fa8:	e035      	b.n	8011016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8010faa:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8010fae:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8010fb2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8010fb6:	7a2a      	ldrb	r2, [r5, #8]
 8010fb8:	ea42 0201 	orr.w	r2, r2, r1
 8010fbc:	f640 6109 	movw	r1, #3593	; 0xe09
 8010fc0:	bf1c      	itt	ne
 8010fc2:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8010fc6:	b212      	sxthne	r2, r2
 8010fc8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8010fcc:	f023 0210 	bic.w	r2, r3, #16
 8010fd0:	428a      	cmp	r2, r1
 8010fd2:	d003      	beq.n	8010fdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8010fd4:	f640 6213 	movw	r2, #3603	; 0xe13
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d129      	bne.n	8011030 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8010fdc:	7b6e      	ldrb	r6, [r5, #13]
 8010fde:	4629      	mov	r1, r5
 8010fe0:	0076      	lsls	r6, r6, #1
 8010fe2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8010fe6:	7aae      	ldrb	r6, [r5, #10]
 8010fe8:	4316      	orrs	r6, r2
 8010fea:	f640 6213 	movw	r2, #3603	; 0xe13
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	bf16      	itet	ne
 8010ff6:	f103 33ff 	addne.w	r3, r3, #4294967295
 8010ffa:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8010ffe:	b29b      	uxthne	r3, r3
 8011000:	f7ff fefa 	bl	8010df8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011004:	7b43      	ldrb	r3, [r0, #13]
 8011006:	7a82      	ldrb	r2, [r0, #10]
 8011008:	005b      	lsls	r3, r3, #1
 801100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801100e:	4313      	orrs	r3, r2
 8011010:	1af6      	subs	r6, r6, r3
 8011012:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8011016:	7b69      	ldrb	r1, [r5, #13]
 8011018:	00cb      	lsls	r3, r1, #3
 801101a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801101e:	7a2b      	ldrb	r3, [r5, #8]
 8011020:	4313      	orrs	r3, r2
 8011022:	064a      	lsls	r2, r1, #25
 8011024:	bf44      	itt	mi
 8011026:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801102a:	b21b      	sxthmi	r3, r3
 801102c:	1bdb      	subs	r3, r3, r7
 801102e:	e73f      	b.n	8010eb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8011030:	2300      	movs	r3, #0
 8011032:	e7b7      	b.n	8010fa4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8011034:	3fc00079 	.word	0x3fc00079
 8011038:	0801ceac 	.word	0x0801ceac
 801103c:	0801e853 	.word	0x0801e853
 8011040:	0801cf7e 	.word	0x0801cf7e

08011044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8011044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011048:	4604      	mov	r4, r0
 801104a:	b942      	cbnz	r2, 801105e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801104c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011050:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8011054:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011058:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801105c:	e046      	b.n	80110ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801105e:	7b51      	ldrb	r1, [r2, #13]
 8011060:	8893      	ldrh	r3, [r2, #4]
 8011062:	010f      	lsls	r7, r1, #4
 8011064:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8011068:	79d7      	ldrb	r7, [r2, #7]
 801106a:	4307      	orrs	r7, r0
 801106c:	2f04      	cmp	r7, #4
 801106e:	b2bd      	uxth	r5, r7
 8011070:	bfcc      	ite	gt
 8011072:	08bf      	lsrgt	r7, r7, #2
 8011074:	2701      	movle	r7, #1
 8011076:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801107a:	f200 80ab 	bhi.w	80111d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801107e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8011082:	4283      	cmp	r3, r0
 8011084:	d216      	bcs.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011086:	f240 605b 	movw	r0, #1627	; 0x65b
 801108a:	4283      	cmp	r3, r0
 801108c:	d859      	bhi.n	8011142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801108e:	f240 6057 	movw	r0, #1623	; 0x657
 8011092:	4283      	cmp	r3, r0
 8011094:	d20e      	bcs.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011096:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801109a:	d24a      	bcs.n	8011132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801109c:	f240 604e 	movw	r0, #1614	; 0x64e
 80110a0:	4283      	cmp	r3, r0
 80110a2:	d207      	bcs.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80110a4:	f240 601a 	movw	r0, #1562	; 0x61a
 80110a8:	4283      	cmp	r3, r0
 80110aa:	d02a      	beq.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80110ac:	d821      	bhi.n	80110f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80110ae:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80110b2:	d35b      	bcc.n	801116c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80110b4:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80110b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80110bc:	f040 80d0 	bne.w	8011260 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80110c0:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80110c4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80110c8:	f040 80ca 	bne.w	8011260 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80110cc:	00cb      	lsls	r3, r1, #3
 80110ce:	0649      	lsls	r1, r1, #25
 80110d0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80110d4:	7a13      	ldrb	r3, [r2, #8]
 80110d6:	ea43 0300 	orr.w	r3, r3, r0
 80110da:	bf44      	itt	mi
 80110dc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80110e0:	b21b      	sxthmi	r3, r3
 80110e2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80110e6:	1b5d      	subs	r5, r3, r5
 80110e8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80110ec:	4610      	mov	r0, r2
 80110ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110f2:	f240 604b 	movw	r0, #1611	; 0x64b
 80110f6:	4283      	cmp	r3, r0
 80110f8:	d338      	bcc.n	801116c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80110fa:	f240 604c 	movw	r0, #1612	; 0x64c
 80110fe:	4283      	cmp	r3, r0
 8011100:	d9d8      	bls.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011102:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8011106:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801110a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801110e:	f040 80f2 	bne.w	80112f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8011112:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011116:	f040 80ee 	bne.w	80112f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801111a:	00cb      	lsls	r3, r1, #3
 801111c:	064e      	lsls	r6, r1, #25
 801111e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011122:	7a13      	ldrb	r3, [r2, #8]
 8011124:	ea43 0300 	orr.w	r3, r3, r0
 8011128:	bf44      	itt	mi
 801112a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801112e:	b21b      	sxthmi	r3, r3
 8011130:	e7d9      	b.n	80110e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8011132:	f240 6054 	movw	r0, #1620	; 0x654
 8011136:	4283      	cmp	r3, r0
 8011138:	d8e3      	bhi.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801113a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801113e:	d9e0      	bls.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011140:	e7b8      	b.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011142:	f240 6074 	movw	r0, #1652	; 0x674
 8011146:	4283      	cmp	r3, r0
 8011148:	d0b4      	beq.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801114a:	d82d      	bhi.n	80111a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801114c:	f240 605e 	movw	r0, #1630	; 0x65e
 8011150:	4283      	cmp	r3, r0
 8011152:	d804      	bhi.n	801115e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8011154:	f240 605d 	movw	r0, #1629	; 0x65d
 8011158:	4283      	cmp	r3, r0
 801115a:	d3d2      	bcc.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801115c:	e7aa      	b.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801115e:	f240 605f 	movw	r0, #1631	; 0x65f
 8011162:	4283      	cmp	r3, r0
 8011164:	d0cd      	beq.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011166:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801116a:	d0a3      	beq.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801116c:	00cb      	lsls	r3, r1, #3
 801116e:	0649      	lsls	r1, r1, #25
 8011170:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011174:	7a13      	ldrb	r3, [r2, #8]
 8011176:	ea43 0300 	orr.w	r3, r3, r0
 801117a:	bf44      	itt	mi
 801117c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011180:	b21b      	sxthmi	r3, r3
 8011182:	1b5d      	subs	r5, r3, r5
 8011184:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011188:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801118c:	7b53      	ldrb	r3, [r2, #13]
 801118e:	015b      	lsls	r3, r3, #5
 8011190:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8011194:	7993      	ldrb	r3, [r2, #6]
 8011196:	430b      	orrs	r3, r1
 8011198:	2105      	movs	r1, #5
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	fb93 f3f1 	sdiv	r3, r3, r1
 80111a0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80111a4:	440b      	add	r3, r1
 80111a6:	e757      	b.n	8011058 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80111a8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80111ac:	4283      	cmp	r3, r0
 80111ae:	d809      	bhi.n	80111c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80111b0:	f240 60df 	movw	r0, #1759	; 0x6df
 80111b4:	4283      	cmp	r3, r0
 80111b6:	f4bf af7d 	bcs.w	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80111ba:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80111be:	2b05      	cmp	r3, #5
 80111c0:	d8d4      	bhi.n	801116c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80111c2:	e777      	b.n	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80111c4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80111c8:	4283      	cmp	r3, r0
 80111ca:	d09a      	beq.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80111cc:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80111d0:	4283      	cmp	r3, r0
 80111d2:	e7ca      	b.n	801116a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 80111d4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80111d8:	d22b      	bcs.n	8011232 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 80111da:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80111de:	4283      	cmp	r3, r0
 80111e0:	d28f      	bcs.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80111e2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80111e6:	4283      	cmp	r3, r0
 80111e8:	d816      	bhi.n	8011218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 80111ea:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80111ee:	4283      	cmp	r3, r0
 80111f0:	f4bf af60 	bcs.w	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80111f4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80111f8:	4283      	cmp	r3, r0
 80111fa:	d80a      	bhi.n	8011212 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 80111fc:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8011200:	4283      	cmp	r3, r0
 8011202:	f4bf af57 	bcs.w	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011206:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801120a:	4283      	cmp	r3, r0
 801120c:	f43f af79 	beq.w	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011210:	e7ac      	b.n	801116c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8011212:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8011216:	e7f8      	b.n	801120a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8011218:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801121c:	4283      	cmp	r3, r0
 801121e:	d802      	bhi.n	8011226 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8011220:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011224:	e798      	b.n	8011158 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8011226:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801122a:	4283      	cmp	r3, r0
 801122c:	f47f af42 	bne.w	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011230:	e767      	b.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011232:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8011236:	4283      	cmp	r3, r0
 8011238:	f43f af63 	beq.w	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801123c:	d802      	bhi.n	8011244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801123e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8011242:	e7f2      	b.n	801122a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8011244:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8011248:	4283      	cmp	r3, r0
 801124a:	d805      	bhi.n	8011258 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801124c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8011250:	4283      	cmp	r3, r0
 8011252:	f4ff af2f 	bcc.w	80110b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011256:	e754      	b.n	8011102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011258:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801125c:	4283      	cmp	r3, r0
 801125e:	e7af      	b.n	80111c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8011260:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8011264:	4617      	mov	r7, r2
 8011266:	f102 0808 	add.w	r8, r2, #8
 801126a:	4666      	mov	r6, ip
 801126c:	6838      	ldr	r0, [r7, #0]
 801126e:	3708      	adds	r7, #8
 8011270:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8011274:	46e6      	mov	lr, ip
 8011276:	4547      	cmp	r7, r8
 8011278:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801127c:	46f4      	mov	ip, lr
 801127e:	d1f5      	bne.n	801126c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8011280:	6838      	ldr	r0, [r7, #0]
 8011282:	f8ce 0000 	str.w	r0, [lr]
 8011286:	88b9      	ldrh	r1, [r7, #4]
 8011288:	f8ae 1004 	strh.w	r1, [lr, #4]
 801128c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8011290:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011294:	d009      	beq.n	80112aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8011296:	7b51      	ldrb	r1, [r2, #13]
 8011298:	7992      	ldrb	r2, [r2, #6]
 801129a:	0149      	lsls	r1, r1, #5
 801129c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80112a0:	4311      	orrs	r1, r2
 80112a2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80112a6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80112aa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80112ae:	d00d      	beq.n	80112cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80112b0:	442b      	add	r3, r5
 80112b2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80112bc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80112c0:	10db      	asrs	r3, r3, #3
 80112c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112c6:	4313      	orrs	r3, r2
 80112c8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80112cc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80112d0:	00cb      	lsls	r3, r1, #3
 80112d2:	064f      	lsls	r7, r1, #25
 80112d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80112d8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80112dc:	ea43 0302 	orr.w	r3, r3, r2
 80112e0:	bf44      	itt	mi
 80112e2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80112e6:	b21b      	sxthmi	r3, r3
 80112e8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80112ec:	1b5d      	subs	r5, r3, r5
 80112ee:	4632      	mov	r2, r6
 80112f0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80112f4:	e6fa      	b.n	80110ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80112f6:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80112fa:	4694      	mov	ip, r2
 80112fc:	f102 0908 	add.w	r9, r2, #8
 8011300:	4676      	mov	r6, lr
 8011302:	f8dc 0000 	ldr.w	r0, [ip]
 8011306:	f10c 0c08 	add.w	ip, ip, #8
 801130a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801130e:	46f0      	mov	r8, lr
 8011310:	45cc      	cmp	ip, r9
 8011312:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8011316:	46c6      	mov	lr, r8
 8011318:	d1f3      	bne.n	8011302 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801131a:	f8dc 0000 	ldr.w	r0, [ip]
 801131e:	f8c8 0000 	str.w	r0, [r8]
 8011322:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8011326:	f8a8 1004 	strh.w	r1, [r8, #4]
 801132a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801132e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011332:	d009      	beq.n	8011348 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8011334:	7b51      	ldrb	r1, [r2, #13]
 8011336:	7992      	ldrb	r2, [r2, #6]
 8011338:	0149      	lsls	r1, r1, #5
 801133a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801133e:	4311      	orrs	r1, r2
 8011340:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011344:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8011348:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801134c:	d00d      	beq.n	801136a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801134e:	1bdb      	subs	r3, r3, r7
 8011350:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011354:	b29b      	uxth	r3, r3
 8011356:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801135a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801135e:	10db      	asrs	r3, r3, #3
 8011360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011364:	4313      	orrs	r3, r2
 8011366:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801136a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801136e:	00cb      	lsls	r3, r1, #3
 8011370:	0648      	lsls	r0, r1, #25
 8011372:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011376:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801137a:	ea43 0302 	orr.w	r3, r3, r2
 801137e:	bf44      	itt	mi
 8011380:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011384:	b21b      	sxthmi	r3, r3
 8011386:	e7b1      	b.n	80112ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08011388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8011388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801138c:	461e      	mov	r6, r3
 801138e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8011390:	4604      	mov	r4, r0
 8011392:	4617      	mov	r7, r2
 8011394:	b92b      	cbnz	r3, 80113a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8011396:	4b25      	ldr	r3, [pc, #148]	; (801142c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8011398:	21c0      	movs	r1, #192	; 0xc0
 801139a:	4a25      	ldr	r2, [pc, #148]	; (8011430 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801139c:	4825      	ldr	r0, [pc, #148]	; (8011434 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801139e:	f009 fe6d 	bl	801b07c <__assert_func>
 80113a2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80113a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80113a8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80113ac:	f7f2 fa36 	bl	800381c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80113b0:	4605      	mov	r5, r0
 80113b2:	b918      	cbnz	r0, 80113bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80113b4:	6030      	str	r0, [r6, #0]
 80113b6:	4628      	mov	r0, r5
 80113b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	4601      	mov	r1, r0
 80113c0:	4638      	mov	r0, r7
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	4798      	blx	r3
 80113c6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80113ca:	4602      	mov	r2, r0
 80113cc:	6030      	str	r0, [r6, #0]
 80113ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113d2:	d213      	bcs.n	80113fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 80113d4:	4643      	mov	r3, r8
 80113d6:	4639      	mov	r1, r7
 80113d8:	4620      	mov	r0, r4
 80113da:	f7ff fe33 	bl	8011044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80113de:	6030      	str	r0, [r6, #0]
 80113e0:	6833      	ldr	r3, [r6, #0]
 80113e2:	b143      	cbz	r3, 80113f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 80113e4:	7b5a      	ldrb	r2, [r3, #13]
 80113e6:	7a9b      	ldrb	r3, [r3, #10]
 80113e8:	0052      	lsls	r2, r2, #1
 80113ea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80113ee:	4313      	orrs	r3, r2
 80113f0:	bf0c      	ite	eq
 80113f2:	2301      	moveq	r3, #1
 80113f4:	2300      	movne	r3, #0
 80113f6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80113fa:	e7dc      	b.n	80113b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 80113fc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8011400:	b29b      	uxth	r3, r3
 8011402:	2b7f      	cmp	r3, #127	; 0x7f
 8011404:	d804      	bhi.n	8011410 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8011406:	4639      	mov	r1, r7
 8011408:	4620      	mov	r0, r4
 801140a:	f7ff fd01 	bl	8010e10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801140e:	e7e6      	b.n	80113de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8011410:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8011414:	2b00      	cmp	r3, #0
 8011416:	d0e3      	beq.n	80113e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011418:	f640 1302 	movw	r3, #2306	; 0x902
 801141c:	429d      	cmp	r5, r3
 801141e:	d1df      	bne.n	80113e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011420:	4601      	mov	r1, r0
 8011422:	4620      	mov	r0, r4
 8011424:	f7ff fcc4 	bl	8010db0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011428:	e7d9      	b.n	80113de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801142a:	bf00      	nop
 801142c:	0801ceac 	.word	0x0801ceac
 8011430:	0801e853 	.word	0x0801e853
 8011434:	0801cf7e 	.word	0x0801cf7e

08011438 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8011438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801143c:	461e      	mov	r6, r3
 801143e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8011440:	4604      	mov	r4, r0
 8011442:	4617      	mov	r7, r2
 8011444:	b92b      	cbnz	r3, 8011452 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8011446:	4b26      	ldr	r3, [pc, #152]	; (80114e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8011448:	21c0      	movs	r1, #192	; 0xc0
 801144a:	4a26      	ldr	r2, [pc, #152]	; (80114e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801144c:	4826      	ldr	r0, [pc, #152]	; (80114e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801144e:	f009 fe15 	bl	801b07c <__assert_func>
 8011452:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011454:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011458:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801145c:	f7f2 f9de 	bl	800381c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011460:	4605      	mov	r5, r0
 8011462:	b918      	cbnz	r0, 801146c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8011464:	6030      	str	r0, [r6, #0]
 8011466:	4628      	mov	r0, r5
 8011468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	4601      	mov	r1, r0
 8011470:	4638      	mov	r0, r7
 8011472:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8011476:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801147a:	47c8      	blx	r9
 801147c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8011480:	4602      	mov	r2, r0
 8011482:	6030      	str	r0, [r6, #0]
 8011484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011488:	d213      	bcs.n	80114b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801148a:	4643      	mov	r3, r8
 801148c:	4639      	mov	r1, r7
 801148e:	4620      	mov	r0, r4
 8011490:	f7ff fdd8 	bl	8011044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8011494:	6030      	str	r0, [r6, #0]
 8011496:	6833      	ldr	r3, [r6, #0]
 8011498:	b143      	cbz	r3, 80114ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801149a:	7b5a      	ldrb	r2, [r3, #13]
 801149c:	7a9b      	ldrb	r3, [r3, #10]
 801149e:	0052      	lsls	r2, r2, #1
 80114a0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80114a4:	4313      	orrs	r3, r2
 80114a6:	bf0c      	ite	eq
 80114a8:	2301      	moveq	r3, #1
 80114aa:	2300      	movne	r3, #0
 80114ac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80114b0:	e7d9      	b.n	8011466 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80114b2:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	2b7f      	cmp	r3, #127	; 0x7f
 80114ba:	d804      	bhi.n	80114c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80114bc:	4639      	mov	r1, r7
 80114be:	4620      	mov	r0, r4
 80114c0:	f7ff fca6 	bl	8010e10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80114c4:	e7e6      	b.n	8011494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80114c6:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d0e3      	beq.n	8011496 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80114ce:	f640 1302 	movw	r3, #2306	; 0x902
 80114d2:	429d      	cmp	r5, r3
 80114d4:	d1df      	bne.n	8011496 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80114d6:	4601      	mov	r1, r0
 80114d8:	4620      	mov	r0, r4
 80114da:	f7ff fc69 	bl	8010db0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80114de:	e7d9      	b.n	8011494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80114e0:	0801ceac 	.word	0x0801ceac
 80114e4:	0801e853 	.word	0x0801e853
 80114e8:	0801cf7e 	.word	0x0801cf7e

080114ec <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80114ec:	b510      	push	{r4, lr}
 80114ee:	4604      	mov	r4, r0
 80114f0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80114f4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80114f6:	b9d9      	cbnz	r1, 8011530 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80114f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80114fa:	2b0a      	cmp	r3, #10
 80114fc:	d037      	beq.n	801156e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80114fe:	4620      	mov	r0, r4
 8011500:	f7ff fc15 	bl	8010d2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8011504:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011506:	2b09      	cmp	r3, #9
 8011508:	d906      	bls.n	8011518 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801150a:	4b19      	ldr	r3, [pc, #100]	; (8011570 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801150c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011510:	4a18      	ldr	r2, [pc, #96]	; (8011574 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8011512:	4819      	ldr	r0, [pc, #100]	; (8011578 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8011514:	f009 fdb2 	bl	801b07c <__assert_func>
 8011518:	1c5a      	adds	r2, r3, #1
 801151a:	8722      	strh	r2, [r4, #56]	; 0x38
 801151c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801151e:	4413      	add	r3, r2
 8011520:	b29b      	uxth	r3, r3
 8011522:	2b09      	cmp	r3, #9
 8011524:	bf88      	it	hi
 8011526:	3b0a      	subhi	r3, #10
 8011528:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801152c:	8458      	strh	r0, [r3, #34]	; 0x22
 801152e:	e7e3      	b.n	80114f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8011530:	2b0a      	cmp	r3, #10
 8011532:	d01c      	beq.n	801156e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8011534:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8011536:	3901      	subs	r1, #1
 8011538:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801153c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801153e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8011542:	1c51      	adds	r1, r2, #1
 8011544:	b289      	uxth	r1, r1
 8011546:	2901      	cmp	r1, #1
 8011548:	bf8a      	itet	hi
 801154a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801154e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8011550:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8011552:	2b09      	cmp	r3, #9
 8011554:	d8d9      	bhi.n	801150a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8011556:	1c5a      	adds	r2, r3, #1
 8011558:	8722      	strh	r2, [r4, #56]	; 0x38
 801155a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801155c:	4413      	add	r3, r2
 801155e:	b29b      	uxth	r3, r3
 8011560:	2b09      	cmp	r3, #9
 8011562:	bf88      	it	hi
 8011564:	3b0a      	subhi	r3, #10
 8011566:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801156a:	8458      	strh	r0, [r3, #34]	; 0x22
 801156c:	e7c0      	b.n	80114f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801156e:	bd10      	pop	{r4, pc}
 8011570:	0801e624 	.word	0x0801e624
 8011574:	0801e9a9 	.word	0x0801e9a9
 8011578:	0801cf7e 	.word	0x0801cf7e

0801157c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8011580:	4604      	mov	r4, r0
 8011582:	b92a      	cbnz	r2, 8011590 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8011584:	4b13      	ldr	r3, [pc, #76]	; (80115d4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8011586:	21d5      	movs	r1, #213	; 0xd5
 8011588:	4a13      	ldr	r2, [pc, #76]	; (80115d8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801158a:	4814      	ldr	r0, [pc, #80]	; (80115dc <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801158c:	f009 fd76 	bl	801b07c <__assert_func>
 8011590:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011592:	3a01      	subs	r2, #1
 8011594:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8011598:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801159a:	8702      	strh	r2, [r0, #56]	; 0x38
 801159c:	1c5a      	adds	r2, r3, #1
 801159e:	b292      	uxth	r2, r2
 80115a0:	2a09      	cmp	r2, #9
 80115a2:	bf8a      	itet	hi
 80115a4:	3b09      	subhi	r3, #9
 80115a6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80115a8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80115aa:	f7ff ff9f 	bl	80114ec <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80115ae:	8c23      	ldrh	r3, [r4, #32]
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	bf9c      	itt	ls
 80115b4:	3301      	addls	r3, #1
 80115b6:	8423      	strhls	r3, [r4, #32]
 80115b8:	8be3      	ldrh	r3, [r4, #30]
 80115ba:	b90b      	cbnz	r3, 80115c0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80115bc:	2302      	movs	r3, #2
 80115be:	83e3      	strh	r3, [r4, #30]
 80115c0:	8be3      	ldrh	r3, [r4, #30]
 80115c2:	4628      	mov	r0, r5
 80115c4:	3b01      	subs	r3, #1
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	83e3      	strh	r3, [r4, #30]
 80115ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80115ce:	8365      	strh	r5, [r4, #26]
 80115d0:	bd38      	pop	{r3, r4, r5, pc}
 80115d2:	bf00      	nop
 80115d4:	0801ceac 	.word	0x0801ceac
 80115d8:	0801e8fe 	.word	0x0801e8fe
 80115dc:	0801cf7e 	.word	0x0801cf7e

080115e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80115e0:	428a      	cmp	r2, r1
 80115e2:	b538      	push	{r3, r4, r5, lr}
 80115e4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80115e6:	d90c      	bls.n	8011602 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 80115e8:	b92c      	cbnz	r4, 80115f6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 80115ea:	4b1c      	ldr	r3, [pc, #112]	; (801165c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 80115ec:	21e1      	movs	r1, #225	; 0xe1
 80115ee:	4a1c      	ldr	r2, [pc, #112]	; (8011660 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 80115f0:	481c      	ldr	r0, [pc, #112]	; (8011664 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 80115f2:	f009 fd43 	bl	801b07c <__assert_func>
 80115f6:	3c01      	subs	r4, #1
 80115f8:	4b1b      	ldr	r3, [pc, #108]	; (8011668 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80115fa:	4a1c      	ldr	r2, [pc, #112]	; (801166c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80115fc:	21c5      	movs	r1, #197	; 0xc5
 80115fe:	8704      	strh	r4, [r0, #56]	; 0x38
 8011600:	e7f6      	b.n	80115f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8011602:	428c      	cmp	r4, r1
 8011604:	d203      	bcs.n	801160e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8011606:	4b1a      	ldr	r3, [pc, #104]	; (8011670 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8011608:	21cb      	movs	r1, #203	; 0xcb
 801160a:	4a1a      	ldr	r2, [pc, #104]	; (8011674 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801160c:	e7f0      	b.n	80115f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801160e:	1a64      	subs	r4, r4, r1
 8011610:	250a      	movs	r5, #10
 8011612:	8704      	strh	r4, [r0, #56]	; 0x38
 8011614:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8011616:	4421      	add	r1, r4
 8011618:	b289      	uxth	r1, r1
 801161a:	2909      	cmp	r1, #9
 801161c:	bf88      	it	hi
 801161e:	390a      	subhi	r1, #10
 8011620:	86c1      	strh	r1, [r0, #54]	; 0x36
 8011622:	b1ba      	cbz	r2, 8011654 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8011624:	3a01      	subs	r2, #1
 8011626:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8011628:	b292      	uxth	r2, r2
 801162a:	2909      	cmp	r1, #9
 801162c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8011630:	d903      	bls.n	801163a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8011632:	4b11      	ldr	r3, [pc, #68]	; (8011678 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8011634:	21e6      	movs	r1, #230	; 0xe6
 8011636:	4a11      	ldr	r2, [pc, #68]	; (801167c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8011638:	e7da      	b.n	80115f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801163a:	3101      	adds	r1, #1
 801163c:	8701      	strh	r1, [r0, #56]	; 0x38
 801163e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8011640:	b901      	cbnz	r1, 8011644 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8011642:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011644:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8011646:	3901      	subs	r1, #1
 8011648:	b289      	uxth	r1, r1
 801164a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801164c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011650:	844c      	strh	r4, [r1, #34]	; 0x22
 8011652:	e7e6      	b.n	8011622 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8011654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011658:	f7ff bf48 	b.w	80114ec <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801165c:	0801ceac 	.word	0x0801ceac
 8011660:	0801e6d7 	.word	0x0801e6d7
 8011664:	0801cf7e 	.word	0x0801cf7e
 8011668:	0801cfaa 	.word	0x0801cfaa
 801166c:	0801e781 	.word	0x0801e781
 8011670:	0801e630 	.word	0x0801e630
 8011674:	0801ea58 	.word	0x0801ea58
 8011678:	0801e63c 	.word	0x0801e63c
 801167c:	0801e64f 	.word	0x0801e64f

08011680 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8011680:	3a01      	subs	r2, #1
 8011682:	b570      	push	{r4, r5, r6, lr}
 8011684:	b292      	uxth	r2, r2
 8011686:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801168a:	42b2      	cmp	r2, r6
 801168c:	d019      	beq.n	80116c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801168e:	8c04      	ldrh	r4, [r0, #32]
 8011690:	f831 5b02 	ldrh.w	r5, [r1], #2
 8011694:	4294      	cmp	r4, r2
 8011696:	d805      	bhi.n	80116a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8011698:	4b19      	ldr	r3, [pc, #100]	; (8011700 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801169a:	4a1a      	ldr	r2, [pc, #104]	; (8011704 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801169c:	21c5      	movs	r1, #197	; 0xc5
 801169e:	481a      	ldr	r0, [pc, #104]	; (8011708 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80116a0:	f009 fcec 	bl	801b07c <__assert_func>
 80116a4:	8bc4      	ldrh	r4, [r0, #30]
 80116a6:	4414      	add	r4, r2
 80116a8:	3a01      	subs	r2, #1
 80116aa:	b2a4      	uxth	r4, r4
 80116ac:	b292      	uxth	r2, r2
 80116ae:	2c01      	cmp	r4, #1
 80116b0:	bf88      	it	hi
 80116b2:	3c02      	subhi	r4, #2
 80116b4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80116b8:	8b64      	ldrh	r4, [r4, #26]
 80116ba:	42ac      	cmp	r4, r5
 80116bc:	d0e5      	beq.n	801168a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80116be:	2000      	movs	r0, #0
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
 80116c2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80116c6:	2400      	movs	r4, #0
 80116c8:	4413      	add	r3, r2
 80116ca:	b2a2      	uxth	r2, r4
 80116cc:	429a      	cmp	r2, r3
 80116ce:	da14      	bge.n	80116fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80116d0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80116d2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80116d6:	4296      	cmp	r6, r2
 80116d8:	d802      	bhi.n	80116e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80116da:	4b09      	ldr	r3, [pc, #36]	; (8011700 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80116dc:	4a0b      	ldr	r2, [pc, #44]	; (801170c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80116de:	e7dd      	b.n	801169c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80116e0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80116e2:	3401      	adds	r4, #1
 80116e4:	4432      	add	r2, r6
 80116e6:	b292      	uxth	r2, r2
 80116e8:	2a09      	cmp	r2, #9
 80116ea:	bf88      	it	hi
 80116ec:	3a0a      	subhi	r2, #10
 80116ee:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80116f2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80116f4:	42aa      	cmp	r2, r5
 80116f6:	d0e8      	beq.n	80116ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80116f8:	e7e1      	b.n	80116be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80116fa:	2001      	movs	r0, #1
 80116fc:	e7e0      	b.n	80116c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80116fe:	bf00      	nop
 8011700:	0801cfaa 	.word	0x0801cfaa
 8011704:	0801eadc 	.word	0x0801eadc
 8011708:	0801cf7e 	.word	0x0801cf7e
 801170c:	0801e781 	.word	0x0801e781

08011710 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8011710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	4605      	mov	r5, r0
 8011716:	4616      	mov	r6, r2
 8011718:	1c8c      	adds	r4, r1, #2
 801171a:	8809      	ldrh	r1, [r1, #0]
 801171c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8011720:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8011724:	42b3      	cmp	r3, r6
 8011726:	d124      	bne.n	8011772 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8011728:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801172c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8011730:	f001 070f 	and.w	r7, r1, #15
 8011734:	4652      	mov	r2, sl
 8011736:	f8cd 8000 	str.w	r8, [sp]
 801173a:	464b      	mov	r3, r9
 801173c:	4621      	mov	r1, r4
 801173e:	4628      	mov	r0, r5
 8011740:	f7ff ff9e 	bl	8011680 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8011744:	4683      	mov	fp, r0
 8011746:	b168      	cbz	r0, 8011764 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8011748:	eb0a 0109 	add.w	r1, sl, r9
 801174c:	463a      	mov	r2, r7
 801174e:	4628      	mov	r0, r5
 8011750:	4441      	add	r1, r8
 8011752:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8011756:	4649      	mov	r1, r9
 8011758:	f7ff ff42 	bl	80115e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801175c:	4658      	mov	r0, fp
 801175e:	b003      	add	sp, #12
 8011760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011764:	eb07 010a 	add.w	r1, r7, sl
 8011768:	4449      	add	r1, r9
 801176a:	4441      	add	r1, r8
 801176c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8011770:	e7d2      	b.n	8011718 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8011772:	f04f 0b00 	mov.w	fp, #0
 8011776:	e7f1      	b.n	801175c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08011778 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8011778:	b570      	push	{r4, r5, r6, lr}
 801177a:	8810      	ldrh	r0, [r2, #0]
 801177c:	4298      	cmp	r0, r3
 801177e:	d817      	bhi.n	80117b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8011780:	1e48      	subs	r0, r1, #1
 8011782:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8011786:	4298      	cmp	r0, r3
 8011788:	d312      	bcc.n	80117b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801178a:	2400      	movs	r4, #0
 801178c:	428c      	cmp	r4, r1
 801178e:	d20f      	bcs.n	80117b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8011790:	1860      	adds	r0, r4, r1
 8011792:	1040      	asrs	r0, r0, #1
 8011794:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8011798:	0085      	lsls	r5, r0, #2
 801179a:	42b3      	cmp	r3, r6
 801179c:	d902      	bls.n	80117a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801179e:	3001      	adds	r0, #1
 80117a0:	b284      	uxth	r4, r0
 80117a2:	e7f3      	b.n	801178c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80117a4:	d201      	bcs.n	80117aa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80117a6:	b281      	uxth	r1, r0
 80117a8:	e7f0      	b.n	801178c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80117aa:	442a      	add	r2, r5
 80117ac:	8850      	ldrh	r0, [r2, #2]
 80117ae:	bd70      	pop	{r4, r5, r6, pc}
 80117b0:	2000      	movs	r0, #0
 80117b2:	e7fc      	b.n	80117ae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080117b4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80117b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80117ba:	4604      	mov	r4, r0
 80117bc:	260b      	movs	r6, #11
 80117be:	886f      	ldrh	r7, [r5, #2]
 80117c0:	087f      	lsrs	r7, r7, #1
 80117c2:	3e01      	subs	r6, #1
 80117c4:	d01b      	beq.n	80117fe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80117c6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80117c8:	b92b      	cbnz	r3, 80117d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80117ca:	4b0e      	ldr	r3, [pc, #56]	; (8011804 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80117cc:	21c0      	movs	r1, #192	; 0xc0
 80117ce:	4a0e      	ldr	r2, [pc, #56]	; (8011808 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80117d0:	480e      	ldr	r0, [pc, #56]	; (801180c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80117d2:	f009 fc53 	bl	801b07c <__assert_func>
 80117d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80117d8:	462a      	mov	r2, r5
 80117da:	4639      	mov	r1, r7
 80117dc:	4620      	mov	r0, r4
 80117de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80117e2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80117e6:	4643      	mov	r3, r8
 80117e8:	f7ff ffc6 	bl	8011778 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80117ec:	b138      	cbz	r0, 80117fe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80117ee:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80117f2:	4642      	mov	r2, r8
 80117f4:	4620      	mov	r0, r4
 80117f6:	f7ff ff8b 	bl	8011710 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d1e1      	bne.n	80117c2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80117fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011802:	bf00      	nop
 8011804:	0801ceac 	.word	0x0801ceac
 8011808:	0801e853 	.word	0x0801e853
 801180c:	0801cf7e 	.word	0x0801cf7e

08011810 <_ZN8touchgfx8ceil28_4El>:
 8011810:	f110 030f 	adds.w	r3, r0, #15
 8011814:	d401      	bmi.n	801181a <_ZN8touchgfx8ceil28_4El+0xa>
 8011816:	1118      	asrs	r0, r3, #4
 8011818:	4770      	bx	lr
 801181a:	2210      	movs	r2, #16
 801181c:	f1c0 0001 	rsb	r0, r0, #1
 8011820:	fb93 f3f2 	sdiv	r3, r3, r2
 8011824:	f010 000f 	ands.w	r0, r0, #15
 8011828:	bf18      	it	ne
 801182a:	2001      	movne	r0, #1
 801182c:	1a18      	subs	r0, r3, r0
 801182e:	4770      	bx	lr

08011830 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8011830:	2900      	cmp	r1, #0
 8011832:	b538      	push	{r3, r4, r5, lr}
 8011834:	dc05      	bgt.n	8011842 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8011836:	4b0f      	ldr	r3, [pc, #60]	; (8011874 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8011838:	21f7      	movs	r1, #247	; 0xf7
 801183a:	4a0f      	ldr	r2, [pc, #60]	; (8011878 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801183c:	480f      	ldr	r0, [pc, #60]	; (801187c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801183e:	f009 fc1d 	bl	801b07c <__assert_func>
 8011842:	2800      	cmp	r0, #0
 8011844:	db06      	blt.n	8011854 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8011846:	fb90 f4f1 	sdiv	r4, r0, r1
 801184a:	fb01 0114 	mls	r1, r1, r4, r0
 801184e:	6014      	str	r4, [r2, #0]
 8011850:	6019      	str	r1, [r3, #0]
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	4240      	negs	r0, r0
 8011856:	fb90 f4f1 	sdiv	r4, r0, r1
 801185a:	4265      	negs	r5, r4
 801185c:	fb01 0014 	mls	r0, r1, r4, r0
 8011860:	6015      	str	r5, [r2, #0]
 8011862:	6018      	str	r0, [r3, #0]
 8011864:	2800      	cmp	r0, #0
 8011866:	d0f4      	beq.n	8011852 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8011868:	6810      	ldr	r0, [r2, #0]
 801186a:	3801      	subs	r0, #1
 801186c:	6010      	str	r0, [r2, #0]
 801186e:	6818      	ldr	r0, [r3, #0]
 8011870:	1a09      	subs	r1, r1, r0
 8011872:	e7ed      	b.n	8011850 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8011874:	0801ebad 	.word	0x0801ebad
 8011878:	0801ebec 	.word	0x0801ebec
 801187c:	0801ebbd 	.word	0x0801ebbd

08011880 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8011880:	b570      	push	{r4, r5, r6, lr}
 8011882:	694a      	ldr	r2, [r1, #20]
 8011884:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011886:	684b      	ldr	r3, [r1, #4]
 8011888:	1b54      	subs	r4, r2, r5
 801188a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801188c:	f000 8106 	beq.w	8011a9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8011890:	1b9b      	subs	r3, r3, r6
 8011892:	d003      	beq.n	801189c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8011894:	4363      	muls	r3, r4
 8011896:	2210      	movs	r2, #16
 8011898:	fb93 f3f2 	sdiv	r3, r3, r2
 801189c:	680c      	ldr	r4, [r1, #0]
 801189e:	698a      	ldr	r2, [r1, #24]
 80118a0:	1b65      	subs	r5, r4, r5
 80118a2:	f000 80fd 	beq.w	8011aa0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80118a6:	1b92      	subs	r2, r2, r6
 80118a8:	d003      	beq.n	80118b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80118aa:	436a      	muls	r2, r5
 80118ac:	2410      	movs	r4, #16
 80118ae:	fb92 f2f4 	sdiv	r2, r2, r4
 80118b2:	1a9b      	subs	r3, r3, r2
 80118b4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8011adc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80118b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118bc:	460a      	mov	r2, r1
 80118be:	ee07 3a90 	vmov	s15, r3
 80118c2:	f100 040c 	add.w	r4, r0, #12
 80118c6:	4603      	mov	r3, r0
 80118c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80118d0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80118d4:	eeb1 6a43 	vneg.f32	s12, s6
 80118d8:	edd2 7a02 	vldr	s15, [r2, #8]
 80118dc:	3214      	adds	r2, #20
 80118de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80118e2:	ece3 6a01 	vstmia	r3!, {s13}
 80118e6:	429c      	cmp	r4, r3
 80118e8:	ed52 7a02 	vldr	s15, [r2, #-8]
 80118ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118f0:	edc3 7a02 	vstr	s15, [r3, #8]
 80118f4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80118f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118fc:	edc3 7a05 	vstr	s15, [r3, #20]
 8011900:	d1ea      	bne.n	80118d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8011902:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011904:	698b      	ldr	r3, [r1, #24]
 8011906:	edd0 4a02 	vldr	s9, [r0, #8]
 801190a:	1a9b      	subs	r3, r3, r2
 801190c:	edd0 3a00 	vldr	s7, [r0]
 8011910:	edd0 6a01 	vldr	s13, [r0, #4]
 8011914:	ee07 3a90 	vmov	s15, r3
 8011918:	684b      	ldr	r3, [r1, #4]
 801191a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801191e:	ed90 5a05 	vldr	s10, [r0, #20]
 8011922:	1a9b      	subs	r3, r3, r2
 8011924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011928:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801192c:	ed90 2a03 	vldr	s4, [r0, #12]
 8011930:	ee07 3a10 	vmov	s14, r3
 8011934:	edd0 5a04 	vldr	s11, [r0, #16]
 8011938:	ee67 7a84 	vmul.f32	s15, s15, s8
 801193c:	ed90 1a07 	vldr	s2, [r0, #28]
 8011940:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011944:	edd0 2a06 	vldr	s5, [r0, #24]
 8011948:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801194c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8011950:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011954:	ee32 5a45 	vsub.f32	s10, s4, s10
 8011958:	eee6 7a87 	vfma.f32	s15, s13, s14
 801195c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8011960:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8011964:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8011966:	694a      	ldr	r2, [r1, #20]
 8011968:	1b13      	subs	r3, r2, r4
 801196a:	ee07 3a10 	vmov	s14, r3
 801196e:	680b      	ldr	r3, [r1, #0]
 8011970:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011974:	1b1b      	subs	r3, r3, r4
 8011976:	ee27 7a04 	vmul.f32	s14, s14, s8
 801197a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801197e:	ee07 3a10 	vmov	s14, r3
 8011982:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011986:	ee27 7a04 	vmul.f32	s14, s14, s8
 801198a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801198e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8011992:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8011996:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011998:	698b      	ldr	r3, [r1, #24]
 801199a:	1a9b      	subs	r3, r3, r2
 801199c:	ee06 3a90 	vmov	s13, r3
 80119a0:	684b      	ldr	r3, [r1, #4]
 80119a2:	1a9b      	subs	r3, r3, r2
 80119a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80119a8:	ee07 3a10 	vmov	s14, r3
 80119ac:	ee66 6a84 	vmul.f32	s13, s13, s8
 80119b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119b4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80119b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119bc:	eee5 6a87 	vfma.f32	s13, s11, s14
 80119c0:	ee66 6a83 	vmul.f32	s13, s13, s6
 80119c4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80119c8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80119ca:	694a      	ldr	r2, [r1, #20]
 80119cc:	1b13      	subs	r3, r2, r4
 80119ce:	ee07 3a10 	vmov	s14, r3
 80119d2:	680b      	ldr	r3, [r1, #0]
 80119d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119d8:	1b1b      	subs	r3, r3, r4
 80119da:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119de:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80119e2:	ee07 3a10 	vmov	s14, r3
 80119e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80119ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 80119ee:	eea5 5a87 	vfma.f32	s10, s11, s14
 80119f2:	edd0 5a08 	vldr	s11, [r0, #32]
 80119f6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80119fa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80119fe:	ee25 5a06 	vmul.f32	s10, s10, s12
 8011a02:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8011a06:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011a08:	698b      	ldr	r3, [r1, #24]
 8011a0a:	1a9b      	subs	r3, r3, r2
 8011a0c:	ee07 3a10 	vmov	s14, r3
 8011a10:	684b      	ldr	r3, [r1, #4]
 8011a12:	1a9b      	subs	r3, r3, r2
 8011a14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a18:	ee01 3a90 	vmov	s3, r3
 8011a1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011a20:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011a24:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8011a28:	ee61 1a84 	vmul.f32	s3, s3, s8
 8011a2c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8011a30:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011a34:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8011a38:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8011a3a:	694a      	ldr	r2, [r1, #20]
 8011a3c:	1b13      	subs	r3, r2, r4
 8011a3e:	ee03 3a10 	vmov	s6, r3
 8011a42:	680b      	ldr	r3, [r1, #0]
 8011a44:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8011a48:	1b1b      	subs	r3, r3, r4
 8011a4a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8011a4e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8011a52:	ee03 3a10 	vmov	s6, r3
 8011a56:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8011a5a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8011a5e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8011a62:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011a66:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8011a6a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8011a6e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8011a72:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a7a:	dd13      	ble.n	8011aa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8011a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a80:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8011a84:	63c3      	str	r3, [r0, #60]	; 0x3c
 8011a86:	eee3 7a87 	vfma.f32	s15, s7, s14
 8011a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a92:	dd15      	ble.n	8011ac0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8011a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a98:	6403      	str	r3, [r0, #64]	; 0x40
 8011a9a:	bd70      	pop	{r4, r5, r6, pc}
 8011a9c:	4623      	mov	r3, r4
 8011a9e:	e6fd      	b.n	801189c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8011aa0:	462a      	mov	r2, r5
 8011aa2:	e706      	b.n	80118b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8011aa4:	d502      	bpl.n	8011aac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8011aa6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011aaa:	e7e9      	b.n	8011a80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8011aac:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8011ab0:	eea3 2a85 	vfma.f32	s4, s7, s10
 8011ab4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8011ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abc:	dade      	bge.n	8011a7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8011abe:	e7f2      	b.n	8011aa6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8011ac0:	d502      	bpl.n	8011ac8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8011ac2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011ac6:	e7e7      	b.n	8011a98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8011ac8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8011acc:	eee3 4a86 	vfma.f32	s9, s7, s12
 8011ad0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8011ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad8:	dadc      	bge.n	8011a94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8011ada:	e7f2      	b.n	8011ac2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8011adc:	3d800000 	.word	0x3d800000

08011ae0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8011ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae4:	f04f 0814 	mov.w	r8, #20
 8011ae8:	4604      	mov	r4, r0
 8011aea:	4617      	mov	r7, r2
 8011aec:	460d      	mov	r5, r1
 8011aee:	fb08 f903 	mul.w	r9, r8, r3
 8011af2:	461e      	mov	r6, r3
 8011af4:	eb02 0a09 	add.w	sl, r2, r9
 8011af8:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011afc:	f7ff fe88 	bl	8011810 <_ZN8touchgfx8ceil28_4El>
 8011b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b02:	6160      	str	r0, [r4, #20]
 8011b04:	fb08 f803 	mul.w	r8, r8, r3
 8011b08:	9001      	str	r0, [sp, #4]
 8011b0a:	eb07 0b08 	add.w	fp, r7, r8
 8011b0e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8011b12:	f7ff fe7d 	bl	8011810 <_ZN8touchgfx8ceil28_4El>
 8011b16:	9a01      	ldr	r2, [sp, #4]
 8011b18:	1a80      	subs	r0, r0, r2
 8011b1a:	61a0      	str	r0, [r4, #24]
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	f000 8088 	beq.w	8011c32 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8011b22:	f857 3009 	ldr.w	r3, [r7, r9]
 8011b26:	f857 c008 	ldr.w	ip, [r7, r8]
 8011b2a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8011b2e:	ebac 0c03 	sub.w	ip, ip, r3
 8011b32:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011b36:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8011b3a:	1a40      	subs	r0, r0, r1
 8011b3c:	fb0b f202 	mul.w	r2, fp, r2
 8011b40:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8011b44:	fb0c 2211 	mls	r2, ip, r1, r2
 8011b48:	4641      	mov	r1, r8
 8011b4a:	fb00 2003 	mla	r0, r0, r3, r2
 8011b4e:	f104 0310 	add.w	r3, r4, #16
 8011b52:	4622      	mov	r2, r4
 8011b54:	3801      	subs	r0, #1
 8011b56:	4440      	add	r0, r8
 8011b58:	f7ff fe6a 	bl	8011830 <_ZN8touchgfx11floorDivModEllRlS0_>
 8011b5c:	f104 0308 	add.w	r3, r4, #8
 8011b60:	1d22      	adds	r2, r4, #4
 8011b62:	4641      	mov	r1, r8
 8011b64:	4658      	mov	r0, fp
 8011b66:	f7ff fe63 	bl	8011830 <_ZN8touchgfx11floorDivModEllRlS0_>
 8011b6a:	f8c4 800c 	str.w	r8, [r4, #12]
 8011b6e:	6962      	ldr	r2, [r4, #20]
 8011b70:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011b74:	eddf 6a31 	vldr	s13, [pc, #196]	; 8011c3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8011b78:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8011b7c:	6822      	ldr	r2, [r4, #0]
 8011b7e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8011b82:	ee07 3a10 	vmov	s14, r3
 8011b86:	f857 3009 	ldr.w	r3, [r7, r9]
 8011b8a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8011b8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011b92:	ee07 3a90 	vmov	s15, r3
 8011b96:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8011b9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011ba6:	edd3 6a00 	vldr	s13, [r3]
 8011baa:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011bae:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011bb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011bb6:	edc4 6a07 	vstr	s13, [r4, #28]
 8011bba:	edd4 6a01 	vldr	s13, [r4, #4]
 8011bbe:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8011bc2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011bc6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8011bca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011bce:	ed84 6a08 	vstr	s12, [r4, #32]
 8011bd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011bd4:	6262      	str	r2, [r4, #36]	; 0x24
 8011bd6:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8011bda:	ed93 6a03 	vldr	s12, [r3, #12]
 8011bde:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011be2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8011be6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011bea:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8011bee:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8011bf2:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8011bf6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011bfa:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8011bfe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8011c00:	6322      	str	r2, [r4, #48]	; 0x30
 8011c02:	ed93 6a06 	vldr	s12, [r3, #24]
 8011c06:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8011c0a:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011c0e:	eeb0 7a46 	vmov.f32	s14, s12
 8011c12:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8011c16:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011c1a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8011c1e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8011c22:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8011c26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c2a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8011c2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011c30:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011c32:	4620      	mov	r0, r4
 8011c34:	b003      	add	sp, #12
 8011c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c3a:	bf00      	nop
 8011c3c:	3d800000 	.word	0x3d800000

08011c40 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8011c40:	4602      	mov	r2, r0
 8011c42:	b148      	cbz	r0, 8011c58 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8011c44:	2300      	movs	r3, #0
 8011c46:	b298      	uxth	r0, r3
 8011c48:	3301      	adds	r3, #1
 8011c4a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8011c4e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8011c52:	2900      	cmp	r1, #0
 8011c54:	d1f7      	bne.n	8011c46 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8011c56:	4770      	bx	lr
 8011c58:	4770      	bx	lr

08011c5a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8011c5a:	b530      	push	{r4, r5, lr}
 8011c5c:	4604      	mov	r4, r0
 8011c5e:	b159      	cbz	r1, 8011c78 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8011c60:	b148      	cbz	r0, 8011c76 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8011c62:	2300      	movs	r3, #0
 8011c64:	b298      	uxth	r0, r3
 8011c66:	4282      	cmp	r2, r0
 8011c68:	d905      	bls.n	8011c76 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8011c6a:	5ccd      	ldrb	r5, [r1, r3]
 8011c6c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8011c70:	3301      	adds	r3, #1
 8011c72:	2d00      	cmp	r5, #0
 8011c74:	d1f6      	bne.n	8011c64 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8011c76:	bd30      	pop	{r4, r5, pc}
 8011c78:	4608      	mov	r0, r1
 8011c7a:	e7fc      	b.n	8011c76 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08011c7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8011c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c7e:	468c      	mov	ip, r1
 8011c80:	b08b      	sub	sp, #44	; 0x2c
 8011c82:	2100      	movs	r1, #0
 8011c84:	ae01      	add	r6, sp, #4
 8011c86:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011c8a:	211f      	movs	r1, #31
 8011c8c:	fbb0 f7f3 	udiv	r7, r0, r3
 8011c90:	fb03 0517 	mls	r5, r3, r7, r0
 8011c94:	4638      	mov	r0, r7
 8011c96:	b2ec      	uxtb	r4, r5
 8011c98:	2d09      	cmp	r5, #9
 8011c9a:	bfd4      	ite	le
 8011c9c:	3430      	addle	r4, #48	; 0x30
 8011c9e:	3457      	addgt	r4, #87	; 0x57
 8011ca0:	b2e4      	uxtb	r4, r4
 8011ca2:	558c      	strb	r4, [r1, r6]
 8011ca4:	1e4c      	subs	r4, r1, #1
 8011ca6:	b92f      	cbnz	r7, 8011cb4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8011ca8:	4431      	add	r1, r6
 8011caa:	4660      	mov	r0, ip
 8011cac:	f7ff ffd5 	bl	8011c5a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8011cb0:	b00b      	add	sp, #44	; 0x2c
 8011cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	e7e9      	b.n	8011c8c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08011cb8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8011cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cba:	4607      	mov	r7, r0
 8011cbc:	b08b      	sub	sp, #44	; 0x2c
 8011cbe:	4608      	mov	r0, r1
 8011cc0:	b341      	cbz	r1, 8011d14 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8011cc2:	1e99      	subs	r1, r3, #2
 8011cc4:	2922      	cmp	r1, #34	; 0x22
 8011cc6:	d825      	bhi.n	8011d14 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8011cc8:	2100      	movs	r1, #0
 8011cca:	463c      	mov	r4, r7
 8011ccc:	261f      	movs	r6, #31
 8011cce:	f10d 0c04 	add.w	ip, sp, #4
 8011cd2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011cd6:	1e71      	subs	r1, r6, #1
 8011cd8:	fb94 fef3 	sdiv	lr, r4, r3
 8011cdc:	fb03 441e 	mls	r4, r3, lr, r4
 8011ce0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8011ce4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8011ce8:	b2ec      	uxtb	r4, r5
 8011cea:	2d09      	cmp	r5, #9
 8011cec:	bfd4      	ite	le
 8011cee:	3430      	addle	r4, #48	; 0x30
 8011cf0:	3457      	addgt	r4, #87	; 0x57
 8011cf2:	b2e4      	uxtb	r4, r4
 8011cf4:	f80c 4006 	strb.w	r4, [ip, r6]
 8011cf8:	4674      	mov	r4, lr
 8011cfa:	b96c      	cbnz	r4, 8011d18 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8011cfc:	2f00      	cmp	r7, #0
 8011cfe:	da05      	bge.n	8011d0c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8011d00:	ab0a      	add	r3, sp, #40	; 0x28
 8011d02:	4419      	add	r1, r3
 8011d04:	232d      	movs	r3, #45	; 0x2d
 8011d06:	f801 3c24 	strb.w	r3, [r1, #-36]
 8011d0a:	1eb1      	subs	r1, r6, #2
 8011d0c:	3101      	adds	r1, #1
 8011d0e:	4461      	add	r1, ip
 8011d10:	f7ff ffa3 	bl	8011c5a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8011d14:	b00b      	add	sp, #44	; 0x2c
 8011d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d18:	460e      	mov	r6, r1
 8011d1a:	e7dc      	b.n	8011cd6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08011d1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8011d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	b085      	sub	sp, #20
 8011d22:	4691      	mov	r9, r2
 8011d24:	6802      	ldr	r2, [r0, #0]
 8011d26:	4688      	mov	r8, r1
 8011d28:	461c      	mov	r4, r3
 8011d2a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8011d2e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8011d32:	4683      	mov	fp, r0
 8011d34:	4610      	mov	r0, r2
 8011d36:	9103      	str	r1, [sp, #12]
 8011d38:	9302      	str	r3, [sp, #8]
 8011d3a:	9201      	str	r2, [sp, #4]
 8011d3c:	f7ff ff80 	bl	8011c40 <_ZN8touchgfx7Unicode6strlenEPKt>
 8011d40:	f1b8 0f00 	cmp.w	r8, #0
 8011d44:	bf0c      	ite	eq
 8011d46:	4684      	moveq	ip, r0
 8011d48:	f100 0c01 	addne.w	ip, r0, #1
 8011d4c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8011d50:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8011d54:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011d56:	fa1f fc8c 	uxth.w	ip, ip
 8011d5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011d5c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8011d60:	9903      	ldr	r1, [sp, #12]
 8011d62:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011d66:	d041      	beq.n	8011dec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8011d68:	d834      	bhi.n	8011dd4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8011d6a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8011d6e:	d059      	beq.n	8011e24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8011d70:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8011d74:	d03a      	beq.n	8011dec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8011d76:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8011d7a:	d034      	beq.n	8011de6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8011d7c:	2400      	movs	r4, #0
 8011d7e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8011d82:	3a01      	subs	r2, #1
 8011d84:	b169      	cbz	r1, 8011da2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011d86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d88:	458c      	cmp	ip, r1
 8011d8a:	da09      	bge.n	8011da0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8011d8c:	eba1 010c 	sub.w	r1, r1, ip
 8011d90:	b289      	uxth	r1, r1
 8011d92:	b933      	cbnz	r3, 8011da2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011d94:	2e00      	cmp	r6, #0
 8011d96:	d051      	beq.n	8011e3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d04f      	beq.n	8011e3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8011d9c:	440c      	add	r4, r1
 8011d9e:	b2a4      	uxth	r4, r4
 8011da0:	2100      	movs	r1, #0
 8011da2:	682b      	ldr	r3, [r5, #0]
 8011da4:	4293      	cmp	r3, r2
 8011da6:	da07      	bge.n	8011db8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8011da8:	f1b8 0f00 	cmp.w	r8, #0
 8011dac:	d004      	beq.n	8011db8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8011dae:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8011db2:	682b      	ldr	r3, [r5, #0]
 8011db4:	3301      	adds	r3, #1
 8011db6:	602b      	str	r3, [r5, #0]
 8011db8:	2730      	movs	r7, #48	; 0x30
 8011dba:	2c00      	cmp	r4, #0
 8011dbc:	d04e      	beq.n	8011e5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011dbe:	682e      	ldr	r6, [r5, #0]
 8011dc0:	3c01      	subs	r4, #1
 8011dc2:	42b2      	cmp	r2, r6
 8011dc4:	b2a4      	uxth	r4, r4
 8011dc6:	dd49      	ble.n	8011e5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011dc8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8011dcc:	682b      	ldr	r3, [r5, #0]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	602b      	str	r3, [r5, #0]
 8011dd2:	e7f2      	b.n	8011dba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8011dd4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8011dd8:	d01d      	beq.n	8011e16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8011dda:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8011dde:	d002      	beq.n	8011de6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8011de0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8011de4:	e7c9      	b.n	8011d7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8011de6:	4684      	mov	ip, r0
 8011de8:	f04f 0800 	mov.w	r8, #0
 8011dec:	2c00      	cmp	r4, #0
 8011dee:	d0c6      	beq.n	8011d7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011df0:	b947      	cbnz	r7, 8011e04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8011df2:	2801      	cmp	r0, #1
 8011df4:	d106      	bne.n	8011e04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8011df6:	8814      	ldrh	r4, [r2, #0]
 8011df8:	2c30      	cmp	r4, #48	; 0x30
 8011dfa:	bf02      	ittt	eq
 8011dfc:	3202      	addeq	r2, #2
 8011dfe:	4638      	moveq	r0, r7
 8011e00:	f8cb 2000 	streq.w	r2, [fp]
 8011e04:	45bc      	cmp	ip, r7
 8011e06:	da14      	bge.n	8011e32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8011e08:	b2bf      	uxth	r7, r7
 8011e0a:	eba7 040c 	sub.w	r4, r7, ip
 8011e0e:	46bc      	mov	ip, r7
 8011e10:	b2a4      	uxth	r4, r4
 8011e12:	2600      	movs	r6, #0
 8011e14:	e7b3      	b.n	8011d7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011e16:	4684      	mov	ip, r0
 8011e18:	b16c      	cbz	r4, 8011e36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8011e1a:	42b8      	cmp	r0, r7
 8011e1c:	dd00      	ble.n	8011e20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8011e1e:	b2b8      	uxth	r0, r7
 8011e20:	2400      	movs	r4, #0
 8011e22:	e003      	b.n	8011e2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8011e24:	f04f 0c01 	mov.w	ip, #1
 8011e28:	2400      	movs	r4, #0
 8011e2a:	4660      	mov	r0, ip
 8011e2c:	4626      	mov	r6, r4
 8011e2e:	46a0      	mov	r8, r4
 8011e30:	e7a5      	b.n	8011d7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011e32:	2400      	movs	r4, #0
 8011e34:	e7ed      	b.n	8011e12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8011e36:	4626      	mov	r6, r4
 8011e38:	46a0      	mov	r8, r4
 8011e3a:	e7a0      	b.n	8011d7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011e3c:	2900      	cmp	r1, #0
 8011e3e:	d0b0      	beq.n	8011da2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011e40:	2720      	movs	r7, #32
 8011e42:	682e      	ldr	r6, [r5, #0]
 8011e44:	2900      	cmp	r1, #0
 8011e46:	d0ac      	beq.n	8011da2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011e48:	3901      	subs	r1, #1
 8011e4a:	4296      	cmp	r6, r2
 8011e4c:	b289      	uxth	r1, r1
 8011e4e:	daa7      	bge.n	8011da0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8011e50:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8011e54:	682b      	ldr	r3, [r5, #0]
 8011e56:	3301      	adds	r3, #1
 8011e58:	602b      	str	r3, [r5, #0]
 8011e5a:	e7f2      	b.n	8011e42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8011e5c:	b188      	cbz	r0, 8011e82 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8011e5e:	682b      	ldr	r3, [r5, #0]
 8011e60:	3801      	subs	r0, #1
 8011e62:	429a      	cmp	r2, r3
 8011e64:	b280      	uxth	r0, r0
 8011e66:	dd0c      	ble.n	8011e82 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8011e68:	f8db 3000 	ldr.w	r3, [fp]
 8011e6c:	1c9c      	adds	r4, r3, #2
 8011e6e:	f8cb 4000 	str.w	r4, [fp]
 8011e72:	881c      	ldrh	r4, [r3, #0]
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8011e7a:	682b      	ldr	r3, [r5, #0]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	602b      	str	r3, [r5, #0]
 8011e80:	e7ec      	b.n	8011e5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011e82:	2620      	movs	r6, #32
 8011e84:	b151      	cbz	r1, 8011e9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8011e86:	6828      	ldr	r0, [r5, #0]
 8011e88:	3901      	subs	r1, #1
 8011e8a:	4282      	cmp	r2, r0
 8011e8c:	b289      	uxth	r1, r1
 8011e8e:	dd05      	ble.n	8011e9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8011e90:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8011e94:	682b      	ldr	r3, [r5, #0]
 8011e96:	3301      	adds	r3, #1
 8011e98:	602b      	str	r3, [r5, #0]
 8011e9a:	e7f3      	b.n	8011e84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8011e9c:	b005      	add	sp, #20
 8011e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8011ea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ea6:	2400      	movs	r4, #0
 8011ea8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8011eac:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8011eb0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8011eb4:	8014      	strh	r4, [r2, #0]
 8011eb6:	701c      	strb	r4, [r3, #0]
 8011eb8:	f888 4000 	strb.w	r4, [r8]
 8011ebc:	f88c 4000 	strb.w	r4, [ip]
 8011ec0:	f88e 4000 	strb.w	r4, [lr]
 8011ec4:	703c      	strb	r4, [r7, #0]
 8011ec6:	6804      	ldr	r4, [r0, #0]
 8011ec8:	b1a4      	cbz	r4, 8011ef4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8011eca:	8824      	ldrh	r4, [r4, #0]
 8011ecc:	f04f 0901 	mov.w	r9, #1
 8011ed0:	b314      	cbz	r4, 8011f18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011ed2:	2c2b      	cmp	r4, #43	; 0x2b
 8011ed4:	d001      	beq.n	8011eda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8011ed6:	2c20      	cmp	r4, #32
 8011ed8:	d110      	bne.n	8011efc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8011eda:	8014      	strh	r4, [r2, #0]
 8011edc:	6804      	ldr	r4, [r0, #0]
 8011ede:	b10c      	cbz	r4, 8011ee4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8011ee0:	3402      	adds	r4, #2
 8011ee2:	6004      	str	r4, [r0, #0]
 8011ee4:	680c      	ldr	r4, [r1, #0]
 8011ee6:	b10c      	cbz	r4, 8011eec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8011ee8:	3401      	adds	r4, #1
 8011eea:	600c      	str	r4, [r1, #0]
 8011eec:	6804      	ldr	r4, [r0, #0]
 8011eee:	b17c      	cbz	r4, 8011f10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8011ef0:	8824      	ldrh	r4, [r4, #0]
 8011ef2:	e7ed      	b.n	8011ed0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8011ef4:	680c      	ldr	r4, [r1, #0]
 8011ef6:	b17c      	cbz	r4, 8011f18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011ef8:	7824      	ldrb	r4, [r4, #0]
 8011efa:	e7e7      	b.n	8011ecc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8011efc:	2c2d      	cmp	r4, #45	; 0x2d
 8011efe:	d102      	bne.n	8011f06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8011f00:	f883 9000 	strb.w	r9, [r3]
 8011f04:	e7ea      	b.n	8011edc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8011f06:	2c23      	cmp	r4, #35	; 0x23
 8011f08:	d107      	bne.n	8011f1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8011f0a:	f888 9000 	strb.w	r9, [r8]
 8011f0e:	e7e5      	b.n	8011edc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8011f10:	680c      	ldr	r4, [r1, #0]
 8011f12:	b10c      	cbz	r4, 8011f18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011f14:	7824      	ldrb	r4, [r4, #0]
 8011f16:	e7db      	b.n	8011ed0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8011f18:	2400      	movs	r4, #0
 8011f1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011f1e:	2b09      	cmp	r3, #9
 8011f20:	d901      	bls.n	8011f26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8011f22:	2c2a      	cmp	r4, #42	; 0x2a
 8011f24:	d122      	bne.n	8011f6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011f26:	2301      	movs	r3, #1
 8011f28:	2c30      	cmp	r4, #48	; 0x30
 8011f2a:	f88e 3000 	strb.w	r3, [lr]
 8011f2e:	d10d      	bne.n	8011f4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8011f30:	f88c 3000 	strb.w	r3, [ip]
 8011f34:	6803      	ldr	r3, [r0, #0]
 8011f36:	b10b      	cbz	r3, 8011f3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8011f38:	3302      	adds	r3, #2
 8011f3a:	6003      	str	r3, [r0, #0]
 8011f3c:	680b      	ldr	r3, [r1, #0]
 8011f3e:	b10b      	cbz	r3, 8011f44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8011f40:	3301      	adds	r3, #1
 8011f42:	600b      	str	r3, [r1, #0]
 8011f44:	6803      	ldr	r3, [r0, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d02f      	beq.n	8011faa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8011f4a:	881c      	ldrh	r4, [r3, #0]
 8011f4c:	2c2a      	cmp	r4, #42	; 0x2a
 8011f4e:	d135      	bne.n	8011fbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8011f50:	f04f 33ff 	mov.w	r3, #4294967295
 8011f54:	6033      	str	r3, [r6, #0]
 8011f56:	6803      	ldr	r3, [r0, #0]
 8011f58:	b10b      	cbz	r3, 8011f5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8011f5a:	3302      	adds	r3, #2
 8011f5c:	6003      	str	r3, [r0, #0]
 8011f5e:	680b      	ldr	r3, [r1, #0]
 8011f60:	b10b      	cbz	r3, 8011f66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8011f62:	3301      	adds	r3, #1
 8011f64:	600b      	str	r3, [r1, #0]
 8011f66:	6803      	ldr	r3, [r0, #0]
 8011f68:	b31b      	cbz	r3, 8011fb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8011f6a:	881c      	ldrh	r4, [r3, #0]
 8011f6c:	2c2e      	cmp	r4, #46	; 0x2e
 8011f6e:	d11a      	bne.n	8011fa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011f70:	2301      	movs	r3, #1
 8011f72:	703b      	strb	r3, [r7, #0]
 8011f74:	6803      	ldr	r3, [r0, #0]
 8011f76:	b10b      	cbz	r3, 8011f7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8011f78:	3302      	adds	r3, #2
 8011f7a:	6003      	str	r3, [r0, #0]
 8011f7c:	680b      	ldr	r3, [r1, #0]
 8011f7e:	b10b      	cbz	r3, 8011f84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8011f80:	3301      	adds	r3, #1
 8011f82:	600b      	str	r3, [r1, #0]
 8011f84:	6803      	ldr	r3, [r0, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d036      	beq.n	8011ff8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f8e:	d137      	bne.n	8012000 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8011f90:	f04f 33ff 	mov.w	r3, #4294967295
 8011f94:	602b      	str	r3, [r5, #0]
 8011f96:	6803      	ldr	r3, [r0, #0]
 8011f98:	b10b      	cbz	r3, 8011f9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8011f9a:	3302      	adds	r3, #2
 8011f9c:	6003      	str	r3, [r0, #0]
 8011f9e:	680b      	ldr	r3, [r1, #0]
 8011fa0:	b10b      	cbz	r3, 8011fa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	600b      	str	r3, [r1, #0]
 8011fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011faa:	680c      	ldr	r4, [r1, #0]
 8011fac:	b134      	cbz	r4, 8011fbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8011fae:	7824      	ldrb	r4, [r4, #0]
 8011fb0:	e7cc      	b.n	8011f4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8011fb2:	680b      	ldr	r3, [r1, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d0f6      	beq.n	8011fa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011fb8:	781c      	ldrb	r4, [r3, #0]
 8011fba:	e7d7      	b.n	8011f6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	220a      	movs	r2, #10
 8011fc0:	6033      	str	r3, [r6, #0]
 8011fc2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011fc6:	fa1f f38c 	uxth.w	r3, ip
 8011fca:	2b09      	cmp	r3, #9
 8011fcc:	d8ce      	bhi.n	8011f6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011fce:	6833      	ldr	r3, [r6, #0]
 8011fd0:	fb02 c303 	mla	r3, r2, r3, ip
 8011fd4:	6033      	str	r3, [r6, #0]
 8011fd6:	6803      	ldr	r3, [r0, #0]
 8011fd8:	b10b      	cbz	r3, 8011fde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8011fda:	3302      	adds	r3, #2
 8011fdc:	6003      	str	r3, [r0, #0]
 8011fde:	680b      	ldr	r3, [r1, #0]
 8011fe0:	b10b      	cbz	r3, 8011fe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	600b      	str	r3, [r1, #0]
 8011fe6:	6803      	ldr	r3, [r0, #0]
 8011fe8:	b10b      	cbz	r3, 8011fee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8011fea:	881c      	ldrh	r4, [r3, #0]
 8011fec:	e7e9      	b.n	8011fc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8011fee:	680c      	ldr	r4, [r1, #0]
 8011ff0:	2c00      	cmp	r4, #0
 8011ff2:	d0e6      	beq.n	8011fc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8011ff4:	7824      	ldrb	r4, [r4, #0]
 8011ff6:	e7e4      	b.n	8011fc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8011ff8:	680b      	ldr	r3, [r1, #0]
 8011ffa:	b10b      	cbz	r3, 8012000 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	e7c5      	b.n	8011f8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8012000:	2200      	movs	r2, #0
 8012002:	240a      	movs	r4, #10
 8012004:	602a      	str	r2, [r5, #0]
 8012006:	3b30      	subs	r3, #48	; 0x30
 8012008:	682a      	ldr	r2, [r5, #0]
 801200a:	b29e      	uxth	r6, r3
 801200c:	2e09      	cmp	r6, #9
 801200e:	d813      	bhi.n	8012038 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8012010:	fb04 3302 	mla	r3, r4, r2, r3
 8012014:	602b      	str	r3, [r5, #0]
 8012016:	6803      	ldr	r3, [r0, #0]
 8012018:	b10b      	cbz	r3, 801201e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801201a:	3302      	adds	r3, #2
 801201c:	6003      	str	r3, [r0, #0]
 801201e:	680b      	ldr	r3, [r1, #0]
 8012020:	b10b      	cbz	r3, 8012026 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8012022:	3301      	adds	r3, #1
 8012024:	600b      	str	r3, [r1, #0]
 8012026:	6803      	ldr	r3, [r0, #0]
 8012028:	b10b      	cbz	r3, 801202e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801202a:	881b      	ldrh	r3, [r3, #0]
 801202c:	e7eb      	b.n	8012006 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801202e:	680b      	ldr	r3, [r1, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d0e8      	beq.n	8012006 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	e7e6      	b.n	8012006 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8012038:	2a06      	cmp	r2, #6
 801203a:	bfa8      	it	ge
 801203c:	2206      	movge	r2, #6
 801203e:	602a      	str	r2, [r5, #0]
 8012040:	e7b1      	b.n	8011fa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08012042 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8012042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012046:	b0a3      	sub	sp, #140	; 0x8c
 8012048:	2600      	movs	r6, #0
 801204a:	4607      	mov	r7, r0
 801204c:	4688      	mov	r8, r1
 801204e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8012052:	4631      	mov	r1, r6
 8012054:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8012056:	4648      	mov	r0, r9
 8012058:	960d      	str	r6, [sp, #52]	; 0x34
 801205a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801205e:	2242      	movs	r2, #66	; 0x42
 8012060:	f009 f898 	bl	801b194 <memset>
 8012064:	b15f      	cbz	r7, 801207e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8012066:	f108 3aff 	add.w	sl, r8, #4294967295
 801206a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801206c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801206e:	b152      	cbz	r2, 8012086 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8012070:	8812      	ldrh	r2, [r2, #0]
 8012072:	b10a      	cbz	r2, 8012078 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8012074:	459a      	cmp	sl, r3
 8012076:	dc2e      	bgt.n	80120d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8012078:	2200      	movs	r2, #0
 801207a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801207e:	4638      	mov	r0, r7
 8012080:	b023      	add	sp, #140	; 0x8c
 8012082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012086:	9a08      	ldr	r2, [sp, #32]
 8012088:	2a00      	cmp	r2, #0
 801208a:	d0f5      	beq.n	8012078 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801208c:	7812      	ldrb	r2, [r2, #0]
 801208e:	e7f0      	b.n	8012072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8012090:	2d00      	cmp	r5, #0
 8012092:	d0ea      	beq.n	801206a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012094:	782a      	ldrb	r2, [r5, #0]
 8012096:	b142      	cbz	r2, 80120aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8012098:	2a25      	cmp	r2, #37	; 0x25
 801209a:	d001      	beq.n	80120a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801209c:	459a      	cmp	sl, r3
 801209e:	dc08      	bgt.n	80120b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80120a0:	f1bb 0f00 	cmp.w	fp, #0
 80120a4:	d121      	bne.n	80120ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80120a6:	2d00      	cmp	r5, #0
 80120a8:	d0df      	beq.n	801206a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80120aa:	782a      	ldrb	r2, [r5, #0]
 80120ac:	f04f 0b00 	mov.w	fp, #0
 80120b0:	e01d      	b.n	80120ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80120b2:	f1bb 0f00 	cmp.w	fp, #0
 80120b6:	d077      	beq.n	80121a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 80120b8:	f8bb 2000 	ldrh.w	r2, [fp]
 80120bc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80120c0:	f1bb 0f00 	cmp.w	fp, #0
 80120c4:	d002      	beq.n	80120cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80120c6:	f10b 0202 	add.w	r2, fp, #2
 80120ca:	9209      	str	r2, [sp, #36]	; 0x24
 80120cc:	b10d      	cbz	r5, 80120d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80120ce:	3501      	adds	r5, #1
 80120d0:	9508      	str	r5, [sp, #32]
 80120d2:	3301      	adds	r3, #1
 80120d4:	930d      	str	r3, [sp, #52]	; 0x34
 80120d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120d8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80120dc:	f1bb 0f00 	cmp.w	fp, #0
 80120e0:	d0d6      	beq.n	8012090 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80120e2:	f8bb 2000 	ldrh.w	r2, [fp]
 80120e6:	2a00      	cmp	r2, #0
 80120e8:	d1d6      	bne.n	8012098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80120ea:	f8bb 2000 	ldrh.w	r2, [fp]
 80120ee:	2a00      	cmp	r2, #0
 80120f0:	d0bb      	beq.n	801206a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80120f2:	459a      	cmp	sl, r3
 80120f4:	ddb9      	ble.n	801206a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80120f6:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80120fa:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80120fe:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8012102:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8012106:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801210a:	960e      	str	r6, [sp, #56]	; 0x38
 801210c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8012110:	960f      	str	r6, [sp, #60]	; 0x3c
 8012112:	f1bb 0f00 	cmp.w	fp, #0
 8012116:	d002      	beq.n	801211e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8012118:	f10b 0302 	add.w	r3, fp, #2
 801211c:	9309      	str	r3, [sp, #36]	; 0x24
 801211e:	b10d      	cbz	r5, 8012124 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8012120:	1c6b      	adds	r3, r5, #1
 8012122:	9308      	str	r3, [sp, #32]
 8012124:	ab0f      	add	r3, sp, #60	; 0x3c
 8012126:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801212a:	a908      	add	r1, sp, #32
 801212c:	a809      	add	r0, sp, #36	; 0x24
 801212e:	9305      	str	r3, [sp, #20]
 8012130:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8012134:	9304      	str	r3, [sp, #16]
 8012136:	ab0e      	add	r3, sp, #56	; 0x38
 8012138:	9303      	str	r3, [sp, #12]
 801213a:	ab0c      	add	r3, sp, #48	; 0x30
 801213c:	9302      	str	r3, [sp, #8]
 801213e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8012142:	9301      	str	r3, [sp, #4]
 8012144:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8012148:	9300      	str	r3, [sp, #0]
 801214a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801214e:	f7ff fea8 	bl	8011ea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8012152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012154:	2b00      	cmp	r3, #0
 8012156:	bfbf      	itttt	lt
 8012158:	6823      	ldrlt	r3, [r4, #0]
 801215a:	3404      	addlt	r4, #4
 801215c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8012160:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012164:	2b00      	cmp	r3, #0
 8012166:	bfbe      	ittt	lt
 8012168:	6823      	ldrlt	r3, [r4, #0]
 801216a:	3404      	addlt	r4, #4
 801216c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8012170:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8012174:	bfb8      	it	lt
 8012176:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8012178:	b1d9      	cbz	r1, 80121b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801217a:	880b      	ldrh	r3, [r1, #0]
 801217c:	2b69      	cmp	r3, #105	; 0x69
 801217e:	d01f      	beq.n	80121c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012180:	d82f      	bhi.n	80121e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8012182:	2b58      	cmp	r3, #88	; 0x58
 8012184:	d01c      	beq.n	80121c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012186:	d818      	bhi.n	80121ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8012188:	2b25      	cmp	r3, #37	; 0x25
 801218a:	d034      	beq.n	80121f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801218c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801218e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8012192:	f1bb 0f00 	cmp.w	fp, #0
 8012196:	f000 80b7 	beq.w	8012308 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801219a:	f8bb 5000 	ldrh.w	r5, [fp]
 801219e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80121a2:	3301      	adds	r3, #1
 80121a4:	930d      	str	r3, [sp, #52]	; 0x34
 80121a6:	e029      	b.n	80121fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80121a8:	b10d      	cbz	r5, 80121ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80121aa:	782a      	ldrb	r2, [r5, #0]
 80121ac:	e786      	b.n	80120bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80121ae:	462a      	mov	r2, r5
 80121b0:	e784      	b.n	80120bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80121b2:	2a00      	cmp	r2, #0
 80121b4:	d0ea      	beq.n	801218c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80121b6:	7813      	ldrb	r3, [r2, #0]
 80121b8:	e7e0      	b.n	801217c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 80121ba:	3b63      	subs	r3, #99	; 0x63
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d8e5      	bhi.n	801218c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80121c0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80121c4:	b329      	cbz	r1, 8012212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 80121c6:	880b      	ldrh	r3, [r1, #0]
 80121c8:	2b69      	cmp	r3, #105	; 0x69
 80121ca:	d063      	beq.n	8012294 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80121cc:	d825      	bhi.n	801221a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 80121ce:	2b63      	cmp	r3, #99	; 0x63
 80121d0:	d038      	beq.n	8012244 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 80121d2:	2b64      	cmp	r3, #100	; 0x64
 80121d4:	d05e      	beq.n	8012294 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80121d6:	2b58      	cmp	r3, #88	; 0x58
 80121d8:	d07a      	beq.n	80122d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 80121da:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80121de:	4625      	mov	r5, r4
 80121e0:	e036      	b.n	8012250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80121e2:	2b73      	cmp	r3, #115	; 0x73
 80121e4:	d0ec      	beq.n	80121c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80121e6:	d802      	bhi.n	80121ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80121e8:	2b6f      	cmp	r3, #111	; 0x6f
 80121ea:	d1cf      	bne.n	801218c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80121ec:	e7e8      	b.n	80121c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80121ee:	2b75      	cmp	r3, #117	; 0x75
 80121f0:	d0e6      	beq.n	80121c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80121f2:	2b78      	cmp	r3, #120	; 0x78
 80121f4:	e7f9      	b.n	80121ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 80121f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121f8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80121fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121fe:	b10b      	cbz	r3, 8012204 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8012200:	3302      	adds	r3, #2
 8012202:	9309      	str	r3, [sp, #36]	; 0x24
 8012204:	9b08      	ldr	r3, [sp, #32]
 8012206:	2b00      	cmp	r3, #0
 8012208:	f43f af2f 	beq.w	801206a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801220c:	3301      	adds	r3, #1
 801220e:	9308      	str	r3, [sp, #32]
 8012210:	e72b      	b.n	801206a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012212:	2a00      	cmp	r2, #0
 8012214:	d0e1      	beq.n	80121da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012216:	7813      	ldrb	r3, [r2, #0]
 8012218:	e7d6      	b.n	80121c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801221a:	2b73      	cmp	r3, #115	; 0x73
 801221c:	d036      	beq.n	801228c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801221e:	d807      	bhi.n	8012230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8012220:	2b6f      	cmp	r3, #111	; 0x6f
 8012222:	d1da      	bne.n	80121da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012226:	1d25      	adds	r5, r4, #4
 8012228:	2308      	movs	r3, #8
 801222a:	eba8 0202 	sub.w	r2, r8, r2
 801222e:	e049      	b.n	80122c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8012230:	2b75      	cmp	r3, #117	; 0x75
 8012232:	d042      	beq.n	80122ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8012234:	2b78      	cmp	r3, #120	; 0x78
 8012236:	d1d0      	bne.n	80121da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801223a:	1d25      	adds	r5, r4, #4
 801223c:	2310      	movs	r3, #16
 801223e:	eba8 0202 	sub.w	r2, r8, r2
 8012242:	e03f      	b.n	80122c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8012244:	7823      	ldrb	r3, [r4, #0]
 8012246:	1d25      	adds	r5, r4, #4
 8012248:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801224c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8012250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012252:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8012256:	2b00      	cmp	r3, #0
 8012258:	d051      	beq.n	80122fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801225a:	881a      	ldrh	r2, [r3, #0]
 801225c:	a80d      	add	r0, sp, #52	; 0x34
 801225e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8012262:	462c      	mov	r4, r5
 8012264:	9005      	str	r0, [sp, #20]
 8012266:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801226a:	9004      	str	r0, [sp, #16]
 801226c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801226e:	9003      	str	r0, [sp, #12]
 8012270:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8012274:	9002      	str	r0, [sp, #8]
 8012276:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012278:	9001      	str	r0, [sp, #4]
 801227a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801227e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8012282:	9000      	str	r0, [sp, #0]
 8012284:	a810      	add	r0, sp, #64	; 0x40
 8012286:	f7ff fd49 	bl	8011d1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801228a:	e7b7      	b.n	80121fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801228c:	1d25      	adds	r5, r4, #4
 801228e:	6823      	ldr	r3, [r4, #0]
 8012290:	9310      	str	r3, [sp, #64]	; 0x40
 8012292:	e7dd      	b.n	8012250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012296:	230a      	movs	r3, #10
 8012298:	4649      	mov	r1, r9
 801229a:	6820      	ldr	r0, [r4, #0]
 801229c:	eba8 0202 	sub.w	r2, r8, r2
 80122a0:	1d25      	adds	r5, r4, #4
 80122a2:	b292      	uxth	r2, r2
 80122a4:	f7ff fd08 	bl	8011cb8 <_ZN8touchgfx7Unicode4itoaElPtti>
 80122a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80122ac:	2b2d      	cmp	r3, #45	; 0x2d
 80122ae:	d1cf      	bne.n	8012250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80122b0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80122b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122b6:	3302      	adds	r3, #2
 80122b8:	e7ea      	b.n	8012290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80122ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122bc:	1d25      	adds	r5, r4, #4
 80122be:	230a      	movs	r3, #10
 80122c0:	eba8 0202 	sub.w	r2, r8, r2
 80122c4:	b292      	uxth	r2, r2
 80122c6:	4649      	mov	r1, r9
 80122c8:	6820      	ldr	r0, [r4, #0]
 80122ca:	f7ff fcd7 	bl	8011c7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80122ce:	e7bf      	b.n	8012250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80122d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122d2:	2310      	movs	r3, #16
 80122d4:	4649      	mov	r1, r9
 80122d6:	6820      	ldr	r0, [r4, #0]
 80122d8:	eba8 0202 	sub.w	r2, r8, r2
 80122dc:	1d25      	adds	r5, r4, #4
 80122de:	b292      	uxth	r2, r2
 80122e0:	f7ff fccc 	bl	8011c7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80122e4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80122e8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d0af      	beq.n	8012250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80122f0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80122f4:	2919      	cmp	r1, #25
 80122f6:	d8f7      	bhi.n	80122e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80122f8:	3b20      	subs	r3, #32
 80122fa:	8013      	strh	r3, [r2, #0]
 80122fc:	e7f4      	b.n	80122e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80122fe:	9a08      	ldr	r2, [sp, #32]
 8012300:	2a00      	cmp	r2, #0
 8012302:	d0ab      	beq.n	801225c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8012304:	7812      	ldrb	r2, [r2, #0]
 8012306:	e7a9      	b.n	801225c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8012308:	2d00      	cmp	r5, #0
 801230a:	f43f af48 	beq.w	801219e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801230e:	782d      	ldrb	r5, [r5, #0]
 8012310:	e745      	b.n	801219e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08012312 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8012312:	b507      	push	{r0, r1, r2, lr}
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	4613      	mov	r3, r2
 8012318:	2200      	movs	r2, #0
 801231a:	f7ff fe92 	bl	8012042 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801231e:	b003      	add	sp, #12
 8012320:	f85d fb04 	ldr.w	pc, [sp], #4

08012324 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8012324:	b40c      	push	{r2, r3}
 8012326:	b507      	push	{r0, r1, r2, lr}
 8012328:	ab04      	add	r3, sp, #16
 801232a:	f853 2b04 	ldr.w	r2, [r3], #4
 801232e:	9301      	str	r3, [sp, #4]
 8012330:	f7ff ffef 	bl	8012312 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8012334:	b003      	add	sp, #12
 8012336:	f85d eb04 	ldr.w	lr, [sp], #4
 801233a:	b002      	add	sp, #8
 801233c:	4770      	bx	lr
	...

08012340 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 8012340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012344:	b0c3      	sub	sp, #268	; 0x10c
 8012346:	2600      	movs	r6, #0
 8012348:	4607      	mov	r7, r0
 801234a:	4689      	mov	r9, r1
 801234c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012350:	4631      	mov	r1, r6
 8012352:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 8012356:	4640      	mov	r0, r8
 8012358:	960c      	str	r6, [sp, #48]	; 0x30
 801235a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801235e:	22c8      	movs	r2, #200	; 0xc8
 8012360:	f008 ff18 	bl	801b194 <memset>
 8012364:	b16f      	cbz	r7, 8012382 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 8012366:	f04f 0b0a 	mov.w	fp, #10
 801236a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801236c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801236e:	b162      	cbz	r2, 801238a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 8012370:	8812      	ldrh	r2, [r2, #0]
 8012372:	b11a      	cbz	r2, 801237c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 8012374:	f109 31ff 	add.w	r1, r9, #4294967295
 8012378:	4299      	cmp	r1, r3
 801237a:	dc26      	bgt.n	80123ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801237c:	2200      	movs	r2, #0
 801237e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8012382:	4638      	mov	r0, r7
 8012384:	b043      	add	sp, #268	; 0x10c
 8012386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238a:	9a08      	ldr	r2, [sp, #32]
 801238c:	2a00      	cmp	r2, #0
 801238e:	d0f5      	beq.n	801237c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 8012390:	7812      	ldrb	r2, [r2, #0]
 8012392:	e7ee      	b.n	8012372 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 8012394:	2c00      	cmp	r4, #0
 8012396:	d0e8      	beq.n	801236a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8012398:	7822      	ldrb	r2, [r4, #0]
 801239a:	b132      	cbz	r2, 80123aa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801239c:	2a25      	cmp	r2, #37	; 0x25
 801239e:	d001      	beq.n	80123a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 80123a0:	4299      	cmp	r1, r3
 80123a2:	dc05      	bgt.n	80123b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 80123a4:	b9cd      	cbnz	r5, 80123da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 80123a6:	2c00      	cmp	r4, #0
 80123a8:	d0df      	beq.n	801236a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80123aa:	7822      	ldrb	r2, [r4, #0]
 80123ac:	2500      	movs	r5, #0
 80123ae:	e015      	b.n	80123dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 80123b0:	2d00      	cmp	r5, #0
 80123b2:	d073      	beq.n	801249c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 80123b4:	882a      	ldrh	r2, [r5, #0]
 80123b6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80123ba:	b10d      	cbz	r5, 80123c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 80123bc:	3502      	adds	r5, #2
 80123be:	9509      	str	r5, [sp, #36]	; 0x24
 80123c0:	b10c      	cbz	r4, 80123c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 80123c2:	3401      	adds	r4, #1
 80123c4:	9408      	str	r4, [sp, #32]
 80123c6:	3301      	adds	r3, #1
 80123c8:	930c      	str	r3, [sp, #48]	; 0x30
 80123ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123cc:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80123d0:	2d00      	cmp	r5, #0
 80123d2:	d0df      	beq.n	8012394 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 80123d4:	882a      	ldrh	r2, [r5, #0]
 80123d6:	2a00      	cmp	r2, #0
 80123d8:	d1e0      	bne.n	801239c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 80123da:	882a      	ldrh	r2, [r5, #0]
 80123dc:	2a00      	cmp	r2, #0
 80123de:	d0c4      	beq.n	801236a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80123e0:	4299      	cmp	r1, r3
 80123e2:	ddc2      	ble.n	801236a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80123e4:	2300      	movs	r3, #0
 80123e6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80123ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123f2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80123f6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80123fa:	930d      	str	r3, [sp, #52]	; 0x34
 80123fc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8012400:	930e      	str	r3, [sp, #56]	; 0x38
 8012402:	b10d      	cbz	r5, 8012408 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 8012404:	1cab      	adds	r3, r5, #2
 8012406:	9309      	str	r3, [sp, #36]	; 0x24
 8012408:	b10c      	cbz	r4, 801240e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801240a:	1c63      	adds	r3, r4, #1
 801240c:	9308      	str	r3, [sp, #32]
 801240e:	ab0e      	add	r3, sp, #56	; 0x38
 8012410:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8012414:	a908      	add	r1, sp, #32
 8012416:	a809      	add	r0, sp, #36	; 0x24
 8012418:	9305      	str	r3, [sp, #20]
 801241a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801241e:	9304      	str	r3, [sp, #16]
 8012420:	ab0d      	add	r3, sp, #52	; 0x34
 8012422:	9303      	str	r3, [sp, #12]
 8012424:	ab0b      	add	r3, sp, #44	; 0x2c
 8012426:	9302      	str	r3, [sp, #8]
 8012428:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801242c:	9301      	str	r3, [sp, #4]
 801242e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8012432:	9300      	str	r3, [sp, #0]
 8012434:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8012438:	f7ff fd33 	bl	8011ea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801243c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801243e:	2b00      	cmp	r3, #0
 8012440:	da0b      	bge.n	801245a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 8012442:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8012446:	3601      	adds	r6, #1
 8012448:	edd3 7a00 	vldr	s15, [r3]
 801244c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012450:	ee17 3a90 	vmov	r3, s15
 8012454:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012458:	930d      	str	r3, [sp, #52]	; 0x34
 801245a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801245c:	2b00      	cmp	r3, #0
 801245e:	da0b      	bge.n	8012478 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 8012460:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8012464:	3601      	adds	r6, #1
 8012466:	edd3 7a00 	vldr	s15, [r3]
 801246a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801246e:	ee17 3a90 	vmov	r3, s15
 8012472:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012476:	930e      	str	r3, [sp, #56]	; 0x38
 8012478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801247a:	b1a3      	cbz	r3, 80124a6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801247c:	881a      	ldrh	r2, [r3, #0]
 801247e:	2a25      	cmp	r2, #37	; 0x25
 8012480:	d016      	beq.n	80124b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 8012482:	2a66      	cmp	r2, #102	; 0x66
 8012484:	d01a      	beq.n	80124bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 8012486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012488:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801248c:	2d00      	cmp	r5, #0
 801248e:	f000 80fc 	beq.w	801268a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34a>
 8012492:	882c      	ldrh	r4, [r5, #0]
 8012494:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8012498:	3301      	adds	r3, #1
 801249a:	e00d      	b.n	80124b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801249c:	b10c      	cbz	r4, 80124a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801249e:	7822      	ldrb	r2, [r4, #0]
 80124a0:	e789      	b.n	80123b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 80124a2:	4622      	mov	r2, r4
 80124a4:	e787      	b.n	80123b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 80124a6:	9b08      	ldr	r3, [sp, #32]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d0ec      	beq.n	8012486 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 80124ac:	781a      	ldrb	r2, [r3, #0]
 80124ae:	e7e6      	b.n	801247e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 80124b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124b2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80124b6:	3302      	adds	r3, #2
 80124b8:	930c      	str	r3, [sp, #48]	; 0x30
 80124ba:	e049      	b.n	8012550 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x210>
 80124bc:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80124c0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80124c4:	3601      	adds	r6, #1
 80124c6:	ed93 7a00 	vldr	s14, [r3]
 80124ca:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80124ce:	b923      	cbnz	r3, 80124da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 80124d0:	2301      	movs	r3, #1
 80124d2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80124d6:	2306      	movs	r3, #6
 80124d8:	930e      	str	r3, [sp, #56]	; 0x38
 80124da:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80124de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80124e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e6:	bf42      	ittt	mi
 80124e8:	eeb1 7a47 	vnegmi.f32	s14, s14
 80124ec:	232d      	movmi	r3, #45	; 0x2d
 80124ee:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 80124f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80124f6:	eef4 6a47 	vcmp.f32	s13, s14
 80124fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fe:	d132      	bne.n	8012566 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 8012500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012504:	eef4 7a47 	vcmp.f32	s15, s14
 8012508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801250c:	d12b      	bne.n	8012566 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 801250e:	4b61      	ldr	r3, [pc, #388]	; (8012694 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x354>)
 8012510:	9310      	str	r3, [sp, #64]	; 0x40
 8012512:	2366      	movs	r3, #102	; 0x66
 8012514:	9311      	str	r3, [sp, #68]	; 0x44
 8012516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012518:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801251c:	2b00      	cmp	r3, #0
 801251e:	f000 80ae 	beq.w	801267e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33e>
 8012522:	881a      	ldrh	r2, [r3, #0]
 8012524:	a80c      	add	r0, sp, #48	; 0x30
 8012526:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801252a:	9005      	str	r0, [sp, #20]
 801252c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 8012530:	9004      	str	r0, [sp, #16]
 8012532:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012534:	9003      	str	r0, [sp, #12]
 8012536:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801253a:	9002      	str	r0, [sp, #8]
 801253c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801253e:	9001      	str	r0, [sp, #4]
 8012540:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8012544:	e9cd 9706 	strd	r9, r7, [sp, #24]
 8012548:	9000      	str	r0, [sp, #0]
 801254a:	a80f      	add	r0, sp, #60	; 0x3c
 801254c:	f7ff fbe6 	bl	8011d1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8012550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012552:	b10b      	cbz	r3, 8012558 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 8012554:	3302      	adds	r3, #2
 8012556:	9309      	str	r3, [sp, #36]	; 0x24
 8012558:	9b08      	ldr	r3, [sp, #32]
 801255a:	2b00      	cmp	r3, #0
 801255c:	f43f af05 	beq.w	801236a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8012560:	3301      	adds	r3, #1
 8012562:	9308      	str	r3, [sp, #32]
 8012564:	e701      	b.n	801236a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8012566:	eeb4 7a47 	vcmp.f32	s14, s14
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256e:	d10b      	bne.n	8012588 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x248>
 8012570:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8012574:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012576:	2300      	movs	r3, #0
 8012578:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012698 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>
 801257c:	4283      	cmp	r3, r0
 801257e:	da07      	bge.n	8012590 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x250>
 8012580:	eec7 7a86 	vdiv.f32	s15, s15, s12
 8012584:	3301      	adds	r3, #1
 8012586:	e7f9      	b.n	801257c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23c>
 8012588:	4b44      	ldr	r3, [pc, #272]	; (801269c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>)
 801258a:	9310      	str	r3, [sp, #64]	; 0x40
 801258c:	236e      	movs	r3, #110	; 0x6e
 801258e:	e7c1      	b.n	8012514 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d4>
 8012590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012598:	eeb0 7a67 	vmov.f32	s14, s15
 801259c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80125a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a4:	da27      	bge.n	80125f6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b6>
 80125a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125a8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80125ac:	2100      	movs	r1, #0
 80125ae:	eba9 0202 	sub.w	r2, r9, r2
 80125b2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80125b6:	b28c      	uxth	r4, r1
 80125b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125bc:	db21      	blt.n	8012602 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 80125be:	1a53      	subs	r3, r2, r1
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	dd1e      	ble.n	8012602 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 80125c4:	2963      	cmp	r1, #99	; 0x63
 80125c6:	d01b      	beq.n	8012600 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 80125c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80125cc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80125d0:	ee17 3a10 	vmov	r3, s14
 80125d4:	2b09      	cmp	r3, #9
 80125d6:	bfa8      	it	ge
 80125d8:	2309      	movge	r3, #9
 80125da:	ee07 3a10 	vmov	s14, r3
 80125de:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80125e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80125e6:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 80125ea:	3101      	adds	r1, #1
 80125ec:	eee7 7a66 	vfms.f32	s15, s14, s13
 80125f0:	eec6 6a86 	vdiv.f32	s13, s13, s12
 80125f4:	e7dd      	b.n	80125b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x272>
 80125f6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80125fa:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80125fe:	e7cd      	b.n	801259c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x25c>
 8012600:	460c      	mov	r4, r1
 8012602:	2a63      	cmp	r2, #99	; 0x63
 8012604:	bfd4      	ite	le
 8012606:	ebc4 0202 	rsble	r2, r4, r2
 801260a:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801260e:	2a00      	cmp	r2, #0
 8012610:	dd30      	ble.n	8012674 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x334>
 8012612:	4603      	mov	r3, r0
 8012614:	2501      	movs	r5, #1
 8012616:	2b00      	cmp	r3, #0
 8012618:	dd0d      	ble.n	8012636 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2f6>
 801261a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801261e:	3b01      	subs	r3, #1
 8012620:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012624:	ee17 1a10 	vmov	r1, s14
 8012628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801262c:	fb0b 1505 	mla	r5, fp, r5, r1
 8012630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012634:	e7ef      	b.n	8012616 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d6>
 8012636:	2800      	cmp	r0, #0
 8012638:	f100 33ff 	add.w	r3, r0, #4294967295
 801263c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012640:	bfac      	ite	ge
 8012642:	1a18      	subge	r0, r3, r0
 8012644:	4618      	movlt	r0, r3
 8012646:	b292      	uxth	r2, r2
 8012648:	230a      	movs	r3, #10
 801264a:	900e      	str	r0, [sp, #56]	; 0x38
 801264c:	eb08 0104 	add.w	r1, r8, r4
 8012650:	4628      	mov	r0, r5
 8012652:	f7ff fb31 	bl	8011cb8 <_ZN8touchgfx7Unicode4itoaElPtti>
 8012656:	2d01      	cmp	r5, #1
 8012658:	dc0a      	bgt.n	8012670 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 801265a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801265e:	2b00      	cmp	r3, #0
 8012660:	bf0c      	ite	eq
 8012662:	2300      	moveq	r3, #0
 8012664:	232e      	movne	r3, #46	; 0x2e
 8012666:	aa42      	add	r2, sp, #264	; 0x108
 8012668:	4414      	add	r4, r2
 801266a:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801266e:	e752      	b.n	8012516 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 8012670:	232e      	movs	r3, #46	; 0x2e
 8012672:	e7f8      	b.n	8012666 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x326>
 8012674:	ab42      	add	r3, sp, #264	; 0x108
 8012676:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801267a:	2300      	movs	r3, #0
 801267c:	e7f5      	b.n	801266a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32a>
 801267e:	9a08      	ldr	r2, [sp, #32]
 8012680:	2a00      	cmp	r2, #0
 8012682:	f43f af4f 	beq.w	8012524 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 8012686:	7812      	ldrb	r2, [r2, #0]
 8012688:	e74c      	b.n	8012524 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 801268a:	2c00      	cmp	r4, #0
 801268c:	f43f af02 	beq.w	8012494 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 8012690:	7824      	ldrb	r4, [r4, #0]
 8012692:	e6ff      	b.n	8012494 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 8012694:	006e0069 	.word	0x006e0069
 8012698:	3f000002 	.word	0x3f000002
 801269c:	0061006e 	.word	0x0061006e

080126a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 80126a0:	b507      	push	{r0, r1, r2, lr}
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	4613      	mov	r3, r2
 80126a6:	2200      	movs	r2, #0
 80126a8:	f7ff fe4a 	bl	8012340 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 80126ac:	b003      	add	sp, #12
 80126ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080126b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80126b4:	4b01      	ldr	r3, [pc, #4]	; (80126bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80126b6:	6018      	str	r0, [r3, #0]
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop
 80126bc:	24006c1c 	.word	0x24006c1c

080126c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80126c0:	4b06      	ldr	r3, [pc, #24]	; (80126dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80126c2:	881a      	ldrh	r2, [r3, #0]
 80126c4:	4282      	cmp	r2, r0
 80126c6:	d807      	bhi.n	80126d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80126c8:	4b05      	ldr	r3, [pc, #20]	; (80126e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80126ca:	881b      	ldrh	r3, [r3, #0]
 80126cc:	4413      	add	r3, r2
 80126ce:	4298      	cmp	r0, r3
 80126d0:	bfac      	ite	ge
 80126d2:	2000      	movge	r0, #0
 80126d4:	2001      	movlt	r0, #1
 80126d6:	4770      	bx	lr
 80126d8:	2000      	movs	r0, #0
 80126da:	4770      	bx	lr
 80126dc:	24006c3c 	.word	0x24006c3c
 80126e0:	24006c40 	.word	0x24006c40

080126e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80126e4:	b508      	push	{r3, lr}
 80126e6:	4601      	mov	r1, r0
 80126e8:	f7ff ffea 	bl	80126c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80126ec:	b118      	cbz	r0, 80126f6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80126ee:	4b02      	ldr	r3, [pc, #8]	; (80126f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80126f6:	bd08      	pop	{r3, pc}
 80126f8:	24006c20 	.word	0x24006c20

080126fc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80126fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012700:	4d28      	ldr	r5, [pc, #160]	; (80127a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8012702:	682b      	ldr	r3, [r5, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d04a      	beq.n	801279e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8012708:	4a27      	ldr	r2, [pc, #156]	; (80127a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801270a:	4e28      	ldr	r6, [pc, #160]	; (80127ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801270c:	8810      	ldrh	r0, [r2, #0]
 801270e:	f8b6 8000 	ldrh.w	r8, [r6]
 8012712:	4c27      	ldr	r4, [pc, #156]	; (80127b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8012714:	4440      	add	r0, r8
 8012716:	4f27      	ldr	r7, [pc, #156]	; (80127b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8012718:	1c41      	adds	r1, r0, #1
 801271a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801271e:	f021 0101 	bic.w	r1, r1, #1
 8012722:	eb03 020e 	add.w	r2, r3, lr
 8012726:	0409      	lsls	r1, r1, #16
 8012728:	6022      	str	r2, [r4, #0]
 801272a:	0c09      	lsrs	r1, r1, #16
 801272c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012730:	eb0e 010c 	add.w	r1, lr, ip
 8012734:	185a      	adds	r2, r3, r1
 8012736:	603a      	str	r2, [r7, #0]
 8012738:	220e      	movs	r2, #14
 801273a:	fb02 f208 	mul.w	r2, r2, r8
 801273e:	3203      	adds	r2, #3
 8012740:	f022 0203 	bic.w	r2, r2, #3
 8012744:	4411      	add	r1, r2
 8012746:	440b      	add	r3, r1
 8012748:	491b      	ldr	r1, [pc, #108]	; (80127b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801274a:	600b      	str	r3, [r1, #0]
 801274c:	2300      	movs	r3, #0
 801274e:	491b      	ldr	r1, [pc, #108]	; (80127bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8012750:	800b      	strh	r3, [r1, #0]
 8012752:	491b      	ldr	r1, [pc, #108]	; (80127c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8012754:	6809      	ldr	r1, [r1, #0]
 8012756:	eba1 010e 	sub.w	r1, r1, lr
 801275a:	eba1 010c 	sub.w	r1, r1, ip
 801275e:	469c      	mov	ip, r3
 8012760:	1a8a      	subs	r2, r1, r2
 8012762:	4918      	ldr	r1, [pc, #96]	; (80127c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8012764:	600a      	str	r2, [r1, #0]
 8012766:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801276a:	4a17      	ldr	r2, [pc, #92]	; (80127c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801276c:	8013      	strh	r3, [r2, #0]
 801276e:	4283      	cmp	r3, r0
 8012770:	d10d      	bne.n	801278e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8012772:	8835      	ldrh	r5, [r6, #0]
 8012774:	2300      	movs	r3, #0
 8012776:	6838      	ldr	r0, [r7, #0]
 8012778:	240e      	movs	r4, #14
 801277a:	429d      	cmp	r5, r3
 801277c:	d90f      	bls.n	801279e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801277e:	fb04 0203 	mla	r2, r4, r3, r0
 8012782:	3301      	adds	r3, #1
 8012784:	7b11      	ldrb	r1, [r2, #12]
 8012786:	f36f 1145 	bfc	r1, #5, #1
 801278a:	7311      	strb	r1, [r2, #12]
 801278c:	e7f5      	b.n	801277a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801278e:	682a      	ldr	r2, [r5, #0]
 8012790:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8012794:	6822      	ldr	r2, [r4, #0]
 8012796:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801279a:	3301      	adds	r3, #1
 801279c:	e7e7      	b.n	801276e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a2:	bf00      	nop
 80127a4:	24006c20 	.word	0x24006c20
 80127a8:	24006c3c 	.word	0x24006c3c
 80127ac:	24006c40 	.word	0x24006c40
 80127b0:	24006c34 	.word	0x24006c34
 80127b4:	24006c24 	.word	0x24006c24
 80127b8:	24006c2c 	.word	0x24006c2c
 80127bc:	24006c3e 	.word	0x24006c3e
 80127c0:	24006c28 	.word	0x24006c28
 80127c4:	24006c38 	.word	0x24006c38
 80127c8:	24006c30 	.word	0x24006c30

080127cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80127cc:	4b10      	ldr	r3, [pc, #64]	; (8012810 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80127ce:	b510      	push	{r4, lr}
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	b9db      	cbnz	r3, 801280c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80127d4:	b1d1      	cbz	r1, 801280c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80127d6:	4b0f      	ldr	r3, [pc, #60]	; (8012814 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80127d8:	240e      	movs	r4, #14
 80127da:	801a      	strh	r2, [r3, #0]
 80127dc:	b292      	uxth	r2, r2
 80127de:	4b0e      	ldr	r3, [pc, #56]	; (8012818 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	4413      	add	r3, r2
 80127e4:	4362      	muls	r2, r4
 80127e6:	2406      	movs	r4, #6
 80127e8:	fb04 2203 	mla	r2, r4, r3, r2
 80127ec:	428a      	cmp	r2, r1
 80127ee:	d305      	bcc.n	80127fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80127f0:	4b0a      	ldr	r3, [pc, #40]	; (801281c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80127f2:	2135      	movs	r1, #53	; 0x35
 80127f4:	4a0a      	ldr	r2, [pc, #40]	; (8012820 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80127f6:	480b      	ldr	r0, [pc, #44]	; (8012824 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80127f8:	f008 fc40 	bl	801b07c <__assert_func>
 80127fc:	4b0a      	ldr	r3, [pc, #40]	; (8012828 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80127fe:	6019      	str	r1, [r3, #0]
 8012800:	4b0a      	ldr	r3, [pc, #40]	; (801282c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8012802:	6018      	str	r0, [r3, #0]
 8012804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012808:	f7ff bf78 	b.w	80126fc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801280c:	bd10      	pop	{r4, pc}
 801280e:	bf00      	nop
 8012810:	24006c2c 	.word	0x24006c2c
 8012814:	24006c40 	.word	0x24006c40
 8012818:	24006c3c 	.word	0x24006c3c
 801281c:	0801ec8a 	.word	0x0801ec8a
 8012820:	0801ece3 	.word	0x0801ece3
 8012824:	0801ec65 	.word	0x0801ec65
 8012828:	24006c28 	.word	0x24006c28
 801282c:	24006c20 	.word	0x24006c20

08012830 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8012830:	b470      	push	{r4, r5, r6}
 8012832:	4c07      	ldr	r4, [pc, #28]	; (8012850 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8012834:	4605      	mov	r5, r0
 8012836:	4610      	mov	r0, r2
 8012838:	9a03      	ldr	r2, [sp, #12]
 801283a:	6826      	ldr	r6, [r4, #0]
 801283c:	b936      	cbnz	r6, 801284c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801283e:	6025      	str	r5, [r4, #0]
 8012840:	4c04      	ldr	r4, [pc, #16]	; (8012854 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8012842:	8021      	strh	r1, [r4, #0]
 8012844:	4619      	mov	r1, r3
 8012846:	bc70      	pop	{r4, r5, r6}
 8012848:	f7ff bfc0 	b.w	80127cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801284c:	bc70      	pop	{r4, r5, r6}
 801284e:	4770      	bx	lr
 8012850:	24006c44 	.word	0x24006c44
 8012854:	24006c3c 	.word	0x24006c3c

08012858 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8012858:	b508      	push	{r3, lr}
 801285a:	4b14      	ldr	r3, [pc, #80]	; (80128ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801285c:	6819      	ldr	r1, [r3, #0]
 801285e:	b931      	cbnz	r1, 801286e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8012860:	4b13      	ldr	r3, [pc, #76]	; (80128b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8012862:	f240 4185 	movw	r1, #1157	; 0x485
 8012866:	4a13      	ldr	r2, [pc, #76]	; (80128b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8012868:	4813      	ldr	r0, [pc, #76]	; (80128b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801286a:	f008 fc07 	bl	801b07c <__assert_func>
 801286e:	4a13      	ldr	r2, [pc, #76]	; (80128bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8012870:	8803      	ldrh	r3, [r0, #0]
 8012872:	8812      	ldrh	r2, [r2, #0]
 8012874:	4293      	cmp	r3, r2
 8012876:	d204      	bcs.n	8012882 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8012878:	2214      	movs	r2, #20
 801287a:	fb02 1303 	mla	r3, r2, r3, r1
 801287e:	8918      	ldrh	r0, [r3, #8]
 8012880:	bd08      	pop	{r3, pc}
 8012882:	490f      	ldr	r1, [pc, #60]	; (80128c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8012884:	8809      	ldrh	r1, [r1, #0]
 8012886:	4411      	add	r1, r2
 8012888:	428b      	cmp	r3, r1
 801288a:	da06      	bge.n	801289a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801288c:	1a9b      	subs	r3, r3, r2
 801288e:	4a0d      	ldr	r2, [pc, #52]	; (80128c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8012890:	210e      	movs	r1, #14
 8012892:	6812      	ldr	r2, [r2, #0]
 8012894:	fb01 2303 	mla	r3, r1, r3, r2
 8012898:	e7f1      	b.n	801287e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801289a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801289e:	4293      	cmp	r3, r2
 80128a0:	bf0a      	itet	eq
 80128a2:	4b09      	ldreq	r3, [pc, #36]	; (80128c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80128a4:	2000      	movne	r0, #0
 80128a6:	8818      	ldrheq	r0, [r3, #0]
 80128a8:	e7ea      	b.n	8012880 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80128aa:	bf00      	nop
 80128ac:	24006c44 	.word	0x24006c44
 80128b0:	0801dcd6 	.word	0x0801dcd6
 80128b4:	0801ed90 	.word	0x0801ed90
 80128b8:	0801ec65 	.word	0x0801ec65
 80128bc:	24006c3c 	.word	0x24006c3c
 80128c0:	24006c40 	.word	0x24006c40
 80128c4:	24006c24 	.word	0x24006c24
 80128c8:	24006bb0 	.word	0x24006bb0

080128cc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80128cc:	b508      	push	{r3, lr}
 80128ce:	4b14      	ldr	r3, [pc, #80]	; (8012920 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80128d0:	6819      	ldr	r1, [r3, #0]
 80128d2:	b931      	cbnz	r1, 80128e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80128d4:	4b13      	ldr	r3, [pc, #76]	; (8012924 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80128d6:	f240 4199 	movw	r1, #1177	; 0x499
 80128da:	4a13      	ldr	r2, [pc, #76]	; (8012928 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80128dc:	4813      	ldr	r0, [pc, #76]	; (801292c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80128de:	f008 fbcd 	bl	801b07c <__assert_func>
 80128e2:	4a13      	ldr	r2, [pc, #76]	; (8012930 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80128e4:	8803      	ldrh	r3, [r0, #0]
 80128e6:	8812      	ldrh	r2, [r2, #0]
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d204      	bcs.n	80128f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80128ec:	2214      	movs	r2, #20
 80128ee:	fb02 1303 	mla	r3, r2, r3, r1
 80128f2:	8958      	ldrh	r0, [r3, #10]
 80128f4:	bd08      	pop	{r3, pc}
 80128f6:	490f      	ldr	r1, [pc, #60]	; (8012934 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80128f8:	8809      	ldrh	r1, [r1, #0]
 80128fa:	4411      	add	r1, r2
 80128fc:	428b      	cmp	r3, r1
 80128fe:	da06      	bge.n	801290e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8012900:	1a9b      	subs	r3, r3, r2
 8012902:	4a0d      	ldr	r2, [pc, #52]	; (8012938 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8012904:	210e      	movs	r1, #14
 8012906:	6812      	ldr	r2, [r2, #0]
 8012908:	fb01 2303 	mla	r3, r1, r3, r2
 801290c:	e7f1      	b.n	80128f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801290e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012912:	4293      	cmp	r3, r2
 8012914:	bf0a      	itet	eq
 8012916:	4b09      	ldreq	r3, [pc, #36]	; (801293c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8012918:	2000      	movne	r0, #0
 801291a:	8818      	ldrheq	r0, [r3, #0]
 801291c:	e7ea      	b.n	80128f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801291e:	bf00      	nop
 8012920:	24006c44 	.word	0x24006c44
 8012924:	0801dcd6 	.word	0x0801dcd6
 8012928:	0801edbc 	.word	0x0801edbc
 801292c:	0801ec65 	.word	0x0801ec65
 8012930:	24006c3c 	.word	0x24006c3c
 8012934:	24006c40 	.word	0x24006c40
 8012938:	24006c24 	.word	0x24006c24
 801293c:	24006bb2 	.word	0x24006bb2

08012940 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8012940:	4b23      	ldr	r3, [pc, #140]	; (80129d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8012942:	b510      	push	{r4, lr}
 8012944:	681c      	ldr	r4, [r3, #0]
 8012946:	b934      	cbnz	r4, 8012956 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8012948:	4b22      	ldr	r3, [pc, #136]	; (80129d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801294a:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801294e:	4a22      	ldr	r2, [pc, #136]	; (80129d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8012950:	4822      	ldr	r0, [pc, #136]	; (80129dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8012952:	f008 fb93 	bl	801b07c <__assert_func>
 8012956:	4a22      	ldr	r2, [pc, #136]	; (80129e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8012958:	880b      	ldrh	r3, [r1, #0]
 801295a:	8812      	ldrh	r2, [r2, #0]
 801295c:	4293      	cmp	r3, r2
 801295e:	d211      	bcs.n	8012984 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8012960:	2214      	movs	r2, #20
 8012962:	fb02 4303 	mla	r3, r2, r3, r4
 8012966:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801296a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801296e:	8a1a      	ldrh	r2, [r3, #16]
 8012970:	8a5b      	ldrh	r3, [r3, #18]
 8012972:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012976:	8004      	strh	r4, [r0, #0]
 8012978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801297c:	8041      	strh	r1, [r0, #2]
 801297e:	8082      	strh	r2, [r0, #4]
 8012980:	80c3      	strh	r3, [r0, #6]
 8012982:	e00e      	b.n	80129a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8012984:	4917      	ldr	r1, [pc, #92]	; (80129e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8012986:	8809      	ldrh	r1, [r1, #0]
 8012988:	4411      	add	r1, r2
 801298a:	428b      	cmp	r3, r1
 801298c:	da0a      	bge.n	80129a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801298e:	1a9b      	subs	r3, r3, r2
 8012990:	4a15      	ldr	r2, [pc, #84]	; (80129e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8012992:	210e      	movs	r1, #14
 8012994:	6812      	ldr	r2, [r2, #0]
 8012996:	fb01 2303 	mla	r3, r1, r3, r2
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	6002      	str	r2, [r0, #0]
 801299e:	685a      	ldr	r2, [r3, #4]
 80129a0:	6042      	str	r2, [r0, #4]
 80129a2:	bd10      	pop	{r4, pc}
 80129a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d10b      	bne.n	80129c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80129ac:	4b0f      	ldr	r3, [pc, #60]	; (80129ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80129ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80129b2:	4b0f      	ldr	r3, [pc, #60]	; (80129f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80129b4:	8081      	strh	r1, [r0, #4]
 80129b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129ba:	2300      	movs	r3, #0
 80129bc:	80c2      	strh	r2, [r0, #6]
 80129be:	8003      	strh	r3, [r0, #0]
 80129c0:	8043      	strh	r3, [r0, #2]
 80129c2:	e7ee      	b.n	80129a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80129c4:	2300      	movs	r3, #0
 80129c6:	8003      	strh	r3, [r0, #0]
 80129c8:	8043      	strh	r3, [r0, #2]
 80129ca:	8083      	strh	r3, [r0, #4]
 80129cc:	e7d8      	b.n	8012980 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80129ce:	bf00      	nop
 80129d0:	24006c44 	.word	0x24006c44
 80129d4:	0801dcd6 	.word	0x0801dcd6
 80129d8:	0801ed29 	.word	0x0801ed29
 80129dc:	0801ec65 	.word	0x0801ec65
 80129e0:	24006c3c 	.word	0x24006c3c
 80129e4:	24006c40 	.word	0x24006c40
 80129e8:	24006c24 	.word	0x24006c24
 80129ec:	24006bb0 	.word	0x24006bb0
 80129f0:	24006bb2 	.word	0x24006bb2

080129f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80129f4:	4b18      	ldr	r3, [pc, #96]	; (8012a58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	b34b      	cbz	r3, 8012a4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80129fa:	4a18      	ldr	r2, [pc, #96]	; (8012a5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80129fc:	8800      	ldrh	r0, [r0, #0]
 80129fe:	8812      	ldrh	r2, [r2, #0]
 8012a00:	4290      	cmp	r0, r2
 8012a02:	d211      	bcs.n	8012a28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8012a04:	2214      	movs	r2, #20
 8012a06:	fb02 3300 	mla	r3, r2, r0, r3
 8012a0a:	8a1a      	ldrh	r2, [r3, #16]
 8012a0c:	8919      	ldrh	r1, [r3, #8]
 8012a0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012a12:	428a      	cmp	r2, r1
 8012a14:	db1d      	blt.n	8012a52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8012a16:	8a58      	ldrh	r0, [r3, #18]
 8012a18:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012a1c:	895b      	ldrh	r3, [r3, #10]
 8012a1e:	4298      	cmp	r0, r3
 8012a20:	bfac      	ite	ge
 8012a22:	2000      	movge	r0, #0
 8012a24:	2001      	movlt	r0, #1
 8012a26:	4770      	bx	lr
 8012a28:	4b0d      	ldr	r3, [pc, #52]	; (8012a60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8012a2a:	881b      	ldrh	r3, [r3, #0]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	4298      	cmp	r0, r3
 8012a30:	da0d      	bge.n	8012a4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8012a32:	4b0c      	ldr	r3, [pc, #48]	; (8012a64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8012a34:	1a80      	subs	r0, r0, r2
 8012a36:	220e      	movs	r2, #14
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	fb02 3300 	mla	r3, r2, r0, r3
 8012a3e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8012a42:	891a      	ldrh	r2, [r3, #8]
 8012a44:	4291      	cmp	r1, r2
 8012a46:	db04      	blt.n	8012a52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8012a48:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012a4c:	e7e6      	b.n	8012a1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8012a4e:	2000      	movs	r0, #0
 8012a50:	4770      	bx	lr
 8012a52:	2001      	movs	r0, #1
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop
 8012a58:	24006c44 	.word	0x24006c44
 8012a5c:	24006c3c 	.word	0x24006c3c
 8012a60:	24006c40 	.word	0x24006c40
 8012a64:	24006c24 	.word	0x24006c24

08012a68 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8012a68:	b508      	push	{r3, lr}
 8012a6a:	4b12      	ldr	r3, [pc, #72]	; (8012ab4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8012a6c:	6819      	ldr	r1, [r3, #0]
 8012a6e:	b931      	cbnz	r1, 8012a7e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8012a70:	4b11      	ldr	r3, [pc, #68]	; (8012ab8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012a72:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8012a76:	4a11      	ldr	r2, [pc, #68]	; (8012abc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8012a78:	4811      	ldr	r0, [pc, #68]	; (8012ac0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012a7a:	f008 faff 	bl	801b07c <__assert_func>
 8012a7e:	8803      	ldrh	r3, [r0, #0]
 8012a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a84:	4293      	cmp	r3, r2
 8012a86:	d012      	beq.n	8012aae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8012a88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d103      	bne.n	8012a98 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8012a90:	4b0c      	ldr	r3, [pc, #48]	; (8012ac4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8012a96:	bd08      	pop	{r3, pc}
 8012a98:	4a0b      	ldr	r2, [pc, #44]	; (8012ac8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8012a9a:	6812      	ldr	r2, [r2, #0]
 8012a9c:	b11a      	cbz	r2, 8012aa6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8012a9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d1f7      	bne.n	8012a96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012aa6:	2214      	movs	r2, #20
 8012aa8:	4353      	muls	r3, r2
 8012aaa:	58c8      	ldr	r0, [r1, r3]
 8012aac:	e7f3      	b.n	8012a96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012aae:	2000      	movs	r0, #0
 8012ab0:	e7f1      	b.n	8012a96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012ab2:	bf00      	nop
 8012ab4:	24006c44 	.word	0x24006c44
 8012ab8:	0801dcd6 	.word	0x0801dcd6
 8012abc:	0801ed5f 	.word	0x0801ed5f
 8012ac0:	0801ec65 	.word	0x0801ec65
 8012ac4:	24006bbc 	.word	0x24006bbc
 8012ac8:	24006c20 	.word	0x24006c20

08012acc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8012acc:	8802      	ldrh	r2, [r0, #0]
 8012ace:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d845      	bhi.n	8012b62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8012ad6:	4b24      	ldr	r3, [pc, #144]	; (8012b68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8012ad8:	8818      	ldrh	r0, [r3, #0]
 8012ada:	4282      	cmp	r2, r0
 8012adc:	d221      	bcs.n	8012b22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8012ade:	4b23      	ldr	r3, [pc, #140]	; (8012b6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8012ae0:	6819      	ldr	r1, [r3, #0]
 8012ae2:	2314      	movs	r3, #20
 8012ae4:	fb03 1302 	mla	r3, r3, r2, r1
 8012ae8:	6858      	ldr	r0, [r3, #4]
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d03a      	beq.n	8012b64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8012aee:	4920      	ldr	r1, [pc, #128]	; (8012b70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8012af0:	6809      	ldr	r1, [r1, #0]
 8012af2:	2900      	cmp	r1, #0
 8012af4:	d036      	beq.n	8012b64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8012af6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012afa:	2900      	cmp	r1, #0
 8012afc:	d032      	beq.n	8012b64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8012afe:	891a      	ldrh	r2, [r3, #8]
 8012b00:	8958      	ldrh	r0, [r3, #10]
 8012b02:	4350      	muls	r0, r2
 8012b04:	7c5a      	ldrb	r2, [r3, #17]
 8012b06:	7cdb      	ldrb	r3, [r3, #19]
 8012b08:	0952      	lsrs	r2, r2, #5
 8012b0a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012b0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8012b12:	2b0b      	cmp	r3, #11
 8012b14:	bf18      	it	ne
 8012b16:	0040      	lslne	r0, r0, #1
 8012b18:	3003      	adds	r0, #3
 8012b1a:	f020 0003 	bic.w	r0, r0, #3
 8012b1e:	4408      	add	r0, r1
 8012b20:	4770      	bx	lr
 8012b22:	4b14      	ldr	r3, [pc, #80]	; (8012b74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	4403      	add	r3, r0
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	da1a      	bge.n	8012b62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8012b2c:	4b12      	ldr	r3, [pc, #72]	; (8012b78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8012b2e:	1a10      	subs	r0, r2, r0
 8012b30:	210e      	movs	r1, #14
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	fb01 3000 	mla	r0, r1, r0, r3
 8012b38:	7b03      	ldrb	r3, [r0, #12]
 8012b3a:	f003 031f 	and.w	r3, r3, #31
 8012b3e:	2b0b      	cmp	r3, #11
 8012b40:	d10b      	bne.n	8012b5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012b42:	8903      	ldrh	r3, [r0, #8]
 8012b44:	8940      	ldrh	r0, [r0, #10]
 8012b46:	4358      	muls	r0, r3
 8012b48:	4b09      	ldr	r3, [pc, #36]	; (8012b70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8012b4a:	3003      	adds	r0, #3
 8012b4c:	6819      	ldr	r1, [r3, #0]
 8012b4e:	f020 0303 	bic.w	r3, r0, #3
 8012b52:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8012b56:	4418      	add	r0, r3
 8012b58:	4770      	bx	lr
 8012b5a:	2b0d      	cmp	r3, #13
 8012b5c:	d101      	bne.n	8012b62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8012b5e:	300d      	adds	r0, #13
 8012b60:	4770      	bx	lr
 8012b62:	2000      	movs	r0, #0
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop
 8012b68:	24006c3c 	.word	0x24006c3c
 8012b6c:	24006c44 	.word	0x24006c44
 8012b70:	24006c20 	.word	0x24006c20
 8012b74:	24006c40 	.word	0x24006c40
 8012b78:	24006c24 	.word	0x24006c24

08012b7c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8012b7c:	4b17      	ldr	r3, [pc, #92]	; (8012bdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8012b7e:	b510      	push	{r4, lr}
 8012b80:	6819      	ldr	r1, [r3, #0]
 8012b82:	8803      	ldrh	r3, [r0, #0]
 8012b84:	b1e9      	cbz	r1, 8012bc2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8012b86:	4a16      	ldr	r2, [pc, #88]	; (8012be0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8012b88:	8812      	ldrh	r2, [r2, #0]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d90a      	bls.n	8012ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8012b8e:	2214      	movs	r2, #20
 8012b90:	fb02 1303 	mla	r3, r2, r3, r1
 8012b94:	7c58      	ldrb	r0, [r3, #17]
 8012b96:	0942      	lsrs	r2, r0, #5
 8012b98:	7cd8      	ldrb	r0, [r3, #19]
 8012b9a:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8012b9e:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8012ba2:	bd10      	pop	{r4, pc}
 8012ba4:	490f      	ldr	r1, [pc, #60]	; (8012be4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8012ba6:	8809      	ldrh	r1, [r1, #0]
 8012ba8:	4411      	add	r1, r2
 8012baa:	428b      	cmp	r3, r1
 8012bac:	da09      	bge.n	8012bc2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8012bae:	1a9b      	subs	r3, r3, r2
 8012bb0:	4a0d      	ldr	r2, [pc, #52]	; (8012be8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8012bb2:	210e      	movs	r1, #14
 8012bb4:	6812      	ldr	r2, [r2, #0]
 8012bb6:	fb01 2303 	mla	r3, r1, r3, r2
 8012bba:	7b18      	ldrb	r0, [r3, #12]
 8012bbc:	f000 001f 	and.w	r0, r0, #31
 8012bc0:	e7ef      	b.n	8012ba2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8012bc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	d106      	bne.n	8012bd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8012bca:	f7f9 f855 	bl	800bc78 <_ZN8touchgfx3HAL3lcdEv>
 8012bce:	6803      	ldr	r3, [r0, #0]
 8012bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd6:	4718      	bx	r3
 8012bd8:	2000      	movs	r0, #0
 8012bda:	e7e2      	b.n	8012ba2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8012bdc:	24006c44 	.word	0x24006c44
 8012be0:	24006c3c 	.word	0x24006c3c
 8012be4:	24006c40 	.word	0x24006c40
 8012be8:	24006c24 	.word	0x24006c24

08012bec <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8012bec:	2018      	movs	r0, #24
 8012bee:	4770      	bx	lr

08012bf0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8012bf0:	2001      	movs	r0, #1
 8012bf2:	4770      	bx	lr

08012bf4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf8:	b085      	sub	sp, #20
 8012bfa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012bfc:	9203      	str	r2, [sp, #12]
 8012bfe:	6870      	ldr	r0, [r6, #4]
 8012c00:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8012c04:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012c08:	9101      	str	r1, [sp, #4]
 8012c0a:	fa1f f885 	uxth.w	r8, r5
 8012c0e:	43ed      	mvns	r5, r5
 8012c10:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012c14:	b2ed      	uxtb	r5, r5
 8012c16:	fb00 2404 	mla	r4, r0, r4, r2
 8012c1a:	6832      	ldr	r2, [r6, #0]
 8012c1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012c20:	4414      	add	r4, r2
 8012c22:	f8dc 2000 	ldr.w	r2, [ip]
 8012c26:	9202      	str	r2, [sp, #8]
 8012c28:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012c2c:	f102 0e04 	add.w	lr, r2, #4
 8012c30:	9a01      	ldr	r2, [sp, #4]
 8012c32:	2a00      	cmp	r2, #0
 8012c34:	dc03      	bgt.n	8012c3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8012c36:	9a03      	ldr	r2, [sp, #12]
 8012c38:	2a00      	cmp	r2, #0
 8012c3a:	f340 8116 	ble.w	8012e6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c40:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8012c44:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012c48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012c4a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8012c4e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	dd0e      	ble.n	8012c74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8012c56:	1406      	asrs	r6, r0, #16
 8012c58:	d405      	bmi.n	8012c66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c5a:	4556      	cmp	r6, sl
 8012c5c:	da03      	bge.n	8012c66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c5e:	1416      	asrs	r6, r2, #16
 8012c60:	d401      	bmi.n	8012c66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c62:	454e      	cmp	r6, r9
 8012c64:	db07      	blt.n	8012c76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8012c66:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012c68:	3b01      	subs	r3, #1
 8012c6a:	3403      	adds	r4, #3
 8012c6c:	4430      	add	r0, r6
 8012c6e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012c70:	4432      	add	r2, r6
 8012c72:	e7ee      	b.n	8012c52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8012c74:	d063      	beq.n	8012d3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8012c76:	1e5e      	subs	r6, r3, #1
 8012c78:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8012c7a:	fb07 0706 	mla	r7, r7, r6, r0
 8012c7e:	143f      	asrs	r7, r7, #16
 8012c80:	d454      	bmi.n	8012d2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c82:	4557      	cmp	r7, sl
 8012c84:	da52      	bge.n	8012d2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c86:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012c88:	fb07 2606 	mla	r6, r7, r6, r2
 8012c8c:	1436      	asrs	r6, r6, #16
 8012c8e:	d44d      	bmi.n	8012d2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c90:	454e      	cmp	r6, r9
 8012c92:	da4b      	bge.n	8012d2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c94:	1ce6      	adds	r6, r4, #3
 8012c96:	4699      	mov	r9, r3
 8012c98:	f1b9 0f00 	cmp.w	r9, #0
 8012c9c:	f106 0603 	add.w	r6, r6, #3
 8012ca0:	dd48      	ble.n	8012d34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8012ca2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8012ca6:	1417      	asrs	r7, r2, #16
 8012ca8:	9902      	ldr	r1, [sp, #8]
 8012caa:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8012cae:	f109 39ff 	add.w	r9, r9, #4294967295
 8012cb2:	fb0b 1707 	mla	r7, fp, r7, r1
 8012cb6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8012cba:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012cbc:	f817 700a 	ldrb.w	r7, [r7, sl]
 8012cc0:	fb1b fb05 	smulbb	fp, fp, r5
 8012cc4:	4408      	add	r0, r1
 8012cc6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012cc8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012ccc:	440a      	add	r2, r1
 8012cce:	eb0e 0a07 	add.w	sl, lr, r7
 8012cd2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8012cd6:	fb07 b708 	mla	r7, r7, r8, fp
 8012cda:	b2bf      	uxth	r7, r7
 8012cdc:	f107 0b01 	add.w	fp, r7, #1
 8012ce0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012ce4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8012ce8:	fb1b fb05 	smulbb	fp, fp, r5
 8012cec:	123f      	asrs	r7, r7, #8
 8012cee:	f806 7c06 	strb.w	r7, [r6, #-6]
 8012cf2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8012cf6:	fb07 b708 	mla	r7, r7, r8, fp
 8012cfa:	b2bf      	uxth	r7, r7
 8012cfc:	f107 0b01 	add.w	fp, r7, #1
 8012d00:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012d04:	123f      	asrs	r7, r7, #8
 8012d06:	f806 7c05 	strb.w	r7, [r6, #-5]
 8012d0a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8012d0e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8012d12:	fb1a fa05 	smulbb	sl, sl, r5
 8012d16:	fb07 a708 	mla	r7, r7, r8, sl
 8012d1a:	b2bf      	uxth	r7, r7
 8012d1c:	f107 0a01 	add.w	sl, r7, #1
 8012d20:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8012d24:	123f      	asrs	r7, r7, #8
 8012d26:	f806 7c04 	strb.w	r7, [r6, #-4]
 8012d2a:	e7b5      	b.n	8012c98 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8012d2c:	2700      	movs	r7, #0
 8012d2e:	1bde      	subs	r6, r3, r7
 8012d30:	2e00      	cmp	r6, #0
 8012d32:	dc42      	bgt.n	8012dba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8012d34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012d3c:	441c      	add	r4, r3
 8012d3e:	9b01      	ldr	r3, [sp, #4]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f340 8092 	ble.w	8012e6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012d50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012d54:	eef0 6a62 	vmov.f32	s13, s5
 8012d58:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012d5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012d60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012d64:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8012d68:	eef0 6a43 	vmov.f32	s13, s6
 8012d6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012d70:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8012d74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012d78:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012d7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012d80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012d84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012d88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012d8c:	ee12 2a90 	vmov	r2, s5
 8012d90:	eef0 2a47 	vmov.f32	s5, s14
 8012d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d98:	ee13 2a10 	vmov	r2, s6
 8012d9c:	9311      	str	r3, [sp, #68]	; 0x44
 8012d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012da0:	eeb0 3a67 	vmov.f32	s6, s15
 8012da4:	fb92 f3f3 	sdiv	r3, r2, r3
 8012da8:	9312      	str	r3, [sp, #72]	; 0x48
 8012daa:	9b01      	ldr	r3, [sp, #4]
 8012dac:	9a03      	ldr	r2, [sp, #12]
 8012dae:	3b01      	subs	r3, #1
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012db4:	bf08      	it	eq
 8012db6:	4613      	moveq	r3, r2
 8012db8:	e73a      	b.n	8012c30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012dba:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8012dbe:	d44e      	bmi.n	8012e5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012dc0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8012dc4:	4556      	cmp	r6, sl
 8012dc6:	dd4a      	ble.n	8012e5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012dc8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8012dcc:	d447      	bmi.n	8012e5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012dce:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8012dd2:	4559      	cmp	r1, fp
 8012dd4:	dd43      	ble.n	8012e5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012dd6:	fa0f f986 	sxth.w	r9, r6
 8012dda:	9902      	ldr	r1, [sp, #8]
 8012ddc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8012de0:	fb0b 1909 	mla	r9, fp, r9, r1
 8012de4:	f814 b006 	ldrb.w	fp, [r4, r6]
 8012de8:	f819 900a 	ldrb.w	r9, [r9, sl]
 8012dec:	fb1b fb05 	smulbb	fp, fp, r5
 8012df0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012df4:	eb0e 0a09 	add.w	sl, lr, r9
 8012df8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8012dfc:	fb09 b908 	mla	r9, r9, r8, fp
 8012e00:	fa1f f989 	uxth.w	r9, r9
 8012e04:	f109 0b01 	add.w	fp, r9, #1
 8012e08:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012e0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e10:	f804 9006 	strb.w	r9, [r4, r6]
 8012e14:	4426      	add	r6, r4
 8012e16:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012e1a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8012e1e:	fb1b fb05 	smulbb	fp, fp, r5
 8012e22:	fb09 b908 	mla	r9, r9, r8, fp
 8012e26:	fa1f f989 	uxth.w	r9, r9
 8012e2a:	f109 0b01 	add.w	fp, r9, #1
 8012e2e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012e32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e36:	f886 9001 	strb.w	r9, [r6, #1]
 8012e3a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012e3e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8012e42:	fb1a fa05 	smulbb	sl, sl, r5
 8012e46:	fb09 a908 	mla	r9, r9, r8, sl
 8012e4a:	fa1f f989 	uxth.w	r9, r9
 8012e4e:	f109 0a01 	add.w	sl, r9, #1
 8012e52:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8012e56:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e5a:	f886 9002 	strb.w	r9, [r6, #2]
 8012e5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012e60:	3701      	adds	r7, #1
 8012e62:	4408      	add	r0, r1
 8012e64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e66:	440a      	add	r2, r1
 8012e68:	e761      	b.n	8012d2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012e6a:	b005      	add	sp, #20
 8012e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e74:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012e76:	4693      	mov	fp, r2
 8012e78:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012e7e:	6868      	ldr	r0, [r5, #4]
 8012e80:	6877      	ldr	r7, [r6, #4]
 8012e82:	9100      	str	r1, [sp, #0]
 8012e84:	3704      	adds	r7, #4
 8012e86:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8012e8a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8012e8e:	fb00 2404 	mla	r4, r0, r4, r2
 8012e92:	682a      	ldr	r2, [r5, #0]
 8012e94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012e98:	4414      	add	r4, r2
 8012e9a:	6832      	ldr	r2, [r6, #0]
 8012e9c:	9201      	str	r2, [sp, #4]
 8012e9e:	9a00      	ldr	r2, [sp, #0]
 8012ea0:	2a00      	cmp	r2, #0
 8012ea2:	dc03      	bgt.n	8012eac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012ea4:	f1bb 0f00 	cmp.w	fp, #0
 8012ea8:	f340 80bc 	ble.w	8013024 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8012eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012eae:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8012eb2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012eb8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8012ebc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	dd0c      	ble.n	8012ede <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012ec4:	1405      	asrs	r5, r0, #16
 8012ec6:	d405      	bmi.n	8012ed4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012ec8:	4555      	cmp	r5, sl
 8012eca:	da03      	bge.n	8012ed4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012ecc:	1415      	asrs	r5, r2, #16
 8012ece:	d401      	bmi.n	8012ed4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012ed0:	454d      	cmp	r5, r9
 8012ed2:	db05      	blt.n	8012ee0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012ed4:	4440      	add	r0, r8
 8012ed6:	4472      	add	r2, lr
 8012ed8:	3b01      	subs	r3, #1
 8012eda:	3403      	adds	r4, #3
 8012edc:	e7f0      	b.n	8012ec0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8012ede:	d03f      	beq.n	8012f60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8012ee0:	1e5d      	subs	r5, r3, #1
 8012ee2:	fb08 0c05 	mla	ip, r8, r5, r0
 8012ee6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8012eea:	d42e      	bmi.n	8012f4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012eec:	45d4      	cmp	ip, sl
 8012eee:	da2c      	bge.n	8012f4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012ef0:	fb0e 2505 	mla	r5, lr, r5, r2
 8012ef4:	142d      	asrs	r5, r5, #16
 8012ef6:	d428      	bmi.n	8012f4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012ef8:	454d      	cmp	r5, r9
 8012efa:	da26      	bge.n	8012f4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012efc:	1ce5      	adds	r5, r4, #3
 8012efe:	469c      	mov	ip, r3
 8012f00:	f1bc 0f00 	cmp.w	ip, #0
 8012f04:	f105 0503 	add.w	r5, r5, #3
 8012f08:	dd25      	ble.n	8012f56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8012f0a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012f0e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8012f12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012f16:	4472      	add	r2, lr
 8012f18:	468a      	mov	sl, r1
 8012f1a:	9901      	ldr	r1, [sp, #4]
 8012f1c:	fb0a 1909 	mla	r9, sl, r9, r1
 8012f20:	1401      	asrs	r1, r0, #16
 8012f22:	4440      	add	r0, r8
 8012f24:	f819 9001 	ldrb.w	r9, [r9, r1]
 8012f28:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012f2c:	eb07 0a09 	add.w	sl, r7, r9
 8012f30:	f817 9009 	ldrb.w	r9, [r7, r9]
 8012f34:	f805 9c06 	strb.w	r9, [r5, #-6]
 8012f38:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012f3c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8012f40:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012f44:	f805 9c04 	strb.w	r9, [r5, #-4]
 8012f48:	e7da      	b.n	8012f00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8012f4a:	2500      	movs	r5, #0
 8012f4c:	eba3 0c05 	sub.w	ip, r3, r5
 8012f50:	f1bc 0f00 	cmp.w	ip, #0
 8012f54:	dc3b      	bgt.n	8012fce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8012f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012f5e:	441c      	add	r4, r3
 8012f60:	9b00      	ldr	r3, [sp, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	dd5e      	ble.n	8013024 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8012f66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012f70:	eeb0 6a62 	vmov.f32	s12, s5
 8012f74:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012f78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012f7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012f80:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8012f84:	eeb0 6a43 	vmov.f32	s12, s6
 8012f88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012f8c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8012f90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012f94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012f98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012f9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012fa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012fa4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012fa8:	ee12 2a90 	vmov	r2, s5
 8012fac:	eef0 2a47 	vmov.f32	s5, s14
 8012fb0:	fb92 f8f3 	sdiv	r8, r2, r3
 8012fb4:	ee13 2a10 	vmov	r2, s6
 8012fb8:	eeb0 3a67 	vmov.f32	s6, s15
 8012fbc:	fb92 fef3 	sdiv	lr, r2, r3
 8012fc0:	9b00      	ldr	r3, [sp, #0]
 8012fc2:	3b01      	subs	r3, #1
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fc8:	bf08      	it	eq
 8012fca:	465b      	moveq	r3, fp
 8012fcc:	e767      	b.n	8012e9e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8012fce:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012fd2:	d423      	bmi.n	801301c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fd4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8012fd8:	45cc      	cmp	ip, r9
 8012fda:	dd1f      	ble.n	801301c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fdc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8012fe0:	d41c      	bmi.n	801301c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fe2:	68f1      	ldr	r1, [r6, #12]
 8012fe4:	4551      	cmp	r1, sl
 8012fe6:	dd19      	ble.n	801301c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fe8:	fa0f fc8c 	sxth.w	ip, ip
 8012fec:	9901      	ldr	r1, [sp, #4]
 8012fee:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8012ff2:	f81c c009 	ldrb.w	ip, [ip, r9]
 8012ff6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012ffa:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8012ffe:	eb07 090c 	add.w	r9, r7, ip
 8013002:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8013006:	f804 a00c 	strb.w	sl, [r4, ip]
 801300a:	44a4      	add	ip, r4
 801300c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8013010:	f88c a001 	strb.w	sl, [ip, #1]
 8013014:	f899 9002 	ldrb.w	r9, [r9, #2]
 8013018:	f88c 9002 	strb.w	r9, [ip, #2]
 801301c:	4440      	add	r0, r8
 801301e:	4472      	add	r2, lr
 8013020:	3501      	adds	r5, #1
 8013022:	e793      	b.n	8012f4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8013024:	b003      	add	sp, #12
 8013026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801302a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801302a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302e:	b085      	sub	sp, #20
 8013030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013034:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013036:	9202      	str	r2, [sp, #8]
 8013038:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801303c:	6860      	ldr	r0, [r4, #4]
 801303e:	9203      	str	r2, [sp, #12]
 8013040:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013044:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8013048:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801304c:	fb00 2505 	mla	r5, r0, r5, r2
 8013050:	6822      	ldr	r2, [r4, #0]
 8013052:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013056:	4415      	add	r5, r2
 8013058:	f8dc 2000 	ldr.w	r2, [ip]
 801305c:	9200      	str	r2, [sp, #0]
 801305e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013062:	3204      	adds	r2, #4
 8013064:	9201      	str	r2, [sp, #4]
 8013066:	2900      	cmp	r1, #0
 8013068:	dc03      	bgt.n	8013072 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801306a:	9a02      	ldr	r2, [sp, #8]
 801306c:	2a00      	cmp	r2, #0
 801306e:	f340 8127 	ble.w	80132c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8013072:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013074:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013078:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801307c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801307e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013082:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013086:	2b00      	cmp	r3, #0
 8013088:	dd0d      	ble.n	80130a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801308a:	1422      	asrs	r2, r4, #16
 801308c:	d405      	bmi.n	801309a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801308e:	4542      	cmp	r2, r8
 8013090:	da03      	bge.n	801309a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013092:	1402      	asrs	r2, r0, #16
 8013094:	d401      	bmi.n	801309a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013096:	42ba      	cmp	r2, r7
 8013098:	db06      	blt.n	80130a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801309a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801309c:	4474      	add	r4, lr
 801309e:	3b01      	subs	r3, #1
 80130a0:	3503      	adds	r5, #3
 80130a2:	4410      	add	r0, r2
 80130a4:	e7ef      	b.n	8013086 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80130a6:	d075      	beq.n	8013194 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80130a8:	1e5a      	subs	r2, r3, #1
 80130aa:	fb0e 4602 	mla	r6, lr, r2, r4
 80130ae:	1436      	asrs	r6, r6, #16
 80130b0:	d465      	bmi.n	801317e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130b2:	4546      	cmp	r6, r8
 80130b4:	da63      	bge.n	801317e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130b6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80130b8:	fb06 0202 	mla	r2, r6, r2, r0
 80130bc:	1412      	asrs	r2, r2, #16
 80130be:	d45e      	bmi.n	801317e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130c0:	42ba      	cmp	r2, r7
 80130c2:	da5c      	bge.n	801317e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130c4:	1cef      	adds	r7, r5, #3
 80130c6:	4699      	mov	r9, r3
 80130c8:	f1b9 0f00 	cmp.w	r9, #0
 80130cc:	dd5d      	ble.n	801318a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80130ce:	1402      	asrs	r2, r0, #16
 80130d0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80130d4:	1426      	asrs	r6, r4, #16
 80130d6:	4692      	mov	sl, r2
 80130d8:	9a00      	ldr	r2, [sp, #0]
 80130da:	fb08 220a 	mla	r2, r8, sl, r2
 80130de:	5d92      	ldrb	r2, [r2, r6]
 80130e0:	9e01      	ldr	r6, [sp, #4]
 80130e2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80130e6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80130ea:	d041      	beq.n	8013170 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80130ec:	9a03      	ldr	r2, [sp, #12]
 80130ee:	fa5f fb86 	uxtb.w	fp, r6
 80130f2:	fb02 f808 	mul.w	r8, r2, r8
 80130f6:	f108 0201 	add.w	r2, r8, #1
 80130fa:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80130fe:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013102:	1212      	asrs	r2, r2, #8
 8013104:	fa1f fa82 	uxth.w	sl, r2
 8013108:	43d2      	mvns	r2, r2
 801310a:	fb1b fb0a 	smulbb	fp, fp, sl
 801310e:	b2d2      	uxtb	r2, r2
 8013110:	fb08 b802 	mla	r8, r8, r2, fp
 8013114:	fa1f f888 	uxth.w	r8, r8
 8013118:	f108 0b01 	add.w	fp, r8, #1
 801311c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013120:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013124:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013128:	fb1b fb0a 	smulbb	fp, fp, sl
 801312c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013130:	fb16 fa0a 	smulbb	sl, r6, sl
 8013134:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013138:	f807 8c03 	strb.w	r8, [r7, #-3]
 801313c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013140:	fb06 aa02 	mla	sl, r6, r2, sl
 8013144:	fb08 b802 	mla	r8, r8, r2, fp
 8013148:	fa1f fa8a 	uxth.w	sl, sl
 801314c:	fa1f f888 	uxth.w	r8, r8
 8013150:	f10a 0601 	add.w	r6, sl, #1
 8013154:	f108 0b01 	add.w	fp, r8, #1
 8013158:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801315c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013160:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013164:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013168:	f807 ac01 	strb.w	sl, [r7, #-1]
 801316c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013172:	4474      	add	r4, lr
 8013174:	3703      	adds	r7, #3
 8013176:	f109 39ff 	add.w	r9, r9, #4294967295
 801317a:	4410      	add	r0, r2
 801317c:	e7a4      	b.n	80130c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801317e:	f04f 0800 	mov.w	r8, #0
 8013182:	eba3 0208 	sub.w	r2, r3, r8
 8013186:	2a00      	cmp	r2, #0
 8013188:	dc3b      	bgt.n	8013202 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801318a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801318e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013192:	441d      	add	r5, r3
 8013194:	2900      	cmp	r1, #0
 8013196:	f340 8093 	ble.w	80132c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801319a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801319e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80131a4:	3901      	subs	r1, #1
 80131a6:	eeb0 6a62 	vmov.f32	s12, s5
 80131aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80131ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80131b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80131b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80131ba:	eeb0 6a43 	vmov.f32	s12, s6
 80131be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80131c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80131c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80131ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80131ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80131d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80131d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80131da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80131de:	ee12 2a90 	vmov	r2, s5
 80131e2:	eef0 2a47 	vmov.f32	s5, s14
 80131e6:	fb92 fef3 	sdiv	lr, r2, r3
 80131ea:	ee13 2a10 	vmov	r2, s6
 80131ee:	eeb0 3a67 	vmov.f32	s6, s15
 80131f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80131f6:	9a02      	ldr	r2, [sp, #8]
 80131f8:	9312      	str	r3, [sp, #72]	; 0x48
 80131fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131fc:	bf08      	it	eq
 80131fe:	4613      	moveq	r3, r2
 8013200:	e731      	b.n	8013066 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013202:	1427      	asrs	r7, r4, #16
 8013204:	d456      	bmi.n	80132b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013206:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801320a:	42be      	cmp	r6, r7
 801320c:	dd52      	ble.n	80132b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801320e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013212:	d44f      	bmi.n	80132b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013214:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013218:	454a      	cmp	r2, r9
 801321a:	dd4b      	ble.n	80132b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801321c:	9a00      	ldr	r2, [sp, #0]
 801321e:	b236      	sxth	r6, r6
 8013220:	fb09 2606 	mla	r6, r9, r6, r2
 8013224:	5df2      	ldrb	r2, [r6, r7]
 8013226:	9e01      	ldr	r6, [sp, #4]
 8013228:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801322c:	0e3a      	lsrs	r2, r7, #24
 801322e:	d041      	beq.n	80132b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013230:	9e03      	ldr	r6, [sp, #12]
 8013232:	fa5f fb87 	uxtb.w	fp, r7
 8013236:	4372      	muls	r2, r6
 8013238:	1c56      	adds	r6, r2, #1
 801323a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801323e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013242:	1212      	asrs	r2, r2, #8
 8013244:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013248:	fa1f fa82 	uxth.w	sl, r2
 801324c:	43d2      	mvns	r2, r2
 801324e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013252:	b2d2      	uxtb	r2, r2
 8013254:	fb09 b902 	mla	r9, r9, r2, fp
 8013258:	fa1f f989 	uxth.w	r9, r9
 801325c:	f109 0b01 	add.w	fp, r9, #1
 8013260:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013264:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013268:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801326c:	fb1b fb0a 	smulbb	fp, fp, sl
 8013270:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013274:	fb17 fa0a 	smulbb	sl, r7, sl
 8013278:	f805 9006 	strb.w	r9, [r5, r6]
 801327c:	442e      	add	r6, r5
 801327e:	78b7      	ldrb	r7, [r6, #2]
 8013280:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013284:	fb07 aa02 	mla	sl, r7, r2, sl
 8013288:	fb09 b902 	mla	r9, r9, r2, fp
 801328c:	fa1f fa8a 	uxth.w	sl, sl
 8013290:	fa1f f989 	uxth.w	r9, r9
 8013294:	f10a 0701 	add.w	r7, sl, #1
 8013298:	f109 0b01 	add.w	fp, r9, #1
 801329c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80132a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80132a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80132a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80132ac:	f886 a002 	strb.w	sl, [r6, #2]
 80132b0:	f886 9001 	strb.w	r9, [r6, #1]
 80132b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132b6:	4474      	add	r4, lr
 80132b8:	f108 0801 	add.w	r8, r8, #1
 80132bc:	4410      	add	r0, r2
 80132be:	e760      	b.n	8013182 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80132c0:	b005      	add	sp, #20
 80132c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80132c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ca:	b085      	sub	sp, #20
 80132cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80132d0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80132d2:	9203      	str	r2, [sp, #12]
 80132d4:	6868      	ldr	r0, [r5, #4]
 80132d6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80132da:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80132de:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80132e2:	fb00 2404 	mla	r4, r0, r4, r2
 80132e6:	682a      	ldr	r2, [r5, #0]
 80132e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80132ec:	4414      	add	r4, r2
 80132ee:	f8dc 2000 	ldr.w	r2, [ip]
 80132f2:	9201      	str	r2, [sp, #4]
 80132f4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80132f8:	3204      	adds	r2, #4
 80132fa:	9202      	str	r2, [sp, #8]
 80132fc:	2900      	cmp	r1, #0
 80132fe:	dc03      	bgt.n	8013308 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8013300:	9a03      	ldr	r2, [sp, #12]
 8013302:	2a00      	cmp	r2, #0
 8013304:	f340 8137 	ble.w	8013576 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801330a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801330e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013312:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013314:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013318:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801331c:	2b00      	cmp	r3, #0
 801331e:	dd0d      	ble.n	801333c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013320:	1405      	asrs	r5, r0, #16
 8013322:	d405      	bmi.n	8013330 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013324:	4545      	cmp	r5, r8
 8013326:	da03      	bge.n	8013330 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013328:	1415      	asrs	r5, r2, #16
 801332a:	d401      	bmi.n	8013330 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801332c:	42bd      	cmp	r5, r7
 801332e:	db06      	blt.n	801333e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013330:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013332:	4470      	add	r0, lr
 8013334:	3b01      	subs	r3, #1
 8013336:	3403      	adds	r4, #3
 8013338:	442a      	add	r2, r5
 801333a:	e7ef      	b.n	801331c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801333c:	d070      	beq.n	8013420 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801333e:	1e5d      	subs	r5, r3, #1
 8013340:	fb0e 0605 	mla	r6, lr, r5, r0
 8013344:	1436      	asrs	r6, r6, #16
 8013346:	d462      	bmi.n	801340e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013348:	4546      	cmp	r6, r8
 801334a:	da60      	bge.n	801340e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801334c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801334e:	fb06 2505 	mla	r5, r6, r5, r2
 8013352:	142d      	asrs	r5, r5, #16
 8013354:	d45b      	bmi.n	801340e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013356:	42bd      	cmp	r5, r7
 8013358:	da59      	bge.n	801340e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801335a:	1ce5      	adds	r5, r4, #3
 801335c:	469a      	mov	sl, r3
 801335e:	f1ba 0f00 	cmp.w	sl, #0
 8013362:	dd58      	ble.n	8013416 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8013364:	1416      	asrs	r6, r2, #16
 8013366:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801336a:	1407      	asrs	r7, r0, #16
 801336c:	46b1      	mov	r9, r6
 801336e:	9e01      	ldr	r6, [sp, #4]
 8013370:	fb08 6609 	mla	r6, r8, r9, r6
 8013374:	5df6      	ldrb	r6, [r6, r7]
 8013376:	9f02      	ldr	r7, [sp, #8]
 8013378:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801337c:	0e37      	lsrs	r7, r6, #24
 801337e:	2fff      	cmp	r7, #255	; 0xff
 8013380:	f000 80f0 	beq.w	8013564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8013384:	fa5f f887 	uxtb.w	r8, r7
 8013388:	b3d7      	cbz	r7, 8013400 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801338a:	fa1f f788 	uxth.w	r7, r8
 801338e:	ea6f 0808 	mvn.w	r8, r8
 8013392:	fa5f fb86 	uxtb.w	fp, r6
 8013396:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801339a:	fa5f f888 	uxtb.w	r8, r8
 801339e:	fb1b fb07 	smulbb	fp, fp, r7
 80133a2:	fb09 b908 	mla	r9, r9, r8, fp
 80133a6:	fa1f f989 	uxth.w	r9, r9
 80133aa:	f109 0b01 	add.w	fp, r9, #1
 80133ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133b2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80133b6:	fb1b fb08 	smulbb	fp, fp, r8
 80133ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133be:	f805 9c03 	strb.w	r9, [r5, #-3]
 80133c2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80133c6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80133ca:	fb09 b907 	mla	r9, r9, r7, fp
 80133ce:	fa1f f989 	uxth.w	r9, r9
 80133d2:	f109 0b01 	add.w	fp, r9, #1
 80133d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133de:	f805 9c02 	strb.w	r9, [r5, #-2]
 80133e2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80133e6:	fb19 f808 	smulbb	r8, r9, r8
 80133ea:	fb06 8607 	mla	r6, r6, r7, r8
 80133ee:	b2b6      	uxth	r6, r6
 80133f0:	f106 0801 	add.w	r8, r6, #1
 80133f4:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80133f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80133fc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013400:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013402:	4470      	add	r0, lr
 8013404:	3503      	adds	r5, #3
 8013406:	f10a 3aff 	add.w	sl, sl, #4294967295
 801340a:	4432      	add	r2, r6
 801340c:	e7a7      	b.n	801335e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801340e:	2600      	movs	r6, #0
 8013410:	1b9d      	subs	r5, r3, r6
 8013412:	2d00      	cmp	r5, #0
 8013414:	dc3b      	bgt.n	801348e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801341a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801341e:	441c      	add	r4, r3
 8013420:	2900      	cmp	r1, #0
 8013422:	f340 80a8 	ble.w	8013576 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013426:	ee30 0a04 	vadd.f32	s0, s0, s8
 801342a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801342c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013430:	3901      	subs	r1, #1
 8013432:	eeb0 6a62 	vmov.f32	s12, s5
 8013436:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801343a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801343e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013442:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013446:	eeb0 6a43 	vmov.f32	s12, s6
 801344a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801344e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013452:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013456:	ee61 7a27 	vmul.f32	s15, s2, s15
 801345a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801345e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013462:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013466:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801346a:	ee12 2a90 	vmov	r2, s5
 801346e:	eef0 2a47 	vmov.f32	s5, s14
 8013472:	fb92 fef3 	sdiv	lr, r2, r3
 8013476:	ee13 2a10 	vmov	r2, s6
 801347a:	eeb0 3a67 	vmov.f32	s6, s15
 801347e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013482:	9a03      	ldr	r2, [sp, #12]
 8013484:	9312      	str	r3, [sp, #72]	; 0x48
 8013486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013488:	bf08      	it	eq
 801348a:	4613      	moveq	r3, r2
 801348c:	e736      	b.n	80132fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801348e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013492:	d457      	bmi.n	8013544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013494:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8013498:	4547      	cmp	r7, r8
 801349a:	dd53      	ble.n	8013544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801349c:	ea5f 4922 	movs.w	r9, r2, asr #16
 80134a0:	d450      	bmi.n	8013544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134a2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80134a6:	454d      	cmp	r5, r9
 80134a8:	dd4c      	ble.n	8013544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134aa:	9d01      	ldr	r5, [sp, #4]
 80134ac:	b23f      	sxth	r7, r7
 80134ae:	fb09 5707 	mla	r7, r9, r7, r5
 80134b2:	f817 5008 	ldrb.w	r5, [r7, r8]
 80134b6:	9f02      	ldr	r7, [sp, #8]
 80134b8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80134bc:	0e2f      	lsrs	r7, r5, #24
 80134be:	2fff      	cmp	r7, #255	; 0xff
 80134c0:	d045      	beq.n	801354e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80134c2:	fa5f f987 	uxtb.w	r9, r7
 80134c6:	b3ef      	cbz	r7, 8013544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134c8:	fa1f f889 	uxth.w	r8, r9
 80134cc:	ea6f 0909 	mvn.w	r9, r9
 80134d0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80134d4:	fa5f fb85 	uxtb.w	fp, r5
 80134d8:	f814 a007 	ldrb.w	sl, [r4, r7]
 80134dc:	fa5f f989 	uxtb.w	r9, r9
 80134e0:	fb1b fb08 	smulbb	fp, fp, r8
 80134e4:	fb0a ba09 	mla	sl, sl, r9, fp
 80134e8:	fa1f fa8a 	uxth.w	sl, sl
 80134ec:	f10a 0b01 	add.w	fp, sl, #1
 80134f0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80134f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80134f8:	f804 a007 	strb.w	sl, [r4, r7]
 80134fc:	4427      	add	r7, r4
 80134fe:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013502:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8013506:	f897 b001 	ldrb.w	fp, [r7, #1]
 801350a:	fb1b fb09 	smulbb	fp, fp, r9
 801350e:	fb0a ba08 	mla	sl, sl, r8, fp
 8013512:	fa1f fa8a 	uxth.w	sl, sl
 8013516:	f10a 0b01 	add.w	fp, sl, #1
 801351a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801351e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013522:	f887 a001 	strb.w	sl, [r7, #1]
 8013526:	f897 a002 	ldrb.w	sl, [r7, #2]
 801352a:	fb1a f909 	smulbb	r9, sl, r9
 801352e:	fb05 9508 	mla	r5, r5, r8, r9
 8013532:	b2ad      	uxth	r5, r5
 8013534:	f105 0901 	add.w	r9, r5, #1
 8013538:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801353c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013540:	f887 9002 	strb.w	r9, [r7, #2]
 8013544:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013546:	4470      	add	r0, lr
 8013548:	3601      	adds	r6, #1
 801354a:	442a      	add	r2, r5
 801354c:	e760      	b.n	8013410 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801354e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8013552:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8013556:	55e5      	strb	r5, [r4, r7]
 8013558:	4427      	add	r7, r4
 801355a:	0c2d      	lsrs	r5, r5, #16
 801355c:	f887 8001 	strb.w	r8, [r7, #1]
 8013560:	70bd      	strb	r5, [r7, #2]
 8013562:	e7ef      	b.n	8013544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013564:	0a37      	lsrs	r7, r6, #8
 8013566:	f805 6c03 	strb.w	r6, [r5, #-3]
 801356a:	0c36      	lsrs	r6, r6, #16
 801356c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8013570:	f805 6c01 	strb.w	r6, [r5, #-1]
 8013574:	e744      	b.n	8013400 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013576:	b005      	add	sp, #20
 8013578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801357c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801357c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013580:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013582:	9201      	str	r2, [sp, #4]
 8013584:	6870      	ldr	r0, [r6, #4]
 8013586:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801358a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801358e:	fa1f fe85 	uxth.w	lr, r5
 8013592:	43ed      	mvns	r5, r5
 8013594:	f8dc 8000 	ldr.w	r8, [ip]
 8013598:	b2ed      	uxtb	r5, r5
 801359a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801359e:	fb00 2404 	mla	r4, r0, r4, r2
 80135a2:	6832      	ldr	r2, [r6, #0]
 80135a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80135a8:	4414      	add	r4, r2
 80135aa:	2900      	cmp	r1, #0
 80135ac:	dc03      	bgt.n	80135b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80135ae:	9a01      	ldr	r2, [sp, #4]
 80135b0:	2a00      	cmp	r2, #0
 80135b2:	f340 810d 	ble.w	80137d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80135b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135b8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80135bc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80135c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135c2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80135c6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	dd0e      	ble.n	80135ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80135ce:	1406      	asrs	r6, r0, #16
 80135d0:	d405      	bmi.n	80135de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135d2:	4556      	cmp	r6, sl
 80135d4:	da03      	bge.n	80135de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135d6:	1416      	asrs	r6, r2, #16
 80135d8:	d401      	bmi.n	80135de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135da:	454e      	cmp	r6, r9
 80135dc:	db07      	blt.n	80135ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80135de:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80135e0:	3b01      	subs	r3, #1
 80135e2:	3403      	adds	r4, #3
 80135e4:	4430      	add	r0, r6
 80135e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80135e8:	4432      	add	r2, r6
 80135ea:	e7ee      	b.n	80135ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80135ec:	d060      	beq.n	80136b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80135ee:	1e5e      	subs	r6, r3, #1
 80135f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80135f2:	fb07 0706 	mla	r7, r7, r6, r0
 80135f6:	143f      	asrs	r7, r7, #16
 80135f8:	d451      	bmi.n	801369e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80135fa:	4557      	cmp	r7, sl
 80135fc:	da4f      	bge.n	801369e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80135fe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013600:	fb07 2606 	mla	r6, r7, r6, r2
 8013604:	1436      	asrs	r6, r6, #16
 8013606:	d44a      	bmi.n	801369e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8013608:	454e      	cmp	r6, r9
 801360a:	da48      	bge.n	801369e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801360c:	1ce6      	adds	r6, r4, #3
 801360e:	4699      	mov	r9, r3
 8013610:	f1b9 0f00 	cmp.w	r9, #0
 8013614:	f106 0603 	add.w	r6, r6, #3
 8013618:	dd45      	ble.n	80136a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801361a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801361e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013622:	1417      	asrs	r7, r2, #16
 8013624:	f109 39ff 	add.w	r9, r9, #4294967295
 8013628:	fb0b a707 	mla	r7, fp, r7, sl
 801362c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013630:	fb1b fb05 	smulbb	fp, fp, r5
 8013634:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013638:	eb08 0a07 	add.w	sl, r8, r7
 801363c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013640:	fb07 b70e 	mla	r7, r7, lr, fp
 8013644:	b2bf      	uxth	r7, r7
 8013646:	f107 0b01 	add.w	fp, r7, #1
 801364a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801364e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013652:	fb1b fb05 	smulbb	fp, fp, r5
 8013656:	123f      	asrs	r7, r7, #8
 8013658:	f806 7c06 	strb.w	r7, [r6, #-6]
 801365c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8013660:	fb07 b70e 	mla	r7, r7, lr, fp
 8013664:	b2bf      	uxth	r7, r7
 8013666:	f107 0b01 	add.w	fp, r7, #1
 801366a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801366e:	123f      	asrs	r7, r7, #8
 8013670:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013674:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013678:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801367c:	fb1a fa05 	smulbb	sl, sl, r5
 8013680:	fb07 a70e 	mla	r7, r7, lr, sl
 8013684:	b2bf      	uxth	r7, r7
 8013686:	f107 0a01 	add.w	sl, r7, #1
 801368a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801368e:	123f      	asrs	r7, r7, #8
 8013690:	f806 7c04 	strb.w	r7, [r6, #-4]
 8013694:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013696:	4438      	add	r0, r7
 8013698:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801369a:	443a      	add	r2, r7
 801369c:	e7b8      	b.n	8013610 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801369e:	2700      	movs	r7, #0
 80136a0:	1bde      	subs	r6, r3, r7
 80136a2:	2e00      	cmp	r6, #0
 80136a4:	dc3f      	bgt.n	8013726 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80136a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80136ae:	441c      	add	r4, r3
 80136b0:	2900      	cmp	r1, #0
 80136b2:	f340 808d 	ble.w	80137d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80136b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80136ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80136c0:	3901      	subs	r1, #1
 80136c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80136c6:	eef0 6a62 	vmov.f32	s13, s5
 80136ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80136ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80136d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136d6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80136da:	eef0 6a43 	vmov.f32	s13, s6
 80136de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136e2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80136e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80136ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80136ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80136f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80136f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80136fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80136fe:	ee12 2a90 	vmov	r2, s5
 8013702:	eef0 2a47 	vmov.f32	s5, s14
 8013706:	fb92 f3f3 	sdiv	r3, r2, r3
 801370a:	ee13 2a10 	vmov	r2, s6
 801370e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013712:	eeb0 3a67 	vmov.f32	s6, s15
 8013716:	fb92 f3f3 	sdiv	r3, r2, r3
 801371a:	9a01      	ldr	r2, [sp, #4]
 801371c:	9310      	str	r3, [sp, #64]	; 0x40
 801371e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013720:	bf08      	it	eq
 8013722:	4613      	moveq	r3, r2
 8013724:	e741      	b.n	80135aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8013726:	ea5f 4920 	movs.w	r9, r0, asr #16
 801372a:	d44b      	bmi.n	80137c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801372c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8013730:	45cb      	cmp	fp, r9
 8013732:	dd47      	ble.n	80137c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013734:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013738:	d444      	bmi.n	80137c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801373a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801373e:	4556      	cmp	r6, sl
 8013740:	dd40      	ble.n	80137c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013742:	fa0f f68b 	sxth.w	r6, fp
 8013746:	fb0a 9906 	mla	r9, sl, r6, r9
 801374a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801374e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013752:	f814 b006 	ldrb.w	fp, [r4, r6]
 8013756:	fb1b fb05 	smulbb	fp, fp, r5
 801375a:	eb08 0a09 	add.w	sl, r8, r9
 801375e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8013762:	fb09 b90e 	mla	r9, r9, lr, fp
 8013766:	fa1f f989 	uxth.w	r9, r9
 801376a:	f109 0b01 	add.w	fp, r9, #1
 801376e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013772:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013776:	f804 9006 	strb.w	r9, [r4, r6]
 801377a:	4426      	add	r6, r4
 801377c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8013780:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013784:	fb1b fb05 	smulbb	fp, fp, r5
 8013788:	fb09 b90e 	mla	r9, r9, lr, fp
 801378c:	fa1f f989 	uxth.w	r9, r9
 8013790:	f109 0b01 	add.w	fp, r9, #1
 8013794:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013798:	ea4f 2929 	mov.w	r9, r9, asr #8
 801379c:	f886 9001 	strb.w	r9, [r6, #1]
 80137a0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80137a4:	f896 a002 	ldrb.w	sl, [r6, #2]
 80137a8:	fb1a fa05 	smulbb	sl, sl, r5
 80137ac:	fb09 a90e 	mla	r9, r9, lr, sl
 80137b0:	fa1f f989 	uxth.w	r9, r9
 80137b4:	f109 0a01 	add.w	sl, r9, #1
 80137b8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80137bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80137c0:	f886 9002 	strb.w	r9, [r6, #2]
 80137c4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80137c6:	3701      	adds	r7, #1
 80137c8:	4430      	add	r0, r6
 80137ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80137cc:	4432      	add	r2, r6
 80137ce:	e767      	b.n	80136a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80137d0:	b003      	add	sp, #12
 80137d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80137d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80137dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137e0:	9201      	str	r2, [sp, #4]
 80137e2:	6868      	ldr	r0, [r5, #4]
 80137e4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80137e6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80137ea:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80137ee:	fb00 2404 	mla	r4, r0, r4, r2
 80137f2:	682a      	ldr	r2, [r5, #0]
 80137f4:	f8d7 8000 	ldr.w	r8, [r7]
 80137f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80137fc:	4414      	add	r4, r2
 80137fe:	2900      	cmp	r1, #0
 8013800:	dc03      	bgt.n	801380a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013802:	9a01      	ldr	r2, [sp, #4]
 8013804:	2a00      	cmp	r2, #0
 8013806:	f340 80af 	ble.w	8013968 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801380a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801380c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8013810:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013816:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801381a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801381e:	2b00      	cmp	r3, #0
 8013820:	dd0c      	ble.n	801383c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013822:	1405      	asrs	r5, r0, #16
 8013824:	d405      	bmi.n	8013832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013826:	4555      	cmp	r5, sl
 8013828:	da03      	bge.n	8013832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801382a:	1415      	asrs	r5, r2, #16
 801382c:	d401      	bmi.n	8013832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801382e:	454d      	cmp	r5, r9
 8013830:	db05      	blt.n	801383e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013832:	4470      	add	r0, lr
 8013834:	4462      	add	r2, ip
 8013836:	3b01      	subs	r3, #1
 8013838:	3403      	adds	r4, #3
 801383a:	e7f0      	b.n	801381e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801383c:	d038      	beq.n	80138b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801383e:	1e5d      	subs	r5, r3, #1
 8013840:	fb0e 0605 	mla	r6, lr, r5, r0
 8013844:	1436      	asrs	r6, r6, #16
 8013846:	d42a      	bmi.n	801389e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013848:	4556      	cmp	r6, sl
 801384a:	da28      	bge.n	801389e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801384c:	fb0c 2505 	mla	r5, ip, r5, r2
 8013850:	142d      	asrs	r5, r5, #16
 8013852:	d424      	bmi.n	801389e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013854:	454d      	cmp	r5, r9
 8013856:	da22      	bge.n	801389e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013858:	1ce6      	adds	r6, r4, #3
 801385a:	4699      	mov	r9, r3
 801385c:	f1b9 0f00 	cmp.w	r9, #0
 8013860:	f106 0603 	add.w	r6, r6, #3
 8013864:	dd1f      	ble.n	80138a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8013866:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801386a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801386e:	1415      	asrs	r5, r2, #16
 8013870:	4470      	add	r0, lr
 8013872:	4462      	add	r2, ip
 8013874:	f109 39ff 	add.w	r9, r9, #4294967295
 8013878:	fb0b a505 	mla	r5, fp, r5, sl
 801387c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013880:	eb08 0a05 	add.w	sl, r8, r5
 8013884:	f818 5005 	ldrb.w	r5, [r8, r5]
 8013888:	f806 5c06 	strb.w	r5, [r6, #-6]
 801388c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8013890:	f806 5c05 	strb.w	r5, [r6, #-5]
 8013894:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8013898:	f806 5c04 	strb.w	r5, [r6, #-4]
 801389c:	e7de      	b.n	801385c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801389e:	2600      	movs	r6, #0
 80138a0:	1b9d      	subs	r5, r3, r6
 80138a2:	2d00      	cmp	r5, #0
 80138a4:	dc38      	bgt.n	8013918 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80138a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80138aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80138ae:	441c      	add	r4, r3
 80138b0:	2900      	cmp	r1, #0
 80138b2:	dd59      	ble.n	8013968 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80138b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80138b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80138be:	3901      	subs	r1, #1
 80138c0:	eeb0 6a62 	vmov.f32	s12, s5
 80138c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80138c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80138cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138d0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80138d4:	eeb0 6a43 	vmov.f32	s12, s6
 80138d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138dc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80138e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80138e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80138e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80138ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80138f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80138f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80138f8:	ee12 2a90 	vmov	r2, s5
 80138fc:	eef0 2a47 	vmov.f32	s5, s14
 8013900:	fb92 fef3 	sdiv	lr, r2, r3
 8013904:	ee13 2a10 	vmov	r2, s6
 8013908:	eeb0 3a67 	vmov.f32	s6, s15
 801390c:	fb92 fcf3 	sdiv	ip, r2, r3
 8013910:	9a01      	ldr	r2, [sp, #4]
 8013912:	bf08      	it	eq
 8013914:	4613      	moveq	r3, r2
 8013916:	e772      	b.n	80137fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013918:	ea5f 4920 	movs.w	r9, r0, asr #16
 801391c:	d420      	bmi.n	8013960 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801391e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8013922:	45cb      	cmp	fp, r9
 8013924:	dd1c      	ble.n	8013960 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013926:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801392a:	d419      	bmi.n	8013960 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801392c:	68fd      	ldr	r5, [r7, #12]
 801392e:	4555      	cmp	r5, sl
 8013930:	dd16      	ble.n	8013960 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013932:	fa0f f58b 	sxth.w	r5, fp
 8013936:	fb0a 9505 	mla	r5, sl, r5, r9
 801393a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801393e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8013942:	eb08 0b05 	add.w	fp, r8, r5
 8013946:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801394a:	f804 9005 	strb.w	r9, [r4, r5]
 801394e:	4425      	add	r5, r4
 8013950:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8013954:	f885 9001 	strb.w	r9, [r5, #1]
 8013958:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801395c:	f885 9002 	strb.w	r9, [r5, #2]
 8013960:	4470      	add	r0, lr
 8013962:	4462      	add	r2, ip
 8013964:	3601      	adds	r6, #1
 8013966:	e79b      	b.n	80138a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8013968:	b003      	add	sp, #12
 801396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801396e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801396e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013972:	b085      	sub	sp, #20
 8013974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013978:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801397a:	9202      	str	r2, [sp, #8]
 801397c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8013980:	6860      	ldr	r0, [r4, #4]
 8013982:	9203      	str	r2, [sp, #12]
 8013984:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013988:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801398c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8013990:	fb00 2505 	mla	r5, r0, r5, r2
 8013994:	6822      	ldr	r2, [r4, #0]
 8013996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801399a:	4415      	add	r5, r2
 801399c:	f8dc 2000 	ldr.w	r2, [ip]
 80139a0:	9201      	str	r2, [sp, #4]
 80139a2:	2900      	cmp	r1, #0
 80139a4:	dc03      	bgt.n	80139ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80139a6:	9a02      	ldr	r2, [sp, #8]
 80139a8:	2a00      	cmp	r2, #0
 80139aa:	f340 8122 	ble.w	8013bf2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80139ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139b0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80139b4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80139b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80139ba:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80139be:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	dd0d      	ble.n	80139e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80139c6:	1422      	asrs	r2, r4, #16
 80139c8:	d405      	bmi.n	80139d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139ca:	4542      	cmp	r2, r8
 80139cc:	da03      	bge.n	80139d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139ce:	1402      	asrs	r2, r0, #16
 80139d0:	d401      	bmi.n	80139d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139d2:	42ba      	cmp	r2, r7
 80139d4:	db06      	blt.n	80139e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80139d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80139d8:	4474      	add	r4, lr
 80139da:	3b01      	subs	r3, #1
 80139dc:	3503      	adds	r5, #3
 80139de:	4410      	add	r0, r2
 80139e0:	e7ef      	b.n	80139c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80139e2:	d072      	beq.n	8013aca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80139e4:	1e5a      	subs	r2, r3, #1
 80139e6:	fb0e 4602 	mla	r6, lr, r2, r4
 80139ea:	1436      	asrs	r6, r6, #16
 80139ec:	d462      	bmi.n	8013ab4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80139ee:	4546      	cmp	r6, r8
 80139f0:	da60      	bge.n	8013ab4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80139f2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80139f4:	fb06 0202 	mla	r2, r6, r2, r0
 80139f8:	1412      	asrs	r2, r2, #16
 80139fa:	d45b      	bmi.n	8013ab4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80139fc:	42ba      	cmp	r2, r7
 80139fe:	da59      	bge.n	8013ab4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8013a00:	1cef      	adds	r7, r5, #3
 8013a02:	4699      	mov	r9, r3
 8013a04:	f1b9 0f00 	cmp.w	r9, #0
 8013a08:	dd5a      	ble.n	8013ac0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8013a0a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013a0e:	1426      	asrs	r6, r4, #16
 8013a10:	1402      	asrs	r2, r0, #16
 8013a12:	fb08 6202 	mla	r2, r8, r2, r6
 8013a16:	9e01      	ldr	r6, [sp, #4]
 8013a18:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8013a1c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8013a20:	d041      	beq.n	8013aa6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013a22:	9a03      	ldr	r2, [sp, #12]
 8013a24:	fa5f fb86 	uxtb.w	fp, r6
 8013a28:	fb02 f808 	mul.w	r8, r2, r8
 8013a2c:	f108 0201 	add.w	r2, r8, #1
 8013a30:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8013a34:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013a38:	1212      	asrs	r2, r2, #8
 8013a3a:	fa1f fa82 	uxth.w	sl, r2
 8013a3e:	43d2      	mvns	r2, r2
 8013a40:	fb1b fb0a 	smulbb	fp, fp, sl
 8013a44:	b2d2      	uxtb	r2, r2
 8013a46:	fb08 b802 	mla	r8, r8, r2, fp
 8013a4a:	fa1f f888 	uxth.w	r8, r8
 8013a4e:	f108 0b01 	add.w	fp, r8, #1
 8013a52:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013a56:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013a5a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013a5e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013a62:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013a66:	fb16 fa0a 	smulbb	sl, r6, sl
 8013a6a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013a6e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8013a72:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013a76:	fb06 aa02 	mla	sl, r6, r2, sl
 8013a7a:	fb08 b802 	mla	r8, r8, r2, fp
 8013a7e:	fa1f fa8a 	uxth.w	sl, sl
 8013a82:	fa1f f888 	uxth.w	r8, r8
 8013a86:	f10a 0601 	add.w	r6, sl, #1
 8013a8a:	f108 0b01 	add.w	fp, r8, #1
 8013a8e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8013a92:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013a96:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013a9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013a9e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8013aa2:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013aa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013aa8:	4474      	add	r4, lr
 8013aaa:	3703      	adds	r7, #3
 8013aac:	f109 39ff 	add.w	r9, r9, #4294967295
 8013ab0:	4410      	add	r0, r2
 8013ab2:	e7a7      	b.n	8013a04 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8013ab4:	f04f 0800 	mov.w	r8, #0
 8013ab8:	eba3 0208 	sub.w	r2, r3, r8
 8013abc:	2a00      	cmp	r2, #0
 8013abe:	dc3b      	bgt.n	8013b38 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8013ac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ac8:	441d      	add	r5, r3
 8013aca:	2900      	cmp	r1, #0
 8013acc:	f340 8091 	ble.w	8013bf2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8013ad0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ad6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013ada:	3901      	subs	r1, #1
 8013adc:	eeb0 6a62 	vmov.f32	s12, s5
 8013ae0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013ae4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013ae8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013aec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013af0:	eeb0 6a43 	vmov.f32	s12, s6
 8013af4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013af8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013afc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013b00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013b04:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013b08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013b0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013b10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013b14:	ee12 2a90 	vmov	r2, s5
 8013b18:	eef0 2a47 	vmov.f32	s5, s14
 8013b1c:	fb92 fef3 	sdiv	lr, r2, r3
 8013b20:	ee13 2a10 	vmov	r2, s6
 8013b24:	eeb0 3a67 	vmov.f32	s6, s15
 8013b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b2c:	9a02      	ldr	r2, [sp, #8]
 8013b2e:	9312      	str	r3, [sp, #72]	; 0x48
 8013b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b32:	bf08      	it	eq
 8013b34:	4613      	moveq	r3, r2
 8013b36:	e734      	b.n	80139a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013b38:	1427      	asrs	r7, r4, #16
 8013b3a:	d454      	bmi.n	8013be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b3c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013b40:	42be      	cmp	r6, r7
 8013b42:	dd50      	ble.n	8013be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b44:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013b48:	d44d      	bmi.n	8013be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b4a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013b4e:	454a      	cmp	r2, r9
 8013b50:	dd49      	ble.n	8013be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b52:	b236      	sxth	r6, r6
 8013b54:	9a01      	ldr	r2, [sp, #4]
 8013b56:	fb09 7606 	mla	r6, r9, r6, r7
 8013b5a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013b5e:	0e3a      	lsrs	r2, r7, #24
 8013b60:	d041      	beq.n	8013be6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b62:	9e03      	ldr	r6, [sp, #12]
 8013b64:	fa5f fb87 	uxtb.w	fp, r7
 8013b68:	4372      	muls	r2, r6
 8013b6a:	1c56      	adds	r6, r2, #1
 8013b6c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8013b70:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013b74:	1212      	asrs	r2, r2, #8
 8013b76:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013b7a:	fa1f fa82 	uxth.w	sl, r2
 8013b7e:	43d2      	mvns	r2, r2
 8013b80:	fb1b fb0a 	smulbb	fp, fp, sl
 8013b84:	b2d2      	uxtb	r2, r2
 8013b86:	fb09 b902 	mla	r9, r9, r2, fp
 8013b8a:	fa1f f989 	uxth.w	r9, r9
 8013b8e:	f109 0b01 	add.w	fp, r9, #1
 8013b92:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013b96:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013b9a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013b9e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013ba2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013ba6:	fb17 fa0a 	smulbb	sl, r7, sl
 8013baa:	f805 9006 	strb.w	r9, [r5, r6]
 8013bae:	442e      	add	r6, r5
 8013bb0:	78b7      	ldrb	r7, [r6, #2]
 8013bb2:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013bb6:	fb07 aa02 	mla	sl, r7, r2, sl
 8013bba:	fb09 b902 	mla	r9, r9, r2, fp
 8013bbe:	fa1f fa8a 	uxth.w	sl, sl
 8013bc2:	fa1f f989 	uxth.w	r9, r9
 8013bc6:	f10a 0701 	add.w	r7, sl, #1
 8013bca:	f109 0b01 	add.w	fp, r9, #1
 8013bce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013bd2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013bd6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013bda:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013bde:	f886 a002 	strb.w	sl, [r6, #2]
 8013be2:	f886 9001 	strb.w	r9, [r6, #1]
 8013be6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013be8:	4474      	add	r4, lr
 8013bea:	f108 0801 	add.w	r8, r8, #1
 8013bee:	4410      	add	r0, r2
 8013bf0:	e762      	b.n	8013ab8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013bf2:	b005      	add	sp, #20
 8013bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013bf8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c02:	9201      	str	r2, [sp, #4]
 8013c04:	6860      	ldr	r0, [r4, #4]
 8013c06:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8013c0a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8013c0e:	fb00 2505 	mla	r5, r0, r5, r2
 8013c12:	6822      	ldr	r2, [r4, #0]
 8013c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c18:	4415      	add	r5, r2
 8013c1a:	f8dc 2000 	ldr.w	r2, [ip]
 8013c1e:	9200      	str	r2, [sp, #0]
 8013c20:	2900      	cmp	r1, #0
 8013c22:	dc03      	bgt.n	8013c2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013c24:	9a01      	ldr	r2, [sp, #4]
 8013c26:	2a00      	cmp	r2, #0
 8013c28:	f340 812b 	ble.w	8013e82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c2e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8013c32:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013c36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c38:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013c3c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	dd0e      	ble.n	8013c62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013c44:	1422      	asrs	r2, r4, #16
 8013c46:	d405      	bmi.n	8013c54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c48:	4572      	cmp	r2, lr
 8013c4a:	da03      	bge.n	8013c54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c4c:	1402      	asrs	r2, r0, #16
 8013c4e:	d401      	bmi.n	8013c54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c50:	42ba      	cmp	r2, r7
 8013c52:	db07      	blt.n	8013c64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8013c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c56:	3b01      	subs	r3, #1
 8013c58:	3503      	adds	r5, #3
 8013c5a:	4414      	add	r4, r2
 8013c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c5e:	4410      	add	r0, r2
 8013c60:	e7ee      	b.n	8013c40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013c62:	d06f      	beq.n	8013d44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013c64:	1e5a      	subs	r2, r3, #1
 8013c66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013c68:	fb06 4602 	mla	r6, r6, r2, r4
 8013c6c:	1436      	asrs	r6, r6, #16
 8013c6e:	d45e      	bmi.n	8013d2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c70:	4576      	cmp	r6, lr
 8013c72:	da5c      	bge.n	8013d2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c74:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013c76:	fb06 0202 	mla	r2, r6, r2, r0
 8013c7a:	1412      	asrs	r2, r2, #16
 8013c7c:	d457      	bmi.n	8013d2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c7e:	42ba      	cmp	r2, r7
 8013c80:	da55      	bge.n	8013d2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c82:	1cee      	adds	r6, r5, #3
 8013c84:	469a      	mov	sl, r3
 8013c86:	f1ba 0f00 	cmp.w	sl, #0
 8013c8a:	dd56      	ble.n	8013d3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8013c8c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8013c90:	1427      	asrs	r7, r4, #16
 8013c92:	1402      	asrs	r2, r0, #16
 8013c94:	fb0e 7202 	mla	r2, lr, r2, r7
 8013c98:	9f00      	ldr	r7, [sp, #0]
 8013c9a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8013c9e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8013ca2:	d03c      	beq.n	8013d1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013ca4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013ca8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013cac:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8013cb0:	fa5f f28e 	uxtb.w	r2, lr
 8013cb4:	b2ff      	uxtb	r7, r7
 8013cb6:	f000 80dd 	beq.w	8013e74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8013cba:	fa1f f882 	uxth.w	r8, r2
 8013cbe:	43d2      	mvns	r2, r2
 8013cc0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8013cc4:	fb17 f708 	smulbb	r7, r7, r8
 8013cc8:	b2d2      	uxtb	r2, r2
 8013cca:	fb19 f908 	smulbb	r9, r9, r8
 8013cce:	fb0e 7702 	mla	r7, lr, r2, r7
 8013cd2:	fb1b f808 	smulbb	r8, fp, r8
 8013cd6:	b2bf      	uxth	r7, r7
 8013cd8:	f107 0e01 	add.w	lr, r7, #1
 8013cdc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8013ce0:	123f      	asrs	r7, r7, #8
 8013ce2:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013ce6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8013cea:	fb07 9902 	mla	r9, r7, r2, r9
 8013cee:	fa1f f989 	uxth.w	r9, r9
 8013cf2:	f109 0701 	add.w	r7, r9, #1
 8013cf6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8013cfa:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8013cfe:	fb07 8802 	mla	r8, r7, r2, r8
 8013d02:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013d06:	fa1f f888 	uxth.w	r8, r8
 8013d0a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013d0e:	f108 0201 	add.w	r2, r8, #1
 8013d12:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013d16:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013d1a:	f806 8c01 	strb.w	r8, [r6, #-1]
 8013d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d20:	3603      	adds	r6, #3
 8013d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d26:	4414      	add	r4, r2
 8013d28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d2a:	4410      	add	r0, r2
 8013d2c:	e7ab      	b.n	8013c86 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8013d2e:	f04f 0e00 	mov.w	lr, #0
 8013d32:	eba3 020e 	sub.w	r2, r3, lr
 8013d36:	2a00      	cmp	r2, #0
 8013d38:	dc3d      	bgt.n	8013db6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8013d3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013d42:	441d      	add	r5, r3
 8013d44:	2900      	cmp	r1, #0
 8013d46:	f340 809c 	ble.w	8013e82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013d4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013d54:	3901      	subs	r1, #1
 8013d56:	eeb0 6a62 	vmov.f32	s12, s5
 8013d5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013d5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013d62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d66:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8013d6a:	eeb0 6a43 	vmov.f32	s12, s6
 8013d6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d72:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013d76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013d7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013d7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013d82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013d86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013d8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013d8e:	ee12 2a90 	vmov	r2, s5
 8013d92:	eef0 2a47 	vmov.f32	s5, s14
 8013d96:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d9a:	ee13 2a10 	vmov	r2, s6
 8013d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013da2:	eeb0 3a67 	vmov.f32	s6, s15
 8013da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8013daa:	9a01      	ldr	r2, [sp, #4]
 8013dac:	9310      	str	r3, [sp, #64]	; 0x40
 8013dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013db0:	bf08      	it	eq
 8013db2:	4613      	moveq	r3, r2
 8013db4:	e734      	b.n	8013c20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013db6:	1427      	asrs	r7, r4, #16
 8013db8:	d44d      	bmi.n	8013e56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013dba:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013dbe:	42be      	cmp	r6, r7
 8013dc0:	dd49      	ble.n	8013e56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013dc2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013dc6:	d446      	bmi.n	8013e56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013dc8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013dcc:	4542      	cmp	r2, r8
 8013dce:	dd42      	ble.n	8013e56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013dd0:	b236      	sxth	r6, r6
 8013dd2:	9a00      	ldr	r2, [sp, #0]
 8013dd4:	fb08 7606 	mla	r6, r8, r6, r7
 8013dd8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013ddc:	0e3a      	lsrs	r2, r7, #24
 8013dde:	d03a      	beq.n	8013e56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013de0:	2aff      	cmp	r2, #255	; 0xff
 8013de2:	b2d6      	uxtb	r6, r2
 8013de4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013de8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8013dec:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8013df0:	b2ff      	uxtb	r7, r7
 8013df2:	d037      	beq.n	8013e64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8013df4:	fa1f f986 	uxth.w	r9, r6
 8013df8:	4472      	add	r2, lr
 8013dfa:	43f6      	mvns	r6, r6
 8013dfc:	f815 8002 	ldrb.w	r8, [r5, r2]
 8013e00:	fb17 f709 	smulbb	r7, r7, r9
 8013e04:	fb1a fa09 	smulbb	sl, sl, r9
 8013e08:	b2f6      	uxtb	r6, r6
 8013e0a:	fb1b f909 	smulbb	r9, fp, r9
 8013e0e:	fb08 7706 	mla	r7, r8, r6, r7
 8013e12:	b2bf      	uxth	r7, r7
 8013e14:	f107 0801 	add.w	r8, r7, #1
 8013e18:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8013e1c:	123f      	asrs	r7, r7, #8
 8013e1e:	54af      	strb	r7, [r5, r2]
 8013e20:	442a      	add	r2, r5
 8013e22:	7857      	ldrb	r7, [r2, #1]
 8013e24:	fb07 aa06 	mla	sl, r7, r6, sl
 8013e28:	fa1f fa8a 	uxth.w	sl, sl
 8013e2c:	f10a 0701 	add.w	r7, sl, #1
 8013e30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013e34:	7897      	ldrb	r7, [r2, #2]
 8013e36:	fb07 9906 	mla	r9, r7, r6, r9
 8013e3a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013e3e:	fa1f f989 	uxth.w	r9, r9
 8013e42:	f882 a001 	strb.w	sl, [r2, #1]
 8013e46:	f109 0601 	add.w	r6, r9, #1
 8013e4a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8013e4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013e52:	f882 9002 	strb.w	r9, [r2, #2]
 8013e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e58:	f10e 0e01 	add.w	lr, lr, #1
 8013e5c:	4414      	add	r4, r2
 8013e5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e60:	4410      	add	r0, r2
 8013e62:	e766      	b.n	8013d32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013e64:	4472      	add	r2, lr
 8013e66:	54af      	strb	r7, [r5, r2]
 8013e68:	442a      	add	r2, r5
 8013e6a:	f882 a001 	strb.w	sl, [r2, #1]
 8013e6e:	f882 b002 	strb.w	fp, [r2, #2]
 8013e72:	e7f0      	b.n	8013e56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013e74:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013e78:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013e7c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8013e80:	e74d      	b.n	8013d1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013e82:	b003      	add	sp, #12
 8013e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e8c:	b087      	sub	sp, #28
 8013e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013e94:	9204      	str	r2, [sp, #16]
 8013e96:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013e9a:	6860      	ldr	r0, [r4, #4]
 8013e9c:	9205      	str	r2, [sp, #20]
 8013e9e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8013ea2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8013ea6:	9101      	str	r1, [sp, #4]
 8013ea8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8013eac:	fb00 2505 	mla	r5, r0, r5, r2
 8013eb0:	6822      	ldr	r2, [r4, #0]
 8013eb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013eb6:	4415      	add	r5, r2
 8013eb8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8013ebc:	3201      	adds	r2, #1
 8013ebe:	f022 0201 	bic.w	r2, r2, #1
 8013ec2:	9202      	str	r2, [sp, #8]
 8013ec4:	f8dc 2000 	ldr.w	r2, [ip]
 8013ec8:	9203      	str	r2, [sp, #12]
 8013eca:	9a01      	ldr	r2, [sp, #4]
 8013ecc:	2a00      	cmp	r2, #0
 8013ece:	dc03      	bgt.n	8013ed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8013ed0:	9a04      	ldr	r2, [sp, #16]
 8013ed2:	2a00      	cmp	r2, #0
 8013ed4:	f340 8135 	ble.w	8014142 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8013ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013eda:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013ede:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013ee2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ee4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013ee8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	dd0d      	ble.n	8013f0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8013ef0:	1422      	asrs	r2, r4, #16
 8013ef2:	d405      	bmi.n	8013f00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013ef4:	4542      	cmp	r2, r8
 8013ef6:	da03      	bge.n	8013f00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013ef8:	1402      	asrs	r2, r0, #16
 8013efa:	d401      	bmi.n	8013f00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013efc:	42ba      	cmp	r2, r7
 8013efe:	db06      	blt.n	8013f0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8013f00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f02:	4474      	add	r4, lr
 8013f04:	3b01      	subs	r3, #1
 8013f06:	3503      	adds	r5, #3
 8013f08:	4410      	add	r0, r2
 8013f0a:	e7ef      	b.n	8013eec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013f0c:	d077      	beq.n	8013ffe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8013f0e:	1e5a      	subs	r2, r3, #1
 8013f10:	fb0e 4602 	mla	r6, lr, r2, r4
 8013f14:	1436      	asrs	r6, r6, #16
 8013f16:	d469      	bmi.n	8013fec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f18:	4546      	cmp	r6, r8
 8013f1a:	da67      	bge.n	8013fec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f1c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013f1e:	fb06 0202 	mla	r2, r6, r2, r0
 8013f22:	1412      	asrs	r2, r2, #16
 8013f24:	d462      	bmi.n	8013fec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f26:	42ba      	cmp	r2, r7
 8013f28:	da60      	bge.n	8013fec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f2a:	1cee      	adds	r6, r5, #3
 8013f2c:	4699      	mov	r9, r3
 8013f2e:	f1b9 0f00 	cmp.w	r9, #0
 8013f32:	dd5f      	ble.n	8013ff4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8013f34:	1422      	asrs	r2, r4, #16
 8013f36:	9902      	ldr	r1, [sp, #8]
 8013f38:	1407      	asrs	r7, r0, #16
 8013f3a:	fb01 2707 	mla	r7, r1, r7, r2
 8013f3e:	9903      	ldr	r1, [sp, #12]
 8013f40:	087a      	lsrs	r2, r7, #1
 8013f42:	5c8a      	ldrb	r2, [r1, r2]
 8013f44:	07f9      	lsls	r1, r7, #31
 8013f46:	bf54      	ite	pl
 8013f48:	f002 020f 	andpl.w	r2, r2, #15
 8013f4c:	1112      	asrmi	r2, r2, #4
 8013f4e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013f52:	b2d2      	uxtb	r2, r2
 8013f54:	2a00      	cmp	r2, #0
 8013f56:	d042      	beq.n	8013fde <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8013f58:	497b      	ldr	r1, [pc, #492]	; (8014148 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8013f5a:	680f      	ldr	r7, [r1, #0]
 8013f5c:	9905      	ldr	r1, [sp, #20]
 8013f5e:	fa5f fb87 	uxtb.w	fp, r7
 8013f62:	434a      	muls	r2, r1
 8013f64:	f102 0801 	add.w	r8, r2, #1
 8013f68:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8013f6c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8013f70:	1212      	asrs	r2, r2, #8
 8013f72:	fa1f fa82 	uxth.w	sl, r2
 8013f76:	43d2      	mvns	r2, r2
 8013f78:	fb1b fb0a 	smulbb	fp, fp, sl
 8013f7c:	b2d2      	uxtb	r2, r2
 8013f7e:	fb08 b802 	mla	r8, r8, r2, fp
 8013f82:	fa1f f888 	uxth.w	r8, r8
 8013f86:	f108 0b01 	add.w	fp, r8, #1
 8013f8a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013f8e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013f92:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013f96:	fb1b fb0a 	smulbb	fp, fp, sl
 8013f9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013f9e:	fb17 fa0a 	smulbb	sl, r7, sl
 8013fa2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8013fa6:	f806 8c03 	strb.w	r8, [r6, #-3]
 8013faa:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8013fae:	fb07 aa02 	mla	sl, r7, r2, sl
 8013fb2:	fb08 b802 	mla	r8, r8, r2, fp
 8013fb6:	fa1f fa8a 	uxth.w	sl, sl
 8013fba:	fa1f f888 	uxth.w	r8, r8
 8013fbe:	f10a 0701 	add.w	r7, sl, #1
 8013fc2:	f108 0b01 	add.w	fp, r8, #1
 8013fc6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013fca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013fce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013fd2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013fd6:	f806 ac01 	strb.w	sl, [r6, #-1]
 8013fda:	f806 8c02 	strb.w	r8, [r6, #-2]
 8013fde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013fe0:	4474      	add	r4, lr
 8013fe2:	3603      	adds	r6, #3
 8013fe4:	f109 39ff 	add.w	r9, r9, #4294967295
 8013fe8:	4410      	add	r0, r2
 8013fea:	e7a0      	b.n	8013f2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8013fec:	2700      	movs	r7, #0
 8013fee:	1bda      	subs	r2, r3, r7
 8013ff0:	2a00      	cmp	r2, #0
 8013ff2:	dc3e      	bgt.n	8014072 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8013ff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ffc:	441d      	add	r5, r3
 8013ffe:	9b01      	ldr	r3, [sp, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	f340 809e 	ble.w	8014142 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014006:	ee30 0a04 	vadd.f32	s0, s0, s8
 801400a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801400c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014010:	eeb0 6a62 	vmov.f32	s12, s5
 8014014:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014018:	ee31 1a05 	vadd.f32	s2, s2, s10
 801401c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014020:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014024:	eeb0 6a43 	vmov.f32	s12, s6
 8014028:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801402c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014030:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014034:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014038:	ee77 2a62 	vsub.f32	s5, s14, s5
 801403c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014040:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014044:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014048:	ee12 2a90 	vmov	r2, s5
 801404c:	eef0 2a47 	vmov.f32	s5, s14
 8014050:	fb92 fef3 	sdiv	lr, r2, r3
 8014054:	ee13 2a10 	vmov	r2, s6
 8014058:	eeb0 3a67 	vmov.f32	s6, s15
 801405c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014060:	9314      	str	r3, [sp, #80]	; 0x50
 8014062:	9b01      	ldr	r3, [sp, #4]
 8014064:	9a04      	ldr	r2, [sp, #16]
 8014066:	3b01      	subs	r3, #1
 8014068:	9301      	str	r3, [sp, #4]
 801406a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801406c:	bf08      	it	eq
 801406e:	4613      	moveq	r3, r2
 8014070:	e72b      	b.n	8013eca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014072:	1426      	asrs	r6, r4, #16
 8014074:	d460      	bmi.n	8014138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014076:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801407a:	42b2      	cmp	r2, r6
 801407c:	dd5c      	ble.n	8014138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801407e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014082:	d459      	bmi.n	8014138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014084:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014088:	4542      	cmp	r2, r8
 801408a:	dd55      	ble.n	8014138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801408c:	9a02      	ldr	r2, [sp, #8]
 801408e:	9903      	ldr	r1, [sp, #12]
 8014090:	fb08 6602 	mla	r6, r8, r2, r6
 8014094:	0872      	lsrs	r2, r6, #1
 8014096:	07f6      	lsls	r6, r6, #31
 8014098:	5c8a      	ldrb	r2, [r1, r2]
 801409a:	bf54      	ite	pl
 801409c:	f002 020f 	andpl.w	r2, r2, #15
 80140a0:	1112      	asrmi	r2, r2, #4
 80140a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80140a6:	b2d2      	uxtb	r2, r2
 80140a8:	2a00      	cmp	r2, #0
 80140aa:	d045      	beq.n	8014138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80140ac:	4926      	ldr	r1, [pc, #152]	; (8014148 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80140ae:	f8d1 8000 	ldr.w	r8, [r1]
 80140b2:	9905      	ldr	r1, [sp, #20]
 80140b4:	fa5f fb88 	uxtb.w	fp, r8
 80140b8:	434a      	muls	r2, r1
 80140ba:	1c56      	adds	r6, r2, #1
 80140bc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80140c0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80140c4:	1212      	asrs	r2, r2, #8
 80140c6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80140ca:	fa1f fa82 	uxth.w	sl, r2
 80140ce:	43d2      	mvns	r2, r2
 80140d0:	fb1b fb0a 	smulbb	fp, fp, sl
 80140d4:	b2d2      	uxtb	r2, r2
 80140d6:	fb09 b902 	mla	r9, r9, r2, fp
 80140da:	fa1f f989 	uxth.w	r9, r9
 80140de:	f109 0b01 	add.w	fp, r9, #1
 80140e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80140e6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80140ea:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80140ee:	fb1b fb0a 	smulbb	fp, fp, sl
 80140f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80140f6:	fb18 fa0a 	smulbb	sl, r8, sl
 80140fa:	f805 9006 	strb.w	r9, [r5, r6]
 80140fe:	442e      	add	r6, r5
 8014100:	f896 8002 	ldrb.w	r8, [r6, #2]
 8014104:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014108:	fb08 aa02 	mla	sl, r8, r2, sl
 801410c:	fb09 b902 	mla	r9, r9, r2, fp
 8014110:	fa1f fa8a 	uxth.w	sl, sl
 8014114:	fa1f f989 	uxth.w	r9, r9
 8014118:	f10a 0801 	add.w	r8, sl, #1
 801411c:	f109 0b01 	add.w	fp, r9, #1
 8014120:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8014124:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014128:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801412c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014130:	f886 a002 	strb.w	sl, [r6, #2]
 8014134:	f886 9001 	strb.w	r9, [r6, #1]
 8014138:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801413a:	4474      	add	r4, lr
 801413c:	3701      	adds	r7, #1
 801413e:	4410      	add	r0, r2
 8014140:	e755      	b.n	8013fee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8014142:	b007      	add	sp, #28
 8014144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014148:	24006bc4 	.word	0x24006bc4

0801414c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014150:	b085      	sub	sp, #20
 8014152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014156:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014158:	9203      	str	r2, [sp, #12]
 801415a:	6860      	ldr	r0, [r4, #4]
 801415c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014160:	9100      	str	r1, [sp, #0]
 8014162:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8014166:	fb00 2606 	mla	r6, r0, r6, r2
 801416a:	6822      	ldr	r2, [r4, #0]
 801416c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014170:	4416      	add	r6, r2
 8014172:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014176:	3201      	adds	r2, #1
 8014178:	f022 0201 	bic.w	r2, r2, #1
 801417c:	9201      	str	r2, [sp, #4]
 801417e:	f8dc 2000 	ldr.w	r2, [ip]
 8014182:	9202      	str	r2, [sp, #8]
 8014184:	9a00      	ldr	r2, [sp, #0]
 8014186:	2a00      	cmp	r2, #0
 8014188:	dc03      	bgt.n	8014192 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801418a:	9a03      	ldr	r2, [sp, #12]
 801418c:	2a00      	cmp	r2, #0
 801418e:	f340 8140 	ble.w	8014412 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8014192:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014194:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014198:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801419c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801419e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80141a2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	dd0e      	ble.n	80141c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80141aa:	142a      	asrs	r2, r5, #16
 80141ac:	d405      	bmi.n	80141ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141ae:	4572      	cmp	r2, lr
 80141b0:	da03      	bge.n	80141ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141b2:	1422      	asrs	r2, r4, #16
 80141b4:	d401      	bmi.n	80141ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141b6:	42ba      	cmp	r2, r7
 80141b8:	db07      	blt.n	80141ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80141ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80141bc:	3b01      	subs	r3, #1
 80141be:	3603      	adds	r6, #3
 80141c0:	4415      	add	r5, r2
 80141c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141c4:	4414      	add	r4, r2
 80141c6:	e7ee      	b.n	80141a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80141c8:	d072      	beq.n	80142b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80141ca:	1e5a      	subs	r2, r3, #1
 80141cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80141ce:	fb00 5002 	mla	r0, r0, r2, r5
 80141d2:	1400      	asrs	r0, r0, #16
 80141d4:	d463      	bmi.n	801429e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141d6:	4570      	cmp	r0, lr
 80141d8:	da61      	bge.n	801429e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80141dc:	fb00 4202 	mla	r2, r0, r2, r4
 80141e0:	1412      	asrs	r2, r2, #16
 80141e2:	d45c      	bmi.n	801429e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141e4:	42ba      	cmp	r2, r7
 80141e6:	da5a      	bge.n	801429e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141e8:	1cf0      	adds	r0, r6, #3
 80141ea:	469a      	mov	sl, r3
 80141ec:	f1ba 0f00 	cmp.w	sl, #0
 80141f0:	dd59      	ble.n	80142a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80141f2:	142a      	asrs	r2, r5, #16
 80141f4:	9901      	ldr	r1, [sp, #4]
 80141f6:	1427      	asrs	r7, r4, #16
 80141f8:	fb01 2707 	mla	r7, r1, r7, r2
 80141fc:	9902      	ldr	r1, [sp, #8]
 80141fe:	087a      	lsrs	r2, r7, #1
 8014200:	5c8a      	ldrb	r2, [r1, r2]
 8014202:	07f9      	lsls	r1, r7, #31
 8014204:	bf54      	ite	pl
 8014206:	f002 020f 	andpl.w	r2, r2, #15
 801420a:	1112      	asrmi	r2, r2, #4
 801420c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014210:	b2d2      	uxtb	r2, r2
 8014212:	2a00      	cmp	r2, #0
 8014214:	d03b      	beq.n	801428e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014216:	4980      	ldr	r1, [pc, #512]	; (8014418 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014218:	2aff      	cmp	r2, #255	; 0xff
 801421a:	680f      	ldr	r7, [r1, #0]
 801421c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014220:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014224:	b2ff      	uxtb	r7, r7
 8014226:	f000 80ed 	beq.w	8014404 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801422a:	fa1f f882 	uxth.w	r8, r2
 801422e:	43d2      	mvns	r2, r2
 8014230:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8014234:	fb17 f708 	smulbb	r7, r7, r8
 8014238:	b2d2      	uxtb	r2, r2
 801423a:	fb19 f908 	smulbb	r9, r9, r8
 801423e:	fb0e 7702 	mla	r7, lr, r2, r7
 8014242:	fb1b f808 	smulbb	r8, fp, r8
 8014246:	b2bf      	uxth	r7, r7
 8014248:	f107 0e01 	add.w	lr, r7, #1
 801424c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014250:	123f      	asrs	r7, r7, #8
 8014252:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014256:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801425a:	fb07 9902 	mla	r9, r7, r2, r9
 801425e:	fa1f f989 	uxth.w	r9, r9
 8014262:	f109 0701 	add.w	r7, r9, #1
 8014266:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801426a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801426e:	fb07 8802 	mla	r8, r7, r2, r8
 8014272:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014276:	fa1f f888 	uxth.w	r8, r8
 801427a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801427e:	f108 0201 	add.w	r2, r8, #1
 8014282:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014286:	ea4f 2828 	mov.w	r8, r8, asr #8
 801428a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801428e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014290:	3003      	adds	r0, #3
 8014292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014296:	4415      	add	r5, r2
 8014298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801429a:	4414      	add	r4, r2
 801429c:	e7a6      	b.n	80141ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801429e:	2700      	movs	r7, #0
 80142a0:	1bda      	subs	r2, r3, r7
 80142a2:	2a00      	cmp	r2, #0
 80142a4:	dc40      	bgt.n	8014328 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80142a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80142aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80142ae:	441e      	add	r6, r3
 80142b0:	9b00      	ldr	r3, [sp, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	f340 80ad 	ble.w	8014412 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80142b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80142bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80142c2:	eeb0 6a62 	vmov.f32	s12, s5
 80142c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80142ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80142ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80142d6:	eeb0 6a43 	vmov.f32	s12, s6
 80142da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142de:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80142e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80142e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80142ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80142ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80142f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80142f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80142fa:	ee12 2a90 	vmov	r2, s5
 80142fe:	eef0 2a47 	vmov.f32	s5, s14
 8014302:	fb92 f3f3 	sdiv	r3, r2, r3
 8014306:	ee13 2a10 	vmov	r2, s6
 801430a:	9311      	str	r3, [sp, #68]	; 0x44
 801430c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801430e:	eeb0 3a67 	vmov.f32	s6, s15
 8014312:	fb92 f3f3 	sdiv	r3, r2, r3
 8014316:	9312      	str	r3, [sp, #72]	; 0x48
 8014318:	9b00      	ldr	r3, [sp, #0]
 801431a:	9a03      	ldr	r2, [sp, #12]
 801431c:	3b01      	subs	r3, #1
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014322:	bf08      	it	eq
 8014324:	4613      	moveq	r3, r2
 8014326:	e72d      	b.n	8014184 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8014328:	1428      	asrs	r0, r5, #16
 801432a:	d45c      	bmi.n	80143e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801432c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014330:	4282      	cmp	r2, r0
 8014332:	dd58      	ble.n	80143e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014334:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8014338:	d455      	bmi.n	80143e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801433a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801433e:	4572      	cmp	r2, lr
 8014340:	dd51      	ble.n	80143e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014342:	9a01      	ldr	r2, [sp, #4]
 8014344:	9902      	ldr	r1, [sp, #8]
 8014346:	fb0e 0002 	mla	r0, lr, r2, r0
 801434a:	0842      	lsrs	r2, r0, #1
 801434c:	07c0      	lsls	r0, r0, #31
 801434e:	5c8a      	ldrb	r2, [r1, r2]
 8014350:	bf54      	ite	pl
 8014352:	f002 020f 	andpl.w	r2, r2, #15
 8014356:	1112      	asrmi	r2, r2, #4
 8014358:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801435c:	b2d2      	uxtb	r2, r2
 801435e:	2a00      	cmp	r2, #0
 8014360:	d041      	beq.n	80143e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014362:	492d      	ldr	r1, [pc, #180]	; (8014418 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014364:	2aff      	cmp	r2, #255	; 0xff
 8014366:	6808      	ldr	r0, [r1, #0]
 8014368:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801436c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014370:	fa5f fe80 	uxtb.w	lr, r0
 8014374:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8014378:	d03b      	beq.n	80143f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801437a:	fa1f f982 	uxth.w	r9, r2
 801437e:	4438      	add	r0, r7
 8014380:	43d2      	mvns	r2, r2
 8014382:	f816 8000 	ldrb.w	r8, [r6, r0]
 8014386:	fb1e fe09 	smulbb	lr, lr, r9
 801438a:	fb1a fa09 	smulbb	sl, sl, r9
 801438e:	b2d2      	uxtb	r2, r2
 8014390:	fb1b f909 	smulbb	r9, fp, r9
 8014394:	fb08 ee02 	mla	lr, r8, r2, lr
 8014398:	fa1f fe8e 	uxth.w	lr, lr
 801439c:	f10e 0801 	add.w	r8, lr, #1
 80143a0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80143a4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80143a8:	f806 e000 	strb.w	lr, [r6, r0]
 80143ac:	4430      	add	r0, r6
 80143ae:	f890 e001 	ldrb.w	lr, [r0, #1]
 80143b2:	fb0e aa02 	mla	sl, lr, r2, sl
 80143b6:	fa1f fa8a 	uxth.w	sl, sl
 80143ba:	f10a 0e01 	add.w	lr, sl, #1
 80143be:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80143c2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80143c6:	fb0e 9902 	mla	r9, lr, r2, r9
 80143ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80143ce:	fa1f f989 	uxth.w	r9, r9
 80143d2:	f880 a001 	strb.w	sl, [r0, #1]
 80143d6:	f109 0201 	add.w	r2, r9, #1
 80143da:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80143de:	ea4f 2929 	mov.w	r9, r9, asr #8
 80143e2:	f880 9002 	strb.w	r9, [r0, #2]
 80143e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80143e8:	3701      	adds	r7, #1
 80143ea:	4415      	add	r5, r2
 80143ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143ee:	4414      	add	r4, r2
 80143f0:	e756      	b.n	80142a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80143f2:	4438      	add	r0, r7
 80143f4:	f806 e000 	strb.w	lr, [r6, r0]
 80143f8:	4430      	add	r0, r6
 80143fa:	f880 a001 	strb.w	sl, [r0, #1]
 80143fe:	f880 b002 	strb.w	fp, [r0, #2]
 8014402:	e7f0      	b.n	80143e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014404:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014408:	f800 9c02 	strb.w	r9, [r0, #-2]
 801440c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8014410:	e73d      	b.n	801428e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014412:	b005      	add	sp, #20
 8014414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014418:	24006bc4 	.word	0x24006bc4

0801441c <_ZN8touchgfx8LCD24bppD1Ev>:
 801441c:	4770      	bx	lr

0801441e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801441e:	4770      	bx	lr

08014420 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8014420:	4770      	bx	lr

08014422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8014422:	4770      	bx	lr

08014424 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8014424:	4770      	bx	lr

08014426 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014426:	4770      	bx	lr

08014428 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014428:	4770      	bx	lr

0801442a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801442a:	4770      	bx	lr

0801442c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801442c:	4770      	bx	lr

0801442e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801442e:	4770      	bx	lr

08014430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014430:	4770      	bx	lr

08014432 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014432:	4770      	bx	lr

08014434 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014434:	4770      	bx	lr

08014436 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014436:	4770      	bx	lr

08014438 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014438:	4770      	bx	lr

0801443a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801443a:	4770      	bx	lr

0801443c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801443c:	4770      	bx	lr

0801443e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801443e:	4770      	bx	lr

08014440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014440:	4770      	bx	lr

08014442 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014442:	4770      	bx	lr

08014444 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014444:	4770      	bx	lr
	...

08014448 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014448:	2bff      	cmp	r3, #255	; 0xff
 801444a:	b508      	push	{r3, lr}
 801444c:	d04f      	beq.n	80144ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801444e:	2a2c      	cmp	r2, #44	; 0x2c
 8014450:	d032      	beq.n	80144b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8014452:	d80f      	bhi.n	8014474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8014454:	2a08      	cmp	r2, #8
 8014456:	d046      	beq.n	80144e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8014458:	d805      	bhi.n	8014466 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801445a:	2a04      	cmp	r2, #4
 801445c:	d041      	beq.n	80144e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801445e:	2a05      	cmp	r2, #5
 8014460:	d03d      	beq.n	80144de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8014462:	2000      	movs	r0, #0
 8014464:	e027      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014466:	2a0a      	cmp	r2, #10
 8014468:	d03d      	beq.n	80144e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801446a:	d301      	bcc.n	8014470 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801446c:	2a0b      	cmp	r2, #11
 801446e:	d1f8      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014470:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014472:	e020      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014474:	2a30      	cmp	r2, #48	; 0x30
 8014476:	d038      	beq.n	80144ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014478:	d808      	bhi.n	801448c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801447a:	2a2e      	cmp	r2, #46	; 0x2e
 801447c:	684b      	ldr	r3, [r1, #4]
 801447e:	d029      	beq.n	80144d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8014480:	d90b      	bls.n	801449a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d1ec      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014488:	6a00      	ldr	r0, [r0, #32]
 801448a:	e014      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801448c:	2a32      	cmp	r2, #50	; 0x32
 801448e:	d02c      	beq.n	80144ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014490:	d301      	bcc.n	8014496 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8014492:	2a33      	cmp	r2, #51	; 0x33
 8014494:	d1e5      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014496:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8014498:	e00d      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	2b01      	cmp	r3, #1
 801449e:	d009      	beq.n	80144b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80144a0:	d3f2      	bcc.n	8014488 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 80144a2:	2b02      	cmp	r3, #2
 80144a4:	d1dd      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144a6:	4b39      	ldr	r3, [pc, #228]	; (801458c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80144a8:	f240 4109 	movw	r1, #1033	; 0x409
 80144ac:	4a38      	ldr	r2, [pc, #224]	; (8014590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80144ae:	4839      	ldr	r0, [pc, #228]	; (8014594 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 80144b0:	f006 fde4 	bl	801b07c <__assert_func>
 80144b4:	6900      	ldr	r0, [r0, #16]
 80144b6:	bd08      	pop	{r3, pc}
 80144b8:	684b      	ldr	r3, [r1, #4]
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d007      	beq.n	80144d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80144c0:	d30b      	bcc.n	80144da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80144c2:	2b02      	cmp	r3, #2
 80144c4:	d1cd      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144c6:	4b31      	ldr	r3, [pc, #196]	; (801458c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80144c8:	f240 4115 	movw	r1, #1045	; 0x415
 80144cc:	4a30      	ldr	r2, [pc, #192]	; (8014590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80144ce:	e7ee      	b.n	80144ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80144d0:	6880      	ldr	r0, [r0, #8]
 80144d2:	e7f0      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1c3      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80144da:	6980      	ldr	r0, [r0, #24]
 80144dc:	e7eb      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144de:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80144e0:	e7e9      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80144e4:	e7e7      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80144e8:	e7e5      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80144ec:	e7e3      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80144ee:	2a2c      	cmp	r2, #44	; 0x2c
 80144f0:	d030      	beq.n	8014554 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80144f2:	d80f      	bhi.n	8014514 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80144f4:	2a08      	cmp	r2, #8
 80144f6:	d044      	beq.n	8014582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80144f8:	d805      	bhi.n	8014506 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80144fa:	2a04      	cmp	r2, #4
 80144fc:	d03f      	beq.n	801457e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80144fe:	2a05      	cmp	r2, #5
 8014500:	d1af      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014502:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014504:	e7d7      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014506:	2a0a      	cmp	r2, #10
 8014508:	d03b      	beq.n	8014582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801450a:	d301      	bcc.n	8014510 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801450c:	2a0b      	cmp	r2, #11
 801450e:	d1a8      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014510:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014512:	e7d0      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014514:	2a30      	cmp	r2, #48	; 0x30
 8014516:	d036      	beq.n	8014586 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014518:	d808      	bhi.n	801452c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801451a:	2a2e      	cmp	r2, #46	; 0x2e
 801451c:	684b      	ldr	r3, [r1, #4]
 801451e:	d028      	beq.n	8014572 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8014520:	d90b      	bls.n	801453a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d19c      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014528:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801452a:	e7c4      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801452c:	2a32      	cmp	r2, #50	; 0x32
 801452e:	d02a      	beq.n	8014586 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014530:	d301      	bcc.n	8014536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8014532:	2a33      	cmp	r2, #51	; 0x33
 8014534:	d195      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014536:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014538:	e7bd      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	2b01      	cmp	r3, #1
 801453e:	d007      	beq.n	8014550 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8014540:	d3f2      	bcc.n	8014528 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8014542:	2b02      	cmp	r3, #2
 8014544:	d18d      	bne.n	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014546:	4b11      	ldr	r3, [pc, #68]	; (801458c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014548:	f240 4146 	movw	r1, #1094	; 0x446
 801454c:	4a10      	ldr	r2, [pc, #64]	; (8014590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801454e:	e7ae      	b.n	80144ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8014550:	6940      	ldr	r0, [r0, #20]
 8014552:	e7b0      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014554:	684b      	ldr	r3, [r1, #4]
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	2b01      	cmp	r3, #1
 801455a:	d008      	beq.n	801456e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801455c:	d30d      	bcc.n	801457a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801455e:	2b02      	cmp	r3, #2
 8014560:	f47f af7f 	bne.w	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014564:	4b09      	ldr	r3, [pc, #36]	; (801458c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8014566:	f240 4152 	movw	r1, #1106	; 0x452
 801456a:	4a09      	ldr	r2, [pc, #36]	; (8014590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801456c:	e79f      	b.n	80144ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801456e:	68c0      	ldr	r0, [r0, #12]
 8014570:	e7a1      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	f47f af74 	bne.w	8014462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801457a:	69c0      	ldr	r0, [r0, #28]
 801457c:	e79b      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801457e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014580:	e799      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014582:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8014584:	e797      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014586:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014588:	e795      	b.n	80144b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801458a:	bf00      	nop
 801458c:	0801ef05 	.word	0x0801ef05
 8014590:	0801f677 	.word	0x0801f677
 8014594:	0801ef51 	.word	0x0801ef51

08014598 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8014598:	b508      	push	{r3, lr}
 801459a:	4b06      	ldr	r3, [pc, #24]	; (80145b4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801459c:	8818      	ldrh	r0, [r3, #0]
 801459e:	b928      	cbnz	r0, 80145ac <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 80145a0:	4b05      	ldr	r3, [pc, #20]	; (80145b8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 80145a2:	214d      	movs	r1, #77	; 0x4d
 80145a4:	4a05      	ldr	r2, [pc, #20]	; (80145bc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 80145a6:	4806      	ldr	r0, [pc, #24]	; (80145c0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 80145a8:	f006 fd68 	bl	801b07c <__assert_func>
 80145ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80145b0:	b280      	uxth	r0, r0
 80145b2:	bd08      	pop	{r3, pc}
 80145b4:	24006bb6 	.word	0x24006bb6
 80145b8:	0801f15d 	.word	0x0801f15d
 80145bc:	0801f63c 	.word	0x0801f63c
 80145c0:	0801f19f 	.word	0x0801f19f

080145c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80145c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145c8:	b08b      	sub	sp, #44	; 0x2c
 80145ca:	460d      	mov	r5, r1
 80145cc:	4616      	mov	r6, r2
 80145ce:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80145d2:	f1b8 0f00 	cmp.w	r8, #0
 80145d6:	d047      	beq.n	8014668 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80145d8:	6810      	ldr	r0, [r2, #0]
 80145da:	ac06      	add	r4, sp, #24
 80145dc:	6851      	ldr	r1, [r2, #4]
 80145de:	4f51      	ldr	r7, [pc, #324]	; (8014724 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80145e0:	c403      	stmia	r4!, {r0, r1}
 80145e2:	6818      	ldr	r0, [r3, #0]
 80145e4:	ac08      	add	r4, sp, #32
 80145e6:	6859      	ldr	r1, [r3, #4]
 80145e8:	c403      	stmia	r4!, {r0, r1}
 80145ea:	a806      	add	r0, sp, #24
 80145ec:	f7fa fd9e 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80145f0:	4631      	mov	r1, r6
 80145f2:	a808      	add	r0, sp, #32
 80145f4:	f7fa fdde 	bl	800f1b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80145f8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80145fc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014600:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014604:	6838      	ldr	r0, [r7, #0]
 8014606:	fb11 2103 	smlabb	r1, r1, r3, r2
 801460a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801460e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8014612:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014616:	440d      	add	r5, r1
 8014618:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801461c:	440a      	add	r2, r1
 801461e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014622:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014626:	4413      	add	r3, r2
 8014628:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801462c:	6803      	ldr	r3, [r0, #0]
 801462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014630:	4798      	blx	r3
 8014632:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8014636:	d01a      	beq.n	801466e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8014638:	f010 0f04 	tst.w	r0, #4
 801463c:	6838      	ldr	r0, [r7, #0]
 801463e:	d019      	beq.n	8014674 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8014640:	2100      	movs	r1, #0
 8014642:	6807      	ldr	r7, [r0, #0]
 8014644:	b2a4      	uxth	r4, r4
 8014646:	f8cd 800c 	str.w	r8, [sp, #12]
 801464a:	b2b6      	uxth	r6, r6
 801464c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014650:	9401      	str	r4, [sp, #4]
 8014652:	9600      	str	r6, [sp, #0]
 8014654:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014658:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801465c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014660:	9102      	str	r1, [sp, #8]
 8014662:	4629      	mov	r1, r5
 8014664:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8014666:	47a0      	blx	r4
 8014668:	b00b      	add	sp, #44	; 0x2c
 801466a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801466e:	f010 0f01 	tst.w	r0, #1
 8014672:	e7e3      	b.n	801463c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8014674:	6803      	ldr	r3, [r0, #0]
 8014676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014678:	4798      	blx	r3
 801467a:	4a2b      	ldr	r2, [pc, #172]	; (8014728 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801467c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8014680:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8014684:	8813      	ldrh	r3, [r2, #0]
 8014686:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801468a:	fb03 f404 	mul.w	r4, r3, r4
 801468e:	fb03 c101 	mla	r1, r3, r1, ip
 8014692:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014696:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801469a:	4408      	add	r0, r1
 801469c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80146a0:	4404      	add	r4, r0
 80146a2:	d02e      	beq.n	8014702 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80146a4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80146a8:	1b9b      	subs	r3, r3, r6
 80146aa:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80146ae:	1b96      	subs	r6, r2, r6
 80146b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80146b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80146b8:	42a0      	cmp	r0, r4
 80146ba:	d22d      	bcs.n	8014718 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80146bc:	eb00 0e01 	add.w	lr, r0, r1
 80146c0:	4570      	cmp	r0, lr
 80146c2:	d210      	bcs.n	80146e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80146c4:	f890 9000 	ldrb.w	r9, [r0]
 80146c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80146cc:	fb19 f90c 	smulbb	r9, r9, ip
 80146d0:	fb02 9208 	mla	r2, r2, r8, r9
 80146d4:	b292      	uxth	r2, r2
 80146d6:	f102 0901 	add.w	r9, r2, #1
 80146da:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80146de:	1212      	asrs	r2, r2, #8
 80146e0:	f800 2b01 	strb.w	r2, [r0], #1
 80146e4:	e7ec      	b.n	80146c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80146e6:	4418      	add	r0, r3
 80146e8:	4435      	add	r5, r6
 80146ea:	e7e5      	b.n	80146b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80146ec:	8813      	ldrh	r3, [r2, #0]
 80146ee:	1b9b      	subs	r3, r3, r6
 80146f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80146f4:	4418      	add	r0, r3
 80146f6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80146fa:	1b9b      	subs	r3, r3, r6
 80146fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014700:	441d      	add	r5, r3
 8014702:	42a0      	cmp	r0, r4
 8014704:	d208      	bcs.n	8014718 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8014706:	eb00 0c01 	add.w	ip, r0, r1
 801470a:	4560      	cmp	r0, ip
 801470c:	d2ee      	bcs.n	80146ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801470e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014712:	f800 3b01 	strb.w	r3, [r0], #1
 8014716:	e7f8      	b.n	801470a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8014718:	6838      	ldr	r0, [r7, #0]
 801471a:	6803      	ldr	r3, [r0, #0]
 801471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471e:	4798      	blx	r3
 8014720:	e7a2      	b.n	8014668 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8014722:	bf00      	nop
 8014724:	24006bbc 	.word	0x24006bbc
 8014728:	24006bb6 	.word	0x24006bb6

0801472c <_ZN8touchgfx8LCD24bppD0Ev>:
 801472c:	b510      	push	{r4, lr}
 801472e:	4604      	mov	r4, r0
 8014730:	2158      	movs	r1, #88	; 0x58
 8014732:	f006 fb8d 	bl	801ae50 <_ZdlPvj>
 8014736:	4620      	mov	r0, r4
 8014738:	bd10      	pop	{r4, pc}

0801473a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801473a:	b510      	push	{r4, lr}
 801473c:	4604      	mov	r4, r0
 801473e:	2104      	movs	r1, #4
 8014740:	f006 fb86 	bl	801ae50 <_ZdlPvj>
 8014744:	4620      	mov	r0, r4
 8014746:	bd10      	pop	{r4, pc}

08014748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014748:	b510      	push	{r4, lr}
 801474a:	4604      	mov	r4, r0
 801474c:	2104      	movs	r1, #4
 801474e:	f006 fb7f 	bl	801ae50 <_ZdlPvj>
 8014752:	4620      	mov	r0, r4
 8014754:	bd10      	pop	{r4, pc}

08014756 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014756:	b510      	push	{r4, lr}
 8014758:	4604      	mov	r4, r0
 801475a:	2104      	movs	r1, #4
 801475c:	f006 fb78 	bl	801ae50 <_ZdlPvj>
 8014760:	4620      	mov	r0, r4
 8014762:	bd10      	pop	{r4, pc}

08014764 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8014764:	b510      	push	{r4, lr}
 8014766:	4604      	mov	r4, r0
 8014768:	2104      	movs	r1, #4
 801476a:	f006 fb71 	bl	801ae50 <_ZdlPvj>
 801476e:	4620      	mov	r0, r4
 8014770:	bd10      	pop	{r4, pc}

08014772 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014772:	b510      	push	{r4, lr}
 8014774:	4604      	mov	r4, r0
 8014776:	2104      	movs	r1, #4
 8014778:	f006 fb6a 	bl	801ae50 <_ZdlPvj>
 801477c:	4620      	mov	r0, r4
 801477e:	bd10      	pop	{r4, pc}

08014780 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014780:	b510      	push	{r4, lr}
 8014782:	4604      	mov	r4, r0
 8014784:	2104      	movs	r1, #4
 8014786:	f006 fb63 	bl	801ae50 <_ZdlPvj>
 801478a:	4620      	mov	r0, r4
 801478c:	bd10      	pop	{r4, pc}

0801478e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801478e:	b510      	push	{r4, lr}
 8014790:	4604      	mov	r4, r0
 8014792:	2104      	movs	r1, #4
 8014794:	f006 fb5c 	bl	801ae50 <_ZdlPvj>
 8014798:	4620      	mov	r0, r4
 801479a:	bd10      	pop	{r4, pc}

0801479c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801479c:	b510      	push	{r4, lr}
 801479e:	4604      	mov	r4, r0
 80147a0:	2104      	movs	r1, #4
 80147a2:	f006 fb55 	bl	801ae50 <_ZdlPvj>
 80147a6:	4620      	mov	r0, r4
 80147a8:	bd10      	pop	{r4, pc}

080147aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80147aa:	b510      	push	{r4, lr}
 80147ac:	4604      	mov	r4, r0
 80147ae:	2104      	movs	r1, #4
 80147b0:	f006 fb4e 	bl	801ae50 <_ZdlPvj>
 80147b4:	4620      	mov	r0, r4
 80147b6:	bd10      	pop	{r4, pc}

080147b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80147b8:	b510      	push	{r4, lr}
 80147ba:	4604      	mov	r4, r0
 80147bc:	2104      	movs	r1, #4
 80147be:	f006 fb47 	bl	801ae50 <_ZdlPvj>
 80147c2:	4620      	mov	r0, r4
 80147c4:	bd10      	pop	{r4, pc}

080147c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80147c6:	b510      	push	{r4, lr}
 80147c8:	4604      	mov	r4, r0
 80147ca:	2104      	movs	r1, #4
 80147cc:	f006 fb40 	bl	801ae50 <_ZdlPvj>
 80147d0:	4620      	mov	r0, r4
 80147d2:	bd10      	pop	{r4, pc}

080147d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80147d4:	b510      	push	{r4, lr}
 80147d6:	4604      	mov	r4, r0
 80147d8:	2104      	movs	r1, #4
 80147da:	f006 fb39 	bl	801ae50 <_ZdlPvj>
 80147de:	4620      	mov	r0, r4
 80147e0:	bd10      	pop	{r4, pc}

080147e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80147e2:	b510      	push	{r4, lr}
 80147e4:	4604      	mov	r4, r0
 80147e6:	2104      	movs	r1, #4
 80147e8:	f006 fb32 	bl	801ae50 <_ZdlPvj>
 80147ec:	4620      	mov	r0, r4
 80147ee:	bd10      	pop	{r4, pc}

080147f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80147f0:	b510      	push	{r4, lr}
 80147f2:	4604      	mov	r4, r0
 80147f4:	2104      	movs	r1, #4
 80147f6:	f006 fb2b 	bl	801ae50 <_ZdlPvj>
 80147fa:	4620      	mov	r0, r4
 80147fc:	bd10      	pop	{r4, pc}

080147fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80147fe:	b510      	push	{r4, lr}
 8014800:	4604      	mov	r4, r0
 8014802:	2104      	movs	r1, #4
 8014804:	f006 fb24 	bl	801ae50 <_ZdlPvj>
 8014808:	4620      	mov	r0, r4
 801480a:	bd10      	pop	{r4, pc}

0801480c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801480c:	b510      	push	{r4, lr}
 801480e:	4604      	mov	r4, r0
 8014810:	2104      	movs	r1, #4
 8014812:	f006 fb1d 	bl	801ae50 <_ZdlPvj>
 8014816:	4620      	mov	r0, r4
 8014818:	bd10      	pop	{r4, pc}

0801481a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801481a:	b510      	push	{r4, lr}
 801481c:	4604      	mov	r4, r0
 801481e:	2104      	movs	r1, #4
 8014820:	f006 fb16 	bl	801ae50 <_ZdlPvj>
 8014824:	4620      	mov	r0, r4
 8014826:	bd10      	pop	{r4, pc}

08014828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8014828:	b510      	push	{r4, lr}
 801482a:	4604      	mov	r4, r0
 801482c:	2104      	movs	r1, #4
 801482e:	f006 fb0f 	bl	801ae50 <_ZdlPvj>
 8014832:	4620      	mov	r0, r4
 8014834:	bd10      	pop	{r4, pc}

08014836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8014836:	b510      	push	{r4, lr}
 8014838:	4604      	mov	r4, r0
 801483a:	2104      	movs	r1, #4
 801483c:	f006 fb08 	bl	801ae50 <_ZdlPvj>
 8014840:	4620      	mov	r0, r4
 8014842:	bd10      	pop	{r4, pc}

08014844 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8014844:	b510      	push	{r4, lr}
 8014846:	4604      	mov	r4, r0
 8014848:	2104      	movs	r1, #4
 801484a:	f006 fb01 	bl	801ae50 <_ZdlPvj>
 801484e:	4620      	mov	r0, r4
 8014850:	bd10      	pop	{r4, pc}
	...

08014854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8014854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014858:	4db4      	ldr	r5, [pc, #720]	; (8014b2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801485a:	4690      	mov	r8, r2
 801485c:	b08d      	sub	sp, #52	; 0x34
 801485e:	4604      	mov	r4, r0
 8014860:	682a      	ldr	r2, [r5, #0]
 8014862:	4689      	mov	r9, r1
 8014864:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8014868:	2a02      	cmp	r2, #2
 801486a:	d106      	bne.n	801487a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801486c:	4bb0      	ldr	r3, [pc, #704]	; (8014b30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801486e:	f240 11ed 	movw	r1, #493	; 0x1ed
 8014872:	4ab0      	ldr	r2, [pc, #704]	; (8014b34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8014874:	48b0      	ldr	r0, [pc, #704]	; (8014b38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 8014876:	f006 fc01 	bl	801b07c <__assert_func>
 801487a:	ae0c      	add	r6, sp, #48	; 0x30
 801487c:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 8014880:	4630      	mov	r0, r6
 8014882:	f7fe f97b 	bl	8012b7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014886:	6823      	ldr	r3, [r4, #0]
 8014888:	4607      	mov	r7, r0
 801488a:	4620      	mov	r0, r4
 801488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801488e:	4798      	blx	r3
 8014890:	4287      	cmp	r7, r0
 8014892:	d004      	beq.n	801489e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8014894:	4ba9      	ldr	r3, [pc, #676]	; (8014b3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 8014896:	f240 11ef 	movw	r1, #495	; 0x1ef
 801489a:	4aa6      	ldr	r2, [pc, #664]	; (8014b34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801489c:	e7ea      	b.n	8014874 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801489e:	4630      	mov	r0, r6
 80148a0:	f7fe f8e2 	bl	8012a68 <_ZNK8touchgfx6Bitmap7getDataEv>
 80148a4:	4607      	mov	r7, r0
 80148a6:	b920      	cbnz	r0, 80148b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80148a8:	4ba5      	ldr	r3, [pc, #660]	; (8014b40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 80148aa:	f240 11f1 	movw	r1, #497	; 0x1f1
 80148ae:	4aa1      	ldr	r2, [pc, #644]	; (8014b34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80148b0:	e7e0      	b.n	8014874 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80148b2:	f8d8 0000 	ldr.w	r0, [r8]
 80148b6:	ab06      	add	r3, sp, #24
 80148b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80148bc:	f9b8 a000 	ldrsh.w	sl, [r8]
 80148c0:	c303      	stmia	r3!, {r0, r1}
 80148c2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80148c6:	ab08      	add	r3, sp, #32
 80148c8:	f8d9 0000 	ldr.w	r0, [r9]
 80148cc:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 80148d0:	c303      	stmia	r3!, {r0, r1}
 80148d2:	4630      	mov	r0, r6
 80148d4:	f7fd ffc0 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148d8:	4680      	mov	r8, r0
 80148da:	4630      	mov	r0, r6
 80148dc:	f7fd fff6 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80148e0:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80148e4:	f10d 0920 	add.w	r9, sp, #32
 80148e8:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80148ec:	a806      	add	r0, sp, #24
 80148ee:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80148f2:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 80148f6:	f7fa fc19 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80148fa:	4648      	mov	r0, r9
 80148fc:	f7fa fc16 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014900:	a80a      	add	r0, sp, #40	; 0x28
 8014902:	f7fa fc13 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014906:	4b8f      	ldr	r3, [pc, #572]	; (8014b44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8014908:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801490c:	881e      	ldrh	r6, [r3, #0]
 801490e:	4b8e      	ldr	r3, [pc, #568]	; (8014b48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8014910:	fa0f fb86 	sxth.w	fp, r6
 8014914:	8819      	ldrh	r1, [r3, #0]
 8014916:	4593      	cmp	fp, r2
 8014918:	dd75      	ble.n	8014a06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801491a:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801491e:	4494      	add	ip, r2
 8014920:	fa1f fc8c 	uxth.w	ip, ip
 8014924:	fa0f fa8c 	sxth.w	sl, ip
 8014928:	f1ba 0f00 	cmp.w	sl, #0
 801492c:	dd6b      	ble.n	8014a06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801492e:	fa0f f881 	sxth.w	r8, r1
 8014932:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014936:	4598      	cmp	r8, r3
 8014938:	dd65      	ble.n	8014a06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801493a:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801493e:	4418      	add	r0, r3
 8014940:	b280      	uxth	r0, r0
 8014942:	fa0f fe80 	sxth.w	lr, r0
 8014946:	f1be 0f00 	cmp.w	lr, #0
 801494a:	dd5c      	ble.n	8014a06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801494c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8014950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014954:	45d3      	cmp	fp, sl
 8014956:	bfc8      	it	gt
 8014958:	4666      	movgt	r6, ip
 801495a:	45f0      	cmp	r8, lr
 801495c:	bfc8      	it	gt
 801495e:	4601      	movgt	r1, r0
 8014960:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014964:	1ab6      	subs	r6, r6, r2
 8014966:	1ac9      	subs	r1, r1, r3
 8014968:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801496c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8014970:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8014974:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8014978:	f1bc 0f00 	cmp.w	ip, #0
 801497c:	f340 80aa 	ble.w	8014ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014980:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8014984:	2e00      	cmp	r6, #0
 8014986:	f340 80a5 	ble.w	8014ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801498a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801498e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014992:	4288      	cmp	r0, r1
 8014994:	db3b      	blt.n	8014a0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8014996:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801499a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801499e:	429a      	cmp	r2, r3
 80149a0:	db35      	blt.n	8014a0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80149a2:	4460      	add	r0, ip
 80149a4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80149a8:	4461      	add	r1, ip
 80149aa:	b200      	sxth	r0, r0
 80149ac:	b209      	sxth	r1, r1
 80149ae:	4288      	cmp	r0, r1
 80149b0:	dc2d      	bgt.n	8014a0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80149b2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80149b6:	4432      	add	r2, r6
 80149b8:	440b      	add	r3, r1
 80149ba:	b212      	sxth	r2, r2
 80149bc:	b21b      	sxth	r3, r3
 80149be:	429a      	cmp	r2, r3
 80149c0:	dc25      	bgt.n	8014a0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80149c2:	6823      	ldr	r3, [r4, #0]
 80149c4:	4620      	mov	r0, r4
 80149c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149c8:	4798      	blx	r3
 80149ca:	4682      	mov	sl, r0
 80149cc:	6828      	ldr	r0, [r5, #0]
 80149ce:	6803      	ldr	r3, [r0, #0]
 80149d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149d2:	4798      	blx	r3
 80149d4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80149d8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80149dc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80149e0:	9303      	str	r3, [sp, #12]
 80149e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80149e6:	1a9b      	subs	r3, r3, r2
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	b21c      	sxth	r4, r3
 80149ec:	2c00      	cmp	r4, #0
 80149ee:	dc13      	bgt.n	8014a18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 80149f0:	bf18      	it	ne
 80149f2:	f8ad 2020 	strhne.w	r2, [sp, #32]
 80149f6:	463c      	mov	r4, r7
 80149f8:	bf1e      	ittt	ne
 80149fa:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 80149fe:	189b      	addne	r3, r3, r2
 8014a00:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8014a04:	e00f      	b.n	8014a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8014a06:	2300      	movs	r3, #0
 8014a08:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014a0c:	e7b2      	b.n	8014974 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8014a0e:	4b4f      	ldr	r3, [pc, #316]	; (8014b4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8014a10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8014a14:	4a47      	ldr	r2, [pc, #284]	; (8014b34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8014a16:	e72d      	b.n	8014874 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014a18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014a1c:	ebab 0303 	sub.w	r3, fp, r3
 8014a20:	443c      	add	r4, r7
 8014a22:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8014a26:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8014a2a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014a2e:	1a9b      	subs	r3, r3, r2
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	b219      	sxth	r1, r3
 8014a34:	2900      	cmp	r1, #0
 8014a36:	dd51      	ble.n	8014adc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8014a38:	9a03      	ldr	r2, [sp, #12]
 8014a3a:	fb02 4401 	mla	r4, r2, r1, r4
 8014a3e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8014a42:	1ad3      	subs	r3, r2, r3
 8014a44:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014a48:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	dd41      	ble.n	8014ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014a50:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8014a54:	2e00      	cmp	r6, #0
 8014a56:	dd3d      	ble.n	8014ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014a58:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014a5c:	f04f 0803 	mov.w	r8, #3
 8014a60:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014a64:	fb0a f10c 	mul.w	r1, sl, ip
 8014a68:	fb12 1808 	smlabb	r8, r2, r8, r1
 8014a6c:	4935      	ldr	r1, [pc, #212]	; (8014b44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8014a6e:	4480      	add	r8, r0
 8014a70:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8014a74:	8809      	ldrh	r1, [r1, #0]
 8014a76:	4283      	cmp	r3, r0
 8014a78:	eba1 0202 	sub.w	r2, r1, r2
 8014a7c:	bfa8      	it	ge
 8014a7e:	4603      	movge	r3, r0
 8014a80:	4293      	cmp	r3, r2
 8014a82:	bfa8      	it	ge
 8014a84:	4613      	movge	r3, r2
 8014a86:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8014a8a:	4296      	cmp	r6, r2
 8014a8c:	bfa8      	it	ge
 8014a8e:	4616      	movge	r6, r2
 8014a90:	4a2d      	ldr	r2, [pc, #180]	; (8014b48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8014a92:	8812      	ldrh	r2, [r2, #0]
 8014a94:	eba2 0c0c 	sub.w	ip, r2, ip
 8014a98:	4632      	mov	r2, r6
 8014a9a:	4566      	cmp	r6, ip
 8014a9c:	bfa8      	it	ge
 8014a9e:	4662      	movge	r2, ip
 8014aa0:	4299      	cmp	r1, r3
 8014aa2:	9202      	str	r2, [sp, #8]
 8014aa4:	d12d      	bne.n	8014b02 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8014aa6:	4559      	cmp	r1, fp
 8014aa8:	d12b      	bne.n	8014b02 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8014aaa:	6828      	ldr	r0, [r5, #0]
 8014aac:	6803      	ldr	r3, [r0, #0]
 8014aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ab0:	4798      	blx	r3
 8014ab2:	07c3      	lsls	r3, r0, #31
 8014ab4:	d51b      	bpl.n	8014aee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8014ab6:	6828      	ldr	r0, [r5, #0]
 8014ab8:	9b02      	ldr	r3, [sp, #8]
 8014aba:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8014abe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014ac2:	6803      	ldr	r3, [r0, #0]
 8014ac4:	f8cd b000 	str.w	fp, [sp]
 8014ac8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8014aca:	4623      	mov	r3, r4
 8014acc:	e899 0006 	ldmia.w	r9, {r1, r2}
 8014ad0:	47a8      	blx	r5
 8014ad2:	4607      	mov	r7, r0
 8014ad4:	4638      	mov	r0, r7
 8014ad6:	b00d      	add	sp, #52	; 0x34
 8014ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014adc:	bf1f      	itttt	ne
 8014ade:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8014ae2:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8014ae6:	189b      	addne	r3, r3, r2
 8014ae8:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8014aec:	e7ac      	b.n	8014a48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 8014aee:	6828      	ldr	r0, [r5, #0]
 8014af0:	4642      	mov	r2, r8
 8014af2:	4621      	mov	r1, r4
 8014af4:	6803      	ldr	r3, [r0, #0]
 8014af6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8014af8:	9b02      	ldr	r3, [sp, #8]
 8014afa:	fb03 f30a 	mul.w	r3, r3, sl
 8014afe:	47a8      	blx	r5
 8014b00:	e7e8      	b.n	8014ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014b02:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8014b06:	f04f 0900 	mov.w	r9, #0
 8014b0a:	9b02      	ldr	r3, [sp, #8]
 8014b0c:	454b      	cmp	r3, r9
 8014b0e:	dde1      	ble.n	8014ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8014b10:	6828      	ldr	r0, [r5, #0]
 8014b12:	4642      	mov	r2, r8
 8014b14:	4621      	mov	r1, r4
 8014b16:	44d0      	add	r8, sl
 8014b18:	6803      	ldr	r3, [r0, #0]
 8014b1a:	f109 0901 	add.w	r9, r9, #1
 8014b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b20:	461e      	mov	r6, r3
 8014b22:	465b      	mov	r3, fp
 8014b24:	47b0      	blx	r6
 8014b26:	9b03      	ldr	r3, [sp, #12]
 8014b28:	441c      	add	r4, r3
 8014b2a:	e7ee      	b.n	8014b0a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8014b2c:	24006bbc 	.word	0x24006bbc
 8014b30:	0801ef83 	.word	0x0801ef83
 8014b34:	0801f721 	.word	0x0801f721
 8014b38:	0801ef51 	.word	0x0801ef51
 8014b3c:	0801f035 	.word	0x0801f035
 8014b40:	0801f08a 	.word	0x0801f08a
 8014b44:	24006bb6 	.word	0x24006bb6
 8014b48:	24006bb8 	.word	0x24006bb8
 8014b4c:	0801f0c8 	.word	0x0801f0c8

08014b50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8014b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b54:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014b58:	9c06      	ldr	r4, [sp, #24]
 8014b5a:	2800      	cmp	r0, #0
 8014b5c:	d06e      	beq.n	8014c3c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014b5e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8014b62:	2d00      	cmp	r5, #0
 8014b64:	dd6a      	ble.n	8014c3c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014b66:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8014b6a:	f1bc 0f00 	cmp.w	ip, #0
 8014b6e:	dd65      	ble.n	8014c3c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014b70:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8014b74:	28ff      	cmp	r0, #255	; 0xff
 8014b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b7a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8014b7e:	fb02 3306 	mla	r3, r2, r6, r3
 8014b82:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8014b86:	b2e4      	uxtb	r4, r4
 8014b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014b8c:	4419      	add	r1, r3
 8014b8e:	fb02 f30c 	mul.w	r3, r2, ip
 8014b92:	eba2 0205 	sub.w	r2, r2, r5
 8014b96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014b9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014ba2:	440b      	add	r3, r1
 8014ba4:	d03e      	beq.n	8014c24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8014ba6:	fa1f fc80 	uxth.w	ip, r0
 8014baa:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014bae:	fb06 f60c 	mul.w	r6, r6, ip
 8014bb2:	b280      	uxth	r0, r0
 8014bb4:	fb07 f70c 	mul.w	r7, r7, ip
 8014bb8:	fb04 f40c 	mul.w	r4, r4, ip
 8014bbc:	4299      	cmp	r1, r3
 8014bbe:	d23d      	bcs.n	8014c3c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014bc0:	eb01 0c05 	add.w	ip, r1, r5
 8014bc4:	458c      	cmp	ip, r1
 8014bc6:	f101 0e03 	add.w	lr, r1, #3
 8014bca:	d928      	bls.n	8014c1e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8014bcc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8014bd0:	fb11 f100 	smulbb	r1, r1, r0
 8014bd4:	4421      	add	r1, r4
 8014bd6:	b289      	uxth	r1, r1
 8014bd8:	f101 0801 	add.w	r8, r1, #1
 8014bdc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8014be0:	1209      	asrs	r1, r1, #8
 8014be2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8014be6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8014bea:	fb11 f100 	smulbb	r1, r1, r0
 8014bee:	4439      	add	r1, r7
 8014bf0:	b289      	uxth	r1, r1
 8014bf2:	f101 0801 	add.w	r8, r1, #1
 8014bf6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8014bfa:	1209      	asrs	r1, r1, #8
 8014bfc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8014c00:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8014c04:	fb11 f100 	smulbb	r1, r1, r0
 8014c08:	4431      	add	r1, r6
 8014c0a:	b289      	uxth	r1, r1
 8014c0c:	f101 0801 	add.w	r8, r1, #1
 8014c10:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8014c14:	1209      	asrs	r1, r1, #8
 8014c16:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8014c1a:	4671      	mov	r1, lr
 8014c1c:	e7d2      	b.n	8014bc4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8014c1e:	4411      	add	r1, r2
 8014c20:	e7cc      	b.n	8014bbc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8014c22:	4411      	add	r1, r2
 8014c24:	4299      	cmp	r1, r3
 8014c26:	d209      	bcs.n	8014c3c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8014c28:	1948      	adds	r0, r1, r5
 8014c2a:	4281      	cmp	r1, r0
 8014c2c:	d2f9      	bcs.n	8014c22 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8014c2e:	700c      	strb	r4, [r1, #0]
 8014c30:	3103      	adds	r1, #3
 8014c32:	f801 7c02 	strb.w	r7, [r1, #-2]
 8014c36:	f801 6c01 	strb.w	r6, [r1, #-1]
 8014c3a:	e7f6      	b.n	8014c2a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8014c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c40 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8014c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c42:	4606      	mov	r6, r0
 8014c44:	b087      	sub	sp, #28
 8014c46:	4615      	mov	r5, r2
 8014c48:	461f      	mov	r7, r3
 8014c4a:	b353      	cbz	r3, 8014ca2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014c4c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	dd26      	ble.n	8014ca2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014c54:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	dd22      	ble.n	8014ca2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014c5c:	6808      	ldr	r0, [r1, #0]
 8014c5e:	aa04      	add	r2, sp, #16
 8014c60:	6849      	ldr	r1, [r1, #4]
 8014c62:	4c1b      	ldr	r4, [pc, #108]	; (8014cd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8014c64:	c203      	stmia	r2!, {r0, r1}
 8014c66:	a804      	add	r0, sp, #16
 8014c68:	f7fa fa60 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014c6c:	6820      	ldr	r0, [r4, #0]
 8014c6e:	6803      	ldr	r3, [r0, #0]
 8014c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c72:	4798      	blx	r3
 8014c74:	2fff      	cmp	r7, #255	; 0xff
 8014c76:	d016      	beq.n	8014ca6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8014c78:	f010 0f08 	tst.w	r0, #8
 8014c7c:	6820      	ldr	r0, [r4, #0]
 8014c7e:	d015      	beq.n	8014cac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8014c80:	2400      	movs	r4, #0
 8014c82:	6801      	ldr	r1, [r0, #0]
 8014c84:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014c88:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014c8c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8014c90:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8014c94:	9401      	str	r4, [sp, #4]
 8014c96:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8014c9a:	9400      	str	r4, [sp, #0]
 8014c9c:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8014c9e:	4629      	mov	r1, r5
 8014ca0:	47a0      	blx	r4
 8014ca2:	b007      	add	sp, #28
 8014ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ca6:	f010 0f02 	tst.w	r0, #2
 8014caa:	e7e7      	b.n	8014c7c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8014cac:	6803      	ldr	r3, [r0, #0]
 8014cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cb0:	4798      	blx	r3
 8014cb2:	4b08      	ldr	r3, [pc, #32]	; (8014cd4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8014cb4:	4601      	mov	r1, r0
 8014cb6:	4630      	mov	r0, r6
 8014cb8:	881a      	ldrh	r2, [r3, #0]
 8014cba:	6833      	ldr	r3, [r6, #0]
 8014cbc:	e9cd 5700 	strd	r5, r7, [sp]
 8014cc0:	69dd      	ldr	r5, [r3, #28]
 8014cc2:	ab04      	add	r3, sp, #16
 8014cc4:	47a8      	blx	r5
 8014cc6:	6820      	ldr	r0, [r4, #0]
 8014cc8:	6803      	ldr	r3, [r0, #0]
 8014cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ccc:	4798      	blx	r3
 8014cce:	e7e8      	b.n	8014ca2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014cd0:	24006bbc 	.word	0x24006bbc
 8014cd4:	24006bb6 	.word	0x24006bb6

08014cd8 <_ZN8touchgfx8LCD24bppC1Ev>:
 8014cd8:	2200      	movs	r2, #0
 8014cda:	490c      	ldr	r1, [pc, #48]	; (8014d0c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8014cdc:	6042      	str	r2, [r0, #4]
 8014cde:	6001      	str	r1, [r0, #0]
 8014ce0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8014ce4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8014ce8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014cec:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8014cf0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8014cf4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8014cf8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8014cfc:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8014d00:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8014d04:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8014d08:	4770      	bx	lr
 8014d0a:	bf00      	nop
 8014d0c:	0801f36c 	.word	0x0801f36c

08014d10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8014d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d14:	b091      	sub	sp, #68	; 0x44
 8014d16:	880d      	ldrh	r5, [r1, #0]
 8014d18:	4607      	mov	r7, r0
 8014d1a:	4688      	mov	r8, r1
 8014d1c:	4616      	mov	r6, r2
 8014d1e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8014d22:	b12d      	cbz	r5, 8014d30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8014d24:	4b69      	ldr	r3, [pc, #420]	; (8014ecc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8014d26:	2160      	movs	r1, #96	; 0x60
 8014d28:	4a69      	ldr	r2, [pc, #420]	; (8014ed0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8014d2a:	486a      	ldr	r0, [pc, #424]	; (8014ed4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8014d2c:	f006 f9a6 	bl	801b07c <__assert_func>
 8014d30:	6810      	ldr	r0, [r2, #0]
 8014d32:	ac0c      	add	r4, sp, #48	; 0x30
 8014d34:	6851      	ldr	r1, [r2, #4]
 8014d36:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8014ed8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8014d3a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8014edc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8014d3e:	c403      	stmia	r4!, {r0, r1}
 8014d40:	6818      	ldr	r0, [r3, #0]
 8014d42:	ac0e      	add	r4, sp, #56	; 0x38
 8014d44:	6859      	ldr	r1, [r3, #4]
 8014d46:	c403      	stmia	r4!, {r0, r1}
 8014d48:	a80c      	add	r0, sp, #48	; 0x30
 8014d4a:	f7fa f9ef 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014d4e:	4631      	mov	r1, r6
 8014d50:	a80e      	add	r0, sp, #56	; 0x38
 8014d52:	f7fa fa2f 	bl	800f1b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014d56:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8014d5a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014d5e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8014d62:	f8da 0000 	ldr.w	r0, [sl]
 8014d66:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014d6a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8014d6e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8014d72:	440f      	add	r7, r1
 8014d74:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8014d78:	440a      	add	r2, r1
 8014d7a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8014d7e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8014d82:	4413      	add	r3, r2
 8014d84:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8014d88:	6803      	ldr	r3, [r0, #0]
 8014d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d8c:	4798      	blx	r3
 8014d8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014d92:	f8da 0000 	ldr.w	r0, [sl]
 8014d96:	d01e      	beq.n	8014dd6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8014d98:	6801      	ldr	r1, [r0, #0]
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	9509      	str	r5, [sp, #36]	; 0x24
 8014d9e:	250b      	movs	r5, #11
 8014da0:	b2a4      	uxth	r4, r4
 8014da2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014da6:	b2b6      	uxth	r6, r6
 8014da8:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8014dac:	f8bb 5000 	ldrh.w	r5, [fp]
 8014db0:	f8cd 9010 	str.w	r9, [sp, #16]
 8014db4:	9602      	str	r6, [sp, #8]
 8014db6:	9401      	str	r4, [sp, #4]
 8014db8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8014dbc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014dc0:	9203      	str	r2, [sp, #12]
 8014dc2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014dc6:	9200      	str	r2, [sp, #0]
 8014dc8:	4642      	mov	r2, r8
 8014dca:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8014dcc:	4639      	mov	r1, r7
 8014dce:	47a0      	blx	r4
 8014dd0:	b011      	add	sp, #68	; 0x44
 8014dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd6:	6803      	ldr	r3, [r0, #0]
 8014dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dda:	4798      	blx	r3
 8014ddc:	f8bb 5000 	ldrh.w	r5, [fp]
 8014de0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8014de4:	f04f 0e04 	mov.w	lr, #4
 8014de8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014dec:	436e      	muls	r6, r5
 8014dee:	fb05 2303 	mla	r3, r5, r3, r2
 8014df2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014df6:	1b2d      	subs	r5, r5, r4
 8014df8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e00:	4418      	add	r0, r3
 8014e02:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8014e06:	1982      	adds	r2, r0, r6
 8014e08:	1b1b      	subs	r3, r3, r4
 8014e0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e10:	4290      	cmp	r0, r2
 8014e12:	d254      	bcs.n	8014ebe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8014e14:	eb00 0a04 	add.w	sl, r0, r4
 8014e18:	4550      	cmp	r0, sl
 8014e1a:	d24c      	bcs.n	8014eb6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8014e1c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014e20:	fb1e e101 	smlabb	r1, lr, r1, lr
 8014e24:	eb08 0c01 	add.w	ip, r8, r1
 8014e28:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8014e2c:	b173      	cbz	r3, 8014e4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8014e2e:	2bff      	cmp	r3, #255	; 0xff
 8014e30:	f818 b001 	ldrb.w	fp, [r8, r1]
 8014e34:	d10c      	bne.n	8014e50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8014e36:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014e3a:	d109      	bne.n	8014e50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8014e3c:	f880 b000 	strb.w	fp, [r0]
 8014e40:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8014e44:	7043      	strb	r3, [r0, #1]
 8014e46:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8014e4a:	7083      	strb	r3, [r0, #2]
 8014e4c:	3003      	adds	r0, #3
 8014e4e:	e7e3      	b.n	8014e18 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8014e50:	fb09 f103 	mul.w	r1, r9, r3
 8014e54:	1c4b      	adds	r3, r1, #1
 8014e56:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014e5a:	7801      	ldrb	r1, [r0, #0]
 8014e5c:	121b      	asrs	r3, r3, #8
 8014e5e:	b29e      	uxth	r6, r3
 8014e60:	43db      	mvns	r3, r3
 8014e62:	fb1b fb06 	smulbb	fp, fp, r6
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	fb01 b103 	mla	r1, r1, r3, fp
 8014e6c:	b289      	uxth	r1, r1
 8014e6e:	f101 0b01 	add.w	fp, r1, #1
 8014e72:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8014e76:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014e7a:	fb1b fb03 	smulbb	fp, fp, r3
 8014e7e:	1209      	asrs	r1, r1, #8
 8014e80:	7001      	strb	r1, [r0, #0]
 8014e82:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8014e86:	fb01 b106 	mla	r1, r1, r6, fp
 8014e8a:	b289      	uxth	r1, r1
 8014e8c:	f101 0b01 	add.w	fp, r1, #1
 8014e90:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8014e94:	1209      	asrs	r1, r1, #8
 8014e96:	7041      	strb	r1, [r0, #1]
 8014e98:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8014e9c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8014ea0:	fb1c f303 	smulbb	r3, ip, r3
 8014ea4:	fb01 3606 	mla	r6, r1, r6, r3
 8014ea8:	b2b6      	uxth	r6, r6
 8014eaa:	1c73      	adds	r3, r6, #1
 8014eac:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8014eb0:	1236      	asrs	r6, r6, #8
 8014eb2:	7086      	strb	r6, [r0, #2]
 8014eb4:	e7ca      	b.n	8014e4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8014eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eb8:	4428      	add	r0, r5
 8014eba:	441f      	add	r7, r3
 8014ebc:	e7a8      	b.n	8014e10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8014ebe:	4b06      	ldr	r3, [pc, #24]	; (8014ed8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8014ec0:	6818      	ldr	r0, [r3, #0]
 8014ec2:	6803      	ldr	r3, [r0, #0]
 8014ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec6:	4798      	blx	r3
 8014ec8:	e782      	b.n	8014dd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8014eca:	bf00      	nop
 8014ecc:	0801eeb5 	.word	0x0801eeb5
 8014ed0:	0801f543 	.word	0x0801f543
 8014ed4:	0801ef51 	.word	0x0801ef51
 8014ed8:	24006bbc 	.word	0x24006bbc
 8014edc:	24006bb6 	.word	0x24006bb6

08014ee0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8014ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee4:	f8b1 9000 	ldrh.w	r9, [r1]
 8014ee8:	b091      	sub	sp, #68	; 0x44
 8014eea:	4604      	mov	r4, r0
 8014eec:	460e      	mov	r6, r1
 8014eee:	f1b9 0f01 	cmp.w	r9, #1
 8014ef2:	4690      	mov	r8, r2
 8014ef4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8014ef8:	d005      	beq.n	8014f06 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8014efa:	4b69      	ldr	r3, [pc, #420]	; (80150a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8014efc:	21ae      	movs	r1, #174	; 0xae
 8014efe:	4a69      	ldr	r2, [pc, #420]	; (80150a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8014f00:	4869      	ldr	r0, [pc, #420]	; (80150a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8014f02:	f006 f8bb 	bl	801b07c <__assert_func>
 8014f06:	6810      	ldr	r0, [r2, #0]
 8014f08:	ad0c      	add	r5, sp, #48	; 0x30
 8014f0a:	6851      	ldr	r1, [r2, #4]
 8014f0c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80150ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8014f10:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80150b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8014f14:	c503      	stmia	r5!, {r0, r1}
 8014f16:	6818      	ldr	r0, [r3, #0]
 8014f18:	ad0e      	add	r5, sp, #56	; 0x38
 8014f1a:	6859      	ldr	r1, [r3, #4]
 8014f1c:	c503      	stmia	r5!, {r0, r1}
 8014f1e:	a80c      	add	r0, sp, #48	; 0x30
 8014f20:	f7fa f904 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014f24:	4641      	mov	r1, r8
 8014f26:	a80e      	add	r0, sp, #56	; 0x38
 8014f28:	f7fa f944 	bl	800f1b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014f2c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8014f30:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014f34:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8014f38:	f8da 0000 	ldr.w	r0, [sl]
 8014f3c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014f40:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8014f44:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8014f48:	440c      	add	r4, r1
 8014f4a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8014f4e:	440a      	add	r2, r1
 8014f50:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8014f54:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8014f58:	4413      	add	r3, r2
 8014f5a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8014f5e:	6803      	ldr	r3, [r0, #0]
 8014f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f62:	4798      	blx	r3
 8014f64:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014f68:	f8da 0000 	ldr.w	r0, [sl]
 8014f6c:	d020      	beq.n	8014fb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8014f6e:	2200      	movs	r2, #0
 8014f70:	f04f 0c0b 	mov.w	ip, #11
 8014f74:	6801      	ldr	r1, [r0, #0]
 8014f76:	b2ad      	uxth	r5, r5
 8014f78:	f8cd c01c 	str.w	ip, [sp, #28]
 8014f7c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014f80:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8014f84:	f8bb c000 	ldrh.w	ip, [fp]
 8014f88:	9704      	str	r7, [sp, #16]
 8014f8a:	9502      	str	r5, [sp, #8]
 8014f8c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8014f90:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014f94:	9203      	str	r2, [sp, #12]
 8014f96:	fa1f f288 	uxth.w	r2, r8
 8014f9a:	9201      	str	r2, [sp, #4]
 8014f9c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014fa0:	9200      	str	r2, [sp, #0]
 8014fa2:	4632      	mov	r2, r6
 8014fa4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8014fa6:	4621      	mov	r1, r4
 8014fa8:	47a8      	blx	r5
 8014faa:	b011      	add	sp, #68	; 0x44
 8014fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb0:	6803      	ldr	r3, [r0, #0]
 8014fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fb4:	4798      	blx	r3
 8014fb6:	f8bb 2000 	ldrh.w	r2, [fp]
 8014fba:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014fbe:	f04f 0e03 	mov.w	lr, #3
 8014fc2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8014fc6:	4355      	muls	r5, r2
 8014fc8:	fa1f fc87 	uxth.w	ip, r7
 8014fcc:	fb02 1303 	mla	r3, r2, r3, r1
 8014fd0:	eba2 0208 	sub.w	r2, r2, r8
 8014fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014fd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014fdc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014fe0:	4418      	add	r0, r3
 8014fe2:	920b      	str	r2, [sp, #44]	; 0x2c
 8014fe4:	1943      	adds	r3, r0, r5
 8014fe6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8014fea:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8014fee:	eba2 0208 	sub.w	r2, r2, r8
 8014ff2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8014ff6:	b2ad      	uxth	r5, r5
 8014ff8:	4298      	cmp	r0, r3
 8014ffa:	d24a      	bcs.n	8015092 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8014ffc:	eb00 0908 	add.w	r9, r0, r8
 8015000:	4621      	mov	r1, r4
 8015002:	4548      	cmp	r0, r9
 8015004:	460c      	mov	r4, r1
 8015006:	d240      	bcs.n	801508a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8015008:	f04f 0a04 	mov.w	sl, #4
 801500c:	7824      	ldrb	r4, [r4, #0]
 801500e:	2fff      	cmp	r7, #255	; 0xff
 8015010:	f101 0101 	add.w	r1, r1, #1
 8015014:	fb1e a404 	smlabb	r4, lr, r4, sl
 8015018:	eb06 0a04 	add.w	sl, r6, r4
 801501c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8015020:	d02b      	beq.n	801507a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8015022:	7804      	ldrb	r4, [r0, #0]
 8015024:	fb14 f405 	smulbb	r4, r4, r5
 8015028:	fb0b 440c 	mla	r4, fp, ip, r4
 801502c:	b2a4      	uxth	r4, r4
 801502e:	f104 0b01 	add.w	fp, r4, #1
 8015032:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015036:	f890 b001 	ldrb.w	fp, [r0, #1]
 801503a:	fb1b fb05 	smulbb	fp, fp, r5
 801503e:	1224      	asrs	r4, r4, #8
 8015040:	7004      	strb	r4, [r0, #0]
 8015042:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015046:	fb04 b40c 	mla	r4, r4, ip, fp
 801504a:	b2a4      	uxth	r4, r4
 801504c:	f104 0b01 	add.w	fp, r4, #1
 8015050:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015054:	1224      	asrs	r4, r4, #8
 8015056:	7044      	strb	r4, [r0, #1]
 8015058:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801505c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8015060:	fb1a fa05 	smulbb	sl, sl, r5
 8015064:	fb04 a40c 	mla	r4, r4, ip, sl
 8015068:	b2a4      	uxth	r4, r4
 801506a:	f104 0a01 	add.w	sl, r4, #1
 801506e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8015072:	1224      	asrs	r4, r4, #8
 8015074:	7084      	strb	r4, [r0, #2]
 8015076:	3003      	adds	r0, #3
 8015078:	e7c3      	b.n	8015002 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 801507a:	f880 b000 	strb.w	fp, [r0]
 801507e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015082:	7044      	strb	r4, [r0, #1]
 8015084:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015088:	e7f4      	b.n	8015074 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 801508a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801508c:	4420      	add	r0, r4
 801508e:	188c      	adds	r4, r1, r2
 8015090:	e7b2      	b.n	8014ff8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8015092:	4b06      	ldr	r3, [pc, #24]	; (80150ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8015094:	6818      	ldr	r0, [r3, #0]
 8015096:	6803      	ldr	r3, [r0, #0]
 8015098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801509a:	4798      	blx	r3
 801509c:	e785      	b.n	8014faa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 801509e:	bf00      	nop
 80150a0:	0801ee34 	.word	0x0801ee34
 80150a4:	0801f436 	.word	0x0801f436
 80150a8:	0801ef51 	.word	0x0801ef51
 80150ac:	24006bbc 	.word	0x24006bbc
 80150b0:	24006bb6 	.word	0x24006bb6

080150b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80150b4:	b570      	push	{r4, r5, r6, lr}
 80150b6:	780d      	ldrb	r5, [r1, #0]
 80150b8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80150bc:	2d01      	cmp	r5, #1
 80150be:	d00d      	beq.n	80150dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 80150c0:	d307      	bcc.n	80150d2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 80150c2:	2d02      	cmp	r5, #2
 80150c4:	d10f      	bne.n	80150e6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 80150c6:	4b08      	ldr	r3, [pc, #32]	; (80150e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 80150c8:	2153      	movs	r1, #83	; 0x53
 80150ca:	4a08      	ldr	r2, [pc, #32]	; (80150ec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 80150cc:	4808      	ldr	r0, [pc, #32]	; (80150f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 80150ce:	f005 ffd5 	bl	801b07c <__assert_func>
 80150d2:	9404      	str	r4, [sp, #16]
 80150d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d8:	f7ff be1a 	b.w	8014d10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80150dc:	9404      	str	r4, [sp, #16]
 80150de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150e2:	f7ff befd 	b.w	8014ee0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80150e6:	bd70      	pop	{r4, r5, r6, pc}
 80150e8:	0801ede9 	.word	0x0801ede9
 80150ec:	0801f3b4 	.word	0x0801f3b4
 80150f0:	0801ef51 	.word	0x0801ef51

080150f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80150f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150f8:	4605      	mov	r5, r0
 80150fa:	b08f      	sub	sp, #60	; 0x3c
 80150fc:	460c      	mov	r4, r1
 80150fe:	461f      	mov	r7, r3
 8015100:	2b00      	cmp	r3, #0
 8015102:	d052      	beq.n	80151aa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8015104:	6808      	ldr	r0, [r1, #0]
 8015106:	ab0a      	add	r3, sp, #40	; 0x28
 8015108:	6849      	ldr	r1, [r1, #4]
 801510a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80152d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801510e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80152d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8015112:	c303      	stmia	r3!, {r0, r1}
 8015114:	6810      	ldr	r0, [r2, #0]
 8015116:	ab0c      	add	r3, sp, #48	; 0x30
 8015118:	6851      	ldr	r1, [r2, #4]
 801511a:	c303      	stmia	r3!, {r0, r1}
 801511c:	a80a      	add	r0, sp, #40	; 0x28
 801511e:	f7fa f805 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015122:	4621      	mov	r1, r4
 8015124:	a80c      	add	r0, sp, #48	; 0x30
 8015126:	f7fa f845 	bl	800f1b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801512a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801512e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015132:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015136:	f8d8 0000 	ldr.w	r0, [r8]
 801513a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801513e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8015142:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8015146:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801514a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801514e:	440a      	add	r2, r1
 8015150:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8015154:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8015158:	4413      	add	r3, r2
 801515a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801515e:	6803      	ldr	r3, [r0, #0]
 8015160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015162:	4798      	blx	r3
 8015164:	2fff      	cmp	r7, #255	; 0xff
 8015166:	d023      	beq.n	80151b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8015168:	f010 0f04 	tst.w	r0, #4
 801516c:	f8d8 0000 	ldr.w	r0, [r8]
 8015170:	d021      	beq.n	80151b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8015172:	2100      	movs	r1, #0
 8015174:	f04f 0e01 	mov.w	lr, #1
 8015178:	f8d0 c000 	ldr.w	ip, [r0]
 801517c:	b2a4      	uxth	r4, r4
 801517e:	9106      	str	r1, [sp, #24]
 8015180:	b2b6      	uxth	r6, r6
 8015182:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015186:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801518a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801518e:	f8b9 e000 	ldrh.w	lr, [r9]
 8015192:	9703      	str	r7, [sp, #12]
 8015194:	9401      	str	r4, [sp, #4]
 8015196:	9600      	str	r6, [sp, #0]
 8015198:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801519c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80151a0:	9102      	str	r1, [sp, #8]
 80151a2:	4629      	mov	r1, r5
 80151a4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80151a8:	47a0      	blx	r4
 80151aa:	b00f      	add	sp, #60	; 0x3c
 80151ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151b0:	f010 0f01 	tst.w	r0, #1
 80151b4:	e7da      	b.n	801516c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80151b6:	6803      	ldr	r3, [r0, #0]
 80151b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151ba:	4798      	blx	r3
 80151bc:	f8b9 1000 	ldrh.w	r1, [r9]
 80151c0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80151c4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80151c8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80151cc:	434c      	muls	r4, r1
 80151ce:	2fff      	cmp	r7, #255	; 0xff
 80151d0:	fb01 2303 	mla	r3, r1, r3, r2
 80151d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80151d8:	eba1 0106 	sub.w	r1, r1, r6
 80151dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80151e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80151e4:	4418      	add	r0, r3
 80151e6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80151ea:	eba3 0606 	sub.w	r6, r3, r6
 80151ee:	4404      	add	r4, r0
 80151f0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80151f4:	d04a      	beq.n	801528c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80151f6:	43fa      	mvns	r2, r7
 80151f8:	b2bb      	uxth	r3, r7
 80151fa:	b2d7      	uxtb	r7, r2
 80151fc:	42a0      	cmp	r0, r4
 80151fe:	d263      	bcs.n	80152c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8015200:	eb00 0e0c 	add.w	lr, r0, ip
 8015204:	4586      	cmp	lr, r0
 8015206:	f100 0803 	add.w	r8, r0, #3
 801520a:	d93a      	bls.n	8015282 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801520c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8015210:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8015214:	00d0      	lsls	r0, r2, #3
 8015216:	fb19 f907 	smulbb	r9, r9, r7
 801521a:	b2c0      	uxtb	r0, r0
 801521c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8015220:	fb00 9003 	mla	r0, r0, r3, r9
 8015224:	b280      	uxth	r0, r0
 8015226:	f100 0901 	add.w	r9, r0, #1
 801522a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801522e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8015232:	fb19 f907 	smulbb	r9, r9, r7
 8015236:	1200      	asrs	r0, r0, #8
 8015238:	f808 0c03 	strb.w	r0, [r8, #-3]
 801523c:	10d0      	asrs	r0, r2, #3
 801523e:	1212      	asrs	r2, r2, #8
 8015240:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015244:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8015248:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801524c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8015250:	fb00 9003 	mla	r0, r0, r3, r9
 8015254:	b280      	uxth	r0, r0
 8015256:	f100 0901 	add.w	r9, r0, #1
 801525a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801525e:	1200      	asrs	r0, r0, #8
 8015260:	f808 0c02 	strb.w	r0, [r8, #-2]
 8015264:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8015268:	fb10 f007 	smulbb	r0, r0, r7
 801526c:	fb02 0203 	mla	r2, r2, r3, r0
 8015270:	b292      	uxth	r2, r2
 8015272:	1c50      	adds	r0, r2, #1
 8015274:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015278:	4640      	mov	r0, r8
 801527a:	1212      	asrs	r2, r2, #8
 801527c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8015280:	e7c0      	b.n	8015204 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8015282:	4408      	add	r0, r1
 8015284:	4435      	add	r5, r6
 8015286:	e7b9      	b.n	80151fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8015288:	4408      	add	r0, r1
 801528a:	4435      	add	r5, r6
 801528c:	42a0      	cmp	r0, r4
 801528e:	d21b      	bcs.n	80152c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8015290:	eb00 070c 	add.w	r7, r0, ip
 8015294:	42b8      	cmp	r0, r7
 8015296:	d2f7      	bcs.n	8015288 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8015298:	f835 3b02 	ldrh.w	r3, [r5], #2
 801529c:	3003      	adds	r0, #3
 801529e:	00da      	lsls	r2, r3, #3
 80152a0:	b2d2      	uxtb	r2, r2
 80152a2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80152a6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80152aa:	10da      	asrs	r2, r3, #3
 80152ac:	121b      	asrs	r3, r3, #8
 80152ae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80152b2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80152b6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80152ba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80152be:	f800 2c02 	strb.w	r2, [r0, #-2]
 80152c2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80152c6:	e7e5      	b.n	8015294 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80152c8:	4b02      	ldr	r3, [pc, #8]	; (80152d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80152ca:	6818      	ldr	r0, [r3, #0]
 80152cc:	6803      	ldr	r3, [r0, #0]
 80152ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152d0:	4798      	blx	r3
 80152d2:	e76a      	b.n	80151aa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80152d4:	24006bbc 	.word	0x24006bbc
 80152d8:	24006bb6 	.word	0x24006bb6

080152dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80152dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152e0:	b08a      	sub	sp, #40	; 0x28
 80152e2:	460d      	mov	r5, r1
 80152e4:	4604      	mov	r4, r0
 80152e6:	461e      	mov	r6, r3
 80152e8:	6808      	ldr	r0, [r1, #0]
 80152ea:	ab06      	add	r3, sp, #24
 80152ec:	6849      	ldr	r1, [r1, #4]
 80152ee:	4f5d      	ldr	r7, [pc, #372]	; (8015464 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80152f0:	c303      	stmia	r3!, {r0, r1}
 80152f2:	6810      	ldr	r0, [r2, #0]
 80152f4:	ab08      	add	r3, sp, #32
 80152f6:	6851      	ldr	r1, [r2, #4]
 80152f8:	c303      	stmia	r3!, {r0, r1}
 80152fa:	a806      	add	r0, sp, #24
 80152fc:	f7f9 ff16 	bl	800f12c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015300:	4629      	mov	r1, r5
 8015302:	a808      	add	r0, sp, #32
 8015304:	f7f9 ff56 	bl	800f1b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015308:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801530c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015310:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015314:	6838      	ldr	r0, [r7, #0]
 8015316:	fb11 2103 	smlabb	r1, r1, r3, r2
 801531a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801531e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8015322:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8015326:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801532a:	440a      	add	r2, r1
 801532c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015330:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015334:	4413      	add	r3, r2
 8015336:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801533a:	6803      	ldr	r3, [r0, #0]
 801533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801533e:	4798      	blx	r3
 8015340:	2eff      	cmp	r6, #255	; 0xff
 8015342:	d119      	bne.n	8015378 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8015344:	f010 0f20 	tst.w	r0, #32
 8015348:	6838      	ldr	r0, [r7, #0]
 801534a:	d018      	beq.n	801537e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801534c:	b2ad      	uxth	r5, r5
 801534e:	2700      	movs	r7, #0
 8015350:	6801      	ldr	r1, [r0, #0]
 8015352:	9501      	str	r5, [sp, #4]
 8015354:	fa1f f588 	uxth.w	r5, r8
 8015358:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801535c:	9500      	str	r5, [sp, #0]
 801535e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015362:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8015366:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801536a:	9602      	str	r6, [sp, #8]
 801536c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801536e:	4621      	mov	r1, r4
 8015370:	47a8      	blx	r5
 8015372:	b00a      	add	sp, #40	; 0x28
 8015374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015378:	f010 0f40 	tst.w	r0, #64	; 0x40
 801537c:	e7e4      	b.n	8015348 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801537e:	6803      	ldr	r3, [r0, #0]
 8015380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015382:	4798      	blx	r3
 8015384:	4b38      	ldr	r3, [pc, #224]	; (8015468 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8015386:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801538a:	f8b3 c000 	ldrh.w	ip, [r3]
 801538e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015392:	fb0c f505 	mul.w	r5, ip, r5
 8015396:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801539a:	fb0c 2303 	mla	r3, ip, r3, r2
 801539e:	ebac 0c08 	sub.w	ip, ip, r8
 80153a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80153a6:	ebae 0e08 	sub.w	lr, lr, r8
 80153aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80153ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80153b2:	4418      	add	r0, r3
 80153b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80153b8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80153bc:	4405      	add	r5, r0
 80153be:	42a8      	cmp	r0, r5
 80153c0:	d24a      	bcs.n	8015458 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80153c2:	eb00 0803 	add.w	r8, r0, r3
 80153c6:	4540      	cmp	r0, r8
 80153c8:	d243      	bcs.n	8015452 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80153ca:	78e2      	ldrb	r2, [r4, #3]
 80153cc:	b15a      	cbz	r2, 80153e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80153ce:	2aff      	cmp	r2, #255	; 0xff
 80153d0:	f894 9000 	ldrb.w	r9, [r4]
 80153d4:	d10a      	bne.n	80153ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80153d6:	2eff      	cmp	r6, #255	; 0xff
 80153d8:	d108      	bne.n	80153ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80153da:	f880 9000 	strb.w	r9, [r0]
 80153de:	7862      	ldrb	r2, [r4, #1]
 80153e0:	7042      	strb	r2, [r0, #1]
 80153e2:	78a2      	ldrb	r2, [r4, #2]
 80153e4:	7082      	strb	r2, [r0, #2]
 80153e6:	3003      	adds	r0, #3
 80153e8:	3404      	adds	r4, #4
 80153ea:	e7ec      	b.n	80153c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80153ec:	4372      	muls	r2, r6
 80153ee:	1c51      	adds	r1, r2, #1
 80153f0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80153f4:	1209      	asrs	r1, r1, #8
 80153f6:	fa1f fa81 	uxth.w	sl, r1
 80153fa:	43c9      	mvns	r1, r1
 80153fc:	fb19 f90a 	smulbb	r9, r9, sl
 8015400:	b2ca      	uxtb	r2, r1
 8015402:	7801      	ldrb	r1, [r0, #0]
 8015404:	fb01 9902 	mla	r9, r1, r2, r9
 8015408:	fa1f f989 	uxth.w	r9, r9
 801540c:	f109 0101 	add.w	r1, r9, #1
 8015410:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8015414:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015418:	f880 9000 	strb.w	r9, [r0]
 801541c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8015420:	7861      	ldrb	r1, [r4, #1]
 8015422:	fb19 f902 	smulbb	r9, r9, r2
 8015426:	fb01 910a 	mla	r1, r1, sl, r9
 801542a:	b289      	uxth	r1, r1
 801542c:	f101 0901 	add.w	r9, r1, #1
 8015430:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8015434:	1209      	asrs	r1, r1, #8
 8015436:	7041      	strb	r1, [r0, #1]
 8015438:	7881      	ldrb	r1, [r0, #2]
 801543a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801543e:	fb11 f202 	smulbb	r2, r1, r2
 8015442:	fb09 220a 	mla	r2, r9, sl, r2
 8015446:	b292      	uxth	r2, r2
 8015448:	1c51      	adds	r1, r2, #1
 801544a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801544e:	1212      	asrs	r2, r2, #8
 8015450:	e7c8      	b.n	80153e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8015452:	4460      	add	r0, ip
 8015454:	4474      	add	r4, lr
 8015456:	e7b2      	b.n	80153be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8015458:	6838      	ldr	r0, [r7, #0]
 801545a:	6803      	ldr	r3, [r0, #0]
 801545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801545e:	4798      	blx	r3
 8015460:	e787      	b.n	8015372 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8015462:	bf00      	nop
 8015464:	24006bbc 	.word	0x24006bbc
 8015468:	24006bb6 	.word	0x24006bb6

0801546c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801546c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015470:	b085      	sub	sp, #20
 8015472:	4606      	mov	r6, r0
 8015474:	460c      	mov	r4, r1
 8015476:	4691      	mov	r9, r2
 8015478:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801547c:	4698      	mov	r8, r3
 801547e:	b31d      	cbz	r5, 80154c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015480:	4608      	mov	r0, r1
 8015482:	f7fd f9e9 	bl	8012858 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015486:	4607      	mov	r7, r0
 8015488:	4620      	mov	r0, r4
 801548a:	f7fd fa1f 	bl	80128cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801548e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015492:	4620      	mov	r0, r4
 8015494:	f8ad 9008 	strh.w	r9, [sp, #8]
 8015498:	f8ad 800a 	strh.w	r8, [sp, #10]
 801549c:	f8ad 700c 	strh.w	r7, [sp, #12]
 80154a0:	f7fd fb6c 	bl	8012b7c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80154a4:	280b      	cmp	r0, #11
 80154a6:	d838      	bhi.n	801551a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 80154a8:	e8df f000 	tbb	[pc, r0]
 80154ac:	37062920 	.word	0x37062920
 80154b0:	37373737 	.word	0x37373737
 80154b4:	11373737 	.word	0x11373737
 80154b8:	4620      	mov	r0, r4
 80154ba:	f7fd fad5 	bl	8012a68 <_ZNK8touchgfx6Bitmap7getDataEv>
 80154be:	462b      	mov	r3, r5
 80154c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154c2:	a902      	add	r1, sp, #8
 80154c4:	f7ff ff0a 	bl	80152dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80154c8:	b005      	add	sp, #20
 80154ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154ce:	4620      	mov	r0, r4
 80154d0:	f7fd faca 	bl	8012a68 <_ZNK8touchgfx6Bitmap7getDataEv>
 80154d4:	4606      	mov	r6, r0
 80154d6:	4620      	mov	r0, r4
 80154d8:	f7fd faf8 	bl	8012acc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80154dc:	9500      	str	r5, [sp, #0]
 80154de:	4601      	mov	r1, r0
 80154e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154e2:	aa02      	add	r2, sp, #8
 80154e4:	4630      	mov	r0, r6
 80154e6:	f7ff fde5 	bl	80150b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80154ea:	e7ed      	b.n	80154c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80154ec:	4620      	mov	r0, r4
 80154ee:	f7fd fabb 	bl	8012a68 <_ZNK8touchgfx6Bitmap7getDataEv>
 80154f2:	462b      	mov	r3, r5
 80154f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154f6:	a902      	add	r1, sp, #8
 80154f8:	f7ff fdfc 	bl	80150f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80154fc:	e7e4      	b.n	80154c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80154fe:	6833      	ldr	r3, [r6, #0]
 8015500:	4620      	mov	r0, r4
 8015502:	68df      	ldr	r7, [r3, #12]
 8015504:	f7fd fab0 	bl	8012a68 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015508:	2300      	movs	r3, #0
 801550a:	4601      	mov	r1, r0
 801550c:	aa02      	add	r2, sp, #8
 801550e:	4630      	mov	r0, r6
 8015510:	e9cd 5300 	strd	r5, r3, [sp]
 8015514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015516:	47b8      	blx	r7
 8015518:	e7d6      	b.n	80154c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801551a:	4b03      	ldr	r3, [pc, #12]	; (8015528 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801551c:	2147      	movs	r1, #71	; 0x47
 801551e:	4a03      	ldr	r2, [pc, #12]	; (801552c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8015520:	4803      	ldr	r0, [pc, #12]	; (8015530 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8015522:	f005 fdab 	bl	801b07c <__assert_func>
 8015526:	bf00      	nop
 8015528:	0801ee82 	.word	0x0801ee82
 801552c:	0801f4bf 	.word	0x0801f4bf
 8015530:	0801ef51 	.word	0x0801ef51

08015534 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8015534:	b570      	push	{r4, r5, r6, lr}
 8015536:	9c04      	ldr	r4, [sp, #16]
 8015538:	4605      	mov	r5, r0
 801553a:	4608      	mov	r0, r1
 801553c:	4619      	mov	r1, r3
 801553e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015542:	2a0d      	cmp	r2, #13
 8015544:	d826      	bhi.n	8015594 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8015546:	e8df f002 	tbb	[pc, r2]
 801554a:	1107      	.short	0x1107
 801554c:	1e1e1e0c 	.word	0x1e1e1e0c
 8015550:	1e1e1e1e 	.word	0x1e1e1e1e
 8015554:	1e1e1e1e 	.word	0x1e1e1e1e
 8015558:	4622      	mov	r2, r4
 801555a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801555e:	f7ff bdc9 	b.w	80150f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8015562:	4622      	mov	r2, r4
 8015564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015568:	f7ff beb8 	b.w	80152dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801556c:	682a      	ldr	r2, [r5, #0]
 801556e:	2600      	movs	r6, #0
 8015570:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8015574:	68d6      	ldr	r6, [r2, #12]
 8015576:	4623      	mov	r3, r4
 8015578:	460a      	mov	r2, r1
 801557a:	4601      	mov	r1, r0
 801557c:	46b4      	mov	ip, r6
 801557e:	4628      	mov	r0, r5
 8015580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015584:	4760      	bx	ip
 8015586:	4b04      	ldr	r3, [pc, #16]	; (8015598 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8015588:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801558c:	4a03      	ldr	r2, [pc, #12]	; (801559c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801558e:	4804      	ldr	r0, [pc, #16]	; (80155a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8015590:	f005 fd74 	bl	801b07c <__assert_func>
 8015594:	bd70      	pop	{r4, r5, r6, pc}
 8015596:	bf00      	nop
 8015598:	0801f128 	.word	0x0801f128
 801559c:	0801f7a7 	.word	0x0801f7a7
 80155a0:	0801ef51 	.word	0x0801ef51

080155a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80155a4:	b158      	cbz	r0, 80155be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80155a6:	2902      	cmp	r1, #2
 80155a8:	d00f      	beq.n	80155ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80155aa:	2903      	cmp	r1, #3
 80155ac:	d010      	beq.n	80155d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80155ae:	2901      	cmp	r1, #1
 80155b0:	d101      	bne.n	80155b6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80155b2:	2001      	movs	r0, #1
 80155b4:	4770      	bx	lr
 80155b6:	4b08      	ldr	r3, [pc, #32]	; (80155d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80155b8:	8819      	ldrh	r1, [r3, #0]
 80155ba:	4248      	negs	r0, r1
 80155bc:	4770      	bx	lr
 80155be:	2902      	cmp	r1, #2
 80155c0:	d006      	beq.n	80155d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80155c2:	2903      	cmp	r1, #3
 80155c4:	d0f7      	beq.n	80155b6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80155c6:	2901      	cmp	r1, #1
 80155c8:	d1f3      	bne.n	80155b2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80155ca:	4b03      	ldr	r3, [pc, #12]	; (80155d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80155cc:	8818      	ldrh	r0, [r3, #0]
 80155ce:	4770      	bx	lr
 80155d0:	f04f 30ff 	mov.w	r0, #4294967295
 80155d4:	4770      	bx	lr
 80155d6:	bf00      	nop
 80155d8:	24006bb6 	.word	0x24006bb6

080155dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80155dc:	b170      	cbz	r0, 80155fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80155de:	2902      	cmp	r1, #2
 80155e0:	d012      	beq.n	8015608 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80155e2:	2903      	cmp	r1, #3
 80155e4:	d006      	beq.n	80155f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80155e6:	2901      	cmp	r1, #1
 80155e8:	d001      	beq.n	80155ee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80155ea:	2001      	movs	r0, #1
 80155ec:	4770      	bx	lr
 80155ee:	4b08      	ldr	r3, [pc, #32]	; (8015610 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80155f0:	8818      	ldrh	r0, [r3, #0]
 80155f2:	4770      	bx	lr
 80155f4:	4b06      	ldr	r3, [pc, #24]	; (8015610 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80155f6:	8818      	ldrh	r0, [r3, #0]
 80155f8:	4240      	negs	r0, r0
 80155fa:	4770      	bx	lr
 80155fc:	2902      	cmp	r1, #2
 80155fe:	d0f9      	beq.n	80155f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8015600:	2903      	cmp	r1, #3
 8015602:	d0f2      	beq.n	80155ea <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8015604:	2901      	cmp	r1, #1
 8015606:	d1f2      	bne.n	80155ee <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8015608:	f04f 30ff 	mov.w	r0, #4294967295
 801560c:	4770      	bx	lr
 801560e:	bf00      	nop
 8015610:	24006bb6 	.word	0x24006bb6

08015614 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8015614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015618:	b097      	sub	sp, #92	; 0x5c
 801561a:	910b      	str	r1, [sp, #44]	; 0x2c
 801561c:	a912      	add	r1, sp, #72	; 0x48
 801561e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8015622:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8015626:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801562a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801562e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8015632:	e881 000c 	stmia.w	r1, {r2, r3}
 8015636:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801563a:	930a      	str	r3, [sp, #40]	; 0x28
 801563c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8015640:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8015644:	9311      	str	r3, [sp, #68]	; 0x44
 8015646:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801564a:	798d      	ldrb	r5, [r1, #6]
 801564c:	930c      	str	r3, [sp, #48]	; 0x30
 801564e:	7b4b      	ldrb	r3, [r1, #13]
 8015650:	0158      	lsls	r0, r3, #5
 8015652:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015656:	4328      	orrs	r0, r5
 8015658:	9009      	str	r0, [sp, #36]	; 0x24
 801565a:	f000 817d 	beq.w	8015958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801565e:	011b      	lsls	r3, r3, #4
 8015660:	79c8      	ldrb	r0, [r1, #7]
 8015662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015666:	4303      	orrs	r3, r0
 8015668:	930e      	str	r3, [sp, #56]	; 0x38
 801566a:	f000 8175 	beq.w	8015958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801566e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8015672:	b29b      	uxth	r3, r3
 8015674:	2f00      	cmp	r7, #0
 8015676:	f000 8117 	beq.w	80158a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801567a:	1aff      	subs	r7, r7, r3
 801567c:	b2bf      	uxth	r7, r7
 801567e:	043b      	lsls	r3, r7, #16
 8015680:	d502      	bpl.n	8015688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8015682:	1bf6      	subs	r6, r6, r7
 8015684:	2700      	movs	r7, #0
 8015686:	b236      	sxth	r6, r6
 8015688:	f9b2 1000 	ldrsh.w	r1, [r2]
 801568c:	a812      	add	r0, sp, #72	; 0x48
 801568e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8015692:	428e      	cmp	r6, r1
 8015694:	b28b      	uxth	r3, r1
 8015696:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801569a:	bfbf      	itttt	lt
 801569c:	18ff      	addlt	r7, r7, r3
 801569e:	1bbe      	sublt	r6, r7, r6
 80156a0:	b2b7      	uxthlt	r7, r6
 80156a2:	460e      	movlt	r6, r1
 80156a4:	8891      	ldrh	r1, [r2, #4]
 80156a6:	440b      	add	r3, r1
 80156a8:	4631      	mov	r1, r6
 80156aa:	b21b      	sxth	r3, r3
 80156ac:	9310      	str	r3, [sp, #64]	; 0x40
 80156ae:	88d3      	ldrh	r3, [r2, #6]
 80156b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156b2:	449a      	add	sl, r3
 80156b4:	fa0f f38a 	sxth.w	r3, sl
 80156b8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80156bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80156be:	4bb6      	ldr	r3, [pc, #728]	; (8015998 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80156c0:	f893 b000 	ldrb.w	fp, [r3]
 80156c4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80156c8:	f1dc 0300 	rsbs	r3, ip, #0
 80156cc:	eb43 030c 	adc.w	r3, r3, ip
 80156d0:	930d      	str	r3, [sp, #52]	; 0x34
 80156d2:	464b      	mov	r3, r9
 80156d4:	f7f9 fbae 	bl	800ee34 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80156d8:	4631      	mov	r1, r6
 80156da:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80156de:	464b      	mov	r3, r9
 80156e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156e2:	a812      	add	r0, sp, #72	; 0x48
 80156e4:	f7f9 fbbe 	bl	800ee64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80156e8:	a916      	add	r1, sp, #88	; 0x58
 80156ea:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80156ee:	a815      	add	r0, sp, #84	; 0x54
 80156f0:	f7f9 fcda 	bl	800f0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80156f4:	f1b9 0f00 	cmp.w	r9, #0
 80156f8:	f040 80d9 	bne.w	80158ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 80156fc:	f1bb 0f01 	cmp.w	fp, #1
 8015700:	f040 80dd 	bne.w	80158be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8015704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015706:	b153      	cbz	r3, 801571e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8015708:	2508      	movs	r5, #8
 801570a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801570c:	fb95 f3f8 	sdiv	r3, r5, r8
 8015710:	1e5d      	subs	r5, r3, #1
 8015712:	4415      	add	r5, r2
 8015714:	fb95 f5f3 	sdiv	r5, r5, r3
 8015718:	fb15 f503 	smulbb	r5, r5, r3
 801571c:	b2ad      	uxth	r5, r5
 801571e:	b907      	cbnz	r7, 8015722 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8015720:	b16c      	cbz	r4, 801573e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8015722:	fb04 7305 	mla	r3, r4, r5, r7
 8015726:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015728:	ebaa 0a04 	sub.w	sl, sl, r4
 801572c:	fb08 f303 	mul.w	r3, r8, r3
 8015730:	fa1f fa8a 	uxth.w	sl, sl
 8015734:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8015738:	f003 0407 	and.w	r4, r3, #7
 801573c:	9226      	str	r2, [sp, #152]	; 0x98
 801573e:	4649      	mov	r1, r9
 8015740:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015742:	f7ff ff2f 	bl	80155a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8015746:	4649      	mov	r1, r9
 8015748:	4683      	mov	fp, r0
 801574a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801574c:	f7ff ff46 	bl	80155dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8015750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015754:	4681      	mov	r9, r0
 8015756:	1a9b      	subs	r3, r3, r2
 8015758:	459a      	cmp	sl, r3
 801575a:	bfa8      	it	ge
 801575c:	469a      	movge	sl, r3
 801575e:	f1ba 0f00 	cmp.w	sl, #0
 8015762:	f340 80f9 	ble.w	8015958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8015766:	1bf6      	subs	r6, r6, r7
 8015768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801576a:	1b9e      	subs	r6, r3, r6
 801576c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801576e:	429e      	cmp	r6, r3
 8015770:	bfd4      	ite	le
 8015772:	ebc7 0706 	rsble	r7, r7, r6
 8015776:	ebc7 0703 	rsbgt	r7, r7, r3
 801577a:	2f00      	cmp	r7, #0
 801577c:	f340 80ec 	ble.w	8015958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8015780:	1bed      	subs	r5, r5, r7
 8015782:	fb08 f305 	mul.w	r3, r8, r5
 8015786:	930d      	str	r3, [sp, #52]	; 0x34
 8015788:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801578a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801578e:	930e      	str	r3, [sp, #56]	; 0x38
 8015790:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015792:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015796:	930f      	str	r3, [sp, #60]	; 0x3c
 8015798:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801579a:	b2db      	uxtb	r3, r3
 801579c:	9310      	str	r3, [sp, #64]	; 0x40
 801579e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	f040 80de 	bne.w	8015962 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80157a6:	4b7d      	ldr	r3, [pc, #500]	; (801599c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80157a8:	6818      	ldr	r0, [r3, #0]
 80157aa:	6803      	ldr	r3, [r0, #0]
 80157ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157ae:	4798      	blx	r3
 80157b0:	2301      	movs	r3, #1
 80157b2:	4a7b      	ldr	r2, [pc, #492]	; (80159a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80157b4:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80157b8:	fb07 9b1b 	mls	fp, r7, fp, r9
 80157bc:	fa03 f308 	lsl.w	r3, r3, r8
 80157c0:	8811      	ldrh	r1, [r2, #0]
 80157c2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80157c6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80157ca:	3b01      	subs	r3, #1
 80157cc:	fb06 bb07 	mla	fp, r6, r7, fp
 80157d0:	b2db      	uxtb	r3, r3
 80157d2:	930a      	str	r3, [sp, #40]	; 0x28
 80157d4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80157d8:	fb01 2303 	mla	r3, r1, r3, r2
 80157dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80157e0:	18c3      	adds	r3, r0, r3
 80157e2:	9309      	str	r3, [sp, #36]	; 0x24
 80157e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80157e6:	781a      	ldrb	r2, [r3, #0]
 80157e8:	4122      	asrs	r2, r4
 80157ea:	b2d2      	uxtb	r2, r2
 80157ec:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80157f0:	f0c0 80d8 	bcc.w	80159a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80157f4:	46be      	mov	lr, r7
 80157f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157f8:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80157fc:	f0c0 80ba 	bcc.w	8015974 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8015800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015802:	4013      	ands	r3, r2
 8015804:	d041      	beq.n	801588a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8015806:	20ff      	movs	r0, #255	; 0xff
 8015808:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801580a:	fb90 f5f5 	sdiv	r5, r0, r5
 801580e:	436b      	muls	r3, r5
 8015810:	2bfe      	cmp	r3, #254	; 0xfe
 8015812:	dd03      	ble.n	801581c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8015814:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015816:	4285      	cmp	r5, r0
 8015818:	f000 80a5 	beq.w	8015966 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801581c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801581e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015820:	fb15 f303 	smulbb	r3, r5, r3
 8015824:	b29b      	uxth	r3, r3
 8015826:	1c5d      	adds	r5, r3, #1
 8015828:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801582c:	780d      	ldrb	r5, [r1, #0]
 801582e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015832:	fa1f fc83 	uxth.w	ip, r3
 8015836:	43db      	mvns	r3, r3
 8015838:	fb10 f90c 	smulbb	r9, r0, ip
 801583c:	b2db      	uxtb	r3, r3
 801583e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015840:	fb05 9503 	mla	r5, r5, r3, r9
 8015844:	b2ad      	uxth	r5, r5
 8015846:	f105 0901 	add.w	r9, r5, #1
 801584a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801584e:	fb10 f90c 	smulbb	r9, r0, ip
 8015852:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015854:	122d      	asrs	r5, r5, #8
 8015856:	fb10 fc0c 	smulbb	ip, r0, ip
 801585a:	700d      	strb	r5, [r1, #0]
 801585c:	784d      	ldrb	r5, [r1, #1]
 801585e:	fb05 9503 	mla	r5, r5, r3, r9
 8015862:	b2ad      	uxth	r5, r5
 8015864:	f105 0901 	add.w	r9, r5, #1
 8015868:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801586c:	122d      	asrs	r5, r5, #8
 801586e:	704d      	strb	r5, [r1, #1]
 8015870:	788d      	ldrb	r5, [r1, #2]
 8015872:	fb05 cc03 	mla	ip, r5, r3, ip
 8015876:	fa1f fc8c 	uxth.w	ip, ip
 801587a:	f10c 0301 	add.w	r3, ip, #1
 801587e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015882:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015886:	f881 c002 	strb.w	ip, [r1, #2]
 801588a:	4444      	add	r4, r8
 801588c:	4431      	add	r1, r6
 801588e:	b2a4      	uxth	r4, r4
 8015890:	2c07      	cmp	r4, #7
 8015892:	bf89      	itett	hi
 8015894:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8015896:	fa42 f208 	asrls.w	r2, r2, r8
 801589a:	2400      	movhi	r4, #0
 801589c:	785a      	ldrbhi	r2, [r3, #1]
 801589e:	bf8a      	itet	hi
 80158a0:	3301      	addhi	r3, #1
 80158a2:	b2d2      	uxtbls	r2, r2
 80158a4:	9326      	strhi	r3, [sp, #152]	; 0x98
 80158a6:	e7a7      	b.n	80157f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 80158a8:	441e      	add	r6, r3
 80158aa:	b236      	sxth	r6, r6
 80158ac:	e6ec      	b.n	8015688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80158ae:	f1b9 0f01 	cmp.w	r9, #1
 80158b2:	f47f af27 	bne.w	8015704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80158b6:	f1bb 0f01 	cmp.w	fp, #1
 80158ba:	f47f af23 	bne.w	8015704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80158be:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 801599c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80158c2:	f8db 0000 	ldr.w	r0, [fp]
 80158c6:	6803      	ldr	r3, [r0, #0]
 80158c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158ca:	4798      	blx	r3
 80158cc:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80158d0:	465a      	mov	r2, fp
 80158d2:	d006      	beq.n	80158e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80158d4:	f1b8 0f04 	cmp.w	r8, #4
 80158d8:	d141      	bne.n	801595e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 80158da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158dc:	3300      	adds	r3, #0
 80158de:	bf18      	it	ne
 80158e0:	2301      	movne	r3, #1
 80158e2:	0580      	lsls	r0, r0, #22
 80158e4:	d567      	bpl.n	80159b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80158e6:	f1b8 0f08 	cmp.w	r8, #8
 80158ea:	d164      	bne.n	80159b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	bf0c      	ite	eq
 80158f0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80158f4:	f44f 7180 	movne.w	r1, #256	; 0x100
 80158f8:	2f00      	cmp	r7, #0
 80158fa:	f47f af03 	bne.w	8015704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80158fe:	2c00      	cmp	r4, #0
 8015900:	f47f af00 	bne.w	8015704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015906:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015908:	18f3      	adds	r3, r6, r3
 801590a:	4283      	cmp	r3, r0
 801590c:	f73f aefa 	bgt.w	8015704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015910:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015914:	4403      	add	r3, r0
 8015916:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015918:	4283      	cmp	r3, r0
 801591a:	f73f aef3 	bgt.w	8015704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801591e:	f1b8 0f08 	cmp.w	r8, #8
 8015922:	6810      	ldr	r0, [r2, #0]
 8015924:	f04f 0600 	mov.w	r6, #0
 8015928:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801592c:	bf18      	it	ne
 801592e:	3501      	addne	r5, #1
 8015930:	6804      	ldr	r4, [r0, #0]
 8015932:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015936:	bf18      	it	ne
 8015938:	f025 0501 	bicne.w	r5, r5, #1
 801593c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8015940:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015942:	bf18      	it	ne
 8015944:	b2ad      	uxthne	r5, r5
 8015946:	9104      	str	r1, [sp, #16]
 8015948:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801594a:	e9cd 5a00 	strd	r5, sl, [sp]
 801594e:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8015952:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015954:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8015956:	47a0      	blx	r4
 8015958:	b017      	add	sp, #92	; 0x5c
 801595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801595e:	2300      	movs	r3, #0
 8015960:	e7bf      	b.n	80158e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8015962:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015964:	e724      	b.n	80157b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8015966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015968:	700b      	strb	r3, [r1, #0]
 801596a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801596c:	704b      	strb	r3, [r1, #1]
 801596e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015970:	708b      	strb	r3, [r1, #2]
 8015972:	e78a      	b.n	801588a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8015974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015976:	b153      	cbz	r3, 801598e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8015978:	441c      	add	r4, r3
 801597a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801597c:	b2a4      	uxth	r4, r4
 801597e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8015982:	f004 0407 	and.w	r4, r4, #7
 8015986:	781a      	ldrb	r2, [r3, #0]
 8015988:	9326      	str	r3, [sp, #152]	; 0x98
 801598a:	4122      	asrs	r2, r4
 801598c:	b2d2      	uxtb	r2, r2
 801598e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015990:	445b      	add	r3, fp
 8015992:	9309      	str	r3, [sp, #36]	; 0x24
 8015994:	e72a      	b.n	80157ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8015996:	bf00      	nop
 8015998:	24006bb4 	.word	0x24006bb4
 801599c:	24006bbc 	.word	0x24006bbc
 80159a0:	24006bb6 	.word	0x24006bb6
 80159a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d1d6      	bne.n	8015958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80159aa:	4b06      	ldr	r3, [pc, #24]	; (80159c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80159ac:	6818      	ldr	r0, [r3, #0]
 80159ae:	6803      	ldr	r3, [r0, #0]
 80159b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b2:	4798      	blx	r3
 80159b4:	e7d0      	b.n	8015958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	f43f aea4 	beq.w	8015704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80159bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80159c0:	e79a      	b.n	80158f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 80159c2:	bf00      	nop
 80159c4:	24006bbc 	.word	0x24006bbc

080159c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80159c8:	b538      	push	{r3, r4, r5, lr}
 80159ca:	4c15      	ldr	r4, [pc, #84]	; (8015a20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80159cc:	4605      	mov	r5, r0
 80159ce:	7823      	ldrb	r3, [r4, #0]
 80159d0:	f3bf 8f5b 	dmb	ish
 80159d4:	07da      	lsls	r2, r3, #31
 80159d6:	d40b      	bmi.n	80159f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80159d8:	4620      	mov	r0, r4
 80159da:	f005 fa3b 	bl	801ae54 <__cxa_guard_acquire>
 80159de:	b138      	cbz	r0, 80159f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80159e0:	4620      	mov	r0, r4
 80159e2:	f005 fa43 	bl	801ae6c <__cxa_guard_release>
 80159e6:	4a0f      	ldr	r2, [pc, #60]	; (8015a24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80159e8:	490f      	ldr	r1, [pc, #60]	; (8015a28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80159ea:	4810      	ldr	r0, [pc, #64]	; (8015a2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80159ec:	f005 fa2b 	bl	801ae46 <__aeabi_atexit>
 80159f0:	4c0f      	ldr	r4, [pc, #60]	; (8015a30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80159f2:	7823      	ldrb	r3, [r4, #0]
 80159f4:	f3bf 8f5b 	dmb	ish
 80159f8:	07db      	lsls	r3, r3, #31
 80159fa:	d40b      	bmi.n	8015a14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80159fc:	4620      	mov	r0, r4
 80159fe:	f005 fa29 	bl	801ae54 <__cxa_guard_acquire>
 8015a02:	b138      	cbz	r0, 8015a14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8015a04:	4620      	mov	r0, r4
 8015a06:	f005 fa31 	bl	801ae6c <__cxa_guard_release>
 8015a0a:	4a06      	ldr	r2, [pc, #24]	; (8015a24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8015a0c:	4909      	ldr	r1, [pc, #36]	; (8015a34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8015a0e:	480a      	ldr	r0, [pc, #40]	; (8015a38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8015a10:	f005 fa19 	bl	801ae46 <__aeabi_atexit>
 8015a14:	4b05      	ldr	r3, [pc, #20]	; (8015a2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8015a16:	612b      	str	r3, [r5, #16]
 8015a18:	4b07      	ldr	r3, [pc, #28]	; (8015a38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8015a1a:	616b      	str	r3, [r5, #20]
 8015a1c:	bd38      	pop	{r3, r4, r5, pc}
 8015a1e:	bf00      	nop
 8015a20:	24006c88 	.word	0x24006c88
 8015a24:	24000000 	.word	0x24000000
 8015a28:	08014441 	.word	0x08014441
 8015a2c:	240000a8 	.word	0x240000a8
 8015a30:	24006c8c 	.word	0x24006c8c
 8015a34:	0801443f 	.word	0x0801443f
 8015a38:	240000ac 	.word	0x240000ac

08015a3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8015a3c:	b538      	push	{r3, r4, r5, lr}
 8015a3e:	4c15      	ldr	r4, [pc, #84]	; (8015a94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8015a40:	4605      	mov	r5, r0
 8015a42:	7823      	ldrb	r3, [r4, #0]
 8015a44:	f3bf 8f5b 	dmb	ish
 8015a48:	07da      	lsls	r2, r3, #31
 8015a4a:	d40b      	bmi.n	8015a64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	f005 fa01 	bl	801ae54 <__cxa_guard_acquire>
 8015a52:	b138      	cbz	r0, 8015a64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015a54:	4620      	mov	r0, r4
 8015a56:	f005 fa09 	bl	801ae6c <__cxa_guard_release>
 8015a5a:	4a0f      	ldr	r2, [pc, #60]	; (8015a98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8015a5c:	490f      	ldr	r1, [pc, #60]	; (8015a9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8015a5e:	4810      	ldr	r0, [pc, #64]	; (8015aa0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8015a60:	f005 f9f1 	bl	801ae46 <__aeabi_atexit>
 8015a64:	4c0f      	ldr	r4, [pc, #60]	; (8015aa4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8015a66:	7823      	ldrb	r3, [r4, #0]
 8015a68:	f3bf 8f5b 	dmb	ish
 8015a6c:	07db      	lsls	r3, r3, #31
 8015a6e:	d40b      	bmi.n	8015a88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8015a70:	4620      	mov	r0, r4
 8015a72:	f005 f9ef 	bl	801ae54 <__cxa_guard_acquire>
 8015a76:	b138      	cbz	r0, 8015a88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8015a78:	4620      	mov	r0, r4
 8015a7a:	f005 f9f7 	bl	801ae6c <__cxa_guard_release>
 8015a7e:	4a06      	ldr	r2, [pc, #24]	; (8015a98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8015a80:	4909      	ldr	r1, [pc, #36]	; (8015aa8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8015a82:	480a      	ldr	r0, [pc, #40]	; (8015aac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8015a84:	f005 f9df 	bl	801ae46 <__aeabi_atexit>
 8015a88:	4b05      	ldr	r3, [pc, #20]	; (8015aa0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8015a8a:	60ab      	str	r3, [r5, #8]
 8015a8c:	4b07      	ldr	r3, [pc, #28]	; (8015aac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8015a8e:	60eb      	str	r3, [r5, #12]
 8015a90:	bd38      	pop	{r3, r4, r5, pc}
 8015a92:	bf00      	nop
 8015a94:	24006c68 	.word	0x24006c68
 8015a98:	24000000 	.word	0x24000000
 8015a9c:	08014445 	.word	0x08014445
 8015aa0:	24000088 	.word	0x24000088
 8015aa4:	24006c6c 	.word	0x24006c6c
 8015aa8:	08014443 	.word	0x08014443
 8015aac:	2400008c 	.word	0x2400008c

08015ab0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8015ab0:	b510      	push	{r4, lr}
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	f7ff ff88 	bl	80159c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8015ab8:	4620      	mov	r0, r4
 8015aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015abe:	f7ff bfbd 	b.w	8015a3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08015ac4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8015ac4:	b538      	push	{r3, r4, r5, lr}
 8015ac6:	4c15      	ldr	r4, [pc, #84]	; (8015b1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8015ac8:	4605      	mov	r5, r0
 8015aca:	7823      	ldrb	r3, [r4, #0]
 8015acc:	f3bf 8f5b 	dmb	ish
 8015ad0:	07da      	lsls	r2, r3, #31
 8015ad2:	d40b      	bmi.n	8015aec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	f005 f9bd 	bl	801ae54 <__cxa_guard_acquire>
 8015ada:	b138      	cbz	r0, 8015aec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8015adc:	4620      	mov	r0, r4
 8015ade:	f005 f9c5 	bl	801ae6c <__cxa_guard_release>
 8015ae2:	4a0f      	ldr	r2, [pc, #60]	; (8015b20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8015ae4:	490f      	ldr	r1, [pc, #60]	; (8015b24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8015ae6:	4810      	ldr	r0, [pc, #64]	; (8015b28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8015ae8:	f005 f9ad 	bl	801ae46 <__aeabi_atexit>
 8015aec:	4c0f      	ldr	r4, [pc, #60]	; (8015b2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8015aee:	7823      	ldrb	r3, [r4, #0]
 8015af0:	f3bf 8f5b 	dmb	ish
 8015af4:	07db      	lsls	r3, r3, #31
 8015af6:	d40b      	bmi.n	8015b10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8015af8:	4620      	mov	r0, r4
 8015afa:	f005 f9ab 	bl	801ae54 <__cxa_guard_acquire>
 8015afe:	b138      	cbz	r0, 8015b10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8015b00:	4620      	mov	r0, r4
 8015b02:	f005 f9b3 	bl	801ae6c <__cxa_guard_release>
 8015b06:	4a06      	ldr	r2, [pc, #24]	; (8015b20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8015b08:	4909      	ldr	r1, [pc, #36]	; (8015b30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8015b0a:	480a      	ldr	r0, [pc, #40]	; (8015b34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015b0c:	f005 f99b 	bl	801ae46 <__aeabi_atexit>
 8015b10:	4b05      	ldr	r3, [pc, #20]	; (8015b28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8015b12:	622b      	str	r3, [r5, #32]
 8015b14:	4b07      	ldr	r3, [pc, #28]	; (8015b34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015b16:	626b      	str	r3, [r5, #36]	; 0x24
 8015b18:	bd38      	pop	{r3, r4, r5, pc}
 8015b1a:	bf00      	nop
 8015b1c:	24006c90 	.word	0x24006c90
 8015b20:	24000000 	.word	0x24000000
 8015b24:	08014439 	.word	0x08014439
 8015b28:	240000b0 	.word	0x240000b0
 8015b2c:	24006c94 	.word	0x24006c94
 8015b30:	08014437 	.word	0x08014437
 8015b34:	240000b4 	.word	0x240000b4

08015b38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8015b38:	b538      	push	{r3, r4, r5, lr}
 8015b3a:	4c15      	ldr	r4, [pc, #84]	; (8015b90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8015b3c:	4605      	mov	r5, r0
 8015b3e:	7823      	ldrb	r3, [r4, #0]
 8015b40:	f3bf 8f5b 	dmb	ish
 8015b44:	07da      	lsls	r2, r3, #31
 8015b46:	d40b      	bmi.n	8015b60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8015b48:	4620      	mov	r0, r4
 8015b4a:	f005 f983 	bl	801ae54 <__cxa_guard_acquire>
 8015b4e:	b138      	cbz	r0, 8015b60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8015b50:	4620      	mov	r0, r4
 8015b52:	f005 f98b 	bl	801ae6c <__cxa_guard_release>
 8015b56:	4a0f      	ldr	r2, [pc, #60]	; (8015b94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015b58:	490f      	ldr	r1, [pc, #60]	; (8015b98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8015b5a:	4810      	ldr	r0, [pc, #64]	; (8015b9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015b5c:	f005 f973 	bl	801ae46 <__aeabi_atexit>
 8015b60:	4c0f      	ldr	r4, [pc, #60]	; (8015ba0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8015b62:	7823      	ldrb	r3, [r4, #0]
 8015b64:	f3bf 8f5b 	dmb	ish
 8015b68:	07db      	lsls	r3, r3, #31
 8015b6a:	d40b      	bmi.n	8015b84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	f005 f971 	bl	801ae54 <__cxa_guard_acquire>
 8015b72:	b138      	cbz	r0, 8015b84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015b74:	4620      	mov	r0, r4
 8015b76:	f005 f979 	bl	801ae6c <__cxa_guard_release>
 8015b7a:	4a06      	ldr	r2, [pc, #24]	; (8015b94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015b7c:	4909      	ldr	r1, [pc, #36]	; (8015ba4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8015b7e:	480a      	ldr	r0, [pc, #40]	; (8015ba8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8015b80:	f005 f961 	bl	801ae46 <__aeabi_atexit>
 8015b84:	4b05      	ldr	r3, [pc, #20]	; (8015b9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015b86:	61ab      	str	r3, [r5, #24]
 8015b88:	4b07      	ldr	r3, [pc, #28]	; (8015ba8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8015b8a:	61eb      	str	r3, [r5, #28]
 8015b8c:	bd38      	pop	{r3, r4, r5, pc}
 8015b8e:	bf00      	nop
 8015b90:	24006c70 	.word	0x24006c70
 8015b94:	24000000 	.word	0x24000000
 8015b98:	0801443d 	.word	0x0801443d
 8015b9c:	24000090 	.word	0x24000090
 8015ba0:	24006c74 	.word	0x24006c74
 8015ba4:	0801443b 	.word	0x0801443b
 8015ba8:	24000094 	.word	0x24000094

08015bac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8015bac:	b510      	push	{r4, lr}
 8015bae:	4604      	mov	r4, r0
 8015bb0:	f7ff ff88 	bl	8015ac4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bba:	f7ff bfbd 	b.w	8015b38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08015bc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8015bc0:	b538      	push	{r3, r4, r5, lr}
 8015bc2:	4c15      	ldr	r4, [pc, #84]	; (8015c18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8015bc4:	4605      	mov	r5, r0
 8015bc6:	7823      	ldrb	r3, [r4, #0]
 8015bc8:	f3bf 8f5b 	dmb	ish
 8015bcc:	07da      	lsls	r2, r3, #31
 8015bce:	d40b      	bmi.n	8015be8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8015bd0:	4620      	mov	r0, r4
 8015bd2:	f005 f93f 	bl	801ae54 <__cxa_guard_acquire>
 8015bd6:	b138      	cbz	r0, 8015be8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8015bd8:	4620      	mov	r0, r4
 8015bda:	f005 f947 	bl	801ae6c <__cxa_guard_release>
 8015bde:	4a0f      	ldr	r2, [pc, #60]	; (8015c1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8015be0:	490f      	ldr	r1, [pc, #60]	; (8015c20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8015be2:	4810      	ldr	r0, [pc, #64]	; (8015c24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8015be4:	f005 f92f 	bl	801ae46 <__aeabi_atexit>
 8015be8:	4c0f      	ldr	r4, [pc, #60]	; (8015c28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8015bea:	7823      	ldrb	r3, [r4, #0]
 8015bec:	f3bf 8f5b 	dmb	ish
 8015bf0:	07db      	lsls	r3, r3, #31
 8015bf2:	d40b      	bmi.n	8015c0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8015bf4:	4620      	mov	r0, r4
 8015bf6:	f005 f92d 	bl	801ae54 <__cxa_guard_acquire>
 8015bfa:	b138      	cbz	r0, 8015c0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	f005 f935 	bl	801ae6c <__cxa_guard_release>
 8015c02:	4a06      	ldr	r2, [pc, #24]	; (8015c1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8015c04:	4909      	ldr	r1, [pc, #36]	; (8015c2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8015c06:	480a      	ldr	r0, [pc, #40]	; (8015c30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8015c08:	f005 f91d 	bl	801ae46 <__aeabi_atexit>
 8015c0c:	4b05      	ldr	r3, [pc, #20]	; (8015c24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8015c0e:	632b      	str	r3, [r5, #48]	; 0x30
 8015c10:	4b07      	ldr	r3, [pc, #28]	; (8015c30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8015c12:	636b      	str	r3, [r5, #52]	; 0x34
 8015c14:	bd38      	pop	{r3, r4, r5, pc}
 8015c16:	bf00      	nop
 8015c18:	24006c78 	.word	0x24006c78
 8015c1c:	24000000 	.word	0x24000000
 8015c20:	08014431 	.word	0x08014431
 8015c24:	24000098 	.word	0x24000098
 8015c28:	24006c7c 	.word	0x24006c7c
 8015c2c:	0801442f 	.word	0x0801442f
 8015c30:	2400009c 	.word	0x2400009c

08015c34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8015c34:	b538      	push	{r3, r4, r5, lr}
 8015c36:	4c15      	ldr	r4, [pc, #84]	; (8015c8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8015c38:	4605      	mov	r5, r0
 8015c3a:	7823      	ldrb	r3, [r4, #0]
 8015c3c:	f3bf 8f5b 	dmb	ish
 8015c40:	07da      	lsls	r2, r3, #31
 8015c42:	d40b      	bmi.n	8015c5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8015c44:	4620      	mov	r0, r4
 8015c46:	f005 f905 	bl	801ae54 <__cxa_guard_acquire>
 8015c4a:	b138      	cbz	r0, 8015c5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	f005 f90d 	bl	801ae6c <__cxa_guard_release>
 8015c52:	4a0f      	ldr	r2, [pc, #60]	; (8015c90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8015c54:	490f      	ldr	r1, [pc, #60]	; (8015c94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8015c56:	4810      	ldr	r0, [pc, #64]	; (8015c98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8015c58:	f005 f8f5 	bl	801ae46 <__aeabi_atexit>
 8015c5c:	4c0f      	ldr	r4, [pc, #60]	; (8015c9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8015c5e:	7823      	ldrb	r3, [r4, #0]
 8015c60:	f3bf 8f5b 	dmb	ish
 8015c64:	07db      	lsls	r3, r3, #31
 8015c66:	d40b      	bmi.n	8015c80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8015c68:	4620      	mov	r0, r4
 8015c6a:	f005 f8f3 	bl	801ae54 <__cxa_guard_acquire>
 8015c6e:	b138      	cbz	r0, 8015c80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8015c70:	4620      	mov	r0, r4
 8015c72:	f005 f8fb 	bl	801ae6c <__cxa_guard_release>
 8015c76:	4a06      	ldr	r2, [pc, #24]	; (8015c90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8015c78:	4909      	ldr	r1, [pc, #36]	; (8015ca0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8015c7a:	480a      	ldr	r0, [pc, #40]	; (8015ca4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8015c7c:	f005 f8e3 	bl	801ae46 <__aeabi_atexit>
 8015c80:	4b05      	ldr	r3, [pc, #20]	; (8015c98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8015c82:	62ab      	str	r3, [r5, #40]	; 0x28
 8015c84:	4b07      	ldr	r3, [pc, #28]	; (8015ca4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8015c86:	62eb      	str	r3, [r5, #44]	; 0x2c
 8015c88:	bd38      	pop	{r3, r4, r5, pc}
 8015c8a:	bf00      	nop
 8015c8c:	24006c50 	.word	0x24006c50
 8015c90:	24000000 	.word	0x24000000
 8015c94:	08014435 	.word	0x08014435
 8015c98:	24000070 	.word	0x24000070
 8015c9c:	24006c54 	.word	0x24006c54
 8015ca0:	08014433 	.word	0x08014433
 8015ca4:	24000074 	.word	0x24000074

08015ca8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8015ca8:	b510      	push	{r4, lr}
 8015caa:	4604      	mov	r4, r0
 8015cac:	f7ff ff88 	bl	8015bc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cb6:	f7ff bfbd 	b.w	8015c34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08015cbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8015cbc:	b538      	push	{r3, r4, r5, lr}
 8015cbe:	4c15      	ldr	r4, [pc, #84]	; (8015d14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8015cc0:	4605      	mov	r5, r0
 8015cc2:	7823      	ldrb	r3, [r4, #0]
 8015cc4:	f3bf 8f5b 	dmb	ish
 8015cc8:	07da      	lsls	r2, r3, #31
 8015cca:	d40b      	bmi.n	8015ce4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f005 f8c1 	bl	801ae54 <__cxa_guard_acquire>
 8015cd2:	b138      	cbz	r0, 8015ce4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	f005 f8c9 	bl	801ae6c <__cxa_guard_release>
 8015cda:	4a0f      	ldr	r2, [pc, #60]	; (8015d18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8015cdc:	490f      	ldr	r1, [pc, #60]	; (8015d1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8015cde:	4810      	ldr	r0, [pc, #64]	; (8015d20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8015ce0:	f005 f8b1 	bl	801ae46 <__aeabi_atexit>
 8015ce4:	4c0f      	ldr	r4, [pc, #60]	; (8015d24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8015ce6:	7823      	ldrb	r3, [r4, #0]
 8015ce8:	f3bf 8f5b 	dmb	ish
 8015cec:	07db      	lsls	r3, r3, #31
 8015cee:	d40b      	bmi.n	8015d08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8015cf0:	4620      	mov	r0, r4
 8015cf2:	f005 f8af 	bl	801ae54 <__cxa_guard_acquire>
 8015cf6:	b138      	cbz	r0, 8015d08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	f005 f8b7 	bl	801ae6c <__cxa_guard_release>
 8015cfe:	4a06      	ldr	r2, [pc, #24]	; (8015d18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8015d00:	4909      	ldr	r1, [pc, #36]	; (8015d28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8015d02:	480a      	ldr	r0, [pc, #40]	; (8015d2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8015d04:	f005 f89f 	bl	801ae46 <__aeabi_atexit>
 8015d08:	4b05      	ldr	r3, [pc, #20]	; (8015d20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8015d0a:	642b      	str	r3, [r5, #64]	; 0x40
 8015d0c:	4b07      	ldr	r3, [pc, #28]	; (8015d2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8015d0e:	646b      	str	r3, [r5, #68]	; 0x44
 8015d10:	bd38      	pop	{r3, r4, r5, pc}
 8015d12:	bf00      	nop
 8015d14:	24006c80 	.word	0x24006c80
 8015d18:	24000000 	.word	0x24000000
 8015d1c:	08014429 	.word	0x08014429
 8015d20:	240000a0 	.word	0x240000a0
 8015d24:	24006c84 	.word	0x24006c84
 8015d28:	08014427 	.word	0x08014427
 8015d2c:	240000a4 	.word	0x240000a4

08015d30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4c15      	ldr	r4, [pc, #84]	; (8015d88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8015d34:	4605      	mov	r5, r0
 8015d36:	7823      	ldrb	r3, [r4, #0]
 8015d38:	f3bf 8f5b 	dmb	ish
 8015d3c:	07da      	lsls	r2, r3, #31
 8015d3e:	d40b      	bmi.n	8015d58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015d40:	4620      	mov	r0, r4
 8015d42:	f005 f887 	bl	801ae54 <__cxa_guard_acquire>
 8015d46:	b138      	cbz	r0, 8015d58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015d48:	4620      	mov	r0, r4
 8015d4a:	f005 f88f 	bl	801ae6c <__cxa_guard_release>
 8015d4e:	4a0f      	ldr	r2, [pc, #60]	; (8015d8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015d50:	490f      	ldr	r1, [pc, #60]	; (8015d90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8015d52:	4810      	ldr	r0, [pc, #64]	; (8015d94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8015d54:	f005 f877 	bl	801ae46 <__aeabi_atexit>
 8015d58:	4c0f      	ldr	r4, [pc, #60]	; (8015d98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8015d5a:	7823      	ldrb	r3, [r4, #0]
 8015d5c:	f3bf 8f5b 	dmb	ish
 8015d60:	07db      	lsls	r3, r3, #31
 8015d62:	d40b      	bmi.n	8015d7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8015d64:	4620      	mov	r0, r4
 8015d66:	f005 f875 	bl	801ae54 <__cxa_guard_acquire>
 8015d6a:	b138      	cbz	r0, 8015d7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	f005 f87d 	bl	801ae6c <__cxa_guard_release>
 8015d72:	4a06      	ldr	r2, [pc, #24]	; (8015d8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015d74:	4909      	ldr	r1, [pc, #36]	; (8015d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8015d76:	480a      	ldr	r0, [pc, #40]	; (8015da0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015d78:	f005 f865 	bl	801ae46 <__aeabi_atexit>
 8015d7c:	4b05      	ldr	r3, [pc, #20]	; (8015d94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8015d7e:	63ab      	str	r3, [r5, #56]	; 0x38
 8015d80:	4b07      	ldr	r3, [pc, #28]	; (8015da0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015d82:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015d84:	bd38      	pop	{r3, r4, r5, pc}
 8015d86:	bf00      	nop
 8015d88:	24006c60 	.word	0x24006c60
 8015d8c:	24000000 	.word	0x24000000
 8015d90:	0801442d 	.word	0x0801442d
 8015d94:	24000080 	.word	0x24000080
 8015d98:	24006c64 	.word	0x24006c64
 8015d9c:	0801442b 	.word	0x0801442b
 8015da0:	24000084 	.word	0x24000084

08015da4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8015da4:	b510      	push	{r4, lr}
 8015da6:	4604      	mov	r4, r0
 8015da8:	f7ff ff88 	bl	8015cbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8015dac:	4620      	mov	r0, r4
 8015dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015db2:	f7ff bfbd 	b.w	8015d30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08015db8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8015db8:	b538      	push	{r3, r4, r5, lr}
 8015dba:	4c15      	ldr	r4, [pc, #84]	; (8015e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8015dbc:	4605      	mov	r5, r0
 8015dbe:	7823      	ldrb	r3, [r4, #0]
 8015dc0:	f3bf 8f5b 	dmb	ish
 8015dc4:	07da      	lsls	r2, r3, #31
 8015dc6:	d40b      	bmi.n	8015de0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f005 f843 	bl	801ae54 <__cxa_guard_acquire>
 8015dce:	b138      	cbz	r0, 8015de0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8015dd0:	4620      	mov	r0, r4
 8015dd2:	f005 f84b 	bl	801ae6c <__cxa_guard_release>
 8015dd6:	4a0f      	ldr	r2, [pc, #60]	; (8015e14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8015dd8:	490f      	ldr	r1, [pc, #60]	; (8015e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8015dda:	4810      	ldr	r0, [pc, #64]	; (8015e1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8015ddc:	f005 f833 	bl	801ae46 <__aeabi_atexit>
 8015de0:	4c0f      	ldr	r4, [pc, #60]	; (8015e20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8015de2:	7823      	ldrb	r3, [r4, #0]
 8015de4:	f3bf 8f5b 	dmb	ish
 8015de8:	07db      	lsls	r3, r3, #31
 8015dea:	d40b      	bmi.n	8015e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8015dec:	4620      	mov	r0, r4
 8015dee:	f005 f831 	bl	801ae54 <__cxa_guard_acquire>
 8015df2:	b138      	cbz	r0, 8015e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8015df4:	4620      	mov	r0, r4
 8015df6:	f005 f839 	bl	801ae6c <__cxa_guard_release>
 8015dfa:	4a06      	ldr	r2, [pc, #24]	; (8015e14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8015dfc:	4909      	ldr	r1, [pc, #36]	; (8015e24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8015dfe:	480a      	ldr	r0, [pc, #40]	; (8015e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8015e00:	f005 f821 	bl	801ae46 <__aeabi_atexit>
 8015e04:	4b05      	ldr	r3, [pc, #20]	; (8015e1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8015e06:	652b      	str	r3, [r5, #80]	; 0x50
 8015e08:	4b07      	ldr	r3, [pc, #28]	; (8015e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8015e0a:	656b      	str	r3, [r5, #84]	; 0x54
 8015e0c:	bd38      	pop	{r3, r4, r5, pc}
 8015e0e:	bf00      	nop
 8015e10:	24006c58 	.word	0x24006c58
 8015e14:	24000000 	.word	0x24000000
 8015e18:	08014421 	.word	0x08014421
 8015e1c:	24000078 	.word	0x24000078
 8015e20:	24006c5c 	.word	0x24006c5c
 8015e24:	0801441f 	.word	0x0801441f
 8015e28:	2400007c 	.word	0x2400007c

08015e2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8015e2c:	b538      	push	{r3, r4, r5, lr}
 8015e2e:	4c15      	ldr	r4, [pc, #84]	; (8015e84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8015e30:	4605      	mov	r5, r0
 8015e32:	7823      	ldrb	r3, [r4, #0]
 8015e34:	f3bf 8f5b 	dmb	ish
 8015e38:	07da      	lsls	r2, r3, #31
 8015e3a:	d40b      	bmi.n	8015e54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f005 f809 	bl	801ae54 <__cxa_guard_acquire>
 8015e42:	b138      	cbz	r0, 8015e54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015e44:	4620      	mov	r0, r4
 8015e46:	f005 f811 	bl	801ae6c <__cxa_guard_release>
 8015e4a:	4a0f      	ldr	r2, [pc, #60]	; (8015e88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015e4c:	490f      	ldr	r1, [pc, #60]	; (8015e8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8015e4e:	4810      	ldr	r0, [pc, #64]	; (8015e90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015e50:	f004 fff9 	bl	801ae46 <__aeabi_atexit>
 8015e54:	4c0f      	ldr	r4, [pc, #60]	; (8015e94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8015e56:	7823      	ldrb	r3, [r4, #0]
 8015e58:	f3bf 8f5b 	dmb	ish
 8015e5c:	07db      	lsls	r3, r3, #31
 8015e5e:	d40b      	bmi.n	8015e78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015e60:	4620      	mov	r0, r4
 8015e62:	f004 fff7 	bl	801ae54 <__cxa_guard_acquire>
 8015e66:	b138      	cbz	r0, 8015e78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f004 ffff 	bl	801ae6c <__cxa_guard_release>
 8015e6e:	4a06      	ldr	r2, [pc, #24]	; (8015e88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015e70:	4909      	ldr	r1, [pc, #36]	; (8015e98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8015e72:	480a      	ldr	r0, [pc, #40]	; (8015e9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015e74:	f004 ffe7 	bl	801ae46 <__aeabi_atexit>
 8015e78:	4b05      	ldr	r3, [pc, #20]	; (8015e90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015e7a:	64ab      	str	r3, [r5, #72]	; 0x48
 8015e7c:	4b07      	ldr	r3, [pc, #28]	; (8015e9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015e7e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015e80:	bd38      	pop	{r3, r4, r5, pc}
 8015e82:	bf00      	nop
 8015e84:	24006c48 	.word	0x24006c48
 8015e88:	24000000 	.word	0x24000000
 8015e8c:	08014425 	.word	0x08014425
 8015e90:	24000068 	.word	0x24000068
 8015e94:	24006c4c 	.word	0x24006c4c
 8015e98:	08014423 	.word	0x08014423
 8015e9c:	2400006c 	.word	0x2400006c

08015ea0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8015ea0:	b510      	push	{r4, lr}
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	f7ff ff88 	bl	8015db8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015eae:	f7ff bfbd 	b.w	8015e2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08015eb2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8015eb2:	b510      	push	{r4, lr}
 8015eb4:	4604      	mov	r4, r0
 8015eb6:	f7ff fff3 	bl	8015ea0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8015eba:	4620      	mov	r0, r4
 8015ebc:	f7ff ff72 	bl	8015da4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	f7ff fe73 	bl	8015bac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	f7ff fdf2 	bl	8015ab0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8015ecc:	4620      	mov	r0, r4
 8015ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ed2:	f7ff bee9 	b.w	8015ca8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08015ed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8015ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015edc:	b087      	sub	sp, #28
 8015ede:	7888      	ldrb	r0, [r1, #2]
 8015ee0:	4616      	mov	r6, r2
 8015ee2:	9001      	str	r0, [sp, #4]
 8015ee4:	7848      	ldrb	r0, [r1, #1]
 8015ee6:	9100      	str	r1, [sp, #0]
 8015ee8:	9002      	str	r0, [sp, #8]
 8015eea:	7808      	ldrb	r0, [r1, #0]
 8015eec:	9901      	ldr	r1, [sp, #4]
 8015eee:	9003      	str	r0, [sp, #12]
 8015ef0:	9802      	ldr	r0, [sp, #8]
 8015ef2:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8015ef6:	0200      	lsls	r0, r0, #8
 8015ef8:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8015efc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8015f00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8015f04:	9903      	ldr	r1, [sp, #12]
 8015f06:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8015f0a:	4308      	orrs	r0, r1
 8015f0c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015f10:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8015f14:	9005      	str	r0, [sp, #20]
 8015f16:	fb05 ca0e 	mla	sl, r5, lr, ip
 8015f1a:	2d00      	cmp	r5, #0
 8015f1c:	eb06 080a 	add.w	r8, r6, sl
 8015f20:	db4a      	blt.n	8015fb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8015f22:	45a9      	cmp	r9, r5
 8015f24:	dd48      	ble.n	8015fb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8015f26:	f1bc 0f00 	cmp.w	ip, #0
 8015f2a:	db43      	blt.n	8015fb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8015f2c:	45e6      	cmp	lr, ip
 8015f2e:	dd41      	ble.n	8015fb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8015f30:	f816 600a 	ldrb.w	r6, [r6, sl]
 8015f34:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015f38:	441e      	add	r6, r3
 8015f3a:	f11c 0001 	adds.w	r0, ip, #1
 8015f3e:	d43e      	bmi.n	8015fbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8015f40:	4586      	cmp	lr, r0
 8015f42:	dd3c      	ble.n	8015fbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8015f44:	2a00      	cmp	r2, #0
 8015f46:	d03a      	beq.n	8015fbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8015f48:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015f4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015f50:	4418      	add	r0, r3
 8015f52:	3501      	adds	r5, #1
 8015f54:	d437      	bmi.n	8015fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8015f56:	45a9      	cmp	r9, r5
 8015f58:	dd35      	ble.n	8015fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8015f5a:	b3a4      	cbz	r4, 8015fc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8015f5c:	f1bc 0f00 	cmp.w	ip, #0
 8015f60:	db2f      	blt.n	8015fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8015f62:	45e6      	cmp	lr, ip
 8015f64:	dd2d      	ble.n	8015fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8015f66:	f818 500e 	ldrb.w	r5, [r8, lr]
 8015f6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f6e:	441d      	add	r5, r3
 8015f70:	f11c 0c01 	adds.w	ip, ip, #1
 8015f74:	d42a      	bmi.n	8015fcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8015f76:	45e6      	cmp	lr, ip
 8015f78:	dd28      	ble.n	8015fcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8015f7a:	b33a      	cbz	r2, 8015fcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8015f7c:	44c6      	add	lr, r8
 8015f7e:	f89e c001 	ldrb.w	ip, [lr, #1]
 8015f82:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015f86:	4463      	add	r3, ip
 8015f88:	ea6f 0c07 	mvn.w	ip, r7
 8015f8c:	2a0f      	cmp	r2, #15
 8015f8e:	f896 a000 	ldrb.w	sl, [r6]
 8015f92:	fa5f fc8c 	uxtb.w	ip, ip
 8015f96:	f890 b000 	ldrb.w	fp, [r0]
 8015f9a:	f895 9000 	ldrb.w	r9, [r5]
 8015f9e:	7819      	ldrb	r1, [r3, #0]
 8015fa0:	d801      	bhi.n	8015fa6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8015fa2:	2c0f      	cmp	r4, #15
 8015fa4:	d914      	bls.n	8015fd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8015fa6:	4b40      	ldr	r3, [pc, #256]	; (80160a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8015fa8:	f240 1157 	movw	r1, #343	; 0x157
 8015fac:	4a3f      	ldr	r2, [pc, #252]	; (80160ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8015fae:	4840      	ldr	r0, [pc, #256]	; (80160b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8015fb0:	f005 f864 	bl	801b07c <__assert_func>
 8015fb4:	ae05      	add	r6, sp, #20
 8015fb6:	e7c0      	b.n	8015f3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8015fb8:	a805      	add	r0, sp, #20
 8015fba:	4606      	mov	r6, r0
 8015fbc:	e7c9      	b.n	8015f52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8015fbe:	a805      	add	r0, sp, #20
 8015fc0:	e7c7      	b.n	8015f52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8015fc2:	ad05      	add	r5, sp, #20
 8015fc4:	e7d4      	b.n	8015f70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8015fc6:	ab05      	add	r3, sp, #20
 8015fc8:	461d      	mov	r5, r3
 8015fca:	e7dd      	b.n	8015f88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8015fcc:	ab05      	add	r3, sp, #20
 8015fce:	e7db      	b.n	8015f88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8015fd0:	b292      	uxth	r2, r2
 8015fd2:	b2a4      	uxth	r4, r4
 8015fd4:	fa1f fc8c 	uxth.w	ip, ip
 8015fd8:	fb02 f804 	mul.w	r8, r2, r4
 8015fdc:	0112      	lsls	r2, r2, #4
 8015fde:	b2bf      	uxth	r7, r7
 8015fe0:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8015fe4:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8015fe8:	eba2 0208 	sub.w	r2, r2, r8
 8015fec:	b2a4      	uxth	r4, r4
 8015fee:	b292      	uxth	r2, r2
 8015ff0:	ebae 0e04 	sub.w	lr, lr, r4
 8015ff4:	fb02 fb0b 	mul.w	fp, r2, fp
 8015ff8:	fa1f fe8e 	uxth.w	lr, lr
 8015ffc:	fb0e ba0a 	mla	sl, lr, sl, fp
 8016000:	fb04 aa09 	mla	sl, r4, r9, sl
 8016004:	fb08 aa01 	mla	sl, r8, r1, sl
 8016008:	9903      	ldr	r1, [sp, #12]
 801600a:	fb11 f90c 	smulbb	r9, r1, ip
 801600e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8016012:	9900      	ldr	r1, [sp, #0]
 8016014:	fb0a 9a07 	mla	sl, sl, r7, r9
 8016018:	fa1f fa8a 	uxth.w	sl, sl
 801601c:	f10a 0901 	add.w	r9, sl, #1
 8016020:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8016024:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016028:	f881 a000 	strb.w	sl, [r1]
 801602c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016030:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016034:	fb02 fa0a 	mul.w	sl, r2, sl
 8016038:	9902      	ldr	r1, [sp, #8]
 801603a:	fb0e aa09 	mla	sl, lr, r9, sl
 801603e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8016042:	fb04 aa09 	mla	sl, r4, r9, sl
 8016046:	f893 9001 	ldrb.w	r9, [r3, #1]
 801604a:	fb08 a909 	mla	r9, r8, r9, sl
 801604e:	fb11 fa0c 	smulbb	sl, r1, ip
 8016052:	9900      	ldr	r1, [sp, #0]
 8016054:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016058:	fb09 a907 	mla	r9, r9, r7, sl
 801605c:	fa1f f989 	uxth.w	r9, r9
 8016060:	f109 0a01 	add.w	sl, r9, #1
 8016064:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016068:	ea4f 2929 	mov.w	r9, r9, asr #8
 801606c:	f881 9001 	strb.w	r9, [r1, #1]
 8016070:	7880      	ldrb	r0, [r0, #2]
 8016072:	78b6      	ldrb	r6, [r6, #2]
 8016074:	4342      	muls	r2, r0
 8016076:	78a8      	ldrb	r0, [r5, #2]
 8016078:	789b      	ldrb	r3, [r3, #2]
 801607a:	fb0e 2206 	mla	r2, lr, r6, r2
 801607e:	fb04 2400 	mla	r4, r4, r0, r2
 8016082:	fb08 4803 	mla	r8, r8, r3, r4
 8016086:	9b01      	ldr	r3, [sp, #4]
 8016088:	fb13 fc0c 	smulbb	ip, r3, ip
 801608c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016090:	fb08 c707 	mla	r7, r8, r7, ip
 8016094:	b2bf      	uxth	r7, r7
 8016096:	f107 0c01 	add.w	ip, r7, #1
 801609a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801609e:	123f      	asrs	r7, r7, #8
 80160a0:	708f      	strb	r7, [r1, #2]
 80160a2:	b007      	add	sp, #28
 80160a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a8:	0801f117 	.word	0x0801f117
 80160ac:	0801f5ce 	.word	0x0801f5ce
 80160b0:	0801f19f 	.word	0x0801f19f

080160b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80160b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b8:	ed2d 8b08 	vpush	{d8-d11}
 80160bc:	b093      	sub	sp, #76	; 0x4c
 80160be:	eeb0 aa40 	vmov.f32	s20, s0
 80160c2:	eef0 9a60 	vmov.f32	s19, s1
 80160c6:	9210      	str	r2, [sp, #64]	; 0x40
 80160c8:	eeb0 9a41 	vmov.f32	s18, s2
 80160cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80160ce:	eeb0 8a62 	vmov.f32	s16, s5
 80160d2:	9309      	str	r3, [sp, #36]	; 0x24
 80160d4:	eef0 8a43 	vmov.f32	s17, s6
 80160d8:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 80160dc:	eef0 ba44 	vmov.f32	s23, s8
 80160e0:	9011      	str	r0, [sp, #68]	; 0x44
 80160e2:	eeb0 ba64 	vmov.f32	s22, s9
 80160e6:	930e      	str	r3, [sp, #56]	; 0x38
 80160e8:	eef0 aa45 	vmov.f32	s21, s10
 80160ec:	6850      	ldr	r0, [r2, #4]
 80160ee:	910d      	str	r1, [sp, #52]	; 0x34
 80160f0:	6812      	ldr	r2, [r2, #0]
 80160f2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80160f6:	fb00 1303 	mla	r3, r0, r3, r1
 80160fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80160fe:	18d3      	adds	r3, r2, r3
 8016100:	930a      	str	r3, [sp, #40]	; 0x28
 8016102:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	930c      	str	r3, [sp, #48]	; 0x30
 8016108:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801610a:	685c      	ldr	r4, [r3, #4]
 801610c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801610e:	3404      	adds	r4, #4
 8016110:	43db      	mvns	r3, r3
 8016112:	b2db      	uxtb	r3, r3
 8016114:	930b      	str	r3, [sp, #44]	; 0x2c
 8016116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016118:	2b00      	cmp	r3, #0
 801611a:	dc03      	bgt.n	8016124 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801611c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801611e:	2b00      	cmp	r3, #0
 8016120:	f340 8250 	ble.w	80165c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8016124:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016126:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801612a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801612e:	1e48      	subs	r0, r1, #1
 8016130:	1e55      	subs	r5, r2, #1
 8016132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016134:	2b00      	cmp	r3, #0
 8016136:	f340 80ee 	ble.w	8016316 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801613a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801613c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801613e:	1436      	asrs	r6, r6, #16
 8016140:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016144:	d406      	bmi.n	8016154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016146:	4286      	cmp	r6, r0
 8016148:	da04      	bge.n	8016154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801614a:	2b00      	cmp	r3, #0
 801614c:	db02      	blt.n	8016154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801614e:	42ab      	cmp	r3, r5
 8016150:	f2c0 80e2 	blt.w	8016318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8016154:	3601      	adds	r6, #1
 8016156:	f100 80cf 	bmi.w	80162f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801615a:	42b1      	cmp	r1, r6
 801615c:	f2c0 80cc 	blt.w	80162f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016160:	3301      	adds	r3, #1
 8016162:	f100 80c9 	bmi.w	80162f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8016166:	429a      	cmp	r2, r3
 8016168:	f2c0 80c6 	blt.w	80162f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801616c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8016170:	f1bb 0f00 	cmp.w	fp, #0
 8016174:	f340 80f1 	ble.w	801635a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016178:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801617a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801617c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801617e:	141d      	asrs	r5, r3, #16
 8016180:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016182:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016186:	68c7      	ldr	r7, [r0, #12]
 8016188:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801618a:	1418      	asrs	r0, r3, #16
 801618c:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8016190:	6892      	ldr	r2, [r2, #8]
 8016192:	f100 8137 	bmi.w	8016404 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8016196:	f102 3cff 	add.w	ip, r2, #4294967295
 801619a:	4560      	cmp	r0, ip
 801619c:	f280 8132 	bge.w	8016404 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80161a0:	2d00      	cmp	r5, #0
 80161a2:	f2c0 812f 	blt.w	8016404 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80161a6:	f107 3cff 	add.w	ip, r7, #4294967295
 80161aa:	4565      	cmp	r5, ip
 80161ac:	f280 812a 	bge.w	8016404 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80161b0:	b212      	sxth	r2, r2
 80161b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80161b4:	fb05 0002 	mla	r0, r5, r2, r0
 80161b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161ba:	f817 c000 	ldrb.w	ip, [r7, r0]
 80161be:	4405      	add	r5, r0
 80161c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80161c4:	eb04 0e0c 	add.w	lr, r4, ip
 80161c8:	f1b8 0f00 	cmp.w	r8, #0
 80161cc:	f000 810c 	beq.w	80163e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80161d0:	786f      	ldrb	r7, [r5, #1]
 80161d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80161d6:	4427      	add	r7, r4
 80161d8:	2900      	cmp	r1, #0
 80161da:	f000 810d 	beq.w	80163f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80161de:	18a8      	adds	r0, r5, r2
 80161e0:	5caa      	ldrb	r2, [r5, r2]
 80161e2:	7840      	ldrb	r0, [r0, #1]
 80161e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80161e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80161ec:	4422      	add	r2, r4
 80161ee:	4420      	add	r0, r4
 80161f0:	fa1f f388 	uxth.w	r3, r8
 80161f4:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80161f8:	b289      	uxth	r1, r1
 80161fa:	f897 c000 	ldrb.w	ip, [r7]
 80161fe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016202:	fb03 f901 	mul.w	r9, r3, r1
 8016206:	011b      	lsls	r3, r3, #4
 8016208:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801620c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8016210:	eba3 0309 	sub.w	r3, r3, r9
 8016214:	b289      	uxth	r1, r1
 8016216:	b29b      	uxth	r3, r3
 8016218:	eba8 0801 	sub.w	r8, r8, r1
 801621c:	fb03 fc0c 	mul.w	ip, r3, ip
 8016220:	fa1f f888 	uxth.w	r8, r8
 8016224:	930f      	str	r3, [sp, #60]	; 0x3c
 8016226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016228:	fb08 cc0a 	mla	ip, r8, sl, ip
 801622c:	f892 a000 	ldrb.w	sl, [r2]
 8016230:	fb01 cc0a 	mla	ip, r1, sl, ip
 8016234:	f890 a000 	ldrb.w	sl, [r0]
 8016238:	fb09 cc0a 	mla	ip, r9, sl, ip
 801623c:	f896 a000 	ldrb.w	sl, [r6]
 8016240:	fb1a fa03 	smulbb	sl, sl, r3
 8016244:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801624a:	fb0c ac05 	mla	ip, ip, r5, sl
 801624e:	fa1f fc8c 	uxth.w	ip, ip
 8016252:	f10c 0a01 	add.w	sl, ip, #1
 8016256:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801625a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801625e:	f886 a000 	strb.w	sl, [r6]
 8016262:	f897 c001 	ldrb.w	ip, [r7, #1]
 8016266:	f89e a001 	ldrb.w	sl, [lr, #1]
 801626a:	fb03 fc0c 	mul.w	ip, r3, ip
 801626e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016270:	fb08 cc0a 	mla	ip, r8, sl, ip
 8016274:	f892 a001 	ldrb.w	sl, [r2, #1]
 8016278:	fb01 cc0a 	mla	ip, r1, sl, ip
 801627c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016280:	fb09 cc0a 	mla	ip, r9, sl, ip
 8016284:	f896 a001 	ldrb.w	sl, [r6, #1]
 8016288:	fb1a fa03 	smulbb	sl, sl, r3
 801628c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016292:	fb0c ac05 	mla	ip, ip, r5, sl
 8016296:	fa1f fc8c 	uxth.w	ip, ip
 801629a:	f10c 0a01 	add.w	sl, ip, #1
 801629e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80162a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80162a6:	f886 c001 	strb.w	ip, [r6, #1]
 80162aa:	78bf      	ldrb	r7, [r7, #2]
 80162ac:	f89e c002 	ldrb.w	ip, [lr, #2]
 80162b0:	437b      	muls	r3, r7
 80162b2:	fb08 330c 	mla	r3, r8, ip, r3
 80162b6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80162ba:	7882      	ldrb	r2, [r0, #2]
 80162bc:	fb01 310c 	mla	r1, r1, ip, r3
 80162c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162c2:	fb09 1902 	mla	r9, r9, r2, r1
 80162c6:	78b1      	ldrb	r1, [r6, #2]
 80162c8:	fb11 f103 	smulbb	r1, r1, r3
 80162cc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80162d0:	fb09 1505 	mla	r5, r9, r5, r1
 80162d4:	b2ad      	uxth	r5, r5
 80162d6:	1c6b      	adds	r3, r5, #1
 80162d8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80162dc:	122d      	asrs	r5, r5, #8
 80162de:	70b5      	strb	r5, [r6, #2]
 80162e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80162e2:	3603      	adds	r6, #3
 80162e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80162e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80162ea:	4413      	add	r3, r2
 80162ec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80162ee:	9325      	str	r3, [sp, #148]	; 0x94
 80162f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80162f2:	4413      	add	r3, r2
 80162f4:	9326      	str	r3, [sp, #152]	; 0x98
 80162f6:	e73b      	b.n	8016170 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80162f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80162fa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80162fc:	4433      	add	r3, r6
 80162fe:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8016300:	9325      	str	r3, [sp, #148]	; 0x94
 8016302:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016304:	4433      	add	r3, r6
 8016306:	9326      	str	r3, [sp, #152]	; 0x98
 8016308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801630a:	3b01      	subs	r3, #1
 801630c:	9309      	str	r3, [sp, #36]	; 0x24
 801630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016310:	3303      	adds	r3, #3
 8016312:	930a      	str	r3, [sp, #40]	; 0x28
 8016314:	e70d      	b.n	8016132 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016316:	d028      	beq.n	801636a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8016318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801631a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801631c:	3b01      	subs	r3, #1
 801631e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8016320:	fb00 5003 	mla	r0, r0, r3, r5
 8016324:	1400      	asrs	r0, r0, #16
 8016326:	f53f af21 	bmi.w	801616c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801632a:	3901      	subs	r1, #1
 801632c:	4288      	cmp	r0, r1
 801632e:	f6bf af1d 	bge.w	801616c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016332:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016334:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016336:	fb01 0303 	mla	r3, r1, r3, r0
 801633a:	141b      	asrs	r3, r3, #16
 801633c:	f53f af16 	bmi.w	801616c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016340:	3a01      	subs	r2, #1
 8016342:	4293      	cmp	r3, r2
 8016344:	f6bf af12 	bge.w	801616c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8016348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801634a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801634e:	1cdf      	adds	r7, r3, #3
 8016350:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8016354:	f1b9 0f00 	cmp.w	r9, #0
 8016358:	dc73      	bgt.n	8016442 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801635c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801635e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016362:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016366:	441a      	add	r2, r3
 8016368:	920a      	str	r2, [sp, #40]	; 0x28
 801636a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801636c:	2b00      	cmp	r3, #0
 801636e:	f340 8129 	ble.w	80165c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8016372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016376:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016378:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801637c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016380:	eef0 6a48 	vmov.f32	s13, s16
 8016384:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016388:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801638c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016390:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8016394:	eef0 6a68 	vmov.f32	s13, s17
 8016398:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801639c:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80163a0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80163a4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80163a8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80163ac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80163b0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80163b4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80163b8:	ee18 2a10 	vmov	r2, s16
 80163bc:	eeb0 8a47 	vmov.f32	s16, s14
 80163c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80163c4:	ee18 2a90 	vmov	r2, s17
 80163c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80163ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80163cc:	eef0 8a67 	vmov.f32	s17, s15
 80163d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80163d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80163d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163da:	3b01      	subs	r3, #1
 80163dc:	930d      	str	r3, [sp, #52]	; 0x34
 80163de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80163e0:	bf08      	it	eq
 80163e2:	4613      	moveq	r3, r2
 80163e4:	9309      	str	r3, [sp, #36]	; 0x24
 80163e6:	e696      	b.n	8016116 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163e8:	b149      	cbz	r1, 80163fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80163ea:	5caa      	ldrb	r2, [r5, r2]
 80163ec:	4670      	mov	r0, lr
 80163ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80163f2:	4422      	add	r2, r4
 80163f4:	4677      	mov	r7, lr
 80163f6:	e6fb      	b.n	80161f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80163f8:	4670      	mov	r0, lr
 80163fa:	4672      	mov	r2, lr
 80163fc:	e6f8      	b.n	80161f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80163fe:	4670      	mov	r0, lr
 8016400:	4672      	mov	r2, lr
 8016402:	e7f7      	b.n	80163f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8016404:	f110 0c01 	adds.w	ip, r0, #1
 8016408:	f53f af6a 	bmi.w	80162e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801640c:	4562      	cmp	r2, ip
 801640e:	f6ff af67 	blt.w	80162e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016412:	f115 0c01 	adds.w	ip, r5, #1
 8016416:	f53f af63 	bmi.w	80162e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801641a:	4567      	cmp	r7, ip
 801641c:	f6ff af60 	blt.w	80162e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016422:	b23f      	sxth	r7, r7
 8016424:	b212      	sxth	r2, r2
 8016426:	9002      	str	r0, [sp, #8]
 8016428:	9701      	str	r7, [sp, #4]
 801642a:	9200      	str	r2, [sp, #0]
 801642c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801642e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016430:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8016434:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8016438:	4623      	mov	r3, r4
 801643a:	4631      	mov	r1, r6
 801643c:	f7ff fd4c 	bl	8015ed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8016440:	e74e      	b.n	80162e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8016442:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016444:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016446:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801644a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801644c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801644e:	1400      	asrs	r0, r0, #16
 8016450:	142d      	asrs	r5, r5, #16
 8016452:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016454:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8016458:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801645c:	fb02 5000 	mla	r0, r2, r0, r5
 8016460:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016462:	f815 e000 	ldrb.w	lr, [r5, r0]
 8016466:	eb05 0c00 	add.w	ip, r5, r0
 801646a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801646e:	eb04 060e 	add.w	r6, r4, lr
 8016472:	2b00      	cmp	r3, #0
 8016474:	f000 8097 	beq.w	80165a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8016478:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801647c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016480:	4425      	add	r5, r4
 8016482:	2900      	cmp	r1, #0
 8016484:	f000 8098 	beq.w	80165b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8016488:	eb0c 0002 	add.w	r0, ip, r2
 801648c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016490:	7840      	ldrb	r0, [r0, #1]
 8016492:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016496:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801649a:	4422      	add	r2, r4
 801649c:	4420      	add	r0, r4
 801649e:	b29b      	uxth	r3, r3
 80164a0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80164a4:	b289      	uxth	r1, r1
 80164a6:	f895 e000 	ldrb.w	lr, [r5]
 80164aa:	3703      	adds	r7, #3
 80164ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80164b0:	fb03 f801 	mul.w	r8, r3, r1
 80164b4:	011b      	lsls	r3, r3, #4
 80164b6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80164ba:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80164be:	eba3 0308 	sub.w	r3, r3, r8
 80164c2:	b289      	uxth	r1, r1
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	ebac 0c01 	sub.w	ip, ip, r1
 80164ca:	fb03 fe0e 	mul.w	lr, r3, lr
 80164ce:	fa1f fc8c 	uxth.w	ip, ip
 80164d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80164d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164d6:	fb0c ee0b 	mla	lr, ip, fp, lr
 80164da:	f892 b000 	ldrb.w	fp, [r2]
 80164de:	fb01 ee0b 	mla	lr, r1, fp, lr
 80164e2:	f890 b000 	ldrb.w	fp, [r0]
 80164e6:	fb08 ee0b 	mla	lr, r8, fp, lr
 80164ea:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80164ee:	fb1b fb03 	smulbb	fp, fp, r3
 80164f2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80164f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164f8:	fb0e be0a 	mla	lr, lr, sl, fp
 80164fc:	fa1f fe8e 	uxth.w	lr, lr
 8016500:	f10e 0b01 	add.w	fp, lr, #1
 8016504:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8016508:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801650c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8016510:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016514:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016518:	fb03 fe0e 	mul.w	lr, r3, lr
 801651c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801651e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016522:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016526:	fb01 ee0b 	mla	lr, r1, fp, lr
 801652a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801652e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8016532:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8016536:	fb1b fb03 	smulbb	fp, fp, r3
 801653a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801653e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016540:	fb0e be0a 	mla	lr, lr, sl, fp
 8016544:	fa1f fe8e 	uxth.w	lr, lr
 8016548:	f10e 0b01 	add.w	fp, lr, #1
 801654c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8016550:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016554:	f807 ec05 	strb.w	lr, [r7, #-5]
 8016558:	78ad      	ldrb	r5, [r5, #2]
 801655a:	78b6      	ldrb	r6, [r6, #2]
 801655c:	436b      	muls	r3, r5
 801655e:	7895      	ldrb	r5, [r2, #2]
 8016560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016562:	fb0c 3306 	mla	r3, ip, r6, r3
 8016566:	fb01 3305 	mla	r3, r1, r5, r3
 801656a:	7885      	ldrb	r5, [r0, #2]
 801656c:	fb08 3805 	mla	r8, r8, r5, r3
 8016570:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8016574:	fb13 f302 	smulbb	r3, r3, r2
 8016578:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801657c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801657e:	fb08 380a 	mla	r8, r8, sl, r3
 8016582:	fa1f f888 	uxth.w	r8, r8
 8016586:	f108 0301 	add.w	r3, r8, #1
 801658a:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801658e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016590:	4413      	add	r3, r2
 8016592:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016594:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016598:	9325      	str	r3, [sp, #148]	; 0x94
 801659a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801659c:	f807 8c04 	strb.w	r8, [r7, #-4]
 80165a0:	4413      	add	r3, r2
 80165a2:	9326      	str	r3, [sp, #152]	; 0x98
 80165a4:	e6d6      	b.n	8016354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80165a6:	b151      	cbz	r1, 80165be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80165a8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80165ac:	4630      	mov	r0, r6
 80165ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80165b2:	4422      	add	r2, r4
 80165b4:	4635      	mov	r5, r6
 80165b6:	e772      	b.n	801649e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80165b8:	4630      	mov	r0, r6
 80165ba:	4632      	mov	r2, r6
 80165bc:	e76f      	b.n	801649e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80165be:	4630      	mov	r0, r6
 80165c0:	4632      	mov	r2, r6
 80165c2:	e7f7      	b.n	80165b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80165c4:	b013      	add	sp, #76	; 0x4c
 80165c6:	ecbd 8b08 	vpop	{d8-d11}
 80165ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080165d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80165d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d4:	784d      	ldrb	r5, [r1, #1]
 80165d6:	f891 9002 	ldrb.w	r9, [r1, #2]
 80165da:	022d      	lsls	r5, r5, #8
 80165dc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80165e0:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80165e4:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80165e8:	f891 9000 	ldrb.w	r9, [r1]
 80165ec:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80165f0:	ea45 0509 	orr.w	r5, r5, r9
 80165f4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80165f8:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80165fc:	9501      	str	r5, [sp, #4]
 80165fe:	fb06 470c 	mla	r7, r6, ip, r4
 8016602:	2e00      	cmp	r6, #0
 8016604:	eb02 0e07 	add.w	lr, r2, r7
 8016608:	db46      	blt.n	8016698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801660a:	45b0      	cmp	r8, r6
 801660c:	dd44      	ble.n	8016698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801660e:	2c00      	cmp	r4, #0
 8016610:	db40      	blt.n	8016694 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8016612:	45a4      	cmp	ip, r4
 8016614:	dd3e      	ble.n	8016694 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8016616:	5dd7      	ldrb	r7, [r2, r7]
 8016618:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801661c:	441f      	add	r7, r3
 801661e:	1c62      	adds	r2, r4, #1
 8016620:	d43d      	bmi.n	801669e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8016622:	4594      	cmp	ip, r2
 8016624:	dd3b      	ble.n	801669e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8016626:	f1ba 0f00 	cmp.w	sl, #0
 801662a:	d038      	beq.n	801669e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801662c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8016630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016634:	441d      	add	r5, r3
 8016636:	3601      	adds	r6, #1
 8016638:	d435      	bmi.n	80166a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801663a:	45b0      	cmp	r8, r6
 801663c:	dd33      	ble.n	80166a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801663e:	b390      	cbz	r0, 80166a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8016640:	2c00      	cmp	r4, #0
 8016642:	db2e      	blt.n	80166a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8016644:	45a4      	cmp	ip, r4
 8016646:	dd2c      	ble.n	80166a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8016648:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801664c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016650:	441e      	add	r6, r3
 8016652:	1c62      	adds	r2, r4, #1
 8016654:	d42a      	bmi.n	80166ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8016656:	4594      	cmp	ip, r2
 8016658:	dd28      	ble.n	80166ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801665a:	f1ba 0f00 	cmp.w	sl, #0
 801665e:	d025      	beq.n	80166ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8016660:	44f4      	add	ip, lr
 8016662:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8016666:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801666a:	4413      	add	r3, r2
 801666c:	f1ba 0f0f 	cmp.w	sl, #15
 8016670:	f897 8000 	ldrb.w	r8, [r7]
 8016674:	f895 9000 	ldrb.w	r9, [r5]
 8016678:	f896 e000 	ldrb.w	lr, [r6]
 801667c:	f893 c000 	ldrb.w	ip, [r3]
 8016680:	d801      	bhi.n	8016686 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8016682:	280f      	cmp	r0, #15
 8016684:	d914      	bls.n	80166b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8016686:	4b29      	ldr	r3, [pc, #164]	; (801672c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8016688:	f240 1157 	movw	r1, #343	; 0x157
 801668c:	4a28      	ldr	r2, [pc, #160]	; (8016730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801668e:	4829      	ldr	r0, [pc, #164]	; (8016734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8016690:	f004 fcf4 	bl	801b07c <__assert_func>
 8016694:	af01      	add	r7, sp, #4
 8016696:	e7c2      	b.n	801661e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8016698:	ad01      	add	r5, sp, #4
 801669a:	462f      	mov	r7, r5
 801669c:	e7cb      	b.n	8016636 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801669e:	ad01      	add	r5, sp, #4
 80166a0:	e7c9      	b.n	8016636 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80166a2:	ae01      	add	r6, sp, #4
 80166a4:	e7d5      	b.n	8016652 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80166a6:	ab01      	add	r3, sp, #4
 80166a8:	461e      	mov	r6, r3
 80166aa:	e7df      	b.n	801666c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80166ac:	ab01      	add	r3, sp, #4
 80166ae:	e7dd      	b.n	801666c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80166b0:	fa1f f48a 	uxth.w	r4, sl
 80166b4:	b280      	uxth	r0, r0
 80166b6:	fb04 fa00 	mul.w	sl, r4, r0
 80166ba:	0124      	lsls	r4, r4, #4
 80166bc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80166c0:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80166c4:	b282      	uxth	r2, r0
 80166c6:	eba4 000a 	sub.w	r0, r4, sl
 80166ca:	ebab 0b02 	sub.w	fp, fp, r2
 80166ce:	b280      	uxth	r0, r0
 80166d0:	fa1f fb8b 	uxth.w	fp, fp
 80166d4:	fb00 f909 	mul.w	r9, r0, r9
 80166d8:	fb0b 9808 	mla	r8, fp, r8, r9
 80166dc:	fb02 8e0e 	mla	lr, r2, lr, r8
 80166e0:	fb0a ec0c 	mla	ip, sl, ip, lr
 80166e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80166e8:	f881 c000 	strb.w	ip, [r1]
 80166ec:	786c      	ldrb	r4, [r5, #1]
 80166ee:	f897 c001 	ldrb.w	ip, [r7, #1]
 80166f2:	4344      	muls	r4, r0
 80166f4:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80166f8:	7874      	ldrb	r4, [r6, #1]
 80166fa:	fb02 cc04 	mla	ip, r2, r4, ip
 80166fe:	785c      	ldrb	r4, [r3, #1]
 8016700:	fb0a c404 	mla	r4, sl, r4, ip
 8016704:	1224      	asrs	r4, r4, #8
 8016706:	704c      	strb	r4, [r1, #1]
 8016708:	78ad      	ldrb	r5, [r5, #2]
 801670a:	78bc      	ldrb	r4, [r7, #2]
 801670c:	4368      	muls	r0, r5
 801670e:	fb0b 0b04 	mla	fp, fp, r4, r0
 8016712:	78b0      	ldrb	r0, [r6, #2]
 8016714:	fb02 b000 	mla	r0, r2, r0, fp
 8016718:	789a      	ldrb	r2, [r3, #2]
 801671a:	fb0a 0a02 	mla	sl, sl, r2, r0
 801671e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016722:	f881 a002 	strb.w	sl, [r1, #2]
 8016726:	b003      	add	sp, #12
 8016728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801672c:	0801f117 	.word	0x0801f117
 8016730:	0801f5ce 	.word	0x0801f5ce
 8016734:	0801f19f 	.word	0x0801f19f

08016738 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801673c:	ed2d 8b0a 	vpush	{d8-d12}
 8016740:	b08d      	sub	sp, #52	; 0x34
 8016742:	eeb0 aa40 	vmov.f32	s20, s0
 8016746:	eef0 9a60 	vmov.f32	s19, s1
 801674a:	900b      	str	r0, [sp, #44]	; 0x2c
 801674c:	eeb0 9a41 	vmov.f32	s18, s2
 8016750:	9306      	str	r3, [sp, #24]
 8016752:	eeb0 8a62 	vmov.f32	s16, s5
 8016756:	eef0 8a43 	vmov.f32	s17, s6
 801675a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801675c:	eeb0 ca44 	vmov.f32	s24, s8
 8016760:	eef0 ba64 	vmov.f32	s23, s9
 8016764:	eeb0 ba45 	vmov.f32	s22, s10
 8016768:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801676c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8016770:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016772:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8016776:	6850      	ldr	r0, [r2, #4]
 8016778:	6812      	ldr	r2, [r2, #0]
 801677a:	fb00 1303 	mla	r3, r0, r3, r1
 801677e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016782:	18d3      	adds	r3, r2, r3
 8016784:	9307      	str	r3, [sp, #28]
 8016786:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	9308      	str	r3, [sp, #32]
 801678c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801678e:	685d      	ldr	r5, [r3, #4]
 8016790:	3504      	adds	r5, #4
 8016792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016794:	2b00      	cmp	r3, #0
 8016796:	dc03      	bgt.n	80167a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801679a:	2b00      	cmp	r3, #0
 801679c:	f340 81e6 	ble.w	8016b6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80167a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80167a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80167a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80167aa:	1e48      	subs	r0, r1, #1
 80167ac:	1e56      	subs	r6, r2, #1
 80167ae:	9b06      	ldr	r3, [sp, #24]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	f340 80bd 	ble.w	8016930 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80167b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80167b8:	1427      	asrs	r7, r4, #16
 80167ba:	ea4f 4323 	mov.w	r3, r3, asr #16
 80167be:	d406      	bmi.n	80167ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80167c0:	4287      	cmp	r7, r0
 80167c2:	da04      	bge.n	80167ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	db02      	blt.n	80167ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80167c8:	42b3      	cmp	r3, r6
 80167ca:	f2c0 80b2 	blt.w	8016932 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80167ce:	3701      	adds	r7, #1
 80167d0:	f100 80a1 	bmi.w	8016916 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80167d4:	42b9      	cmp	r1, r7
 80167d6:	f2c0 809e 	blt.w	8016916 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80167da:	3301      	adds	r3, #1
 80167dc:	f100 809b 	bmi.w	8016916 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80167e0:	429a      	cmp	r2, r3
 80167e2:	f2c0 8098 	blt.w	8016916 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80167e6:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80167ea:	f1bb 0f00 	cmp.w	fp, #0
 80167ee:	f340 80bf 	ble.w	8016970 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80167f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80167f4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80167f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80167f8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80167fc:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8016800:	1420      	asrs	r0, r4, #16
 8016802:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016804:	ea4f 4723 	mov.w	r7, r3, asr #16
 8016808:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801680c:	6892      	ldr	r2, [r2, #8]
 801680e:	f100 8103 	bmi.w	8016a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016812:	f102 3eff 	add.w	lr, r2, #4294967295
 8016816:	4570      	cmp	r0, lr
 8016818:	f280 80fe 	bge.w	8016a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801681c:	2f00      	cmp	r7, #0
 801681e:	f2c0 80fb 	blt.w	8016a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016822:	f10c 3eff 	add.w	lr, ip, #4294967295
 8016826:	4577      	cmp	r7, lr
 8016828:	f280 80f6 	bge.w	8016a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801682c:	b212      	sxth	r2, r2
 801682e:	fb07 0002 	mla	r0, r7, r2, r0
 8016832:	9f08      	ldr	r7, [sp, #32]
 8016834:	f817 8000 	ldrb.w	r8, [r7, r0]
 8016838:	eb07 0e00 	add.w	lr, r7, r0
 801683c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016840:	eb05 0c08 	add.w	ip, r5, r8
 8016844:	2b00      	cmp	r3, #0
 8016846:	f000 80d8 	beq.w	80169fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801684a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801684e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016852:	442f      	add	r7, r5
 8016854:	2900      	cmp	r1, #0
 8016856:	f000 80d9 	beq.w	8016a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801685a:	eb0e 0002 	add.w	r0, lr, r2
 801685e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8016862:	7840      	ldrb	r0, [r0, #1]
 8016864:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016868:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801686c:	442a      	add	r2, r5
 801686e:	4428      	add	r0, r5
 8016870:	b29b      	uxth	r3, r3
 8016872:	f815 a008 	ldrb.w	sl, [r5, r8]
 8016876:	b289      	uxth	r1, r1
 8016878:	f897 8000 	ldrb.w	r8, [r7]
 801687c:	fb03 f901 	mul.w	r9, r3, r1
 8016880:	011b      	lsls	r3, r3, #4
 8016882:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016886:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801688a:	eba3 0309 	sub.w	r3, r3, r9
 801688e:	b289      	uxth	r1, r1
 8016890:	b29b      	uxth	r3, r3
 8016892:	ebae 0e01 	sub.w	lr, lr, r1
 8016896:	fb03 f808 	mul.w	r8, r3, r8
 801689a:	fa1f fe8e 	uxth.w	lr, lr
 801689e:	fb0e 880a 	mla	r8, lr, sl, r8
 80168a2:	f892 a000 	ldrb.w	sl, [r2]
 80168a6:	fb01 880a 	mla	r8, r1, sl, r8
 80168aa:	f890 a000 	ldrb.w	sl, [r0]
 80168ae:	fb09 880a 	mla	r8, r9, sl, r8
 80168b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80168b6:	f886 8000 	strb.w	r8, [r6]
 80168ba:	f897 8001 	ldrb.w	r8, [r7, #1]
 80168be:	f89c a001 	ldrb.w	sl, [ip, #1]
 80168c2:	fb03 f808 	mul.w	r8, r3, r8
 80168c6:	fb0e 880a 	mla	r8, lr, sl, r8
 80168ca:	f892 a001 	ldrb.w	sl, [r2, #1]
 80168ce:	fb01 880a 	mla	r8, r1, sl, r8
 80168d2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80168d6:	fb09 880a 	mla	r8, r9, sl, r8
 80168da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80168de:	f886 8001 	strb.w	r8, [r6, #1]
 80168e2:	78bf      	ldrb	r7, [r7, #2]
 80168e4:	f89c c002 	ldrb.w	ip, [ip, #2]
 80168e8:	437b      	muls	r3, r7
 80168ea:	7892      	ldrb	r2, [r2, #2]
 80168ec:	fb0e 330c 	mla	r3, lr, ip, r3
 80168f0:	fb01 3102 	mla	r1, r1, r2, r3
 80168f4:	7882      	ldrb	r2, [r0, #2]
 80168f6:	fb09 1902 	mla	r9, r9, r2, r1
 80168fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80168fe:	f886 9002 	strb.w	r9, [r6, #2]
 8016902:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016904:	3603      	adds	r6, #3
 8016906:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016908:	f10b 3bff 	add.w	fp, fp, #4294967295
 801690c:	441c      	add	r4, r3
 801690e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016910:	4413      	add	r3, r2
 8016912:	9322      	str	r3, [sp, #136]	; 0x88
 8016914:	e769      	b.n	80167ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016916:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016918:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801691a:	441c      	add	r4, r3
 801691c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801691e:	443b      	add	r3, r7
 8016920:	9322      	str	r3, [sp, #136]	; 0x88
 8016922:	9b06      	ldr	r3, [sp, #24]
 8016924:	3b01      	subs	r3, #1
 8016926:	9306      	str	r3, [sp, #24]
 8016928:	9b07      	ldr	r3, [sp, #28]
 801692a:	3303      	adds	r3, #3
 801692c:	9307      	str	r3, [sp, #28]
 801692e:	e73e      	b.n	80167ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016930:	d026      	beq.n	8016980 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016932:	9b06      	ldr	r3, [sp, #24]
 8016934:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8016936:	3b01      	subs	r3, #1
 8016938:	fb00 4003 	mla	r0, r0, r3, r4
 801693c:	1400      	asrs	r0, r0, #16
 801693e:	f53f af52 	bmi.w	80167e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8016942:	3901      	subs	r1, #1
 8016944:	4288      	cmp	r0, r1
 8016946:	f6bf af4e 	bge.w	80167e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801694a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801694c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801694e:	fb01 0303 	mla	r3, r1, r3, r0
 8016952:	141b      	asrs	r3, r3, #16
 8016954:	f53f af47 	bmi.w	80167e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8016958:	3a01      	subs	r2, #1
 801695a:	4293      	cmp	r3, r2
 801695c:	f6bf af43 	bge.w	80167e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8016960:	9b07      	ldr	r3, [sp, #28]
 8016962:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016966:	f103 0803 	add.w	r8, r3, #3
 801696a:	f1ba 0f00 	cmp.w	sl, #0
 801696e:	dc71      	bgt.n	8016a54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8016970:	9b06      	ldr	r3, [sp, #24]
 8016972:	9a07      	ldr	r2, [sp, #28]
 8016974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016978:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801697c:	441a      	add	r2, r3
 801697e:	9207      	str	r2, [sp, #28]
 8016980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016982:	2b00      	cmp	r3, #0
 8016984:	f340 80f2 	ble.w	8016b6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8016988:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801698c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801698e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8016992:	eef0 6a48 	vmov.f32	s13, s16
 8016996:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801699a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801699e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169a2:	ee16 4a90 	vmov	r4, s13
 80169a6:	eef0 6a68 	vmov.f32	s13, s17
 80169aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169ae:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80169b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80169b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80169ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 80169be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80169c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80169c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80169ca:	ee18 2a10 	vmov	r2, s16
 80169ce:	eeb0 8a47 	vmov.f32	s16, s14
 80169d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80169d6:	ee18 2a90 	vmov	r2, s17
 80169da:	9323      	str	r3, [sp, #140]	; 0x8c
 80169dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169de:	eef0 8a67 	vmov.f32	s17, s15
 80169e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80169e6:	9324      	str	r3, [sp, #144]	; 0x90
 80169e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169ec:	3b01      	subs	r3, #1
 80169ee:	9309      	str	r3, [sp, #36]	; 0x24
 80169f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169f2:	bf08      	it	eq
 80169f4:	4613      	moveq	r3, r2
 80169f6:	9306      	str	r3, [sp, #24]
 80169f8:	e6cb      	b.n	8016792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80169fa:	b151      	cbz	r1, 8016a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80169fc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8016a00:	4660      	mov	r0, ip
 8016a02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016a06:	442a      	add	r2, r5
 8016a08:	4667      	mov	r7, ip
 8016a0a:	e731      	b.n	8016870 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a0c:	4660      	mov	r0, ip
 8016a0e:	4662      	mov	r2, ip
 8016a10:	e72e      	b.n	8016870 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a12:	4660      	mov	r0, ip
 8016a14:	4662      	mov	r2, ip
 8016a16:	e7f7      	b.n	8016a08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8016a18:	f110 0e01 	adds.w	lr, r0, #1
 8016a1c:	f53f af71 	bmi.w	8016902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a20:	4572      	cmp	r2, lr
 8016a22:	f6ff af6e 	blt.w	8016902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a26:	f117 0e01 	adds.w	lr, r7, #1
 8016a2a:	f53f af6a 	bmi.w	8016902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a2e:	45f4      	cmp	ip, lr
 8016a30:	f6ff af67 	blt.w	8016902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a34:	b212      	sxth	r2, r2
 8016a36:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8016a3a:	fa0f f38c 	sxth.w	r3, ip
 8016a3e:	9200      	str	r2, [sp, #0]
 8016a40:	4631      	mov	r1, r6
 8016a42:	9a08      	ldr	r2, [sp, #32]
 8016a44:	9301      	str	r3, [sp, #4]
 8016a46:	462b      	mov	r3, r5
 8016a48:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8016a4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016a4e:	f7ff fdbf 	bl	80165d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8016a52:	e756      	b.n	8016902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016a56:	1426      	asrs	r6, r4, #16
 8016a58:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016a5a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8016a5e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016a62:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016a64:	1400      	asrs	r0, r0, #16
 8016a66:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8016a6a:	fb02 6000 	mla	r0, r2, r0, r6
 8016a6e:	9e08      	ldr	r6, [sp, #32]
 8016a70:	f816 e000 	ldrb.w	lr, [r6, r0]
 8016a74:	eb06 0c00 	add.w	ip, r6, r0
 8016a78:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016a7c:	eb05 070e 	add.w	r7, r5, lr
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d064      	beq.n	8016b4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8016a84:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8016a88:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016a8c:	442e      	add	r6, r5
 8016a8e:	2900      	cmp	r1, #0
 8016a90:	d066      	beq.n	8016b60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8016a92:	eb0c 0002 	add.w	r0, ip, r2
 8016a96:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016a9a:	7840      	ldrb	r0, [r0, #1]
 8016a9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016aa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016aa4:	442a      	add	r2, r5
 8016aa6:	4428      	add	r0, r5
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8016aae:	b289      	uxth	r1, r1
 8016ab0:	f896 e000 	ldrb.w	lr, [r6]
 8016ab4:	f108 0803 	add.w	r8, r8, #3
 8016ab8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016abc:	fb03 f901 	mul.w	r9, r3, r1
 8016ac0:	011b      	lsls	r3, r3, #4
 8016ac2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016ac6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8016aca:	eba3 0309 	sub.w	r3, r3, r9
 8016ace:	b289      	uxth	r1, r1
 8016ad0:	b29b      	uxth	r3, r3
 8016ad2:	ebac 0c01 	sub.w	ip, ip, r1
 8016ad6:	fb03 fe0e 	mul.w	lr, r3, lr
 8016ada:	fa1f fc8c 	uxth.w	ip, ip
 8016ade:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016ae2:	f892 b000 	ldrb.w	fp, [r2]
 8016ae6:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016aea:	f890 b000 	ldrb.w	fp, [r0]
 8016aee:	fb09 ee0b 	mla	lr, r9, fp, lr
 8016af2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016af6:	f808 ec06 	strb.w	lr, [r8, #-6]
 8016afa:	f896 e001 	ldrb.w	lr, [r6, #1]
 8016afe:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016b02:	fb03 fe0e 	mul.w	lr, r3, lr
 8016b06:	fb0c ee0b 	mla	lr, ip, fp, lr
 8016b0a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016b0e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8016b12:	f890 b001 	ldrb.w	fp, [r0, #1]
 8016b16:	fb09 ee0b 	mla	lr, r9, fp, lr
 8016b1a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016b1e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8016b22:	78b6      	ldrb	r6, [r6, #2]
 8016b24:	78bf      	ldrb	r7, [r7, #2]
 8016b26:	4373      	muls	r3, r6
 8016b28:	7896      	ldrb	r6, [r2, #2]
 8016b2a:	7882      	ldrb	r2, [r0, #2]
 8016b2c:	fb0c 3307 	mla	r3, ip, r7, r3
 8016b30:	fb01 3306 	mla	r3, r1, r6, r3
 8016b34:	fb09 3902 	mla	r9, r9, r2, r3
 8016b38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016b3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016b3c:	441c      	add	r4, r3
 8016b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016b40:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b44:	4413      	add	r3, r2
 8016b46:	f808 9c04 	strb.w	r9, [r8, #-4]
 8016b4a:	9322      	str	r3, [sp, #136]	; 0x88
 8016b4c:	e70d      	b.n	801696a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8016b4e:	b151      	cbz	r1, 8016b66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8016b50:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016b54:	4638      	mov	r0, r7
 8016b56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016b5a:	442a      	add	r2, r5
 8016b5c:	463e      	mov	r6, r7
 8016b5e:	e7a3      	b.n	8016aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8016b60:	4638      	mov	r0, r7
 8016b62:	463a      	mov	r2, r7
 8016b64:	e7a0      	b.n	8016aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8016b66:	4638      	mov	r0, r7
 8016b68:	463a      	mov	r2, r7
 8016b6a:	e7f7      	b.n	8016b5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8016b6c:	b00d      	add	sp, #52	; 0x34
 8016b6e:	ecbd 8b0a 	vpop	{d8-d12}
 8016b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016b78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8016b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b7c:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8016b80:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8016b84:	2d00      	cmp	r5, #0
 8016b86:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8016b8a:	fb05 040e 	mla	r4, r5, lr, r0
 8016b8e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8016b92:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8016b96:	eb02 0804 	add.w	r8, r2, r4
 8016b9a:	db40      	blt.n	8016c1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8016b9c:	45a9      	cmp	r9, r5
 8016b9e:	dd3e      	ble.n	8016c1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	db3a      	blt.n	8016c1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8016ba4:	4586      	cmp	lr, r0
 8016ba6:	dd38      	ble.n	8016c1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8016ba8:	5d12      	ldrb	r2, [r2, r4]
 8016baa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016bae:	1c42      	adds	r2, r0, #1
 8016bb0:	d438      	bmi.n	8016c24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8016bb2:	4596      	cmp	lr, r2
 8016bb4:	dd36      	ble.n	8016c24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8016bb6:	b3bf      	cbz	r7, 8016c28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8016bb8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016bbc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8016bc0:	3501      	adds	r5, #1
 8016bc2:	d435      	bmi.n	8016c30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8016bc4:	45a9      	cmp	r9, r5
 8016bc6:	dd33      	ble.n	8016c30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8016bc8:	f1bc 0f00 	cmp.w	ip, #0
 8016bcc:	d033      	beq.n	8016c36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	db2c      	blt.n	8016c2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8016bd2:	4586      	cmp	lr, r0
 8016bd4:	dd2a      	ble.n	8016c2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8016bd6:	f818 200e 	ldrb.w	r2, [r8, lr]
 8016bda:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8016bde:	3001      	adds	r0, #1
 8016be0:	d42c      	bmi.n	8016c3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8016be2:	4586      	cmp	lr, r0
 8016be4:	dd2a      	ble.n	8016c3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8016be6:	b35f      	cbz	r7, 8016c40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8016be8:	44c6      	add	lr, r8
 8016bea:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8016bee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016bf2:	2f0f      	cmp	r7, #15
 8016bf4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8016bf8:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8016bfc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8016c00:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8016c04:	d802      	bhi.n	8016c0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8016c06:	f1bc 0f0f 	cmp.w	ip, #15
 8016c0a:	d91b      	bls.n	8016c44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8016c0c:	4b77      	ldr	r3, [pc, #476]	; (8016dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8016c0e:	f240 1157 	movw	r1, #343	; 0x157
 8016c12:	4a77      	ldr	r2, [pc, #476]	; (8016df0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8016c14:	4877      	ldr	r0, [pc, #476]	; (8016df4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8016c16:	f004 fa31 	bl	801b07c <__assert_func>
 8016c1a:	2600      	movs	r6, #0
 8016c1c:	e7c7      	b.n	8016bae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8016c1e:	2400      	movs	r4, #0
 8016c20:	4626      	mov	r6, r4
 8016c22:	e7cd      	b.n	8016bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8016c24:	2400      	movs	r4, #0
 8016c26:	e7cb      	b.n	8016bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8016c28:	463c      	mov	r4, r7
 8016c2a:	e7c9      	b.n	8016bc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8016c2c:	2500      	movs	r5, #0
 8016c2e:	e7d6      	b.n	8016bde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8016c30:	2200      	movs	r2, #0
 8016c32:	4615      	mov	r5, r2
 8016c34:	e7dd      	b.n	8016bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c36:	4662      	mov	r2, ip
 8016c38:	4665      	mov	r5, ip
 8016c3a:	e7da      	b.n	8016bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	e7d8      	b.n	8016bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c40:	463a      	mov	r2, r7
 8016c42:	e7d6      	b.n	8016bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8016c44:	b2bf      	uxth	r7, r7
 8016c46:	fa1f f08c 	uxth.w	r0, ip
 8016c4a:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8016c4e:	fb00 fe07 	mul.w	lr, r0, r7
 8016c52:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8016c56:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8016c5a:	ebac 070e 	sub.w	r7, ip, lr
 8016c5e:	b280      	uxth	r0, r0
 8016c60:	b2bf      	uxth	r7, r7
 8016c62:	1a1b      	subs	r3, r3, r0
 8016c64:	fb07 fc0a 	mul.w	ip, r7, sl
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	fb03 cc0b 	mla	ip, r3, fp, ip
 8016c6e:	9300      	str	r3, [sp, #0]
 8016c70:	fb00 cc09 	mla	ip, r0, r9, ip
 8016c74:	fb0e cc08 	mla	ip, lr, r8, ip
 8016c78:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8016c7c:	9301      	str	r3, [sp, #4]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	f000 80b0 	beq.w	8016de4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8016c84:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8016c88:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016c8c:	fb0b fc0c 	mul.w	ip, fp, ip
 8016c90:	fb0b f606 	mul.w	r6, fp, r6
 8016c94:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016c98:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016c9c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8016ca0:	44dc      	add	ip, fp
 8016ca2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016ca6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016caa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016cae:	fb0a fb0b 	mul.w	fp, sl, fp
 8016cb2:	fb0a fa04 	mul.w	sl, sl, r4
 8016cb6:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8016cba:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8016cbe:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8016cc2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8016cc6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8016cca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016cce:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8016cd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016cd6:	0a36      	lsrs	r6, r6, #8
 8016cd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016cdc:	44dc      	add	ip, fp
 8016cde:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8016ce2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8016ce6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016cea:	fb09 fb0b 	mul.w	fp, r9, fp
 8016cee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016cf2:	fb09 f905 	mul.w	r9, r9, r5
 8016cf6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016cfa:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8016cfe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016d02:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8016d06:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016d0a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016d0e:	fb0c fc07 	mul.w	ip, ip, r7
 8016d12:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8016d16:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8016d1a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016d1e:	445c      	add	r4, fp
 8016d20:	fb08 f505 	mul.w	r5, r8, r5
 8016d24:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016d28:	fb08 f802 	mul.w	r8, r8, r2
 8016d2c:	0a24      	lsrs	r4, r4, #8
 8016d2e:	0a2a      	lsrs	r2, r5, #8
 8016d30:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8016d34:	fb07 f70a 	mul.w	r7, r7, sl
 8016d38:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016d3c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016d40:	4415      	add	r5, r2
 8016d42:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8016d46:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016d4a:	9a00      	ldr	r2, [sp, #0]
 8016d4c:	0a2d      	lsrs	r5, r5, #8
 8016d4e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8016d52:	fb03 cc02 	mla	ip, r3, r2, ip
 8016d56:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8016d5a:	fb02 7306 	mla	r3, r2, r6, r7
 8016d5e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8016d62:	9a01      	ldr	r2, [sp, #4]
 8016d64:	fb05 c50e 	mla	r5, r5, lr, ip
 8016d68:	fb0e 3e08 	mla	lr, lr, r8, r3
 8016d6c:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8016d70:	fb04 5400 	mla	r4, r4, r0, r5
 8016d74:	fb00 e303 	mla	r3, r0, r3, lr
 8016d78:	0a24      	lsrs	r4, r4, #8
 8016d7a:	0a1b      	lsrs	r3, r3, #8
 8016d7c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016d80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016d84:	431c      	orrs	r4, r3
 8016d86:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016d8a:	b29b      	uxth	r3, r3
 8016d8c:	b2e0      	uxtb	r0, r4
 8016d8e:	435a      	muls	r2, r3
 8016d90:	fb10 f003 	smulbb	r0, r0, r3
 8016d94:	1c55      	adds	r5, r2, #1
 8016d96:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8016d9a:	780a      	ldrb	r2, [r1, #0]
 8016d9c:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8016da0:	b2ed      	uxtb	r5, r5
 8016da2:	fb02 0205 	mla	r2, r2, r5, r0
 8016da6:	b292      	uxth	r2, r2
 8016da8:	1c50      	adds	r0, r2, #1
 8016daa:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016dae:	7848      	ldrb	r0, [r1, #1]
 8016db0:	fb10 f005 	smulbb	r0, r0, r5
 8016db4:	1212      	asrs	r2, r2, #8
 8016db6:	700a      	strb	r2, [r1, #0]
 8016db8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8016dbc:	0c24      	lsrs	r4, r4, #16
 8016dbe:	fb02 0203 	mla	r2, r2, r3, r0
 8016dc2:	b292      	uxth	r2, r2
 8016dc4:	1c50      	adds	r0, r2, #1
 8016dc6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016dca:	1212      	asrs	r2, r2, #8
 8016dcc:	704a      	strb	r2, [r1, #1]
 8016dce:	788a      	ldrb	r2, [r1, #2]
 8016dd0:	fb12 f505 	smulbb	r5, r2, r5
 8016dd4:	fb04 5303 	mla	r3, r4, r3, r5
 8016dd8:	b29b      	uxth	r3, r3
 8016dda:	1c5a      	adds	r2, r3, #1
 8016ddc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016de0:	121b      	asrs	r3, r3, #8
 8016de2:	708b      	strb	r3, [r1, #2]
 8016de4:	b003      	add	sp, #12
 8016de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dea:	bf00      	nop
 8016dec:	0801f117 	.word	0x0801f117
 8016df0:	0801f5ce 	.word	0x0801f5ce
 8016df4:	0801f19f 	.word	0x0801f19f

08016df8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dfc:	ed2d 8b08 	vpush	{d8-d11}
 8016e00:	b09f      	sub	sp, #124	; 0x7c
 8016e02:	eeb0 aa40 	vmov.f32	s20, s0
 8016e06:	eef0 9a60 	vmov.f32	s19, s1
 8016e0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e0c:	eeb0 9a41 	vmov.f32	s18, s2
 8016e10:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8016e12:	eeb0 8a62 	vmov.f32	s16, s5
 8016e16:	9309      	str	r3, [sp, #36]	; 0x24
 8016e18:	eef0 8a43 	vmov.f32	s17, s6
 8016e1c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8016e20:	eef0 ba44 	vmov.f32	s23, s8
 8016e24:	901d      	str	r0, [sp, #116]	; 0x74
 8016e26:	eeb0 ba64 	vmov.f32	s22, s9
 8016e2a:	931c      	str	r3, [sp, #112]	; 0x70
 8016e2c:	eef0 aa45 	vmov.f32	s21, s10
 8016e30:	6850      	ldr	r0, [r2, #4]
 8016e32:	9119      	str	r1, [sp, #100]	; 0x64
 8016e34:	6812      	ldr	r2, [r2, #0]
 8016e36:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8016e38:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8016e3c:	fb00 1303 	mla	r3, r0, r3, r1
 8016e40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e44:	18d3      	adds	r3, r2, r3
 8016e46:	930c      	str	r3, [sp, #48]	; 0x30
 8016e48:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	9312      	str	r3, [sp, #72]	; 0x48
 8016e4e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016e50:	685e      	ldr	r6, [r3, #4]
 8016e52:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8016e56:	3604      	adds	r6, #4
 8016e58:	930d      	str	r3, [sp, #52]	; 0x34
 8016e5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	dc03      	bgt.n	8016e68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	f340 8378 	ble.w	8017558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8016e68:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016e6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016e6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016e72:	1e48      	subs	r0, r1, #1
 8016e74:	1e57      	subs	r7, r2, #1
 8016e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	f340 818c 	ble.w	8017196 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8016e7e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8016e80:	142b      	asrs	r3, r5, #16
 8016e82:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8016e86:	d406      	bmi.n	8016e96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016e88:	4584      	cmp	ip, r0
 8016e8a:	da04      	bge.n	8016e96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	db02      	blt.n	8016e96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016e90:	42bb      	cmp	r3, r7
 8016e92:	f2c0 8181 	blt.w	8017198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8016e96:	f11c 0c01 	adds.w	ip, ip, #1
 8016e9a:	f100 816f 	bmi.w	801717c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016e9e:	4561      	cmp	r1, ip
 8016ea0:	f2c0 816c 	blt.w	801717c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	f100 8169 	bmi.w	801717c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016eaa:	429a      	cmp	r2, r3
 8016eac:	f2c0 8166 	blt.w	801717c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8016eb6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	f340 818c 	ble.w	80171d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8016ebe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016ec0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8016ec4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016ec8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8016ecc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016ece:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8016ed2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016ed4:	141b      	asrs	r3, r3, #16
 8016ed6:	f100 81d0 	bmi.w	801727a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8016ede:	4543      	cmp	r3, r8
 8016ee0:	f280 81cb 	bge.w	801727a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016ee4:	f1bc 0f00 	cmp.w	ip, #0
 8016ee8:	f2c0 81c7 	blt.w	801727a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016eec:	f10e 38ff 	add.w	r8, lr, #4294967295
 8016ef0:	45c4      	cmp	ip, r8
 8016ef2:	f280 81c2 	bge.w	801727a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8016ef6:	b200      	sxth	r0, r0
 8016ef8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016efa:	fb0c 3300 	mla	r3, ip, r0, r3
 8016efe:	eb04 0803 	add.w	r8, r4, r3
 8016f02:	5ce3      	ldrb	r3, [r4, r3]
 8016f04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016f08:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8016f0c:	2a00      	cmp	r2, #0
 8016f0e:	f000 81a9 	beq.w	8017264 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8016f12:	f898 c001 	ldrb.w	ip, [r8, #1]
 8016f16:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8016f1a:	940e      	str	r4, [sp, #56]	; 0x38
 8016f1c:	0e24      	lsrs	r4, r4, #24
 8016f1e:	9415      	str	r4, [sp, #84]	; 0x54
 8016f20:	b179      	cbz	r1, 8016f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016f22:	eb08 0c00 	add.w	ip, r8, r0
 8016f26:	f818 0000 	ldrb.w	r0, [r8, r0]
 8016f2a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8016f2e:	900a      	str	r0, [sp, #40]	; 0x28
 8016f30:	0e00      	lsrs	r0, r0, #24
 8016f32:	9013      	str	r0, [sp, #76]	; 0x4c
 8016f34:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8016f38:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8016f3c:	900f      	str	r0, [sp, #60]	; 0x3c
 8016f3e:	0e00      	lsrs	r0, r0, #24
 8016f40:	9016      	str	r0, [sp, #88]	; 0x58
 8016f42:	b292      	uxth	r2, r2
 8016f44:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016f46:	b289      	uxth	r1, r1
 8016f48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016f4a:	fb02 f901 	mul.w	r9, r2, r1
 8016f4e:	0112      	lsls	r2, r2, #4
 8016f50:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016f54:	eba2 0809 	sub.w	r8, r2, r9
 8016f58:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016f5c:	b289      	uxth	r1, r1
 8016f5e:	fa1f f888 	uxth.w	r8, r8
 8016f62:	1a52      	subs	r2, r2, r1
 8016f64:	fb08 f000 	mul.w	r0, r8, r0
 8016f68:	b292      	uxth	r2, r2
 8016f6a:	fb02 000e 	mla	r0, r2, lr, r0
 8016f6e:	fb01 0004 	mla	r0, r1, r4, r0
 8016f72:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016f74:	fb09 0004 	mla	r0, r9, r4, r0
 8016f78:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016f7c:	2800      	cmp	r0, #0
 8016f7e:	f000 80f2 	beq.w	8017166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8016f82:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016f86:	d01b      	beq.n	8016fc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016f88:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016f8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016f90:	fb0e fa0a 	mul.w	sl, lr, sl
 8016f94:	fb0e fe03 	mul.w	lr, lr, r3
 8016f98:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016f9c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016fa0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016fa4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016fa8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016fac:	4453      	add	r3, sl
 8016fae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016fb2:	0a1b      	lsrs	r3, r3, #8
 8016fb4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016fb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016fbc:	ea43 030c 	orr.w	r3, r3, ip
 8016fc0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016fc2:	2cff      	cmp	r4, #255	; 0xff
 8016fc4:	d021      	beq.n	801700a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8016fc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016fc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016fcc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016fce:	fb04 fb0b 	mul.w	fp, r4, fp
 8016fd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016fd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016fd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016fda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016fde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016fe2:	fb04 fa0a 	mul.w	sl, r4, sl
 8016fe6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016fea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016fee:	44de      	add	lr, fp
 8016ff0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016ff4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016ff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016ffc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017004:	ea4e 040a 	orr.w	r4, lr, sl
 8017008:	940e      	str	r4, [sp, #56]	; 0x38
 801700a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801700c:	2cff      	cmp	r4, #255	; 0xff
 801700e:	d021      	beq.n	8017054 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8017010:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017012:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017016:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017018:	fb04 fb0b 	mul.w	fp, r4, fp
 801701c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801701e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017022:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017024:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017028:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801702c:	fb04 fa0a 	mul.w	sl, r4, sl
 8017030:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017034:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017038:	44de      	add	lr, fp
 801703a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801703e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017042:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017046:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801704a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801704e:	ea4e 040a 	orr.w	r4, lr, sl
 8017052:	940a      	str	r4, [sp, #40]	; 0x28
 8017054:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017056:	2cff      	cmp	r4, #255	; 0xff
 8017058:	d021      	beq.n	801709e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801705a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801705c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017060:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017062:	fb04 fb0b 	mul.w	fp, r4, fp
 8017066:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017068:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801706c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801706e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017072:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017076:	fb04 fa0a 	mul.w	sl, r4, sl
 801707a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801707e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017082:	44de      	add	lr, fp
 8017084:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017088:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801708c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017090:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017094:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017098:	ea4e 040a 	orr.w	r4, lr, sl
 801709c:	940f      	str	r4, [sp, #60]	; 0x3c
 801709e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80170a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80170a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80170a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80170ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80170ae:	fb08 fc0c 	mul.w	ip, r8, ip
 80170b2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80170b6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80170ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80170bc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80170c0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80170c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80170c6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80170ca:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80170ce:	fb08 f80e 	mul.w	r8, r8, lr
 80170d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80170d6:	fb02 8303 	mla	r3, r2, r3, r8
 80170da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80170e0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80170e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170e6:	fb01 330a 	mla	r3, r1, sl, r3
 80170ea:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80170ee:	fb09 3901 	mla	r9, r9, r1, r3
 80170f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80170f6:	4343      	muls	r3, r0
 80170f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80170fc:	1c58      	adds	r0, r3, #1
 80170fe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017102:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017106:	ea4c 0c09 	orr.w	ip, ip, r9
 801710a:	783b      	ldrb	r3, [r7, #0]
 801710c:	fa5f f28c 	uxtb.w	r2, ip
 8017110:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017114:	fb12 f201 	smulbb	r2, r2, r1
 8017118:	b2c0      	uxtb	r0, r0
 801711a:	fb03 2300 	mla	r3, r3, r0, r2
 801711e:	b29b      	uxth	r3, r3
 8017120:	1c5a      	adds	r2, r3, #1
 8017122:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017126:	787a      	ldrb	r2, [r7, #1]
 8017128:	fb12 f200 	smulbb	r2, r2, r0
 801712c:	121b      	asrs	r3, r3, #8
 801712e:	703b      	strb	r3, [r7, #0]
 8017130:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017134:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017138:	fb03 2301 	mla	r3, r3, r1, r2
 801713c:	b29b      	uxth	r3, r3
 801713e:	1c5a      	adds	r2, r3, #1
 8017140:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017144:	121b      	asrs	r3, r3, #8
 8017146:	707b      	strb	r3, [r7, #1]
 8017148:	78bb      	ldrb	r3, [r7, #2]
 801714a:	fb13 f000 	smulbb	r0, r3, r0
 801714e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8017152:	fa1f fc8c 	uxth.w	ip, ip
 8017156:	f10c 0301 	add.w	r3, ip, #1
 801715a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801715e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017162:	f887 c002 	strb.w	ip, [r7, #2]
 8017166:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017168:	3703      	adds	r7, #3
 801716a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801716c:	441a      	add	r2, r3
 801716e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017170:	441d      	add	r5, r3
 8017172:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017174:	9231      	str	r2, [sp, #196]	; 0xc4
 8017176:	3b01      	subs	r3, #1
 8017178:	931a      	str	r3, [sp, #104]	; 0x68
 801717a:	e69c      	b.n	8016eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801717c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801717e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8017180:	441c      	add	r4, r3
 8017182:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017184:	441d      	add	r5, r3
 8017186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017188:	9431      	str	r4, [sp, #196]	; 0xc4
 801718a:	3b01      	subs	r3, #1
 801718c:	9309      	str	r3, [sp, #36]	; 0x24
 801718e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017190:	3303      	adds	r3, #3
 8017192:	930c      	str	r3, [sp, #48]	; 0x30
 8017194:	e66f      	b.n	8016e76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017196:	d026      	beq.n	80171e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8017198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801719a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801719c:	3b01      	subs	r3, #1
 801719e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80171a0:	fb00 4003 	mla	r0, r0, r3, r4
 80171a4:	1400      	asrs	r0, r0, #16
 80171a6:	f53f ae83 	bmi.w	8016eb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171aa:	3901      	subs	r1, #1
 80171ac:	4288      	cmp	r0, r1
 80171ae:	f6bf ae7f 	bge.w	8016eb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171b2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80171b4:	fb01 5303 	mla	r3, r1, r3, r5
 80171b8:	141b      	asrs	r3, r3, #16
 80171ba:	f53f ae79 	bmi.w	8016eb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171be:	3a01      	subs	r2, #1
 80171c0:	4293      	cmp	r3, r2
 80171c2:	f6bf ae75 	bge.w	8016eb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80171c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80171cc:	f103 0e03 	add.w	lr, r3, #3
 80171d0:	f1bb 0f00 	cmp.w	fp, #0
 80171d4:	dc71      	bgt.n	80172ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80171d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80171dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80171e2:	4423      	add	r3, r4
 80171e4:	930c      	str	r3, [sp, #48]	; 0x30
 80171e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	f340 81b5 	ble.w	8017558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80171ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80171f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80171f4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80171f8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80171fc:	eef0 6a48 	vmov.f32	s13, s16
 8017200:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017204:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017208:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801720c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8017210:	eef0 6a68 	vmov.f32	s13, s17
 8017214:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017218:	ee16 5a90 	vmov	r5, s13
 801721c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017220:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017224:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017228:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801722c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017230:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017234:	ee18 2a10 	vmov	r2, s16
 8017238:	eeb0 8a47 	vmov.f32	s16, s14
 801723c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017240:	ee18 2a90 	vmov	r2, s17
 8017244:	9333      	str	r3, [sp, #204]	; 0xcc
 8017246:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017248:	eef0 8a67 	vmov.f32	s17, s15
 801724c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017250:	9334      	str	r3, [sp, #208]	; 0xd0
 8017252:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017254:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017256:	3b01      	subs	r3, #1
 8017258:	9319      	str	r3, [sp, #100]	; 0x64
 801725a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801725c:	bf08      	it	eq
 801725e:	4613      	moveq	r3, r2
 8017260:	9309      	str	r3, [sp, #36]	; 0x24
 8017262:	e5fa      	b.n	8016e5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017264:	2900      	cmp	r1, #0
 8017266:	f43f ae6c 	beq.w	8016f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801726a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801726e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017272:	900a      	str	r0, [sp, #40]	; 0x28
 8017274:	0e00      	lsrs	r0, r0, #24
 8017276:	9013      	str	r0, [sp, #76]	; 0x4c
 8017278:	e663      	b.n	8016f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801727a:	f113 0801 	adds.w	r8, r3, #1
 801727e:	f53f af72 	bmi.w	8017166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017282:	4540      	cmp	r0, r8
 8017284:	f6ff af6f 	blt.w	8017166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017288:	f11c 0801 	adds.w	r8, ip, #1
 801728c:	f53f af6b 	bmi.w	8017166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017290:	45c6      	cmp	lr, r8
 8017292:	f6ff af68 	blt.w	8017166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017296:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017298:	b200      	sxth	r0, r0
 801729a:	9302      	str	r3, [sp, #8]
 801729c:	fa0f f38e 	sxth.w	r3, lr
 80172a0:	9000      	str	r0, [sp, #0]
 80172a2:	9301      	str	r3, [sp, #4]
 80172a4:	4633      	mov	r3, r6
 80172a6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80172a8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80172ac:	e9cd c203 	strd	ip, r2, [sp, #12]
 80172b0:	4639      	mov	r1, r7
 80172b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172b4:	f7ff fc60 	bl	8016b78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80172b8:	e755      	b.n	8017166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80172ba:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80172bc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80172c0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80172c2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80172c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80172c8:	1427      	asrs	r7, r4, #16
 80172ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80172cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80172d0:	142b      	asrs	r3, r5, #16
 80172d2:	fb01 7303 	mla	r3, r1, r3, r7
 80172d6:	18e7      	adds	r7, r4, r3
 80172d8:	5ce3      	ldrb	r3, [r4, r3]
 80172da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80172de:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80172e2:	2a00      	cmp	r2, #0
 80172e4:	f000 812e 	beq.w	8017544 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80172e8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80172ec:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80172f0:	9410      	str	r4, [sp, #64]	; 0x40
 80172f2:	0e24      	lsrs	r4, r4, #24
 80172f4:	9417      	str	r4, [sp, #92]	; 0x5c
 80172f6:	b170      	cbz	r0, 8017316 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80172f8:	eb07 0801 	add.w	r8, r7, r1
 80172fc:	5c79      	ldrb	r1, [r7, r1]
 80172fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017302:	910b      	str	r1, [sp, #44]	; 0x2c
 8017304:	0e09      	lsrs	r1, r1, #24
 8017306:	9114      	str	r1, [sp, #80]	; 0x50
 8017308:	f898 1001 	ldrb.w	r1, [r8, #1]
 801730c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017310:	9111      	str	r1, [sp, #68]	; 0x44
 8017312:	0e09      	lsrs	r1, r1, #24
 8017314:	9118      	str	r1, [sp, #96]	; 0x60
 8017316:	b292      	uxth	r2, r2
 8017318:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801731a:	b280      	uxth	r0, r0
 801731c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801731e:	fb02 f900 	mul.w	r9, r2, r0
 8017322:	0112      	lsls	r2, r2, #4
 8017324:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017328:	eba2 0809 	sub.w	r8, r2, r9
 801732c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017330:	b280      	uxth	r0, r0
 8017332:	fa1f f888 	uxth.w	r8, r8
 8017336:	1a12      	subs	r2, r2, r0
 8017338:	fb08 f101 	mul.w	r1, r8, r1
 801733c:	b292      	uxth	r2, r2
 801733e:	fb02 110c 	mla	r1, r2, ip, r1
 8017342:	fb00 1104 	mla	r1, r0, r4, r1
 8017346:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017348:	fb09 1104 	mla	r1, r9, r4, r1
 801734c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017350:	2900      	cmp	r1, #0
 8017352:	f000 80ec 	beq.w	801752e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8017356:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801735a:	d019      	beq.n	8017390 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801735c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017364:	fb0c fa0a 	mul.w	sl, ip, sl
 8017368:	fb0c fc03 	mul.w	ip, ip, r3
 801736c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017370:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017374:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017378:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801737c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8017380:	4453      	add	r3, sl
 8017382:	0a3f      	lsrs	r7, r7, #8
 8017384:	0a1b      	lsrs	r3, r3, #8
 8017386:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801738a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801738e:	433b      	orrs	r3, r7
 8017390:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017392:	2cff      	cmp	r4, #255	; 0xff
 8017394:	d020      	beq.n	80173d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8017396:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017398:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801739c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801739e:	4367      	muls	r7, r4
 80173a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80173a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80173a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80173aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80173ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80173b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80173b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80173b8:	44bc      	add	ip, r7
 80173ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80173be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80173c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80173c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80173ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80173ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80173d2:	ea4c 040a 	orr.w	r4, ip, sl
 80173d6:	9410      	str	r4, [sp, #64]	; 0x40
 80173d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80173da:	2cff      	cmp	r4, #255	; 0xff
 80173dc:	d020      	beq.n	8017420 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80173de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80173e0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80173e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80173e6:	4367      	muls	r7, r4
 80173e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80173ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80173ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80173f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80173f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80173f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80173fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8017400:	44bc      	add	ip, r7
 8017402:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017406:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801740a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801740e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017412:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017416:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801741a:	ea4c 040a 	orr.w	r4, ip, sl
 801741e:	940b      	str	r4, [sp, #44]	; 0x2c
 8017420:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017422:	2cff      	cmp	r4, #255	; 0xff
 8017424:	d020      	beq.n	8017468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8017426:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017428:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801742c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801742e:	4367      	muls	r7, r4
 8017430:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017432:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017436:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801743a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801743c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017440:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017444:	fb04 fa0a 	mul.w	sl, r4, sl
 8017448:	44bc      	add	ip, r7
 801744a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801744e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017452:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017456:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801745a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801745e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017462:	ea4c 040a 	orr.w	r4, ip, sl
 8017466:	9411      	str	r4, [sp, #68]	; 0x44
 8017468:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801746a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801746e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017472:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017476:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017478:	fb08 f707 	mul.w	r7, r8, r7
 801747c:	fb02 770c 	mla	r7, r2, ip, r7
 8017480:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017486:	fb00 770c 	mla	r7, r0, ip, r7
 801748a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801748e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017490:	fb09 770c 	mla	r7, r9, ip, r7
 8017494:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017498:	fb08 f80c 	mul.w	r8, r8, ip
 801749c:	0a3f      	lsrs	r7, r7, #8
 801749e:	fb02 8303 	mla	r3, r2, r3, r8
 80174a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80174a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80174a8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80174ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80174ae:	fb00 330a 	mla	r3, r0, sl, r3
 80174b2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80174b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80174b8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80174bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80174c2:	434b      	muls	r3, r1
 80174c4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80174c8:	1c59      	adds	r1, r3, #1
 80174ca:	ea47 070c 	orr.w	r7, r7, ip
 80174ce:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80174d2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80174d6:	b2fa      	uxtb	r2, r7
 80174d8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80174dc:	fb12 f200 	smulbb	r2, r2, r0
 80174e0:	b2c9      	uxtb	r1, r1
 80174e2:	fb03 2301 	mla	r3, r3, r1, r2
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	1c5a      	adds	r2, r3, #1
 80174ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80174ee:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80174f2:	fb12 f201 	smulbb	r2, r2, r1
 80174f6:	121b      	asrs	r3, r3, #8
 80174f8:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80174fc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8017500:	0c3f      	lsrs	r7, r7, #16
 8017502:	fb03 2300 	mla	r3, r3, r0, r2
 8017506:	b29b      	uxth	r3, r3
 8017508:	1c5a      	adds	r2, r3, #1
 801750a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801750e:	121b      	asrs	r3, r3, #8
 8017510:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8017514:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8017518:	fb13 f101 	smulbb	r1, r3, r1
 801751c:	fb07 1700 	mla	r7, r7, r0, r1
 8017520:	b2bf      	uxth	r7, r7
 8017522:	1c7b      	adds	r3, r7, #1
 8017524:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8017528:	123f      	asrs	r7, r7, #8
 801752a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801752e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017530:	f10e 0e03 	add.w	lr, lr, #3
 8017534:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017536:	f10b 3bff 	add.w	fp, fp, #4294967295
 801753a:	441a      	add	r2, r3
 801753c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801753e:	9231      	str	r2, [sp, #196]	; 0xc4
 8017540:	441d      	add	r5, r3
 8017542:	e645      	b.n	80171d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8017544:	2800      	cmp	r0, #0
 8017546:	f43f aee6 	beq.w	8017316 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801754a:	5c79      	ldrb	r1, [r7, r1]
 801754c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017550:	910b      	str	r1, [sp, #44]	; 0x2c
 8017552:	0e09      	lsrs	r1, r1, #24
 8017554:	9114      	str	r1, [sp, #80]	; 0x50
 8017556:	e6de      	b.n	8017316 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8017558:	b01f      	add	sp, #124	; 0x7c
 801755a:	ecbd 8b08 	vpop	{d8-d11}
 801755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017564 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8017564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017568:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801756c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8017570:	2c00      	cmp	r4, #0
 8017572:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8017576:	fb04 060c 	mla	r6, r4, ip, r0
 801757a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801757e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8017582:	eb02 0e06 	add.w	lr, r2, r6
 8017586:	db3d      	blt.n	8017604 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8017588:	45a0      	cmp	r8, r4
 801758a:	dd3b      	ble.n	8017604 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801758c:	2800      	cmp	r0, #0
 801758e:	db37      	blt.n	8017600 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8017590:	4584      	cmp	ip, r0
 8017592:	dd35      	ble.n	8017600 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8017594:	5d92      	ldrb	r2, [r2, r6]
 8017596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801759a:	1c46      	adds	r6, r0, #1
 801759c:	d435      	bmi.n	801760a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801759e:	45b4      	cmp	ip, r6
 80175a0:	dd33      	ble.n	801760a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80175a2:	b3a5      	cbz	r5, 801760e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80175a4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80175a8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80175ac:	3401      	adds	r4, #1
 80175ae:	d432      	bmi.n	8017616 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80175b0:	45a0      	cmp	r8, r4
 80175b2:	dd30      	ble.n	8017616 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80175b4:	b397      	cbz	r7, 801761c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80175b6:	2800      	cmp	r0, #0
 80175b8:	db2b      	blt.n	8017612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80175ba:	4584      	cmp	ip, r0
 80175bc:	dd29      	ble.n	8017612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80175be:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80175c2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80175c6:	3001      	adds	r0, #1
 80175c8:	d42b      	bmi.n	8017622 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80175ca:	4584      	cmp	ip, r0
 80175cc:	dd29      	ble.n	8017622 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80175ce:	b355      	cbz	r5, 8017626 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80175d0:	44f4      	add	ip, lr
 80175d2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80175d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80175da:	2d0f      	cmp	r5, #15
 80175dc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80175e0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80175e4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80175e8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80175ec:	d801      	bhi.n	80175f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 80175ee:	2f0f      	cmp	r7, #15
 80175f0:	d91b      	bls.n	801762a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 80175f2:	4b7f      	ldr	r3, [pc, #508]	; (80177f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80175f4:	f240 1157 	movw	r1, #343	; 0x157
 80175f8:	4a7e      	ldr	r2, [pc, #504]	; (80177f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80175fa:	487f      	ldr	r0, [pc, #508]	; (80177f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80175fc:	f003 fd3e 	bl	801b07c <__assert_func>
 8017600:	2200      	movs	r2, #0
 8017602:	e7ca      	b.n	801759a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8017604:	2600      	movs	r6, #0
 8017606:	4632      	mov	r2, r6
 8017608:	e7d0      	b.n	80175ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801760a:	2600      	movs	r6, #0
 801760c:	e7ce      	b.n	80175ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801760e:	462e      	mov	r6, r5
 8017610:	e7cc      	b.n	80175ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8017612:	2400      	movs	r4, #0
 8017614:	e7d7      	b.n	80175c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8017616:	2300      	movs	r3, #0
 8017618:	461c      	mov	r4, r3
 801761a:	e7de      	b.n	80175da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801761c:	463b      	mov	r3, r7
 801761e:	463c      	mov	r4, r7
 8017620:	e7db      	b.n	80175da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017622:	2300      	movs	r3, #0
 8017624:	e7d9      	b.n	80175da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8017626:	462b      	mov	r3, r5
 8017628:	e7d7      	b.n	80175da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801762a:	b2a8      	uxth	r0, r5
 801762c:	b2bf      	uxth	r7, r7
 801762e:	fb07 fe00 	mul.w	lr, r7, r0
 8017632:	0100      	lsls	r0, r0, #4
 8017634:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8017638:	eba0 0c0e 	sub.w	ip, r0, lr
 801763c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8017640:	b2bf      	uxth	r7, r7
 8017642:	fa1f fc8c 	uxth.w	ip, ip
 8017646:	1bc5      	subs	r5, r0, r7
 8017648:	fb0c f00a 	mul.w	r0, ip, sl
 801764c:	b2ad      	uxth	r5, r5
 801764e:	fb05 000b 	mla	r0, r5, fp, r0
 8017652:	fb07 0009 	mla	r0, r7, r9, r0
 8017656:	fb0e 0008 	mla	r0, lr, r8, r0
 801765a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801765e:	9001      	str	r0, [sp, #4]
 8017660:	2800      	cmp	r0, #0
 8017662:	f000 80c2 	beq.w	80177ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8017666:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801766a:	d018      	beq.n	801769e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801766c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8017670:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017674:	fb0b f000 	mul.w	r0, fp, r0
 8017678:	fb0b fb02 	mul.w	fp, fp, r2
 801767c:	0a02      	lsrs	r2, r0, #8
 801767e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8017682:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017686:	4402      	add	r2, r0
 8017688:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801768c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8017690:	0a12      	lsrs	r2, r2, #8
 8017692:	0a00      	lsrs	r0, r0, #8
 8017694:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017698:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801769c:	4302      	orrs	r2, r0
 801769e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80176a2:	d01a      	beq.n	80176da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80176a4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80176a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80176ac:	fb0a f000 	mul.w	r0, sl, r0
 80176b0:	fb0a fa06 	mul.w	sl, sl, r6
 80176b4:	0a06      	lsrs	r6, r0, #8
 80176b6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80176ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80176be:	4406      	add	r6, r0
 80176c0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80176c4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80176c8:	0a36      	lsrs	r6, r6, #8
 80176ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80176ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80176d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80176d6:	ea46 060a 	orr.w	r6, r6, sl
 80176da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80176de:	d01b      	beq.n	8017718 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 80176e0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80176e4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80176e8:	fb09 fa0a 	mul.w	sl, r9, sl
 80176ec:	fb09 f004 	mul.w	r0, r9, r4
 80176f0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80176f4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80176f8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80176fc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017700:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8017704:	4454      	add	r4, sl
 8017706:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801770a:	0a24      	lsrs	r4, r4, #8
 801770c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017710:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017714:	ea44 0409 	orr.w	r4, r4, r9
 8017718:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801771c:	d01b      	beq.n	8017756 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801771e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8017722:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017726:	fb08 f909 	mul.w	r9, r8, r9
 801772a:	fb08 f003 	mul.w	r0, r8, r3
 801772e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017732:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8017736:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801773a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801773e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8017742:	444b      	add	r3, r9
 8017744:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017748:	0a1b      	lsrs	r3, r3, #8
 801774a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801774e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017752:	ea43 0308 	orr.w	r3, r3, r8
 8017756:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801775a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801775e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8017762:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017766:	fb0c f000 	mul.w	r0, ip, r0
 801776a:	fb0c f606 	mul.w	r6, ip, r6
 801776e:	fb05 0808 	mla	r8, r5, r8, r0
 8017772:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8017776:	fb05 6502 	mla	r5, r5, r2, r6
 801777a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801777e:	fb07 8800 	mla	r8, r7, r0, r8
 8017782:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8017786:	fb07 5704 	mla	r7, r7, r4, r5
 801778a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801778e:	fb0e 8000 	mla	r0, lr, r0, r8
 8017792:	780a      	ldrb	r2, [r1, #0]
 8017794:	fb0e 7e03 	mla	lr, lr, r3, r7
 8017798:	9b01      	ldr	r3, [sp, #4]
 801779a:	0a00      	lsrs	r0, r0, #8
 801779c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80177a0:	43db      	mvns	r3, r3
 80177a2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80177a6:	b2db      	uxtb	r3, r3
 80177a8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80177ac:	ea40 0e0e 	orr.w	lr, r0, lr
 80177b0:	fb02 f003 	mul.w	r0, r2, r3
 80177b4:	1c42      	adds	r2, r0, #1
 80177b6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80177ba:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80177be:	700a      	strb	r2, [r1, #0]
 80177c0:	784a      	ldrb	r2, [r1, #1]
 80177c2:	435a      	muls	r2, r3
 80177c4:	1c50      	adds	r0, r2, #1
 80177c6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80177ca:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80177ce:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80177d2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80177d6:	704a      	strb	r2, [r1, #1]
 80177d8:	788a      	ldrb	r2, [r1, #2]
 80177da:	4353      	muls	r3, r2
 80177dc:	1c5a      	adds	r2, r3, #1
 80177de:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80177e2:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80177e6:	f881 e002 	strb.w	lr, [r1, #2]
 80177ea:	b003      	add	sp, #12
 80177ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f0:	0801f117 	.word	0x0801f117
 80177f4:	0801f5ce 	.word	0x0801f5ce
 80177f8:	0801f19f 	.word	0x0801f19f

080177fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80177fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017800:	ed2d 8b0a 	vpush	{d8-d12}
 8017804:	b09b      	sub	sp, #108	; 0x6c
 8017806:	eeb0 aa40 	vmov.f32	s20, s0
 801780a:	eef0 9a60 	vmov.f32	s19, s1
 801780e:	9218      	str	r2, [sp, #96]	; 0x60
 8017810:	eeb0 9a41 	vmov.f32	s18, s2
 8017814:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017816:	eeb0 8a62 	vmov.f32	s16, s5
 801781a:	9019      	str	r0, [sp, #100]	; 0x64
 801781c:	eef0 8a43 	vmov.f32	s17, s6
 8017820:	6850      	ldr	r0, [r2, #4]
 8017822:	eeb0 ca44 	vmov.f32	s24, s8
 8017826:	9116      	str	r1, [sp, #88]	; 0x58
 8017828:	eef0 ba64 	vmov.f32	s23, s9
 801782c:	9307      	str	r3, [sp, #28]
 801782e:	eeb0 ba45 	vmov.f32	s22, s10
 8017832:	6812      	ldr	r2, [r2, #0]
 8017834:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8017838:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801783a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801783e:	fb00 1303 	mla	r3, r0, r3, r1
 8017842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017846:	18d3      	adds	r3, r2, r3
 8017848:	930a      	str	r3, [sp, #40]	; 0x28
 801784a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017850:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017852:	685e      	ldr	r6, [r3, #4]
 8017854:	3604      	adds	r6, #4
 8017856:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017858:	2b00      	cmp	r3, #0
 801785a:	dc03      	bgt.n	8017864 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801785c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801785e:	2b00      	cmp	r3, #0
 8017860:	f340 834f 	ble.w	8017f02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8017864:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017866:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801786a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801786e:	1e48      	subs	r0, r1, #1
 8017870:	1e57      	subs	r7, r2, #1
 8017872:	9b07      	ldr	r3, [sp, #28]
 8017874:	2b00      	cmp	r3, #0
 8017876:	f340 8178 	ble.w	8017b6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801787a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801787c:	142b      	asrs	r3, r5, #16
 801787e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8017882:	d406      	bmi.n	8017892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017884:	4584      	cmp	ip, r0
 8017886:	da04      	bge.n	8017892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017888:	2b00      	cmp	r3, #0
 801788a:	db02      	blt.n	8017892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801788c:	42bb      	cmp	r3, r7
 801788e:	f2c0 816d 	blt.w	8017b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017892:	f11c 0c01 	adds.w	ip, ip, #1
 8017896:	f100 815b 	bmi.w	8017b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801789a:	4561      	cmp	r1, ip
 801789c:	f2c0 8158 	blt.w	8017b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80178a0:	3301      	adds	r3, #1
 80178a2:	f100 8155 	bmi.w	8017b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80178a6:	429a      	cmp	r2, r3
 80178a8:	f2c0 8152 	blt.w	8017b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80178ac:	9b07      	ldr	r3, [sp, #28]
 80178ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80178b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80178b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	f340 8178 	ble.w	8017baa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80178ba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80178bc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80178c0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80178c4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80178c8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80178ca:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80178ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80178d0:	141b      	asrs	r3, r3, #16
 80178d2:	f100 81ba 	bmi.w	8017c4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80178d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80178da:	4543      	cmp	r3, r8
 80178dc:	f280 81b5 	bge.w	8017c4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80178e0:	f1bc 0f00 	cmp.w	ip, #0
 80178e4:	f2c0 81b1 	blt.w	8017c4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80178e8:	f10e 38ff 	add.w	r8, lr, #4294967295
 80178ec:	45c4      	cmp	ip, r8
 80178ee:	f280 81ac 	bge.w	8017c4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80178f2:	b209      	sxth	r1, r1
 80178f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80178f6:	fb0c 3301 	mla	r3, ip, r1, r3
 80178fa:	eb04 0803 	add.w	r8, r4, r3
 80178fe:	5ce3      	ldrb	r3, [r4, r3]
 8017900:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017904:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017908:	2a00      	cmp	r2, #0
 801790a:	f000 8193 	beq.w	8017c34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801790e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017912:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017916:	940b      	str	r4, [sp, #44]	; 0x2c
 8017918:	0e24      	lsrs	r4, r4, #24
 801791a:	9412      	str	r4, [sp, #72]	; 0x48
 801791c:	b178      	cbz	r0, 801793e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801791e:	eb08 0c01 	add.w	ip, r8, r1
 8017922:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017926:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801792a:	9108      	str	r1, [sp, #32]
 801792c:	0e09      	lsrs	r1, r1, #24
 801792e:	9110      	str	r1, [sp, #64]	; 0x40
 8017930:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017934:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017938:	910c      	str	r1, [sp, #48]	; 0x30
 801793a:	0e09      	lsrs	r1, r1, #24
 801793c:	9113      	str	r1, [sp, #76]	; 0x4c
 801793e:	b292      	uxth	r2, r2
 8017940:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017942:	b280      	uxth	r0, r0
 8017944:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017946:	fb02 f900 	mul.w	r9, r2, r0
 801794a:	0112      	lsls	r2, r2, #4
 801794c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017950:	eba2 0809 	sub.w	r8, r2, r9
 8017954:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017958:	b280      	uxth	r0, r0
 801795a:	fa1f f888 	uxth.w	r8, r8
 801795e:	1a12      	subs	r2, r2, r0
 8017960:	fb08 f101 	mul.w	r1, r8, r1
 8017964:	b292      	uxth	r2, r2
 8017966:	fb02 110e 	mla	r1, r2, lr, r1
 801796a:	fb00 1104 	mla	r1, r0, r4, r1
 801796e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017970:	fb09 1104 	mla	r1, r9, r4, r1
 8017974:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017978:	2900      	cmp	r1, #0
 801797a:	f000 80de 	beq.w	8017b3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801797e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017982:	d01b      	beq.n	80179bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8017984:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017988:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801798c:	fb0e fa0a 	mul.w	sl, lr, sl
 8017990:	fb0e fe03 	mul.w	lr, lr, r3
 8017994:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017998:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801799c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80179a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80179a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80179a8:	4453      	add	r3, sl
 80179aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80179ae:	0a1b      	lsrs	r3, r3, #8
 80179b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80179b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80179b8:	ea43 030c 	orr.w	r3, r3, ip
 80179bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80179be:	2cff      	cmp	r4, #255	; 0xff
 80179c0:	d021      	beq.n	8017a06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80179c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80179c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80179c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80179ca:	fb04 fb0b 	mul.w	fp, r4, fp
 80179ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80179d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80179d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80179d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80179da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80179de:	fb04 fa0a 	mul.w	sl, r4, sl
 80179e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80179e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80179ea:	44de      	add	lr, fp
 80179ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80179f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80179f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80179f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80179fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a00:	ea4e 040a 	orr.w	r4, lr, sl
 8017a04:	940b      	str	r4, [sp, #44]	; 0x2c
 8017a06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a08:	2cff      	cmp	r4, #255	; 0xff
 8017a0a:	d021      	beq.n	8017a50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017a0c:	9c08      	ldr	r4, [sp, #32]
 8017a0e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017a12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a14:	fb04 fb0b 	mul.w	fp, r4, fp
 8017a18:	9c08      	ldr	r4, [sp, #32]
 8017a1a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a20:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017a24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017a28:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a30:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017a34:	44de      	add	lr, fp
 8017a36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017a3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017a3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a4a:	ea4e 040a 	orr.w	r4, lr, sl
 8017a4e:	9408      	str	r4, [sp, #32]
 8017a50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017a52:	2cff      	cmp	r4, #255	; 0xff
 8017a54:	d021      	beq.n	8017a9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017a56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a58:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017a5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017a5e:	fb04 fb0b 	mul.w	fp, r4, fp
 8017a62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a64:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017a6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017a6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017a72:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a7a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017a7e:	44de      	add	lr, fp
 8017a80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017a84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017a88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017a90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a94:	ea4e 040a 	orr.w	r4, lr, sl
 8017a98:	940c      	str	r4, [sp, #48]	; 0x30
 8017a9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017a9c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8017aa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017aa4:	43c9      	mvns	r1, r1
 8017aa6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017aaa:	9c08      	ldr	r4, [sp, #32]
 8017aac:	b2c9      	uxtb	r1, r1
 8017aae:	fb08 fc0c 	mul.w	ip, r8, ip
 8017ab2:	fb02 cc0e 	mla	ip, r2, lr, ip
 8017ab6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017aba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017abc:	fb00 cc0e 	mla	ip, r0, lr, ip
 8017ac0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017ac4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017ac6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017aca:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017ace:	fb08 f80e 	mul.w	r8, r8, lr
 8017ad2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ad6:	fb02 8303 	mla	r3, r2, r3, r8
 8017ada:	9a08      	ldr	r2, [sp, #32]
 8017adc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017ae0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ae6:	fb00 330a 	mla	r3, r0, sl, r3
 8017aea:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8017aee:	fb09 3900 	mla	r9, r9, r0, r3
 8017af2:	783b      	ldrb	r3, [r7, #0]
 8017af4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017af8:	fb03 f201 	mul.w	r2, r3, r1
 8017afc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017b00:	1c53      	adds	r3, r2, #1
 8017b02:	ea4c 0c09 	orr.w	ip, ip, r9
 8017b06:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017b0a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8017b0e:	703b      	strb	r3, [r7, #0]
 8017b10:	787b      	ldrb	r3, [r7, #1]
 8017b12:	434b      	muls	r3, r1
 8017b14:	1c5a      	adds	r2, r3, #1
 8017b16:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017b1a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8017b1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017b22:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017b26:	707b      	strb	r3, [r7, #1]
 8017b28:	78bb      	ldrb	r3, [r7, #2]
 8017b2a:	4359      	muls	r1, r3
 8017b2c:	1c4b      	adds	r3, r1, #1
 8017b2e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8017b32:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8017b36:	f887 c002 	strb.w	ip, [r7, #2]
 8017b3a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017b3c:	3703      	adds	r7, #3
 8017b3e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017b40:	441a      	add	r2, r3
 8017b42:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017b44:	441d      	add	r5, r3
 8017b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017b48:	922f      	str	r2, [sp, #188]	; 0xbc
 8017b4a:	3b01      	subs	r3, #1
 8017b4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8017b4e:	e6b0      	b.n	80178b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8017b50:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017b52:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8017b54:	441c      	add	r4, r3
 8017b56:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017b58:	441d      	add	r5, r3
 8017b5a:	9b07      	ldr	r3, [sp, #28]
 8017b5c:	942f      	str	r4, [sp, #188]	; 0xbc
 8017b5e:	3b01      	subs	r3, #1
 8017b60:	9307      	str	r3, [sp, #28]
 8017b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b64:	3303      	adds	r3, #3
 8017b66:	930a      	str	r3, [sp, #40]	; 0x28
 8017b68:	e683      	b.n	8017872 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b6a:	d026      	beq.n	8017bba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8017b6c:	9b07      	ldr	r3, [sp, #28]
 8017b6e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8017b70:	3b01      	subs	r3, #1
 8017b72:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8017b74:	fb00 4003 	mla	r0, r0, r3, r4
 8017b78:	1400      	asrs	r0, r0, #16
 8017b7a:	f53f ae97 	bmi.w	80178ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017b7e:	3901      	subs	r1, #1
 8017b80:	4288      	cmp	r0, r1
 8017b82:	f6bf ae93 	bge.w	80178ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017b86:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8017b88:	fb01 5303 	mla	r3, r1, r3, r5
 8017b8c:	141b      	asrs	r3, r3, #16
 8017b8e:	f53f ae8d 	bmi.w	80178ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017b92:	3a01      	subs	r2, #1
 8017b94:	4293      	cmp	r3, r2
 8017b96:	f6bf ae89 	bge.w	80178ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b9c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8017ba0:	f103 0e03 	add.w	lr, r3, #3
 8017ba4:	f1bb 0f00 	cmp.w	fp, #0
 8017ba8:	dc6d      	bgt.n	8017c86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8017baa:	9b07      	ldr	r3, [sp, #28]
 8017bac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bb2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017bb6:	4423      	add	r3, r4
 8017bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8017bba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	f340 81a0 	ble.w	8017f02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8017bc2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017bc6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017bc8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017bcc:	eef0 6a48 	vmov.f32	s13, s16
 8017bd0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017bd4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017bd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017bdc:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8017be0:	eef0 6a68 	vmov.f32	s13, s17
 8017be4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017be8:	ee16 5a90 	vmov	r5, s13
 8017bec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017bf0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017bf4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017bf8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017bfc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017c00:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017c04:	ee18 2a10 	vmov	r2, s16
 8017c08:	eeb0 8a47 	vmov.f32	s16, s14
 8017c0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c10:	ee18 2a90 	vmov	r2, s17
 8017c14:	9331      	str	r3, [sp, #196]	; 0xc4
 8017c16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017c18:	eef0 8a67 	vmov.f32	s17, s15
 8017c1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c20:	9332      	str	r3, [sp, #200]	; 0xc8
 8017c22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017c24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017c26:	3b01      	subs	r3, #1
 8017c28:	9316      	str	r3, [sp, #88]	; 0x58
 8017c2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017c2c:	bf08      	it	eq
 8017c2e:	4613      	moveq	r3, r2
 8017c30:	9307      	str	r3, [sp, #28]
 8017c32:	e610      	b.n	8017856 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017c34:	2800      	cmp	r0, #0
 8017c36:	f43f ae82 	beq.w	801793e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017c3a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017c3e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017c42:	9108      	str	r1, [sp, #32]
 8017c44:	0e09      	lsrs	r1, r1, #24
 8017c46:	9110      	str	r1, [sp, #64]	; 0x40
 8017c48:	e679      	b.n	801793e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017c4a:	f113 0801 	adds.w	r8, r3, #1
 8017c4e:	f53f af74 	bmi.w	8017b3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c52:	4541      	cmp	r1, r8
 8017c54:	f6ff af71 	blt.w	8017b3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c58:	f11c 0801 	adds.w	r8, ip, #1
 8017c5c:	f53f af6d 	bmi.w	8017b3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c60:	45c6      	cmp	lr, r8
 8017c62:	f6ff af6a 	blt.w	8017b3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c66:	b209      	sxth	r1, r1
 8017c68:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8017c6c:	fa0f f38e 	sxth.w	r3, lr
 8017c70:	9100      	str	r1, [sp, #0]
 8017c72:	4639      	mov	r1, r7
 8017c74:	9301      	str	r3, [sp, #4]
 8017c76:	4633      	mov	r3, r6
 8017c78:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8017c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017c80:	f7ff fc70 	bl	8017564 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8017c84:	e759      	b.n	8017b3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017c86:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8017c88:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8017c8c:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8017c8e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017c92:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017c94:	1427      	asrs	r7, r4, #16
 8017c96:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017c9c:	142b      	asrs	r3, r5, #16
 8017c9e:	fb01 7303 	mla	r3, r1, r3, r7
 8017ca2:	18e7      	adds	r7, r4, r3
 8017ca4:	5ce3      	ldrb	r3, [r4, r3]
 8017ca6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017caa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8017cae:	2a00      	cmp	r2, #0
 8017cb0:	f000 811d 	beq.w	8017eee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8017cb4:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017cb8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8017cbc:	940d      	str	r4, [sp, #52]	; 0x34
 8017cbe:	0e24      	lsrs	r4, r4, #24
 8017cc0:	9414      	str	r4, [sp, #80]	; 0x50
 8017cc2:	b170      	cbz	r0, 8017ce2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017cc4:	eb07 0801 	add.w	r8, r7, r1
 8017cc8:	5c79      	ldrb	r1, [r7, r1]
 8017cca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017cce:	9109      	str	r1, [sp, #36]	; 0x24
 8017cd0:	0e09      	lsrs	r1, r1, #24
 8017cd2:	9111      	str	r1, [sp, #68]	; 0x44
 8017cd4:	f898 1001 	ldrb.w	r1, [r8, #1]
 8017cd8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017cdc:	910e      	str	r1, [sp, #56]	; 0x38
 8017cde:	0e09      	lsrs	r1, r1, #24
 8017ce0:	9115      	str	r1, [sp, #84]	; 0x54
 8017ce2:	b292      	uxth	r2, r2
 8017ce4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017ce6:	b280      	uxth	r0, r0
 8017ce8:	fb02 f900 	mul.w	r9, r2, r0
 8017cec:	0112      	lsls	r2, r2, #4
 8017cee:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017cf2:	eba2 0809 	sub.w	r8, r2, r9
 8017cf6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8017cfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cfc:	b280      	uxth	r0, r0
 8017cfe:	fa1f f888 	uxth.w	r8, r8
 8017d02:	1a09      	subs	r1, r1, r0
 8017d04:	fb08 f202 	mul.w	r2, r8, r2
 8017d08:	b289      	uxth	r1, r1
 8017d0a:	fb01 220c 	mla	r2, r1, ip, r2
 8017d0e:	fb00 2204 	mla	r2, r0, r4, r2
 8017d12:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017d14:	fb09 2204 	mla	r2, r9, r4, r2
 8017d18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017d1c:	2a00      	cmp	r2, #0
 8017d1e:	f000 80db 	beq.w	8017ed8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8017d22:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8017d26:	d019      	beq.n	8017d5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8017d28:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017d2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017d30:	fb0c fa0a 	mul.w	sl, ip, sl
 8017d34:	fb0c fc03 	mul.w	ip, ip, r3
 8017d38:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017d3c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017d40:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017d44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017d48:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8017d4c:	4453      	add	r3, sl
 8017d4e:	0a3f      	lsrs	r7, r7, #8
 8017d50:	0a1b      	lsrs	r3, r3, #8
 8017d52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017d56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017d5a:	433b      	orrs	r3, r7
 8017d5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d5e:	2cff      	cmp	r4, #255	; 0xff
 8017d60:	d020      	beq.n	8017da4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8017d62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017d64:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017d68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d6a:	4367      	muls	r7, r4
 8017d6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017d6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017d72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017d76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017d78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017d7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d80:	fb04 fa0a 	mul.w	sl, r4, sl
 8017d84:	44bc      	add	ip, r7
 8017d86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017d8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017d92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017d9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017d9e:	ea4c 040a 	orr.w	r4, ip, sl
 8017da2:	940d      	str	r4, [sp, #52]	; 0x34
 8017da4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017da6:	2cff      	cmp	r4, #255	; 0xff
 8017da8:	d020      	beq.n	8017dec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8017daa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017dac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017db0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017db2:	4367      	muls	r7, r4
 8017db4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017db6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017dba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017dbe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017dc0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017dc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017dc8:	fb04 fa0a 	mul.w	sl, r4, sl
 8017dcc:	44bc      	add	ip, r7
 8017dce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017dd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017dd6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017dda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017dde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017de2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017de6:	ea4c 040a 	orr.w	r4, ip, sl
 8017dea:	9409      	str	r4, [sp, #36]	; 0x24
 8017dec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017dee:	2cff      	cmp	r4, #255	; 0xff
 8017df0:	d020      	beq.n	8017e34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8017df2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017df4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017df8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017dfa:	4367      	muls	r7, r4
 8017dfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017dfe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017e02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017e06:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017e08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017e0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017e10:	fb04 fa0a 	mul.w	sl, r4, sl
 8017e14:	44bc      	add	ip, r7
 8017e16:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017e1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017e1e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017e22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017e26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017e2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017e2e:	ea4c 040a 	orr.w	r4, ip, sl
 8017e32:	940e      	str	r4, [sp, #56]	; 0x38
 8017e34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e36:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017e3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017e3e:	43d2      	mvns	r2, r2
 8017e40:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017e44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017e46:	b2d2      	uxtb	r2, r2
 8017e48:	fb08 f707 	mul.w	r7, r8, r7
 8017e4c:	fb01 770c 	mla	r7, r1, ip, r7
 8017e50:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017e54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017e56:	fb00 770c 	mla	r7, r0, ip, r7
 8017e5a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017e5e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017e60:	fb09 770c 	mla	r7, r9, ip, r7
 8017e64:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017e68:	fb08 f80c 	mul.w	r8, r8, ip
 8017e6c:	0a3f      	lsrs	r7, r7, #8
 8017e6e:	fb01 8303 	mla	r3, r1, r3, r8
 8017e72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e74:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017e78:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8017e7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017e7e:	fb00 330a 	mla	r3, r0, sl, r3
 8017e82:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8017e86:	fb09 3c0c 	mla	ip, r9, ip, r3
 8017e8a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8017e8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017e92:	fb03 f102 	mul.w	r1, r3, r2
 8017e96:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017e9a:	1c4b      	adds	r3, r1, #1
 8017e9c:	ea47 070c 	orr.w	r7, r7, ip
 8017ea0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017ea4:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8017ea8:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8017eac:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8017eb0:	4353      	muls	r3, r2
 8017eb2:	1c59      	adds	r1, r3, #1
 8017eb4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017eb8:	0a3b      	lsrs	r3, r7, #8
 8017eba:	0c3f      	lsrs	r7, r7, #16
 8017ebc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017ec0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8017ec4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8017ec8:	435a      	muls	r2, r3
 8017eca:	1c53      	adds	r3, r2, #1
 8017ecc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017ed0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8017ed4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8017ed8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017eda:	f10e 0e03 	add.w	lr, lr, #3
 8017ede:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017ee0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017ee4:	441a      	add	r2, r3
 8017ee6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017ee8:	922f      	str	r2, [sp, #188]	; 0xbc
 8017eea:	441d      	add	r5, r3
 8017eec:	e65a      	b.n	8017ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	f43f aef7 	beq.w	8017ce2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017ef4:	5c79      	ldrb	r1, [r7, r1]
 8017ef6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017efa:	9109      	str	r1, [sp, #36]	; 0x24
 8017efc:	0e09      	lsrs	r1, r1, #24
 8017efe:	9111      	str	r1, [sp, #68]	; 0x44
 8017f00:	e6ef      	b.n	8017ce2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017f02:	b01b      	add	sp, #108	; 0x6c
 8017f04:	ecbd 8b0a 	vpop	{d8-d12}
 8017f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8017f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f10:	b08d      	sub	sp, #52	; 0x34
 8017f12:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8017f16:	9103      	str	r1, [sp, #12]
 8017f18:	fb07 5803 	mla	r8, r7, r3, r5
 8017f1c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8017f20:	9803      	ldr	r0, [sp, #12]
 8017f22:	2f00      	cmp	r7, #0
 8017f24:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f26:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017f2a:	9903      	ldr	r1, [sp, #12]
 8017f2c:	9c03      	ldr	r4, [sp, #12]
 8017f2e:	eb02 0608 	add.w	r6, r2, r8
 8017f32:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8017f36:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8017f3a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017f3e:	7809      	ldrb	r1, [r1, #0]
 8017f40:	7840      	ldrb	r0, [r0, #1]
 8017f42:	78a4      	ldrb	r4, [r4, #2]
 8017f44:	db51      	blt.n	8017fea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8017f46:	45be      	cmp	lr, r7
 8017f48:	dd4f      	ble.n	8017fea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8017f4a:	2d00      	cmp	r5, #0
 8017f4c:	db49      	blt.n	8017fe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8017f4e:	42ab      	cmp	r3, r5
 8017f50:	dd47      	ble.n	8017fe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8017f52:	f812 2008 	ldrb.w	r2, [r2, r8]
 8017f56:	9204      	str	r2, [sp, #16]
 8017f58:	7872      	ldrb	r2, [r6, #1]
 8017f5a:	9205      	str	r2, [sp, #20]
 8017f5c:	78b2      	ldrb	r2, [r6, #2]
 8017f5e:	9206      	str	r2, [sp, #24]
 8017f60:	1c6a      	adds	r2, r5, #1
 8017f62:	d449      	bmi.n	8017ff8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8017f64:	4293      	cmp	r3, r2
 8017f66:	dd47      	ble.n	8017ff8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8017f68:	f1bc 0f00 	cmp.w	ip, #0
 8017f6c:	d044      	beq.n	8017ff8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8017f6e:	7972      	ldrb	r2, [r6, #5]
 8017f70:	f896 b003 	ldrb.w	fp, [r6, #3]
 8017f74:	f896 a004 	ldrb.w	sl, [r6, #4]
 8017f78:	9201      	str	r2, [sp, #4]
 8017f7a:	3701      	adds	r7, #1
 8017f7c:	d444      	bmi.n	8018008 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8017f7e:	45be      	cmp	lr, r7
 8017f80:	dd42      	ble.n	8018008 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8017f82:	f1b9 0f00 	cmp.w	r9, #0
 8017f86:	f000 80c1 	beq.w	801810c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8017f8a:	2d00      	cmp	r5, #0
 8017f8c:	db38      	blt.n	8018000 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8017f8e:	42ab      	cmp	r3, r5
 8017f90:	dd36      	ble.n	8018000 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8017f92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017f96:	f816 8002 	ldrb.w	r8, [r6, r2]
 8017f9a:	2203      	movs	r2, #3
 8017f9c:	fb03 6702 	mla	r7, r3, r2, r6
 8017fa0:	fb03 6202 	mla	r2, r3, r2, r6
 8017fa4:	787f      	ldrb	r7, [r7, #1]
 8017fa6:	f892 e002 	ldrb.w	lr, [r2, #2]
 8017faa:	9702      	str	r7, [sp, #8]
 8017fac:	3501      	adds	r5, #1
 8017fae:	d432      	bmi.n	8018016 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8017fb0:	42ab      	cmp	r3, r5
 8017fb2:	dd30      	ble.n	8018016 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8017fb4:	f1bc 0f00 	cmp.w	ip, #0
 8017fb8:	d031      	beq.n	801801e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8017fba:	2703      	movs	r7, #3
 8017fbc:	fb13 7207 	smlabb	r2, r3, r7, r7
 8017fc0:	5cb5      	ldrb	r5, [r6, r2]
 8017fc2:	fb03 6207 	mla	r2, r3, r7, r6
 8017fc6:	fb03 6307 	mla	r3, r3, r7, r6
 8017fca:	7912      	ldrb	r2, [r2, #4]
 8017fcc:	795e      	ldrb	r6, [r3, #5]
 8017fce:	f1bc 0f0f 	cmp.w	ip, #15
 8017fd2:	d927      	bls.n	8018024 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8017fd4:	4b53      	ldr	r3, [pc, #332]	; (8018124 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8017fd6:	f240 1157 	movw	r1, #343	; 0x157
 8017fda:	4a53      	ldr	r2, [pc, #332]	; (8018128 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8017fdc:	4853      	ldr	r0, [pc, #332]	; (801812c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8017fde:	f003 f84d 	bl	801b07c <__assert_func>
 8017fe2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8017fe6:	9104      	str	r1, [sp, #16]
 8017fe8:	e7ba      	b.n	8017f60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8017fea:	9401      	str	r4, [sp, #4]
 8017fec:	4682      	mov	sl, r0
 8017fee:	468b      	mov	fp, r1
 8017ff0:	9104      	str	r1, [sp, #16]
 8017ff2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8017ff6:	e7c0      	b.n	8017f7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8017ff8:	9401      	str	r4, [sp, #4]
 8017ffa:	4682      	mov	sl, r0
 8017ffc:	468b      	mov	fp, r1
 8017ffe:	e7bc      	b.n	8017f7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8018000:	46a6      	mov	lr, r4
 8018002:	9002      	str	r0, [sp, #8]
 8018004:	4688      	mov	r8, r1
 8018006:	e7d1      	b.n	8017fac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8018008:	4626      	mov	r6, r4
 801800a:	4602      	mov	r2, r0
 801800c:	460d      	mov	r5, r1
 801800e:	46a6      	mov	lr, r4
 8018010:	9002      	str	r0, [sp, #8]
 8018012:	4688      	mov	r8, r1
 8018014:	e7db      	b.n	8017fce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8018016:	4626      	mov	r6, r4
 8018018:	4602      	mov	r2, r0
 801801a:	460d      	mov	r5, r1
 801801c:	e7d7      	b.n	8017fce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801801e:	4626      	mov	r6, r4
 8018020:	4602      	mov	r2, r0
 8018022:	460d      	mov	r5, r1
 8018024:	f1b9 0f0f 	cmp.w	r9, #15
 8018028:	d8d4      	bhi.n	8017fd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801802a:	fa1f f38c 	uxth.w	r3, ip
 801802e:	fa1f fc89 	uxth.w	ip, r9
 8018032:	fb03 f70c 	mul.w	r7, r3, ip
 8018036:	011b      	lsls	r3, r3, #4
 8018038:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801803c:	9707      	str	r7, [sp, #28]
 801803e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8018042:	fa1f fc8c 	uxth.w	ip, ip
 8018046:	eba7 070c 	sub.w	r7, r7, ip
 801804a:	b2bf      	uxth	r7, r7
 801804c:	9709      	str	r7, [sp, #36]	; 0x24
 801804e:	9f07      	ldr	r7, [sp, #28]
 8018050:	1bdb      	subs	r3, r3, r7
 8018052:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8018056:	b29b      	uxth	r3, r3
 8018058:	9708      	str	r7, [sp, #32]
 801805a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801805c:	930a      	str	r3, [sp, #40]	; 0x28
 801805e:	ea6f 0907 	mvn.w	r9, r7
 8018062:	fb03 fb0b 	mul.w	fp, r3, fp
 8018066:	9f04      	ldr	r7, [sp, #16]
 8018068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801806a:	fa5f f989 	uxtb.w	r9, r9
 801806e:	fb03 bb07 	mla	fp, r3, r7, fp
 8018072:	9f07      	ldr	r7, [sp, #28]
 8018074:	fb11 f109 	smulbb	r1, r1, r9
 8018078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801807a:	fb0c b808 	mla	r8, ip, r8, fp
 801807e:	fb10 f009 	smulbb	r0, r0, r9
 8018082:	fb14 f409 	smulbb	r4, r4, r9
 8018086:	fb07 8805 	mla	r8, r7, r5, r8
 801808a:	9d08      	ldr	r5, [sp, #32]
 801808c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801808e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018092:	fb08 1805 	mla	r8, r8, r5, r1
 8018096:	9d05      	ldr	r5, [sp, #20]
 8018098:	fa1f f888 	uxth.w	r8, r8
 801809c:	f108 0101 	add.w	r1, r8, #1
 80180a0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80180a4:	9903      	ldr	r1, [sp, #12]
 80180a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80180aa:	f881 8000 	strb.w	r8, [r1]
 80180ae:	fb03 f10a 	mul.w	r1, r3, sl
 80180b2:	fb07 1105 	mla	r1, r7, r5, r1
 80180b6:	9d02      	ldr	r5, [sp, #8]
 80180b8:	fb0c 1105 	mla	r1, ip, r5, r1
 80180bc:	9d07      	ldr	r5, [sp, #28]
 80180be:	fb05 1102 	mla	r1, r5, r2, r1
 80180c2:	9a08      	ldr	r2, [sp, #32]
 80180c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80180c8:	fb01 0102 	mla	r1, r1, r2, r0
 80180cc:	9a03      	ldr	r2, [sp, #12]
 80180ce:	b289      	uxth	r1, r1
 80180d0:	1c48      	adds	r0, r1, #1
 80180d2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80180d6:	1209      	asrs	r1, r1, #8
 80180d8:	7051      	strb	r1, [r2, #1]
 80180da:	9a01      	ldr	r2, [sp, #4]
 80180dc:	4353      	muls	r3, r2
 80180de:	9a06      	ldr	r2, [sp, #24]
 80180e0:	fb07 3702 	mla	r7, r7, r2, r3
 80180e4:	9b08      	ldr	r3, [sp, #32]
 80180e6:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80180ea:	fb05 c606 	mla	r6, r5, r6, ip
 80180ee:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80180f2:	fb06 4603 	mla	r6, r6, r3, r4
 80180f6:	9b03      	ldr	r3, [sp, #12]
 80180f8:	b2b6      	uxth	r6, r6
 80180fa:	f106 0e01 	add.w	lr, r6, #1
 80180fe:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8018102:	1236      	asrs	r6, r6, #8
 8018104:	709e      	strb	r6, [r3, #2]
 8018106:	b00d      	add	sp, #52	; 0x34
 8018108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801810c:	f1bc 0f0f 	cmp.w	ip, #15
 8018110:	f63f af60 	bhi.w	8017fd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8018114:	4626      	mov	r6, r4
 8018116:	4602      	mov	r2, r0
 8018118:	460d      	mov	r5, r1
 801811a:	46a6      	mov	lr, r4
 801811c:	9002      	str	r0, [sp, #8]
 801811e:	4688      	mov	r8, r1
 8018120:	e783      	b.n	801802a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8018122:	bf00      	nop
 8018124:	0801f117 	.word	0x0801f117
 8018128:	0801f5ce 	.word	0x0801f5ce
 801812c:	0801f19f 	.word	0x0801f19f

08018130 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018134:	ed2d 8b08 	vpush	{d8-d11}
 8018138:	b09f      	sub	sp, #124	; 0x7c
 801813a:	eeb0 aa40 	vmov.f32	s20, s0
 801813e:	eef0 9a60 	vmov.f32	s19, s1
 8018142:	920e      	str	r2, [sp, #56]	; 0x38
 8018144:	eeb0 9a41 	vmov.f32	s18, s2
 8018148:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801814a:	eeb0 8a62 	vmov.f32	s16, s5
 801814e:	9307      	str	r3, [sp, #28]
 8018150:	eef0 8a43 	vmov.f32	s17, s6
 8018154:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8018158:	eef0 ba44 	vmov.f32	s23, s8
 801815c:	901d      	str	r0, [sp, #116]	; 0x74
 801815e:	eeb0 ba64 	vmov.f32	s22, s9
 8018162:	930c      	str	r3, [sp, #48]	; 0x30
 8018164:	eef0 aa45 	vmov.f32	s21, s10
 8018168:	6850      	ldr	r0, [r2, #4]
 801816a:	910b      	str	r1, [sp, #44]	; 0x2c
 801816c:	6812      	ldr	r2, [r2, #0]
 801816e:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8018172:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8018176:	fb00 1303 	mla	r3, r0, r3, r1
 801817a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801817e:	18d3      	adds	r3, r2, r3
 8018180:	9308      	str	r3, [sp, #32]
 8018182:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	930a      	str	r3, [sp, #40]	; 0x28
 8018188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801818a:	43db      	mvns	r3, r3
 801818c:	b2db      	uxtb	r3, r3
 801818e:	9309      	str	r3, [sp, #36]	; 0x24
 8018190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018192:	2b00      	cmp	r3, #0
 8018194:	dc03      	bgt.n	801819e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018198:	2b00      	cmp	r3, #0
 801819a:	f340 81f5 	ble.w	8018588 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801819e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80181a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80181a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80181a8:	1e48      	subs	r0, r1, #1
 80181aa:	1e54      	subs	r4, r2, #1
 80181ac:	9b07      	ldr	r3, [sp, #28]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	f340 80d5 	ble.w	801835e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80181b4:	ea5f 452a 	movs.w	r5, sl, asr #16
 80181b8:	ea4f 4328 	mov.w	r3, r8, asr #16
 80181bc:	d406      	bmi.n	80181cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80181be:	4285      	cmp	r5, r0
 80181c0:	da04      	bge.n	80181cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	db02      	blt.n	80181cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80181c6:	42a3      	cmp	r3, r4
 80181c8:	f2c0 80ca 	blt.w	8018360 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80181cc:	3501      	adds	r5, #1
 80181ce:	f100 80bb 	bmi.w	8018348 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80181d2:	42a9      	cmp	r1, r5
 80181d4:	f2c0 80b8 	blt.w	8018348 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80181d8:	3301      	adds	r3, #1
 80181da:	f100 80b5 	bmi.w	8018348 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80181de:	429a      	cmp	r2, r3
 80181e0:	f2c0 80b2 	blt.w	8018348 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80181e4:	9b07      	ldr	r3, [sp, #28]
 80181e6:	9d08      	ldr	r5, [sp, #32]
 80181e8:	930d      	str	r3, [sp, #52]	; 0x34
 80181ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	f340 80d6 	ble.w	801839e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80181f2:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80181f4:	ea4f 4428 	mov.w	r4, r8, asr #16
 80181f8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80181fa:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80181fe:	68c6      	ldr	r6, [r0, #12]
 8018200:	ea5f 402a 	movs.w	r0, sl, asr #16
 8018204:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8018208:	689b      	ldr	r3, [r3, #8]
 801820a:	f100 810f 	bmi.w	801842c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801820e:	1e5f      	subs	r7, r3, #1
 8018210:	42b8      	cmp	r0, r7
 8018212:	f280 810b 	bge.w	801842c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018216:	2c00      	cmp	r4, #0
 8018218:	f2c0 8108 	blt.w	801842c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801821c:	1e77      	subs	r7, r6, #1
 801821e:	42bc      	cmp	r4, r7
 8018220:	f280 8104 	bge.w	801842c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8018224:	b21b      	sxth	r3, r3
 8018226:	fb04 0003 	mla	r0, r4, r3, r0
 801822a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801822c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018230:	1826      	adds	r6, r4, r0
 8018232:	5c24      	ldrb	r4, [r4, r0]
 8018234:	78b7      	ldrb	r7, [r6, #2]
 8018236:	7870      	ldrb	r0, [r6, #1]
 8018238:	970f      	str	r7, [sp, #60]	; 0x3c
 801823a:	7977      	ldrb	r7, [r6, #5]
 801823c:	f896 e003 	ldrb.w	lr, [r6, #3]
 8018240:	f896 c004 	ldrb.w	ip, [r6, #4]
 8018244:	9710      	str	r7, [sp, #64]	; 0x40
 8018246:	b1c9      	cbz	r1, 801827c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018248:	f04f 0b03 	mov.w	fp, #3
 801824c:	f06f 0904 	mvn.w	r9, #4
 8018250:	3605      	adds	r6, #5
 8018252:	fb13 930b 	smlabb	r3, r3, fp, r9
 8018256:	eb06 0b03 	add.w	fp, r6, r3
 801825a:	5cf3      	ldrb	r3, [r6, r3]
 801825c:	9311      	str	r3, [sp, #68]	; 0x44
 801825e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8018262:	9313      	str	r3, [sp, #76]	; 0x4c
 8018264:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8018268:	9315      	str	r3, [sp, #84]	; 0x54
 801826a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801826e:	9312      	str	r3, [sp, #72]	; 0x48
 8018270:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8018274:	9314      	str	r3, [sp, #80]	; 0x50
 8018276:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801827a:	9316      	str	r3, [sp, #88]	; 0x58
 801827c:	b292      	uxth	r2, r2
 801827e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8018280:	b289      	uxth	r1, r1
 8018282:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8018286:	fb02 f601 	mul.w	r6, r2, r1
 801828a:	0112      	lsls	r2, r2, #4
 801828c:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8018290:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8018294:	1b92      	subs	r2, r2, r6
 8018296:	b289      	uxth	r1, r1
 8018298:	b292      	uxth	r2, r2
 801829a:	eba9 0901 	sub.w	r9, r9, r1
 801829e:	fb02 fe0e 	mul.w	lr, r2, lr
 80182a2:	fa1f f989 	uxth.w	r9, r9
 80182a6:	fb02 fc0c 	mul.w	ip, r2, ip
 80182aa:	fb09 e404 	mla	r4, r9, r4, lr
 80182ae:	f895 e000 	ldrb.w	lr, [r5]
 80182b2:	fb09 c000 	mla	r0, r9, r0, ip
 80182b6:	fb01 4407 	mla	r4, r1, r7, r4
 80182ba:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80182bc:	fb06 4407 	mla	r4, r6, r7, r4
 80182c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80182c2:	fb1e fe07 	smulbb	lr, lr, r7
 80182c6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80182ca:	fb04 e403 	mla	r4, r4, r3, lr
 80182ce:	b2a4      	uxth	r4, r4
 80182d0:	f104 0e01 	add.w	lr, r4, #1
 80182d4:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80182d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182da:	fb01 0004 	mla	r0, r1, r4, r0
 80182de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80182e0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80182e4:	fb06 0004 	mla	r0, r6, r4, r0
 80182e8:	786c      	ldrb	r4, [r5, #1]
 80182ea:	f885 e000 	strb.w	lr, [r5]
 80182ee:	fb14 f407 	smulbb	r4, r4, r7
 80182f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80182f6:	fb00 4003 	mla	r0, r0, r3, r4
 80182fa:	b280      	uxth	r0, r0
 80182fc:	1c44      	adds	r4, r0, #1
 80182fe:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8018302:	1200      	asrs	r0, r0, #8
 8018304:	7068      	strb	r0, [r5, #1]
 8018306:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018308:	4342      	muls	r2, r0
 801830a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801830c:	fb09 2200 	mla	r2, r9, r0, r2
 8018310:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018312:	fb01 2100 	mla	r1, r1, r0, r2
 8018316:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018318:	fb06 1602 	mla	r6, r6, r2, r1
 801831c:	78a9      	ldrb	r1, [r5, #2]
 801831e:	fb11 f107 	smulbb	r1, r1, r7
 8018322:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018326:	fb06 1303 	mla	r3, r6, r3, r1
 801832a:	b29b      	uxth	r3, r3
 801832c:	1c5e      	adds	r6, r3, #1
 801832e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018332:	121b      	asrs	r3, r3, #8
 8018334:	70ab      	strb	r3, [r5, #2]
 8018336:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018338:	3503      	adds	r5, #3
 801833a:	449a      	add	sl, r3
 801833c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801833e:	4498      	add	r8, r3
 8018340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018342:	3b01      	subs	r3, #1
 8018344:	930d      	str	r3, [sp, #52]	; 0x34
 8018346:	e750      	b.n	80181ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018348:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801834a:	449a      	add	sl, r3
 801834c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801834e:	4498      	add	r8, r3
 8018350:	9b07      	ldr	r3, [sp, #28]
 8018352:	3b01      	subs	r3, #1
 8018354:	9307      	str	r3, [sp, #28]
 8018356:	9b08      	ldr	r3, [sp, #32]
 8018358:	3303      	adds	r3, #3
 801835a:	9308      	str	r3, [sp, #32]
 801835c:	e726      	b.n	80181ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801835e:	d026      	beq.n	80183ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018360:	9b07      	ldr	r3, [sp, #28]
 8018362:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8018364:	3b01      	subs	r3, #1
 8018366:	fb00 a003 	mla	r0, r0, r3, sl
 801836a:	1400      	asrs	r0, r0, #16
 801836c:	f53f af3a 	bmi.w	80181e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018370:	3901      	subs	r1, #1
 8018372:	4288      	cmp	r0, r1
 8018374:	f6bf af36 	bge.w	80181e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018378:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801837a:	fb01 8303 	mla	r3, r1, r3, r8
 801837e:	141b      	asrs	r3, r3, #16
 8018380:	f53f af30 	bmi.w	80181e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8018384:	3a01      	subs	r2, #1
 8018386:	4293      	cmp	r3, r2
 8018388:	f6bf af2c 	bge.w	80181e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801838c:	9b08      	ldr	r3, [sp, #32]
 801838e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018392:	1cdd      	adds	r5, r3, #3
 8018394:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8018398:	f1bc 0f00 	cmp.w	ip, #0
 801839c:	dc5f      	bgt.n	801845e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801839e:	9b07      	ldr	r3, [sp, #28]
 80183a0:	9a08      	ldr	r2, [sp, #32]
 80183a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80183aa:	441a      	add	r2, r3
 80183ac:	9208      	str	r2, [sp, #32]
 80183ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	f340 80e9 	ble.w	8018588 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80183b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80183ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80183bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80183c0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80183c4:	eef0 6a48 	vmov.f32	s13, s16
 80183c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80183cc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80183d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80183d4:	ee16 aa90 	vmov	sl, s13
 80183d8:	eef0 6a68 	vmov.f32	s13, s17
 80183dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80183e0:	ee16 8a90 	vmov	r8, s13
 80183e4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80183e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80183ec:	ee37 8a48 	vsub.f32	s16, s14, s16
 80183f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80183f4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80183f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80183fc:	ee18 2a10 	vmov	r2, s16
 8018400:	eeb0 8a47 	vmov.f32	s16, s14
 8018404:	fb92 f3f3 	sdiv	r3, r2, r3
 8018408:	ee18 2a90 	vmov	r2, s17
 801840c:	9333      	str	r3, [sp, #204]	; 0xcc
 801840e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018410:	eef0 8a67 	vmov.f32	s17, s15
 8018414:	fb92 f3f3 	sdiv	r3, r2, r3
 8018418:	9334      	str	r3, [sp, #208]	; 0xd0
 801841a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801841c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801841e:	3b01      	subs	r3, #1
 8018420:	930b      	str	r3, [sp, #44]	; 0x2c
 8018422:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018424:	bf08      	it	eq
 8018426:	4613      	moveq	r3, r2
 8018428:	9307      	str	r3, [sp, #28]
 801842a:	e6b1      	b.n	8018190 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801842c:	1c47      	adds	r7, r0, #1
 801842e:	d482      	bmi.n	8018336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018430:	42bb      	cmp	r3, r7
 8018432:	db80      	blt.n	8018336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018434:	1c67      	adds	r7, r4, #1
 8018436:	f53f af7e 	bmi.w	8018336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801843a:	42be      	cmp	r6, r7
 801843c:	f6ff af7b 	blt.w	8018336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8018440:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018442:	b236      	sxth	r6, r6
 8018444:	9001      	str	r0, [sp, #4]
 8018446:	b21b      	sxth	r3, r3
 8018448:	9600      	str	r6, [sp, #0]
 801844a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801844c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8018450:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018454:	4629      	mov	r1, r5
 8018456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018458:	f7ff fd58 	bl	8017f0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801845c:	e76b      	b.n	8018336 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801845e:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8018460:	ea4f 402a 	mov.w	r0, sl, asr #16
 8018464:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8018468:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801846c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8018470:	ea4f 4128 	mov.w	r1, r8, asr #16
 8018474:	fb07 0101 	mla	r1, r7, r1, r0
 8018478:	980a      	ldr	r0, [sp, #40]	; 0x28
 801847a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801847e:	1844      	adds	r4, r0, r1
 8018480:	5c40      	ldrb	r0, [r0, r1]
 8018482:	78a6      	ldrb	r6, [r4, #2]
 8018484:	7861      	ldrb	r1, [r4, #1]
 8018486:	960f      	str	r6, [sp, #60]	; 0x3c
 8018488:	78e6      	ldrb	r6, [r4, #3]
 801848a:	910d      	str	r1, [sp, #52]	; 0x34
 801848c:	9610      	str	r6, [sp, #64]	; 0x40
 801848e:	f894 9004 	ldrb.w	r9, [r4, #4]
 8018492:	f894 b005 	ldrb.w	fp, [r4, #5]
 8018496:	b192      	cbz	r2, 80184be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8018498:	f06f 0604 	mvn.w	r6, #4
 801849c:	2103      	movs	r1, #3
 801849e:	3405      	adds	r4, #5
 80184a0:	fb17 6701 	smlabb	r7, r7, r1, r6
 80184a4:	19e6      	adds	r6, r4, r7
 80184a6:	5de4      	ldrb	r4, [r4, r7]
 80184a8:	9417      	str	r4, [sp, #92]	; 0x5c
 80184aa:	7874      	ldrb	r4, [r6, #1]
 80184ac:	9419      	str	r4, [sp, #100]	; 0x64
 80184ae:	78b4      	ldrb	r4, [r6, #2]
 80184b0:	941b      	str	r4, [sp, #108]	; 0x6c
 80184b2:	78f4      	ldrb	r4, [r6, #3]
 80184b4:	9418      	str	r4, [sp, #96]	; 0x60
 80184b6:	7934      	ldrb	r4, [r6, #4]
 80184b8:	941a      	str	r4, [sp, #104]	; 0x68
 80184ba:	7974      	ldrb	r4, [r6, #5]
 80184bc:	941c      	str	r4, [sp, #112]	; 0x70
 80184be:	b29b      	uxth	r3, r3
 80184c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80184c2:	b292      	uxth	r2, r2
 80184c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80184c6:	3503      	adds	r5, #3
 80184c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80184cc:	fb03 f402 	mul.w	r4, r3, r2
 80184d0:	011b      	lsls	r3, r3, #4
 80184d2:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80184d6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80184da:	1b1b      	subs	r3, r3, r4
 80184dc:	b292      	uxth	r2, r2
 80184de:	b29b      	uxth	r3, r3
 80184e0:	1ab6      	subs	r6, r6, r2
 80184e2:	435f      	muls	r7, r3
 80184e4:	b2b6      	uxth	r6, r6
 80184e6:	fb03 f909 	mul.w	r9, r3, r9
 80184ea:	fb03 fb0b 	mul.w	fp, r3, fp
 80184ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184f0:	fb06 7000 	mla	r0, r6, r0, r7
 80184f4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80184f6:	fb06 bb03 	mla	fp, r6, r3, fp
 80184fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80184fc:	fb02 0007 	mla	r0, r2, r7, r0
 8018500:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8018502:	fb02 bb03 	mla	fp, r2, r3, fp
 8018506:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018508:	fb04 0007 	mla	r0, r4, r7, r0
 801850c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8018510:	fb17 f701 	smulbb	r7, r7, r1
 8018514:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018518:	990d      	ldr	r1, [sp, #52]	; 0x34
 801851a:	fb00 700e 	mla	r0, r0, lr, r7
 801851e:	fb06 9101 	mla	r1, r6, r1, r9
 8018522:	b280      	uxth	r0, r0
 8018524:	1c47      	adds	r7, r0, #1
 8018526:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801852a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801852c:	1200      	asrs	r0, r0, #8
 801852e:	f805 0c06 	strb.w	r0, [r5, #-6]
 8018532:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018534:	fb02 1100 	mla	r1, r2, r0, r1
 8018538:	981a      	ldr	r0, [sp, #104]	; 0x68
 801853a:	fb04 1100 	mla	r1, r4, r0, r1
 801853e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8018542:	fb04 b403 	mla	r4, r4, r3, fp
 8018546:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801854a:	fb10 f007 	smulbb	r0, r0, r7
 801854e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018552:	fb13 f307 	smulbb	r3, r3, r7
 8018556:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801855a:	fb01 010e 	mla	r1, r1, lr, r0
 801855e:	fb04 340e 	mla	r4, r4, lr, r3
 8018562:	b289      	uxth	r1, r1
 8018564:	b2a4      	uxth	r4, r4
 8018566:	1c48      	adds	r0, r1, #1
 8018568:	1c63      	adds	r3, r4, #1
 801856a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801856e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8018572:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018574:	1209      	asrs	r1, r1, #8
 8018576:	1224      	asrs	r4, r4, #8
 8018578:	449a      	add	sl, r3
 801857a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801857c:	f805 1c05 	strb.w	r1, [r5, #-5]
 8018580:	f805 4c04 	strb.w	r4, [r5, #-4]
 8018584:	4498      	add	r8, r3
 8018586:	e707      	b.n	8018398 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8018588:	b01f      	add	sp, #124	; 0x7c
 801858a:	ecbd 8b08 	vpop	{d8-d11}
 801858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018594 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8018594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018598:	b085      	sub	sp, #20
 801859a:	784d      	ldrb	r5, [r1, #1]
 801859c:	788e      	ldrb	r6, [r1, #2]
 801859e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80185a2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80185a6:	9403      	str	r4, [sp, #12]
 80185a8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80185ac:	780c      	ldrb	r4, [r1, #0]
 80185ae:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80185b2:	fb07 ce03 	mla	lr, r7, r3, ip
 80185b6:	2f00      	cmp	r7, #0
 80185b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80185bc:	eb02 0b0e 	add.w	fp, r2, lr
 80185c0:	db56      	blt.n	8018670 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80185c2:	45b9      	cmp	r9, r7
 80185c4:	dd54      	ble.n	8018670 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80185c6:	f1bc 0f00 	cmp.w	ip, #0
 80185ca:	db4d      	blt.n	8018668 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80185cc:	4563      	cmp	r3, ip
 80185ce:	dd4b      	ble.n	8018668 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80185d0:	f812 200e 	ldrb.w	r2, [r2, lr]
 80185d4:	9200      	str	r2, [sp, #0]
 80185d6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80185da:	9201      	str	r2, [sp, #4]
 80185dc:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80185e0:	9202      	str	r2, [sp, #8]
 80185e2:	f11c 0201 	adds.w	r2, ip, #1
 80185e6:	d44a      	bmi.n	801867e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80185e8:	4293      	cmp	r3, r2
 80185ea:	dd48      	ble.n	801867e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80185ec:	2800      	cmp	r0, #0
 80185ee:	d046      	beq.n	801867e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80185f0:	f89b e003 	ldrb.w	lr, [fp, #3]
 80185f4:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80185f8:	f89b a005 	ldrb.w	sl, [fp, #5]
 80185fc:	3701      	adds	r7, #1
 80185fe:	d446      	bmi.n	801868e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8018600:	45b9      	cmp	r9, r7
 8018602:	dd44      	ble.n	801868e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8018604:	9a03      	ldr	r2, [sp, #12]
 8018606:	2a00      	cmp	r2, #0
 8018608:	d045      	beq.n	8018696 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801860a:	f1bc 0f00 	cmp.w	ip, #0
 801860e:	db3a      	blt.n	8018686 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8018610:	4563      	cmp	r3, ip
 8018612:	dd38      	ble.n	8018686 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8018614:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018618:	f04f 0903 	mov.w	r9, #3
 801861c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8018620:	fb03 b209 	mla	r2, r3, r9, fp
 8018624:	fb03 b909 	mla	r9, r3, r9, fp
 8018628:	7852      	ldrb	r2, [r2, #1]
 801862a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801862e:	f11c 0c01 	adds.w	ip, ip, #1
 8018632:	d40d      	bmi.n	8018650 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018634:	4563      	cmp	r3, ip
 8018636:	dd0b      	ble.n	8018650 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018638:	b160      	cbz	r0, 8018654 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801863a:	2603      	movs	r6, #3
 801863c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8018640:	fb03 b506 	mla	r5, r3, r6, fp
 8018644:	fb03 b306 	mla	r3, r3, r6, fp
 8018648:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801864c:	792d      	ldrb	r5, [r5, #4]
 801864e:	795e      	ldrb	r6, [r3, #5]
 8018650:	280f      	cmp	r0, #15
 8018652:	d802      	bhi.n	801865a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8018654:	9b03      	ldr	r3, [sp, #12]
 8018656:	2b0f      	cmp	r3, #15
 8018658:	d922      	bls.n	80186a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801865a:	4b2f      	ldr	r3, [pc, #188]	; (8018718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801865c:	f240 1157 	movw	r1, #343	; 0x157
 8018660:	4a2e      	ldr	r2, [pc, #184]	; (801871c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8018662:	482f      	ldr	r0, [pc, #188]	; (8018720 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8018664:	f002 fd0a 	bl	801b07c <__assert_func>
 8018668:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801866c:	9400      	str	r4, [sp, #0]
 801866e:	e7b8      	b.n	80185e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8018670:	46b2      	mov	sl, r6
 8018672:	46a8      	mov	r8, r5
 8018674:	46a6      	mov	lr, r4
 8018676:	9400      	str	r4, [sp, #0]
 8018678:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801867c:	e7be      	b.n	80185fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801867e:	46b2      	mov	sl, r6
 8018680:	46a8      	mov	r8, r5
 8018682:	46a6      	mov	lr, r4
 8018684:	e7ba      	b.n	80185fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8018686:	46b1      	mov	r9, r6
 8018688:	462a      	mov	r2, r5
 801868a:	4627      	mov	r7, r4
 801868c:	e7cf      	b.n	801862e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801868e:	46b1      	mov	r9, r6
 8018690:	462a      	mov	r2, r5
 8018692:	4627      	mov	r7, r4
 8018694:	e7dc      	b.n	8018650 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8018696:	280f      	cmp	r0, #15
 8018698:	d8df      	bhi.n	801865a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801869a:	46b1      	mov	r9, r6
 801869c:	462a      	mov	r2, r5
 801869e:	4627      	mov	r7, r4
 80186a0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80186a4:	b280      	uxth	r0, r0
 80186a6:	fb00 f30b 	mul.w	r3, r0, fp
 80186aa:	0100      	lsls	r0, r0, #4
 80186ac:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80186b0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80186b4:	1ac0      	subs	r0, r0, r3
 80186b6:	fa1f fb8b 	uxth.w	fp, fp
 80186ba:	b280      	uxth	r0, r0
 80186bc:	ebac 0c0b 	sub.w	ip, ip, fp
 80186c0:	9003      	str	r0, [sp, #12]
 80186c2:	fa1f fc8c 	uxth.w	ip, ip
 80186c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80186ca:	9800      	ldr	r0, [sp, #0]
 80186cc:	fb0c ee00 	mla	lr, ip, r0, lr
 80186d0:	9803      	ldr	r0, [sp, #12]
 80186d2:	fb00 f808 	mul.w	r8, r0, r8
 80186d6:	9801      	ldr	r0, [sp, #4]
 80186d8:	fb0b ee07 	mla	lr, fp, r7, lr
 80186dc:	fb0c 8800 	mla	r8, ip, r0, r8
 80186e0:	fb03 ee04 	mla	lr, r3, r4, lr
 80186e4:	fb0b 8202 	mla	r2, fp, r2, r8
 80186e8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80186ec:	fb03 2505 	mla	r5, r3, r5, r2
 80186f0:	9a03      	ldr	r2, [sp, #12]
 80186f2:	f881 e000 	strb.w	lr, [r1]
 80186f6:	fb02 f00a 	mul.w	r0, r2, sl
 80186fa:	9a02      	ldr	r2, [sp, #8]
 80186fc:	122d      	asrs	r5, r5, #8
 80186fe:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018702:	704d      	strb	r5, [r1, #1]
 8018704:	fb0b c909 	mla	r9, fp, r9, ip
 8018708:	fb03 9606 	mla	r6, r3, r6, r9
 801870c:	1236      	asrs	r6, r6, #8
 801870e:	708e      	strb	r6, [r1, #2]
 8018710:	b005      	add	sp, #20
 8018712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018716:	bf00      	nop
 8018718:	0801f117 	.word	0x0801f117
 801871c:	0801f5ce 	.word	0x0801f5ce
 8018720:	0801f19f 	.word	0x0801f19f

08018724 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018728:	ed2d 8b08 	vpush	{d8-d11}
 801872c:	b09b      	sub	sp, #108	; 0x6c
 801872e:	eeb0 aa40 	vmov.f32	s20, s0
 8018732:	eef0 9a60 	vmov.f32	s19, s1
 8018736:	920b      	str	r2, [sp, #44]	; 0x2c
 8018738:	eeb0 9a41 	vmov.f32	s18, s2
 801873c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801873e:	eeb0 8a62 	vmov.f32	s16, s5
 8018742:	9019      	str	r0, [sp, #100]	; 0x64
 8018744:	eef0 8a43 	vmov.f32	s17, s6
 8018748:	6850      	ldr	r0, [r2, #4]
 801874a:	eef0 ba44 	vmov.f32	s23, s8
 801874e:	9109      	str	r1, [sp, #36]	; 0x24
 8018750:	eeb0 ba64 	vmov.f32	s22, s9
 8018754:	9306      	str	r3, [sp, #24]
 8018756:	eef0 aa45 	vmov.f32	s21, s10
 801875a:	6812      	ldr	r2, [r2, #0]
 801875c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8018760:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8018764:	fb00 1303 	mla	r3, r0, r3, r1
 8018768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801876c:	18d3      	adds	r3, r2, r3
 801876e:	9307      	str	r3, [sp, #28]
 8018770:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	9308      	str	r3, [sp, #32]
 8018776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018778:	2b00      	cmp	r3, #0
 801877a:	dc03      	bgt.n	8018784 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801877c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801877e:	2b00      	cmp	r3, #0
 8018780:	f340 81ab 	ble.w	8018ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8018784:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018786:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801878a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801878e:	1e48      	subs	r0, r1, #1
 8018790:	1e55      	subs	r5, r2, #1
 8018792:	9b06      	ldr	r3, [sp, #24]
 8018794:	2b00      	cmp	r3, #0
 8018796:	f340 80b1 	ble.w	80188fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801879a:	ea5f 462b 	movs.w	r6, fp, asr #16
 801879e:	ea4f 4324 	mov.w	r3, r4, asr #16
 80187a2:	d406      	bmi.n	80187b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80187a4:	4286      	cmp	r6, r0
 80187a6:	da04      	bge.n	80187b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	db02      	blt.n	80187b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80187ac:	42ab      	cmp	r3, r5
 80187ae:	f2c0 80a6 	blt.w	80188fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80187b2:	3601      	adds	r6, #1
 80187b4:	f100 8097 	bmi.w	80188e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187b8:	42b1      	cmp	r1, r6
 80187ba:	f2c0 8094 	blt.w	80188e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187be:	3301      	adds	r3, #1
 80187c0:	f100 8091 	bmi.w	80188e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187c4:	429a      	cmp	r2, r3
 80187c6:	f2c0 808e 	blt.w	80188e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80187ca:	9b06      	ldr	r3, [sp, #24]
 80187cc:	9e07      	ldr	r6, [sp, #28]
 80187ce:	930a      	str	r3, [sp, #40]	; 0x28
 80187d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	f340 80b0 	ble.w	8018938 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80187d8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80187da:	1425      	asrs	r5, r4, #16
 80187dc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80187de:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80187e2:	68c7      	ldr	r7, [r0, #12]
 80187e4:	ea5f 402b 	movs.w	r0, fp, asr #16
 80187e8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80187ec:	689b      	ldr	r3, [r3, #8]
 80187ee:	f100 80ea 	bmi.w	80189c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80187f2:	f103 3cff 	add.w	ip, r3, #4294967295
 80187f6:	4560      	cmp	r0, ip
 80187f8:	f280 80e5 	bge.w	80189c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80187fc:	2d00      	cmp	r5, #0
 80187fe:	f2c0 80e2 	blt.w	80189c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018802:	f107 3cff 	add.w	ip, r7, #4294967295
 8018806:	4565      	cmp	r5, ip
 8018808:	f280 80dd 	bge.w	80189c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801880c:	b21b      	sxth	r3, r3
 801880e:	fb05 0003 	mla	r0, r5, r3, r0
 8018812:	9d08      	ldr	r5, [sp, #32]
 8018814:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018818:	182f      	adds	r7, r5, r0
 801881a:	5c2d      	ldrb	r5, [r5, r0]
 801881c:	7878      	ldrb	r0, [r7, #1]
 801881e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8018822:	900c      	str	r0, [sp, #48]	; 0x30
 8018824:	f897 9003 	ldrb.w	r9, [r7, #3]
 8018828:	f897 8004 	ldrb.w	r8, [r7, #4]
 801882c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8018830:	b1c9      	cbz	r1, 8018866 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018832:	f04f 0c03 	mov.w	ip, #3
 8018836:	f06f 0004 	mvn.w	r0, #4
 801883a:	3705      	adds	r7, #5
 801883c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8018840:	eb07 0c03 	add.w	ip, r7, r3
 8018844:	5cfb      	ldrb	r3, [r7, r3]
 8018846:	930d      	str	r3, [sp, #52]	; 0x34
 8018848:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801884c:	930f      	str	r3, [sp, #60]	; 0x3c
 801884e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8018852:	9311      	str	r3, [sp, #68]	; 0x44
 8018854:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8018858:	930e      	str	r3, [sp, #56]	; 0x38
 801885a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801885e:	9310      	str	r3, [sp, #64]	; 0x40
 8018860:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8018864:	9312      	str	r3, [sp, #72]	; 0x48
 8018866:	b292      	uxth	r2, r2
 8018868:	980c      	ldr	r0, [sp, #48]	; 0x30
 801886a:	b289      	uxth	r1, r1
 801886c:	fb02 f301 	mul.w	r3, r2, r1
 8018870:	0112      	lsls	r2, r2, #4
 8018872:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8018876:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801887a:	1ad2      	subs	r2, r2, r3
 801887c:	b289      	uxth	r1, r1
 801887e:	b292      	uxth	r2, r2
 8018880:	1a7f      	subs	r7, r7, r1
 8018882:	fb02 f909 	mul.w	r9, r2, r9
 8018886:	b2bf      	uxth	r7, r7
 8018888:	fb02 f808 	mul.w	r8, r2, r8
 801888c:	fb02 fa0a 	mul.w	sl, r2, sl
 8018890:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018892:	fb07 9905 	mla	r9, r7, r5, r9
 8018896:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018898:	fb07 8800 	mla	r8, r7, r0, r8
 801889c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801889e:	fb07 aa0e 	mla	sl, r7, lr, sl
 80188a2:	fb01 9905 	mla	r9, r1, r5, r9
 80188a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80188a8:	fb01 8800 	mla	r8, r1, r0, r8
 80188ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80188ae:	fb01 a102 	mla	r1, r1, r2, sl
 80188b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80188b4:	fb03 9905 	mla	r9, r3, r5, r9
 80188b8:	fb03 8800 	mla	r8, r3, r0, r8
 80188bc:	fb03 1302 	mla	r3, r3, r2, r1
 80188c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80188c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80188c8:	121b      	asrs	r3, r3, #8
 80188ca:	f886 9000 	strb.w	r9, [r6]
 80188ce:	f886 8001 	strb.w	r8, [r6, #1]
 80188d2:	70b3      	strb	r3, [r6, #2]
 80188d4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80188d6:	3603      	adds	r6, #3
 80188d8:	449b      	add	fp, r3
 80188da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80188dc:	441c      	add	r4, r3
 80188de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188e0:	3b01      	subs	r3, #1
 80188e2:	930a      	str	r3, [sp, #40]	; 0x28
 80188e4:	e774      	b.n	80187d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80188e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80188e8:	449b      	add	fp, r3
 80188ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80188ec:	441c      	add	r4, r3
 80188ee:	9b06      	ldr	r3, [sp, #24]
 80188f0:	3b01      	subs	r3, #1
 80188f2:	9306      	str	r3, [sp, #24]
 80188f4:	9b07      	ldr	r3, [sp, #28]
 80188f6:	3303      	adds	r3, #3
 80188f8:	9307      	str	r3, [sp, #28]
 80188fa:	e74a      	b.n	8018792 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80188fc:	d024      	beq.n	8018948 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80188fe:	9b06      	ldr	r3, [sp, #24]
 8018900:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8018902:	3b01      	subs	r3, #1
 8018904:	fb00 b003 	mla	r0, r0, r3, fp
 8018908:	1400      	asrs	r0, r0, #16
 801890a:	f53f af5e 	bmi.w	80187ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801890e:	3901      	subs	r1, #1
 8018910:	4288      	cmp	r0, r1
 8018912:	f6bf af5a 	bge.w	80187ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018916:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8018918:	fb01 4303 	mla	r3, r1, r3, r4
 801891c:	141b      	asrs	r3, r3, #16
 801891e:	f53f af54 	bmi.w	80187ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018922:	3a01      	subs	r2, #1
 8018924:	4293      	cmp	r3, r2
 8018926:	f6bf af50 	bge.w	80187ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801892a:	9b07      	ldr	r3, [sp, #28]
 801892c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8018930:	1cde      	adds	r6, r3, #3
 8018932:	f1be 0f00 	cmp.w	lr, #0
 8018936:	dc5f      	bgt.n	80189f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8018938:	9b06      	ldr	r3, [sp, #24]
 801893a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801893e:	9b07      	ldr	r3, [sp, #28]
 8018940:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018944:	4423      	add	r3, r4
 8018946:	9307      	str	r3, [sp, #28]
 8018948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801894a:	2b00      	cmp	r3, #0
 801894c:	f340 80c5 	ble.w	8018ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8018950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018954:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018956:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801895a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801895e:	eef0 6a48 	vmov.f32	s13, s16
 8018962:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018966:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801896a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801896e:	ee16 ba90 	vmov	fp, s13
 8018972:	eef0 6a68 	vmov.f32	s13, s17
 8018976:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801897a:	ee16 4a90 	vmov	r4, s13
 801897e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018982:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018986:	ee37 8a48 	vsub.f32	s16, s14, s16
 801898a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801898e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018992:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018996:	ee18 2a10 	vmov	r2, s16
 801899a:	eeb0 8a47 	vmov.f32	s16, s14
 801899e:	fb92 f3f3 	sdiv	r3, r2, r3
 80189a2:	ee18 2a90 	vmov	r2, s17
 80189a6:	932f      	str	r3, [sp, #188]	; 0xbc
 80189a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80189aa:	eef0 8a67 	vmov.f32	s17, s15
 80189ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80189b2:	9330      	str	r3, [sp, #192]	; 0xc0
 80189b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80189b8:	3b01      	subs	r3, #1
 80189ba:	9309      	str	r3, [sp, #36]	; 0x24
 80189bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80189be:	bf08      	it	eq
 80189c0:	4613      	moveq	r3, r2
 80189c2:	9306      	str	r3, [sp, #24]
 80189c4:	e6d7      	b.n	8018776 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80189c6:	f110 0c01 	adds.w	ip, r0, #1
 80189ca:	d483      	bmi.n	80188d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189cc:	4563      	cmp	r3, ip
 80189ce:	db81      	blt.n	80188d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189d0:	f115 0c01 	adds.w	ip, r5, #1
 80189d4:	f53f af7e 	bmi.w	80188d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189d8:	4567      	cmp	r7, ip
 80189da:	f6ff af7b 	blt.w	80188d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189de:	b23f      	sxth	r7, r7
 80189e0:	b21b      	sxth	r3, r3
 80189e2:	9700      	str	r7, [sp, #0]
 80189e4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80189e8:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80189ec:	9a08      	ldr	r2, [sp, #32]
 80189ee:	4631      	mov	r1, r6
 80189f0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80189f2:	f7ff fdcf 	bl	8018594 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80189f6:	e76d      	b.n	80188d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80189f8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80189fa:	ea4f 402b 	mov.w	r0, fp, asr #16
 80189fe:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8018a02:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8018a06:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8018a0a:	1421      	asrs	r1, r4, #16
 8018a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8018a0e:	fb0c 0101 	mla	r1, ip, r1, r0
 8018a12:	9808      	ldr	r0, [sp, #32]
 8018a14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018a18:	1845      	adds	r5, r0, r1
 8018a1a:	5c40      	ldrb	r0, [r0, r1]
 8018a1c:	796f      	ldrb	r7, [r5, #5]
 8018a1e:	7869      	ldrb	r1, [r5, #1]
 8018a20:	f895 8002 	ldrb.w	r8, [r5, #2]
 8018a24:	f895 a003 	ldrb.w	sl, [r5, #3]
 8018a28:	f895 9004 	ldrb.w	r9, [r5, #4]
 8018a2c:	970c      	str	r7, [sp, #48]	; 0x30
 8018a2e:	b1a2      	cbz	r2, 8018a5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8018a30:	2703      	movs	r7, #3
 8018a32:	f06f 0304 	mvn.w	r3, #4
 8018a36:	3505      	adds	r5, #5
 8018a38:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8018a3c:	eb05 070c 	add.w	r7, r5, ip
 8018a40:	f815 500c 	ldrb.w	r5, [r5, ip]
 8018a44:	9513      	str	r5, [sp, #76]	; 0x4c
 8018a46:	787d      	ldrb	r5, [r7, #1]
 8018a48:	9515      	str	r5, [sp, #84]	; 0x54
 8018a4a:	78bd      	ldrb	r5, [r7, #2]
 8018a4c:	9517      	str	r5, [sp, #92]	; 0x5c
 8018a4e:	78fd      	ldrb	r5, [r7, #3]
 8018a50:	9514      	str	r5, [sp, #80]	; 0x50
 8018a52:	793d      	ldrb	r5, [r7, #4]
 8018a54:	9516      	str	r5, [sp, #88]	; 0x58
 8018a56:	797d      	ldrb	r5, [r7, #5]
 8018a58:	9518      	str	r5, [sp, #96]	; 0x60
 8018a5a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018a5e:	b292      	uxth	r2, r2
 8018a60:	3603      	adds	r6, #3
 8018a62:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018a66:	fb03 f502 	mul.w	r5, r3, r2
 8018a6a:	011b      	lsls	r3, r3, #4
 8018a6c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8018a70:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8018a74:	1b5b      	subs	r3, r3, r5
 8018a76:	b292      	uxth	r2, r2
 8018a78:	b29b      	uxth	r3, r3
 8018a7a:	1abf      	subs	r7, r7, r2
 8018a7c:	fb03 f909 	mul.w	r9, r3, r9
 8018a80:	b2bf      	uxth	r7, r7
 8018a82:	fb03 fa0a 	mul.w	sl, r3, sl
 8018a86:	fb07 9901 	mla	r9, r7, r1, r9
 8018a8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018a8c:	fb07 aa00 	mla	sl, r7, r0, sl
 8018a90:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018a92:	fb02 9901 	mla	r9, r2, r1, r9
 8018a96:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018a98:	fb02 aa00 	mla	sl, r2, r0, sl
 8018a9c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018a9e:	fb05 9901 	mla	r9, r5, r1, r9
 8018aa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018aa4:	fb05 aa00 	mla	sl, r5, r0, sl
 8018aa8:	434b      	muls	r3, r1
 8018aaa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018aac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ab0:	fb07 3308 	mla	r3, r7, r8, r3
 8018ab4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ab8:	f806 ac06 	strb.w	sl, [r6, #-6]
 8018abc:	fb02 3201 	mla	r2, r2, r1, r3
 8018ac0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018ac2:	f806 9c05 	strb.w	r9, [r6, #-5]
 8018ac6:	fb05 2503 	mla	r5, r5, r3, r2
 8018aca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018acc:	122d      	asrs	r5, r5, #8
 8018ace:	449b      	add	fp, r3
 8018ad0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018ad2:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018ad6:	441c      	add	r4, r3
 8018ad8:	e72b      	b.n	8018932 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018ada:	b01b      	add	sp, #108	; 0x6c
 8018adc:	ecbd 8b08 	vpop	{d8-d11}
 8018ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8018ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8018aec:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8018af0:	fb04 5603 	mla	r6, r4, r3, r5
 8018af4:	2c00      	cmp	r4, #0
 8018af6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8018afa:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8018afe:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8018b02:	db36      	blt.n	8018b72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8018b04:	45a6      	cmp	lr, r4
 8018b06:	dd34      	ble.n	8018b72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8018b08:	2d00      	cmp	r5, #0
 8018b0a:	db30      	blt.n	8018b6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8018b0c:	42ab      	cmp	r3, r5
 8018b0e:	dd2e      	ble.n	8018b6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8018b10:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8018b14:	1c6e      	adds	r6, r5, #1
 8018b16:	d42f      	bmi.n	8018b78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8018b18:	42b3      	cmp	r3, r6
 8018b1a:	dd2d      	ble.n	8018b78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8018b1c:	b370      	cbz	r0, 8018b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8018b1e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018b22:	3401      	adds	r4, #1
 8018b24:	d42e      	bmi.n	8018b84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8018b26:	45a6      	cmp	lr, r4
 8018b28:	dd2c      	ble.n	8018b84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8018b2a:	b377      	cbz	r7, 8018b8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8018b2c:	2d00      	cmp	r5, #0
 8018b2e:	db27      	blt.n	8018b80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8018b30:	42ab      	cmp	r3, r5
 8018b32:	dd25      	ble.n	8018b80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8018b34:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8018b38:	3501      	adds	r5, #1
 8018b3a:	d429      	bmi.n	8018b90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8018b3c:	42ab      	cmp	r3, r5
 8018b3e:	dd27      	ble.n	8018b90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8018b40:	b340      	cbz	r0, 8018b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8018b42:	3301      	adds	r3, #1
 8018b44:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8018b48:	280f      	cmp	r0, #15
 8018b4a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018b4e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018b52:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018b56:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8018b5a:	d801      	bhi.n	8018b60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8018b5c:	2f0f      	cmp	r7, #15
 8018b5e:	d91b      	bls.n	8018b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8018b60:	4b89      	ldr	r3, [pc, #548]	; (8018d88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8018b62:	f240 1157 	movw	r1, #343	; 0x157
 8018b66:	4a89      	ldr	r2, [pc, #548]	; (8018d8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8018b68:	4889      	ldr	r0, [pc, #548]	; (8018d90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8018b6a:	f002 fa87 	bl	801b07c <__assert_func>
 8018b6e:	2200      	movs	r2, #0
 8018b70:	e7d0      	b.n	8018b14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8018b72:	2600      	movs	r6, #0
 8018b74:	4632      	mov	r2, r6
 8018b76:	e7d4      	b.n	8018b22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8018b78:	2600      	movs	r6, #0
 8018b7a:	e7d2      	b.n	8018b22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8018b7c:	4606      	mov	r6, r0
 8018b7e:	e7d0      	b.n	8018b22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8018b80:	2400      	movs	r4, #0
 8018b82:	e7d9      	b.n	8018b38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8018b84:	2300      	movs	r3, #0
 8018b86:	461c      	mov	r4, r3
 8018b88:	e7de      	b.n	8018b48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018b8a:	463b      	mov	r3, r7
 8018b8c:	463c      	mov	r4, r7
 8018b8e:	e7db      	b.n	8018b48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018b90:	2300      	movs	r3, #0
 8018b92:	e7d9      	b.n	8018b48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018b94:	4603      	mov	r3, r0
 8018b96:	e7d7      	b.n	8018b48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8018b98:	b280      	uxth	r0, r0
 8018b9a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018b9e:	b2bf      	uxth	r7, r7
 8018ba0:	fb00 fe07 	mul.w	lr, r0, r7
 8018ba4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018ba8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018bac:	eba0 0c0e 	sub.w	ip, r0, lr
 8018bb0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8018bb4:	b2bf      	uxth	r7, r7
 8018bb6:	fa1f fc8c 	uxth.w	ip, ip
 8018bba:	eba5 0507 	sub.w	r5, r5, r7
 8018bbe:	fb0c f00a 	mul.w	r0, ip, sl
 8018bc2:	b2ad      	uxth	r5, r5
 8018bc4:	fb05 000b 	mla	r0, r5, fp, r0
 8018bc8:	fb07 0009 	mla	r0, r7, r9, r0
 8018bcc:	fb0e 0008 	mla	r0, lr, r8, r0
 8018bd0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018bd4:	9001      	str	r0, [sp, #4]
 8018bd6:	d018      	beq.n	8018c0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8018bd8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8018bdc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018be0:	fb0b f000 	mul.w	r0, fp, r0
 8018be4:	fb0b fb02 	mul.w	fp, fp, r2
 8018be8:	0a02      	lsrs	r2, r0, #8
 8018bea:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8018bee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018bf2:	4402      	add	r2, r0
 8018bf4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8018bf8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8018bfc:	0a12      	lsrs	r2, r2, #8
 8018bfe:	0a00      	lsrs	r0, r0, #8
 8018c00:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018c04:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018c08:	4302      	orrs	r2, r0
 8018c0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018c0e:	d01a      	beq.n	8018c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8018c10:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8018c14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018c18:	fb0a f000 	mul.w	r0, sl, r0
 8018c1c:	fb0a fa06 	mul.w	sl, sl, r6
 8018c20:	0a06      	lsrs	r6, r0, #8
 8018c22:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8018c26:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018c2a:	4406      	add	r6, r0
 8018c2c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018c30:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018c34:	0a36      	lsrs	r6, r6, #8
 8018c36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018c3a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018c3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018c42:	ea46 060a 	orr.w	r6, r6, sl
 8018c46:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018c4a:	d01b      	beq.n	8018c84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8018c4c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018c50:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018c54:	fb09 fa0a 	mul.w	sl, r9, sl
 8018c58:	fb09 f004 	mul.w	r0, r9, r4
 8018c5c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018c60:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018c64:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8018c68:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018c6c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8018c70:	4454      	add	r4, sl
 8018c72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018c76:	0a24      	lsrs	r4, r4, #8
 8018c78:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018c7c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018c80:	ea44 0409 	orr.w	r4, r4, r9
 8018c84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018c88:	d01b      	beq.n	8018cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8018c8a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8018c8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018c92:	fb08 f909 	mul.w	r9, r8, r9
 8018c96:	fb08 f003 	mul.w	r0, r8, r3
 8018c9a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018c9e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018ca2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8018ca6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018caa:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8018cae:	444b      	add	r3, r9
 8018cb0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018cb4:	0a1b      	lsrs	r3, r3, #8
 8018cb6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018cba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018cbe:	ea43 0308 	orr.w	r3, r3, r8
 8018cc2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8018cc6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018cca:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8018cce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018cd2:	fb0c f000 	mul.w	r0, ip, r0
 8018cd6:	fb0c f606 	mul.w	r6, ip, r6
 8018cda:	fb05 0808 	mla	r8, r5, r8, r0
 8018cde:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8018ce2:	fb05 6502 	mla	r5, r5, r2, r6
 8018ce6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018cea:	fb07 8800 	mla	r8, r7, r0, r8
 8018cee:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8018cf2:	fb07 5704 	mla	r7, r7, r4, r5
 8018cf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018cfa:	fb0e 8000 	mla	r0, lr, r0, r8
 8018cfe:	fb0e 7e03 	mla	lr, lr, r3, r7
 8018d02:	9b01      	ldr	r3, [sp, #4]
 8018d04:	0a00      	lsrs	r0, r0, #8
 8018d06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018d0a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018d0e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018d12:	ea40 0e0e 	orr.w	lr, r0, lr
 8018d16:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018d1a:	b280      	uxth	r0, r0
 8018d1c:	fa5f f48e 	uxtb.w	r4, lr
 8018d20:	4343      	muls	r3, r0
 8018d22:	fb14 f400 	smulbb	r4, r4, r0
 8018d26:	1c5a      	adds	r2, r3, #1
 8018d28:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018d2c:	780b      	ldrb	r3, [r1, #0]
 8018d2e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8018d32:	b2d2      	uxtb	r2, r2
 8018d34:	fb03 4302 	mla	r3, r3, r2, r4
 8018d38:	b29b      	uxth	r3, r3
 8018d3a:	1c5c      	adds	r4, r3, #1
 8018d3c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8018d40:	784c      	ldrb	r4, [r1, #1]
 8018d42:	fb14 f402 	smulbb	r4, r4, r2
 8018d46:	121b      	asrs	r3, r3, #8
 8018d48:	700b      	strb	r3, [r1, #0]
 8018d4a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8018d4e:	fb03 4300 	mla	r3, r3, r0, r4
 8018d52:	b29b      	uxth	r3, r3
 8018d54:	1c5c      	adds	r4, r3, #1
 8018d56:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8018d5a:	121b      	asrs	r3, r3, #8
 8018d5c:	704b      	strb	r3, [r1, #1]
 8018d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8018d62:	f891 e002 	ldrb.w	lr, [r1, #2]
 8018d66:	fb1e fe02 	smulbb	lr, lr, r2
 8018d6a:	fb03 ee00 	mla	lr, r3, r0, lr
 8018d6e:	fa1f fe8e 	uxth.w	lr, lr
 8018d72:	f10e 0301 	add.w	r3, lr, #1
 8018d76:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8018d7a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018d7e:	f881 e002 	strb.w	lr, [r1, #2]
 8018d82:	b003      	add	sp, #12
 8018d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d88:	0801f117 	.word	0x0801f117
 8018d8c:	0801f5ce 	.word	0x0801f5ce
 8018d90:	0801f19f 	.word	0x0801f19f

08018d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d98:	ed2d 8b08 	vpush	{d8-d11}
 8018d9c:	b09d      	sub	sp, #116	; 0x74
 8018d9e:	eeb0 aa40 	vmov.f32	s20, s0
 8018da2:	eef0 9a60 	vmov.f32	s19, s1
 8018da6:	9219      	str	r2, [sp, #100]	; 0x64
 8018da8:	eeb0 9a41 	vmov.f32	s18, s2
 8018dac:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018dae:	eeb0 8a62 	vmov.f32	s16, s5
 8018db2:	9307      	str	r3, [sp, #28]
 8018db4:	eef0 8a43 	vmov.f32	s17, s6
 8018db8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8018dbc:	eef0 ba44 	vmov.f32	s23, s8
 8018dc0:	901b      	str	r0, [sp, #108]	; 0x6c
 8018dc2:	eeb0 ba64 	vmov.f32	s22, s9
 8018dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8018dc8:	eef0 aa45 	vmov.f32	s21, s10
 8018dcc:	6850      	ldr	r0, [r2, #4]
 8018dce:	9117      	str	r1, [sp, #92]	; 0x5c
 8018dd0:	6812      	ldr	r2, [r2, #0]
 8018dd2:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8018dd6:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8018dda:	fb00 1303 	mla	r3, r0, r3, r1
 8018dde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018de2:	18d3      	adds	r3, r2, r3
 8018de4:	930a      	str	r3, [sp, #40]	; 0x28
 8018de6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	9310      	str	r3, [sp, #64]	; 0x40
 8018dec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8018df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8018df2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	dc03      	bgt.n	8018e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	f340 8368 	ble.w	80194d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8018e00:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018e02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018e06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018e0a:	1e48      	subs	r0, r1, #1
 8018e0c:	1e57      	subs	r7, r2, #1
 8018e0e:	9b07      	ldr	r3, [sp, #28]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	f340 8187 	ble.w	8019124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8018e16:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8018e1a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018e1e:	d406      	bmi.n	8018e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018e20:	4584      	cmp	ip, r0
 8018e22:	da04      	bge.n	8018e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	db02      	blt.n	8018e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018e28:	42bb      	cmp	r3, r7
 8018e2a:	f2c0 817c 	blt.w	8019126 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8018e2e:	f11c 0c01 	adds.w	ip, ip, #1
 8018e32:	f100 816c 	bmi.w	801910e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e36:	4561      	cmp	r1, ip
 8018e38:	f2c0 8169 	blt.w	801910e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e3c:	3301      	adds	r3, #1
 8018e3e:	f100 8166 	bmi.w	801910e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e42:	429a      	cmp	r2, r3
 8018e44:	f2c0 8163 	blt.w	801910e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018e48:	9b07      	ldr	r3, [sp, #28]
 8018e4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018e4c:	9318      	str	r3, [sp, #96]	; 0x60
 8018e4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	f340 8186 	ble.w	8019162 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8018e56:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018e58:	142a      	asrs	r2, r5, #16
 8018e5a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8018e5e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8018e62:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8018e66:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8018e6a:	f100 81cb 	bmi.w	8019204 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018e6e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018e72:	4542      	cmp	r2, r8
 8018e74:	f280 81c6 	bge.w	8019204 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	f2c0 81c3 	blt.w	8019204 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018e7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8018e82:	4540      	cmp	r0, r8
 8018e84:	f280 81be 	bge.w	8019204 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8018e88:	fa0f f38e 	sxth.w	r3, lr
 8018e8c:	fb00 2203 	mla	r2, r0, r3, r2
 8018e90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018e92:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8018e96:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8018e9a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8018e9e:	2900      	cmp	r1, #0
 8018ea0:	f000 81a6 	beq.w	80191f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8018ea4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018ea8:	900c      	str	r0, [sp, #48]	; 0x30
 8018eaa:	0e00      	lsrs	r0, r0, #24
 8018eac:	9013      	str	r0, [sp, #76]	; 0x4c
 8018eae:	f1bc 0f00 	cmp.w	ip, #0
 8018eb2:	d00f      	beq.n	8018ed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018eb8:	3b01      	subs	r3, #1
 8018eba:	009b      	lsls	r3, r3, #2
 8018ebc:	3304      	adds	r3, #4
 8018ebe:	eb08 0003 	add.w	r0, r8, r3
 8018ec2:	f858 3003 	ldr.w	r3, [r8, r3]
 8018ec6:	9308      	str	r3, [sp, #32]
 8018ec8:	0e1b      	lsrs	r3, r3, #24
 8018eca:	9311      	str	r3, [sp, #68]	; 0x44
 8018ecc:	6843      	ldr	r3, [r0, #4]
 8018ece:	930d      	str	r3, [sp, #52]	; 0x34
 8018ed0:	0e1b      	lsrs	r3, r3, #24
 8018ed2:	9314      	str	r3, [sp, #80]	; 0x50
 8018ed4:	b289      	uxth	r1, r1
 8018ed6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018ed8:	fa1f fc8c 	uxth.w	ip, ip
 8018edc:	0108      	lsls	r0, r1, #4
 8018ede:	fb01 f90c 	mul.w	r9, r1, ip
 8018ee2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8018ee6:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8018eea:	eba0 0809 	sub.w	r8, r0, r9
 8018eee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ef0:	fa1f f18c 	uxth.w	r1, ip
 8018ef4:	fa1f f888 	uxth.w	r8, r8
 8018ef8:	1a5b      	subs	r3, r3, r1
 8018efa:	fb08 f000 	mul.w	r0, r8, r0
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	fb03 000e 	mla	r0, r3, lr, r0
 8018f04:	fb01 0004 	mla	r0, r1, r4, r0
 8018f08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018f0a:	fb09 0004 	mla	r0, r9, r4, r0
 8018f0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018f12:	2800      	cmp	r0, #0
 8018f14:	f000 80f2 	beq.w	80190fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8018f18:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018f1c:	d01b      	beq.n	8018f56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8018f1e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8018f22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018f26:	fb0e fa0a 	mul.w	sl, lr, sl
 8018f2a:	fb0e fe02 	mul.w	lr, lr, r2
 8018f2e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8018f32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018f36:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018f3a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018f3e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018f42:	4452      	add	r2, sl
 8018f44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018f48:	0a12      	lsrs	r2, r2, #8
 8018f4a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018f4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018f52:	ea42 020c 	orr.w	r2, r2, ip
 8018f56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f58:	2cff      	cmp	r4, #255	; 0xff
 8018f5a:	d021      	beq.n	8018fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8018f5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018f5e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018f62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f64:	fb04 fb0b 	mul.w	fp, r4, fp
 8018f68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018f6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018f6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f70:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018f74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018f78:	fb04 fa0a 	mul.w	sl, r4, sl
 8018f7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018f80:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018f84:	44de      	add	lr, fp
 8018f86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018f8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018f8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018f92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018f96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018f9a:	ea4e 040a 	orr.w	r4, lr, sl
 8018f9e:	940c      	str	r4, [sp, #48]	; 0x30
 8018fa0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fa2:	2cff      	cmp	r4, #255	; 0xff
 8018fa4:	d021      	beq.n	8018fea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8018fa6:	9c08      	ldr	r4, [sp, #32]
 8018fa8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018fac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fae:	fb04 fb0b 	mul.w	fp, r4, fp
 8018fb2:	9c08      	ldr	r4, [sp, #32]
 8018fb4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018fb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018fbe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018fc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8018fc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018fca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018fce:	44de      	add	lr, fp
 8018fd0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018fd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018fd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018fdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018fe0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018fe4:	ea4e 040a 	orr.w	r4, lr, sl
 8018fe8:	9408      	str	r4, [sp, #32]
 8018fea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018fec:	2cff      	cmp	r4, #255	; 0xff
 8018fee:	d021      	beq.n	8019034 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8018ff0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018ff2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018ff6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018ff8:	fb04 fb0b 	mul.w	fp, r4, fp
 8018ffc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018ffe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019002:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019004:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019008:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801900c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019010:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019014:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019018:	44de      	add	lr, fp
 801901a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801901e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019022:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019026:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801902a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801902e:	ea4e 040a 	orr.w	r4, lr, sl
 8019032:	940d      	str	r4, [sp, #52]	; 0x34
 8019034:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019036:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801903a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801903e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019042:	9c08      	ldr	r4, [sp, #32]
 8019044:	fb08 fc0c 	mul.w	ip, r8, ip
 8019048:	fb03 cc0e 	mla	ip, r3, lr, ip
 801904c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019050:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019052:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019056:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801905a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801905c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019060:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019064:	fb08 f80e 	mul.w	r8, r8, lr
 8019068:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801906c:	fb03 8202 	mla	r2, r3, r2, r8
 8019070:	9b08      	ldr	r3, [sp, #32]
 8019072:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019076:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801907a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801907c:	fb01 220a 	mla	r2, r1, sl, r2
 8019080:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8019084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019086:	fb09 2901 	mla	r9, r9, r1, r2
 801908a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801908c:	4343      	muls	r3, r0
 801908e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019092:	1c58      	adds	r0, r3, #1
 8019094:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019098:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801909c:	783b      	ldrb	r3, [r7, #0]
 801909e:	ea4c 0c09 	orr.w	ip, ip, r9
 80190a2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80190a6:	fa5f f28c 	uxtb.w	r2, ip
 80190aa:	b2c0      	uxtb	r0, r0
 80190ac:	fb12 f201 	smulbb	r2, r2, r1
 80190b0:	fb03 2300 	mla	r3, r3, r0, r2
 80190b4:	b29b      	uxth	r3, r3
 80190b6:	1c5a      	adds	r2, r3, #1
 80190b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80190bc:	787a      	ldrb	r2, [r7, #1]
 80190be:	fb12 f200 	smulbb	r2, r2, r0
 80190c2:	121b      	asrs	r3, r3, #8
 80190c4:	703b      	strb	r3, [r7, #0]
 80190c6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80190ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80190ce:	fb03 2301 	mla	r3, r3, r1, r2
 80190d2:	b29b      	uxth	r3, r3
 80190d4:	1c5a      	adds	r2, r3, #1
 80190d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80190da:	121b      	asrs	r3, r3, #8
 80190dc:	707b      	strb	r3, [r7, #1]
 80190de:	78bb      	ldrb	r3, [r7, #2]
 80190e0:	fb13 f000 	smulbb	r0, r3, r0
 80190e4:	fb0c 0c01 	mla	ip, ip, r1, r0
 80190e8:	fa1f fc8c 	uxth.w	ip, ip
 80190ec:	f10c 0301 	add.w	r3, ip, #1
 80190f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80190f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80190f8:	f887 c002 	strb.w	ip, [r7, #2]
 80190fc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80190fe:	3703      	adds	r7, #3
 8019100:	441d      	add	r5, r3
 8019102:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019104:	441e      	add	r6, r3
 8019106:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019108:	3b01      	subs	r3, #1
 801910a:	9318      	str	r3, [sp, #96]	; 0x60
 801910c:	e69f      	b.n	8018e4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801910e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019110:	441d      	add	r5, r3
 8019112:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019114:	441e      	add	r6, r3
 8019116:	9b07      	ldr	r3, [sp, #28]
 8019118:	3b01      	subs	r3, #1
 801911a:	9307      	str	r3, [sp, #28]
 801911c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801911e:	3303      	adds	r3, #3
 8019120:	930a      	str	r3, [sp, #40]	; 0x28
 8019122:	e674      	b.n	8018e0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019124:	d025      	beq.n	8019172 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019126:	9b07      	ldr	r3, [sp, #28]
 8019128:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801912a:	3b01      	subs	r3, #1
 801912c:	fb00 5003 	mla	r0, r0, r3, r5
 8019130:	1400      	asrs	r0, r0, #16
 8019132:	f53f ae89 	bmi.w	8018e48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019136:	3901      	subs	r1, #1
 8019138:	4288      	cmp	r0, r1
 801913a:	f6bf ae85 	bge.w	8018e48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801913e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8019140:	fb01 6303 	mla	r3, r1, r3, r6
 8019144:	141b      	asrs	r3, r3, #16
 8019146:	f53f ae7f 	bmi.w	8018e48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801914a:	3a01      	subs	r2, #1
 801914c:	4293      	cmp	r3, r2
 801914e:	f6bf ae7b 	bge.w	8018e48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019154:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019158:	f103 0e03 	add.w	lr, r3, #3
 801915c:	f1bb 0f00 	cmp.w	fp, #0
 8019160:	dc6e      	bgt.n	8019240 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8019162:	9b07      	ldr	r3, [sp, #28]
 8019164:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801916a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801916e:	4423      	add	r3, r4
 8019170:	930a      	str	r3, [sp, #40]	; 0x28
 8019172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019174:	2b00      	cmp	r3, #0
 8019176:	f340 81ab 	ble.w	80194d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801917a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801917e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019180:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019184:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019188:	eef0 6a48 	vmov.f32	s13, s16
 801918c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019190:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019194:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019198:	ee16 5a90 	vmov	r5, s13
 801919c:	eef0 6a68 	vmov.f32	s13, s17
 80191a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191a4:	ee16 6a90 	vmov	r6, s13
 80191a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80191ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80191b0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80191b4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80191b8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80191bc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80191c0:	ee18 2a10 	vmov	r2, s16
 80191c4:	eeb0 8a47 	vmov.f32	s16, s14
 80191c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80191cc:	ee18 2a90 	vmov	r2, s17
 80191d0:	9331      	str	r3, [sp, #196]	; 0xc4
 80191d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80191d4:	eef0 8a67 	vmov.f32	s17, s15
 80191d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80191dc:	9332      	str	r3, [sp, #200]	; 0xc8
 80191de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80191e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80191e2:	3b01      	subs	r3, #1
 80191e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80191e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80191e8:	bf08      	it	eq
 80191ea:	4613      	moveq	r3, r2
 80191ec:	9307      	str	r3, [sp, #28]
 80191ee:	e600      	b.n	8018df2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80191f0:	f1bc 0f00 	cmp.w	ip, #0
 80191f4:	f43f ae6e 	beq.w	8018ed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80191f8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80191fc:	9308      	str	r3, [sp, #32]
 80191fe:	0e1b      	lsrs	r3, r3, #24
 8019200:	9311      	str	r3, [sp, #68]	; 0x44
 8019202:	e667      	b.n	8018ed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019204:	f112 0801 	adds.w	r8, r2, #1
 8019208:	f53f af78 	bmi.w	80190fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801920c:	45c6      	cmp	lr, r8
 801920e:	f6ff af75 	blt.w	80190fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019212:	f110 0801 	adds.w	r8, r0, #1
 8019216:	f53f af71 	bmi.w	80190fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801921a:	4543      	cmp	r3, r8
 801921c:	f6ff af6e 	blt.w	80190fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019220:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019222:	b21b      	sxth	r3, r3
 8019224:	9201      	str	r2, [sp, #4]
 8019226:	9300      	str	r3, [sp, #0]
 8019228:	fa0f f38e 	sxth.w	r3, lr
 801922c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801922e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019232:	e9cd c404 	strd	ip, r4, [sp, #16]
 8019236:	4639      	mov	r1, r7
 8019238:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801923a:	f7ff fc53 	bl	8018ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801923e:	e75d      	b.n	80190fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8019240:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8019242:	142f      	asrs	r7, r5, #16
 8019244:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019246:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801924a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801924e:	1433      	asrs	r3, r6, #16
 8019250:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019254:	fb02 7303 	mla	r3, r2, r3, r7
 8019258:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801925c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019260:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019264:	2900      	cmp	r1, #0
 8019266:	f000 812a 	beq.w	80194be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801926a:	687c      	ldr	r4, [r7, #4]
 801926c:	940e      	str	r4, [sp, #56]	; 0x38
 801926e:	0e24      	lsrs	r4, r4, #24
 8019270:	9415      	str	r4, [sp, #84]	; 0x54
 8019272:	b178      	cbz	r0, 8019294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8019274:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019278:	3a01      	subs	r2, #1
 801927a:	0092      	lsls	r2, r2, #2
 801927c:	3204      	adds	r2, #4
 801927e:	eb07 0802 	add.w	r8, r7, r2
 8019282:	58ba      	ldr	r2, [r7, r2]
 8019284:	9209      	str	r2, [sp, #36]	; 0x24
 8019286:	0e12      	lsrs	r2, r2, #24
 8019288:	9212      	str	r2, [sp, #72]	; 0x48
 801928a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801928e:	920f      	str	r2, [sp, #60]	; 0x3c
 8019290:	0e12      	lsrs	r2, r2, #24
 8019292:	9216      	str	r2, [sp, #88]	; 0x58
 8019294:	b289      	uxth	r1, r1
 8019296:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019298:	b280      	uxth	r0, r0
 801929a:	fb01 f900 	mul.w	r9, r1, r0
 801929e:	0109      	lsls	r1, r1, #4
 80192a0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80192a4:	eba1 0809 	sub.w	r8, r1, r9
 80192a8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80192ac:	9915      	ldr	r1, [sp, #84]	; 0x54
 80192ae:	b280      	uxth	r0, r0
 80192b0:	fa1f f888 	uxth.w	r8, r8
 80192b4:	1a12      	subs	r2, r2, r0
 80192b6:	fb08 f101 	mul.w	r1, r8, r1
 80192ba:	b292      	uxth	r2, r2
 80192bc:	fb02 110c 	mla	r1, r2, ip, r1
 80192c0:	fb00 1104 	mla	r1, r0, r4, r1
 80192c4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80192c6:	fb09 1104 	mla	r1, r9, r4, r1
 80192ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80192ce:	2900      	cmp	r1, #0
 80192d0:	f000 80ec 	beq.w	80194ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80192d4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80192d8:	d019      	beq.n	801930e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80192da:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80192de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80192e2:	fb0c fa0a 	mul.w	sl, ip, sl
 80192e6:	fb0c fc03 	mul.w	ip, ip, r3
 80192ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80192ee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80192f2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80192f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80192fa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80192fe:	4453      	add	r3, sl
 8019300:	0a3f      	lsrs	r7, r7, #8
 8019302:	0a1b      	lsrs	r3, r3, #8
 8019304:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019308:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801930c:	433b      	orrs	r3, r7
 801930e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019310:	2cff      	cmp	r4, #255	; 0xff
 8019312:	d020      	beq.n	8019356 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8019314:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019316:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801931a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801931c:	4367      	muls	r7, r4
 801931e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019320:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019324:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019328:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801932a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801932e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019332:	fb04 fa0a 	mul.w	sl, r4, sl
 8019336:	44bc      	add	ip, r7
 8019338:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801933c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019340:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019344:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019348:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801934c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019350:	ea4c 040a 	orr.w	r4, ip, sl
 8019354:	940e      	str	r4, [sp, #56]	; 0x38
 8019356:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019358:	2cff      	cmp	r4, #255	; 0xff
 801935a:	d020      	beq.n	801939e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801935c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801935e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019362:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019364:	4367      	muls	r7, r4
 8019366:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019368:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801936c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019370:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019372:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019376:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801937a:	fb04 fa0a 	mul.w	sl, r4, sl
 801937e:	44bc      	add	ip, r7
 8019380:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019384:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019388:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801938c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019394:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019398:	ea4c 040a 	orr.w	r4, ip, sl
 801939c:	9409      	str	r4, [sp, #36]	; 0x24
 801939e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80193a0:	2cff      	cmp	r4, #255	; 0xff
 80193a2:	d020      	beq.n	80193e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 80193a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80193a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80193aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80193ac:	4367      	muls	r7, r4
 80193ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80193b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80193b4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80193b8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80193ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80193be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80193c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80193c6:	44bc      	add	ip, r7
 80193c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80193cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80193d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80193d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80193d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80193dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80193e0:	ea4c 040a 	orr.w	r4, ip, sl
 80193e4:	940f      	str	r4, [sp, #60]	; 0x3c
 80193e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80193e8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80193ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80193f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80193f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80193f6:	fb08 f707 	mul.w	r7, r8, r7
 80193fa:	fb02 770c 	mla	r7, r2, ip, r7
 80193fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019402:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019404:	fb00 770c 	mla	r7, r0, ip, r7
 8019408:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801940c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801940e:	fb09 770c 	mla	r7, r9, ip, r7
 8019412:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019416:	fb08 f80c 	mul.w	r8, r8, ip
 801941a:	0a3f      	lsrs	r7, r7, #8
 801941c:	fb02 8303 	mla	r3, r2, r3, r8
 8019420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019422:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019426:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801942a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801942c:	fb00 330a 	mla	r3, r0, sl, r3
 8019430:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019434:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019436:	fb09 3c0c 	mla	ip, r9, ip, r3
 801943a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801943c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019440:	434b      	muls	r3, r1
 8019442:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019446:	1c59      	adds	r1, r3, #1
 8019448:	ea47 070c 	orr.w	r7, r7, ip
 801944c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019450:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019454:	b2fa      	uxtb	r2, r7
 8019456:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801945a:	fb12 f200 	smulbb	r2, r2, r0
 801945e:	b2c9      	uxtb	r1, r1
 8019460:	fb03 2301 	mla	r3, r3, r1, r2
 8019464:	b29b      	uxth	r3, r3
 8019466:	1c5a      	adds	r2, r3, #1
 8019468:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801946c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019470:	fb12 f201 	smulbb	r2, r2, r1
 8019474:	121b      	asrs	r3, r3, #8
 8019476:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801947a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801947e:	0c3f      	lsrs	r7, r7, #16
 8019480:	fb03 2300 	mla	r3, r3, r0, r2
 8019484:	b29b      	uxth	r3, r3
 8019486:	1c5a      	adds	r2, r3, #1
 8019488:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801948c:	121b      	asrs	r3, r3, #8
 801948e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019492:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019496:	fb13 f101 	smulbb	r1, r3, r1
 801949a:	fb07 1700 	mla	r7, r7, r0, r1
 801949e:	b2bf      	uxth	r7, r7
 80194a0:	1c79      	adds	r1, r7, #1
 80194a2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80194a6:	123f      	asrs	r7, r7, #8
 80194a8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80194ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80194ae:	f10e 0e03 	add.w	lr, lr, #3
 80194b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80194b6:	441d      	add	r5, r3
 80194b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80194ba:	441e      	add	r6, r3
 80194bc:	e64e      	b.n	801915c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80194be:	2800      	cmp	r0, #0
 80194c0:	f43f aee8 	beq.w	8019294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80194c4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80194c8:	9209      	str	r2, [sp, #36]	; 0x24
 80194ca:	0e12      	lsrs	r2, r2, #24
 80194cc:	9212      	str	r2, [sp, #72]	; 0x48
 80194ce:	e6e1      	b.n	8019294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80194d0:	b01d      	add	sp, #116	; 0x74
 80194d2:	ecbd 8b08 	vpop	{d8-d11}
 80194d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080194dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80194dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80194e4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80194e8:	fb04 5603 	mla	r6, r4, r3, r5
 80194ec:	2c00      	cmp	r4, #0
 80194ee:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80194f2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80194f6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80194fa:	db36      	blt.n	801956a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 80194fc:	45a6      	cmp	lr, r4
 80194fe:	dd34      	ble.n	801956a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8019500:	2d00      	cmp	r5, #0
 8019502:	db30      	blt.n	8019566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8019504:	42ab      	cmp	r3, r5
 8019506:	dd2e      	ble.n	8019566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8019508:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801950c:	1c6e      	adds	r6, r5, #1
 801950e:	d42f      	bmi.n	8019570 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8019510:	42b3      	cmp	r3, r6
 8019512:	dd2d      	ble.n	8019570 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8019514:	b370      	cbz	r0, 8019574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8019516:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801951a:	3401      	adds	r4, #1
 801951c:	d42e      	bmi.n	801957c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801951e:	45a6      	cmp	lr, r4
 8019520:	dd2c      	ble.n	801957c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8019522:	b377      	cbz	r7, 8019582 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8019524:	2d00      	cmp	r5, #0
 8019526:	db27      	blt.n	8019578 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8019528:	42ab      	cmp	r3, r5
 801952a:	dd25      	ble.n	8019578 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801952c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8019530:	3501      	adds	r5, #1
 8019532:	d429      	bmi.n	8019588 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8019534:	42ab      	cmp	r3, r5
 8019536:	dd27      	ble.n	8019588 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8019538:	b340      	cbz	r0, 801958c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801953a:	3301      	adds	r3, #1
 801953c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8019540:	280f      	cmp	r0, #15
 8019542:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019546:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801954a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801954e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8019552:	d801      	bhi.n	8019558 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8019554:	2f0f      	cmp	r7, #15
 8019556:	d91b      	bls.n	8019590 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8019558:	4b7e      	ldr	r3, [pc, #504]	; (8019754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801955a:	f240 1157 	movw	r1, #343	; 0x157
 801955e:	4a7e      	ldr	r2, [pc, #504]	; (8019758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8019560:	487e      	ldr	r0, [pc, #504]	; (801975c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8019562:	f001 fd8b 	bl	801b07c <__assert_func>
 8019566:	2200      	movs	r2, #0
 8019568:	e7d0      	b.n	801950c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801956a:	2600      	movs	r6, #0
 801956c:	4632      	mov	r2, r6
 801956e:	e7d4      	b.n	801951a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019570:	2600      	movs	r6, #0
 8019572:	e7d2      	b.n	801951a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019574:	4606      	mov	r6, r0
 8019576:	e7d0      	b.n	801951a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8019578:	2400      	movs	r4, #0
 801957a:	e7d9      	b.n	8019530 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801957c:	2300      	movs	r3, #0
 801957e:	461c      	mov	r4, r3
 8019580:	e7de      	b.n	8019540 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8019582:	463b      	mov	r3, r7
 8019584:	463c      	mov	r4, r7
 8019586:	e7db      	b.n	8019540 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8019588:	2300      	movs	r3, #0
 801958a:	e7d9      	b.n	8019540 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801958c:	4603      	mov	r3, r0
 801958e:	e7d7      	b.n	8019540 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8019590:	b280      	uxth	r0, r0
 8019592:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019596:	b2bf      	uxth	r7, r7
 8019598:	fb00 fe07 	mul.w	lr, r0, r7
 801959c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80195a0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80195a4:	eba0 0c0e 	sub.w	ip, r0, lr
 80195a8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80195ac:	b2bf      	uxth	r7, r7
 80195ae:	fa1f fc8c 	uxth.w	ip, ip
 80195b2:	eba0 0507 	sub.w	r5, r0, r7
 80195b6:	fb0c f00a 	mul.w	r0, ip, sl
 80195ba:	b2ad      	uxth	r5, r5
 80195bc:	fb05 000b 	mla	r0, r5, fp, r0
 80195c0:	fb07 0009 	mla	r0, r7, r9, r0
 80195c4:	fb0e 0008 	mla	r0, lr, r8, r0
 80195c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80195cc:	9001      	str	r0, [sp, #4]
 80195ce:	d018      	beq.n	8019602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80195d0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80195d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80195d8:	fb0b f000 	mul.w	r0, fp, r0
 80195dc:	fb0b fb02 	mul.w	fp, fp, r2
 80195e0:	0a02      	lsrs	r2, r0, #8
 80195e2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80195e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80195ea:	4402      	add	r2, r0
 80195ec:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80195f0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80195f4:	0a12      	lsrs	r2, r2, #8
 80195f6:	0a00      	lsrs	r0, r0, #8
 80195f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80195fc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019600:	4302      	orrs	r2, r0
 8019602:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019606:	d01a      	beq.n	801963e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8019608:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801960c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019610:	fb0a f000 	mul.w	r0, sl, r0
 8019614:	fb0a fa06 	mul.w	sl, sl, r6
 8019618:	0a06      	lsrs	r6, r0, #8
 801961a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801961e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019622:	4406      	add	r6, r0
 8019624:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019628:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801962c:	0a36      	lsrs	r6, r6, #8
 801962e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019632:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019636:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801963a:	ea46 060a 	orr.w	r6, r6, sl
 801963e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019642:	d01b      	beq.n	801967c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8019644:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019648:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801964c:	fb09 fa0a 	mul.w	sl, r9, sl
 8019650:	fb09 f004 	mul.w	r0, r9, r4
 8019654:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019658:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801965c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8019660:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019664:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019668:	4454      	add	r4, sl
 801966a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801966e:	0a24      	lsrs	r4, r4, #8
 8019670:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019674:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019678:	ea44 0409 	orr.w	r4, r4, r9
 801967c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019680:	d01b      	beq.n	80196ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8019682:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8019686:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801968a:	fb08 f909 	mul.w	r9, r8, r9
 801968e:	fb08 f003 	mul.w	r0, r8, r3
 8019692:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019696:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801969a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801969e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80196a2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80196a6:	444b      	add	r3, r9
 80196a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80196ac:	0a1b      	lsrs	r3, r3, #8
 80196ae:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80196b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80196b6:	ea43 0308 	orr.w	r3, r3, r8
 80196ba:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80196be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80196c2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80196c6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80196ca:	fb0c f000 	mul.w	r0, ip, r0
 80196ce:	fb0c f606 	mul.w	r6, ip, r6
 80196d2:	fb05 0808 	mla	r8, r5, r8, r0
 80196d6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80196da:	fb05 6502 	mla	r5, r5, r2, r6
 80196de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80196e2:	fb07 8800 	mla	r8, r7, r0, r8
 80196e6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80196ea:	fb07 5704 	mla	r7, r7, r4, r5
 80196ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80196f2:	fb0e 8000 	mla	r0, lr, r0, r8
 80196f6:	780a      	ldrb	r2, [r1, #0]
 80196f8:	fb0e 7e03 	mla	lr, lr, r3, r7
 80196fc:	9b01      	ldr	r3, [sp, #4]
 80196fe:	0a00      	lsrs	r0, r0, #8
 8019700:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019704:	43db      	mvns	r3, r3
 8019706:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801970a:	b2db      	uxtb	r3, r3
 801970c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019710:	ea40 0e0e 	orr.w	lr, r0, lr
 8019714:	fb02 f003 	mul.w	r0, r2, r3
 8019718:	1c42      	adds	r2, r0, #1
 801971a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801971e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8019722:	700a      	strb	r2, [r1, #0]
 8019724:	784a      	ldrb	r2, [r1, #1]
 8019726:	435a      	muls	r2, r3
 8019728:	1c50      	adds	r0, r2, #1
 801972a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801972e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8019732:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8019736:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801973a:	704a      	strb	r2, [r1, #1]
 801973c:	788a      	ldrb	r2, [r1, #2]
 801973e:	4353      	muls	r3, r2
 8019740:	1c5a      	adds	r2, r3, #1
 8019742:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019746:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801974a:	f881 e002 	strb.w	lr, [r1, #2]
 801974e:	b003      	add	sp, #12
 8019750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019754:	0801f117 	.word	0x0801f117
 8019758:	0801f5ce 	.word	0x0801f5ce
 801975c:	0801f19f 	.word	0x0801f19f

08019760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019764:	ed2d 8b08 	vpush	{d8-d11}
 8019768:	b099      	sub	sp, #100	; 0x64
 801976a:	eeb0 aa40 	vmov.f32	s20, s0
 801976e:	eef0 9a60 	vmov.f32	s19, s1
 8019772:	9017      	str	r0, [sp, #92]	; 0x5c
 8019774:	eeb0 9a41 	vmov.f32	s18, s2
 8019778:	9306      	str	r3, [sp, #24]
 801977a:	eeb0 8a62 	vmov.f32	s16, s5
 801977e:	eef0 8a43 	vmov.f32	s17, s6
 8019782:	eef0 ba44 	vmov.f32	s23, s8
 8019786:	eeb0 ba64 	vmov.f32	s22, s9
 801978a:	eef0 aa45 	vmov.f32	s21, s10
 801978e:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8019792:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019794:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8019798:	6850      	ldr	r0, [r2, #4]
 801979a:	6812      	ldr	r2, [r2, #0]
 801979c:	fb00 1303 	mla	r3, r0, r3, r1
 80197a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197a4:	18d3      	adds	r3, r2, r3
 80197a6:	9309      	str	r3, [sp, #36]	; 0x24
 80197a8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80197aa:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	930e      	str	r3, [sp, #56]	; 0x38
 80197b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	dc03      	bgt.n	80197c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80197b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	f340 8360 	ble.w	8019e80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80197c0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80197c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80197c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80197ca:	1e48      	subs	r0, r1, #1
 80197cc:	1e57      	subs	r7, r2, #1
 80197ce:	9b06      	ldr	r3, [sp, #24]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	f340 817b 	ble.w	8019acc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80197d6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80197da:	ea4f 4326 	mov.w	r3, r6, asr #16
 80197de:	d406      	bmi.n	80197ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80197e0:	4584      	cmp	ip, r0
 80197e2:	da04      	bge.n	80197ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	db02      	blt.n	80197ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80197e8:	42bb      	cmp	r3, r7
 80197ea:	f2c0 8170 	blt.w	8019ace <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80197ee:	f11c 0c01 	adds.w	ip, ip, #1
 80197f2:	f100 8160 	bmi.w	8019ab6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80197f6:	4561      	cmp	r1, ip
 80197f8:	f2c0 815d 	blt.w	8019ab6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80197fc:	3301      	adds	r3, #1
 80197fe:	f100 815a 	bmi.w	8019ab6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019802:	429a      	cmp	r2, r3
 8019804:	f2c0 8157 	blt.w	8019ab6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019808:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801980c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801980e:	f1b8 0f00 	cmp.w	r8, #0
 8019812:	f340 8179 	ble.w	8019b08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8019816:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8019818:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801981c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801981e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019822:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8019826:	142a      	asrs	r2, r5, #16
 8019828:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801982c:	689b      	ldr	r3, [r3, #8]
 801982e:	f100 81be 	bmi.w	8019bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019832:	f103 39ff 	add.w	r9, r3, #4294967295
 8019836:	454a      	cmp	r2, r9
 8019838:	f280 81b9 	bge.w	8019bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801983c:	f1bc 0f00 	cmp.w	ip, #0
 8019840:	f2c0 81b5 	blt.w	8019bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8019844:	f10e 39ff 	add.w	r9, lr, #4294967295
 8019848:	45cc      	cmp	ip, r9
 801984a:	f280 81b0 	bge.w	8019bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801984e:	b21b      	sxth	r3, r3
 8019850:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019852:	fb0c 2203 	mla	r2, ip, r3, r2
 8019856:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801985a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801985e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8019862:	2900      	cmp	r1, #0
 8019864:	f000 8197 	beq.w	8019b96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8019868:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801986c:	940a      	str	r4, [sp, #40]	; 0x28
 801986e:	0e24      	lsrs	r4, r4, #24
 8019870:	9411      	str	r4, [sp, #68]	; 0x44
 8019872:	b180      	cbz	r0, 8019896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019878:	3b01      	subs	r3, #1
 801987a:	009b      	lsls	r3, r3, #2
 801987c:	3304      	adds	r3, #4
 801987e:	eb09 0c03 	add.w	ip, r9, r3
 8019882:	f859 3003 	ldr.w	r3, [r9, r3]
 8019886:	9307      	str	r3, [sp, #28]
 8019888:	0e1b      	lsrs	r3, r3, #24
 801988a:	930f      	str	r3, [sp, #60]	; 0x3c
 801988c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019890:	930b      	str	r3, [sp, #44]	; 0x2c
 8019892:	0e1b      	lsrs	r3, r3, #24
 8019894:	9312      	str	r3, [sp, #72]	; 0x48
 8019896:	b289      	uxth	r1, r1
 8019898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801989a:	b280      	uxth	r0, r0
 801989c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801989e:	fb01 fa00 	mul.w	sl, r1, r0
 80198a2:	0109      	lsls	r1, r1, #4
 80198a4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80198a8:	eba1 090a 	sub.w	r9, r1, sl
 80198ac:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80198b0:	b280      	uxth	r0, r0
 80198b2:	fa1f f989 	uxth.w	r9, r9
 80198b6:	1a09      	subs	r1, r1, r0
 80198b8:	fb09 f303 	mul.w	r3, r9, r3
 80198bc:	b289      	uxth	r1, r1
 80198be:	fb01 330e 	mla	r3, r1, lr, r3
 80198c2:	fb00 3304 	mla	r3, r0, r4, r3
 80198c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80198c8:	fb0a 3304 	mla	r3, sl, r4, r3
 80198cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	f000 80e8 	beq.w	8019aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80198d6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80198da:	d01b      	beq.n	8019914 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80198dc:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80198e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80198e4:	fb0e fb0b 	mul.w	fp, lr, fp
 80198e8:	fb0e fe02 	mul.w	lr, lr, r2
 80198ec:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80198f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80198f4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80198f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80198fc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019900:	445a      	add	r2, fp
 8019902:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019906:	0a12      	lsrs	r2, r2, #8
 8019908:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801990c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019910:	ea42 020c 	orr.w	r2, r2, ip
 8019914:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019916:	2cff      	cmp	r4, #255	; 0xff
 8019918:	d021      	beq.n	801995e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801991a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801991c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019920:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019922:	fb04 fc0c 	mul.w	ip, r4, ip
 8019926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019928:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801992c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8019930:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019932:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019936:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801993a:	fb04 fb0b 	mul.w	fp, r4, fp
 801993e:	44e6      	add	lr, ip
 8019940:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8019944:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019948:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801994c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019950:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019954:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8019958:	ea4e 040b 	orr.w	r4, lr, fp
 801995c:	940a      	str	r4, [sp, #40]	; 0x28
 801995e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019960:	2cff      	cmp	r4, #255	; 0xff
 8019962:	d021      	beq.n	80199a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019964:	9c07      	ldr	r4, [sp, #28]
 8019966:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801996a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801996c:	fb04 fc0c 	mul.w	ip, r4, ip
 8019970:	9c07      	ldr	r4, [sp, #28]
 8019972:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019976:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801997a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801997c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019980:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019984:	fb04 fb0b 	mul.w	fp, r4, fp
 8019988:	44e6      	add	lr, ip
 801998a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801998e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019992:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8019996:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801999a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801999e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80199a2:	ea4e 040b 	orr.w	r4, lr, fp
 80199a6:	9407      	str	r4, [sp, #28]
 80199a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199aa:	2cff      	cmp	r4, #255	; 0xff
 80199ac:	d021      	beq.n	80199f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80199ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80199b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80199b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199b6:	fb04 fc0c 	mul.w	ip, r4, ip
 80199ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80199bc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80199c0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80199c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80199ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199ce:	fb04 fb0b 	mul.w	fp, r4, fp
 80199d2:	44e6      	add	lr, ip
 80199d4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80199d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80199dc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80199e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199e4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80199e8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80199ec:	ea4e 040b 	orr.w	r4, lr, fp
 80199f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80199f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80199f4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80199f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80199fc:	2bff      	cmp	r3, #255	; 0xff
 80199fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019a02:	9c07      	ldr	r4, [sp, #28]
 8019a04:	fb09 fc0c 	mul.w	ip, r9, ip
 8019a08:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019a0c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019a10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019a12:	fb00 cc0e 	mla	ip, r0, lr, ip
 8019a16:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019a1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019a1c:	fb0a cc0e 	mla	ip, sl, lr, ip
 8019a20:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019a24:	fb09 f90e 	mul.w	r9, r9, lr
 8019a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a2c:	fb01 9202 	mla	r2, r1, r2, r9
 8019a30:	9907      	ldr	r1, [sp, #28]
 8019a32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a36:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8019a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019a3c:	fb00 220b 	mla	r2, r0, fp, r2
 8019a40:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8019a44:	fb0a 2a00 	mla	sl, sl, r0, r2
 8019a48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a50:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019a54:	fa5f f08c 	uxtb.w	r0, ip
 8019a58:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8019a5c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019a60:	f000 80a2 	beq.w	8019ba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8019a64:	43db      	mvns	r3, r3
 8019a66:	783a      	ldrb	r2, [r7, #0]
 8019a68:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019a6c:	b2db      	uxtb	r3, r3
 8019a6e:	fb02 fe03 	mul.w	lr, r2, r3
 8019a72:	fb0a fa03 	mul.w	sl, sl, r3
 8019a76:	f10e 0201 	add.w	r2, lr, #1
 8019a7a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8019a7e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019a82:	703a      	strb	r2, [r7, #0]
 8019a84:	787a      	ldrb	r2, [r7, #1]
 8019a86:	fb02 f003 	mul.w	r0, r2, r3
 8019a8a:	f10a 0301 	add.w	r3, sl, #1
 8019a8e:	1c42      	adds	r2, r0, #1
 8019a90:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8019a94:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8019a98:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019a9c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019aa0:	707a      	strb	r2, [r7, #1]
 8019aa2:	f887 c002 	strb.w	ip, [r7, #2]
 8019aa6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019aa8:	3703      	adds	r7, #3
 8019aaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8019aae:	441d      	add	r5, r3
 8019ab0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019ab2:	441e      	add	r6, r3
 8019ab4:	e6ab      	b.n	801980e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019ab6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019ab8:	441d      	add	r5, r3
 8019aba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019abc:	441e      	add	r6, r3
 8019abe:	9b06      	ldr	r3, [sp, #24]
 8019ac0:	3b01      	subs	r3, #1
 8019ac2:	9306      	str	r3, [sp, #24]
 8019ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ac6:	3303      	adds	r3, #3
 8019ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8019aca:	e680      	b.n	80197ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019acc:	d024      	beq.n	8019b18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8019ace:	9b06      	ldr	r3, [sp, #24]
 8019ad0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8019ad2:	3b01      	subs	r3, #1
 8019ad4:	fb00 5003 	mla	r0, r0, r3, r5
 8019ad8:	1400      	asrs	r0, r0, #16
 8019ada:	f53f ae95 	bmi.w	8019808 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019ade:	3901      	subs	r1, #1
 8019ae0:	4288      	cmp	r0, r1
 8019ae2:	f6bf ae91 	bge.w	8019808 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019ae6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8019ae8:	fb01 6303 	mla	r3, r1, r3, r6
 8019aec:	141b      	asrs	r3, r3, #16
 8019aee:	f53f ae8b 	bmi.w	8019808 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019af2:	3a01      	subs	r2, #1
 8019af4:	4293      	cmp	r3, r2
 8019af6:	f6bf ae87 	bge.w	8019808 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019afc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8019b00:	1cdf      	adds	r7, r3, #3
 8019b02:	f1bb 0f00 	cmp.w	fp, #0
 8019b06:	dc6e      	bgt.n	8019be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8019b08:	9b06      	ldr	r3, [sp, #24]
 8019b0a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019b14:	4423      	add	r3, r4
 8019b16:	9309      	str	r3, [sp, #36]	; 0x24
 8019b18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	f340 81b0 	ble.w	8019e80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8019b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019b26:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019b2a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019b2e:	eef0 6a48 	vmov.f32	s13, s16
 8019b32:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019b36:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019b3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b3e:	ee16 5a90 	vmov	r5, s13
 8019b42:	eef0 6a68 	vmov.f32	s13, s17
 8019b46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b4a:	ee16 6a90 	vmov	r6, s13
 8019b4e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019b52:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019b56:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019b5a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019b5e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019b62:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019b66:	ee18 2a10 	vmov	r2, s16
 8019b6a:	eeb0 8a47 	vmov.f32	s16, s14
 8019b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b72:	ee18 2a90 	vmov	r2, s17
 8019b76:	932d      	str	r3, [sp, #180]	; 0xb4
 8019b78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019b7a:	eef0 8a67 	vmov.f32	s17, s15
 8019b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b82:	932e      	str	r3, [sp, #184]	; 0xb8
 8019b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019b88:	3b01      	subs	r3, #1
 8019b8a:	9315      	str	r3, [sp, #84]	; 0x54
 8019b8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019b8e:	bf08      	it	eq
 8019b90:	4613      	moveq	r3, r2
 8019b92:	9306      	str	r3, [sp, #24]
 8019b94:	e60d      	b.n	80197b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019b96:	2800      	cmp	r0, #0
 8019b98:	f43f ae7d 	beq.w	8019896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019b9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019ba0:	9307      	str	r3, [sp, #28]
 8019ba2:	0e1b      	lsrs	r3, r3, #24
 8019ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ba6:	e676      	b.n	8019896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019ba8:	7038      	strb	r0, [r7, #0]
 8019baa:	7079      	strb	r1, [r7, #1]
 8019bac:	e779      	b.n	8019aa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8019bae:	f112 0901 	adds.w	r9, r2, #1
 8019bb2:	f53f af78 	bmi.w	8019aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019bb6:	454b      	cmp	r3, r9
 8019bb8:	f6ff af75 	blt.w	8019aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019bbc:	f11c 0901 	adds.w	r9, ip, #1
 8019bc0:	f53f af71 	bmi.w	8019aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019bc4:	45ce      	cmp	lr, r9
 8019bc6:	f6ff af6e 	blt.w	8019aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019bca:	b21b      	sxth	r3, r3
 8019bcc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8019bd0:	fa0f f28e 	sxth.w	r2, lr
 8019bd4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8019bd8:	9200      	str	r2, [sp, #0]
 8019bda:	4639      	mov	r1, r7
 8019bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019bde:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019be0:	f7ff fc7c 	bl	80194dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8019be4:	e75f      	b.n	8019aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8019be6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019be8:	1429      	asrs	r1, r5, #16
 8019bea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019bec:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8019bf0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8019bf4:	1433      	asrs	r3, r6, #16
 8019bf6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019bfa:	fb0c 1303 	mla	r3, ip, r3, r1
 8019bfe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019c00:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019c04:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019c08:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019c0c:	2a00      	cmp	r2, #0
 8019c0e:	f000 8129 	beq.w	8019e64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8019c12:	684c      	ldr	r4, [r1, #4]
 8019c14:	940c      	str	r4, [sp, #48]	; 0x30
 8019c16:	0e24      	lsrs	r4, r4, #24
 8019c18:	9413      	str	r4, [sp, #76]	; 0x4c
 8019c1a:	b198      	cbz	r0, 8019c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8019c1c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8019c20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019c24:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8019c28:	f10c 0c04 	add.w	ip, ip, #4
 8019c2c:	eb01 080c 	add.w	r8, r1, ip
 8019c30:	f851 100c 	ldr.w	r1, [r1, ip]
 8019c34:	9108      	str	r1, [sp, #32]
 8019c36:	0e09      	lsrs	r1, r1, #24
 8019c38:	9110      	str	r1, [sp, #64]	; 0x40
 8019c3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019c3e:	910d      	str	r1, [sp, #52]	; 0x34
 8019c40:	0e09      	lsrs	r1, r1, #24
 8019c42:	9114      	str	r1, [sp, #80]	; 0x50
 8019c44:	b292      	uxth	r2, r2
 8019c46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019c48:	b280      	uxth	r0, r0
 8019c4a:	fb02 f900 	mul.w	r9, r2, r0
 8019c4e:	0112      	lsls	r2, r2, #4
 8019c50:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019c54:	eba2 0809 	sub.w	r8, r2, r9
 8019c58:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8019c5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c5e:	b280      	uxth	r0, r0
 8019c60:	fa1f f888 	uxth.w	r8, r8
 8019c64:	1a09      	subs	r1, r1, r0
 8019c66:	fb08 f202 	mul.w	r2, r8, r2
 8019c6a:	b289      	uxth	r1, r1
 8019c6c:	fb01 220e 	mla	r2, r1, lr, r2
 8019c70:	fb00 2204 	mla	r2, r0, r4, r2
 8019c74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019c76:	fb09 2204 	mla	r2, r9, r4, r2
 8019c7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019c7e:	2a00      	cmp	r2, #0
 8019c80:	f000 80e8 	beq.w	8019e54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8019c84:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019c88:	d01b      	beq.n	8019cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8019c8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019c8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019c92:	fb0e fa0a 	mul.w	sl, lr, sl
 8019c96:	fb0e fe03 	mul.w	lr, lr, r3
 8019c9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019c9e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019ca2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019ca6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019caa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019cae:	4453      	add	r3, sl
 8019cb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cb4:	0a1b      	lsrs	r3, r3, #8
 8019cb6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019cba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019cbe:	ea43 030c 	orr.w	r3, r3, ip
 8019cc2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019cc4:	2cff      	cmp	r4, #255	; 0xff
 8019cc6:	d021      	beq.n	8019d0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8019cc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019cca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019cce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019cd0:	fb04 fc0c 	mul.w	ip, r4, ip
 8019cd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019cd6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019cda:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019cde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ce0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019ce4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019ce8:	fb04 fa0a 	mul.w	sl, r4, sl
 8019cec:	44e6      	add	lr, ip
 8019cee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019cf2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019cf6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019cfa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019cfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d06:	ea4e 040a 	orr.w	r4, lr, sl
 8019d0a:	940c      	str	r4, [sp, #48]	; 0x30
 8019d0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d0e:	2cff      	cmp	r4, #255	; 0xff
 8019d10:	d021      	beq.n	8019d56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8019d12:	9c08      	ldr	r4, [sp, #32]
 8019d14:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019d18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d1a:	fb04 fc0c 	mul.w	ip, r4, ip
 8019d1e:	9c08      	ldr	r4, [sp, #32]
 8019d20:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019d24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d26:	fb04 fa0e 	mul.w	sl, r4, lr
 8019d2a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d2e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019d32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d36:	44e6      	add	lr, ip
 8019d38:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d50:	ea4e 040a 	orr.w	r4, lr, sl
 8019d54:	9408      	str	r4, [sp, #32]
 8019d56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019d58:	2cff      	cmp	r4, #255	; 0xff
 8019d5a:	d021      	beq.n	8019da0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8019d5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019d5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019d62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019d64:	fb04 fc0c 	mul.w	ip, r4, ip
 8019d68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019d6a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019d72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019d74:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019d78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d7c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019d80:	44e6      	add	lr, ip
 8019d82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d9a:	ea4e 040a 	orr.w	r4, lr, sl
 8019d9e:	940d      	str	r4, [sp, #52]	; 0x34
 8019da0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019da2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019da6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019daa:	2aff      	cmp	r2, #255	; 0xff
 8019dac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019db0:	9c08      	ldr	r4, [sp, #32]
 8019db2:	fb08 fc0c 	mul.w	ip, r8, ip
 8019db6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019dba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019dbe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019dc0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8019dc4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019dc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019dca:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019dce:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019dd2:	fb08 f80e 	mul.w	r8, r8, lr
 8019dd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019dda:	fb01 8303 	mla	r3, r1, r3, r8
 8019dde:	9908      	ldr	r1, [sp, #32]
 8019de0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019de4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8019de8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019dea:	fb00 330a 	mla	r3, r0, sl, r3
 8019dee:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8019df2:	fb09 3e0e 	mla	lr, r9, lr, r3
 8019df6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019dfa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019dfe:	ea4c 0c0e 	orr.w	ip, ip, lr
 8019e02:	fa5f f08c 	uxtb.w	r0, ip
 8019e06:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8019e0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019e0e:	d032      	beq.n	8019e76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8019e10:	43d2      	mvns	r2, r2
 8019e12:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8019e16:	b2d2      	uxtb	r2, r2
 8019e18:	fb0e fe02 	mul.w	lr, lr, r2
 8019e1c:	f10e 0301 	add.w	r3, lr, #1
 8019e20:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8019e24:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8019e28:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8019e2c:	4350      	muls	r0, r2
 8019e2e:	f807 3c03 	strb.w	r3, [r7, #-3]
 8019e32:	1c43      	adds	r3, r0, #1
 8019e34:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019e38:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019e3c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8019e40:	4353      	muls	r3, r2
 8019e42:	f807 1c02 	strb.w	r1, [r7, #-2]
 8019e46:	1c5a      	adds	r2, r3, #1
 8019e48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019e4c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8019e50:	f807 cc01 	strb.w	ip, [r7, #-1]
 8019e54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019e56:	3703      	adds	r7, #3
 8019e58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019e5c:	441d      	add	r5, r3
 8019e5e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019e60:	441e      	add	r6, r3
 8019e62:	e64e      	b.n	8019b02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8019e64:	2800      	cmp	r0, #0
 8019e66:	f43f aeed 	beq.w	8019c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8019e6a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019e6e:	9108      	str	r1, [sp, #32]
 8019e70:	0e09      	lsrs	r1, r1, #24
 8019e72:	9110      	str	r1, [sp, #64]	; 0x40
 8019e74:	e6e6      	b.n	8019c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8019e76:	f807 0c03 	strb.w	r0, [r7, #-3]
 8019e7a:	f807 1c02 	strb.w	r1, [r7, #-2]
 8019e7e:	e7e7      	b.n	8019e50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8019e80:	b019      	add	sp, #100	; 0x64
 8019e82:	ecbd 8b08 	vpop	{d8-d11}
 8019e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019e8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8019e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e90:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8019e94:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8019e98:	2800      	cmp	r0, #0
 8019e9a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8019e9e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8019ea2:	fb0c 0e03 	mla	lr, ip, r3, r0
 8019ea6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8019eaa:	db6b      	blt.n	8019f84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019eac:	4580      	cmp	r8, r0
 8019eae:	dd69      	ble.n	8019f84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019eb0:	f1bc 0f00 	cmp.w	ip, #0
 8019eb4:	db66      	blt.n	8019f84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019eb6:	45e1      	cmp	r9, ip
 8019eb8:	dd64      	ble.n	8019f84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8019eba:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8019ebe:	f01e 0f01 	tst.w	lr, #1
 8019ec2:	5d16      	ldrb	r6, [r2, r4]
 8019ec4:	bf0c      	ite	eq
 8019ec6:	f006 060f 	andeq.w	r6, r6, #15
 8019eca:	1136      	asrne	r6, r6, #4
 8019ecc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8019ed0:	b2f6      	uxtb	r6, r6
 8019ed2:	f110 0a01 	adds.w	sl, r0, #1
 8019ed6:	d457      	bmi.n	8019f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019ed8:	45d0      	cmp	r8, sl
 8019eda:	dd55      	ble.n	8019f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019edc:	f1bc 0f00 	cmp.w	ip, #0
 8019ee0:	db52      	blt.n	8019f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019ee2:	45e1      	cmp	r9, ip
 8019ee4:	dd50      	ble.n	8019f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8019ee6:	2f00      	cmp	r7, #0
 8019ee8:	f000 80ac 	beq.w	801a044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8019eec:	f10e 0b01 	add.w	fp, lr, #1
 8019ef0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8019ef4:	f01b 0f01 	tst.w	fp, #1
 8019ef8:	5d14      	ldrb	r4, [r2, r4]
 8019efa:	bf0c      	ite	eq
 8019efc:	f004 040f 	andeq.w	r4, r4, #15
 8019f00:	1124      	asrne	r4, r4, #4
 8019f02:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019f06:	b2e4      	uxtb	r4, r4
 8019f08:	2d00      	cmp	r5, #0
 8019f0a:	f000 8096 	beq.w	801a03a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8019f0e:	2800      	cmp	r0, #0
 8019f10:	f10c 0c01 	add.w	ip, ip, #1
 8019f14:	db3c      	blt.n	8019f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f16:	4580      	cmp	r8, r0
 8019f18:	dd3a      	ble.n	8019f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f1a:	f1bc 0f00 	cmp.w	ip, #0
 8019f1e:	db37      	blt.n	8019f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f20:	45e1      	cmp	r9, ip
 8019f22:	dd35      	ble.n	8019f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8019f24:	eb03 0b0e 	add.w	fp, r3, lr
 8019f28:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8019f2c:	f01b 0f01 	tst.w	fp, #1
 8019f30:	5c10      	ldrb	r0, [r2, r0]
 8019f32:	bf0c      	ite	eq
 8019f34:	f000 000f 	andeq.w	r0, r0, #15
 8019f38:	1100      	asrne	r0, r0, #4
 8019f3a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8019f3e:	b2c0      	uxtb	r0, r0
 8019f40:	f1ba 0f00 	cmp.w	sl, #0
 8019f44:	db26      	blt.n	8019f94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f46:	45d0      	cmp	r8, sl
 8019f48:	dd24      	ble.n	8019f94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f4a:	f1bc 0f00 	cmp.w	ip, #0
 8019f4e:	db21      	blt.n	8019f94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f50:	45e1      	cmp	r9, ip
 8019f52:	dd1f      	ble.n	8019f94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8019f54:	b307      	cbz	r7, 8019f98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8019f56:	3301      	adds	r3, #1
 8019f58:	449e      	add	lr, r3
 8019f5a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8019f5e:	f01e 0f01 	tst.w	lr, #1
 8019f62:	5cd3      	ldrb	r3, [r2, r3]
 8019f64:	bf0c      	ite	eq
 8019f66:	f003 030f 	andeq.w	r3, r3, #15
 8019f6a:	111b      	asrne	r3, r3, #4
 8019f6c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8019f70:	b2db      	uxtb	r3, r3
 8019f72:	2f0f      	cmp	r7, #15
 8019f74:	d911      	bls.n	8019f9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8019f76:	4b35      	ldr	r3, [pc, #212]	; (801a04c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8019f78:	f240 1157 	movw	r1, #343	; 0x157
 8019f7c:	4a34      	ldr	r2, [pc, #208]	; (801a050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8019f7e:	4835      	ldr	r0, [pc, #212]	; (801a054 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8019f80:	f001 f87c 	bl	801b07c <__assert_func>
 8019f84:	2600      	movs	r6, #0
 8019f86:	e7a4      	b.n	8019ed2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8019f88:	2400      	movs	r4, #0
 8019f8a:	e7bd      	b.n	8019f08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8019f8c:	463c      	mov	r4, r7
 8019f8e:	e7be      	b.n	8019f0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8019f90:	2000      	movs	r0, #0
 8019f92:	e7d5      	b.n	8019f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8019f94:	2300      	movs	r3, #0
 8019f96:	e7ec      	b.n	8019f72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8019f98:	463b      	mov	r3, r7
 8019f9a:	2d0f      	cmp	r5, #15
 8019f9c:	d8eb      	bhi.n	8019f76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8019f9e:	b2bf      	uxth	r7, r7
 8019fa0:	b2ad      	uxth	r5, r5
 8019fa2:	fb07 f205 	mul.w	r2, r7, r5
 8019fa6:	013f      	lsls	r7, r7, #4
 8019fa8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8019fac:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8019fb0:	1abf      	subs	r7, r7, r2
 8019fb2:	b2ad      	uxth	r5, r5
 8019fb4:	b2bf      	uxth	r7, r7
 8019fb6:	ebac 0c05 	sub.w	ip, ip, r5
 8019fba:	437c      	muls	r4, r7
 8019fbc:	fa1f fc8c 	uxth.w	ip, ip
 8019fc0:	fb06 440c 	mla	r4, r6, ip, r4
 8019fc4:	fb05 4400 	mla	r4, r5, r0, r4
 8019fc8:	fb02 4203 	mla	r2, r2, r3, r4
 8019fcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019fd0:	b38a      	cbz	r2, 801a036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8019fd2:	4b21      	ldr	r3, [pc, #132]	; (801a058 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8019fd4:	681c      	ldr	r4, [r3, #0]
 8019fd6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019fda:	b2e5      	uxtb	r5, r4
 8019fdc:	4353      	muls	r3, r2
 8019fde:	1c5a      	adds	r2, r3, #1
 8019fe0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019fe4:	1212      	asrs	r2, r2, #8
 8019fe6:	b290      	uxth	r0, r2
 8019fe8:	43d2      	mvns	r2, r2
 8019fea:	fb15 f500 	smulbb	r5, r5, r0
 8019fee:	b2d3      	uxtb	r3, r2
 8019ff0:	780a      	ldrb	r2, [r1, #0]
 8019ff2:	fb02 5203 	mla	r2, r2, r3, r5
 8019ff6:	b292      	uxth	r2, r2
 8019ff8:	1c55      	adds	r5, r2, #1
 8019ffa:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8019ffe:	784d      	ldrb	r5, [r1, #1]
 801a000:	fb15 f503 	smulbb	r5, r5, r3
 801a004:	1212      	asrs	r2, r2, #8
 801a006:	700a      	strb	r2, [r1, #0]
 801a008:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801a00c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801a010:	fb02 5200 	mla	r2, r2, r0, r5
 801a014:	b292      	uxth	r2, r2
 801a016:	1c55      	adds	r5, r2, #1
 801a018:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801a01c:	1212      	asrs	r2, r2, #8
 801a01e:	704a      	strb	r2, [r1, #1]
 801a020:	788a      	ldrb	r2, [r1, #2]
 801a022:	fb12 f303 	smulbb	r3, r2, r3
 801a026:	fb04 3300 	mla	r3, r4, r0, r3
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	1c5a      	adds	r2, r3, #1
 801a02e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a032:	121b      	asrs	r3, r3, #8
 801a034:	708b      	strb	r3, [r1, #2]
 801a036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a03a:	2f0f      	cmp	r7, #15
 801a03c:	d89b      	bhi.n	8019f76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801a03e:	462b      	mov	r3, r5
 801a040:	4628      	mov	r0, r5
 801a042:	e7ac      	b.n	8019f9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801a044:	2d00      	cmp	r5, #0
 801a046:	d1a1      	bne.n	8019f8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801a048:	462c      	mov	r4, r5
 801a04a:	e7f8      	b.n	801a03e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801a04c:	0801f117 	.word	0x0801f117
 801a050:	0801f5ce 	.word	0x0801f5ce
 801a054:	0801f19f 	.word	0x0801f19f
 801a058:	24006bc4 	.word	0x24006bc4

0801a05c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a060:	ed2d 8b08 	vpush	{d8-d11}
 801a064:	b097      	sub	sp, #92	; 0x5c
 801a066:	eeb0 aa40 	vmov.f32	s20, s0
 801a06a:	eef0 9a60 	vmov.f32	s19, s1
 801a06e:	9214      	str	r2, [sp, #80]	; 0x50
 801a070:	eeb0 9a41 	vmov.f32	s18, s2
 801a074:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a076:	eeb0 8a62 	vmov.f32	s16, s5
 801a07a:	9309      	str	r3, [sp, #36]	; 0x24
 801a07c:	eef0 8a43 	vmov.f32	s17, s6
 801a080:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801a084:	eef0 ba44 	vmov.f32	s23, s8
 801a088:	9015      	str	r0, [sp, #84]	; 0x54
 801a08a:	eeb0 ba64 	vmov.f32	s22, s9
 801a08e:	6850      	ldr	r0, [r2, #4]
 801a090:	eef0 aa45 	vmov.f32	s21, s10
 801a094:	910c      	str	r1, [sp, #48]	; 0x30
 801a096:	930e      	str	r3, [sp, #56]	; 0x38
 801a098:	6812      	ldr	r2, [r2, #0]
 801a09a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a09e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801a0a2:	fb00 1303 	mla	r3, r0, r3, r1
 801a0a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a0aa:	eb02 0a03 	add.w	sl, r2, r3
 801a0ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a0b0:	689b      	ldr	r3, [r3, #8]
 801a0b2:	3301      	adds	r3, #1
 801a0b4:	f023 0301 	bic.w	r3, r3, #1
 801a0b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801a0ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a0bc:	681f      	ldr	r7, [r3, #0]
 801a0be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	dc03      	bgt.n	801a0cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	f340 8247 	ble.w	801a55a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801a0cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a0ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a0d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a0d6:	1e48      	subs	r0, r1, #1
 801a0d8:	f102 3cff 	add.w	ip, r2, #4294967295
 801a0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	f340 80e5 	ble.w	801a2ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a0e4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801a0e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a0ec:	d406      	bmi.n	801a0fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a0ee:	4586      	cmp	lr, r0
 801a0f0:	da04      	bge.n	801a0fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	db02      	blt.n	801a0fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a0f6:	4563      	cmp	r3, ip
 801a0f8:	f2c0 80da 	blt.w	801a2b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a0fc:	f11e 0e01 	adds.w	lr, lr, #1
 801a100:	f100 80cb 	bmi.w	801a29a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a104:	4571      	cmp	r1, lr
 801a106:	f2c0 80c8 	blt.w	801a29a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a10a:	3301      	adds	r3, #1
 801a10c:	f100 80c5 	bmi.w	801a29a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a110:	429a      	cmp	r2, r3
 801a112:	f2c0 80c2 	blt.w	801a29a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a118:	46d0      	mov	r8, sl
 801a11a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801a11e:	930d      	str	r3, [sp, #52]	; 0x34
 801a120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a122:	2b00      	cmp	r3, #0
 801a124:	f340 80e3 	ble.w	801a2ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a128:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a12a:	1430      	asrs	r0, r6, #16
 801a12c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801a130:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a134:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801a138:	142b      	asrs	r3, r5, #16
 801a13a:	f100 812e 	bmi.w	801a39a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a13e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a142:	455b      	cmp	r3, fp
 801a144:	f280 8129 	bge.w	801a39a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a148:	2800      	cmp	r0, #0
 801a14a:	f2c0 8126 	blt.w	801a39a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a14e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801a152:	4558      	cmp	r0, fp
 801a154:	f280 8121 	bge.w	801a39a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a158:	fb00 3309 	mla	r3, r0, r9, r3
 801a15c:	0858      	lsrs	r0, r3, #1
 801a15e:	07dc      	lsls	r4, r3, #31
 801a160:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a164:	bf54      	ite	pl
 801a166:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a16a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a16e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a172:	fa5f fc8c 	uxtb.w	ip, ip
 801a176:	2a00      	cmp	r2, #0
 801a178:	f000 80fe 	beq.w	801a378 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a17c:	1c58      	adds	r0, r3, #1
 801a17e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801a182:	07c0      	lsls	r0, r0, #31
 801a184:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a188:	bf54      	ite	pl
 801a18a:	f00e 0e0f 	andpl.w	lr, lr, #15
 801a18e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801a192:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801a196:	fa5f f08e 	uxtb.w	r0, lr
 801a19a:	9010      	str	r0, [sp, #64]	; 0x40
 801a19c:	b1d9      	cbz	r1, 801a1d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801a19e:	444b      	add	r3, r9
 801a1a0:	0858      	lsrs	r0, r3, #1
 801a1a2:	07dc      	lsls	r4, r3, #31
 801a1a4:	f103 0301 	add.w	r3, r3, #1
 801a1a8:	5c38      	ldrb	r0, [r7, r0]
 801a1aa:	bf54      	ite	pl
 801a1ac:	f000 000f 	andpl.w	r0, r0, #15
 801a1b0:	1100      	asrmi	r0, r0, #4
 801a1b2:	07dc      	lsls	r4, r3, #31
 801a1b4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a1b8:	b2c0      	uxtb	r0, r0
 801a1ba:	900a      	str	r0, [sp, #40]	; 0x28
 801a1bc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801a1c0:	f817 e000 	ldrb.w	lr, [r7, r0]
 801a1c4:	bf54      	ite	pl
 801a1c6:	f00e 030f 	andpl.w	r3, lr, #15
 801a1ca:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801a1ce:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a1d2:	b2db      	uxtb	r3, r3
 801a1d4:	9311      	str	r3, [sp, #68]	; 0x44
 801a1d6:	b292      	uxth	r2, r2
 801a1d8:	b289      	uxth	r1, r1
 801a1da:	0113      	lsls	r3, r2, #4
 801a1dc:	fb02 f001 	mul.w	r0, r2, r1
 801a1e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a1e2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801a1e6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801a1ea:	1a1b      	subs	r3, r3, r0
 801a1ec:	b289      	uxth	r1, r1
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	ebae 0e01 	sub.w	lr, lr, r1
 801a1f4:	4353      	muls	r3, r2
 801a1f6:	fa1f fe8e 	uxth.w	lr, lr
 801a1fa:	fb0c 320e 	mla	r2, ip, lr, r3
 801a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a200:	fb01 2203 	mla	r2, r1, r3, r2
 801a204:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a206:	fb00 2203 	mla	r2, r0, r3, r2
 801a20a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a20e:	2a00      	cmp	r2, #0
 801a210:	d039      	beq.n	801a286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a212:	4bc7      	ldr	r3, [pc, #796]	; (801a530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801a214:	6819      	ldr	r1, [r3, #0]
 801a216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a218:	fa5f fc81 	uxtb.w	ip, r1
 801a21c:	435a      	muls	r2, r3
 801a21e:	1c53      	adds	r3, r2, #1
 801a220:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a224:	1212      	asrs	r2, r2, #8
 801a226:	b290      	uxth	r0, r2
 801a228:	43d2      	mvns	r2, r2
 801a22a:	fb1c fc00 	smulbb	ip, ip, r0
 801a22e:	b2d3      	uxtb	r3, r2
 801a230:	f898 2000 	ldrb.w	r2, [r8]
 801a234:	fb02 c203 	mla	r2, r2, r3, ip
 801a238:	b292      	uxth	r2, r2
 801a23a:	f102 0c01 	add.w	ip, r2, #1
 801a23e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a242:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a246:	fb1c fc03 	smulbb	ip, ip, r3
 801a24a:	1212      	asrs	r2, r2, #8
 801a24c:	f888 2000 	strb.w	r2, [r8]
 801a250:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801a254:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801a258:	fb02 c200 	mla	r2, r2, r0, ip
 801a25c:	b292      	uxth	r2, r2
 801a25e:	f102 0c01 	add.w	ip, r2, #1
 801a262:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a266:	1212      	asrs	r2, r2, #8
 801a268:	f888 2001 	strb.w	r2, [r8, #1]
 801a26c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a270:	fb12 f303 	smulbb	r3, r2, r3
 801a274:	fb01 3300 	mla	r3, r1, r0, r3
 801a278:	b29b      	uxth	r3, r3
 801a27a:	1c5a      	adds	r2, r3, #1
 801a27c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a280:	121b      	asrs	r3, r3, #8
 801a282:	f888 3002 	strb.w	r3, [r8, #2]
 801a286:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a288:	f108 0803 	add.w	r8, r8, #3
 801a28c:	441d      	add	r5, r3
 801a28e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a290:	441e      	add	r6, r3
 801a292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a294:	3b01      	subs	r3, #1
 801a296:	930d      	str	r3, [sp, #52]	; 0x34
 801a298:	e742      	b.n	801a120 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801a29a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a29c:	f10a 0a03 	add.w	sl, sl, #3
 801a2a0:	441d      	add	r5, r3
 801a2a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a2a4:	441e      	add	r6, r3
 801a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2a8:	3b01      	subs	r3, #1
 801a2aa:	9309      	str	r3, [sp, #36]	; 0x24
 801a2ac:	e716      	b.n	801a0dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a2ae:	d024      	beq.n	801a2fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2b2:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a2b4:	3b01      	subs	r3, #1
 801a2b6:	fb00 5003 	mla	r0, r0, r3, r5
 801a2ba:	1400      	asrs	r0, r0, #16
 801a2bc:	f53f af2b 	bmi.w	801a116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2c0:	3901      	subs	r1, #1
 801a2c2:	4288      	cmp	r0, r1
 801a2c4:	f6bf af27 	bge.w	801a116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2c8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a2ca:	fb01 6303 	mla	r3, r1, r3, r6
 801a2ce:	141b      	asrs	r3, r3, #16
 801a2d0:	f53f af21 	bmi.w	801a116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2d4:	3a01      	subs	r2, #1
 801a2d6:	4293      	cmp	r3, r2
 801a2d8:	f6bf af1d 	bge.w	801a116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a2dc:	f10a 0e03 	add.w	lr, sl, #3
 801a2e0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801a2e4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801a2e8:	f1b8 0f00 	cmp.w	r8, #0
 801a2ec:	dc76      	bgt.n	801a3dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801a2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a2f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a2f8:	44a2      	add	sl, r4
 801a2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	f340 812c 	ble.w	801a55a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801a302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a308:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a30c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a310:	eef0 6a48 	vmov.f32	s13, s16
 801a314:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a318:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a31c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a320:	ee16 5a90 	vmov	r5, s13
 801a324:	eef0 6a68 	vmov.f32	s13, s17
 801a328:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a32c:	ee16 6a90 	vmov	r6, s13
 801a330:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a334:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a338:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a33c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a340:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a344:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a348:	ee18 2a10 	vmov	r2, s16
 801a34c:	eeb0 8a47 	vmov.f32	s16, s14
 801a350:	fb92 f3f3 	sdiv	r3, r2, r3
 801a354:	ee18 2a90 	vmov	r2, s17
 801a358:	932b      	str	r3, [sp, #172]	; 0xac
 801a35a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a35c:	eef0 8a67 	vmov.f32	s17, s15
 801a360:	fb92 f3f3 	sdiv	r3, r2, r3
 801a364:	932c      	str	r3, [sp, #176]	; 0xb0
 801a366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a36a:	3b01      	subs	r3, #1
 801a36c:	930c      	str	r3, [sp, #48]	; 0x30
 801a36e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a370:	bf08      	it	eq
 801a372:	4613      	moveq	r3, r2
 801a374:	9309      	str	r3, [sp, #36]	; 0x24
 801a376:	e6a2      	b.n	801a0be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a378:	2900      	cmp	r1, #0
 801a37a:	f43f af2c 	beq.w	801a1d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801a37e:	eb09 0003 	add.w	r0, r9, r3
 801a382:	0843      	lsrs	r3, r0, #1
 801a384:	07c0      	lsls	r0, r0, #31
 801a386:	5cfb      	ldrb	r3, [r7, r3]
 801a388:	bf54      	ite	pl
 801a38a:	f003 030f 	andpl.w	r3, r3, #15
 801a38e:	111b      	asrmi	r3, r3, #4
 801a390:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a394:	b2db      	uxtb	r3, r3
 801a396:	930a      	str	r3, [sp, #40]	; 0x28
 801a398:	e71d      	b.n	801a1d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801a39a:	f113 0b01 	adds.w	fp, r3, #1
 801a39e:	f53f af72 	bmi.w	801a286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3a2:	45dc      	cmp	ip, fp
 801a3a4:	f6ff af6f 	blt.w	801a286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3a8:	f110 0b01 	adds.w	fp, r0, #1
 801a3ac:	f53f af6b 	bmi.w	801a286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3b0:	45de      	cmp	lr, fp
 801a3b2:	f6ff af68 	blt.w	801a286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3b6:	9302      	str	r3, [sp, #8]
 801a3b8:	fa0f f38e 	sxth.w	r3, lr
 801a3bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a3be:	9301      	str	r3, [sp, #4]
 801a3c0:	fa0f f38c 	sxth.w	r3, ip
 801a3c4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801a3c8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a3cc:	9300      	str	r3, [sp, #0]
 801a3ce:	463a      	mov	r2, r7
 801a3d0:	464b      	mov	r3, r9
 801a3d2:	4641      	mov	r1, r8
 801a3d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a3d6:	f7ff fd59 	bl	8019e8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801a3da:	e754      	b.n	801a286 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801a3dc:	142a      	asrs	r2, r5, #16
 801a3de:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a3e2:	1433      	asrs	r3, r6, #16
 801a3e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a3e8:	fb09 2303 	mla	r3, r9, r3, r2
 801a3ec:	085a      	lsrs	r2, r3, #1
 801a3ee:	07dc      	lsls	r4, r3, #31
 801a3f0:	5cba      	ldrb	r2, [r7, r2]
 801a3f2:	bf54      	ite	pl
 801a3f4:	f002 020f 	andpl.w	r2, r2, #15
 801a3f8:	1112      	asrmi	r2, r2, #4
 801a3fa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a3fe:	b2d2      	uxtb	r2, r2
 801a400:	2900      	cmp	r1, #0
 801a402:	f000 8097 	beq.w	801a534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801a406:	f103 0b01 	add.w	fp, r3, #1
 801a40a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801a40e:	f01b 0f01 	tst.w	fp, #1
 801a412:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a416:	bf0c      	ite	eq
 801a418:	f00c 0c0f 	andeq.w	ip, ip, #15
 801a41c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801a420:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a424:	fa5f f48c 	uxtb.w	r4, ip
 801a428:	9412      	str	r4, [sp, #72]	; 0x48
 801a42a:	b300      	cbz	r0, 801a46e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a42c:	444b      	add	r3, r9
 801a42e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a432:	07dc      	lsls	r4, r3, #31
 801a434:	f103 0301 	add.w	r3, r3, #1
 801a438:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a43c:	bf54      	ite	pl
 801a43e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a442:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a446:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a44a:	fa5f f48c 	uxtb.w	r4, ip
 801a44e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a452:	940b      	str	r4, [sp, #44]	; 0x2c
 801a454:	07dc      	lsls	r4, r3, #31
 801a456:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a45a:	bf54      	ite	pl
 801a45c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a460:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a464:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a468:	fa5f f38c 	uxtb.w	r3, ip
 801a46c:	9313      	str	r3, [sp, #76]	; 0x4c
 801a46e:	b289      	uxth	r1, r1
 801a470:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a472:	b280      	uxth	r0, r0
 801a474:	fb01 f300 	mul.w	r3, r1, r0
 801a478:	0109      	lsls	r1, r1, #4
 801a47a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801a47e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801a482:	1ac9      	subs	r1, r1, r3
 801a484:	b280      	uxth	r0, r0
 801a486:	b289      	uxth	r1, r1
 801a488:	ebac 0c00 	sub.w	ip, ip, r0
 801a48c:	4361      	muls	r1, r4
 801a48e:	fa1f fc8c 	uxth.w	ip, ip
 801a492:	fb02 120c 	mla	r2, r2, ip, r1
 801a496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a498:	fb00 2001 	mla	r0, r0, r1, r2
 801a49c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a49e:	fb03 0302 	mla	r3, r3, r2, r0
 801a4a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d039      	beq.n	801a51e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a4aa:	4a21      	ldr	r2, [pc, #132]	; (801a530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801a4ac:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801a4b0:	6810      	ldr	r0, [r2, #0]
 801a4b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4b4:	fa5f fc80 	uxtb.w	ip, r0
 801a4b8:	4353      	muls	r3, r2
 801a4ba:	1c5a      	adds	r2, r3, #1
 801a4bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a4c0:	121b      	asrs	r3, r3, #8
 801a4c2:	b29a      	uxth	r2, r3
 801a4c4:	43db      	mvns	r3, r3
 801a4c6:	fb1c fc02 	smulbb	ip, ip, r2
 801a4ca:	b2db      	uxtb	r3, r3
 801a4cc:	fb01 c103 	mla	r1, r1, r3, ip
 801a4d0:	b289      	uxth	r1, r1
 801a4d2:	f101 0c01 	add.w	ip, r1, #1
 801a4d6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801a4da:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801a4de:	fb1c fc03 	smulbb	ip, ip, r3
 801a4e2:	1209      	asrs	r1, r1, #8
 801a4e4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801a4e8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801a4ec:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801a4f0:	fb01 c102 	mla	r1, r1, r2, ip
 801a4f4:	b289      	uxth	r1, r1
 801a4f6:	f101 0c01 	add.w	ip, r1, #1
 801a4fa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801a4fe:	1209      	asrs	r1, r1, #8
 801a500:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801a504:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801a508:	fb11 f303 	smulbb	r3, r1, r3
 801a50c:	fb00 3002 	mla	r0, r0, r2, r3
 801a510:	b280      	uxth	r0, r0
 801a512:	1c42      	adds	r2, r0, #1
 801a514:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a518:	1200      	asrs	r0, r0, #8
 801a51a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801a51e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a520:	f10e 0e03 	add.w	lr, lr, #3
 801a524:	f108 38ff 	add.w	r8, r8, #4294967295
 801a528:	441d      	add	r5, r3
 801a52a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a52c:	441e      	add	r6, r3
 801a52e:	e6db      	b.n	801a2e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a530:	24006bc4 	.word	0x24006bc4
 801a534:	2800      	cmp	r0, #0
 801a536:	d09a      	beq.n	801a46e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a538:	444b      	add	r3, r9
 801a53a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801a53e:	07db      	lsls	r3, r3, #31
 801a540:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801a544:	bf54      	ite	pl
 801a546:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a54a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a54e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a552:	fa5f f38c 	uxtb.w	r3, ip
 801a556:	930b      	str	r3, [sp, #44]	; 0x2c
 801a558:	e789      	b.n	801a46e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a55a:	b017      	add	sp, #92	; 0x5c
 801a55c:	ecbd 8b08 	vpop	{d8-d11}
 801a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a564 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801a564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a568:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801a56c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801a570:	2800      	cmp	r0, #0
 801a572:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801a576:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801a57a:	fb0c 0e03 	mla	lr, ip, r3, r0
 801a57e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801a582:	db6b      	blt.n	801a65c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a584:	4580      	cmp	r8, r0
 801a586:	dd69      	ble.n	801a65c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a588:	f1bc 0f00 	cmp.w	ip, #0
 801a58c:	db66      	blt.n	801a65c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a58e:	45e1      	cmp	r9, ip
 801a590:	dd64      	ble.n	801a65c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801a592:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801a596:	f01e 0f01 	tst.w	lr, #1
 801a59a:	5d16      	ldrb	r6, [r2, r4]
 801a59c:	bf0c      	ite	eq
 801a59e:	f006 060f 	andeq.w	r6, r6, #15
 801a5a2:	1136      	asrne	r6, r6, #4
 801a5a4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801a5a8:	b2f6      	uxtb	r6, r6
 801a5aa:	f110 0a01 	adds.w	sl, r0, #1
 801a5ae:	d457      	bmi.n	801a660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5b0:	45d0      	cmp	r8, sl
 801a5b2:	dd55      	ble.n	801a660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5b4:	f1bc 0f00 	cmp.w	ip, #0
 801a5b8:	db52      	blt.n	801a660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5ba:	45e1      	cmp	r9, ip
 801a5bc:	dd50      	ble.n	801a660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801a5be:	2f00      	cmp	r7, #0
 801a5c0:	f000 80a5 	beq.w	801a70e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801a5c4:	f10e 0b01 	add.w	fp, lr, #1
 801a5c8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801a5cc:	f01b 0f01 	tst.w	fp, #1
 801a5d0:	5d14      	ldrb	r4, [r2, r4]
 801a5d2:	bf0c      	ite	eq
 801a5d4:	f004 040f 	andeq.w	r4, r4, #15
 801a5d8:	1124      	asrne	r4, r4, #4
 801a5da:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801a5de:	b2e4      	uxtb	r4, r4
 801a5e0:	2d00      	cmp	r5, #0
 801a5e2:	f000 808f 	beq.w	801a704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801a5e6:	2800      	cmp	r0, #0
 801a5e8:	f10c 0c01 	add.w	ip, ip, #1
 801a5ec:	db3c      	blt.n	801a668 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a5ee:	4580      	cmp	r8, r0
 801a5f0:	dd3a      	ble.n	801a668 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a5f2:	f1bc 0f00 	cmp.w	ip, #0
 801a5f6:	db37      	blt.n	801a668 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a5f8:	45e1      	cmp	r9, ip
 801a5fa:	dd35      	ble.n	801a668 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801a5fc:	eb03 0b0e 	add.w	fp, r3, lr
 801a600:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801a604:	f01b 0f01 	tst.w	fp, #1
 801a608:	5c10      	ldrb	r0, [r2, r0]
 801a60a:	bf0c      	ite	eq
 801a60c:	f000 000f 	andeq.w	r0, r0, #15
 801a610:	1100      	asrne	r0, r0, #4
 801a612:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a616:	b2c0      	uxtb	r0, r0
 801a618:	f1ba 0f00 	cmp.w	sl, #0
 801a61c:	db26      	blt.n	801a66c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a61e:	45d0      	cmp	r8, sl
 801a620:	dd24      	ble.n	801a66c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a622:	f1bc 0f00 	cmp.w	ip, #0
 801a626:	db21      	blt.n	801a66c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a628:	45e1      	cmp	r9, ip
 801a62a:	dd1f      	ble.n	801a66c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801a62c:	b307      	cbz	r7, 801a670 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801a62e:	3301      	adds	r3, #1
 801a630:	449e      	add	lr, r3
 801a632:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801a636:	f01e 0f01 	tst.w	lr, #1
 801a63a:	5cd3      	ldrb	r3, [r2, r3]
 801a63c:	bf0c      	ite	eq
 801a63e:	f003 030f 	andeq.w	r3, r3, #15
 801a642:	111b      	asrne	r3, r3, #4
 801a644:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a648:	b2db      	uxtb	r3, r3
 801a64a:	2f0f      	cmp	r7, #15
 801a64c:	d911      	bls.n	801a672 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801a64e:	4b32      	ldr	r3, [pc, #200]	; (801a718 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801a650:	f240 1157 	movw	r1, #343	; 0x157
 801a654:	4a31      	ldr	r2, [pc, #196]	; (801a71c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801a656:	4832      	ldr	r0, [pc, #200]	; (801a720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801a658:	f000 fd10 	bl	801b07c <__assert_func>
 801a65c:	2600      	movs	r6, #0
 801a65e:	e7a4      	b.n	801a5aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801a660:	2400      	movs	r4, #0
 801a662:	e7bd      	b.n	801a5e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801a664:	463c      	mov	r4, r7
 801a666:	e7be      	b.n	801a5e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801a668:	2000      	movs	r0, #0
 801a66a:	e7d5      	b.n	801a618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801a66c:	2300      	movs	r3, #0
 801a66e:	e7ec      	b.n	801a64a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801a670:	463b      	mov	r3, r7
 801a672:	2d0f      	cmp	r5, #15
 801a674:	d8eb      	bhi.n	801a64e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801a676:	b2bf      	uxth	r7, r7
 801a678:	b2ad      	uxth	r5, r5
 801a67a:	fb07 f205 	mul.w	r2, r7, r5
 801a67e:	013f      	lsls	r7, r7, #4
 801a680:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801a684:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801a688:	1abf      	subs	r7, r7, r2
 801a68a:	b2ad      	uxth	r5, r5
 801a68c:	b2bf      	uxth	r7, r7
 801a68e:	ebac 0c05 	sub.w	ip, ip, r5
 801a692:	437c      	muls	r4, r7
 801a694:	fa1f fc8c 	uxth.w	ip, ip
 801a698:	fb06 440c 	mla	r4, r6, ip, r4
 801a69c:	fb05 4400 	mla	r4, r5, r0, r4
 801a6a0:	fb02 4303 	mla	r3, r2, r3, r4
 801a6a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a6a8:	b353      	cbz	r3, 801a700 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801a6aa:	4a1e      	ldr	r2, [pc, #120]	; (801a724 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801a6ac:	7808      	ldrb	r0, [r1, #0]
 801a6ae:	6814      	ldr	r4, [r2, #0]
 801a6b0:	b29a      	uxth	r2, r3
 801a6b2:	43db      	mvns	r3, r3
 801a6b4:	b2e5      	uxtb	r5, r4
 801a6b6:	b2db      	uxtb	r3, r3
 801a6b8:	fb15 f502 	smulbb	r5, r5, r2
 801a6bc:	fb00 5003 	mla	r0, r0, r3, r5
 801a6c0:	b280      	uxth	r0, r0
 801a6c2:	1c45      	adds	r5, r0, #1
 801a6c4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801a6c8:	784d      	ldrb	r5, [r1, #1]
 801a6ca:	fb15 f503 	smulbb	r5, r5, r3
 801a6ce:	1200      	asrs	r0, r0, #8
 801a6d0:	7008      	strb	r0, [r1, #0]
 801a6d2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801a6d6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801a6da:	fb00 5002 	mla	r0, r0, r2, r5
 801a6de:	b280      	uxth	r0, r0
 801a6e0:	1c45      	adds	r5, r0, #1
 801a6e2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801a6e6:	1200      	asrs	r0, r0, #8
 801a6e8:	7048      	strb	r0, [r1, #1]
 801a6ea:	7888      	ldrb	r0, [r1, #2]
 801a6ec:	fb10 f303 	smulbb	r3, r0, r3
 801a6f0:	fb04 3202 	mla	r2, r4, r2, r3
 801a6f4:	b292      	uxth	r2, r2
 801a6f6:	1c53      	adds	r3, r2, #1
 801a6f8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a6fc:	1212      	asrs	r2, r2, #8
 801a6fe:	708a      	strb	r2, [r1, #2]
 801a700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a704:	2f0f      	cmp	r7, #15
 801a706:	d8a2      	bhi.n	801a64e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801a708:	462b      	mov	r3, r5
 801a70a:	4628      	mov	r0, r5
 801a70c:	e7b3      	b.n	801a676 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801a70e:	2d00      	cmp	r5, #0
 801a710:	d1a8      	bne.n	801a664 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801a712:	462c      	mov	r4, r5
 801a714:	e7f8      	b.n	801a708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801a716:	bf00      	nop
 801a718:	0801f117 	.word	0x0801f117
 801a71c:	0801f5ce 	.word	0x0801f5ce
 801a720:	0801f19f 	.word	0x0801f19f
 801a724:	24006bc4 	.word	0x24006bc4

0801a728 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a72c:	ed2d 8b08 	vpush	{d8-d11}
 801a730:	b093      	sub	sp, #76	; 0x4c
 801a732:	461c      	mov	r4, r3
 801a734:	eeb0 aa40 	vmov.f32	s20, s0
 801a738:	920c      	str	r2, [sp, #48]	; 0x30
 801a73a:	eef0 9a60 	vmov.f32	s19, s1
 801a73e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a740:	eeb0 9a41 	vmov.f32	s18, s2
 801a744:	9011      	str	r0, [sp, #68]	; 0x44
 801a746:	eeb0 8a62 	vmov.f32	s16, s5
 801a74a:	6850      	ldr	r0, [r2, #4]
 801a74c:	eef0 8a43 	vmov.f32	s17, s6
 801a750:	9107      	str	r1, [sp, #28]
 801a752:	eef0 ba44 	vmov.f32	s23, s8
 801a756:	6812      	ldr	r2, [r2, #0]
 801a758:	eeb0 ba64 	vmov.f32	s22, s9
 801a75c:	eef0 aa45 	vmov.f32	s21, s10
 801a760:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a764:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801a768:	fb00 1303 	mla	r3, r0, r3, r1
 801a76c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a770:	eb02 0b03 	add.w	fp, r2, r3
 801a774:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a776:	689b      	ldr	r3, [r3, #8]
 801a778:	3301      	adds	r3, #1
 801a77a:	f023 0301 	bic.w	r3, r3, #1
 801a77e:	9309      	str	r3, [sp, #36]	; 0x24
 801a780:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a782:	f8d3 8000 	ldr.w	r8, [r3]
 801a786:	9b07      	ldr	r3, [sp, #28]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	dc03      	bgt.n	801a794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a78c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a78e:	2b00      	cmp	r3, #0
 801a790:	f340 822b 	ble.w	801abea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a794:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a796:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a79a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a79e:	1e48      	subs	r0, r1, #1
 801a7a0:	1e57      	subs	r7, r2, #1
 801a7a2:	2c00      	cmp	r4, #0
 801a7a4:	f340 80d7 	ble.w	801a956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801a7a8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a7ac:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a7b0:	d406      	bmi.n	801a7c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7b2:	4584      	cmp	ip, r0
 801a7b4:	da04      	bge.n	801a7c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	db02      	blt.n	801a7c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a7ba:	42bb      	cmp	r3, r7
 801a7bc:	f2c0 80cc 	blt.w	801a958 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801a7c0:	f11c 0c01 	adds.w	ip, ip, #1
 801a7c4:	f100 80bf 	bmi.w	801a946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7c8:	4561      	cmp	r1, ip
 801a7ca:	f2c0 80bc 	blt.w	801a946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7ce:	3301      	adds	r3, #1
 801a7d0:	f100 80b9 	bmi.w	801a946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	f2c0 80b6 	blt.w	801a946 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801a7da:	46a2      	mov	sl, r4
 801a7dc:	465f      	mov	r7, fp
 801a7de:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801a7e2:	f1ba 0f00 	cmp.w	sl, #0
 801a7e6:	f340 80d4 	ble.w	801a992 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a7ea:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801a7ee:	1430      	asrs	r0, r6, #16
 801a7f0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a7f4:	9308      	str	r3, [sp, #32]
 801a7f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a7f8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801a7fc:	142b      	asrs	r3, r5, #16
 801a7fe:	f100 8124 	bmi.w	801aa4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a802:	f10c 32ff 	add.w	r2, ip, #4294967295
 801a806:	4293      	cmp	r3, r2
 801a808:	f280 811f 	bge.w	801aa4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a80c:	2800      	cmp	r0, #0
 801a80e:	f2c0 811c 	blt.w	801aa4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a812:	f10e 32ff 	add.w	r2, lr, #4294967295
 801a816:	4290      	cmp	r0, r2
 801a818:	f280 8117 	bge.w	801aa4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a81c:	fb00 3309 	mla	r3, r0, r9, r3
 801a820:	0858      	lsrs	r0, r3, #1
 801a822:	07da      	lsls	r2, r3, #31
 801a824:	9a08      	ldr	r2, [sp, #32]
 801a826:	f818 c000 	ldrb.w	ip, [r8, r0]
 801a82a:	bf54      	ite	pl
 801a82c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801a830:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801a834:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801a838:	fa5f fc8c 	uxtb.w	ip, ip
 801a83c:	2a00      	cmp	r2, #0
 801a83e:	f000 80ed 	beq.w	801aa1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801a842:	1c58      	adds	r0, r3, #1
 801a844:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801a848:	07c0      	lsls	r0, r0, #31
 801a84a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801a84e:	bf54      	ite	pl
 801a850:	f00e 0e0f 	andpl.w	lr, lr, #15
 801a854:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801a858:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801a85c:	fa5f fe8e 	uxtb.w	lr, lr
 801a860:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801a864:	b1c9      	cbz	r1, 801a89a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801a866:	444b      	add	r3, r9
 801a868:	0858      	lsrs	r0, r3, #1
 801a86a:	07da      	lsls	r2, r3, #31
 801a86c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a870:	bf54      	ite	pl
 801a872:	f000 000f 	andpl.w	r0, r0, #15
 801a876:	1100      	asrmi	r0, r0, #4
 801a878:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a87c:	b2c0      	uxtb	r0, r0
 801a87e:	900a      	str	r0, [sp, #40]	; 0x28
 801a880:	1c58      	adds	r0, r3, #1
 801a882:	0843      	lsrs	r3, r0, #1
 801a884:	07c2      	lsls	r2, r0, #31
 801a886:	f818 3003 	ldrb.w	r3, [r8, r3]
 801a88a:	bf54      	ite	pl
 801a88c:	f003 030f 	andpl.w	r3, r3, #15
 801a890:	111b      	asrmi	r3, r3, #4
 801a892:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801a896:	b2db      	uxtb	r3, r3
 801a898:	930e      	str	r3, [sp, #56]	; 0x38
 801a89a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a89e:	b289      	uxth	r1, r1
 801a8a0:	fb02 f301 	mul.w	r3, r2, r1
 801a8a4:	0112      	lsls	r2, r2, #4
 801a8a6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801a8aa:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801a8ae:	1ad2      	subs	r2, r2, r3
 801a8b0:	b289      	uxth	r1, r1
 801a8b2:	b292      	uxth	r2, r2
 801a8b4:	1a40      	subs	r0, r0, r1
 801a8b6:	fa1f fe80 	uxth.w	lr, r0
 801a8ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a8bc:	4342      	muls	r2, r0
 801a8be:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801a8c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8c4:	fb01 c102 	mla	r1, r1, r2, ip
 801a8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8ca:	fb03 1302 	mla	r3, r3, r2, r1
 801a8ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a8d2:	b383      	cbz	r3, 801a936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801a8d4:	4ac7      	ldr	r2, [pc, #796]	; (801abf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801a8d6:	2bff      	cmp	r3, #255	; 0xff
 801a8d8:	6812      	ldr	r2, [r2, #0]
 801a8da:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801a8de:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801a8e2:	b2d2      	uxtb	r2, r2
 801a8e4:	f000 80ac 	beq.w	801aa40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801a8e8:	b299      	uxth	r1, r3
 801a8ea:	43db      	mvns	r3, r3
 801a8ec:	f897 c000 	ldrb.w	ip, [r7]
 801a8f0:	fb12 f201 	smulbb	r2, r2, r1
 801a8f4:	b2db      	uxtb	r3, r3
 801a8f6:	fb10 f001 	smulbb	r0, r0, r1
 801a8fa:	fb0c 2203 	mla	r2, ip, r3, r2
 801a8fe:	fb1e f101 	smulbb	r1, lr, r1
 801a902:	b292      	uxth	r2, r2
 801a904:	f102 0c01 	add.w	ip, r2, #1
 801a908:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a90c:	1212      	asrs	r2, r2, #8
 801a90e:	703a      	strb	r2, [r7, #0]
 801a910:	787a      	ldrb	r2, [r7, #1]
 801a912:	fb02 0003 	mla	r0, r2, r3, r0
 801a916:	b280      	uxth	r0, r0
 801a918:	1c42      	adds	r2, r0, #1
 801a91a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a91e:	78ba      	ldrb	r2, [r7, #2]
 801a920:	fb02 1303 	mla	r3, r2, r3, r1
 801a924:	1200      	asrs	r0, r0, #8
 801a926:	b29b      	uxth	r3, r3
 801a928:	7078      	strb	r0, [r7, #1]
 801a92a:	f103 0e01 	add.w	lr, r3, #1
 801a92e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801a932:	121b      	asrs	r3, r3, #8
 801a934:	70bb      	strb	r3, [r7, #2]
 801a936:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a938:	3703      	adds	r7, #3
 801a93a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a93e:	441d      	add	r5, r3
 801a940:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a942:	441e      	add	r6, r3
 801a944:	e74d      	b.n	801a7e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a946:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a948:	3c01      	subs	r4, #1
 801a94a:	f10b 0b03 	add.w	fp, fp, #3
 801a94e:	441d      	add	r5, r3
 801a950:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a952:	441e      	add	r6, r3
 801a954:	e725      	b.n	801a7a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a956:	d021      	beq.n	801a99c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801a958:	1e63      	subs	r3, r4, #1
 801a95a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a95c:	fb00 5003 	mla	r0, r0, r3, r5
 801a960:	1400      	asrs	r0, r0, #16
 801a962:	f53f af3a 	bmi.w	801a7da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a966:	3901      	subs	r1, #1
 801a968:	4288      	cmp	r0, r1
 801a96a:	f6bf af36 	bge.w	801a7da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a96e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a970:	fb01 6303 	mla	r3, r1, r3, r6
 801a974:	141b      	asrs	r3, r3, #16
 801a976:	f53f af30 	bmi.w	801a7da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a97a:	3a01      	subs	r2, #1
 801a97c:	4293      	cmp	r3, r2
 801a97e:	f6bf af2c 	bge.w	801a7da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a982:	f10b 0c03 	add.w	ip, fp, #3
 801a986:	46a6      	mov	lr, r4
 801a988:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801a98c:	f1be 0f00 	cmp.w	lr, #0
 801a990:	dc79      	bgt.n	801aa86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801a992:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a996:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a99a:	44a3      	add	fp, r4
 801a99c:	9b07      	ldr	r3, [sp, #28]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	f340 8123 	ble.w	801abea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a9a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a9a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a9aa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a9ae:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a9b2:	eef0 6a48 	vmov.f32	s13, s16
 801a9b6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a9ba:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a9be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9c2:	ee16 5a90 	vmov	r5, s13
 801a9c6:	eef0 6a68 	vmov.f32	s13, s17
 801a9ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9ce:	ee16 6a90 	vmov	r6, s13
 801a9d2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a9d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a9da:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a9de:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a9e2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a9e6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a9ea:	ee18 2a10 	vmov	r2, s16
 801a9ee:	eeb0 8a47 	vmov.f32	s16, s14
 801a9f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9f6:	ee18 2a90 	vmov	r2, s17
 801a9fa:	9327      	str	r3, [sp, #156]	; 0x9c
 801a9fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a9fe:	eef0 8a67 	vmov.f32	s17, s15
 801aa02:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa06:	9328      	str	r3, [sp, #160]	; 0xa0
 801aa08:	9b07      	ldr	r3, [sp, #28]
 801aa0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa0c:	3b01      	subs	r3, #1
 801aa0e:	9307      	str	r3, [sp, #28]
 801aa10:	bf08      	it	eq
 801aa12:	4614      	moveq	r4, r2
 801aa14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801aa16:	bf18      	it	ne
 801aa18:	461c      	movne	r4, r3
 801aa1a:	e6b4      	b.n	801a786 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801aa1c:	2900      	cmp	r1, #0
 801aa1e:	f43f af3c 	beq.w	801a89a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801aa22:	eb09 0003 	add.w	r0, r9, r3
 801aa26:	0843      	lsrs	r3, r0, #1
 801aa28:	07c0      	lsls	r0, r0, #31
 801aa2a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801aa2e:	bf54      	ite	pl
 801aa30:	f003 030f 	andpl.w	r3, r3, #15
 801aa34:	111b      	asrmi	r3, r3, #4
 801aa36:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801aa3a:	b2db      	uxtb	r3, r3
 801aa3c:	930a      	str	r3, [sp, #40]	; 0x28
 801aa3e:	e72c      	b.n	801a89a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801aa40:	703a      	strb	r2, [r7, #0]
 801aa42:	7078      	strb	r0, [r7, #1]
 801aa44:	f887 e002 	strb.w	lr, [r7, #2]
 801aa48:	e775      	b.n	801a936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa4a:	1c5a      	adds	r2, r3, #1
 801aa4c:	f53f af73 	bmi.w	801a936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa50:	4594      	cmp	ip, r2
 801aa52:	f6ff af70 	blt.w	801a936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa56:	1c42      	adds	r2, r0, #1
 801aa58:	f53f af6d 	bmi.w	801a936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa5c:	4596      	cmp	lr, r2
 801aa5e:	f6ff af6a 	blt.w	801a936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa62:	9302      	str	r3, [sp, #8]
 801aa64:	fa0f f38e 	sxth.w	r3, lr
 801aa68:	9a08      	ldr	r2, [sp, #32]
 801aa6a:	9301      	str	r3, [sp, #4]
 801aa6c:	fa0f f38c 	sxth.w	r3, ip
 801aa70:	9105      	str	r1, [sp, #20]
 801aa72:	4639      	mov	r1, r7
 801aa74:	9300      	str	r3, [sp, #0]
 801aa76:	464b      	mov	r3, r9
 801aa78:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801aa7c:	4642      	mov	r2, r8
 801aa7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aa80:	f7ff fd70 	bl	801a564 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801aa84:	e757      	b.n	801a936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa86:	142a      	asrs	r2, r5, #16
 801aa88:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801aa8c:	1433      	asrs	r3, r6, #16
 801aa8e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801aa92:	fb09 2303 	mla	r3, r9, r3, r2
 801aa96:	085a      	lsrs	r2, r3, #1
 801aa98:	07d9      	lsls	r1, r3, #31
 801aa9a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801aa9e:	bf54      	ite	pl
 801aaa0:	f002 020f 	andpl.w	r2, r2, #15
 801aaa4:	1112      	asrmi	r2, r2, #4
 801aaa6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801aaaa:	b2d2      	uxtb	r2, r2
 801aaac:	2800      	cmp	r0, #0
 801aaae:	f000 8085 	beq.w	801abbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801aab2:	f103 0a01 	add.w	sl, r3, #1
 801aab6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801aaba:	f01a 0f01 	tst.w	sl, #1
 801aabe:	f818 1001 	ldrb.w	r1, [r8, r1]
 801aac2:	bf0c      	ite	eq
 801aac4:	f001 010f 	andeq.w	r1, r1, #15
 801aac8:	1109      	asrne	r1, r1, #4
 801aaca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801aace:	b2c9      	uxtb	r1, r1
 801aad0:	910f      	str	r1, [sp, #60]	; 0x3c
 801aad2:	b1df      	cbz	r7, 801ab0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801aad4:	444b      	add	r3, r9
 801aad6:	0859      	lsrs	r1, r3, #1
 801aad8:	f013 0f01 	tst.w	r3, #1
 801aadc:	f103 0301 	add.w	r3, r3, #1
 801aae0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801aae4:	bf0c      	ite	eq
 801aae6:	f001 010f 	andeq.w	r1, r1, #15
 801aaea:	1109      	asrne	r1, r1, #4
 801aaec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801aaf0:	b2c9      	uxtb	r1, r1
 801aaf2:	910b      	str	r1, [sp, #44]	; 0x2c
 801aaf4:	0859      	lsrs	r1, r3, #1
 801aaf6:	07db      	lsls	r3, r3, #31
 801aaf8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801aafc:	bf54      	ite	pl
 801aafe:	f001 010f 	andpl.w	r1, r1, #15
 801ab02:	1109      	asrmi	r1, r1, #4
 801ab04:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ab08:	b2c9      	uxtb	r1, r1
 801ab0a:	9110      	str	r1, [sp, #64]	; 0x40
 801ab0c:	b280      	uxth	r0, r0
 801ab0e:	b2bf      	uxth	r7, r7
 801ab10:	fb00 f307 	mul.w	r3, r0, r7
 801ab14:	0100      	lsls	r0, r0, #4
 801ab16:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801ab1a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801ab1e:	1ac0      	subs	r0, r0, r3
 801ab20:	b2bf      	uxth	r7, r7
 801ab22:	b280      	uxth	r0, r0
 801ab24:	1bc9      	subs	r1, r1, r7
 801ab26:	fa1f fa81 	uxth.w	sl, r1
 801ab2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ab2c:	4348      	muls	r0, r1
 801ab2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ab30:	fb02 020a 	mla	r2, r2, sl, r0
 801ab34:	fb07 2701 	mla	r7, r7, r1, r2
 801ab38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab3a:	fb03 7302 	mla	r3, r3, r2, r7
 801ab3e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab42:	b393      	cbz	r3, 801abaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801ab44:	4a2b      	ldr	r2, [pc, #172]	; (801abf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801ab46:	2bff      	cmp	r3, #255	; 0xff
 801ab48:	6811      	ldr	r1, [r2, #0]
 801ab4a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801ab4e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801ab52:	b2c9      	uxtb	r1, r1
 801ab54:	d042      	beq.n	801abdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ab56:	b298      	uxth	r0, r3
 801ab58:	43db      	mvns	r3, r3
 801ab5a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801ab5e:	fb11 f100 	smulbb	r1, r1, r0
 801ab62:	b2db      	uxtb	r3, r3
 801ab64:	fb17 f700 	smulbb	r7, r7, r0
 801ab68:	fb02 1103 	mla	r1, r2, r3, r1
 801ab6c:	fb1a f000 	smulbb	r0, sl, r0
 801ab70:	b289      	uxth	r1, r1
 801ab72:	1c4a      	adds	r2, r1, #1
 801ab74:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ab78:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801ab7c:	fb02 7703 	mla	r7, r2, r3, r7
 801ab80:	1209      	asrs	r1, r1, #8
 801ab82:	b2bf      	uxth	r7, r7
 801ab84:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801ab88:	1c7a      	adds	r2, r7, #1
 801ab8a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ab8e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801ab92:	fb02 0303 	mla	r3, r2, r3, r0
 801ab96:	123f      	asrs	r7, r7, #8
 801ab98:	b29b      	uxth	r3, r3
 801ab9a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801ab9e:	1c5a      	adds	r2, r3, #1
 801aba0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801aba4:	121b      	asrs	r3, r3, #8
 801aba6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801abaa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801abac:	f10c 0c03 	add.w	ip, ip, #3
 801abb0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801abb4:	441d      	add	r5, r3
 801abb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801abb8:	441e      	add	r6, r3
 801abba:	e6e7      	b.n	801a98c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801abbc:	2f00      	cmp	r7, #0
 801abbe:	d0a5      	beq.n	801ab0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801abc0:	444b      	add	r3, r9
 801abc2:	0859      	lsrs	r1, r3, #1
 801abc4:	07db      	lsls	r3, r3, #31
 801abc6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801abca:	bf54      	ite	pl
 801abcc:	f001 010f 	andpl.w	r1, r1, #15
 801abd0:	1109      	asrmi	r1, r1, #4
 801abd2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801abd6:	b2c9      	uxtb	r1, r1
 801abd8:	910b      	str	r1, [sp, #44]	; 0x2c
 801abda:	e797      	b.n	801ab0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801abdc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801abe0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801abe4:	f80c ac01 	strb.w	sl, [ip, #-1]
 801abe8:	e7df      	b.n	801abaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801abea:	b013      	add	sp, #76	; 0x4c
 801abec:	ecbd 8b08 	vpop	{d8-d11}
 801abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf4:	24006bc4 	.word	0x24006bc4

0801abf8 <CRC_Lock>:
 801abf8:	4a20      	ldr	r2, [pc, #128]	; (801ac7c <CRC_Lock+0x84>)
 801abfa:	b530      	push	{r4, r5, lr}
 801abfc:	6813      	ldr	r3, [r2, #0]
 801abfe:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801ac02:	f24c 2540 	movw	r5, #49728	; 0xc240
 801ac06:	f023 0301 	bic.w	r3, r3, #1
 801ac0a:	6013      	str	r3, [r2, #0]
 801ac0c:	4b1c      	ldr	r3, [pc, #112]	; (801ac80 <CRC_Lock+0x88>)
 801ac0e:	681a      	ldr	r2, [r3, #0]
 801ac10:	4022      	ands	r2, r4
 801ac12:	42aa      	cmp	r2, r5
 801ac14:	d005      	beq.n	801ac22 <CRC_Lock+0x2a>
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	f24c 2270 	movw	r2, #49776	; 0xc270
 801ac1c:	4023      	ands	r3, r4
 801ac1e:	4293      	cmp	r3, r2
 801ac20:	d124      	bne.n	801ac6c <CRC_Lock+0x74>
 801ac22:	4b18      	ldr	r3, [pc, #96]	; (801ac84 <CRC_Lock+0x8c>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	bb0b      	cbnz	r3, 801ac6c <CRC_Lock+0x74>
 801ac28:	4b17      	ldr	r3, [pc, #92]	; (801ac88 <CRC_Lock+0x90>)
 801ac2a:	681a      	ldr	r2, [r3, #0]
 801ac2c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ac30:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ac34:	d00d      	beq.n	801ac52 <CRC_Lock+0x5a>
 801ac36:	681a      	ldr	r2, [r3, #0]
 801ac38:	f240 4483 	movw	r4, #1155	; 0x483
 801ac3c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ac40:	42a2      	cmp	r2, r4
 801ac42:	d006      	beq.n	801ac52 <CRC_Lock+0x5a>
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	f240 4285 	movw	r2, #1157	; 0x485
 801ac4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ac4e:	4293      	cmp	r3, r2
 801ac50:	d10c      	bne.n	801ac6c <CRC_Lock+0x74>
 801ac52:	4b0e      	ldr	r3, [pc, #56]	; (801ac8c <CRC_Lock+0x94>)
 801ac54:	2201      	movs	r2, #1
 801ac56:	601a      	str	r2, [r3, #0]
 801ac58:	681a      	ldr	r2, [r3, #0]
 801ac5a:	2a00      	cmp	r2, #0
 801ac5c:	d1fc      	bne.n	801ac58 <CRC_Lock+0x60>
 801ac5e:	4b0c      	ldr	r3, [pc, #48]	; (801ac90 <CRC_Lock+0x98>)
 801ac60:	6018      	str	r0, [r3, #0]
 801ac62:	6818      	ldr	r0, [r3, #0]
 801ac64:	1a43      	subs	r3, r0, r1
 801ac66:	4258      	negs	r0, r3
 801ac68:	4158      	adcs	r0, r3
 801ac6a:	bd30      	pop	{r4, r5, pc}
 801ac6c:	4b09      	ldr	r3, [pc, #36]	; (801ac94 <CRC_Lock+0x9c>)
 801ac6e:	2201      	movs	r2, #1
 801ac70:	601a      	str	r2, [r3, #0]
 801ac72:	681a      	ldr	r2, [r3, #0]
 801ac74:	2a00      	cmp	r2, #0
 801ac76:	d1fc      	bne.n	801ac72 <CRC_Lock+0x7a>
 801ac78:	4b07      	ldr	r3, [pc, #28]	; (801ac98 <CRC_Lock+0xa0>)
 801ac7a:	e7f1      	b.n	801ac60 <CRC_Lock+0x68>
 801ac7c:	e0002000 	.word	0xe0002000
 801ac80:	e000ed00 	.word	0xe000ed00
 801ac84:	e0042000 	.word	0xe0042000
 801ac88:	5c001000 	.word	0x5c001000
 801ac8c:	58024c08 	.word	0x58024c08
 801ac90:	58024c00 	.word	0x58024c00
 801ac94:	40023008 	.word	0x40023008
 801ac98:	40023000 	.word	0x40023000

0801ac9c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801ac9c:	6101      	str	r1, [r0, #16]
 801ac9e:	4770      	bx	lr

0801aca0 <_ZN8touchgfx8Gestures4tickEv>:
 801aca0:	7b83      	ldrb	r3, [r0, #14]
 801aca2:	b14b      	cbz	r3, 801acb8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801aca4:	8903      	ldrh	r3, [r0, #8]
 801aca6:	3301      	adds	r3, #1
 801aca8:	b29b      	uxth	r3, r3
 801acaa:	2b07      	cmp	r3, #7
 801acac:	8103      	strh	r3, [r0, #8]
 801acae:	bf81      	itttt	hi
 801acb0:	2300      	movhi	r3, #0
 801acb2:	8143      	strhhi	r3, [r0, #10]
 801acb4:	8183      	strhhi	r3, [r0, #12]
 801acb6:	7383      	strbhi	r3, [r0, #14]
 801acb8:	4770      	bx	lr
	...

0801acbc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801acbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801acc0:	4604      	mov	r4, r0
 801acc2:	4698      	mov	r8, r3
 801acc4:	8880      	ldrh	r0, [r0, #4]
 801acc6:	4617      	mov	r7, r2
 801acc8:	4b1d      	ldr	r3, [pc, #116]	; (801ad40 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801acca:	460e      	mov	r6, r1
 801accc:	f8ad 0006 	strh.w	r0, [sp, #6]
 801acd0:	eba8 0000 	sub.w	r0, r8, r0
 801acd4:	9300      	str	r3, [sp, #0]
 801acd6:	2300      	movs	r3, #0
 801acd8:	b280      	uxth	r0, r0
 801acda:	8aa2      	ldrh	r2, [r4, #20]
 801acdc:	f88d 3004 	strb.w	r3, [sp, #4]
 801ace0:	b203      	sxth	r3, r0
 801ace2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801ace6:	88e1      	ldrh	r1, [r4, #6]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	f8ad 800a 	strh.w	r8, [sp, #10]
 801acee:	f8ad 1008 	strh.w	r1, [sp, #8]
 801acf2:	bfb8      	it	lt
 801acf4:	4240      	neglt	r0, r0
 801acf6:	f8ad 500c 	strh.w	r5, [sp, #12]
 801acfa:	bfb8      	it	lt
 801acfc:	b203      	sxthlt	r3, r0
 801acfe:	4293      	cmp	r3, r2
 801ad00:	dc08      	bgt.n	801ad14 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801ad02:	1a69      	subs	r1, r5, r1
 801ad04:	b289      	uxth	r1, r1
 801ad06:	b20b      	sxth	r3, r1
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	bfbc      	itt	lt
 801ad0c:	4249      	neglt	r1, r1
 801ad0e:	b20b      	sxthlt	r3, r1
 801ad10:	429a      	cmp	r2, r3
 801ad12:	da13      	bge.n	801ad3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801ad14:	6920      	ldr	r0, [r4, #16]
 801ad16:	4669      	mov	r1, sp
 801ad18:	eba8 0606 	sub.w	r6, r8, r6
 801ad1c:	1bef      	subs	r7, r5, r7
 801ad1e:	6803      	ldr	r3, [r0, #0]
 801ad20:	685b      	ldr	r3, [r3, #4]
 801ad22:	4798      	blx	r3
 801ad24:	2300      	movs	r3, #0
 801ad26:	2001      	movs	r0, #1
 801ad28:	8166      	strh	r6, [r4, #10]
 801ad2a:	8123      	strh	r3, [r4, #8]
 801ad2c:	81a7      	strh	r7, [r4, #12]
 801ad2e:	f8a4 8004 	strh.w	r8, [r4, #4]
 801ad32:	80e5      	strh	r5, [r4, #6]
 801ad34:	73a0      	strb	r0, [r4, #14]
 801ad36:	b004      	add	sp, #16
 801ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad3c:	2000      	movs	r0, #0
 801ad3e:	e7fa      	b.n	801ad36 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801ad40:	0801e5d0 	.word	0x0801e5d0

0801ad44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801ad44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad46:	461e      	mov	r6, r3
 801ad48:	1e4b      	subs	r3, r1, #1
 801ad4a:	b085      	sub	sp, #20
 801ad4c:	4604      	mov	r4, r0
 801ad4e:	2b01      	cmp	r3, #1
 801ad50:	460d      	mov	r5, r1
 801ad52:	4617      	mov	r7, r2
 801ad54:	d84b      	bhi.n	801adee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801ad56:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ad5a:	1cd3      	adds	r3, r2, #3
 801ad5c:	b29b      	uxth	r3, r3
 801ad5e:	2b06      	cmp	r3, #6
 801ad60:	d916      	bls.n	801ad90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801ad62:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801ae04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801ad66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ad6a:	f8cd c004 	str.w	ip, [sp, #4]
 801ad6e:	f04f 0c00 	mov.w	ip, #0
 801ad72:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ad76:	6900      	ldr	r0, [r0, #16]
 801ad78:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ad7c:	a901      	add	r1, sp, #4
 801ad7e:	f88d c008 	strb.w	ip, [sp, #8]
 801ad82:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ad86:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ad8a:	6803      	ldr	r3, [r0, #0]
 801ad8c:	689b      	ldr	r3, [r3, #8]
 801ad8e:	4798      	blx	r3
 801ad90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ad94:	1cd3      	adds	r3, r2, #3
 801ad96:	b29b      	uxth	r3, r3
 801ad98:	2b06      	cmp	r3, #6
 801ad9a:	d916      	bls.n	801adca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ad9c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801ae04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801ada0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ada4:	f8cd c004 	str.w	ip, [sp, #4]
 801ada8:	f04f 0c01 	mov.w	ip, #1
 801adac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801adb0:	6920      	ldr	r0, [r4, #16]
 801adb2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801adb6:	a901      	add	r1, sp, #4
 801adb8:	f88d c008 	strb.w	ip, [sp, #8]
 801adbc:	f8ad 200a 	strh.w	r2, [sp, #10]
 801adc0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801adc4:	6803      	ldr	r3, [r0, #0]
 801adc6:	689b      	ldr	r3, [r3, #8]
 801adc8:	4798      	blx	r3
 801adca:	4b0d      	ldr	r3, [pc, #52]	; (801ae00 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801adcc:	a901      	add	r1, sp, #4
 801adce:	6920      	ldr	r0, [r4, #16]
 801add0:	9301      	str	r3, [sp, #4]
 801add2:	2300      	movs	r3, #0
 801add4:	f88d 5008 	strb.w	r5, [sp, #8]
 801add8:	f8ad 700a 	strh.w	r7, [sp, #10]
 801addc:	f8ad 600c 	strh.w	r6, [sp, #12]
 801ade0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ade4:	6803      	ldr	r3, [r0, #0]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	4798      	blx	r3
 801adea:	b005      	add	sp, #20
 801adec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adee:	2900      	cmp	r1, #0
 801adf0:	d1eb      	bne.n	801adca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801adf2:	80a2      	strh	r2, [r4, #4]
 801adf4:	80c6      	strh	r6, [r0, #6]
 801adf6:	60a1      	str	r1, [r4, #8]
 801adf8:	81a1      	strh	r1, [r4, #12]
 801adfa:	73a1      	strb	r1, [r4, #14]
 801adfc:	e7e5      	b.n	801adca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801adfe:	bf00      	nop
 801ae00:	0801e5bc 	.word	0x0801e5bc
 801ae04:	0801e5e4 	.word	0x0801e5e4

0801ae08 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801ae08:	790b      	ldrb	r3, [r1, #4]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	bf0c      	ite	eq
 801ae0e:	2301      	moveq	r3, #1
 801ae10:	2300      	movne	r3, #0
 801ae12:	b570      	push	{r4, r5, r6, lr}
 801ae14:	4604      	mov	r4, r0
 801ae16:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801ae1a:	460e      	mov	r6, r1
 801ae1c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801ae20:	d109      	bne.n	801ae36 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801ae22:	b14d      	cbz	r5, 801ae38 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801ae24:	7933      	ldrb	r3, [r6, #4]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	d10c      	bne.n	801ae44 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801ae2a:	6823      	ldr	r3, [r4, #0]
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae34:	4718      	bx	r3
 801ae36:	b12d      	cbz	r5, 801ae44 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801ae38:	6823      	ldr	r3, [r4, #0]
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	695b      	ldr	r3, [r3, #20]
 801ae3e:	4798      	blx	r3
 801ae40:	2d00      	cmp	r5, #0
 801ae42:	d1ef      	bne.n	801ae24 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801ae44:	bd70      	pop	{r4, r5, r6, pc}

0801ae46 <__aeabi_atexit>:
 801ae46:	460b      	mov	r3, r1
 801ae48:	4601      	mov	r1, r0
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f000 b93a 	b.w	801b0c4 <__cxa_atexit>

0801ae50 <_ZdlPvj>:
 801ae50:	f000 b812 	b.w	801ae78 <_ZdlPv>

0801ae54 <__cxa_guard_acquire>:
 801ae54:	6803      	ldr	r3, [r0, #0]
 801ae56:	07db      	lsls	r3, r3, #31
 801ae58:	d406      	bmi.n	801ae68 <__cxa_guard_acquire+0x14>
 801ae5a:	7843      	ldrb	r3, [r0, #1]
 801ae5c:	b103      	cbz	r3, 801ae60 <__cxa_guard_acquire+0xc>
 801ae5e:	deff      	udf	#255	; 0xff
 801ae60:	2301      	movs	r3, #1
 801ae62:	7043      	strb	r3, [r0, #1]
 801ae64:	4618      	mov	r0, r3
 801ae66:	4770      	bx	lr
 801ae68:	2000      	movs	r0, #0
 801ae6a:	4770      	bx	lr

0801ae6c <__cxa_guard_release>:
 801ae6c:	2301      	movs	r3, #1
 801ae6e:	6003      	str	r3, [r0, #0]
 801ae70:	4770      	bx	lr

0801ae72 <__cxa_pure_virtual>:
 801ae72:	b508      	push	{r3, lr}
 801ae74:	f000 f80e 	bl	801ae94 <_ZSt9terminatev>

0801ae78 <_ZdlPv>:
 801ae78:	f000 b976 	b.w	801b168 <free>

0801ae7c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801ae7c:	b508      	push	{r3, lr}
 801ae7e:	4780      	blx	r0
 801ae80:	f000 f8f4 	bl	801b06c <abort>

0801ae84 <_ZSt13get_terminatev>:
 801ae84:	4b02      	ldr	r3, [pc, #8]	; (801ae90 <_ZSt13get_terminatev+0xc>)
 801ae86:	6818      	ldr	r0, [r3, #0]
 801ae88:	f3bf 8f5b 	dmb	ish
 801ae8c:	4770      	bx	lr
 801ae8e:	bf00      	nop
 801ae90:	240000b8 	.word	0x240000b8

0801ae94 <_ZSt9terminatev>:
 801ae94:	b508      	push	{r3, lr}
 801ae96:	f7ff fff5 	bl	801ae84 <_ZSt13get_terminatev>
 801ae9a:	f7ff ffef 	bl	801ae7c <_ZN10__cxxabiv111__terminateEPFvvE>

0801ae9e <sinf_poly>:
 801ae9e:	07cb      	lsls	r3, r1, #31
 801aea0:	d412      	bmi.n	801aec8 <sinf_poly+0x2a>
 801aea2:	ee21 6b00 	vmul.f64	d6, d1, d0
 801aea6:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801aeaa:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801aeae:	eea5 7b01 	vfma.f64	d7, d5, d1
 801aeb2:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801aeb6:	ee21 1b06 	vmul.f64	d1, d1, d6
 801aeba:	eea5 0b06 	vfma.f64	d0, d5, d6
 801aebe:	eea7 0b01 	vfma.f64	d0, d7, d1
 801aec2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801aec6:	4770      	bx	lr
 801aec8:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801aecc:	ee21 6b01 	vmul.f64	d6, d1, d1
 801aed0:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801aed4:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801aed8:	eea1 7b05 	vfma.f64	d7, d1, d5
 801aedc:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801aee0:	eea1 0b05 	vfma.f64	d0, d1, d5
 801aee4:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801aee8:	ee21 1b06 	vmul.f64	d1, d1, d6
 801aeec:	eea6 0b05 	vfma.f64	d0, d6, d5
 801aef0:	e7e5      	b.n	801aebe <sinf_poly+0x20>
 801aef2:	0000      	movs	r0, r0
 801aef4:	0000      	movs	r0, r0
	...

0801aef8 <sinf>:
 801aef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aefa:	ee10 4a10 	vmov	r4, s0
 801aefe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801af02:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801af06:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801af0a:	eef0 7a40 	vmov.f32	s15, s0
 801af0e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801af12:	d218      	bcs.n	801af46 <sinf+0x4e>
 801af14:	ee26 1b06 	vmul.f64	d1, d6, d6
 801af18:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801af1c:	d20a      	bcs.n	801af34 <sinf+0x3c>
 801af1e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801af22:	d103      	bne.n	801af2c <sinf+0x34>
 801af24:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801af28:	ed8d 1a01 	vstr	s2, [sp, #4]
 801af2c:	eeb0 0a67 	vmov.f32	s0, s15
 801af30:	b003      	add	sp, #12
 801af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af34:	483e      	ldr	r0, [pc, #248]	; (801b030 <sinf+0x138>)
 801af36:	eeb0 0b46 	vmov.f64	d0, d6
 801af3a:	2100      	movs	r1, #0
 801af3c:	b003      	add	sp, #12
 801af3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af42:	f7ff bfac 	b.w	801ae9e <sinf_poly>
 801af46:	f240 422e 	movw	r2, #1070	; 0x42e
 801af4a:	4293      	cmp	r3, r2
 801af4c:	d824      	bhi.n	801af98 <sinf+0xa0>
 801af4e:	4b38      	ldr	r3, [pc, #224]	; (801b030 <sinf+0x138>)
 801af50:	ed93 7b08 	vldr	d7, [r3, #32]
 801af54:	ee26 7b07 	vmul.f64	d7, d6, d7
 801af58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801af5c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801af60:	ee17 1a90 	vmov	r1, s15
 801af64:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801af68:	1609      	asrs	r1, r1, #24
 801af6a:	ee07 1a90 	vmov	s15, r1
 801af6e:	f001 0203 	and.w	r2, r1, #3
 801af72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801af76:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801af7a:	ed92 0b00 	vldr	d0, [r2]
 801af7e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801af82:	f011 0f02 	tst.w	r1, #2
 801af86:	eea5 6b47 	vfms.f64	d6, d5, d7
 801af8a:	bf08      	it	eq
 801af8c:	4618      	moveq	r0, r3
 801af8e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801af92:	ee20 0b06 	vmul.f64	d0, d0, d6
 801af96:	e7d1      	b.n	801af3c <sinf+0x44>
 801af98:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801af9c:	d23d      	bcs.n	801b01a <sinf+0x122>
 801af9e:	4b25      	ldr	r3, [pc, #148]	; (801b034 <sinf+0x13c>)
 801afa0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801afa4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801afa8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801afac:	6a06      	ldr	r6, [r0, #32]
 801afae:	6900      	ldr	r0, [r0, #16]
 801afb0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801afb4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801afb8:	40a9      	lsls	r1, r5
 801afba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801afbe:	fba1 6706 	umull	r6, r7, r1, r6
 801afc2:	fb05 f301 	mul.w	r3, r5, r1
 801afc6:	463a      	mov	r2, r7
 801afc8:	fbe0 2301 	umlal	r2, r3, r0, r1
 801afcc:	1c11      	adds	r1, r2, #0
 801afce:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801afd2:	2000      	movs	r0, #0
 801afd4:	1a10      	subs	r0, r2, r0
 801afd6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801afda:	eb63 0101 	sbc.w	r1, r3, r1
 801afde:	f7e5 fb75 	bl	80006cc <__aeabi_l2d>
 801afe2:	0fb5      	lsrs	r5, r6, #30
 801afe4:	4a12      	ldr	r2, [pc, #72]	; (801b030 <sinf+0x138>)
 801afe6:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 801afea:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 801b028 <sinf+0x130>
 801afee:	ec41 0b17 	vmov	d7, r0, r1
 801aff2:	f003 0103 	and.w	r1, r3, #3
 801aff6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801affa:	ee27 0b00 	vmul.f64	d0, d7, d0
 801affe:	ed91 7b00 	vldr	d7, [r1]
 801b002:	ee20 1b00 	vmul.f64	d1, d0, d0
 801b006:	f013 0f02 	tst.w	r3, #2
 801b00a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 801b00e:	4629      	mov	r1, r5
 801b010:	bf08      	it	eq
 801b012:	4610      	moveq	r0, r2
 801b014:	ee27 0b00 	vmul.f64	d0, d7, d0
 801b018:	e790      	b.n	801af3c <sinf+0x44>
 801b01a:	b003      	add	sp, #12
 801b01c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b020:	f000 b815 	b.w	801b04e <__math_invalidf>
 801b024:	f3af 8000 	nop.w
 801b028:	54442d18 	.word	0x54442d18
 801b02c:	3c1921fb 	.word	0x3c1921fb
 801b030:	0801f8a0 	.word	0x0801f8a0
 801b034:	0801f840 	.word	0x0801f840

0801b038 <with_errnof>:
 801b038:	b513      	push	{r0, r1, r4, lr}
 801b03a:	4604      	mov	r4, r0
 801b03c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b040:	f000 f84e 	bl	801b0e0 <__errno>
 801b044:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b048:	6004      	str	r4, [r0, #0]
 801b04a:	b002      	add	sp, #8
 801b04c:	bd10      	pop	{r4, pc}

0801b04e <__math_invalidf>:
 801b04e:	eef0 7a40 	vmov.f32	s15, s0
 801b052:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b056:	eef4 7a67 	vcmp.f32	s15, s15
 801b05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b05e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801b062:	d602      	bvs.n	801b06a <__math_invalidf+0x1c>
 801b064:	2021      	movs	r0, #33	; 0x21
 801b066:	f7ff bfe7 	b.w	801b038 <with_errnof>
 801b06a:	4770      	bx	lr

0801b06c <abort>:
 801b06c:	b508      	push	{r3, lr}
 801b06e:	2006      	movs	r0, #6
 801b070:	f000 fc68 	bl	801b944 <raise>
 801b074:	2001      	movs	r0, #1
 801b076:	f7e6 fbfb 	bl	8001870 <_exit>
	...

0801b07c <__assert_func>:
 801b07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b07e:	4614      	mov	r4, r2
 801b080:	461a      	mov	r2, r3
 801b082:	4b09      	ldr	r3, [pc, #36]	; (801b0a8 <__assert_func+0x2c>)
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	4605      	mov	r5, r0
 801b088:	68d8      	ldr	r0, [r3, #12]
 801b08a:	b14c      	cbz	r4, 801b0a0 <__assert_func+0x24>
 801b08c:	4b07      	ldr	r3, [pc, #28]	; (801b0ac <__assert_func+0x30>)
 801b08e:	9100      	str	r1, [sp, #0]
 801b090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b094:	4906      	ldr	r1, [pc, #24]	; (801b0b0 <__assert_func+0x34>)
 801b096:	462b      	mov	r3, r5
 801b098:	f000 f828 	bl	801b0ec <fiprintf>
 801b09c:	f7ff ffe6 	bl	801b06c <abort>
 801b0a0:	4b04      	ldr	r3, [pc, #16]	; (801b0b4 <__assert_func+0x38>)
 801b0a2:	461c      	mov	r4, r3
 801b0a4:	e7f3      	b.n	801b08e <__assert_func+0x12>
 801b0a6:	bf00      	nop
 801b0a8:	240000bc 	.word	0x240000bc
 801b0ac:	0801f980 	.word	0x0801f980
 801b0b0:	0801f98d 	.word	0x0801f98d
 801b0b4:	0801f9bb 	.word	0x0801f9bb

0801b0b8 <atexit>:
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	4601      	mov	r1, r0
 801b0bc:	461a      	mov	r2, r3
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f000 bd1c 	b.w	801bafc <__register_exitproc>

0801b0c4 <__cxa_atexit>:
 801b0c4:	b510      	push	{r4, lr}
 801b0c6:	4c05      	ldr	r4, [pc, #20]	; (801b0dc <__cxa_atexit+0x18>)
 801b0c8:	4613      	mov	r3, r2
 801b0ca:	b12c      	cbz	r4, 801b0d8 <__cxa_atexit+0x14>
 801b0cc:	460a      	mov	r2, r1
 801b0ce:	4601      	mov	r1, r0
 801b0d0:	2002      	movs	r0, #2
 801b0d2:	f000 fd13 	bl	801bafc <__register_exitproc>
 801b0d6:	bd10      	pop	{r4, pc}
 801b0d8:	4620      	mov	r0, r4
 801b0da:	e7fc      	b.n	801b0d6 <__cxa_atexit+0x12>
 801b0dc:	0801bafd 	.word	0x0801bafd

0801b0e0 <__errno>:
 801b0e0:	4b01      	ldr	r3, [pc, #4]	; (801b0e8 <__errno+0x8>)
 801b0e2:	6818      	ldr	r0, [r3, #0]
 801b0e4:	4770      	bx	lr
 801b0e6:	bf00      	nop
 801b0e8:	240000bc 	.word	0x240000bc

0801b0ec <fiprintf>:
 801b0ec:	b40e      	push	{r1, r2, r3}
 801b0ee:	b503      	push	{r0, r1, lr}
 801b0f0:	4601      	mov	r1, r0
 801b0f2:	ab03      	add	r3, sp, #12
 801b0f4:	4805      	ldr	r0, [pc, #20]	; (801b10c <fiprintf+0x20>)
 801b0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0fa:	6800      	ldr	r0, [r0, #0]
 801b0fc:	9301      	str	r3, [sp, #4]
 801b0fe:	f000 f925 	bl	801b34c <_vfiprintf_r>
 801b102:	b002      	add	sp, #8
 801b104:	f85d eb04 	ldr.w	lr, [sp], #4
 801b108:	b003      	add	sp, #12
 801b10a:	4770      	bx	lr
 801b10c:	240000bc 	.word	0x240000bc

0801b110 <__libc_init_array>:
 801b110:	b570      	push	{r4, r5, r6, lr}
 801b112:	4d0d      	ldr	r5, [pc, #52]	; (801b148 <__libc_init_array+0x38>)
 801b114:	4c0d      	ldr	r4, [pc, #52]	; (801b14c <__libc_init_array+0x3c>)
 801b116:	1b64      	subs	r4, r4, r5
 801b118:	10a4      	asrs	r4, r4, #2
 801b11a:	2600      	movs	r6, #0
 801b11c:	42a6      	cmp	r6, r4
 801b11e:	d109      	bne.n	801b134 <__libc_init_array+0x24>
 801b120:	4d0b      	ldr	r5, [pc, #44]	; (801b150 <__libc_init_array+0x40>)
 801b122:	4c0c      	ldr	r4, [pc, #48]	; (801b154 <__libc_init_array+0x44>)
 801b124:	f001 f824 	bl	801c170 <_init>
 801b128:	1b64      	subs	r4, r4, r5
 801b12a:	10a4      	asrs	r4, r4, #2
 801b12c:	2600      	movs	r6, #0
 801b12e:	42a6      	cmp	r6, r4
 801b130:	d105      	bne.n	801b13e <__libc_init_array+0x2e>
 801b132:	bd70      	pop	{r4, r5, r6, pc}
 801b134:	f855 3b04 	ldr.w	r3, [r5], #4
 801b138:	4798      	blx	r3
 801b13a:	3601      	adds	r6, #1
 801b13c:	e7ee      	b.n	801b11c <__libc_init_array+0xc>
 801b13e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b142:	4798      	blx	r3
 801b144:	3601      	adds	r6, #1
 801b146:	e7f2      	b.n	801b12e <__libc_init_array+0x1e>
 801b148:	08020bac 	.word	0x08020bac
 801b14c:	08020bac 	.word	0x08020bac
 801b150:	08020bac 	.word	0x08020bac
 801b154:	08020bc0 	.word	0x08020bc0

0801b158 <malloc>:
 801b158:	4b02      	ldr	r3, [pc, #8]	; (801b164 <malloc+0xc>)
 801b15a:	4601      	mov	r1, r0
 801b15c:	6818      	ldr	r0, [r3, #0]
 801b15e:	f000 b871 	b.w	801b244 <_malloc_r>
 801b162:	bf00      	nop
 801b164:	240000bc 	.word	0x240000bc

0801b168 <free>:
 801b168:	4b02      	ldr	r3, [pc, #8]	; (801b174 <free+0xc>)
 801b16a:	4601      	mov	r1, r0
 801b16c:	6818      	ldr	r0, [r3, #0]
 801b16e:	f000 b819 	b.w	801b1a4 <_free_r>
 801b172:	bf00      	nop
 801b174:	240000bc 	.word	0x240000bc

0801b178 <memcpy>:
 801b178:	440a      	add	r2, r1
 801b17a:	4291      	cmp	r1, r2
 801b17c:	f100 33ff 	add.w	r3, r0, #4294967295
 801b180:	d100      	bne.n	801b184 <memcpy+0xc>
 801b182:	4770      	bx	lr
 801b184:	b510      	push	{r4, lr}
 801b186:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b18a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b18e:	4291      	cmp	r1, r2
 801b190:	d1f9      	bne.n	801b186 <memcpy+0xe>
 801b192:	bd10      	pop	{r4, pc}

0801b194 <memset>:
 801b194:	4402      	add	r2, r0
 801b196:	4603      	mov	r3, r0
 801b198:	4293      	cmp	r3, r2
 801b19a:	d100      	bne.n	801b19e <memset+0xa>
 801b19c:	4770      	bx	lr
 801b19e:	f803 1b01 	strb.w	r1, [r3], #1
 801b1a2:	e7f9      	b.n	801b198 <memset+0x4>

0801b1a4 <_free_r>:
 801b1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b1a6:	2900      	cmp	r1, #0
 801b1a8:	d048      	beq.n	801b23c <_free_r+0x98>
 801b1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1ae:	9001      	str	r0, [sp, #4]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	f1a1 0404 	sub.w	r4, r1, #4
 801b1b6:	bfb8      	it	lt
 801b1b8:	18e4      	addlt	r4, r4, r3
 801b1ba:	f000 ff21 	bl	801c000 <__malloc_lock>
 801b1be:	4a20      	ldr	r2, [pc, #128]	; (801b240 <_free_r+0x9c>)
 801b1c0:	9801      	ldr	r0, [sp, #4]
 801b1c2:	6813      	ldr	r3, [r2, #0]
 801b1c4:	4615      	mov	r5, r2
 801b1c6:	b933      	cbnz	r3, 801b1d6 <_free_r+0x32>
 801b1c8:	6063      	str	r3, [r4, #4]
 801b1ca:	6014      	str	r4, [r2, #0]
 801b1cc:	b003      	add	sp, #12
 801b1ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1d2:	f000 bf1b 	b.w	801c00c <__malloc_unlock>
 801b1d6:	42a3      	cmp	r3, r4
 801b1d8:	d90b      	bls.n	801b1f2 <_free_r+0x4e>
 801b1da:	6821      	ldr	r1, [r4, #0]
 801b1dc:	1862      	adds	r2, r4, r1
 801b1de:	4293      	cmp	r3, r2
 801b1e0:	bf04      	itt	eq
 801b1e2:	681a      	ldreq	r2, [r3, #0]
 801b1e4:	685b      	ldreq	r3, [r3, #4]
 801b1e6:	6063      	str	r3, [r4, #4]
 801b1e8:	bf04      	itt	eq
 801b1ea:	1852      	addeq	r2, r2, r1
 801b1ec:	6022      	streq	r2, [r4, #0]
 801b1ee:	602c      	str	r4, [r5, #0]
 801b1f0:	e7ec      	b.n	801b1cc <_free_r+0x28>
 801b1f2:	461a      	mov	r2, r3
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	b10b      	cbz	r3, 801b1fc <_free_r+0x58>
 801b1f8:	42a3      	cmp	r3, r4
 801b1fa:	d9fa      	bls.n	801b1f2 <_free_r+0x4e>
 801b1fc:	6811      	ldr	r1, [r2, #0]
 801b1fe:	1855      	adds	r5, r2, r1
 801b200:	42a5      	cmp	r5, r4
 801b202:	d10b      	bne.n	801b21c <_free_r+0x78>
 801b204:	6824      	ldr	r4, [r4, #0]
 801b206:	4421      	add	r1, r4
 801b208:	1854      	adds	r4, r2, r1
 801b20a:	42a3      	cmp	r3, r4
 801b20c:	6011      	str	r1, [r2, #0]
 801b20e:	d1dd      	bne.n	801b1cc <_free_r+0x28>
 801b210:	681c      	ldr	r4, [r3, #0]
 801b212:	685b      	ldr	r3, [r3, #4]
 801b214:	6053      	str	r3, [r2, #4]
 801b216:	4421      	add	r1, r4
 801b218:	6011      	str	r1, [r2, #0]
 801b21a:	e7d7      	b.n	801b1cc <_free_r+0x28>
 801b21c:	d902      	bls.n	801b224 <_free_r+0x80>
 801b21e:	230c      	movs	r3, #12
 801b220:	6003      	str	r3, [r0, #0]
 801b222:	e7d3      	b.n	801b1cc <_free_r+0x28>
 801b224:	6825      	ldr	r5, [r4, #0]
 801b226:	1961      	adds	r1, r4, r5
 801b228:	428b      	cmp	r3, r1
 801b22a:	bf04      	itt	eq
 801b22c:	6819      	ldreq	r1, [r3, #0]
 801b22e:	685b      	ldreq	r3, [r3, #4]
 801b230:	6063      	str	r3, [r4, #4]
 801b232:	bf04      	itt	eq
 801b234:	1949      	addeq	r1, r1, r5
 801b236:	6021      	streq	r1, [r4, #0]
 801b238:	6054      	str	r4, [r2, #4]
 801b23a:	e7c7      	b.n	801b1cc <_free_r+0x28>
 801b23c:	b003      	add	sp, #12
 801b23e:	bd30      	pop	{r4, r5, pc}
 801b240:	24006c98 	.word	0x24006c98

0801b244 <_malloc_r>:
 801b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b246:	1ccd      	adds	r5, r1, #3
 801b248:	f025 0503 	bic.w	r5, r5, #3
 801b24c:	3508      	adds	r5, #8
 801b24e:	2d0c      	cmp	r5, #12
 801b250:	bf38      	it	cc
 801b252:	250c      	movcc	r5, #12
 801b254:	2d00      	cmp	r5, #0
 801b256:	4606      	mov	r6, r0
 801b258:	db01      	blt.n	801b25e <_malloc_r+0x1a>
 801b25a:	42a9      	cmp	r1, r5
 801b25c:	d903      	bls.n	801b266 <_malloc_r+0x22>
 801b25e:	230c      	movs	r3, #12
 801b260:	6033      	str	r3, [r6, #0]
 801b262:	2000      	movs	r0, #0
 801b264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b266:	f000 fecb 	bl	801c000 <__malloc_lock>
 801b26a:	4921      	ldr	r1, [pc, #132]	; (801b2f0 <_malloc_r+0xac>)
 801b26c:	680a      	ldr	r2, [r1, #0]
 801b26e:	4614      	mov	r4, r2
 801b270:	b99c      	cbnz	r4, 801b29a <_malloc_r+0x56>
 801b272:	4f20      	ldr	r7, [pc, #128]	; (801b2f4 <_malloc_r+0xb0>)
 801b274:	683b      	ldr	r3, [r7, #0]
 801b276:	b923      	cbnz	r3, 801b282 <_malloc_r+0x3e>
 801b278:	4621      	mov	r1, r4
 801b27a:	4630      	mov	r0, r6
 801b27c:	f000 fb2a 	bl	801b8d4 <_sbrk_r>
 801b280:	6038      	str	r0, [r7, #0]
 801b282:	4629      	mov	r1, r5
 801b284:	4630      	mov	r0, r6
 801b286:	f000 fb25 	bl	801b8d4 <_sbrk_r>
 801b28a:	1c43      	adds	r3, r0, #1
 801b28c:	d123      	bne.n	801b2d6 <_malloc_r+0x92>
 801b28e:	230c      	movs	r3, #12
 801b290:	6033      	str	r3, [r6, #0]
 801b292:	4630      	mov	r0, r6
 801b294:	f000 feba 	bl	801c00c <__malloc_unlock>
 801b298:	e7e3      	b.n	801b262 <_malloc_r+0x1e>
 801b29a:	6823      	ldr	r3, [r4, #0]
 801b29c:	1b5b      	subs	r3, r3, r5
 801b29e:	d417      	bmi.n	801b2d0 <_malloc_r+0x8c>
 801b2a0:	2b0b      	cmp	r3, #11
 801b2a2:	d903      	bls.n	801b2ac <_malloc_r+0x68>
 801b2a4:	6023      	str	r3, [r4, #0]
 801b2a6:	441c      	add	r4, r3
 801b2a8:	6025      	str	r5, [r4, #0]
 801b2aa:	e004      	b.n	801b2b6 <_malloc_r+0x72>
 801b2ac:	6863      	ldr	r3, [r4, #4]
 801b2ae:	42a2      	cmp	r2, r4
 801b2b0:	bf0c      	ite	eq
 801b2b2:	600b      	streq	r3, [r1, #0]
 801b2b4:	6053      	strne	r3, [r2, #4]
 801b2b6:	4630      	mov	r0, r6
 801b2b8:	f000 fea8 	bl	801c00c <__malloc_unlock>
 801b2bc:	f104 000b 	add.w	r0, r4, #11
 801b2c0:	1d23      	adds	r3, r4, #4
 801b2c2:	f020 0007 	bic.w	r0, r0, #7
 801b2c6:	1ac2      	subs	r2, r0, r3
 801b2c8:	d0cc      	beq.n	801b264 <_malloc_r+0x20>
 801b2ca:	1a1b      	subs	r3, r3, r0
 801b2cc:	50a3      	str	r3, [r4, r2]
 801b2ce:	e7c9      	b.n	801b264 <_malloc_r+0x20>
 801b2d0:	4622      	mov	r2, r4
 801b2d2:	6864      	ldr	r4, [r4, #4]
 801b2d4:	e7cc      	b.n	801b270 <_malloc_r+0x2c>
 801b2d6:	1cc4      	adds	r4, r0, #3
 801b2d8:	f024 0403 	bic.w	r4, r4, #3
 801b2dc:	42a0      	cmp	r0, r4
 801b2de:	d0e3      	beq.n	801b2a8 <_malloc_r+0x64>
 801b2e0:	1a21      	subs	r1, r4, r0
 801b2e2:	4630      	mov	r0, r6
 801b2e4:	f000 faf6 	bl	801b8d4 <_sbrk_r>
 801b2e8:	3001      	adds	r0, #1
 801b2ea:	d1dd      	bne.n	801b2a8 <_malloc_r+0x64>
 801b2ec:	e7cf      	b.n	801b28e <_malloc_r+0x4a>
 801b2ee:	bf00      	nop
 801b2f0:	24006c98 	.word	0x24006c98
 801b2f4:	24006c9c 	.word	0x24006c9c

0801b2f8 <__sfputc_r>:
 801b2f8:	6893      	ldr	r3, [r2, #8]
 801b2fa:	3b01      	subs	r3, #1
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	b410      	push	{r4}
 801b300:	6093      	str	r3, [r2, #8]
 801b302:	da08      	bge.n	801b316 <__sfputc_r+0x1e>
 801b304:	6994      	ldr	r4, [r2, #24]
 801b306:	42a3      	cmp	r3, r4
 801b308:	db01      	blt.n	801b30e <__sfputc_r+0x16>
 801b30a:	290a      	cmp	r1, #10
 801b30c:	d103      	bne.n	801b316 <__sfputc_r+0x1e>
 801b30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b312:	f000 bb33 	b.w	801b97c <__swbuf_r>
 801b316:	6813      	ldr	r3, [r2, #0]
 801b318:	1c58      	adds	r0, r3, #1
 801b31a:	6010      	str	r0, [r2, #0]
 801b31c:	7019      	strb	r1, [r3, #0]
 801b31e:	4608      	mov	r0, r1
 801b320:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b324:	4770      	bx	lr

0801b326 <__sfputs_r>:
 801b326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b328:	4606      	mov	r6, r0
 801b32a:	460f      	mov	r7, r1
 801b32c:	4614      	mov	r4, r2
 801b32e:	18d5      	adds	r5, r2, r3
 801b330:	42ac      	cmp	r4, r5
 801b332:	d101      	bne.n	801b338 <__sfputs_r+0x12>
 801b334:	2000      	movs	r0, #0
 801b336:	e007      	b.n	801b348 <__sfputs_r+0x22>
 801b338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b33c:	463a      	mov	r2, r7
 801b33e:	4630      	mov	r0, r6
 801b340:	f7ff ffda 	bl	801b2f8 <__sfputc_r>
 801b344:	1c43      	adds	r3, r0, #1
 801b346:	d1f3      	bne.n	801b330 <__sfputs_r+0xa>
 801b348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b34c <_vfiprintf_r>:
 801b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b350:	460d      	mov	r5, r1
 801b352:	b09d      	sub	sp, #116	; 0x74
 801b354:	4614      	mov	r4, r2
 801b356:	4698      	mov	r8, r3
 801b358:	4606      	mov	r6, r0
 801b35a:	b118      	cbz	r0, 801b364 <_vfiprintf_r+0x18>
 801b35c:	6983      	ldr	r3, [r0, #24]
 801b35e:	b90b      	cbnz	r3, 801b364 <_vfiprintf_r+0x18>
 801b360:	f000 fd48 	bl	801bdf4 <__sinit>
 801b364:	4b89      	ldr	r3, [pc, #548]	; (801b58c <_vfiprintf_r+0x240>)
 801b366:	429d      	cmp	r5, r3
 801b368:	d11b      	bne.n	801b3a2 <_vfiprintf_r+0x56>
 801b36a:	6875      	ldr	r5, [r6, #4]
 801b36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b36e:	07d9      	lsls	r1, r3, #31
 801b370:	d405      	bmi.n	801b37e <_vfiprintf_r+0x32>
 801b372:	89ab      	ldrh	r3, [r5, #12]
 801b374:	059a      	lsls	r2, r3, #22
 801b376:	d402      	bmi.n	801b37e <_vfiprintf_r+0x32>
 801b378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b37a:	f000 fdd9 	bl	801bf30 <__retarget_lock_acquire_recursive>
 801b37e:	89ab      	ldrh	r3, [r5, #12]
 801b380:	071b      	lsls	r3, r3, #28
 801b382:	d501      	bpl.n	801b388 <_vfiprintf_r+0x3c>
 801b384:	692b      	ldr	r3, [r5, #16]
 801b386:	b9eb      	cbnz	r3, 801b3c4 <_vfiprintf_r+0x78>
 801b388:	4629      	mov	r1, r5
 801b38a:	4630      	mov	r0, r6
 801b38c:	f000 fb48 	bl	801ba20 <__swsetup_r>
 801b390:	b1c0      	cbz	r0, 801b3c4 <_vfiprintf_r+0x78>
 801b392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b394:	07dc      	lsls	r4, r3, #31
 801b396:	d50e      	bpl.n	801b3b6 <_vfiprintf_r+0x6a>
 801b398:	f04f 30ff 	mov.w	r0, #4294967295
 801b39c:	b01d      	add	sp, #116	; 0x74
 801b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3a2:	4b7b      	ldr	r3, [pc, #492]	; (801b590 <_vfiprintf_r+0x244>)
 801b3a4:	429d      	cmp	r5, r3
 801b3a6:	d101      	bne.n	801b3ac <_vfiprintf_r+0x60>
 801b3a8:	68b5      	ldr	r5, [r6, #8]
 801b3aa:	e7df      	b.n	801b36c <_vfiprintf_r+0x20>
 801b3ac:	4b79      	ldr	r3, [pc, #484]	; (801b594 <_vfiprintf_r+0x248>)
 801b3ae:	429d      	cmp	r5, r3
 801b3b0:	bf08      	it	eq
 801b3b2:	68f5      	ldreq	r5, [r6, #12]
 801b3b4:	e7da      	b.n	801b36c <_vfiprintf_r+0x20>
 801b3b6:	89ab      	ldrh	r3, [r5, #12]
 801b3b8:	0598      	lsls	r0, r3, #22
 801b3ba:	d4ed      	bmi.n	801b398 <_vfiprintf_r+0x4c>
 801b3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b3be:	f000 fdb9 	bl	801bf34 <__retarget_lock_release_recursive>
 801b3c2:	e7e9      	b.n	801b398 <_vfiprintf_r+0x4c>
 801b3c4:	2300      	movs	r3, #0
 801b3c6:	9309      	str	r3, [sp, #36]	; 0x24
 801b3c8:	2320      	movs	r3, #32
 801b3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3d2:	2330      	movs	r3, #48	; 0x30
 801b3d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b598 <_vfiprintf_r+0x24c>
 801b3d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b3dc:	f04f 0901 	mov.w	r9, #1
 801b3e0:	4623      	mov	r3, r4
 801b3e2:	469a      	mov	sl, r3
 801b3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b3e8:	b10a      	cbz	r2, 801b3ee <_vfiprintf_r+0xa2>
 801b3ea:	2a25      	cmp	r2, #37	; 0x25
 801b3ec:	d1f9      	bne.n	801b3e2 <_vfiprintf_r+0x96>
 801b3ee:	ebba 0b04 	subs.w	fp, sl, r4
 801b3f2:	d00b      	beq.n	801b40c <_vfiprintf_r+0xc0>
 801b3f4:	465b      	mov	r3, fp
 801b3f6:	4622      	mov	r2, r4
 801b3f8:	4629      	mov	r1, r5
 801b3fa:	4630      	mov	r0, r6
 801b3fc:	f7ff ff93 	bl	801b326 <__sfputs_r>
 801b400:	3001      	adds	r0, #1
 801b402:	f000 80aa 	beq.w	801b55a <_vfiprintf_r+0x20e>
 801b406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b408:	445a      	add	r2, fp
 801b40a:	9209      	str	r2, [sp, #36]	; 0x24
 801b40c:	f89a 3000 	ldrb.w	r3, [sl]
 801b410:	2b00      	cmp	r3, #0
 801b412:	f000 80a2 	beq.w	801b55a <_vfiprintf_r+0x20e>
 801b416:	2300      	movs	r3, #0
 801b418:	f04f 32ff 	mov.w	r2, #4294967295
 801b41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b420:	f10a 0a01 	add.w	sl, sl, #1
 801b424:	9304      	str	r3, [sp, #16]
 801b426:	9307      	str	r3, [sp, #28]
 801b428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b42c:	931a      	str	r3, [sp, #104]	; 0x68
 801b42e:	4654      	mov	r4, sl
 801b430:	2205      	movs	r2, #5
 801b432:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b436:	4858      	ldr	r0, [pc, #352]	; (801b598 <_vfiprintf_r+0x24c>)
 801b438:	f7e4 ff6a 	bl	8000310 <memchr>
 801b43c:	9a04      	ldr	r2, [sp, #16]
 801b43e:	b9d8      	cbnz	r0, 801b478 <_vfiprintf_r+0x12c>
 801b440:	06d1      	lsls	r1, r2, #27
 801b442:	bf44      	itt	mi
 801b444:	2320      	movmi	r3, #32
 801b446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b44a:	0713      	lsls	r3, r2, #28
 801b44c:	bf44      	itt	mi
 801b44e:	232b      	movmi	r3, #43	; 0x2b
 801b450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b454:	f89a 3000 	ldrb.w	r3, [sl]
 801b458:	2b2a      	cmp	r3, #42	; 0x2a
 801b45a:	d015      	beq.n	801b488 <_vfiprintf_r+0x13c>
 801b45c:	9a07      	ldr	r2, [sp, #28]
 801b45e:	4654      	mov	r4, sl
 801b460:	2000      	movs	r0, #0
 801b462:	f04f 0c0a 	mov.w	ip, #10
 801b466:	4621      	mov	r1, r4
 801b468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b46c:	3b30      	subs	r3, #48	; 0x30
 801b46e:	2b09      	cmp	r3, #9
 801b470:	d94e      	bls.n	801b510 <_vfiprintf_r+0x1c4>
 801b472:	b1b0      	cbz	r0, 801b4a2 <_vfiprintf_r+0x156>
 801b474:	9207      	str	r2, [sp, #28]
 801b476:	e014      	b.n	801b4a2 <_vfiprintf_r+0x156>
 801b478:	eba0 0308 	sub.w	r3, r0, r8
 801b47c:	fa09 f303 	lsl.w	r3, r9, r3
 801b480:	4313      	orrs	r3, r2
 801b482:	9304      	str	r3, [sp, #16]
 801b484:	46a2      	mov	sl, r4
 801b486:	e7d2      	b.n	801b42e <_vfiprintf_r+0xe2>
 801b488:	9b03      	ldr	r3, [sp, #12]
 801b48a:	1d19      	adds	r1, r3, #4
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	9103      	str	r1, [sp, #12]
 801b490:	2b00      	cmp	r3, #0
 801b492:	bfbb      	ittet	lt
 801b494:	425b      	neglt	r3, r3
 801b496:	f042 0202 	orrlt.w	r2, r2, #2
 801b49a:	9307      	strge	r3, [sp, #28]
 801b49c:	9307      	strlt	r3, [sp, #28]
 801b49e:	bfb8      	it	lt
 801b4a0:	9204      	strlt	r2, [sp, #16]
 801b4a2:	7823      	ldrb	r3, [r4, #0]
 801b4a4:	2b2e      	cmp	r3, #46	; 0x2e
 801b4a6:	d10c      	bne.n	801b4c2 <_vfiprintf_r+0x176>
 801b4a8:	7863      	ldrb	r3, [r4, #1]
 801b4aa:	2b2a      	cmp	r3, #42	; 0x2a
 801b4ac:	d135      	bne.n	801b51a <_vfiprintf_r+0x1ce>
 801b4ae:	9b03      	ldr	r3, [sp, #12]
 801b4b0:	1d1a      	adds	r2, r3, #4
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	9203      	str	r2, [sp, #12]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	bfb8      	it	lt
 801b4ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801b4be:	3402      	adds	r4, #2
 801b4c0:	9305      	str	r3, [sp, #20]
 801b4c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b5a8 <_vfiprintf_r+0x25c>
 801b4c6:	7821      	ldrb	r1, [r4, #0]
 801b4c8:	2203      	movs	r2, #3
 801b4ca:	4650      	mov	r0, sl
 801b4cc:	f7e4 ff20 	bl	8000310 <memchr>
 801b4d0:	b140      	cbz	r0, 801b4e4 <_vfiprintf_r+0x198>
 801b4d2:	2340      	movs	r3, #64	; 0x40
 801b4d4:	eba0 000a 	sub.w	r0, r0, sl
 801b4d8:	fa03 f000 	lsl.w	r0, r3, r0
 801b4dc:	9b04      	ldr	r3, [sp, #16]
 801b4de:	4303      	orrs	r3, r0
 801b4e0:	3401      	adds	r4, #1
 801b4e2:	9304      	str	r3, [sp, #16]
 801b4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4e8:	482c      	ldr	r0, [pc, #176]	; (801b59c <_vfiprintf_r+0x250>)
 801b4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b4ee:	2206      	movs	r2, #6
 801b4f0:	f7e4 ff0e 	bl	8000310 <memchr>
 801b4f4:	2800      	cmp	r0, #0
 801b4f6:	d03f      	beq.n	801b578 <_vfiprintf_r+0x22c>
 801b4f8:	4b29      	ldr	r3, [pc, #164]	; (801b5a0 <_vfiprintf_r+0x254>)
 801b4fa:	bb1b      	cbnz	r3, 801b544 <_vfiprintf_r+0x1f8>
 801b4fc:	9b03      	ldr	r3, [sp, #12]
 801b4fe:	3307      	adds	r3, #7
 801b500:	f023 0307 	bic.w	r3, r3, #7
 801b504:	3308      	adds	r3, #8
 801b506:	9303      	str	r3, [sp, #12]
 801b508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b50a:	443b      	add	r3, r7
 801b50c:	9309      	str	r3, [sp, #36]	; 0x24
 801b50e:	e767      	b.n	801b3e0 <_vfiprintf_r+0x94>
 801b510:	fb0c 3202 	mla	r2, ip, r2, r3
 801b514:	460c      	mov	r4, r1
 801b516:	2001      	movs	r0, #1
 801b518:	e7a5      	b.n	801b466 <_vfiprintf_r+0x11a>
 801b51a:	2300      	movs	r3, #0
 801b51c:	3401      	adds	r4, #1
 801b51e:	9305      	str	r3, [sp, #20]
 801b520:	4619      	mov	r1, r3
 801b522:	f04f 0c0a 	mov.w	ip, #10
 801b526:	4620      	mov	r0, r4
 801b528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b52c:	3a30      	subs	r2, #48	; 0x30
 801b52e:	2a09      	cmp	r2, #9
 801b530:	d903      	bls.n	801b53a <_vfiprintf_r+0x1ee>
 801b532:	2b00      	cmp	r3, #0
 801b534:	d0c5      	beq.n	801b4c2 <_vfiprintf_r+0x176>
 801b536:	9105      	str	r1, [sp, #20]
 801b538:	e7c3      	b.n	801b4c2 <_vfiprintf_r+0x176>
 801b53a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b53e:	4604      	mov	r4, r0
 801b540:	2301      	movs	r3, #1
 801b542:	e7f0      	b.n	801b526 <_vfiprintf_r+0x1da>
 801b544:	ab03      	add	r3, sp, #12
 801b546:	9300      	str	r3, [sp, #0]
 801b548:	462a      	mov	r2, r5
 801b54a:	4b16      	ldr	r3, [pc, #88]	; (801b5a4 <_vfiprintf_r+0x258>)
 801b54c:	a904      	add	r1, sp, #16
 801b54e:	4630      	mov	r0, r6
 801b550:	f3af 8000 	nop.w
 801b554:	4607      	mov	r7, r0
 801b556:	1c78      	adds	r0, r7, #1
 801b558:	d1d6      	bne.n	801b508 <_vfiprintf_r+0x1bc>
 801b55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b55c:	07d9      	lsls	r1, r3, #31
 801b55e:	d405      	bmi.n	801b56c <_vfiprintf_r+0x220>
 801b560:	89ab      	ldrh	r3, [r5, #12]
 801b562:	059a      	lsls	r2, r3, #22
 801b564:	d402      	bmi.n	801b56c <_vfiprintf_r+0x220>
 801b566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b568:	f000 fce4 	bl	801bf34 <__retarget_lock_release_recursive>
 801b56c:	89ab      	ldrh	r3, [r5, #12]
 801b56e:	065b      	lsls	r3, r3, #25
 801b570:	f53f af12 	bmi.w	801b398 <_vfiprintf_r+0x4c>
 801b574:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b576:	e711      	b.n	801b39c <_vfiprintf_r+0x50>
 801b578:	ab03      	add	r3, sp, #12
 801b57a:	9300      	str	r3, [sp, #0]
 801b57c:	462a      	mov	r2, r5
 801b57e:	4b09      	ldr	r3, [pc, #36]	; (801b5a4 <_vfiprintf_r+0x258>)
 801b580:	a904      	add	r1, sp, #16
 801b582:	4630      	mov	r0, r6
 801b584:	f000 f880 	bl	801b688 <_printf_i>
 801b588:	e7e4      	b.n	801b554 <_vfiprintf_r+0x208>
 801b58a:	bf00      	nop
 801b58c:	0801fa18 	.word	0x0801fa18
 801b590:	0801fa38 	.word	0x0801fa38
 801b594:	0801f9f8 	.word	0x0801f9f8
 801b598:	0801f9c0 	.word	0x0801f9c0
 801b59c:	0801f9ca 	.word	0x0801f9ca
 801b5a0:	00000000 	.word	0x00000000
 801b5a4:	0801b327 	.word	0x0801b327
 801b5a8:	0801f9c6 	.word	0x0801f9c6

0801b5ac <_printf_common>:
 801b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5b0:	4616      	mov	r6, r2
 801b5b2:	4699      	mov	r9, r3
 801b5b4:	688a      	ldr	r2, [r1, #8]
 801b5b6:	690b      	ldr	r3, [r1, #16]
 801b5b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b5bc:	4293      	cmp	r3, r2
 801b5be:	bfb8      	it	lt
 801b5c0:	4613      	movlt	r3, r2
 801b5c2:	6033      	str	r3, [r6, #0]
 801b5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b5c8:	4607      	mov	r7, r0
 801b5ca:	460c      	mov	r4, r1
 801b5cc:	b10a      	cbz	r2, 801b5d2 <_printf_common+0x26>
 801b5ce:	3301      	adds	r3, #1
 801b5d0:	6033      	str	r3, [r6, #0]
 801b5d2:	6823      	ldr	r3, [r4, #0]
 801b5d4:	0699      	lsls	r1, r3, #26
 801b5d6:	bf42      	ittt	mi
 801b5d8:	6833      	ldrmi	r3, [r6, #0]
 801b5da:	3302      	addmi	r3, #2
 801b5dc:	6033      	strmi	r3, [r6, #0]
 801b5de:	6825      	ldr	r5, [r4, #0]
 801b5e0:	f015 0506 	ands.w	r5, r5, #6
 801b5e4:	d106      	bne.n	801b5f4 <_printf_common+0x48>
 801b5e6:	f104 0a19 	add.w	sl, r4, #25
 801b5ea:	68e3      	ldr	r3, [r4, #12]
 801b5ec:	6832      	ldr	r2, [r6, #0]
 801b5ee:	1a9b      	subs	r3, r3, r2
 801b5f0:	42ab      	cmp	r3, r5
 801b5f2:	dc26      	bgt.n	801b642 <_printf_common+0x96>
 801b5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b5f8:	1e13      	subs	r3, r2, #0
 801b5fa:	6822      	ldr	r2, [r4, #0]
 801b5fc:	bf18      	it	ne
 801b5fe:	2301      	movne	r3, #1
 801b600:	0692      	lsls	r2, r2, #26
 801b602:	d42b      	bmi.n	801b65c <_printf_common+0xb0>
 801b604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b608:	4649      	mov	r1, r9
 801b60a:	4638      	mov	r0, r7
 801b60c:	47c0      	blx	r8
 801b60e:	3001      	adds	r0, #1
 801b610:	d01e      	beq.n	801b650 <_printf_common+0xa4>
 801b612:	6823      	ldr	r3, [r4, #0]
 801b614:	68e5      	ldr	r5, [r4, #12]
 801b616:	6832      	ldr	r2, [r6, #0]
 801b618:	f003 0306 	and.w	r3, r3, #6
 801b61c:	2b04      	cmp	r3, #4
 801b61e:	bf08      	it	eq
 801b620:	1aad      	subeq	r5, r5, r2
 801b622:	68a3      	ldr	r3, [r4, #8]
 801b624:	6922      	ldr	r2, [r4, #16]
 801b626:	bf0c      	ite	eq
 801b628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b62c:	2500      	movne	r5, #0
 801b62e:	4293      	cmp	r3, r2
 801b630:	bfc4      	itt	gt
 801b632:	1a9b      	subgt	r3, r3, r2
 801b634:	18ed      	addgt	r5, r5, r3
 801b636:	2600      	movs	r6, #0
 801b638:	341a      	adds	r4, #26
 801b63a:	42b5      	cmp	r5, r6
 801b63c:	d11a      	bne.n	801b674 <_printf_common+0xc8>
 801b63e:	2000      	movs	r0, #0
 801b640:	e008      	b.n	801b654 <_printf_common+0xa8>
 801b642:	2301      	movs	r3, #1
 801b644:	4652      	mov	r2, sl
 801b646:	4649      	mov	r1, r9
 801b648:	4638      	mov	r0, r7
 801b64a:	47c0      	blx	r8
 801b64c:	3001      	adds	r0, #1
 801b64e:	d103      	bne.n	801b658 <_printf_common+0xac>
 801b650:	f04f 30ff 	mov.w	r0, #4294967295
 801b654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b658:	3501      	adds	r5, #1
 801b65a:	e7c6      	b.n	801b5ea <_printf_common+0x3e>
 801b65c:	18e1      	adds	r1, r4, r3
 801b65e:	1c5a      	adds	r2, r3, #1
 801b660:	2030      	movs	r0, #48	; 0x30
 801b662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b666:	4422      	add	r2, r4
 801b668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b66c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b670:	3302      	adds	r3, #2
 801b672:	e7c7      	b.n	801b604 <_printf_common+0x58>
 801b674:	2301      	movs	r3, #1
 801b676:	4622      	mov	r2, r4
 801b678:	4649      	mov	r1, r9
 801b67a:	4638      	mov	r0, r7
 801b67c:	47c0      	blx	r8
 801b67e:	3001      	adds	r0, #1
 801b680:	d0e6      	beq.n	801b650 <_printf_common+0xa4>
 801b682:	3601      	adds	r6, #1
 801b684:	e7d9      	b.n	801b63a <_printf_common+0x8e>
	...

0801b688 <_printf_i>:
 801b688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b68c:	460c      	mov	r4, r1
 801b68e:	4691      	mov	r9, r2
 801b690:	7e27      	ldrb	r7, [r4, #24]
 801b692:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b694:	2f78      	cmp	r7, #120	; 0x78
 801b696:	4680      	mov	r8, r0
 801b698:	469a      	mov	sl, r3
 801b69a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b69e:	d807      	bhi.n	801b6b0 <_printf_i+0x28>
 801b6a0:	2f62      	cmp	r7, #98	; 0x62
 801b6a2:	d80a      	bhi.n	801b6ba <_printf_i+0x32>
 801b6a4:	2f00      	cmp	r7, #0
 801b6a6:	f000 80d8 	beq.w	801b85a <_printf_i+0x1d2>
 801b6aa:	2f58      	cmp	r7, #88	; 0x58
 801b6ac:	f000 80a3 	beq.w	801b7f6 <_printf_i+0x16e>
 801b6b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b6b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b6b8:	e03a      	b.n	801b730 <_printf_i+0xa8>
 801b6ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b6be:	2b15      	cmp	r3, #21
 801b6c0:	d8f6      	bhi.n	801b6b0 <_printf_i+0x28>
 801b6c2:	a001      	add	r0, pc, #4	; (adr r0, 801b6c8 <_printf_i+0x40>)
 801b6c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b6c8:	0801b721 	.word	0x0801b721
 801b6cc:	0801b735 	.word	0x0801b735
 801b6d0:	0801b6b1 	.word	0x0801b6b1
 801b6d4:	0801b6b1 	.word	0x0801b6b1
 801b6d8:	0801b6b1 	.word	0x0801b6b1
 801b6dc:	0801b6b1 	.word	0x0801b6b1
 801b6e0:	0801b735 	.word	0x0801b735
 801b6e4:	0801b6b1 	.word	0x0801b6b1
 801b6e8:	0801b6b1 	.word	0x0801b6b1
 801b6ec:	0801b6b1 	.word	0x0801b6b1
 801b6f0:	0801b6b1 	.word	0x0801b6b1
 801b6f4:	0801b841 	.word	0x0801b841
 801b6f8:	0801b765 	.word	0x0801b765
 801b6fc:	0801b823 	.word	0x0801b823
 801b700:	0801b6b1 	.word	0x0801b6b1
 801b704:	0801b6b1 	.word	0x0801b6b1
 801b708:	0801b863 	.word	0x0801b863
 801b70c:	0801b6b1 	.word	0x0801b6b1
 801b710:	0801b765 	.word	0x0801b765
 801b714:	0801b6b1 	.word	0x0801b6b1
 801b718:	0801b6b1 	.word	0x0801b6b1
 801b71c:	0801b82b 	.word	0x0801b82b
 801b720:	680b      	ldr	r3, [r1, #0]
 801b722:	1d1a      	adds	r2, r3, #4
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	600a      	str	r2, [r1, #0]
 801b728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b730:	2301      	movs	r3, #1
 801b732:	e0a3      	b.n	801b87c <_printf_i+0x1f4>
 801b734:	6825      	ldr	r5, [r4, #0]
 801b736:	6808      	ldr	r0, [r1, #0]
 801b738:	062e      	lsls	r6, r5, #24
 801b73a:	f100 0304 	add.w	r3, r0, #4
 801b73e:	d50a      	bpl.n	801b756 <_printf_i+0xce>
 801b740:	6805      	ldr	r5, [r0, #0]
 801b742:	600b      	str	r3, [r1, #0]
 801b744:	2d00      	cmp	r5, #0
 801b746:	da03      	bge.n	801b750 <_printf_i+0xc8>
 801b748:	232d      	movs	r3, #45	; 0x2d
 801b74a:	426d      	negs	r5, r5
 801b74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b750:	485e      	ldr	r0, [pc, #376]	; (801b8cc <_printf_i+0x244>)
 801b752:	230a      	movs	r3, #10
 801b754:	e019      	b.n	801b78a <_printf_i+0x102>
 801b756:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b75a:	6805      	ldr	r5, [r0, #0]
 801b75c:	600b      	str	r3, [r1, #0]
 801b75e:	bf18      	it	ne
 801b760:	b22d      	sxthne	r5, r5
 801b762:	e7ef      	b.n	801b744 <_printf_i+0xbc>
 801b764:	680b      	ldr	r3, [r1, #0]
 801b766:	6825      	ldr	r5, [r4, #0]
 801b768:	1d18      	adds	r0, r3, #4
 801b76a:	6008      	str	r0, [r1, #0]
 801b76c:	0628      	lsls	r0, r5, #24
 801b76e:	d501      	bpl.n	801b774 <_printf_i+0xec>
 801b770:	681d      	ldr	r5, [r3, #0]
 801b772:	e002      	b.n	801b77a <_printf_i+0xf2>
 801b774:	0669      	lsls	r1, r5, #25
 801b776:	d5fb      	bpl.n	801b770 <_printf_i+0xe8>
 801b778:	881d      	ldrh	r5, [r3, #0]
 801b77a:	4854      	ldr	r0, [pc, #336]	; (801b8cc <_printf_i+0x244>)
 801b77c:	2f6f      	cmp	r7, #111	; 0x6f
 801b77e:	bf0c      	ite	eq
 801b780:	2308      	moveq	r3, #8
 801b782:	230a      	movne	r3, #10
 801b784:	2100      	movs	r1, #0
 801b786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b78a:	6866      	ldr	r6, [r4, #4]
 801b78c:	60a6      	str	r6, [r4, #8]
 801b78e:	2e00      	cmp	r6, #0
 801b790:	bfa2      	ittt	ge
 801b792:	6821      	ldrge	r1, [r4, #0]
 801b794:	f021 0104 	bicge.w	r1, r1, #4
 801b798:	6021      	strge	r1, [r4, #0]
 801b79a:	b90d      	cbnz	r5, 801b7a0 <_printf_i+0x118>
 801b79c:	2e00      	cmp	r6, #0
 801b79e:	d04d      	beq.n	801b83c <_printf_i+0x1b4>
 801b7a0:	4616      	mov	r6, r2
 801b7a2:	fbb5 f1f3 	udiv	r1, r5, r3
 801b7a6:	fb03 5711 	mls	r7, r3, r1, r5
 801b7aa:	5dc7      	ldrb	r7, [r0, r7]
 801b7ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b7b0:	462f      	mov	r7, r5
 801b7b2:	42bb      	cmp	r3, r7
 801b7b4:	460d      	mov	r5, r1
 801b7b6:	d9f4      	bls.n	801b7a2 <_printf_i+0x11a>
 801b7b8:	2b08      	cmp	r3, #8
 801b7ba:	d10b      	bne.n	801b7d4 <_printf_i+0x14c>
 801b7bc:	6823      	ldr	r3, [r4, #0]
 801b7be:	07df      	lsls	r7, r3, #31
 801b7c0:	d508      	bpl.n	801b7d4 <_printf_i+0x14c>
 801b7c2:	6923      	ldr	r3, [r4, #16]
 801b7c4:	6861      	ldr	r1, [r4, #4]
 801b7c6:	4299      	cmp	r1, r3
 801b7c8:	bfde      	ittt	le
 801b7ca:	2330      	movle	r3, #48	; 0x30
 801b7cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b7d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b7d4:	1b92      	subs	r2, r2, r6
 801b7d6:	6122      	str	r2, [r4, #16]
 801b7d8:	f8cd a000 	str.w	sl, [sp]
 801b7dc:	464b      	mov	r3, r9
 801b7de:	aa03      	add	r2, sp, #12
 801b7e0:	4621      	mov	r1, r4
 801b7e2:	4640      	mov	r0, r8
 801b7e4:	f7ff fee2 	bl	801b5ac <_printf_common>
 801b7e8:	3001      	adds	r0, #1
 801b7ea:	d14c      	bne.n	801b886 <_printf_i+0x1fe>
 801b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b7f0:	b004      	add	sp, #16
 801b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7f6:	4835      	ldr	r0, [pc, #212]	; (801b8cc <_printf_i+0x244>)
 801b7f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b7fc:	6823      	ldr	r3, [r4, #0]
 801b7fe:	680e      	ldr	r6, [r1, #0]
 801b800:	061f      	lsls	r7, r3, #24
 801b802:	f856 5b04 	ldr.w	r5, [r6], #4
 801b806:	600e      	str	r6, [r1, #0]
 801b808:	d514      	bpl.n	801b834 <_printf_i+0x1ac>
 801b80a:	07d9      	lsls	r1, r3, #31
 801b80c:	bf44      	itt	mi
 801b80e:	f043 0320 	orrmi.w	r3, r3, #32
 801b812:	6023      	strmi	r3, [r4, #0]
 801b814:	b91d      	cbnz	r5, 801b81e <_printf_i+0x196>
 801b816:	6823      	ldr	r3, [r4, #0]
 801b818:	f023 0320 	bic.w	r3, r3, #32
 801b81c:	6023      	str	r3, [r4, #0]
 801b81e:	2310      	movs	r3, #16
 801b820:	e7b0      	b.n	801b784 <_printf_i+0xfc>
 801b822:	6823      	ldr	r3, [r4, #0]
 801b824:	f043 0320 	orr.w	r3, r3, #32
 801b828:	6023      	str	r3, [r4, #0]
 801b82a:	2378      	movs	r3, #120	; 0x78
 801b82c:	4828      	ldr	r0, [pc, #160]	; (801b8d0 <_printf_i+0x248>)
 801b82e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b832:	e7e3      	b.n	801b7fc <_printf_i+0x174>
 801b834:	065e      	lsls	r6, r3, #25
 801b836:	bf48      	it	mi
 801b838:	b2ad      	uxthmi	r5, r5
 801b83a:	e7e6      	b.n	801b80a <_printf_i+0x182>
 801b83c:	4616      	mov	r6, r2
 801b83e:	e7bb      	b.n	801b7b8 <_printf_i+0x130>
 801b840:	680b      	ldr	r3, [r1, #0]
 801b842:	6826      	ldr	r6, [r4, #0]
 801b844:	6960      	ldr	r0, [r4, #20]
 801b846:	1d1d      	adds	r5, r3, #4
 801b848:	600d      	str	r5, [r1, #0]
 801b84a:	0635      	lsls	r5, r6, #24
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	d501      	bpl.n	801b854 <_printf_i+0x1cc>
 801b850:	6018      	str	r0, [r3, #0]
 801b852:	e002      	b.n	801b85a <_printf_i+0x1d2>
 801b854:	0671      	lsls	r1, r6, #25
 801b856:	d5fb      	bpl.n	801b850 <_printf_i+0x1c8>
 801b858:	8018      	strh	r0, [r3, #0]
 801b85a:	2300      	movs	r3, #0
 801b85c:	6123      	str	r3, [r4, #16]
 801b85e:	4616      	mov	r6, r2
 801b860:	e7ba      	b.n	801b7d8 <_printf_i+0x150>
 801b862:	680b      	ldr	r3, [r1, #0]
 801b864:	1d1a      	adds	r2, r3, #4
 801b866:	600a      	str	r2, [r1, #0]
 801b868:	681e      	ldr	r6, [r3, #0]
 801b86a:	6862      	ldr	r2, [r4, #4]
 801b86c:	2100      	movs	r1, #0
 801b86e:	4630      	mov	r0, r6
 801b870:	f7e4 fd4e 	bl	8000310 <memchr>
 801b874:	b108      	cbz	r0, 801b87a <_printf_i+0x1f2>
 801b876:	1b80      	subs	r0, r0, r6
 801b878:	6060      	str	r0, [r4, #4]
 801b87a:	6863      	ldr	r3, [r4, #4]
 801b87c:	6123      	str	r3, [r4, #16]
 801b87e:	2300      	movs	r3, #0
 801b880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b884:	e7a8      	b.n	801b7d8 <_printf_i+0x150>
 801b886:	6923      	ldr	r3, [r4, #16]
 801b888:	4632      	mov	r2, r6
 801b88a:	4649      	mov	r1, r9
 801b88c:	4640      	mov	r0, r8
 801b88e:	47d0      	blx	sl
 801b890:	3001      	adds	r0, #1
 801b892:	d0ab      	beq.n	801b7ec <_printf_i+0x164>
 801b894:	6823      	ldr	r3, [r4, #0]
 801b896:	079b      	lsls	r3, r3, #30
 801b898:	d413      	bmi.n	801b8c2 <_printf_i+0x23a>
 801b89a:	68e0      	ldr	r0, [r4, #12]
 801b89c:	9b03      	ldr	r3, [sp, #12]
 801b89e:	4298      	cmp	r0, r3
 801b8a0:	bfb8      	it	lt
 801b8a2:	4618      	movlt	r0, r3
 801b8a4:	e7a4      	b.n	801b7f0 <_printf_i+0x168>
 801b8a6:	2301      	movs	r3, #1
 801b8a8:	4632      	mov	r2, r6
 801b8aa:	4649      	mov	r1, r9
 801b8ac:	4640      	mov	r0, r8
 801b8ae:	47d0      	blx	sl
 801b8b0:	3001      	adds	r0, #1
 801b8b2:	d09b      	beq.n	801b7ec <_printf_i+0x164>
 801b8b4:	3501      	adds	r5, #1
 801b8b6:	68e3      	ldr	r3, [r4, #12]
 801b8b8:	9903      	ldr	r1, [sp, #12]
 801b8ba:	1a5b      	subs	r3, r3, r1
 801b8bc:	42ab      	cmp	r3, r5
 801b8be:	dcf2      	bgt.n	801b8a6 <_printf_i+0x21e>
 801b8c0:	e7eb      	b.n	801b89a <_printf_i+0x212>
 801b8c2:	2500      	movs	r5, #0
 801b8c4:	f104 0619 	add.w	r6, r4, #25
 801b8c8:	e7f5      	b.n	801b8b6 <_printf_i+0x22e>
 801b8ca:	bf00      	nop
 801b8cc:	0801f9d1 	.word	0x0801f9d1
 801b8d0:	0801f9e2 	.word	0x0801f9e2

0801b8d4 <_sbrk_r>:
 801b8d4:	b538      	push	{r3, r4, r5, lr}
 801b8d6:	4d06      	ldr	r5, [pc, #24]	; (801b8f0 <_sbrk_r+0x1c>)
 801b8d8:	2300      	movs	r3, #0
 801b8da:	4604      	mov	r4, r0
 801b8dc:	4608      	mov	r0, r1
 801b8de:	602b      	str	r3, [r5, #0]
 801b8e0:	f7e5 fff2 	bl	80018c8 <_sbrk>
 801b8e4:	1c43      	adds	r3, r0, #1
 801b8e6:	d102      	bne.n	801b8ee <_sbrk_r+0x1a>
 801b8e8:	682b      	ldr	r3, [r5, #0]
 801b8ea:	b103      	cbz	r3, 801b8ee <_sbrk_r+0x1a>
 801b8ec:	6023      	str	r3, [r4, #0]
 801b8ee:	bd38      	pop	{r3, r4, r5, pc}
 801b8f0:	2400724c 	.word	0x2400724c

0801b8f4 <_raise_r>:
 801b8f4:	291f      	cmp	r1, #31
 801b8f6:	b538      	push	{r3, r4, r5, lr}
 801b8f8:	4604      	mov	r4, r0
 801b8fa:	460d      	mov	r5, r1
 801b8fc:	d904      	bls.n	801b908 <_raise_r+0x14>
 801b8fe:	2316      	movs	r3, #22
 801b900:	6003      	str	r3, [r0, #0]
 801b902:	f04f 30ff 	mov.w	r0, #4294967295
 801b906:	bd38      	pop	{r3, r4, r5, pc}
 801b908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b90a:	b112      	cbz	r2, 801b912 <_raise_r+0x1e>
 801b90c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b910:	b94b      	cbnz	r3, 801b926 <_raise_r+0x32>
 801b912:	4620      	mov	r0, r4
 801b914:	f000 f830 	bl	801b978 <_getpid_r>
 801b918:	462a      	mov	r2, r5
 801b91a:	4601      	mov	r1, r0
 801b91c:	4620      	mov	r0, r4
 801b91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b922:	f000 b817 	b.w	801b954 <_kill_r>
 801b926:	2b01      	cmp	r3, #1
 801b928:	d00a      	beq.n	801b940 <_raise_r+0x4c>
 801b92a:	1c59      	adds	r1, r3, #1
 801b92c:	d103      	bne.n	801b936 <_raise_r+0x42>
 801b92e:	2316      	movs	r3, #22
 801b930:	6003      	str	r3, [r0, #0]
 801b932:	2001      	movs	r0, #1
 801b934:	e7e7      	b.n	801b906 <_raise_r+0x12>
 801b936:	2400      	movs	r4, #0
 801b938:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b93c:	4628      	mov	r0, r5
 801b93e:	4798      	blx	r3
 801b940:	2000      	movs	r0, #0
 801b942:	e7e0      	b.n	801b906 <_raise_r+0x12>

0801b944 <raise>:
 801b944:	4b02      	ldr	r3, [pc, #8]	; (801b950 <raise+0xc>)
 801b946:	4601      	mov	r1, r0
 801b948:	6818      	ldr	r0, [r3, #0]
 801b94a:	f7ff bfd3 	b.w	801b8f4 <_raise_r>
 801b94e:	bf00      	nop
 801b950:	240000bc 	.word	0x240000bc

0801b954 <_kill_r>:
 801b954:	b538      	push	{r3, r4, r5, lr}
 801b956:	4d07      	ldr	r5, [pc, #28]	; (801b974 <_kill_r+0x20>)
 801b958:	2300      	movs	r3, #0
 801b95a:	4604      	mov	r4, r0
 801b95c:	4608      	mov	r0, r1
 801b95e:	4611      	mov	r1, r2
 801b960:	602b      	str	r3, [r5, #0]
 801b962:	f7e5 ff7d 	bl	8001860 <_kill>
 801b966:	1c43      	adds	r3, r0, #1
 801b968:	d102      	bne.n	801b970 <_kill_r+0x1c>
 801b96a:	682b      	ldr	r3, [r5, #0]
 801b96c:	b103      	cbz	r3, 801b970 <_kill_r+0x1c>
 801b96e:	6023      	str	r3, [r4, #0]
 801b970:	bd38      	pop	{r3, r4, r5, pc}
 801b972:	bf00      	nop
 801b974:	2400724c 	.word	0x2400724c

0801b978 <_getpid_r>:
 801b978:	f7e5 bf70 	b.w	800185c <_getpid>

0801b97c <__swbuf_r>:
 801b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b97e:	460e      	mov	r6, r1
 801b980:	4614      	mov	r4, r2
 801b982:	4605      	mov	r5, r0
 801b984:	b118      	cbz	r0, 801b98e <__swbuf_r+0x12>
 801b986:	6983      	ldr	r3, [r0, #24]
 801b988:	b90b      	cbnz	r3, 801b98e <__swbuf_r+0x12>
 801b98a:	f000 fa33 	bl	801bdf4 <__sinit>
 801b98e:	4b21      	ldr	r3, [pc, #132]	; (801ba14 <__swbuf_r+0x98>)
 801b990:	429c      	cmp	r4, r3
 801b992:	d12b      	bne.n	801b9ec <__swbuf_r+0x70>
 801b994:	686c      	ldr	r4, [r5, #4]
 801b996:	69a3      	ldr	r3, [r4, #24]
 801b998:	60a3      	str	r3, [r4, #8]
 801b99a:	89a3      	ldrh	r3, [r4, #12]
 801b99c:	071a      	lsls	r2, r3, #28
 801b99e:	d52f      	bpl.n	801ba00 <__swbuf_r+0x84>
 801b9a0:	6923      	ldr	r3, [r4, #16]
 801b9a2:	b36b      	cbz	r3, 801ba00 <__swbuf_r+0x84>
 801b9a4:	6923      	ldr	r3, [r4, #16]
 801b9a6:	6820      	ldr	r0, [r4, #0]
 801b9a8:	1ac0      	subs	r0, r0, r3
 801b9aa:	6963      	ldr	r3, [r4, #20]
 801b9ac:	b2f6      	uxtb	r6, r6
 801b9ae:	4283      	cmp	r3, r0
 801b9b0:	4637      	mov	r7, r6
 801b9b2:	dc04      	bgt.n	801b9be <__swbuf_r+0x42>
 801b9b4:	4621      	mov	r1, r4
 801b9b6:	4628      	mov	r0, r5
 801b9b8:	f000 f988 	bl	801bccc <_fflush_r>
 801b9bc:	bb30      	cbnz	r0, 801ba0c <__swbuf_r+0x90>
 801b9be:	68a3      	ldr	r3, [r4, #8]
 801b9c0:	3b01      	subs	r3, #1
 801b9c2:	60a3      	str	r3, [r4, #8]
 801b9c4:	6823      	ldr	r3, [r4, #0]
 801b9c6:	1c5a      	adds	r2, r3, #1
 801b9c8:	6022      	str	r2, [r4, #0]
 801b9ca:	701e      	strb	r6, [r3, #0]
 801b9cc:	6963      	ldr	r3, [r4, #20]
 801b9ce:	3001      	adds	r0, #1
 801b9d0:	4283      	cmp	r3, r0
 801b9d2:	d004      	beq.n	801b9de <__swbuf_r+0x62>
 801b9d4:	89a3      	ldrh	r3, [r4, #12]
 801b9d6:	07db      	lsls	r3, r3, #31
 801b9d8:	d506      	bpl.n	801b9e8 <__swbuf_r+0x6c>
 801b9da:	2e0a      	cmp	r6, #10
 801b9dc:	d104      	bne.n	801b9e8 <__swbuf_r+0x6c>
 801b9de:	4621      	mov	r1, r4
 801b9e0:	4628      	mov	r0, r5
 801b9e2:	f000 f973 	bl	801bccc <_fflush_r>
 801b9e6:	b988      	cbnz	r0, 801ba0c <__swbuf_r+0x90>
 801b9e8:	4638      	mov	r0, r7
 801b9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9ec:	4b0a      	ldr	r3, [pc, #40]	; (801ba18 <__swbuf_r+0x9c>)
 801b9ee:	429c      	cmp	r4, r3
 801b9f0:	d101      	bne.n	801b9f6 <__swbuf_r+0x7a>
 801b9f2:	68ac      	ldr	r4, [r5, #8]
 801b9f4:	e7cf      	b.n	801b996 <__swbuf_r+0x1a>
 801b9f6:	4b09      	ldr	r3, [pc, #36]	; (801ba1c <__swbuf_r+0xa0>)
 801b9f8:	429c      	cmp	r4, r3
 801b9fa:	bf08      	it	eq
 801b9fc:	68ec      	ldreq	r4, [r5, #12]
 801b9fe:	e7ca      	b.n	801b996 <__swbuf_r+0x1a>
 801ba00:	4621      	mov	r1, r4
 801ba02:	4628      	mov	r0, r5
 801ba04:	f000 f80c 	bl	801ba20 <__swsetup_r>
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	d0cb      	beq.n	801b9a4 <__swbuf_r+0x28>
 801ba0c:	f04f 37ff 	mov.w	r7, #4294967295
 801ba10:	e7ea      	b.n	801b9e8 <__swbuf_r+0x6c>
 801ba12:	bf00      	nop
 801ba14:	0801fa18 	.word	0x0801fa18
 801ba18:	0801fa38 	.word	0x0801fa38
 801ba1c:	0801f9f8 	.word	0x0801f9f8

0801ba20 <__swsetup_r>:
 801ba20:	4b32      	ldr	r3, [pc, #200]	; (801baec <__swsetup_r+0xcc>)
 801ba22:	b570      	push	{r4, r5, r6, lr}
 801ba24:	681d      	ldr	r5, [r3, #0]
 801ba26:	4606      	mov	r6, r0
 801ba28:	460c      	mov	r4, r1
 801ba2a:	b125      	cbz	r5, 801ba36 <__swsetup_r+0x16>
 801ba2c:	69ab      	ldr	r3, [r5, #24]
 801ba2e:	b913      	cbnz	r3, 801ba36 <__swsetup_r+0x16>
 801ba30:	4628      	mov	r0, r5
 801ba32:	f000 f9df 	bl	801bdf4 <__sinit>
 801ba36:	4b2e      	ldr	r3, [pc, #184]	; (801baf0 <__swsetup_r+0xd0>)
 801ba38:	429c      	cmp	r4, r3
 801ba3a:	d10f      	bne.n	801ba5c <__swsetup_r+0x3c>
 801ba3c:	686c      	ldr	r4, [r5, #4]
 801ba3e:	89a3      	ldrh	r3, [r4, #12]
 801ba40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba44:	0719      	lsls	r1, r3, #28
 801ba46:	d42c      	bmi.n	801baa2 <__swsetup_r+0x82>
 801ba48:	06dd      	lsls	r5, r3, #27
 801ba4a:	d411      	bmi.n	801ba70 <__swsetup_r+0x50>
 801ba4c:	2309      	movs	r3, #9
 801ba4e:	6033      	str	r3, [r6, #0]
 801ba50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ba54:	81a3      	strh	r3, [r4, #12]
 801ba56:	f04f 30ff 	mov.w	r0, #4294967295
 801ba5a:	e03e      	b.n	801bada <__swsetup_r+0xba>
 801ba5c:	4b25      	ldr	r3, [pc, #148]	; (801baf4 <__swsetup_r+0xd4>)
 801ba5e:	429c      	cmp	r4, r3
 801ba60:	d101      	bne.n	801ba66 <__swsetup_r+0x46>
 801ba62:	68ac      	ldr	r4, [r5, #8]
 801ba64:	e7eb      	b.n	801ba3e <__swsetup_r+0x1e>
 801ba66:	4b24      	ldr	r3, [pc, #144]	; (801baf8 <__swsetup_r+0xd8>)
 801ba68:	429c      	cmp	r4, r3
 801ba6a:	bf08      	it	eq
 801ba6c:	68ec      	ldreq	r4, [r5, #12]
 801ba6e:	e7e6      	b.n	801ba3e <__swsetup_r+0x1e>
 801ba70:	0758      	lsls	r0, r3, #29
 801ba72:	d512      	bpl.n	801ba9a <__swsetup_r+0x7a>
 801ba74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba76:	b141      	cbz	r1, 801ba8a <__swsetup_r+0x6a>
 801ba78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ba7c:	4299      	cmp	r1, r3
 801ba7e:	d002      	beq.n	801ba86 <__swsetup_r+0x66>
 801ba80:	4630      	mov	r0, r6
 801ba82:	f7ff fb8f 	bl	801b1a4 <_free_r>
 801ba86:	2300      	movs	r3, #0
 801ba88:	6363      	str	r3, [r4, #52]	; 0x34
 801ba8a:	89a3      	ldrh	r3, [r4, #12]
 801ba8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ba90:	81a3      	strh	r3, [r4, #12]
 801ba92:	2300      	movs	r3, #0
 801ba94:	6063      	str	r3, [r4, #4]
 801ba96:	6923      	ldr	r3, [r4, #16]
 801ba98:	6023      	str	r3, [r4, #0]
 801ba9a:	89a3      	ldrh	r3, [r4, #12]
 801ba9c:	f043 0308 	orr.w	r3, r3, #8
 801baa0:	81a3      	strh	r3, [r4, #12]
 801baa2:	6923      	ldr	r3, [r4, #16]
 801baa4:	b94b      	cbnz	r3, 801baba <__swsetup_r+0x9a>
 801baa6:	89a3      	ldrh	r3, [r4, #12]
 801baa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801baac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bab0:	d003      	beq.n	801baba <__swsetup_r+0x9a>
 801bab2:	4621      	mov	r1, r4
 801bab4:	4630      	mov	r0, r6
 801bab6:	f000 fa63 	bl	801bf80 <__smakebuf_r>
 801baba:	89a0      	ldrh	r0, [r4, #12]
 801babc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bac0:	f010 0301 	ands.w	r3, r0, #1
 801bac4:	d00a      	beq.n	801badc <__swsetup_r+0xbc>
 801bac6:	2300      	movs	r3, #0
 801bac8:	60a3      	str	r3, [r4, #8]
 801baca:	6963      	ldr	r3, [r4, #20]
 801bacc:	425b      	negs	r3, r3
 801bace:	61a3      	str	r3, [r4, #24]
 801bad0:	6923      	ldr	r3, [r4, #16]
 801bad2:	b943      	cbnz	r3, 801bae6 <__swsetup_r+0xc6>
 801bad4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bad8:	d1ba      	bne.n	801ba50 <__swsetup_r+0x30>
 801bada:	bd70      	pop	{r4, r5, r6, pc}
 801badc:	0781      	lsls	r1, r0, #30
 801bade:	bf58      	it	pl
 801bae0:	6963      	ldrpl	r3, [r4, #20]
 801bae2:	60a3      	str	r3, [r4, #8]
 801bae4:	e7f4      	b.n	801bad0 <__swsetup_r+0xb0>
 801bae6:	2000      	movs	r0, #0
 801bae8:	e7f7      	b.n	801bada <__swsetup_r+0xba>
 801baea:	bf00      	nop
 801baec:	240000bc 	.word	0x240000bc
 801baf0:	0801fa18 	.word	0x0801fa18
 801baf4:	0801fa38 	.word	0x0801fa38
 801baf8:	0801f9f8 	.word	0x0801f9f8

0801bafc <__register_exitproc>:
 801bafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb00:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801bbbc <__register_exitproc+0xc0>
 801bb04:	4606      	mov	r6, r0
 801bb06:	f8d8 0000 	ldr.w	r0, [r8]
 801bb0a:	461f      	mov	r7, r3
 801bb0c:	460d      	mov	r5, r1
 801bb0e:	4691      	mov	r9, r2
 801bb10:	f000 fa0e 	bl	801bf30 <__retarget_lock_acquire_recursive>
 801bb14:	4b25      	ldr	r3, [pc, #148]	; (801bbac <__register_exitproc+0xb0>)
 801bb16:	681c      	ldr	r4, [r3, #0]
 801bb18:	b934      	cbnz	r4, 801bb28 <__register_exitproc+0x2c>
 801bb1a:	4c25      	ldr	r4, [pc, #148]	; (801bbb0 <__register_exitproc+0xb4>)
 801bb1c:	601c      	str	r4, [r3, #0]
 801bb1e:	4b25      	ldr	r3, [pc, #148]	; (801bbb4 <__register_exitproc+0xb8>)
 801bb20:	b113      	cbz	r3, 801bb28 <__register_exitproc+0x2c>
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801bb28:	6863      	ldr	r3, [r4, #4]
 801bb2a:	2b1f      	cmp	r3, #31
 801bb2c:	dd07      	ble.n	801bb3e <__register_exitproc+0x42>
 801bb2e:	f8d8 0000 	ldr.w	r0, [r8]
 801bb32:	f000 f9ff 	bl	801bf34 <__retarget_lock_release_recursive>
 801bb36:	f04f 30ff 	mov.w	r0, #4294967295
 801bb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb3e:	b34e      	cbz	r6, 801bb94 <__register_exitproc+0x98>
 801bb40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801bb44:	b988      	cbnz	r0, 801bb6a <__register_exitproc+0x6e>
 801bb46:	4b1c      	ldr	r3, [pc, #112]	; (801bbb8 <__register_exitproc+0xbc>)
 801bb48:	b923      	cbnz	r3, 801bb54 <__register_exitproc+0x58>
 801bb4a:	f8d8 0000 	ldr.w	r0, [r8]
 801bb4e:	f000 f9f0 	bl	801bf32 <__retarget_lock_release>
 801bb52:	e7f0      	b.n	801bb36 <__register_exitproc+0x3a>
 801bb54:	f44f 7084 	mov.w	r0, #264	; 0x108
 801bb58:	f7ff fafe 	bl	801b158 <malloc>
 801bb5c:	2800      	cmp	r0, #0
 801bb5e:	d0f4      	beq.n	801bb4a <__register_exitproc+0x4e>
 801bb60:	2300      	movs	r3, #0
 801bb62:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801bb66:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801bb6a:	6863      	ldr	r3, [r4, #4]
 801bb6c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801bb70:	2201      	movs	r2, #1
 801bb72:	409a      	lsls	r2, r3
 801bb74:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801bb78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801bb7c:	4313      	orrs	r3, r2
 801bb7e:	2e02      	cmp	r6, #2
 801bb80:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801bb84:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801bb88:	bf02      	ittt	eq
 801bb8a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801bb8e:	431a      	orreq	r2, r3
 801bb90:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801bb94:	6863      	ldr	r3, [r4, #4]
 801bb96:	f8d8 0000 	ldr.w	r0, [r8]
 801bb9a:	1c5a      	adds	r2, r3, #1
 801bb9c:	3302      	adds	r3, #2
 801bb9e:	6062      	str	r2, [r4, #4]
 801bba0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801bba4:	f000 f9c6 	bl	801bf34 <__retarget_lock_release_recursive>
 801bba8:	2000      	movs	r0, #0
 801bbaa:	e7c6      	b.n	801bb3a <__register_exitproc+0x3e>
 801bbac:	24006e34 	.word	0x24006e34
 801bbb0:	24006da8 	.word	0x24006da8
 801bbb4:	0801f9f4 	.word	0x0801f9f4
 801bbb8:	0801b159 	.word	0x0801b159
 801bbbc:	24000120 	.word	0x24000120

0801bbc0 <__sflush_r>:
 801bbc0:	898a      	ldrh	r2, [r1, #12]
 801bbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbc6:	4605      	mov	r5, r0
 801bbc8:	0710      	lsls	r0, r2, #28
 801bbca:	460c      	mov	r4, r1
 801bbcc:	d458      	bmi.n	801bc80 <__sflush_r+0xc0>
 801bbce:	684b      	ldr	r3, [r1, #4]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	dc05      	bgt.n	801bbe0 <__sflush_r+0x20>
 801bbd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	dc02      	bgt.n	801bbe0 <__sflush_r+0x20>
 801bbda:	2000      	movs	r0, #0
 801bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bbe2:	2e00      	cmp	r6, #0
 801bbe4:	d0f9      	beq.n	801bbda <__sflush_r+0x1a>
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bbec:	682f      	ldr	r7, [r5, #0]
 801bbee:	602b      	str	r3, [r5, #0]
 801bbf0:	d032      	beq.n	801bc58 <__sflush_r+0x98>
 801bbf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bbf4:	89a3      	ldrh	r3, [r4, #12]
 801bbf6:	075a      	lsls	r2, r3, #29
 801bbf8:	d505      	bpl.n	801bc06 <__sflush_r+0x46>
 801bbfa:	6863      	ldr	r3, [r4, #4]
 801bbfc:	1ac0      	subs	r0, r0, r3
 801bbfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bc00:	b10b      	cbz	r3, 801bc06 <__sflush_r+0x46>
 801bc02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bc04:	1ac0      	subs	r0, r0, r3
 801bc06:	2300      	movs	r3, #0
 801bc08:	4602      	mov	r2, r0
 801bc0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc0c:	6a21      	ldr	r1, [r4, #32]
 801bc0e:	4628      	mov	r0, r5
 801bc10:	47b0      	blx	r6
 801bc12:	1c43      	adds	r3, r0, #1
 801bc14:	89a3      	ldrh	r3, [r4, #12]
 801bc16:	d106      	bne.n	801bc26 <__sflush_r+0x66>
 801bc18:	6829      	ldr	r1, [r5, #0]
 801bc1a:	291d      	cmp	r1, #29
 801bc1c:	d82c      	bhi.n	801bc78 <__sflush_r+0xb8>
 801bc1e:	4a2a      	ldr	r2, [pc, #168]	; (801bcc8 <__sflush_r+0x108>)
 801bc20:	40ca      	lsrs	r2, r1
 801bc22:	07d6      	lsls	r6, r2, #31
 801bc24:	d528      	bpl.n	801bc78 <__sflush_r+0xb8>
 801bc26:	2200      	movs	r2, #0
 801bc28:	6062      	str	r2, [r4, #4]
 801bc2a:	04d9      	lsls	r1, r3, #19
 801bc2c:	6922      	ldr	r2, [r4, #16]
 801bc2e:	6022      	str	r2, [r4, #0]
 801bc30:	d504      	bpl.n	801bc3c <__sflush_r+0x7c>
 801bc32:	1c42      	adds	r2, r0, #1
 801bc34:	d101      	bne.n	801bc3a <__sflush_r+0x7a>
 801bc36:	682b      	ldr	r3, [r5, #0]
 801bc38:	b903      	cbnz	r3, 801bc3c <__sflush_r+0x7c>
 801bc3a:	6560      	str	r0, [r4, #84]	; 0x54
 801bc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc3e:	602f      	str	r7, [r5, #0]
 801bc40:	2900      	cmp	r1, #0
 801bc42:	d0ca      	beq.n	801bbda <__sflush_r+0x1a>
 801bc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc48:	4299      	cmp	r1, r3
 801bc4a:	d002      	beq.n	801bc52 <__sflush_r+0x92>
 801bc4c:	4628      	mov	r0, r5
 801bc4e:	f7ff faa9 	bl	801b1a4 <_free_r>
 801bc52:	2000      	movs	r0, #0
 801bc54:	6360      	str	r0, [r4, #52]	; 0x34
 801bc56:	e7c1      	b.n	801bbdc <__sflush_r+0x1c>
 801bc58:	6a21      	ldr	r1, [r4, #32]
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	4628      	mov	r0, r5
 801bc5e:	47b0      	blx	r6
 801bc60:	1c41      	adds	r1, r0, #1
 801bc62:	d1c7      	bne.n	801bbf4 <__sflush_r+0x34>
 801bc64:	682b      	ldr	r3, [r5, #0]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d0c4      	beq.n	801bbf4 <__sflush_r+0x34>
 801bc6a:	2b1d      	cmp	r3, #29
 801bc6c:	d001      	beq.n	801bc72 <__sflush_r+0xb2>
 801bc6e:	2b16      	cmp	r3, #22
 801bc70:	d101      	bne.n	801bc76 <__sflush_r+0xb6>
 801bc72:	602f      	str	r7, [r5, #0]
 801bc74:	e7b1      	b.n	801bbda <__sflush_r+0x1a>
 801bc76:	89a3      	ldrh	r3, [r4, #12]
 801bc78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc7c:	81a3      	strh	r3, [r4, #12]
 801bc7e:	e7ad      	b.n	801bbdc <__sflush_r+0x1c>
 801bc80:	690f      	ldr	r7, [r1, #16]
 801bc82:	2f00      	cmp	r7, #0
 801bc84:	d0a9      	beq.n	801bbda <__sflush_r+0x1a>
 801bc86:	0793      	lsls	r3, r2, #30
 801bc88:	680e      	ldr	r6, [r1, #0]
 801bc8a:	bf08      	it	eq
 801bc8c:	694b      	ldreq	r3, [r1, #20]
 801bc8e:	600f      	str	r7, [r1, #0]
 801bc90:	bf18      	it	ne
 801bc92:	2300      	movne	r3, #0
 801bc94:	eba6 0807 	sub.w	r8, r6, r7
 801bc98:	608b      	str	r3, [r1, #8]
 801bc9a:	f1b8 0f00 	cmp.w	r8, #0
 801bc9e:	dd9c      	ble.n	801bbda <__sflush_r+0x1a>
 801bca0:	6a21      	ldr	r1, [r4, #32]
 801bca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bca4:	4643      	mov	r3, r8
 801bca6:	463a      	mov	r2, r7
 801bca8:	4628      	mov	r0, r5
 801bcaa:	47b0      	blx	r6
 801bcac:	2800      	cmp	r0, #0
 801bcae:	dc06      	bgt.n	801bcbe <__sflush_r+0xfe>
 801bcb0:	89a3      	ldrh	r3, [r4, #12]
 801bcb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcb6:	81a3      	strh	r3, [r4, #12]
 801bcb8:	f04f 30ff 	mov.w	r0, #4294967295
 801bcbc:	e78e      	b.n	801bbdc <__sflush_r+0x1c>
 801bcbe:	4407      	add	r7, r0
 801bcc0:	eba8 0800 	sub.w	r8, r8, r0
 801bcc4:	e7e9      	b.n	801bc9a <__sflush_r+0xda>
 801bcc6:	bf00      	nop
 801bcc8:	20400001 	.word	0x20400001

0801bccc <_fflush_r>:
 801bccc:	b538      	push	{r3, r4, r5, lr}
 801bcce:	690b      	ldr	r3, [r1, #16]
 801bcd0:	4605      	mov	r5, r0
 801bcd2:	460c      	mov	r4, r1
 801bcd4:	b913      	cbnz	r3, 801bcdc <_fflush_r+0x10>
 801bcd6:	2500      	movs	r5, #0
 801bcd8:	4628      	mov	r0, r5
 801bcda:	bd38      	pop	{r3, r4, r5, pc}
 801bcdc:	b118      	cbz	r0, 801bce6 <_fflush_r+0x1a>
 801bcde:	6983      	ldr	r3, [r0, #24]
 801bce0:	b90b      	cbnz	r3, 801bce6 <_fflush_r+0x1a>
 801bce2:	f000 f887 	bl	801bdf4 <__sinit>
 801bce6:	4b14      	ldr	r3, [pc, #80]	; (801bd38 <_fflush_r+0x6c>)
 801bce8:	429c      	cmp	r4, r3
 801bcea:	d11b      	bne.n	801bd24 <_fflush_r+0x58>
 801bcec:	686c      	ldr	r4, [r5, #4]
 801bcee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d0ef      	beq.n	801bcd6 <_fflush_r+0xa>
 801bcf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bcf8:	07d0      	lsls	r0, r2, #31
 801bcfa:	d404      	bmi.n	801bd06 <_fflush_r+0x3a>
 801bcfc:	0599      	lsls	r1, r3, #22
 801bcfe:	d402      	bmi.n	801bd06 <_fflush_r+0x3a>
 801bd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd02:	f000 f915 	bl	801bf30 <__retarget_lock_acquire_recursive>
 801bd06:	4628      	mov	r0, r5
 801bd08:	4621      	mov	r1, r4
 801bd0a:	f7ff ff59 	bl	801bbc0 <__sflush_r>
 801bd0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd10:	07da      	lsls	r2, r3, #31
 801bd12:	4605      	mov	r5, r0
 801bd14:	d4e0      	bmi.n	801bcd8 <_fflush_r+0xc>
 801bd16:	89a3      	ldrh	r3, [r4, #12]
 801bd18:	059b      	lsls	r3, r3, #22
 801bd1a:	d4dd      	bmi.n	801bcd8 <_fflush_r+0xc>
 801bd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd1e:	f000 f909 	bl	801bf34 <__retarget_lock_release_recursive>
 801bd22:	e7d9      	b.n	801bcd8 <_fflush_r+0xc>
 801bd24:	4b05      	ldr	r3, [pc, #20]	; (801bd3c <_fflush_r+0x70>)
 801bd26:	429c      	cmp	r4, r3
 801bd28:	d101      	bne.n	801bd2e <_fflush_r+0x62>
 801bd2a:	68ac      	ldr	r4, [r5, #8]
 801bd2c:	e7df      	b.n	801bcee <_fflush_r+0x22>
 801bd2e:	4b04      	ldr	r3, [pc, #16]	; (801bd40 <_fflush_r+0x74>)
 801bd30:	429c      	cmp	r4, r3
 801bd32:	bf08      	it	eq
 801bd34:	68ec      	ldreq	r4, [r5, #12]
 801bd36:	e7da      	b.n	801bcee <_fflush_r+0x22>
 801bd38:	0801fa18 	.word	0x0801fa18
 801bd3c:	0801fa38 	.word	0x0801fa38
 801bd40:	0801f9f8 	.word	0x0801f9f8

0801bd44 <std>:
 801bd44:	2300      	movs	r3, #0
 801bd46:	b510      	push	{r4, lr}
 801bd48:	4604      	mov	r4, r0
 801bd4a:	e9c0 3300 	strd	r3, r3, [r0]
 801bd4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bd52:	6083      	str	r3, [r0, #8]
 801bd54:	8181      	strh	r1, [r0, #12]
 801bd56:	6643      	str	r3, [r0, #100]	; 0x64
 801bd58:	81c2      	strh	r2, [r0, #14]
 801bd5a:	6183      	str	r3, [r0, #24]
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	2208      	movs	r2, #8
 801bd60:	305c      	adds	r0, #92	; 0x5c
 801bd62:	f7ff fa17 	bl	801b194 <memset>
 801bd66:	4b05      	ldr	r3, [pc, #20]	; (801bd7c <std+0x38>)
 801bd68:	6263      	str	r3, [r4, #36]	; 0x24
 801bd6a:	4b05      	ldr	r3, [pc, #20]	; (801bd80 <std+0x3c>)
 801bd6c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bd6e:	4b05      	ldr	r3, [pc, #20]	; (801bd84 <std+0x40>)
 801bd70:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bd72:	4b05      	ldr	r3, [pc, #20]	; (801bd88 <std+0x44>)
 801bd74:	6224      	str	r4, [r4, #32]
 801bd76:	6323      	str	r3, [r4, #48]	; 0x30
 801bd78:	bd10      	pop	{r4, pc}
 801bd7a:	bf00      	nop
 801bd7c:	0801c019 	.word	0x0801c019
 801bd80:	0801c03b 	.word	0x0801c03b
 801bd84:	0801c073 	.word	0x0801c073
 801bd88:	0801c097 	.word	0x0801c097

0801bd8c <_cleanup_r>:
 801bd8c:	4901      	ldr	r1, [pc, #4]	; (801bd94 <_cleanup_r+0x8>)
 801bd8e:	f000 b8af 	b.w	801bef0 <_fwalk_reent>
 801bd92:	bf00      	nop
 801bd94:	0801bccd 	.word	0x0801bccd

0801bd98 <__sfmoreglue>:
 801bd98:	b570      	push	{r4, r5, r6, lr}
 801bd9a:	1e4a      	subs	r2, r1, #1
 801bd9c:	2568      	movs	r5, #104	; 0x68
 801bd9e:	4355      	muls	r5, r2
 801bda0:	460e      	mov	r6, r1
 801bda2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bda6:	f7ff fa4d 	bl	801b244 <_malloc_r>
 801bdaa:	4604      	mov	r4, r0
 801bdac:	b140      	cbz	r0, 801bdc0 <__sfmoreglue+0x28>
 801bdae:	2100      	movs	r1, #0
 801bdb0:	e9c0 1600 	strd	r1, r6, [r0]
 801bdb4:	300c      	adds	r0, #12
 801bdb6:	60a0      	str	r0, [r4, #8]
 801bdb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bdbc:	f7ff f9ea 	bl	801b194 <memset>
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	bd70      	pop	{r4, r5, r6, pc}

0801bdc4 <__sfp_lock_acquire>:
 801bdc4:	4801      	ldr	r0, [pc, #4]	; (801bdcc <__sfp_lock_acquire+0x8>)
 801bdc6:	f000 b8b3 	b.w	801bf30 <__retarget_lock_acquire_recursive>
 801bdca:	bf00      	nop
 801bdcc:	24007248 	.word	0x24007248

0801bdd0 <__sfp_lock_release>:
 801bdd0:	4801      	ldr	r0, [pc, #4]	; (801bdd8 <__sfp_lock_release+0x8>)
 801bdd2:	f000 b8af 	b.w	801bf34 <__retarget_lock_release_recursive>
 801bdd6:	bf00      	nop
 801bdd8:	24007248 	.word	0x24007248

0801bddc <__sinit_lock_acquire>:
 801bddc:	4801      	ldr	r0, [pc, #4]	; (801bde4 <__sinit_lock_acquire+0x8>)
 801bdde:	f000 b8a7 	b.w	801bf30 <__retarget_lock_acquire_recursive>
 801bde2:	bf00      	nop
 801bde4:	24007243 	.word	0x24007243

0801bde8 <__sinit_lock_release>:
 801bde8:	4801      	ldr	r0, [pc, #4]	; (801bdf0 <__sinit_lock_release+0x8>)
 801bdea:	f000 b8a3 	b.w	801bf34 <__retarget_lock_release_recursive>
 801bdee:	bf00      	nop
 801bdf0:	24007243 	.word	0x24007243

0801bdf4 <__sinit>:
 801bdf4:	b510      	push	{r4, lr}
 801bdf6:	4604      	mov	r4, r0
 801bdf8:	f7ff fff0 	bl	801bddc <__sinit_lock_acquire>
 801bdfc:	69a3      	ldr	r3, [r4, #24]
 801bdfe:	b11b      	cbz	r3, 801be08 <__sinit+0x14>
 801be00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be04:	f7ff bff0 	b.w	801bde8 <__sinit_lock_release>
 801be08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801be0c:	6523      	str	r3, [r4, #80]	; 0x50
 801be0e:	4b13      	ldr	r3, [pc, #76]	; (801be5c <__sinit+0x68>)
 801be10:	4a13      	ldr	r2, [pc, #76]	; (801be60 <__sinit+0x6c>)
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	62a2      	str	r2, [r4, #40]	; 0x28
 801be16:	42a3      	cmp	r3, r4
 801be18:	bf04      	itt	eq
 801be1a:	2301      	moveq	r3, #1
 801be1c:	61a3      	streq	r3, [r4, #24]
 801be1e:	4620      	mov	r0, r4
 801be20:	f000 f820 	bl	801be64 <__sfp>
 801be24:	6060      	str	r0, [r4, #4]
 801be26:	4620      	mov	r0, r4
 801be28:	f000 f81c 	bl	801be64 <__sfp>
 801be2c:	60a0      	str	r0, [r4, #8]
 801be2e:	4620      	mov	r0, r4
 801be30:	f000 f818 	bl	801be64 <__sfp>
 801be34:	2200      	movs	r2, #0
 801be36:	60e0      	str	r0, [r4, #12]
 801be38:	2104      	movs	r1, #4
 801be3a:	6860      	ldr	r0, [r4, #4]
 801be3c:	f7ff ff82 	bl	801bd44 <std>
 801be40:	68a0      	ldr	r0, [r4, #8]
 801be42:	2201      	movs	r2, #1
 801be44:	2109      	movs	r1, #9
 801be46:	f7ff ff7d 	bl	801bd44 <std>
 801be4a:	68e0      	ldr	r0, [r4, #12]
 801be4c:	2202      	movs	r2, #2
 801be4e:	2112      	movs	r1, #18
 801be50:	f7ff ff78 	bl	801bd44 <std>
 801be54:	2301      	movs	r3, #1
 801be56:	61a3      	str	r3, [r4, #24]
 801be58:	e7d2      	b.n	801be00 <__sinit+0xc>
 801be5a:	bf00      	nop
 801be5c:	0801f9bc 	.word	0x0801f9bc
 801be60:	0801bd8d 	.word	0x0801bd8d

0801be64 <__sfp>:
 801be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be66:	4607      	mov	r7, r0
 801be68:	f7ff ffac 	bl	801bdc4 <__sfp_lock_acquire>
 801be6c:	4b1e      	ldr	r3, [pc, #120]	; (801bee8 <__sfp+0x84>)
 801be6e:	681e      	ldr	r6, [r3, #0]
 801be70:	69b3      	ldr	r3, [r6, #24]
 801be72:	b913      	cbnz	r3, 801be7a <__sfp+0x16>
 801be74:	4630      	mov	r0, r6
 801be76:	f7ff ffbd 	bl	801bdf4 <__sinit>
 801be7a:	3648      	adds	r6, #72	; 0x48
 801be7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801be80:	3b01      	subs	r3, #1
 801be82:	d503      	bpl.n	801be8c <__sfp+0x28>
 801be84:	6833      	ldr	r3, [r6, #0]
 801be86:	b30b      	cbz	r3, 801becc <__sfp+0x68>
 801be88:	6836      	ldr	r6, [r6, #0]
 801be8a:	e7f7      	b.n	801be7c <__sfp+0x18>
 801be8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801be90:	b9d5      	cbnz	r5, 801bec8 <__sfp+0x64>
 801be92:	4b16      	ldr	r3, [pc, #88]	; (801beec <__sfp+0x88>)
 801be94:	60e3      	str	r3, [r4, #12]
 801be96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801be9a:	6665      	str	r5, [r4, #100]	; 0x64
 801be9c:	f000 f847 	bl	801bf2e <__retarget_lock_init_recursive>
 801bea0:	f7ff ff96 	bl	801bdd0 <__sfp_lock_release>
 801bea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801beac:	6025      	str	r5, [r4, #0]
 801beae:	61a5      	str	r5, [r4, #24]
 801beb0:	2208      	movs	r2, #8
 801beb2:	4629      	mov	r1, r5
 801beb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801beb8:	f7ff f96c 	bl	801b194 <memset>
 801bebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bec4:	4620      	mov	r0, r4
 801bec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bec8:	3468      	adds	r4, #104	; 0x68
 801beca:	e7d9      	b.n	801be80 <__sfp+0x1c>
 801becc:	2104      	movs	r1, #4
 801bece:	4638      	mov	r0, r7
 801bed0:	f7ff ff62 	bl	801bd98 <__sfmoreglue>
 801bed4:	4604      	mov	r4, r0
 801bed6:	6030      	str	r0, [r6, #0]
 801bed8:	2800      	cmp	r0, #0
 801beda:	d1d5      	bne.n	801be88 <__sfp+0x24>
 801bedc:	f7ff ff78 	bl	801bdd0 <__sfp_lock_release>
 801bee0:	230c      	movs	r3, #12
 801bee2:	603b      	str	r3, [r7, #0]
 801bee4:	e7ee      	b.n	801bec4 <__sfp+0x60>
 801bee6:	bf00      	nop
 801bee8:	0801f9bc 	.word	0x0801f9bc
 801beec:	ffff0001 	.word	0xffff0001

0801bef0 <_fwalk_reent>:
 801bef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bef4:	4606      	mov	r6, r0
 801bef6:	4688      	mov	r8, r1
 801bef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801befc:	2700      	movs	r7, #0
 801befe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bf02:	f1b9 0901 	subs.w	r9, r9, #1
 801bf06:	d505      	bpl.n	801bf14 <_fwalk_reent+0x24>
 801bf08:	6824      	ldr	r4, [r4, #0]
 801bf0a:	2c00      	cmp	r4, #0
 801bf0c:	d1f7      	bne.n	801befe <_fwalk_reent+0xe>
 801bf0e:	4638      	mov	r0, r7
 801bf10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf14:	89ab      	ldrh	r3, [r5, #12]
 801bf16:	2b01      	cmp	r3, #1
 801bf18:	d907      	bls.n	801bf2a <_fwalk_reent+0x3a>
 801bf1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bf1e:	3301      	adds	r3, #1
 801bf20:	d003      	beq.n	801bf2a <_fwalk_reent+0x3a>
 801bf22:	4629      	mov	r1, r5
 801bf24:	4630      	mov	r0, r6
 801bf26:	47c0      	blx	r8
 801bf28:	4307      	orrs	r7, r0
 801bf2a:	3568      	adds	r5, #104	; 0x68
 801bf2c:	e7e9      	b.n	801bf02 <_fwalk_reent+0x12>

0801bf2e <__retarget_lock_init_recursive>:
 801bf2e:	4770      	bx	lr

0801bf30 <__retarget_lock_acquire_recursive>:
 801bf30:	4770      	bx	lr

0801bf32 <__retarget_lock_release>:
 801bf32:	4770      	bx	lr

0801bf34 <__retarget_lock_release_recursive>:
 801bf34:	4770      	bx	lr

0801bf36 <__swhatbuf_r>:
 801bf36:	b570      	push	{r4, r5, r6, lr}
 801bf38:	460e      	mov	r6, r1
 801bf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf3e:	2900      	cmp	r1, #0
 801bf40:	b096      	sub	sp, #88	; 0x58
 801bf42:	4614      	mov	r4, r2
 801bf44:	461d      	mov	r5, r3
 801bf46:	da07      	bge.n	801bf58 <__swhatbuf_r+0x22>
 801bf48:	2300      	movs	r3, #0
 801bf4a:	602b      	str	r3, [r5, #0]
 801bf4c:	89b3      	ldrh	r3, [r6, #12]
 801bf4e:	061a      	lsls	r2, r3, #24
 801bf50:	d410      	bmi.n	801bf74 <__swhatbuf_r+0x3e>
 801bf52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bf56:	e00e      	b.n	801bf76 <__swhatbuf_r+0x40>
 801bf58:	466a      	mov	r2, sp
 801bf5a:	f000 f8c3 	bl	801c0e4 <_fstat_r>
 801bf5e:	2800      	cmp	r0, #0
 801bf60:	dbf2      	blt.n	801bf48 <__swhatbuf_r+0x12>
 801bf62:	9a01      	ldr	r2, [sp, #4]
 801bf64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bf68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bf6c:	425a      	negs	r2, r3
 801bf6e:	415a      	adcs	r2, r3
 801bf70:	602a      	str	r2, [r5, #0]
 801bf72:	e7ee      	b.n	801bf52 <__swhatbuf_r+0x1c>
 801bf74:	2340      	movs	r3, #64	; 0x40
 801bf76:	2000      	movs	r0, #0
 801bf78:	6023      	str	r3, [r4, #0]
 801bf7a:	b016      	add	sp, #88	; 0x58
 801bf7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bf80 <__smakebuf_r>:
 801bf80:	898b      	ldrh	r3, [r1, #12]
 801bf82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bf84:	079d      	lsls	r5, r3, #30
 801bf86:	4606      	mov	r6, r0
 801bf88:	460c      	mov	r4, r1
 801bf8a:	d507      	bpl.n	801bf9c <__smakebuf_r+0x1c>
 801bf8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bf90:	6023      	str	r3, [r4, #0]
 801bf92:	6123      	str	r3, [r4, #16]
 801bf94:	2301      	movs	r3, #1
 801bf96:	6163      	str	r3, [r4, #20]
 801bf98:	b002      	add	sp, #8
 801bf9a:	bd70      	pop	{r4, r5, r6, pc}
 801bf9c:	ab01      	add	r3, sp, #4
 801bf9e:	466a      	mov	r2, sp
 801bfa0:	f7ff ffc9 	bl	801bf36 <__swhatbuf_r>
 801bfa4:	9900      	ldr	r1, [sp, #0]
 801bfa6:	4605      	mov	r5, r0
 801bfa8:	4630      	mov	r0, r6
 801bfaa:	f7ff f94b 	bl	801b244 <_malloc_r>
 801bfae:	b948      	cbnz	r0, 801bfc4 <__smakebuf_r+0x44>
 801bfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfb4:	059a      	lsls	r2, r3, #22
 801bfb6:	d4ef      	bmi.n	801bf98 <__smakebuf_r+0x18>
 801bfb8:	f023 0303 	bic.w	r3, r3, #3
 801bfbc:	f043 0302 	orr.w	r3, r3, #2
 801bfc0:	81a3      	strh	r3, [r4, #12]
 801bfc2:	e7e3      	b.n	801bf8c <__smakebuf_r+0xc>
 801bfc4:	4b0d      	ldr	r3, [pc, #52]	; (801bffc <__smakebuf_r+0x7c>)
 801bfc6:	62b3      	str	r3, [r6, #40]	; 0x28
 801bfc8:	89a3      	ldrh	r3, [r4, #12]
 801bfca:	6020      	str	r0, [r4, #0]
 801bfcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bfd0:	81a3      	strh	r3, [r4, #12]
 801bfd2:	9b00      	ldr	r3, [sp, #0]
 801bfd4:	6163      	str	r3, [r4, #20]
 801bfd6:	9b01      	ldr	r3, [sp, #4]
 801bfd8:	6120      	str	r0, [r4, #16]
 801bfda:	b15b      	cbz	r3, 801bff4 <__smakebuf_r+0x74>
 801bfdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bfe0:	4630      	mov	r0, r6
 801bfe2:	f000 f891 	bl	801c108 <_isatty_r>
 801bfe6:	b128      	cbz	r0, 801bff4 <__smakebuf_r+0x74>
 801bfe8:	89a3      	ldrh	r3, [r4, #12]
 801bfea:	f023 0303 	bic.w	r3, r3, #3
 801bfee:	f043 0301 	orr.w	r3, r3, #1
 801bff2:	81a3      	strh	r3, [r4, #12]
 801bff4:	89a0      	ldrh	r0, [r4, #12]
 801bff6:	4305      	orrs	r5, r0
 801bff8:	81a5      	strh	r5, [r4, #12]
 801bffa:	e7cd      	b.n	801bf98 <__smakebuf_r+0x18>
 801bffc:	0801bd8d 	.word	0x0801bd8d

0801c000 <__malloc_lock>:
 801c000:	4801      	ldr	r0, [pc, #4]	; (801c008 <__malloc_lock+0x8>)
 801c002:	f7ff bf95 	b.w	801bf30 <__retarget_lock_acquire_recursive>
 801c006:	bf00      	nop
 801c008:	24007244 	.word	0x24007244

0801c00c <__malloc_unlock>:
 801c00c:	4801      	ldr	r0, [pc, #4]	; (801c014 <__malloc_unlock+0x8>)
 801c00e:	f7ff bf91 	b.w	801bf34 <__retarget_lock_release_recursive>
 801c012:	bf00      	nop
 801c014:	24007244 	.word	0x24007244

0801c018 <__sread>:
 801c018:	b510      	push	{r4, lr}
 801c01a:	460c      	mov	r4, r1
 801c01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c020:	f000 f894 	bl	801c14c <_read_r>
 801c024:	2800      	cmp	r0, #0
 801c026:	bfab      	itete	ge
 801c028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c02a:	89a3      	ldrhlt	r3, [r4, #12]
 801c02c:	181b      	addge	r3, r3, r0
 801c02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c032:	bfac      	ite	ge
 801c034:	6563      	strge	r3, [r4, #84]	; 0x54
 801c036:	81a3      	strhlt	r3, [r4, #12]
 801c038:	bd10      	pop	{r4, pc}

0801c03a <__swrite>:
 801c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c03e:	461f      	mov	r7, r3
 801c040:	898b      	ldrh	r3, [r1, #12]
 801c042:	05db      	lsls	r3, r3, #23
 801c044:	4605      	mov	r5, r0
 801c046:	460c      	mov	r4, r1
 801c048:	4616      	mov	r6, r2
 801c04a:	d505      	bpl.n	801c058 <__swrite+0x1e>
 801c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c050:	2302      	movs	r3, #2
 801c052:	2200      	movs	r2, #0
 801c054:	f000 f868 	bl	801c128 <_lseek_r>
 801c058:	89a3      	ldrh	r3, [r4, #12]
 801c05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c062:	81a3      	strh	r3, [r4, #12]
 801c064:	4632      	mov	r2, r6
 801c066:	463b      	mov	r3, r7
 801c068:	4628      	mov	r0, r5
 801c06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c06e:	f000 b817 	b.w	801c0a0 <_write_r>

0801c072 <__sseek>:
 801c072:	b510      	push	{r4, lr}
 801c074:	460c      	mov	r4, r1
 801c076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c07a:	f000 f855 	bl	801c128 <_lseek_r>
 801c07e:	1c43      	adds	r3, r0, #1
 801c080:	89a3      	ldrh	r3, [r4, #12]
 801c082:	bf15      	itete	ne
 801c084:	6560      	strne	r0, [r4, #84]	; 0x54
 801c086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c08e:	81a3      	strheq	r3, [r4, #12]
 801c090:	bf18      	it	ne
 801c092:	81a3      	strhne	r3, [r4, #12]
 801c094:	bd10      	pop	{r4, pc}

0801c096 <__sclose>:
 801c096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c09a:	f000 b813 	b.w	801c0c4 <_close_r>
	...

0801c0a0 <_write_r>:
 801c0a0:	b538      	push	{r3, r4, r5, lr}
 801c0a2:	4d07      	ldr	r5, [pc, #28]	; (801c0c0 <_write_r+0x20>)
 801c0a4:	4604      	mov	r4, r0
 801c0a6:	4608      	mov	r0, r1
 801c0a8:	4611      	mov	r1, r2
 801c0aa:	2200      	movs	r2, #0
 801c0ac:	602a      	str	r2, [r5, #0]
 801c0ae:	461a      	mov	r2, r3
 801c0b0:	f7e5 fbf1 	bl	8001896 <_write>
 801c0b4:	1c43      	adds	r3, r0, #1
 801c0b6:	d102      	bne.n	801c0be <_write_r+0x1e>
 801c0b8:	682b      	ldr	r3, [r5, #0]
 801c0ba:	b103      	cbz	r3, 801c0be <_write_r+0x1e>
 801c0bc:	6023      	str	r3, [r4, #0]
 801c0be:	bd38      	pop	{r3, r4, r5, pc}
 801c0c0:	2400724c 	.word	0x2400724c

0801c0c4 <_close_r>:
 801c0c4:	b538      	push	{r3, r4, r5, lr}
 801c0c6:	4d06      	ldr	r5, [pc, #24]	; (801c0e0 <_close_r+0x1c>)
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	4604      	mov	r4, r0
 801c0cc:	4608      	mov	r0, r1
 801c0ce:	602b      	str	r3, [r5, #0]
 801c0d0:	f7e5 fbee 	bl	80018b0 <_close>
 801c0d4:	1c43      	adds	r3, r0, #1
 801c0d6:	d102      	bne.n	801c0de <_close_r+0x1a>
 801c0d8:	682b      	ldr	r3, [r5, #0]
 801c0da:	b103      	cbz	r3, 801c0de <_close_r+0x1a>
 801c0dc:	6023      	str	r3, [r4, #0]
 801c0de:	bd38      	pop	{r3, r4, r5, pc}
 801c0e0:	2400724c 	.word	0x2400724c

0801c0e4 <_fstat_r>:
 801c0e4:	b538      	push	{r3, r4, r5, lr}
 801c0e6:	4d07      	ldr	r5, [pc, #28]	; (801c104 <_fstat_r+0x20>)
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	4604      	mov	r4, r0
 801c0ec:	4608      	mov	r0, r1
 801c0ee:	4611      	mov	r1, r2
 801c0f0:	602b      	str	r3, [r5, #0]
 801c0f2:	f7e5 fbe0 	bl	80018b6 <_fstat>
 801c0f6:	1c43      	adds	r3, r0, #1
 801c0f8:	d102      	bne.n	801c100 <_fstat_r+0x1c>
 801c0fa:	682b      	ldr	r3, [r5, #0]
 801c0fc:	b103      	cbz	r3, 801c100 <_fstat_r+0x1c>
 801c0fe:	6023      	str	r3, [r4, #0]
 801c100:	bd38      	pop	{r3, r4, r5, pc}
 801c102:	bf00      	nop
 801c104:	2400724c 	.word	0x2400724c

0801c108 <_isatty_r>:
 801c108:	b538      	push	{r3, r4, r5, lr}
 801c10a:	4d06      	ldr	r5, [pc, #24]	; (801c124 <_isatty_r+0x1c>)
 801c10c:	2300      	movs	r3, #0
 801c10e:	4604      	mov	r4, r0
 801c110:	4608      	mov	r0, r1
 801c112:	602b      	str	r3, [r5, #0]
 801c114:	f7e5 fbd4 	bl	80018c0 <_isatty>
 801c118:	1c43      	adds	r3, r0, #1
 801c11a:	d102      	bne.n	801c122 <_isatty_r+0x1a>
 801c11c:	682b      	ldr	r3, [r5, #0]
 801c11e:	b103      	cbz	r3, 801c122 <_isatty_r+0x1a>
 801c120:	6023      	str	r3, [r4, #0]
 801c122:	bd38      	pop	{r3, r4, r5, pc}
 801c124:	2400724c 	.word	0x2400724c

0801c128 <_lseek_r>:
 801c128:	b538      	push	{r3, r4, r5, lr}
 801c12a:	4d07      	ldr	r5, [pc, #28]	; (801c148 <_lseek_r+0x20>)
 801c12c:	4604      	mov	r4, r0
 801c12e:	4608      	mov	r0, r1
 801c130:	4611      	mov	r1, r2
 801c132:	2200      	movs	r2, #0
 801c134:	602a      	str	r2, [r5, #0]
 801c136:	461a      	mov	r2, r3
 801c138:	f7e5 fbc4 	bl	80018c4 <_lseek>
 801c13c:	1c43      	adds	r3, r0, #1
 801c13e:	d102      	bne.n	801c146 <_lseek_r+0x1e>
 801c140:	682b      	ldr	r3, [r5, #0]
 801c142:	b103      	cbz	r3, 801c146 <_lseek_r+0x1e>
 801c144:	6023      	str	r3, [r4, #0]
 801c146:	bd38      	pop	{r3, r4, r5, pc}
 801c148:	2400724c 	.word	0x2400724c

0801c14c <_read_r>:
 801c14c:	b538      	push	{r3, r4, r5, lr}
 801c14e:	4d07      	ldr	r5, [pc, #28]	; (801c16c <_read_r+0x20>)
 801c150:	4604      	mov	r4, r0
 801c152:	4608      	mov	r0, r1
 801c154:	4611      	mov	r1, r2
 801c156:	2200      	movs	r2, #0
 801c158:	602a      	str	r2, [r5, #0]
 801c15a:	461a      	mov	r2, r3
 801c15c:	f7e5 fb8e 	bl	800187c <_read>
 801c160:	1c43      	adds	r3, r0, #1
 801c162:	d102      	bne.n	801c16a <_read_r+0x1e>
 801c164:	682b      	ldr	r3, [r5, #0]
 801c166:	b103      	cbz	r3, 801c16a <_read_r+0x1e>
 801c168:	6023      	str	r3, [r4, #0]
 801c16a:	bd38      	pop	{r3, r4, r5, pc}
 801c16c:	2400724c 	.word	0x2400724c

0801c170 <_init>:
 801c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c172:	bf00      	nop
 801c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c176:	bc08      	pop	{r3}
 801c178:	469e      	mov	lr, r3
 801c17a:	4770      	bx	lr

0801c17c <_fini>:
 801c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c17e:	bf00      	nop
 801c180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c182:	bc08      	pop	{r3}
 801c184:	469e      	mov	lr, r3
 801c186:	4770      	bx	lr
